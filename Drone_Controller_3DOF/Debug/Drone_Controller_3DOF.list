
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bc8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000664  08008cd8  08008cd8  00018cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800933c  0800933c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800933c  0800933c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800933c  0800933c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800933c  0800933c  0001933c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009344  08009344  00019344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800934c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001930  20000078  080093c4  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200019a8  080093c4  000219a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028141  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ecb  00000000  00000000  000481e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  0004d0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001610  00000000  00000000  0004e840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005f40  00000000  00000000  0004fe50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d9f6  00000000  00000000  00055d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096a9e  00000000  00000000  00073786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010a224  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068a4  00000000  00000000  0010a278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08008cc0 	.word	0x08008cc0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08008cc0 	.word	0x08008cc0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_frsub>:
 80004d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80004dc:	e002      	b.n	80004e4 <__addsf3>
 80004de:	bf00      	nop

080004e0 <__aeabi_fsub>:
 80004e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080004e4 <__addsf3>:
 80004e4:	0042      	lsls	r2, r0, #1
 80004e6:	bf1f      	itttt	ne
 80004e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004ec:	ea92 0f03 	teqne	r2, r3
 80004f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004f8:	d06a      	beq.n	80005d0 <__addsf3+0xec>
 80004fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000502:	bfc1      	itttt	gt
 8000504:	18d2      	addgt	r2, r2, r3
 8000506:	4041      	eorgt	r1, r0
 8000508:	4048      	eorgt	r0, r1
 800050a:	4041      	eorgt	r1, r0
 800050c:	bfb8      	it	lt
 800050e:	425b      	neglt	r3, r3
 8000510:	2b19      	cmp	r3, #25
 8000512:	bf88      	it	hi
 8000514:	4770      	bxhi	lr
 8000516:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800051a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800051e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000522:	bf18      	it	ne
 8000524:	4240      	negne	r0, r0
 8000526:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800052e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000532:	bf18      	it	ne
 8000534:	4249      	negne	r1, r1
 8000536:	ea92 0f03 	teq	r2, r3
 800053a:	d03f      	beq.n	80005bc <__addsf3+0xd8>
 800053c:	f1a2 0201 	sub.w	r2, r2, #1
 8000540:	fa41 fc03 	asr.w	ip, r1, r3
 8000544:	eb10 000c 	adds.w	r0, r0, ip
 8000548:	f1c3 0320 	rsb	r3, r3, #32
 800054c:	fa01 f103 	lsl.w	r1, r1, r3
 8000550:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000554:	d502      	bpl.n	800055c <__addsf3+0x78>
 8000556:	4249      	negs	r1, r1
 8000558:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800055c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000560:	d313      	bcc.n	800058a <__addsf3+0xa6>
 8000562:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000566:	d306      	bcc.n	8000576 <__addsf3+0x92>
 8000568:	0840      	lsrs	r0, r0, #1
 800056a:	ea4f 0131 	mov.w	r1, r1, rrx
 800056e:	f102 0201 	add.w	r2, r2, #1
 8000572:	2afe      	cmp	r2, #254	; 0xfe
 8000574:	d251      	bcs.n	800061a <__addsf3+0x136>
 8000576:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800057a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800057e:	bf08      	it	eq
 8000580:	f020 0001 	biceq.w	r0, r0, #1
 8000584:	ea40 0003 	orr.w	r0, r0, r3
 8000588:	4770      	bx	lr
 800058a:	0049      	lsls	r1, r1, #1
 800058c:	eb40 0000 	adc.w	r0, r0, r0
 8000590:	3a01      	subs	r2, #1
 8000592:	bf28      	it	cs
 8000594:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000598:	d2ed      	bcs.n	8000576 <__addsf3+0x92>
 800059a:	fab0 fc80 	clz	ip, r0
 800059e:	f1ac 0c08 	sub.w	ip, ip, #8
 80005a2:	ebb2 020c 	subs.w	r2, r2, ip
 80005a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80005aa:	bfaa      	itet	ge
 80005ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005b0:	4252      	neglt	r2, r2
 80005b2:	4318      	orrge	r0, r3
 80005b4:	bfbc      	itt	lt
 80005b6:	40d0      	lsrlt	r0, r2
 80005b8:	4318      	orrlt	r0, r3
 80005ba:	4770      	bx	lr
 80005bc:	f092 0f00 	teq	r2, #0
 80005c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80005c4:	bf06      	itte	eq
 80005c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80005ca:	3201      	addeq	r2, #1
 80005cc:	3b01      	subne	r3, #1
 80005ce:	e7b5      	b.n	800053c <__addsf3+0x58>
 80005d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005d8:	bf18      	it	ne
 80005da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005de:	d021      	beq.n	8000624 <__addsf3+0x140>
 80005e0:	ea92 0f03 	teq	r2, r3
 80005e4:	d004      	beq.n	80005f0 <__addsf3+0x10c>
 80005e6:	f092 0f00 	teq	r2, #0
 80005ea:	bf08      	it	eq
 80005ec:	4608      	moveq	r0, r1
 80005ee:	4770      	bx	lr
 80005f0:	ea90 0f01 	teq	r0, r1
 80005f4:	bf1c      	itt	ne
 80005f6:	2000      	movne	r0, #0
 80005f8:	4770      	bxne	lr
 80005fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80005fe:	d104      	bne.n	800060a <__addsf3+0x126>
 8000600:	0040      	lsls	r0, r0, #1
 8000602:	bf28      	it	cs
 8000604:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000608:	4770      	bx	lr
 800060a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800060e:	bf3c      	itt	cc
 8000610:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000614:	4770      	bxcc	lr
 8000616:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800061a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800061e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000622:	4770      	bx	lr
 8000624:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000628:	bf16      	itet	ne
 800062a:	4608      	movne	r0, r1
 800062c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000630:	4601      	movne	r1, r0
 8000632:	0242      	lsls	r2, r0, #9
 8000634:	bf06      	itte	eq
 8000636:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800063a:	ea90 0f01 	teqeq	r0, r1
 800063e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000642:	4770      	bx	lr

08000644 <__aeabi_ui2f>:
 8000644:	f04f 0300 	mov.w	r3, #0
 8000648:	e004      	b.n	8000654 <__aeabi_i2f+0x8>
 800064a:	bf00      	nop

0800064c <__aeabi_i2f>:
 800064c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000650:	bf48      	it	mi
 8000652:	4240      	negmi	r0, r0
 8000654:	ea5f 0c00 	movs.w	ip, r0
 8000658:	bf08      	it	eq
 800065a:	4770      	bxeq	lr
 800065c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000660:	4601      	mov	r1, r0
 8000662:	f04f 0000 	mov.w	r0, #0
 8000666:	e01c      	b.n	80006a2 <__aeabi_l2f+0x2a>

08000668 <__aeabi_ul2f>:
 8000668:	ea50 0201 	orrs.w	r2, r0, r1
 800066c:	bf08      	it	eq
 800066e:	4770      	bxeq	lr
 8000670:	f04f 0300 	mov.w	r3, #0
 8000674:	e00a      	b.n	800068c <__aeabi_l2f+0x14>
 8000676:	bf00      	nop

08000678 <__aeabi_l2f>:
 8000678:	ea50 0201 	orrs.w	r2, r0, r1
 800067c:	bf08      	it	eq
 800067e:	4770      	bxeq	lr
 8000680:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000684:	d502      	bpl.n	800068c <__aeabi_l2f+0x14>
 8000686:	4240      	negs	r0, r0
 8000688:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800068c:	ea5f 0c01 	movs.w	ip, r1
 8000690:	bf02      	ittt	eq
 8000692:	4684      	moveq	ip, r0
 8000694:	4601      	moveq	r1, r0
 8000696:	2000      	moveq	r0, #0
 8000698:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800069c:	bf08      	it	eq
 800069e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80006a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80006a6:	fabc f28c 	clz	r2, ip
 80006aa:	3a08      	subs	r2, #8
 80006ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006b0:	db10      	blt.n	80006d4 <__aeabi_l2f+0x5c>
 80006b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80006b6:	4463      	add	r3, ip
 80006b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80006bc:	f1c2 0220 	rsb	r2, r2, #32
 80006c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006c4:	fa20 f202 	lsr.w	r2, r0, r2
 80006c8:	eb43 0002 	adc.w	r0, r3, r2
 80006cc:	bf08      	it	eq
 80006ce:	f020 0001 	biceq.w	r0, r0, #1
 80006d2:	4770      	bx	lr
 80006d4:	f102 0220 	add.w	r2, r2, #32
 80006d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80006dc:	f1c2 0220 	rsb	r2, r2, #32
 80006e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006e4:	fa21 f202 	lsr.w	r2, r1, r2
 80006e8:	eb43 0002 	adc.w	r0, r3, r2
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006f2:	4770      	bx	lr

080006f4 <__aeabi_fmul>:
 80006f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006fc:	bf1e      	ittt	ne
 80006fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000702:	ea92 0f0c 	teqne	r2, ip
 8000706:	ea93 0f0c 	teqne	r3, ip
 800070a:	d06f      	beq.n	80007ec <__aeabi_fmul+0xf8>
 800070c:	441a      	add	r2, r3
 800070e:	ea80 0c01 	eor.w	ip, r0, r1
 8000712:	0240      	lsls	r0, r0, #9
 8000714:	bf18      	it	ne
 8000716:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800071a:	d01e      	beq.n	800075a <__aeabi_fmul+0x66>
 800071c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000720:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000724:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000728:	fba0 3101 	umull	r3, r1, r0, r1
 800072c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000730:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000734:	bf3e      	ittt	cc
 8000736:	0049      	lslcc	r1, r1, #1
 8000738:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800073c:	005b      	lslcc	r3, r3, #1
 800073e:	ea40 0001 	orr.w	r0, r0, r1
 8000742:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000746:	2afd      	cmp	r2, #253	; 0xfd
 8000748:	d81d      	bhi.n	8000786 <__aeabi_fmul+0x92>
 800074a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800074e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000752:	bf08      	it	eq
 8000754:	f020 0001 	biceq.w	r0, r0, #1
 8000758:	4770      	bx	lr
 800075a:	f090 0f00 	teq	r0, #0
 800075e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000762:	bf08      	it	eq
 8000764:	0249      	lsleq	r1, r1, #9
 8000766:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800076a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800076e:	3a7f      	subs	r2, #127	; 0x7f
 8000770:	bfc2      	ittt	gt
 8000772:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000776:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800077a:	4770      	bxgt	lr
 800077c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000780:	f04f 0300 	mov.w	r3, #0
 8000784:	3a01      	subs	r2, #1
 8000786:	dc5d      	bgt.n	8000844 <__aeabi_fmul+0x150>
 8000788:	f112 0f19 	cmn.w	r2, #25
 800078c:	bfdc      	itt	le
 800078e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000792:	4770      	bxle	lr
 8000794:	f1c2 0200 	rsb	r2, r2, #0
 8000798:	0041      	lsls	r1, r0, #1
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	f1c2 0220 	rsb	r2, r2, #32
 80007a2:	fa00 fc02 	lsl.w	ip, r0, r2
 80007a6:	ea5f 0031 	movs.w	r0, r1, rrx
 80007aa:	f140 0000 	adc.w	r0, r0, #0
 80007ae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80007b2:	bf08      	it	eq
 80007b4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007b8:	4770      	bx	lr
 80007ba:	f092 0f00 	teq	r2, #0
 80007be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80007c2:	bf02      	ittt	eq
 80007c4:	0040      	lsleq	r0, r0, #1
 80007c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80007ca:	3a01      	subeq	r2, #1
 80007cc:	d0f9      	beq.n	80007c2 <__aeabi_fmul+0xce>
 80007ce:	ea40 000c 	orr.w	r0, r0, ip
 80007d2:	f093 0f00 	teq	r3, #0
 80007d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007da:	bf02      	ittt	eq
 80007dc:	0049      	lsleq	r1, r1, #1
 80007de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80007e2:	3b01      	subeq	r3, #1
 80007e4:	d0f9      	beq.n	80007da <__aeabi_fmul+0xe6>
 80007e6:	ea41 010c 	orr.w	r1, r1, ip
 80007ea:	e78f      	b.n	800070c <__aeabi_fmul+0x18>
 80007ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007f0:	ea92 0f0c 	teq	r2, ip
 80007f4:	bf18      	it	ne
 80007f6:	ea93 0f0c 	teqne	r3, ip
 80007fa:	d00a      	beq.n	8000812 <__aeabi_fmul+0x11e>
 80007fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000800:	bf18      	it	ne
 8000802:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000806:	d1d8      	bne.n	80007ba <__aeabi_fmul+0xc6>
 8000808:	ea80 0001 	eor.w	r0, r0, r1
 800080c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000810:	4770      	bx	lr
 8000812:	f090 0f00 	teq	r0, #0
 8000816:	bf17      	itett	ne
 8000818:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800081c:	4608      	moveq	r0, r1
 800081e:	f091 0f00 	teqne	r1, #0
 8000822:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000826:	d014      	beq.n	8000852 <__aeabi_fmul+0x15e>
 8000828:	ea92 0f0c 	teq	r2, ip
 800082c:	d101      	bne.n	8000832 <__aeabi_fmul+0x13e>
 800082e:	0242      	lsls	r2, r0, #9
 8000830:	d10f      	bne.n	8000852 <__aeabi_fmul+0x15e>
 8000832:	ea93 0f0c 	teq	r3, ip
 8000836:	d103      	bne.n	8000840 <__aeabi_fmul+0x14c>
 8000838:	024b      	lsls	r3, r1, #9
 800083a:	bf18      	it	ne
 800083c:	4608      	movne	r0, r1
 800083e:	d108      	bne.n	8000852 <__aeabi_fmul+0x15e>
 8000840:	ea80 0001 	eor.w	r0, r0, r1
 8000844:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000848:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800084c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000850:	4770      	bx	lr
 8000852:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000856:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800085a:	4770      	bx	lr

0800085c <__aeabi_fdiv>:
 800085c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000860:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000864:	bf1e      	ittt	ne
 8000866:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800086a:	ea92 0f0c 	teqne	r2, ip
 800086e:	ea93 0f0c 	teqne	r3, ip
 8000872:	d069      	beq.n	8000948 <__aeabi_fdiv+0xec>
 8000874:	eba2 0203 	sub.w	r2, r2, r3
 8000878:	ea80 0c01 	eor.w	ip, r0, r1
 800087c:	0249      	lsls	r1, r1, #9
 800087e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000882:	d037      	beq.n	80008f4 <__aeabi_fdiv+0x98>
 8000884:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000888:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800088c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000890:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000894:	428b      	cmp	r3, r1
 8000896:	bf38      	it	cc
 8000898:	005b      	lslcc	r3, r3, #1
 800089a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800089e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80008a2:	428b      	cmp	r3, r1
 80008a4:	bf24      	itt	cs
 80008a6:	1a5b      	subcs	r3, r3, r1
 80008a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008ac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80008b0:	bf24      	itt	cs
 80008b2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008b6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008be:	bf24      	itt	cs
 80008c0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008cc:	bf24      	itt	cs
 80008ce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008d2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d6:	011b      	lsls	r3, r3, #4
 80008d8:	bf18      	it	ne
 80008da:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008de:	d1e0      	bne.n	80008a2 <__aeabi_fdiv+0x46>
 80008e0:	2afd      	cmp	r2, #253	; 0xfd
 80008e2:	f63f af50 	bhi.w	8000786 <__aeabi_fmul+0x92>
 80008e6:	428b      	cmp	r3, r1
 80008e8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008ec:	bf08      	it	eq
 80008ee:	f020 0001 	biceq.w	r0, r0, #1
 80008f2:	4770      	bx	lr
 80008f4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008f8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008fc:	327f      	adds	r2, #127	; 0x7f
 80008fe:	bfc2      	ittt	gt
 8000900:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000904:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000908:	4770      	bxgt	lr
 800090a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800090e:	f04f 0300 	mov.w	r3, #0
 8000912:	3a01      	subs	r2, #1
 8000914:	e737      	b.n	8000786 <__aeabi_fmul+0x92>
 8000916:	f092 0f00 	teq	r2, #0
 800091a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800091e:	bf02      	ittt	eq
 8000920:	0040      	lsleq	r0, r0, #1
 8000922:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000926:	3a01      	subeq	r2, #1
 8000928:	d0f9      	beq.n	800091e <__aeabi_fdiv+0xc2>
 800092a:	ea40 000c 	orr.w	r0, r0, ip
 800092e:	f093 0f00 	teq	r3, #0
 8000932:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000936:	bf02      	ittt	eq
 8000938:	0049      	lsleq	r1, r1, #1
 800093a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800093e:	3b01      	subeq	r3, #1
 8000940:	d0f9      	beq.n	8000936 <__aeabi_fdiv+0xda>
 8000942:	ea41 010c 	orr.w	r1, r1, ip
 8000946:	e795      	b.n	8000874 <__aeabi_fdiv+0x18>
 8000948:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800094c:	ea92 0f0c 	teq	r2, ip
 8000950:	d108      	bne.n	8000964 <__aeabi_fdiv+0x108>
 8000952:	0242      	lsls	r2, r0, #9
 8000954:	f47f af7d 	bne.w	8000852 <__aeabi_fmul+0x15e>
 8000958:	ea93 0f0c 	teq	r3, ip
 800095c:	f47f af70 	bne.w	8000840 <__aeabi_fmul+0x14c>
 8000960:	4608      	mov	r0, r1
 8000962:	e776      	b.n	8000852 <__aeabi_fmul+0x15e>
 8000964:	ea93 0f0c 	teq	r3, ip
 8000968:	d104      	bne.n	8000974 <__aeabi_fdiv+0x118>
 800096a:	024b      	lsls	r3, r1, #9
 800096c:	f43f af4c 	beq.w	8000808 <__aeabi_fmul+0x114>
 8000970:	4608      	mov	r0, r1
 8000972:	e76e      	b.n	8000852 <__aeabi_fmul+0x15e>
 8000974:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000978:	bf18      	it	ne
 800097a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800097e:	d1ca      	bne.n	8000916 <__aeabi_fdiv+0xba>
 8000980:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000984:	f47f af5c 	bne.w	8000840 <__aeabi_fmul+0x14c>
 8000988:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800098c:	f47f af3c 	bne.w	8000808 <__aeabi_fmul+0x114>
 8000990:	e75f      	b.n	8000852 <__aeabi_fmul+0x15e>
 8000992:	bf00      	nop

08000994 <__gesf2>:
 8000994:	f04f 3cff 	mov.w	ip, #4294967295
 8000998:	e006      	b.n	80009a8 <__cmpsf2+0x4>
 800099a:	bf00      	nop

0800099c <__lesf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	e002      	b.n	80009a8 <__cmpsf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__cmpsf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009b0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009b8:	bf18      	it	ne
 80009ba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009be:	d011      	beq.n	80009e4 <__cmpsf2+0x40>
 80009c0:	b001      	add	sp, #4
 80009c2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80009c6:	bf18      	it	ne
 80009c8:	ea90 0f01 	teqne	r0, r1
 80009cc:	bf58      	it	pl
 80009ce:	ebb2 0003 	subspl.w	r0, r2, r3
 80009d2:	bf88      	it	hi
 80009d4:	17c8      	asrhi	r0, r1, #31
 80009d6:	bf38      	it	cc
 80009d8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80009dc:	bf18      	it	ne
 80009de:	f040 0001 	orrne.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009e8:	d102      	bne.n	80009f0 <__cmpsf2+0x4c>
 80009ea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80009ee:	d105      	bne.n	80009fc <__cmpsf2+0x58>
 80009f0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80009f4:	d1e4      	bne.n	80009c0 <__cmpsf2+0x1c>
 80009f6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80009fa:	d0e1      	beq.n	80009c0 <__cmpsf2+0x1c>
 80009fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_cfrcmple>:
 8000a04:	4684      	mov	ip, r0
 8000a06:	4608      	mov	r0, r1
 8000a08:	4661      	mov	r1, ip
 8000a0a:	e7ff      	b.n	8000a0c <__aeabi_cfcmpeq>

08000a0c <__aeabi_cfcmpeq>:
 8000a0c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a0e:	f7ff ffc9 	bl	80009a4 <__cmpsf2>
 8000a12:	2800      	cmp	r0, #0
 8000a14:	bf48      	it	mi
 8000a16:	f110 0f00 	cmnmi.w	r0, #0
 8000a1a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a1c <__aeabi_fcmpeq>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff fff4 	bl	8000a0c <__aeabi_cfcmpeq>
 8000a24:	bf0c      	ite	eq
 8000a26:	2001      	moveq	r0, #1
 8000a28:	2000      	movne	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_fcmplt>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffea 	bl	8000a0c <__aeabi_cfcmpeq>
 8000a38:	bf34      	ite	cc
 8000a3a:	2001      	movcc	r0, #1
 8000a3c:	2000      	movcs	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_fcmple>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffe0 	bl	8000a0c <__aeabi_cfcmpeq>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_fcmpge>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffd2 	bl	8000a04 <__aeabi_cfrcmple>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_fcmpgt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffc8 	bl	8000a04 <__aeabi_cfrcmple>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <Ringbuf_init+0x38>)
 8000a86:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <Ringbuf_init+0x3c>)
 8000a88:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <Ringbuf_init+0x40>)
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ac4 <Ringbuf_init+0x44>)
 8000a8e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <Ringbuf_init+0x48>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	695a      	ldr	r2, [r3, #20]
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <Ringbuf_init+0x48>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f042 0201 	orr.w	r2, r2, #1
 8000a9e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <Ringbuf_init+0x48>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	68da      	ldr	r2, [r3, #12]
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <Ringbuf_init+0x48>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f042 0220 	orr.w	r2, r2, #32
 8000aae:	60da      	str	r2, [r3, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	20001634 	.word	0x20001634
 8000abc:	20000094 	.word	0x20000094
 8000ac0:	20001630 	.word	0x20001630
 8000ac4:	2000049c 	.word	0x2000049c
 8000ac8:	2000184c 	.word	0x2000184c

08000acc <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000ade:	3301      	adds	r3, #1
 8000ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ae4:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d009      	beq.n	8000b06 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000af8:	683a      	ldr	r2, [r7, #0]
 8000afa:	79f9      	ldrb	r1, [r7, #7]
 8000afc:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  }
}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <Uart_isr>:

}


void Uart_isr (UART_HandleTypeDef *huart)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	f003 0320 	and.w	r3, r3, #32
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d013      	beq.n	8000b5a <Uart_isr+0x4a>
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	f003 0320 	and.w	r3, r3, #32
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00e      	beq.n	8000b5a <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <Uart_isr+0xb4>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	4611      	mov	r1, r2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ffba 	bl	8000acc <store_char>
        return;
 8000b58:	e031      	b.n	8000bbe <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d02c      	beq.n	8000bbe <Uart_isr+0xae>
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d027      	beq.n	8000bbe <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <Uart_isr+0xb8>)
 8000b70:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <Uart_isr+0xb8>)
 8000b76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d108      	bne.n	8000b90 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b8c:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8000b8e:	e015      	b.n	8000bbc <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8000b90:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <Uart_isr+0xb8>)
 8000b92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000b96:	4a0c      	ldr	r2, [pc, #48]	; (8000bc8 <Uart_isr+0xb8>)
 8000b98:	5cd3      	ldrb	r3, [r2, r3]
 8000b9a:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <Uart_isr+0xb8>)
 8000b9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ba8:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <Uart_isr+0xb8>)
 8000baa:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    	      huart->Instance->SR;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	7bba      	ldrb	r2, [r7, #14]
 8000bba:	605a      	str	r2, [r3, #4]
    	return;
 8000bbc:	bf00      	nop
    }
}
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20001634 	.word	0x20001634
 8000bc8:	2000049c 	.word	0x2000049c

08000bcc <set_b_counter>:

int get_b_counter(void) {
	return b_counter;
}

void set_b_counter(unsigned int CLOCK_RATE) {
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]

	b_counter++;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <set_b_counter+0x30>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	4a08      	ldr	r2, [pc, #32]	; (8000bfc <set_b_counter+0x30>)
 8000bdc:	6013      	str	r3, [r2, #0]
	if(b_counter > CLOCK_RATE) {
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <set_b_counter+0x30>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d202      	bcs.n	8000bf0 <set_b_counter+0x24>
		b_counter = 0;
 8000bea:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <set_b_counter+0x30>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
	}
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	200008a4 	.word	0x200008a4

08000c00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_DMA_Init+0x58>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	4a13      	ldr	r2, [pc, #76]	; (8000c58 <MX_DMA_Init+0x58>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6153      	str	r3, [r2, #20]
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_DMA_Init+0x58>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	200f      	movs	r0, #15
 8000c24:	f002 ffd9 	bl	8003bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000c28:	200f      	movs	r0, #15
 8000c2a:	f002 fff2 	bl	8003c12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2010      	movs	r0, #16
 8000c34:	f002 ffd1 	bl	8003bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c38:	2010      	movs	r0, #16
 8000c3a:	f002 ffea 	bl	8003c12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	2011      	movs	r0, #17
 8000c44:	f002 ffc9 	bl	8003bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c48:	2011      	movs	r0, #17
 8000c4a:	f002 ffe2 	bl	8003c12 <HAL_NVIC_EnableIRQ>

}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40021000 	.word	0x40021000

08000c5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c62:	f107 0310 	add.w	r3, r7, #16
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c70:	4b39      	ldr	r3, [pc, #228]	; (8000d58 <MX_GPIO_Init+0xfc>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a38      	ldr	r2, [pc, #224]	; (8000d58 <MX_GPIO_Init+0xfc>)
 8000c76:	f043 0310 	orr.w	r3, r3, #16
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <MX_GPIO_Init+0xfc>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0310 	and.w	r3, r3, #16
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c88:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <MX_GPIO_Init+0xfc>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a32      	ldr	r2, [pc, #200]	; (8000d58 <MX_GPIO_Init+0xfc>)
 8000c8e:	f043 0320 	orr.w	r3, r3, #32
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b30      	ldr	r3, [pc, #192]	; (8000d58 <MX_GPIO_Init+0xfc>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0320 	and.w	r3, r3, #32
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <MX_GPIO_Init+0xfc>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a2c      	ldr	r2, [pc, #176]	; (8000d58 <MX_GPIO_Init+0xfc>)
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <MX_GPIO_Init+0xfc>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb8:	4b27      	ldr	r3, [pc, #156]	; (8000d58 <MX_GPIO_Init+0xfc>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a26      	ldr	r2, [pc, #152]	; (8000d58 <MX_GPIO_Init+0xfc>)
 8000cbe:	f043 0308 	orr.w	r3, r3, #8
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b24      	ldr	r3, [pc, #144]	; (8000d58 <MX_GPIO_Init+0xfc>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0308 	and.w	r3, r3, #8
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd6:	4821      	ldr	r0, [pc, #132]	; (8000d5c <MX_GPIO_Init+0x100>)
 8000cd8:	f003 fb9e 	bl	8004418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f243 0102 	movw	r1, #12290	; 0x3002
 8000ce2:	481f      	ldr	r0, [pc, #124]	; (8000d60 <MX_GPIO_Init+0x104>)
 8000ce4:	f003 fb98 	bl	8004418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cee:	481d      	ldr	r0, [pc, #116]	; (8000d64 <MX_GPIO_Init+0x108>)
 8000cf0:	f003 fb92 	bl	8004418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2302      	movs	r3, #2
 8000d04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 0310 	add.w	r3, r7, #16
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4813      	ldr	r0, [pc, #76]	; (8000d5c <MX_GPIO_Init+0x100>)
 8000d0e:	f003 f9ff 	bl	8004110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|CSN_Pin|CE_Pin;
 8000d12:	f243 0302 	movw	r3, #12290	; 0x3002
 8000d16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <MX_GPIO_Init+0x104>)
 8000d2c:	f003 f9f0 	bl	8004110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	4619      	mov	r1, r3
 8000d48:	4806      	ldr	r0, [pc, #24]	; (8000d64 <MX_GPIO_Init+0x108>)
 8000d4a:	f003 f9e1 	bl	8004110 <HAL_GPIO_Init>

}
 8000d4e:	bf00      	nop
 8000d50:	3720      	adds	r7, #32
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40011000 	.word	0x40011000
 8000d60:	40010c00 	.word	0x40010c00
 8000d64:	40010800 	.word	0x40010800

08000d68 <set_ucounter>:

	//return -1;

}

void set_ucounter(unsigned int CLOCK_RATE) {
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

	u_counter++;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <set_ucounter+0x30>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <set_ucounter+0x30>)
 8000d78:	6013      	str	r3, [r2, #0]
	if(u_counter > CLOCK_RATE) {
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <set_ucounter+0x30>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d202      	bcs.n	8000d8c <set_ucounter+0x24>
		u_counter = 0;
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <set_ucounter+0x30>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
	}
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	200008a8 	.word	0x200008a8

08000d9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_I2C1_Init+0x50>)
 8000da2:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <MX_I2C1_Init+0x54>)
 8000da4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_I2C1_Init+0x50>)
 8000da8:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <MX_I2C1_Init+0x58>)
 8000daa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_I2C1_Init+0x50>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dd8:	4804      	ldr	r0, [pc, #16]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dda:	f003 fb4f 	bl	800447c <HAL_I2C_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000de4:	f000 febc 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	2000163c 	.word	0x2000163c
 8000df0:	40005400 	.word	0x40005400
 8000df4:	00061a80 	.word	0x00061a80

08000df8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a15      	ldr	r2, [pc, #84]	; (8000e68 <HAL_I2C_MspInit+0x70>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d123      	bne.n	8000e60 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_I2C_MspInit+0x74>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <HAL_I2C_MspInit+0x74>)
 8000e1e:	f043 0308 	orr.w	r3, r3, #8
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_I2C_MspInit+0x74>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e30:	23c0      	movs	r3, #192	; 0xc0
 8000e32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e34:	2312      	movs	r3, #18
 8000e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4619      	mov	r1, r3
 8000e42:	480b      	ldr	r0, [pc, #44]	; (8000e70 <HAL_I2C_MspInit+0x78>)
 8000e44:	f003 f964 	bl	8004110 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <HAL_I2C_MspInit+0x74>)
 8000e4a:	69db      	ldr	r3, [r3, #28]
 8000e4c:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <HAL_I2C_MspInit+0x74>)
 8000e4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e52:	61d3      	str	r3, [r2, #28]
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <HAL_I2C_MspInit+0x74>)
 8000e56:	69db      	ldr	r3, [r3, #28]
 8000e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e60:	bf00      	nop
 8000e62:	3720      	adds	r7, #32
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40005400 	.word	0x40005400
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010c00 	.word	0x40010c00

08000e74 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <HAL_UART_TxCpltCallback>:
	while(delay_timer < current_time + millis) {
		printf("Do nothing...");
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance) {
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <HAL_UART_TxCpltCallback+0xa0>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d140      	bne.n	8000f22 <HAL_UART_TxCpltCallback+0x96>
		char end_char;
		switch(tx_type) {
 8000ea0:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <HAL_UART_TxCpltCallback+0xa4>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d013      	beq.n	8000ed0 <HAL_UART_TxCpltCallback+0x44>
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	dc3a      	bgt.n	8000f22 <HAL_UART_TxCpltCallback+0x96>
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d002      	beq.n	8000eb6 <HAL_UART_TxCpltCallback+0x2a>
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d017      	beq.n	8000ee4 <HAL_UART_TxCpltCallback+0x58>
		    period = sent_time - sent_time_;
		    break;
		}

	}
}
 8000eb4:	e035      	b.n	8000f22 <HAL_UART_TxCpltCallback+0x96>
			end_char = 0x01;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	72fb      	strb	r3, [r7, #11]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 8000eba:	f107 030b 	add.w	r3, r7, #11
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	481a      	ldr	r0, [pc, #104]	; (8000f2c <HAL_UART_TxCpltCallback+0xa0>)
 8000ec4:	f006 fa72 	bl	80073ac <HAL_UART_Transmit_DMA>
			tx_type = package;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <HAL_UART_TxCpltCallback+0xa4>)
 8000eca:	2202      	movs	r2, #2
 8000ecc:	701a      	strb	r2, [r3, #0]
			break;
 8000ece:	e028      	b.n	8000f22 <HAL_UART_TxCpltCallback+0x96>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buf, sizeof(struct telem_pack));
 8000ed0:	f240 1205 	movw	r2, #261	; 0x105
 8000ed4:	4917      	ldr	r1, [pc, #92]	; (8000f34 <HAL_UART_TxCpltCallback+0xa8>)
 8000ed6:	4815      	ldr	r0, [pc, #84]	; (8000f2c <HAL_UART_TxCpltCallback+0xa0>)
 8000ed8:	f006 fa68 	bl	80073ac <HAL_UART_Transmit_DMA>
			tx_type = stop;
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <HAL_UART_TxCpltCallback+0xa4>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]
			break;
 8000ee2:	e01e      	b.n	8000f22 <HAL_UART_TxCpltCallback+0x96>
			end_char = 0x04;
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	72fb      	strb	r3, [r7, #11]
		    HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 8000ee8:	f107 030b 	add.w	r3, r7, #11
 8000eec:	2201      	movs	r2, #1
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480e      	ldr	r0, [pc, #56]	; (8000f2c <HAL_UART_TxCpltCallback+0xa0>)
 8000ef2:	f006 fa5b 	bl	80073ac <HAL_UART_Transmit_DMA>
		    tx_type = start;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_UART_TxCpltCallback+0xa4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
		    long int sent_time_ = sent_time;
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_UART_TxCpltCallback+0xac>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
		    sent_time = HAL_GetTick();
 8000f02:	f002 fd65 	bl	80039d0 <HAL_GetTick>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_UART_TxCpltCallback+0xac>)
 8000f0c:	601a      	str	r2, [r3, #0]
		    period = sent_time - sent_time_;
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_UART_TxCpltCallback+0xac>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <HAL_UART_TxCpltCallback+0xb0>)
 8000f1e:	701a      	strb	r2, [r3, #0]
		    break;
 8000f20:	bf00      	nop
}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20001954 	.word	0x20001954
 8000f30:	20001569 	.word	0x20001569
 8000f34:	20000a08 	.word	0x20000a08
 8000f38:	2000151c 	.word	0x2000151c
 8000f3c:	20001568 	.word	0x20001568

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f42:	b09d      	sub	sp, #116	; 0x74
 8000f44:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f46:	f002 fceb 	bl	8003920 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 8000f4a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f4e:	f002 fd49 	bl	80039e4 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f52:	f000 f8df 	bl	8001114 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f56:	f7ff fe81 	bl	8000c5c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f5a:	f7ff fe51 	bl	8000c00 <MX_DMA_Init>
  MX_I2C1_Init();
 8000f5e:	f7ff ff1d 	bl	8000d9c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000f62:	f002 f8ff 	bl	8003164 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f66:	f002 f855 	bl	8003014 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000f6a:	f002 fb0f 	bl	800358c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f6e:	f002 f945 	bl	80031fc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f72:	f002 f9b3 	bl	80032dc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000f76:	f002 fadf 	bl	8003538 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f7a:	f002 fb31 	bl	80035e0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000f7e:	f001 fec5 	bl	8002d0c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, (uint8_t*)&cam_data, sizeof(cam_data));
 8000f82:	2209      	movs	r2, #9
 8000f84:	4953      	ldr	r1, [pc, #332]	; (80010d4 <main+0x194>)
 8000f86:	4854      	ldr	r0, [pc, #336]	; (80010d8 <main+0x198>)
 8000f88:	f006 fa7c 	bl	8007484 <HAL_UART_Receive_DMA>

  HAL_UART_Receive_DMA(&huart2, (uint8_t*)ch_rcv_buf, 1);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4953      	ldr	r1, [pc, #332]	; (80010dc <main+0x19c>)
 8000f90:	4853      	ldr	r0, [pc, #332]	; (80010e0 <main+0x1a0>)
 8000f92:	f006 fa77 	bl	8007484 <HAL_UART_Receive_DMA>
#ifdef UAV1
  MPU6050_Baslat();
  bmp_init(&bmp);
  HMC5883L_initialize();
#endif
  MotorBaslat();
 8000f96:	f000 fc97 	bl	80018c8 <_Z11MotorBaslatv>
  //GPSInit();
  HAL_Delay(1000);
 8000f9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f9e:	f002 fd21 	bl	80039e4 <HAL_Delay>

  Ringbuf_init();
 8000fa2:	f7ff fd6d 	bl	8000a80 <Ringbuf_init>
	HAL_UART_Transmit(&huart3, (uint8_t*)&test_data, sizeof(test_data), 5);
	printRadioSettings();
#endif

#ifdef UAV2
	NRF24_begin(CE_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 8000fa6:	4c4f      	ldr	r4, [pc, #316]	; (80010e4 <main+0x1a4>)
 8000fa8:	4668      	mov	r0, sp
 8000faa:	1d23      	adds	r3, r4, #4
 8000fac:	2254      	movs	r2, #84	; 0x54
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f007 fa44 	bl	800843c <memcpy>
 8000fb4:	6823      	ldr	r3, [r4, #0]
 8000fb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fbe:	484a      	ldr	r0, [pc, #296]	; (80010e8 <main+0x1a8>)
 8000fc0:	f000 ff56 	bl	8001e70 <NRF24_begin>
	nrf24_DebugUART_Init(huart3);
 8000fc4:	4e49      	ldr	r6, [pc, #292]	; (80010ec <main+0x1ac>)
 8000fc6:	466d      	mov	r5, sp
 8000fc8:	f106 0410 	add.w	r4, r6, #16
 8000fcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fd8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000fdc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000fe0:	f001 fe78 	bl	8002cd4 <nrf24_DebugUART_Init>
	NRF24_setAutoAck(false);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f001 f92f 	bl	8002248 <NRF24_setAutoAck>
	NRF24_setChannel(34);
 8000fea:	2022      	movs	r0, #34	; 0x22
 8000fec:	f001 f8d7 	bl	800219e <NRF24_setChannel>
	NRF24_setPayloadSize(sizeof(struct pwm));
 8000ff0:	2008      	movs	r0, #8
 8000ff2:	f001 f8e9 	bl	80021c8 <NRF24_setPayloadSize>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 8000ff6:	4b3e      	ldr	r3, [pc, #248]	; (80010f0 <main+0x1b0>)
 8000ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f001 f865 	bl	80020cc <NRF24_openReadingPipe>
	NRF24_startListening();
 8001002:	f001 f815 	bl	8002030 <NRF24_startListening>
	char test_data[] = "Testing...";
 8001006:	4a3b      	ldr	r2, [pc, #236]	; (80010f4 <main+0x1b4>)
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	ca07      	ldmia	r2, {r0, r1, r2}
 800100e:	c303      	stmia	r3!, {r0, r1}
 8001010:	801a      	strh	r2, [r3, #0]
 8001012:	3302      	adds	r3, #2
 8001014:	0c12      	lsrs	r2, r2, #16
 8001016:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)&test_data, sizeof(test_data), 5);
 8001018:	f107 010c 	add.w	r1, r7, #12
 800101c:	2305      	movs	r3, #5
 800101e:	220b      	movs	r2, #11
 8001020:	4832      	ldr	r0, [pc, #200]	; (80010ec <main+0x1ac>)
 8001022:	f006 f931 	bl	8007288 <HAL_UART_Transmit>
	printRadioSettings();
 8001026:	f001 fa2d 	bl	8002484 <printRadioSettings>
#endif

  //Gyro kalibrasyon hatalarını hesapla.
  HAL_Delay(2000);
 800102a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800102e:	f002 fcd9 	bl	80039e4 <HAL_Delay>
  accX = AccOku(ACC_X_ADDR);
  accY = AccOku(ACC_Y_ADDR);
  accZ = AccOku(ACC_Z_ADDR);
#endif
  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 8001032:	4831      	ldr	r0, [pc, #196]	; (80010f8 <main+0x1b8>)
 8001034:	f004 fd86 	bl	8005b44 <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 8001038:	4830      	ldr	r0, [pc, #192]	; (80010fc <main+0x1bc>)
 800103a:	f004 fd39 	bl	8005ab0 <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800103e:	2100      	movs	r1, #0
 8001040:	482f      	ldr	r0, [pc, #188]	; (8001100 <main+0x1c0>)
 8001042:	f004 fe21 	bl	8005c88 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001046:	2104      	movs	r1, #4
 8001048:	482d      	ldr	r0, [pc, #180]	; (8001100 <main+0x1c0>)
 800104a:	f005 ff4d 	bl	8006ee8 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800104e:	2108      	movs	r1, #8
 8001050:	482b      	ldr	r0, [pc, #172]	; (8001100 <main+0x1c0>)
 8001052:	f005 ff49 	bl	8006ee8 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001056:	210c      	movs	r1, #12
 8001058:	4829      	ldr	r0, [pc, #164]	; (8001100 <main+0x1c0>)
 800105a:	f004 fe15 	bl	8005c88 <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 800105e:	2108      	movs	r1, #8
 8001060:	4826      	ldr	r0, [pc, #152]	; (80010fc <main+0x1bc>)
 8001062:	f004 ff0b 	bl	8005e7c <HAL_TIM_IC_Start_IT>

  //ESP DMA Başlat.
  char end_char = 0x01;
 8001066:	2301      	movs	r3, #1
 8001068:	72fb      	strb	r3, [r7, #11]
  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 800106a:	f107 030b 	add.w	r3, r7, #11
 800106e:	2201      	movs	r2, #1
 8001070:	4619      	mov	r1, r3
 8001072:	481b      	ldr	r0, [pc, #108]	; (80010e0 <main+0x1a0>)
 8001074:	f006 f99a 	bl	80073ac <HAL_UART_Transmit_DMA>
  tx_type = package;
 8001078:	4b22      	ldr	r3, [pc, #136]	; (8001104 <main+0x1c4>)
 800107a:	2202      	movs	r2, #2
 800107c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */

  while (1)
  {
#ifdef UAV2
		if(NRF24_available())
 800107e:	f000 fffd 	bl	800207c <NRF24_available>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0fa      	beq.n	800107e <main+0x13e>
		{
			char nrf_buf[sizeof(struct pwm)];
			NRF24_read(nrf_buf, sizeof(struct pwm));
 8001088:	463b      	mov	r3, r7
 800108a:	2108      	movs	r1, #8
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fffd 	bl	800208c <NRF24_read>

			memcpy(&pwm_out, nrf_buf , sizeof(struct pwm));
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <main+0x1c8>)
 8001094:	461a      	mov	r2, r3
 8001096:	463b      	mov	r3, r7
 8001098:	e893 0003 	ldmia.w	r3, {r0, r1}
 800109c:	e882 0003 	stmia.w	r2, {r0, r1}
			controller_output_2[0] = pwm_out.w1;
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <main+0x1c8>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b19      	ldr	r3, [pc, #100]	; (800110c <main+0x1cc>)
 80010a8:	601a      	str	r2, [r3, #0]
			controller_output_2[0] = pwm_out.w2;
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <main+0x1c8>)
 80010ac:	885b      	ldrh	r3, [r3, #2]
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <main+0x1cc>)
 80010b2:	601a      	str	r2, [r3, #0]
			controller_output_2[0] = pwm_out.w3;
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <main+0x1c8>)
 80010b6:	889b      	ldrh	r3, [r3, #4]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <main+0x1cc>)
 80010bc:	601a      	str	r2, [r3, #0]
			controller_output_2[0] = pwm_out.w4;
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <main+0x1c8>)
 80010c0:	88db      	ldrh	r3, [r3, #6]
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <main+0x1cc>)
 80010c6:	601a      	str	r2, [r3, #0]

			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80010c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010cc:	4810      	ldr	r0, [pc, #64]	; (8001110 <main+0x1d0>)
 80010ce:	f003 f9bb 	bl	8004448 <HAL_GPIO_TogglePin>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80010d2:	e7d4      	b.n	800107e <main+0x13e>
 80010d4:	2000153c 	.word	0x2000153c
 80010d8:	20001914 	.word	0x20001914
 80010dc:	20001558 	.word	0x20001558
 80010e0:	20001954 	.word	0x20001954
 80010e4:	20001690 	.word	0x20001690
 80010e8:	40010c00 	.word	0x40010c00
 80010ec:	2000184c 	.word	0x2000184c
 80010f0:	20000000 	.word	0x20000000
 80010f4:	08008ce8 	.word	0x08008ce8
 80010f8:	200017c0 	.word	0x200017c0
 80010fc:	20001730 	.word	0x20001730
 8001100:	20001778 	.word	0x20001778
 8001104:	20001569 	.word	0x20001569
 8001108:	2000156c 	.word	0x2000156c
 800110c:	20001498 	.word	0x20001498
 8001110:	40011000 	.word	0x40011000

08001114 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b090      	sub	sp, #64	; 0x40
 8001118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111a:	f107 0318 	add.w	r3, r7, #24
 800111e:	2228      	movs	r2, #40	; 0x28
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f007 f998 	bl	8008458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001136:	2301      	movs	r3, #1
 8001138:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800113a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800113e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001144:	2301      	movs	r3, #1
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001148:	2302      	movs	r3, #2
 800114a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800114c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001150:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001152:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001156:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 0318 	add.w	r3, r7, #24
 800115c:	4618      	mov	r0, r3
 800115e:	f003 fad1 	bl	8004704 <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	bf14      	ite	ne
 8001168:	2301      	movne	r3, #1
 800116a:	2300      	moveq	r3, #0
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8001172:	f000 fcf5 	bl	8001b60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001176:	230f      	movs	r3, #15
 8001178:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117a:	2302      	movs	r3, #2
 800117c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001186:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2102      	movs	r1, #2
 8001190:	4618      	mov	r0, r3
 8001192:	f003 fd37 	bl	8004c04 <HAL_RCC_ClockConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	bf14      	ite	ne
 800119c:	2301      	movne	r3, #1
 800119e:	2300      	moveq	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80011a6:	f000 fcdb 	bl	8001b60 <Error_Handler>
  }
}
 80011aa:	bf00      	nop
 80011ac:	3740      	adds	r7, #64	; 0x40
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <_Z10CheckSwarmv>:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
		break;
	}
}

void CheckSwarm() {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	if(ch[SWARM_CH-1] > 1500) {
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <_Z10CheckSwarmv+0x68>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80011c0:	4293      	cmp	r3, r2
 80011c2:	dd14      	ble.n	80011ee <_Z10CheckSwarmv+0x3a>
		if(swarm_mode != SWARM) {
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <_Z10CheckSwarmv+0x6c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d024      	beq.n	8001216 <_Z10CheckSwarmv+0x62>
			swarm_mode = SWARM;
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <_Z10CheckSwarmv+0x6c>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]

			controller.swarm = true;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <_Z10CheckSwarmv+0x70>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9

			controller.pid_roll.reset();
 80011da:	4813      	ldr	r0, [pc, #76]	; (8001228 <_Z10CheckSwarmv+0x74>)
 80011dc:	f007 f8b4 	bl	8008348 <_ZN3PID5resetEv>
			controller.pid_pitch.reset();
 80011e0:	4812      	ldr	r0, [pc, #72]	; (800122c <_Z10CheckSwarmv+0x78>)
 80011e2:	f007 f8b1 	bl	8008348 <_ZN3PID5resetEv>
			controller.pid_yaw.reset();
 80011e6:	4812      	ldr	r0, [pc, #72]	; (8001230 <_Z10CheckSwarmv+0x7c>)
 80011e8:	f007 f8ae 	bl	8008348 <_ZN3PID5resetEv>
			controller.pid_roll.reset();
			controller.pid_pitch.reset();
			controller.pid_yaw.reset();
		}
	}
}
 80011ec:	e013      	b.n	8001216 <_Z10CheckSwarmv+0x62>
		if(swarm_mode != NORMAL) {
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <_Z10CheckSwarmv+0x6c>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00f      	beq.n	8001216 <_Z10CheckSwarmv+0x62>
			controller.swarm = false;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <_Z10CheckSwarmv+0x70>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			swarm_mode = NORMAL;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <_Z10CheckSwarmv+0x6c>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
			controller.pid_roll.reset();
 8001204:	4808      	ldr	r0, [pc, #32]	; (8001228 <_Z10CheckSwarmv+0x74>)
 8001206:	f007 f89f 	bl	8008348 <_ZN3PID5resetEv>
			controller.pid_pitch.reset();
 800120a:	4808      	ldr	r0, [pc, #32]	; (800122c <_Z10CheckSwarmv+0x78>)
 800120c:	f007 f89c 	bl	8008348 <_ZN3PID5resetEv>
			controller.pid_yaw.reset();
 8001210:	4807      	ldr	r0, [pc, #28]	; (8001230 <_Z10CheckSwarmv+0x7c>)
 8001212:	f007 f899 	bl	8008348 <_ZN3PID5resetEv>
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200014b8 	.word	0x200014b8
 8001220:	2000156a 	.word	0x2000156a
 8001224:	20000e58 	.word	0x20000e58
 8001228:	20001030 	.word	0x20001030
 800122c:	200010e8 	.word	0x200010e8
 8001230:	200011a0 	.word	0x200011a0

08001234 <_Z13CheckFailsafev>:

void CheckFailsafe() {
 8001234:	b598      	push	{r3, r4, r7, lr}
 8001236:	af00      	add	r7, sp, #0

	if(armed) {
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <_Z13CheckFailsafev+0xa4>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d048      	beq.n	80012d2 <_Z13CheckFailsafev+0x9e>
		if(ch[2] < 970 && !in_failsafe) {
 8001240:	4b26      	ldr	r3, [pc, #152]	; (80012dc <_Z13CheckFailsafev+0xa8>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f240 32c9 	movw	r2, #969	; 0x3c9
 8001248:	4293      	cmp	r3, r2
 800124a:	dc0d      	bgt.n	8001268 <_Z13CheckFailsafev+0x34>
 800124c:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <_Z13CheckFailsafev+0xac>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	f083 0301 	eor.w	r3, r3, #1
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d006      	beq.n	8001268 <_Z13CheckFailsafev+0x34>
			in_failsafe = true;
 800125a:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <_Z13CheckFailsafev+0xac>)
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
			Fail_Acc = accXc;
 8001260:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <_Z13CheckFailsafev+0xb0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a20      	ldr	r2, [pc, #128]	; (80012e8 <_Z13CheckFailsafev+0xb4>)
 8001266:	6013      	str	r3, [r2, #0]
		}

		if(failsafe_counter < 1000) {
 8001268:	4b20      	ldr	r3, [pc, #128]	; (80012ec <_Z13CheckFailsafev+0xb8>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001270:	d226      	bcs.n	80012c0 <_Z13CheckFailsafev+0x8c>

			if(in_failsafe) { //5 seconds
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <_Z13CheckFailsafev+0xac>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d02b      	beq.n	80012d2 <_Z13CheckFailsafev+0x9e>
				if(abs(accXc - Fail_Acc) < ACC_FAIL_LIM) {
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <_Z13CheckFailsafev+0xb0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a1a      	ldr	r2, [pc, #104]	; (80012e8 <_Z13CheckFailsafev+0xb4>)
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f92b 	bl	80004e0 <__aeabi_fsub>
 800128a:	4603      	mov	r3, r0
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fdf1 	bl	8000e74 <_ZSt3absf>
 8001292:	4603      	mov	r3, r0
 8001294:	2201      	movs	r2, #1
 8001296:	4614      	mov	r4, r2
 8001298:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fbc7 	bl	8000a30 <__aeabi_fcmplt>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <_Z13CheckFailsafev+0x78>
 80012a8:	2300      	movs	r3, #0
 80012aa:	461c      	mov	r4, r3
 80012ac:	b2e3      	uxtb	r3, r4
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00f      	beq.n	80012d2 <_Z13CheckFailsafev+0x9e>
					failsafe_counter++;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <_Z13CheckFailsafev+0xb8>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	3301      	adds	r3, #1
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <_Z13CheckFailsafev+0xb8>)
 80012bc:	801a      	strh	r2, [r3, #0]
			failsafe_counter = 0;
		}
	}


}
 80012be:	e008      	b.n	80012d2 <_Z13CheckFailsafev+0x9e>
			armed = false;
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <_Z13CheckFailsafev+0xa4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
			in_failsafe = false;
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <_Z13CheckFailsafev+0xac>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
			failsafe_counter = 0;
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <_Z13CheckFailsafev+0xb8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	801a      	strh	r2, [r3, #0]
}
 80012d2:	bf00      	nop
 80012d4:	bd98      	pop	{r3, r4, r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20001521 	.word	0x20001521
 80012dc:	200014b8 	.word	0x200014b8
 80012e0:	20001562 	.word	0x20001562
 80012e4:	200008ac 	.word	0x200008ac
 80012e8:	20001564 	.word	0x20001564
 80012ec:	20001560 	.word	0x20001560

080012f0 <_Z9Check_Armv>:


void Check_Arm() {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	if(!armed) {
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <_Z9Check_Armv+0xa4>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	f083 0301 	eor.w	r3, r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d045      	beq.n	800138e <_Z9Check_Armv+0x9e>
		if((ch[2] < CH3_MIN + 100) && (ch[3] > 1700)) {
 8001302:	4b25      	ldr	r3, [pc, #148]	; (8001398 <_Z9Check_Armv+0xa8>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f240 424b 	movw	r2, #1099	; 0x44b
 800130a:	4293      	cmp	r3, r2
 800130c:	dc3b      	bgt.n	8001386 <_Z9Check_Armv+0x96>
 800130e:	4b22      	ldr	r3, [pc, #136]	; (8001398 <_Z9Check_Armv+0xa8>)
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001316:	4293      	cmp	r3, r2
 8001318:	dd35      	ble.n	8001386 <_Z9Check_Armv+0x96>
				if(!arm_start){
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <_Z9Check_Armv+0xac>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	f083 0301 	eor.w	r3, r3, #1
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d008      	beq.n	800133a <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 8001328:	f002 fb52 	bl	80039d0 <HAL_GetTick>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <_Z9Check_Armv+0xb0>)
 8001332:	601a      	str	r2, [r3, #0]
					arm_start = true;
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <_Z9Check_Armv+0xac>)
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 800133a:	f002 fb49 	bl	80039d0 <HAL_GetTick>
 800133e:	4603      	mov	r3, r0
 8001340:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <_Z9Check_Armv+0xb0>)
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	1a9b      	subs	r3, r3, r2
 8001346:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800134a:	4293      	cmp	r3, r2
 800134c:	bf8c      	ite	hi
 800134e:	2301      	movhi	r3, #1
 8001350:	2300      	movls	r3, #0
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d01a      	beq.n	800138e <_Z9Check_Armv+0x9e>
					controller.pid_roll.reset();
 8001358:	4812      	ldr	r0, [pc, #72]	; (80013a4 <_Z9Check_Armv+0xb4>)
 800135a:	f006 fff5 	bl	8008348 <_ZN3PID5resetEv>
					controller.pid_pitch.reset();
 800135e:	4812      	ldr	r0, [pc, #72]	; (80013a8 <_Z9Check_Armv+0xb8>)
 8001360:	f006 fff2 	bl	8008348 <_ZN3PID5resetEv>
					controller.pid_yaw.reset();
 8001364:	4811      	ldr	r0, [pc, #68]	; (80013ac <_Z9Check_Armv+0xbc>)
 8001366:	f006 ffef 	bl	8008348 <_ZN3PID5resetEv>
					armed = true;
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <_Z9Check_Armv+0xa4>)
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]
					EKF.armed = true;
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <_Z9Check_Armv+0xc0>)
 8001372:	2201      	movs	r2, #1
 8001374:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
					//SetHome2();
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001378:	2201      	movs	r2, #1
 800137a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800137e:	480d      	ldr	r0, [pc, #52]	; (80013b4 <_Z9Check_Armv+0xc4>)
 8001380:	f003 f84a 	bl	8004418 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - arm_timer > 3000) {
 8001384:	e003      	b.n	800138e <_Z9Check_Armv+0x9e>
				}

		}

		else {
			arm_start = false;
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <_Z9Check_Armv+0xac>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
		}
	}

}
 800138c:	e7ff      	b.n	800138e <_Z9Check_Armv+0x9e>
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20001521 	.word	0x20001521
 8001398:	200014b8 	.word	0x200014b8
 800139c:	20001520 	.word	0x20001520
 80013a0:	20001514 	.word	0x20001514
 80013a4:	20001030 	.word	0x20001030
 80013a8:	200010e8 	.word	0x200010e8
 80013ac:	200011a0 	.word	0x200011a0
 80013b0:	20000b10 	.word	0x20000b10
 80013b4:	40010800 	.word	0x40010800

080013b8 <_Z12Check_Disarmv>:

void Check_Disarm() {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	if(armed) {
 80013bc:	4b21      	ldr	r3, [pc, #132]	; (8001444 <_Z12Check_Disarmv+0x8c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d03c      	beq.n	800143e <_Z12Check_Disarmv+0x86>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 80013c4:	4b20      	ldr	r3, [pc, #128]	; (8001448 <_Z12Check_Disarmv+0x90>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f240 424b 	movw	r2, #1099	; 0x44b
 80013cc:	4293      	cmp	r3, r2
 80013ce:	dc32      	bgt.n	8001436 <_Z12Check_Disarmv+0x7e>
 80013d0:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <_Z12Check_Disarmv+0x90>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	f240 424b 	movw	r2, #1099	; 0x44b
 80013d8:	4293      	cmp	r3, r2
 80013da:	dc2c      	bgt.n	8001436 <_Z12Check_Disarmv+0x7e>
				if(!disarm_start){
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <_Z12Check_Disarmv+0x94>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	f083 0301 	eor.w	r3, r3, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d008      	beq.n	80013fc <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 80013ea:	f002 faf1 	bl	80039d0 <HAL_GetTick>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b17      	ldr	r3, [pc, #92]	; (8001450 <_Z12Check_Disarmv+0x98>)
 80013f4:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <_Z12Check_Disarmv+0x94>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 80013fc:	f002 fae8 	bl	80039d0 <HAL_GetTick>
 8001400:	4603      	mov	r3, r0
 8001402:	4a13      	ldr	r2, [pc, #76]	; (8001450 <_Z12Check_Disarmv+0x98>)
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800140c:	4293      	cmp	r3, r2
 800140e:	bf8c      	ite	hi
 8001410:	2301      	movhi	r3, #1
 8001412:	2300      	movls	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d011      	beq.n	800143e <_Z12Check_Disarmv+0x86>
					armed = false;
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <_Z12Check_Disarmv+0x8c>)
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
					EKF.armed = false;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <_Z12Check_Disarmv+0x9c>)
 8001422:	2200      	movs	r2, #0
 8001424:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800142e:	480a      	ldr	r0, [pc, #40]	; (8001458 <_Z12Check_Disarmv+0xa0>)
 8001430:	f002 fff2 	bl	8004418 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 8001434:	e003      	b.n	800143e <_Z12Check_Disarmv+0x86>
				}

		}

		else {
			disarm_start = false;
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <_Z12Check_Disarmv+0x94>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800143c:	e7ff      	b.n	800143e <_Z12Check_Disarmv+0x86>
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20001521 	.word	0x20001521
 8001448:	200014b8 	.word	0x200014b8
 800144c:	20001522 	.word	0x20001522
 8001450:	20001518 	.word	0x20001518
 8001454:	20000b10 	.word	0x20000b10
 8001458:	40010800 	.word	0x40010800

0800145c <_Z9TelemPackv>:

void TelemPack() {
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 8001460:	4b9e      	ldr	r3, [pc, #632]	; (80016dc <_Z9TelemPackv+0x280>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a9e      	ldr	r2, [pc, #632]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001466:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 8001468:	4b9c      	ldr	r3, [pc, #624]	; (80016dc <_Z9TelemPackv+0x280>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4a9c      	ldr	r2, [pc, #624]	; (80016e0 <_Z9TelemPackv+0x284>)
 800146e:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 8001470:	4b9a      	ldr	r3, [pc, #616]	; (80016dc <_Z9TelemPackv+0x280>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	4a9a      	ldr	r2, [pc, #616]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001476:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 8001478:	4b9a      	ldr	r3, [pc, #616]	; (80016e4 <_Z9TelemPackv+0x288>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	b29a      	uxth	r2, r3
 800147e:	4b98      	ldr	r3, [pc, #608]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001480:	861a      	strh	r2, [r3, #48]	; 0x30
	  telem_pack.pwm.w2 = controller_output[1];
 8001482:	4b98      	ldr	r3, [pc, #608]	; (80016e4 <_Z9TelemPackv+0x288>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	b29a      	uxth	r2, r3
 8001488:	4b95      	ldr	r3, [pc, #596]	; (80016e0 <_Z9TelemPackv+0x284>)
 800148a:	865a      	strh	r2, [r3, #50]	; 0x32
	  telem_pack.pwm.w3 = controller_output[2];
 800148c:	4b95      	ldr	r3, [pc, #596]	; (80016e4 <_Z9TelemPackv+0x288>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	b29a      	uxth	r2, r3
 8001492:	4b93      	ldr	r3, [pc, #588]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001494:	869a      	strh	r2, [r3, #52]	; 0x34
	  telem_pack.pwm.w4 = controller_output[3];
 8001496:	4b93      	ldr	r3, [pc, #588]	; (80016e4 <_Z9TelemPackv+0x288>)
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	b29a      	uxth	r2, r3
 800149c:	4b90      	ldr	r3, [pc, #576]	; (80016e0 <_Z9TelemPackv+0x284>)
 800149e:	86da      	strh	r2, [r3, #54]	; 0x36

	  telem_pack.attitude_des.roll  = controller.roll_des;
 80014a0:	4b91      	ldr	r3, [pc, #580]	; (80016e8 <_Z9TelemPackv+0x28c>)
 80014a2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80014a6:	4a8e      	ldr	r2, [pc, #568]	; (80016e0 <_Z9TelemPackv+0x284>)
 80014a8:	60d3      	str	r3, [r2, #12]
	  telem_pack.attitude_des.pitch = controller.pitch_des;
 80014aa:	4b8f      	ldr	r3, [pc, #572]	; (80016e8 <_Z9TelemPackv+0x28c>)
 80014ac:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80014b0:	4a8b      	ldr	r2, [pc, #556]	; (80016e0 <_Z9TelemPackv+0x284>)
 80014b2:	6113      	str	r3, [r2, #16]
	  telem_pack.attitude_des.yaw   = yaw_counter;
 80014b4:	4b8d      	ldr	r3, [pc, #564]	; (80016ec <_Z9TelemPackv+0x290>)
 80014b6:	f993 3000 	ldrsb.w	r3, [r3]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f8c6 	bl	800064c <__aeabi_i2f>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4a87      	ldr	r2, [pc, #540]	; (80016e0 <_Z9TelemPackv+0x284>)
 80014c4:	6153      	str	r3, [r2, #20]

	  telem_pack.attitude_rate.roll  = state.rates[0];
 80014c6:	4b85      	ldr	r3, [pc, #532]	; (80016dc <_Z9TelemPackv+0x280>)
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	4a85      	ldr	r2, [pc, #532]	; (80016e0 <_Z9TelemPackv+0x284>)
 80014cc:	6193      	str	r3, [r2, #24]
	  telem_pack.attitude_rate.pitch = state.rates[1];
 80014ce:	4b83      	ldr	r3, [pc, #524]	; (80016dc <_Z9TelemPackv+0x280>)
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	4a83      	ldr	r2, [pc, #524]	; (80016e0 <_Z9TelemPackv+0x284>)
 80014d4:	61d3      	str	r3, [r2, #28]
	  telem_pack.attitude_rate.yaw 	 = state.rates[2];
 80014d6:	4b81      	ldr	r3, [pc, #516]	; (80016dc <_Z9TelemPackv+0x280>)
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	4a81      	ldr	r2, [pc, #516]	; (80016e0 <_Z9TelemPackv+0x284>)
 80014dc:	6213      	str	r3, [r2, #32]

	  telem_pack.attitude_rate_des.roll =  state_des.rates[0];
 80014de:	4b84      	ldr	r3, [pc, #528]	; (80016f0 <_Z9TelemPackv+0x294>)
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	4a7f      	ldr	r2, [pc, #508]	; (80016e0 <_Z9TelemPackv+0x284>)
 80014e4:	6253      	str	r3, [r2, #36]	; 0x24
	  telem_pack.attitude_rate_des.pitch = state_des.rates[1];
 80014e6:	4b82      	ldr	r3, [pc, #520]	; (80016f0 <_Z9TelemPackv+0x294>)
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	4a7d      	ldr	r2, [pc, #500]	; (80016e0 <_Z9TelemPackv+0x284>)
 80014ec:	6293      	str	r3, [r2, #40]	; 0x28

	  telem_pack.ekf.roll_acc  = EKF.roll_acc;
 80014ee:	4b81      	ldr	r3, [pc, #516]	; (80016f4 <_Z9TelemPackv+0x298>)
 80014f0:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80014f4:	4a7a      	ldr	r2, [pc, #488]	; (80016e0 <_Z9TelemPackv+0x284>)
 80014f6:	6393      	str	r3, [r2, #56]	; 0x38
	  telem_pack.ekf.pitch_acc = EKF.pitch_acc;
 80014f8:	4b7e      	ldr	r3, [pc, #504]	; (80016f4 <_Z9TelemPackv+0x298>)
 80014fa:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80014fe:	4a78      	ldr	r2, [pc, #480]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001500:	63d3      	str	r3, [r2, #60]	; 0x3c

	  telem_pack.ekf.roll_gyro  = EKF.gyro[0];
 8001502:	4b7c      	ldr	r3, [pc, #496]	; (80016f4 <_Z9TelemPackv+0x298>)
 8001504:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8001508:	4a75      	ldr	r2, [pc, #468]	; (80016e0 <_Z9TelemPackv+0x284>)
 800150a:	6413      	str	r3, [r2, #64]	; 0x40
	  telem_pack.ekf.pitch_gyro = EKF.gyro[1];
 800150c:	4b79      	ldr	r3, [pc, #484]	; (80016f4 <_Z9TelemPackv+0x298>)
 800150e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001512:	4a73      	ldr	r2, [pc, #460]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001514:	6453      	str	r3, [r2, #68]	; 0x44

	  telem_pack.ekf.roll_comp =  EKF.roll_bias;
 8001516:	4b77      	ldr	r3, [pc, #476]	; (80016f4 <_Z9TelemPackv+0x298>)
 8001518:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800151c:	4a70      	ldr	r2, [pc, #448]	; (80016e0 <_Z9TelemPackv+0x284>)
 800151e:	6493      	str	r3, [r2, #72]	; 0x48
	  telem_pack.ekf.pitch_comp = EKF.pitch_bias;
 8001520:	4b74      	ldr	r3, [pc, #464]	; (80016f4 <_Z9TelemPackv+0x298>)
 8001522:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001526:	4a6e      	ldr	r2, [pc, #440]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001528:	64d3      	str	r3, [r2, #76]	; 0x4c

	  telem_pack.ekf.roll_ekf =  EKF.roll_ekf;
 800152a:	4b72      	ldr	r3, [pc, #456]	; (80016f4 <_Z9TelemPackv+0x298>)
 800152c:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8001530:	4a6b      	ldr	r2, [pc, #428]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001532:	6513      	str	r3, [r2, #80]	; 0x50
	  telem_pack.ekf.pitch_ekf = EKF.pitch_ekf;
 8001534:	4b6f      	ldr	r3, [pc, #444]	; (80016f4 <_Z9TelemPackv+0x298>)
 8001536:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800153a:	4a69      	ldr	r2, [pc, #420]	; (80016e0 <_Z9TelemPackv+0x284>)
 800153c:	6553      	str	r3, [r2, #84]	; 0x54

	  telem_pack.pid_roll.P = controller.pid_roll.P;
 800153e:	4b6a      	ldr	r3, [pc, #424]	; (80016e8 <_Z9TelemPackv+0x28c>)
 8001540:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8001544:	4a66      	ldr	r2, [pc, #408]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001546:	6593      	str	r3, [r2, #88]	; 0x58
	  telem_pack.pid_roll.I = controller.pid_roll.I;
 8001548:	4b67      	ldr	r3, [pc, #412]	; (80016e8 <_Z9TelemPackv+0x28c>)
 800154a:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800154e:	4a64      	ldr	r2, [pc, #400]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001550:	65d3      	str	r3, [r2, #92]	; 0x5c
	  telem_pack.pid_roll.D = controller.pid_roll.D;
 8001552:	4b65      	ldr	r3, [pc, #404]	; (80016e8 <_Z9TelemPackv+0x28c>)
 8001554:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8001558:	4a61      	ldr	r2, [pc, #388]	; (80016e0 <_Z9TelemPackv+0x284>)
 800155a:	6613      	str	r3, [r2, #96]	; 0x60
	  telem_pack.pid_roll.pd_roll_sat_buf = controller.pid_roll.pd_roll_sat_buf;
 800155c:	4b62      	ldr	r3, [pc, #392]	; (80016e8 <_Z9TelemPackv+0x28c>)
 800155e:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8001562:	4a5f      	ldr	r2, [pc, #380]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001564:	6653      	str	r3, [r2, #100]	; 0x64

	  telem_pack.pid_pitch.P = controller.pid_pitch.P;
 8001566:	4b60      	ldr	r3, [pc, #384]	; (80016e8 <_Z9TelemPackv+0x28c>)
 8001568:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800156c:	4a5c      	ldr	r2, [pc, #368]	; (80016e0 <_Z9TelemPackv+0x284>)
 800156e:	6693      	str	r3, [r2, #104]	; 0x68
	  telem_pack.pid_pitch.I = controller.pid_pitch.I;
 8001570:	4b5d      	ldr	r3, [pc, #372]	; (80016e8 <_Z9TelemPackv+0x28c>)
 8001572:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8001576:	4a5a      	ldr	r2, [pc, #360]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001578:	66d3      	str	r3, [r2, #108]	; 0x6c
	  telem_pack.pid_pitch.D = controller.pid_pitch.D;
 800157a:	4b5b      	ldr	r3, [pc, #364]	; (80016e8 <_Z9TelemPackv+0x28c>)
 800157c:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 8001580:	4a57      	ldr	r2, [pc, #348]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001582:	6713      	str	r3, [r2, #112]	; 0x70
	  telem_pack.pid_pitch.pd_roll_sat_buf = controller.pid_pitch.pd_roll_sat_buf;
 8001584:	4b58      	ldr	r3, [pc, #352]	; (80016e8 <_Z9TelemPackv+0x28c>)
 8001586:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800158a:	4a55      	ldr	r2, [pc, #340]	; (80016e0 <_Z9TelemPackv+0x284>)
 800158c:	6753      	str	r3, [r2, #116]	; 0x74

	  telem_pack.sonar_alt = EKF.sonar_alt;
 800158e:	4b59      	ldr	r3, [pc, #356]	; (80016f4 <_Z9TelemPackv+0x298>)
 8001590:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8001594:	4a52      	ldr	r2, [pc, #328]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001596:	6793      	str	r3, [r2, #120]	; 0x78
	  telem_pack.velocity_body.z = EKF.vz;
 8001598:	4b56      	ldr	r3, [pc, #344]	; (80016f4 <_Z9TelemPackv+0x298>)
 800159a:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 800159e:	4a50      	ldr	r2, [pc, #320]	; (80016e0 <_Z9TelemPackv+0x284>)
 80015a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	  telem_pack.position_body.z = EKF.alt_gnd;
 80015a4:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <_Z9TelemPackv+0x298>)
 80015a6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80015aa:	4a4d      	ldr	r2, [pc, #308]	; (80016e0 <_Z9TelemPackv+0x284>)
 80015ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	  telem_pack.cam_data.detected = cam_data_20.detected;
 80015b0:	4b51      	ldr	r3, [pc, #324]	; (80016f8 <_Z9TelemPackv+0x29c>)
 80015b2:	781a      	ldrb	r2, [r3, #0]
 80015b4:	4b4a      	ldr	r3, [pc, #296]	; (80016e0 <_Z9TelemPackv+0x284>)
 80015b6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	  telem_pack.cam_data.x = cam_data_20.x;
 80015ba:	4b4f      	ldr	r3, [pc, #316]	; (80016f8 <_Z9TelemPackv+0x29c>)
 80015bc:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	4b47      	ldr	r3, [pc, #284]	; (80016e0 <_Z9TelemPackv+0x284>)
 80015c4:	f8a3 209d 	strh.w	r2, [r3, #157]	; 0x9d
	  telem_pack.cam_data.y = cam_data_20.y;
 80015c8:	4b4b      	ldr	r3, [pc, #300]	; (80016f8 <_Z9TelemPackv+0x29c>)
 80015ca:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	4b43      	ldr	r3, [pc, #268]	; (80016e0 <_Z9TelemPackv+0x284>)
 80015d2:	f8a3 209f 	strh.w	r2, [r3, #159]	; 0x9f
	  telem_pack.cam_data.z_cam = cam_data_20.z_cam;
 80015d6:	4b48      	ldr	r3, [pc, #288]	; (80016f8 <_Z9TelemPackv+0x29c>)
 80015d8:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 80015dc:	b21a      	sxth	r2, r3
 80015de:	4b40      	ldr	r3, [pc, #256]	; (80016e0 <_Z9TelemPackv+0x284>)
 80015e0:	f8a3 20a1 	strh.w	r2, [r3, #161]	; 0xa1


	  telem_pack.position_body.x = EKF.x;
 80015e4:	4b43      	ldr	r3, [pc, #268]	; (80016f4 <_Z9TelemPackv+0x298>)
 80015e6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80015ea:	4a3d      	ldr	r2, [pc, #244]	; (80016e0 <_Z9TelemPackv+0x284>)
 80015ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	  telem_pack.velocity_body.x = EKF.vx;
 80015f0:	4b40      	ldr	r3, [pc, #256]	; (80016f4 <_Z9TelemPackv+0x298>)
 80015f2:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80015f6:	4a3a      	ldr	r2, [pc, #232]	; (80016e0 <_Z9TelemPackv+0x284>)
 80015f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	  telem_pack.position_body.y = EKF.y;
 80015fc:	4b3d      	ldr	r3, [pc, #244]	; (80016f4 <_Z9TelemPackv+0x298>)
 80015fe:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8001602:	4a37      	ldr	r2, [pc, #220]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001604:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	  telem_pack.velocity_body.y = EKF.vy;
 8001608:	4b3a      	ldr	r3, [pc, #232]	; (80016f4 <_Z9TelemPackv+0x298>)
 800160a:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 800160e:	4a34      	ldr	r2, [pc, #208]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	  telem_pack.alt_thr = controller.alt_thr;
 8001614:	4b34      	ldr	r3, [pc, #208]	; (80016e8 <_Z9TelemPackv+0x28c>)
 8001616:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
 800161a:	4a31      	ldr	r2, [pc, #196]	; (80016e0 <_Z9TelemPackv+0x284>)
 800161c:	67d3      	str	r3, [r2, #124]	; 0x7c

	  telem_pack.time_millis = HAL_GetTick();
 800161e:	f002 f9d7 	bl	80039d0 <HAL_GetTick>
 8001622:	4603      	mov	r3, r0
 8001624:	4a2e      	ldr	r2, [pc, #184]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001626:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	  telem_pack.acc.x = accXc;
 800162a:	4b34      	ldr	r3, [pc, #208]	; (80016fc <_Z9TelemPackv+0x2a0>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001630:	f8c3 20a5 	str.w	r2, [r3, #165]	; 0xa5
	  telem_pack.acc.y = accYc;
 8001634:	4b32      	ldr	r3, [pc, #200]	; (8001700 <_Z9TelemPackv+0x2a4>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <_Z9TelemPackv+0x284>)
 800163a:	f8c3 20a9 	str.w	r2, [r3, #169]	; 0xa9
	  telem_pack.acc.z = accZm;
 800163e:	4b31      	ldr	r3, [pc, #196]	; (8001704 <_Z9TelemPackv+0x2a8>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001644:	f8c3 20ad 	str.w	r2, [r3, #173]	; 0xad

	  telem_pack.mag.x = MAG_X_CALIB;
 8001648:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <_Z9TelemPackv+0x2ac>)
 800164a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800164e:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001650:	f8a3 20b1 	strh.w	r2, [r3, #177]	; 0xb1
	  telem_pack.mag.y = MAG_Y_CALIB;
 8001654:	4b2d      	ldr	r3, [pc, #180]	; (800170c <_Z9TelemPackv+0x2b0>)
 8001656:	f9b3 2000 	ldrsh.w	r2, [r3]
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <_Z9TelemPackv+0x284>)
 800165c:	f8a3 20b3 	strh.w	r2, [r3, #179]	; 0xb3
	  telem_pack.mag.z = MAG_Z_CALIB;
 8001660:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <_Z9TelemPackv+0x2b4>)
 8001662:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001666:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001668:	f8a3 20b5 	strh.w	r2, [r3, #181]	; 0xb5

	  telem_pack.gps.vel_body.x = EKF.vgpsx;
	  telem_pack.gps.vel_body.y = EKF.vgpsy;
	   */

	  telem_pack.ch.ch1 = (uint16_t)ch[0];
 800166c:	4b29      	ldr	r3, [pc, #164]	; (8001714 <_Z9TelemPackv+0x2b8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	b29a      	uxth	r2, r3
 8001672:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001674:	f8a3 20e7 	strh.w	r2, [r3, #231]	; 0xe7
	  telem_pack.ch.ch2 = (uint16_t)ch[1];
 8001678:	4b26      	ldr	r3, [pc, #152]	; (8001714 <_Z9TelemPackv+0x2b8>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	b29a      	uxth	r2, r3
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001680:	f8a3 20e9 	strh.w	r2, [r3, #233]	; 0xe9
	  telem_pack.ch.ch3 = (uint16_t)ch[2];
 8001684:	4b23      	ldr	r3, [pc, #140]	; (8001714 <_Z9TelemPackv+0x2b8>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	b29a      	uxth	r2, r3
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <_Z9TelemPackv+0x284>)
 800168c:	f8a3 20eb 	strh.w	r2, [r3, #235]	; 0xeb
	  telem_pack.ch.ch4 = (uint16_t)ch[3];
 8001690:	4b20      	ldr	r3, [pc, #128]	; (8001714 <_Z9TelemPackv+0x2b8>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	b29a      	uxth	r2, r3
 8001696:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <_Z9TelemPackv+0x284>)
 8001698:	f8a3 20ed 	strh.w	r2, [r3, #237]	; 0xed
	  telem_pack.ch.ch5 = (uint16_t)ch[4];
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <_Z9TelemPackv+0x2b8>)
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <_Z9TelemPackv+0x284>)
 80016a4:	f8a3 20ef 	strh.w	r2, [r3, #239]	; 0xef
	  telem_pack.ch.ch6 = (uint16_t)ch[5];
 80016a8:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <_Z9TelemPackv+0x2b8>)
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <_Z9TelemPackv+0x284>)
 80016b0:	f8a3 20f1 	strh.w	r2, [r3, #241]	; 0xf1
	  telem_pack.ch.ch7 = (uint16_t)ch[6];
 80016b4:	4b17      	ldr	r3, [pc, #92]	; (8001714 <_Z9TelemPackv+0x2b8>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <_Z9TelemPackv+0x284>)
 80016bc:	f8a3 20f3 	strh.w	r2, [r3, #243]	; 0xf3
	  telem_pack.ch.ch8 = (uint16_t)ch[7];
 80016c0:	4b14      	ldr	r3, [pc, #80]	; (8001714 <_Z9TelemPackv+0x2b8>)
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <_Z9TelemPackv+0x284>)
 80016c8:	f8a3 20f5 	strh.w	r2, [r3, #245]	; 0xf5
	  telem_pack.ch.ch9 = (uint16_t)ch[8];
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <_Z9TelemPackv+0x2b8>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <_Z9TelemPackv+0x284>)
 80016d4:	f8a3 20f7 	strh.w	r2, [r3, #247]	; 0xf7
 80016d8:	e01e      	b.n	8001718 <_Z9TelemPackv+0x2bc>
 80016da:	bf00      	nop
 80016dc:	200008dc 	.word	0x200008dc
 80016e0:	20000900 	.word	0x20000900
 80016e4:	20001488 	.word	0x20001488
 80016e8:	20000e58 	.word	0x20000e58
 80016ec:	2000156b 	.word	0x2000156b
 80016f0:	200008b8 	.word	0x200008b8
 80016f4:	20000b10 	.word	0x20000b10
 80016f8:	20001548 	.word	0x20001548
 80016fc:	200008ac 	.word	0x200008ac
 8001700:	200008b0 	.word	0x200008b0
 8001704:	200008b4 	.word	0x200008b4
 8001708:	20001552 	.word	0x20001552
 800170c:	20001554 	.word	0x20001554
 8001710:	20001556 	.word	0x20001556
 8001714:	200014b8 	.word	0x200014b8
	  telem_pack.ch.ch10 = (uint16_t)ch[9];
 8001718:	4b17      	ldr	r3, [pc, #92]	; (8001778 <_Z9TelemPackv+0x31c>)
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	b29a      	uxth	r2, r3
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <_Z9TelemPackv+0x320>)
 8001720:	f8a3 20f9 	strh.w	r2, [r3, #249]	; 0xf9
	  telem_pack.ch.ch11 = (uint16_t)ch[10];
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <_Z9TelemPackv+0x31c>)
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	b29a      	uxth	r2, r3
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <_Z9TelemPackv+0x320>)
 800172c:	f8a3 20fb 	strh.w	r2, [r3, #251]	; 0xfb

	  telem_pack.pwm2.w1 = controller_output_2[0];
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <_Z9TelemPackv+0x324>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	b29a      	uxth	r2, r3
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <_Z9TelemPackv+0x320>)
 8001738:	f8a3 20fd 	strh.w	r2, [r3, #253]	; 0xfd
	  telem_pack.pwm2.w2 = controller_output_2[1];
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <_Z9TelemPackv+0x324>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	b29a      	uxth	r2, r3
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <_Z9TelemPackv+0x320>)
 8001744:	f8a3 20ff 	strh.w	r2, [r3, #255]	; 0xff
	  telem_pack.pwm2.w3 = controller_output_2[2];
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <_Z9TelemPackv+0x324>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	b29a      	uxth	r2, r3
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <_Z9TelemPackv+0x320>)
 8001750:	f8a3 2101 	strh.w	r2, [r3, #257]	; 0x101
	  telem_pack.pwm2.w4 = controller_output_2[3];
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <_Z9TelemPackv+0x324>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	b29a      	uxth	r2, r3
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <_Z9TelemPackv+0x320>)
 800175c:	f8a3 2103 	strh.w	r2, [r3, #259]	; 0x103

	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 8001760:	4a08      	ldr	r2, [pc, #32]	; (8001784 <_Z9TelemPackv+0x328>)
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <_Z9TelemPackv+0x320>)
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f240 1305 	movw	r3, #261	; 0x105
 800176c:	461a      	mov	r2, r3
 800176e:	f006 fe65 	bl	800843c <memcpy>
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200014b8 	.word	0x200014b8
 800177c:	20000900 	.word	0x20000900
 8001780:	20001498 	.word	0x20001498
 8001784:	20000a08 	.word	0x20000a08

08001788 <_Z7pwm2angt>:
    }


}

float pwm2ang(unsigned short int pwm) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	80fb      	strh	r3, [r7, #6]
	int dead_zone = 5;
 8001792:	2305      	movs	r3, #5
 8001794:	61bb      	str	r3, [r7, #24]

	int in_min  = 1000;
 8001796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179a:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 800179c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80017a0:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	*/
	int out_min = -20;
 80017a2:	f06f 0313 	mvn.w	r3, #19
 80017a6:	60fb      	str	r3, [r7, #12]
	int out_max  = 20;
 80017a8:	2314      	movs	r3, #20
 80017aa:	60bb      	str	r3, [r7, #8]
	unsigned short int pwm_out;

	if(pwm > 1500 - dead_zone && pwm < 1500 + dead_zone) {
 80017ac:	88fa      	ldrh	r2, [r7, #6]
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80017b4:	3304      	adds	r3, #4
 80017b6:	429a      	cmp	r2, r3
 80017b8:	dd09      	ble.n	80017ce <_Z7pwm2angt+0x46>
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	db03      	blt.n	80017ce <_Z7pwm2angt+0x46>
		pwm_out = 1500;
 80017c6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80017ca:	83fb      	strh	r3, [r7, #30]
 80017cc:	e001      	b.n	80017d2 <_Z7pwm2angt+0x4a>
	}

	else {
		pwm_out = pwm;
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	83fb      	strh	r3, [r7, #30]
	}

	return (pwm_out - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80017d2:	8bfa      	ldrh	r2, [r7, #30]
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	1a8a      	subs	r2, r1, r2
 80017de:	fb02 f203 	mul.w	r2, r2, r3
 80017e2:	6939      	ldr	r1, [r7, #16]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	1acb      	subs	r3, r1, r3
 80017e8:	fb92 f2f3 	sdiv	r2, r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe ff2b 	bl	800064c <__aeabi_i2f>
 80017f6:	4603      	mov	r3, r0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3720      	adds	r7, #32
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_Z8pwm2ratet>:

float pwm2rate(unsigned short int pwm) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	80fb      	strh	r3, [r7, #6]

	int in_min  = 1000;
 800180a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180e:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8001810:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001814:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	 */
	int out_min = -100;
 8001816:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800181a:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 800181c:	2364      	movs	r3, #100	; 0x64
 800181e:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8001820:	88fa      	ldrh	r2, [r7, #6]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	68b9      	ldr	r1, [r7, #8]
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	1a8a      	subs	r2, r1, r2
 800182c:	fb02 f203 	mul.w	r2, r2, r3
 8001830:	6939      	ldr	r1, [r7, #16]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	1acb      	subs	r3, r1, r3
 8001836:	fb92 f2f3 	sdiv	r2, r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4413      	add	r3, r2
 800183e:	425b      	negs	r3, r3
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe ff03 	bl	800064c <__aeabi_i2f>
 8001846:	4603      	mov	r3, r0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_Z6PWMYazv>:
float square(float x) {
	float y = x*x;
	return y;
}

void PWMYaz() {
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0

#endif

#ifdef UAV2

	  if(ch[EMERGENCY_CH-1] < 1500) {
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <_Z6PWMYazv+0x6c>)
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	f240 52db 	movw	r2, #1499	; 0x5db
 800185c:	4293      	cmp	r3, r2
 800185e:	dc14      	bgt.n	800188a <_Z6PWMYazv+0x3a>

			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output_2[0]);
 8001860:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <_Z6PWMYazv+0x70>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <_Z6PWMYazv+0x74>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output_2[1]);
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <_Z6PWMYazv+0x70>)
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <_Z6PWMYazv+0x74>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output_2[2]);
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <_Z6PWMYazv+0x70>)
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <_Z6PWMYazv+0x74>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output_2[3]);
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <_Z6PWMYazv+0x70>)
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <_Z6PWMYazv+0x74>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
	  }
#endif

}
 8001888:	e013      	b.n	80018b2 <_Z6PWMYazv+0x62>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <_Z6PWMYazv+0x74>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001892:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <_Z6PWMYazv+0x74>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800189c:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <_Z6PWMYazv+0x74>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018a6:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <_Z6PWMYazv+0x74>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	200014b8 	.word	0x200014b8
 80018c0:	20001498 	.word	0x20001498
 80018c4:	20001778 	.word	0x20001778

080018c8 <_Z11MotorBaslatv>:
	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
	return GyroXh;
}

void MotorBaslat(void) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <_Z11MotorBaslatv+0x38>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018d4:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <_Z11MotorBaslatv+0x38>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018de:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <_Z11MotorBaslatv+0x38>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018e8:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 80018ea:	4b05      	ldr	r3, [pc, #20]	; (8001900 <_Z11MotorBaslatv+0x38>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018f2:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 80018f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018f8:	f002 f874 	bl	80039e4 <HAL_Delay>
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20001778 	.word	0x20001778

08001904 <HAL_TIM_PeriodElapsedCallback>:
		home = true;
}
*/

//Ana Kontrolcü döngüsü
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

	if(htim == &htim2) {
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a26      	ldr	r2, [pc, #152]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d145      	bne.n	80019a0 <HAL_TIM_PeriodElapsedCallback+0x9c>
		//1.25 ms || 800 Hz
		Check_Arm();
 8001914:	f7ff fcec 	bl	80012f0 <_Z9Check_Armv>
		Check_Disarm();
 8001918:	f7ff fd4e 	bl	80013b8 <_Z12Check_Disarmv>

		set_ucounter(SONAR_CLOCK_RATE);
 800191c:	2014      	movs	r0, #20
 800191e:	f7ff fa23 	bl	8000d68 <set_ucounter>
		set_b_counter(12);
 8001922:	200c      	movs	r0, #12
 8001924:	f7ff f952 	bl	8000bcc <set_b_counter>

		controller_counter++;
 8001928:	4b20      	ldr	r3, [pc, #128]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	3301      	adds	r3, #1
 800192e:	b29a      	uxth	r2, r3
 8001930:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001932:	801a      	strh	r2, [r3, #0]
		camera_counter++;
 8001934:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	3301      	adds	r3, #1
 800193a:	b29a      	uxth	r2, r3
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800193e:	801a      	strh	r2, [r3, #0]
		mag_counter++;
 8001940:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	3301      	adds	r3, #1
 8001946:	b29a      	uxth	r2, r3
 8001948:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800194a:	801a      	strh	r2, [r3, #0]


		}
#endif

		if(controller_counter == CONTROLLER_RATE) { //5 ms || 200 Hz
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d125      	bne.n	80019a0 <HAL_TIM_PeriodElapsedCallback+0x9c>
			_controller_timer = controller_timer;
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a18      	ldr	r2, [pc, #96]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800195a:	6013      	str	r3, [r2, #0]
			controller_timer = HAL_GetTick();
 800195c:	f002 f838 	bl	80039d0 <HAL_GetTick>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001966:	601a      	str	r2, [r3, #0]
			controller_timer_dif = controller_timer-_controller_timer;
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	4a13      	ldr	r2, [pc, #76]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001974:	6013      	str	r3, [r2, #0]
			controller_counter = 0;
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001978:	2200      	movs	r2, #0
 800197a:	801a      	strh	r2, [r3, #0]
			  controller_output_2[2] = 1000;
			  controller_output_2[3] = 1000;
		  }
		#endif

		  state_des.rates[0] = controller.roll_rate_des;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800197e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001982:	4a11      	ldr	r2, [pc, #68]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001984:	60d3      	str	r3, [r2, #12]
		  state_des.rates[1] = controller.pitch_rate_des;
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001988:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800198c:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800198e:	6113      	str	r3, [r2, #16]


		  TelemPack();
 8001990:	f7ff fd64 	bl	800145c <_Z9TelemPackv>
		  CheckFailsafe();
 8001994:	f7ff fc4e 	bl	8001234 <_Z13CheckFailsafev>
		  CheckSwarm();
 8001998:	f7ff fc0c 	bl	80011b4 <_Z10CheckSwarmv>
		  PWMYaz();
 800199c:	f7ff ff58 	bl	8001850 <_Z6PWMYazv>
		  //SwitchMag();

		  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
		}
		}
	}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200017c0 	.word	0x200017c0
 80019ac:	20001524 	.word	0x20001524
 80019b0:	20001526 	.word	0x20001526
 80019b4:	20001528 	.word	0x20001528
 80019b8:	20001530 	.word	0x20001530
 80019bc:	20001534 	.word	0x20001534
 80019c0:	20001538 	.word	0x20001538
 80019c4:	20000e58 	.word	0x20000e58
 80019c8:	200008b8 	.word	0x200008b8

080019cc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a57      	ldr	r2, [pc, #348]	; (8001b34 <HAL_TIM_IC_CaptureCallback+0x168>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	f040 80a7 	bne.w	8001b2c <HAL_TIM_IC_CaptureCallback+0x160>


	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	7f1b      	ldrb	r3, [r3, #28]
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	f040 80a2 	bne.w	8001b2c <HAL_TIM_IC_CaptureCallback+0x160>
	{
				IC_Val1 = IC_Val2;
 80019e8:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a53      	ldr	r2, [pc, #332]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x170>)
 80019ee:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 80019f0:	2108      	movs	r1, #8
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f004 fe66 	bl	80066c4 <HAL_TIM_ReadCapturedValue>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b4e      	ldr	r3, [pc, #312]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80019fe:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 8001a00:	4b4d      	ldr	r3, [pc, #308]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b4d      	ldr	r3, [pc, #308]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x170>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	4a4d      	ldr	r2, [pc, #308]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001a0c:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 8001a0e:	4b4c      	ldr	r3, [pc, #304]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	0fdb      	lsrs	r3, r3, #31
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d006      	beq.n	8001a28 <HAL_TIM_IC_CaptureCallback+0x5c>
					Diff+=65535;
 8001a1a:	4b49      	ldr	r3, [pc, #292]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001a22:	33ff      	adds	r3, #255	; 0xff
 8001a24:	4a46      	ldr	r2, [pc, #280]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001a26:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
					if(Diff >= 800 && Diff <= 2000) {
 8001a28:	4b45      	ldr	r3, [pc, #276]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001a30:	db06      	blt.n	8001a40 <HAL_TIM_IC_CaptureCallback+0x74>
 8001a32:	4b43      	ldr	r3, [pc, #268]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001a3a:	dc01      	bgt.n	8001a40 <HAL_TIM_IC_CaptureCallback+0x74>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <HAL_TIM_IC_CaptureCallback+0x76>
 8001a40:	2300      	movs	r3, #0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d021      	beq.n	8001a8a <HAL_TIM_IC_CaptureCallback+0xbe>
						ch[i] = Diff;
						ch_count++;
					#endif

					#ifdef UAV2
						if(i == EMERGENCY_CH-1) {
 8001a46:	4b3f      	ldr	r3, [pc, #252]	; (8001b44 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	bf0c      	ite	eq
 8001a50:	2301      	moveq	r3, #1
 8001a52:	2300      	movne	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d011      	beq.n	8001a7e <HAL_TIM_IC_CaptureCallback+0xb2>
							ch_[i] = ch[i];
 8001a5a:	4b3a      	ldr	r3, [pc, #232]	; (8001b44 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	b21b      	sxth	r3, r3
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b38      	ldr	r3, [pc, #224]	; (8001b44 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a70:	4a36      	ldr	r2, [pc, #216]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x180>)
 8001a72:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							ch[EMERGENCY_CH-1] = Diff;
 8001a76:	4b32      	ldr	r3, [pc, #200]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a33      	ldr	r2, [pc, #204]	; (8001b48 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001a7c:	6113      	str	r3, [r2, #16]
						}

						ch_count++;
 8001a7e:	4b34      	ldr	r3, [pc, #208]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	3301      	adds	r3, #1
 8001a84:	4a32      	ldr	r2, [pc, #200]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	e015      	b.n	8001ab6 <HAL_TIM_IC_CaptureCallback+0xea>
					#endif

					}

					else if(Diff > CH0) {
 8001a8a:	4b2d      	ldr	r3, [pc, #180]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a92:	4293      	cmp	r3, r2
 8001a94:	bfcc      	ite	gt
 8001a96:	2301      	movgt	r3, #1
 8001a98:	2300      	movle	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00a      	beq.n	8001ab6 <HAL_TIM_IC_CaptureCallback+0xea>
						//ch[CH_NUM] = ch[i];
						i = -1;
 8001aa0:	4b28      	ldr	r3, [pc, #160]	; (8001b44 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001aa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aa6:	801a      	strh	r2, [r3, #0]
						ch[CH_NUM] = Diff;
 8001aa8:	4b25      	ldr	r3, [pc, #148]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a26      	ldr	r2, [pc, #152]	; (8001b48 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001aae:	6293      	str	r3, [r2, #40]	; 0x28
						sync = 1;
 8001ab0:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	801a      	strh	r2, [r3, #0]
					}




				state_des.angles[0] =  pwm2ang(ch[0]);
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fe63 	bl	8001788 <_Z7pwm2angt>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4a24      	ldr	r2, [pc, #144]	; (8001b58 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001ac6:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pwm2ang(ch[1]);
 8001ac8:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fe5a 	bl	8001788 <_Z7pwm2angt>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4a20      	ldr	r2, [pc, #128]	; (8001b58 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001ad8:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 8001ada:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pwm2rate(ch[3]);
 8001ae2:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fe89 	bl	8001800 <_Z8pwm2ratet>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4a19      	ldr	r2, [pc, #100]	; (8001b58 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001af2:	6153      	str	r3, [r2, #20]

				i++;
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3301      	adds	r3, #1
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	b21a      	sxth	r2, r3
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001b04:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x190>)
 8001b10:	fb83 2301 	smull	r2, r3, r3, r1
 8001b14:	105a      	asrs	r2, r3, #1
 8001b16:	17cb      	asrs	r3, r1, #31
 8001b18:	1ad2      	subs	r2, r2, r3
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	1aca      	subs	r2, r1, r3
 8001b26:	b212      	sxth	r2, r2
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001b2a:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20001730 	.word	0x20001730
 8001b38:	200014a8 	.word	0x200014a8
 8001b3c:	200014ac 	.word	0x200014ac
 8001b40:	200014b0 	.word	0x200014b0
 8001b44:	200014b4 	.word	0x200014b4
 8001b48:	200014b8 	.word	0x200014b8
 8001b4c:	200014e4 	.word	0x200014e4
 8001b50:	2000152c 	.word	0x2000152c
 8001b54:	20001510 	.word	0x20001510
 8001b58:	200008b8 	.word	0x200008b8
 8001b5c:	2e8ba2e9 	.word	0x2e8ba2e9

08001b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b64:	b672      	cpsid	i
}
 8001b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <Error_Handler+0x8>
	...

08001b6c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d10a      	bne.n	8001b92 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d105      	bne.n	8001b92 <_Z41__static_initialization_and_destruction_0ii+0x26>
Kalman_Filtresi EKF;
 8001b86:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001b88:	f006 fa22 	bl	8007fd0 <_ZN15Kalman_FiltresiC1Ev>
Controller controller;
 8001b8c:	480b      	ldr	r0, [pc, #44]	; (8001bbc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001b8e:	f006 f8e7 	bl	8007d60 <_ZN10ControllerC1Ev>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10a      	bne.n	8001bae <_Z41__static_initialization_and_destruction_0ii+0x42>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d105      	bne.n	8001bae <_Z41__static_initialization_and_destruction_0ii+0x42>
 8001ba2:	4806      	ldr	r0, [pc, #24]	; (8001bbc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001ba4:	f006 f9d6 	bl	8007f54 <_ZN10ControllerD1Ev>
Kalman_Filtresi EKF;
 8001ba8:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001baa:	f006 fb53 	bl	8008254 <_ZN15Kalman_FiltresiD1Ev>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000b10 	.word	0x20000b10
 8001bbc:	20000e58 	.word	0x20000e58

08001bc0 <_GLOBAL__sub_I_gyroX>:
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f7ff ffcf 	bl	8001b6c <_Z41__static_initialization_and_destruction_0ii>
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_GLOBAL__sub_D_gyroX>:
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f7ff ffc7 	bl	8001b6c <_Z41__static_initialization_and_destruction_0ii>
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <NRF24_DelayMicroSeconds+0x38>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <NRF24_DelayMicroSeconds+0x3c>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	0c9a      	lsrs	r2, r3, #18
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8001c00:	bf00      	nop
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1e5a      	subs	r2, r3, #1
 8001c06:	60fa      	str	r2, [r7, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1fa      	bne.n	8001c02 <NRF24_DelayMicroSeconds+0x22>
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	20000008 	.word	0x20000008
 8001c1c:	165e9f81 	.word	0x165e9f81

08001c20 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d008      	beq.n	8001c40 <NRF24_csn+0x20>
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <NRF24_csn+0x38>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <NRF24_csn+0x3c>)
 8001c34:	8811      	ldrh	r1, [r2, #0]
 8001c36:	2201      	movs	r2, #1
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f002 fbed 	bl	8004418 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8001c3e:	e007      	b.n	8001c50 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <NRF24_csn+0x38>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <NRF24_csn+0x3c>)
 8001c46:	8811      	ldrh	r1, [r2, #0]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f002 fbe4 	bl	8004418 <HAL_GPIO_WritePin>
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20001584 	.word	0x20001584
 8001c5c:	20001588 	.word	0x20001588

08001c60 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d008      	beq.n	8001c80 <NRF24_ce+0x20>
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <NRF24_ce+0x38>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <NRF24_ce+0x3c>)
 8001c74:	8811      	ldrh	r1, [r2, #0]
 8001c76:	2201      	movs	r2, #1
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f002 fbcd 	bl	8004418 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8001c7e:	e007      	b.n	8001c90 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <NRF24_ce+0x38>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <NRF24_ce+0x3c>)
 8001c86:	8811      	ldrh	r1, [r2, #0]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f002 fbc4 	bl	8004418 <HAL_GPIO_WritePin>
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20001584 	.word	0x20001584
 8001c9c:	2000158a 	.word	0x2000158a

08001ca0 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8001caa:	2000      	movs	r0, #0
 8001cac:	f7ff ffb8 	bl	8001c20 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	f003 031f 	and.w	r3, r3, #31
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001cba:	f107 010c 	add.w	r1, r7, #12
 8001cbe:	2364      	movs	r3, #100	; 0x64
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	480a      	ldr	r0, [pc, #40]	; (8001cec <NRF24_read_register+0x4c>)
 8001cc4:	f003 f9bc 	bl	8005040 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	1c59      	adds	r1, r3, #1
 8001cce:	2364      	movs	r3, #100	; 0x64
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	4806      	ldr	r0, [pc, #24]	; (8001cec <NRF24_read_register+0x4c>)
 8001cd4:	f003 faf0 	bl	80052b8 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8001cd8:	7b7b      	ldrb	r3, [r7, #13]
 8001cda:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7ff ff9f 	bl	8001c20 <NRF24_csn>
	return retData;
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	2000158c 	.word	0x2000158c

08001cf0 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001d00:	2000      	movs	r0, #0
 8001d02:	f7ff ff8d 	bl	8001c20 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001d10:	f107 010c 	add.w	r1, r7, #12
 8001d14:	2364      	movs	r3, #100	; 0x64
 8001d16:	2201      	movs	r2, #1
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <NRF24_read_registerN+0x4c>)
 8001d1a:	f003 f991 	bl	8005040 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8001d1e:	79bb      	ldrb	r3, [r7, #6]
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	2364      	movs	r3, #100	; 0x64
 8001d24:	6839      	ldr	r1, [r7, #0]
 8001d26:	4805      	ldr	r0, [pc, #20]	; (8001d3c <NRF24_read_registerN+0x4c>)
 8001d28:	f003 fac6 	bl	80052b8 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f7ff ff77 	bl	8001c20 <NRF24_csn>
}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	2000158c 	.word	0x2000158c

08001d40 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	460a      	mov	r2, r1
 8001d4a:	71fb      	strb	r3, [r7, #7]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7ff ff65 	bl	8001c20 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	f043 0320 	orr.w	r3, r3, #32
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8001d60:	79bb      	ldrb	r3, [r7, #6]
 8001d62:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8001d64:	f107 010c 	add.w	r1, r7, #12
 8001d68:	2364      	movs	r3, #100	; 0x64
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	4804      	ldr	r0, [pc, #16]	; (8001d80 <NRF24_write_register+0x40>)
 8001d6e:	f003 f967 	bl	8005040 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001d72:	2001      	movs	r0, #1
 8001d74:	f7ff ff54 	bl	8001c20 <NRF24_csn>
}
 8001d78:	bf00      	nop
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	2000158c 	.word	0x2000158c

08001d84 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
 8001d90:	4613      	mov	r3, r2
 8001d92:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7ff ff43 	bl	8001c20 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	f043 0320 	orr.w	r3, r3, #32
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001da4:	f107 010c 	add.w	r1, r7, #12
 8001da8:	2364      	movs	r3, #100	; 0x64
 8001daa:	2201      	movs	r2, #1
 8001dac:	4808      	ldr	r0, [pc, #32]	; (8001dd0 <NRF24_write_registerN+0x4c>)
 8001dae:	f003 f947 	bl	8005040 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8001db2:	79bb      	ldrb	r3, [r7, #6]
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	2364      	movs	r3, #100	; 0x64
 8001db8:	6839      	ldr	r1, [r7, #0]
 8001dba:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <NRF24_write_registerN+0x4c>)
 8001dbc:	f003 f940 	bl	8005040 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	f7ff ff2d 	bl	8001c20 <NRF24_csn>
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2000158c 	.word	0x2000158c

08001dd4 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8001de0:	f000 fa08 	bl	80021f4 <NRF24_getPayloadSize>
 8001de4:	4603      	mov	r3, r0
 8001de6:	461a      	mov	r2, r3
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d303      	bcc.n	8001df6 <NRF24_read_payload+0x22>
 8001dee:	f000 fa01 	bl	80021f4 <NRF24_getPayloadSize>
 8001df2:	4603      	mov	r3, r0
 8001df4:	e000      	b.n	8001df8 <NRF24_read_payload+0x24>
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f7ff ff10 	bl	8001c20 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8001e00:	2361      	movs	r3, #97	; 0x61
 8001e02:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8001e04:	f107 010e 	add.w	r1, r7, #14
 8001e08:	2364      	movs	r3, #100	; 0x64
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	4808      	ldr	r0, [pc, #32]	; (8001e30 <NRF24_read_payload+0x5c>)
 8001e0e:	f003 f917 	bl	8005040 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	2364      	movs	r3, #100	; 0x64
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	4805      	ldr	r0, [pc, #20]	; (8001e30 <NRF24_read_payload+0x5c>)
 8001e1c:	f003 fa4c 	bl	80052b8 <HAL_SPI_Receive>
	NRF24_csn(1);
 8001e20:	2001      	movs	r0, #1
 8001e22:	f7ff fefd 	bl	8001c20 <NRF24_csn>
}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	2000158c 	.word	0x2000158c

08001e34 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8001e38:	21ff      	movs	r1, #255	; 0xff
 8001e3a:	20e1      	movs	r0, #225	; 0xe1
 8001e3c:	f7ff ff80 	bl	8001d40 <NRF24_write_register>
}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001e48:	21ff      	movs	r1, #255	; 0xff
 8001e4a:	20e2      	movs	r0, #226	; 0xe2
 8001e4c:	f7ff ff78 	bl	8001d40 <NRF24_write_register>
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8001e5a:	2007      	movs	r0, #7
 8001e5c:	f7ff ff20 	bl	8001ca0 <NRF24_read_register>
 8001e60:	4603      	mov	r3, r0
 8001e62:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8001e64:	79fb      	ldrb	r3, [r7, #7]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8001e70:	b082      	sub	sp, #8
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	61fb      	str	r3, [r7, #28]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	807b      	strh	r3, [r7, #2]
 8001e80:	4613      	mov	r3, r2
 8001e82:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8001e84:	4b66      	ldr	r3, [pc, #408]	; (8002020 <NRF24_begin+0x1b0>)
 8001e86:	4618      	mov	r0, r3
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	2258      	movs	r2, #88	; 0x58
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f006 fad4 	bl	800843c <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8001e94:	4a63      	ldr	r2, [pc, #396]	; (8002024 <NRF24_begin+0x1b4>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8001e9a:	4a63      	ldr	r2, [pc, #396]	; (8002028 <NRF24_begin+0x1b8>)
 8001e9c:	887b      	ldrh	r3, [r7, #2]
 8001e9e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001ea0:	4a62      	ldr	r2, [pc, #392]	; (800202c <NRF24_begin+0x1bc>)
 8001ea2:	883b      	ldrh	r3, [r7, #0]
 8001ea4:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	f7ff feba 	bl	8001c20 <NRF24_csn>
	NRF24_ce(0);
 8001eac:	2000      	movs	r0, #0
 8001eae:	f7ff fed7 	bl	8001c60 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8001eb2:	2005      	movs	r0, #5
 8001eb4:	f001 fd96 	bl	80039e4 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8001eb8:	2108      	movs	r1, #8
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7ff ff40 	bl	8001d40 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8001ec0:	213f      	movs	r1, #63	; 0x3f
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	f7ff ff3c 	bl	8001d40 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8001ec8:	2103      	movs	r1, #3
 8001eca:	2002      	movs	r0, #2
 8001ecc:	f7ff ff38 	bl	8001d40 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8001ed0:	2103      	movs	r1, #3
 8001ed2:	2003      	movs	r0, #3
 8001ed4:	f7ff ff34 	bl	8001d40 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8001ed8:	2103      	movs	r1, #3
 8001eda:	2004      	movs	r0, #4
 8001edc:	f7ff ff30 	bl	8001d40 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8001ee0:	2102      	movs	r1, #2
 8001ee2:	2005      	movs	r0, #5
 8001ee4:	f7ff ff2c 	bl	8001d40 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8001ee8:	210f      	movs	r1, #15
 8001eea:	2006      	movs	r0, #6
 8001eec:	f7ff ff28 	bl	8001d40 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8001ef0:	210e      	movs	r1, #14
 8001ef2:	2007      	movs	r0, #7
 8001ef4:	f7ff ff24 	bl	8001d40 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2008      	movs	r0, #8
 8001efc:	f7ff ff20 	bl	8001d40 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8001f00:	2100      	movs	r1, #0
 8001f02:	2009      	movs	r0, #9
 8001f04:	f7ff ff1c 	bl	8001d40 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8001f08:	23e7      	movs	r3, #231	; 0xe7
 8001f0a:	733b      	strb	r3, [r7, #12]
 8001f0c:	23e7      	movs	r3, #231	; 0xe7
 8001f0e:	72fb      	strb	r3, [r7, #11]
 8001f10:	23e7      	movs	r3, #231	; 0xe7
 8001f12:	72bb      	strb	r3, [r7, #10]
 8001f14:	23e7      	movs	r3, #231	; 0xe7
 8001f16:	727b      	strb	r3, [r7, #9]
 8001f18:	23e7      	movs	r3, #231	; 0xe7
 8001f1a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8001f1c:	f107 0308 	add.w	r3, r7, #8
 8001f20:	2205      	movs	r2, #5
 8001f22:	4619      	mov	r1, r3
 8001f24:	200a      	movs	r0, #10
 8001f26:	f7ff ff2d 	bl	8001d84 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8001f2a:	23c2      	movs	r3, #194	; 0xc2
 8001f2c:	733b      	strb	r3, [r7, #12]
 8001f2e:	23c2      	movs	r3, #194	; 0xc2
 8001f30:	72fb      	strb	r3, [r7, #11]
 8001f32:	23c2      	movs	r3, #194	; 0xc2
 8001f34:	72bb      	strb	r3, [r7, #10]
 8001f36:	23c2      	movs	r3, #194	; 0xc2
 8001f38:	727b      	strb	r3, [r7, #9]
 8001f3a:	23c2      	movs	r3, #194	; 0xc2
 8001f3c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8001f3e:	f107 0308 	add.w	r3, r7, #8
 8001f42:	2205      	movs	r2, #5
 8001f44:	4619      	mov	r1, r3
 8001f46:	200b      	movs	r0, #11
 8001f48:	f7ff ff1c 	bl	8001d84 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8001f4c:	21c3      	movs	r1, #195	; 0xc3
 8001f4e:	200c      	movs	r0, #12
 8001f50:	f7ff fef6 	bl	8001d40 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8001f54:	21c4      	movs	r1, #196	; 0xc4
 8001f56:	200d      	movs	r0, #13
 8001f58:	f7ff fef2 	bl	8001d40 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8001f5c:	21c5      	movs	r1, #197	; 0xc5
 8001f5e:	200e      	movs	r0, #14
 8001f60:	f7ff feee 	bl	8001d40 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8001f64:	21c6      	movs	r1, #198	; 0xc6
 8001f66:	200f      	movs	r0, #15
 8001f68:	f7ff feea 	bl	8001d40 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8001f6c:	23e7      	movs	r3, #231	; 0xe7
 8001f6e:	733b      	strb	r3, [r7, #12]
 8001f70:	23e7      	movs	r3, #231	; 0xe7
 8001f72:	72fb      	strb	r3, [r7, #11]
 8001f74:	23e7      	movs	r3, #231	; 0xe7
 8001f76:	72bb      	strb	r3, [r7, #10]
 8001f78:	23e7      	movs	r3, #231	; 0xe7
 8001f7a:	727b      	strb	r3, [r7, #9]
 8001f7c:	23e7      	movs	r3, #231	; 0xe7
 8001f7e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8001f80:	f107 0308 	add.w	r3, r7, #8
 8001f84:	2205      	movs	r2, #5
 8001f86:	4619      	mov	r1, r3
 8001f88:	2010      	movs	r0, #16
 8001f8a:	f7ff fefb 	bl	8001d84 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8001f8e:	2100      	movs	r1, #0
 8001f90:	2011      	movs	r0, #17
 8001f92:	f7ff fed5 	bl	8001d40 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8001f96:	2100      	movs	r1, #0
 8001f98:	2012      	movs	r0, #18
 8001f9a:	f7ff fed1 	bl	8001d40 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	2013      	movs	r0, #19
 8001fa2:	f7ff fecd 	bl	8001d40 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	2014      	movs	r0, #20
 8001faa:	f7ff fec9 	bl	8001d40 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8001fae:	2100      	movs	r1, #0
 8001fb0:	2015      	movs	r0, #21
 8001fb2:	f7ff fec5 	bl	8001d40 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	2016      	movs	r0, #22
 8001fba:	f7ff fec1 	bl	8001d40 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8001fbe:	f000 fa47 	bl	8002450 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	201c      	movs	r0, #28
 8001fc6:	f7ff febb 	bl	8001d40 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8001fca:	2100      	movs	r1, #0
 8001fcc:	201d      	movs	r0, #29
 8001fce:	f7ff feb7 	bl	8001d40 <NRF24_write_register>
	printRadioSettings();
 8001fd2:	f000 fa57 	bl	8002484 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8001fd6:	210f      	movs	r1, #15
 8001fd8:	200f      	movs	r0, #15
 8001fda:	f000 f8c5 	bl	8002168 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8001fde:	2003      	movs	r0, #3
 8001fe0:	f000 f947 	bl	8002272 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f000 f97d 	bl	80022e4 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8001fea:	2002      	movs	r0, #2
 8001fec:	f000 f9c0 	bl	8002370 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8001ff0:	f000 f912 	bl	8002218 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8001ff4:	2020      	movs	r0, #32
 8001ff6:	f000 f8e7 	bl	80021c8 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8001ffa:	f000 fa20 	bl	800243e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8001ffe:	204c      	movs	r0, #76	; 0x4c
 8002000:	f000 f8cd 	bl	800219e <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8002004:	f7ff ff16 	bl	8001e34 <NRF24_flush_tx>
	NRF24_flush_rx();
 8002008:	f7ff ff1c 	bl	8001e44 <NRF24_flush_rx>

	NRF24_powerDown();
 800200c:	f000 f9d8 	bl	80023c0 <NRF24_powerDown>

}
 8002010:	bf00      	nop
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800201a:	b002      	add	sp, #8
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	2000158c 	.word	0x2000158c
 8002024:	20001584 	.word	0x20001584
 8002028:	20001588 	.word	0x20001588
 800202c:	2000158a 	.word	0x2000158a

08002030 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8002034:	2000      	movs	r0, #0
 8002036:	f7ff fe33 	bl	8001ca0 <NRF24_read_register>
 800203a:	4603      	mov	r3, r0
 800203c:	f043 0303 	orr.w	r3, r3, #3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	4619      	mov	r1, r3
 8002044:	2000      	movs	r0, #0
 8002046:	f7ff fe7b 	bl	8001d40 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <NRF24_startListening+0x48>)
 800204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002050:	4313      	orrs	r3, r2
 8002052:	d004      	beq.n	800205e <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8002054:	2205      	movs	r2, #5
 8002056:	4908      	ldr	r1, [pc, #32]	; (8002078 <NRF24_startListening+0x48>)
 8002058:	200a      	movs	r0, #10
 800205a:	f7ff fe93 	bl	8001d84 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 800205e:	f7ff fee9 	bl	8001e34 <NRF24_flush_tx>
	NRF24_flush_rx();
 8002062:	f7ff feef 	bl	8001e44 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8002066:	2001      	movs	r0, #1
 8002068:	f7ff fdfa 	bl	8001c60 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 800206c:	2096      	movs	r0, #150	; 0x96
 800206e:	f7ff fdb7 	bl	8001be0 <NRF24_DelayMicroSeconds>
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20001578 	.word	0x20001578

0800207c <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8002080:	2000      	movs	r0, #0
 8002082:	f000 f9ac 	bl	80023de <NRF24_availablePipe>
 8002086:	4603      	mov	r3, r0
}
 8002088:	4618      	mov	r0, r3
 800208a:	bd80      	pop	{r7, pc}

0800208c <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	4619      	mov	r1, r3
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff fe99 	bl	8001dd4 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80020a2:	2017      	movs	r0, #23
 80020a4:	f7ff fdfc 	bl	8001ca0 <NRF24_read_register>
 80020a8:	4603      	mov	r3, r0
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 80020b0:	f7ff fec8 	bl	8001e44 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 80020b4:	f000 f8a8 	bl	8002208 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	bf14      	ite	ne
 80020be:	2301      	movne	r3, #1
 80020c0:	2300      	moveq	r3, #0
 80020c2:	b2db      	uxtb	r3, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4601      	mov	r1, r0
 80020d4:	e9c7 2300 	strd	r2, r3, [r7]
 80020d8:	460b      	mov	r3, r1
 80020da:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d104      	bne.n	80020ec <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 80020e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020e6:	491c      	ldr	r1, [pc, #112]	; (8002158 <NRF24_openReadingPipe+0x8c>)
 80020e8:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	2b06      	cmp	r3, #6
 80020f0:	d82d      	bhi.n	800214e <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d808      	bhi.n	800210a <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	4a18      	ldr	r2, [pc, #96]	; (800215c <NRF24_openReadingPipe+0x90>)
 80020fc:	5cd3      	ldrb	r3, [r2, r3]
 80020fe:	4639      	mov	r1, r7
 8002100:	2205      	movs	r2, #5
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fe3e 	bl	8001d84 <NRF24_write_registerN>
 8002108:	e007      	b.n	800211a <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	4a13      	ldr	r2, [pc, #76]	; (800215c <NRF24_openReadingPipe+0x90>)
 800210e:	5cd3      	ldrb	r3, [r2, r3]
 8002110:	4639      	mov	r1, r7
 8002112:	2201      	movs	r2, #1
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fe35 	bl	8001d84 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	4a10      	ldr	r2, [pc, #64]	; (8002160 <NRF24_openReadingPipe+0x94>)
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	4a10      	ldr	r2, [pc, #64]	; (8002164 <NRF24_openReadingPipe+0x98>)
 8002122:	7812      	ldrb	r2, [r2, #0]
 8002124:	4611      	mov	r1, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fe0a 	bl	8001d40 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 800212c:	2002      	movs	r0, #2
 800212e:	f7ff fdb7 	bl	8001ca0 <NRF24_read_register>
 8002132:	4603      	mov	r3, r0
 8002134:	b25a      	sxtb	r2, r3
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	2101      	movs	r1, #1
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	b25b      	sxtb	r3, r3
 8002140:	4313      	orrs	r3, r2
 8002142:	b25b      	sxtb	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	4619      	mov	r1, r3
 8002148:	2002      	movs	r0, #2
 800214a:	f7ff fdf9 	bl	8001d40 <NRF24_write_register>
	}

}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20001578 	.word	0x20001578
 800215c:	08009280 	.word	0x08009280
 8002160:	08009288 	.word	0x08009288
 8002164:	20001580 	.word	0x20001580

08002168 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	460a      	mov	r2, r1
 8002172:	71fb      	strb	r3, [r7, #7]
 8002174:	4613      	mov	r3, r2
 8002176:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	b25a      	sxtb	r2, r3
 800217e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	b25b      	sxtb	r3, r3
 8002188:	4313      	orrs	r3, r2
 800218a:	b25b      	sxtb	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	4619      	mov	r1, r3
 8002190:	2004      	movs	r0, #4
 8002192:	f7ff fdd5 	bl	8001d40 <NRF24_write_register>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80021a8:	237f      	movs	r3, #127	; 0x7f
 80021aa:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	4293      	cmp	r3, r2
 80021b2:	bf28      	it	cs
 80021b4:	4613      	movcs	r3, r2
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	4619      	mov	r1, r3
 80021ba:	2005      	movs	r0, #5
 80021bc:	f7ff fdc0 	bl	8001d40 <NRF24_write_register>
}
 80021c0:	bf00      	nop
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80021d2:	2320      	movs	r3, #32
 80021d4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	4293      	cmp	r3, r2
 80021dc:	bf28      	it	cs
 80021de:	4613      	movcs	r3, r2
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <NRF24_setPayloadSize+0x28>)
 80021e4:	701a      	strb	r2, [r3, #0]
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	20001580 	.word	0x20001580

080021f4 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
	return payload_size;
 80021f8:	4b02      	ldr	r3, [pc, #8]	; (8002204 <NRF24_getPayloadSize+0x10>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	20001580 	.word	0x20001580

08002208 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 800220c:	2060      	movs	r0, #96	; 0x60
 800220e:	f7ff fd47 	bl	8001ca0 <NRF24_read_register>
 8002212:	4603      	mov	r3, r0
}
 8002214:	4618      	mov	r0, r3
 8002216:	bd80      	pop	{r7, pc}

08002218 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800221c:	201d      	movs	r0, #29
 800221e:	f7ff fd3f 	bl	8001ca0 <NRF24_read_register>
 8002222:	4603      	mov	r3, r0
 8002224:	f023 0304 	bic.w	r3, r3, #4
 8002228:	b2db      	uxtb	r3, r3
 800222a:	4619      	mov	r1, r3
 800222c:	201d      	movs	r0, #29
 800222e:	f7ff fd87 	bl	8001d40 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8002232:	2100      	movs	r1, #0
 8002234:	201c      	movs	r0, #28
 8002236:	f7ff fd83 	bl	8001d40 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800223a:	4b02      	ldr	r3, [pc, #8]	; (8002244 <NRF24_disableDynamicPayloads+0x2c>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20001581 	.word	0x20001581

08002248 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d004      	beq.n	8002262 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8002258:	213f      	movs	r1, #63	; 0x3f
 800225a:	2001      	movs	r0, #1
 800225c:	f7ff fd70 	bl	8001d40 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8002260:	e003      	b.n	800226a <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8002262:	2100      	movs	r1, #0
 8002264:	2001      	movs	r0, #1
 8002266:	f7ff fd6b 	bl	8001d40 <NRF24_write_register>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	4603      	mov	r3, r0
 800227a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800227c:	2006      	movs	r0, #6
 800227e:	f7ff fd0f 	bl	8001ca0 <NRF24_read_register>
 8002282:	4603      	mov	r3, r0
 8002284:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	f023 0306 	bic.w	r3, r3, #6
 800228c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d104      	bne.n	800229e <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	f043 0306 	orr.w	r3, r3, #6
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	e019      	b.n	80022d2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d104      	bne.n	80022ae <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	f043 0304 	orr.w	r3, r3, #4
 80022aa:	73fb      	strb	r3, [r7, #15]
 80022ac:	e011      	b.n	80022d2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d104      	bne.n	80022be <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	f043 0302 	orr.w	r3, r3, #2
 80022ba:	73fb      	strb	r3, [r7, #15]
 80022bc:	e009      	b.n	80022d2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d006      	beq.n	80022d2 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d103      	bne.n	80022d2 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	f043 0306 	orr.w	r3, r3, #6
 80022d0:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	4619      	mov	r1, r3
 80022d6:	2006      	movs	r0, #6
 80022d8:	f7ff fd32 	bl	8001d40 <NRF24_write_register>
}
 80022dc:	bf00      	nop
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80022f2:	2006      	movs	r0, #6
 80022f4:	f7ff fcd4 	bl	8001ca0 <NRF24_read_register>
 80022f8:	4603      	mov	r3, r0
 80022fa:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <NRF24_setDataRate+0x88>)
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8002302:	7bbb      	ldrb	r3, [r7, #14]
 8002304:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002308:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d107      	bne.n	8002320 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8002310:	4b16      	ldr	r3, [pc, #88]	; (800236c <NRF24_setDataRate+0x88>)
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8002316:	7bbb      	ldrb	r3, [r7, #14]
 8002318:	f043 0320 	orr.w	r3, r3, #32
 800231c:	73bb      	strb	r3, [r7, #14]
 800231e:	e00d      	b.n	800233c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d107      	bne.n	8002336 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <NRF24_setDataRate+0x88>)
 8002328:	2201      	movs	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 800232c:	7bbb      	ldrb	r3, [r7, #14]
 800232e:	f043 0308 	orr.w	r3, r3, #8
 8002332:	73bb      	strb	r3, [r7, #14]
 8002334:	e002      	b.n	800233c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <NRF24_setDataRate+0x88>)
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 800233c:	7bbb      	ldrb	r3, [r7, #14]
 800233e:	4619      	mov	r1, r3
 8002340:	2006      	movs	r0, #6
 8002342:	f7ff fcfd 	bl	8001d40 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8002346:	2006      	movs	r0, #6
 8002348:	f7ff fcaa 	bl	8001ca0 <NRF24_read_register>
 800234c:	4603      	mov	r3, r0
 800234e:	461a      	mov	r2, r3
 8002350:	7bbb      	ldrb	r3, [r7, #14]
 8002352:	4293      	cmp	r3, r2
 8002354:	d102      	bne.n	800235c <NRF24_setDataRate+0x78>
  {
    result = true;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
 800235a:	e002      	b.n	8002362 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <NRF24_setDataRate+0x88>)
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8002362:	7bfb      	ldrb	r3, [r7, #15]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20001582 	.word	0x20001582

08002370 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800237a:	2000      	movs	r0, #0
 800237c:	f7ff fc90 	bl	8001ca0 <NRF24_read_register>
 8002380:	4603      	mov	r3, r0
 8002382:	f023 030c 	bic.w	r3, r3, #12
 8002386:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00f      	beq.n	80023ae <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d104      	bne.n	800239e <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	f043 0308 	orr.w	r3, r3, #8
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	e007      	b.n	80023ae <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	f043 0308 	orr.w	r3, r3, #8
 80023a4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	4619      	mov	r1, r3
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7ff fcc4 	bl	8001d40 <NRF24_write_register>
}
 80023b8:	bf00      	nop
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7ff fc6b 	bl	8001ca0 <NRF24_read_register>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f023 0302 	bic.w	r3, r3, #2
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	4619      	mov	r1, r3
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7ff fcb3 	bl	8001d40 <NRF24_write_register>
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}

080023de <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 80023e6:	f7ff fd35 	bl	8001e54 <NRF24_get_status>
 80023ea:	4603      	mov	r3, r0
 80023ec:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf14      	ite	ne
 80023f8:	2301      	movne	r3, #1
 80023fa:	2300      	moveq	r3, #0
 80023fc:	73bb      	strb	r3, [r7, #14]

  if (result)
 80023fe:	7bbb      	ldrb	r3, [r7, #14]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d017      	beq.n	8002434 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d007      	beq.n	800241a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	085b      	lsrs	r3, r3, #1
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	b2da      	uxtb	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800241a:	2140      	movs	r1, #64	; 0x40
 800241c:	2007      	movs	r0, #7
 800241e:	f7ff fc8f 	bl	8001d40 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800242c:	2120      	movs	r1, #32
 800242e:	2007      	movs	r0, #7
 8002430:	f7ff fc86 	bl	8001d40 <NRF24_write_register>
    }
  }
  return result;
 8002434:	7bbb      	ldrb	r3, [r7, #14]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8002442:	2170      	movs	r1, #112	; 0x70
 8002444:	2007      	movs	r0, #7
 8002446:	f7ff fc7b 	bl	8001d40 <NRF24_write_register>
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8002456:	2000      	movs	r0, #0
 8002458:	f7ff fbe2 	bl	8001c20 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 800245c:	2350      	movs	r3, #80	; 0x50
 800245e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8002460:	2373      	movs	r3, #115	; 0x73
 8002462:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8002464:	1d39      	adds	r1, r7, #4
 8002466:	2364      	movs	r3, #100	; 0x64
 8002468:	2202      	movs	r2, #2
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <NRF24_ACTIVATE_cmd+0x30>)
 800246c:	f002 fde8 	bl	8005040 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8002470:	2001      	movs	r0, #1
 8002472:	f7ff fbd5 	bl	8001c20 <NRF24_csn>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	2000158c 	.word	0x2000158c

08002484 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8002484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002486:	b0a1      	sub	sp, #132	; 0x84
 8002488:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800248a:	f107 0308 	add.w	r3, r7, #8
 800248e:	49c3      	ldr	r1, [pc, #780]	; (800279c <printRadioSettings+0x318>)
 8002490:	4618      	mov	r0, r3
 8002492:	f006 f89f 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002496:	f107 0308 	add.w	r3, r7, #8
 800249a:	4618      	mov	r0, r3
 800249c:	f7fd fe58 	bl	8000150 <strlen>
 80024a0:	4603      	mov	r3, r0
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	f107 0108 	add.w	r1, r7, #8
 80024a8:	230a      	movs	r3, #10
 80024aa:	48bd      	ldr	r0, [pc, #756]	; (80027a0 <printRadioSettings+0x31c>)
 80024ac:	f004 feec 	bl	8007288 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7ff fbf5 	bl	8001ca0 <NRF24_read_register>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80024bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80024c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d006      	beq.n	80024e2 <printRadioSettings+0x5e>
 80024d4:	f107 0308 	add.w	r3, r7, #8
 80024d8:	49b2      	ldr	r1, [pc, #712]	; (80027a4 <printRadioSettings+0x320>)
 80024da:	4618      	mov	r0, r3
 80024dc:	f006 f87a 	bl	80085d4 <siprintf>
 80024e0:	e00c      	b.n	80024fc <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 80024e2:	f107 0308 	add.w	r3, r7, #8
 80024e6:	49b0      	ldr	r1, [pc, #704]	; (80027a8 <printRadioSettings+0x324>)
 80024e8:	4618      	mov	r0, r3
 80024ea:	f006 f873 	bl	80085d4 <siprintf>
 80024ee:	e005      	b.n	80024fc <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80024f0:	f107 0308 	add.w	r3, r7, #8
 80024f4:	49ad      	ldr	r1, [pc, #692]	; (80027ac <printRadioSettings+0x328>)
 80024f6:	4618      	mov	r0, r3
 80024f8:	f006 f86c 	bl	80085d4 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80024fc:	f107 0308 	add.w	r3, r7, #8
 8002500:	4618      	mov	r0, r3
 8002502:	f7fd fe25 	bl	8000150 <strlen>
 8002506:	4603      	mov	r3, r0
 8002508:	b29a      	uxth	r2, r3
 800250a:	f107 0108 	add.w	r1, r7, #8
 800250e:	230a      	movs	r3, #10
 8002510:	48a3      	ldr	r0, [pc, #652]	; (80027a0 <printRadioSettings+0x31c>)
 8002512:	f004 feb9 	bl	8007288 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8002516:	2001      	movs	r0, #1
 8002518:	f7ff fbc2 	bl	8001ca0 <NRF24_read_register>
 800251c:	4603      	mov	r3, r0
 800251e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002522:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002526:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800252a:	2b00      	cmp	r3, #0
 800252c:	bfcc      	ite	gt
 800252e:	2301      	movgt	r3, #1
 8002530:	2300      	movle	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002536:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800253a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800253e:	2b00      	cmp	r3, #0
 8002540:	bfcc      	ite	gt
 8002542:	2301      	movgt	r3, #1
 8002544:	2300      	movle	r3, #0
 8002546:	b2db      	uxtb	r3, r3
 8002548:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800254a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800254e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002552:	2b00      	cmp	r3, #0
 8002554:	bfcc      	ite	gt
 8002556:	2301      	movgt	r3, #1
 8002558:	2300      	movle	r3, #0
 800255a:	b2db      	uxtb	r3, r3
 800255c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800255e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002562:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002566:	2b00      	cmp	r3, #0
 8002568:	bfcc      	ite	gt
 800256a:	2301      	movgt	r3, #1
 800256c:	2300      	movle	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002572:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002576:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800257a:	2b00      	cmp	r3, #0
 800257c:	bfcc      	ite	gt
 800257e:	2301      	movgt	r3, #1
 8002580:	2300      	movle	r3, #0
 8002582:	b2db      	uxtb	r3, r3
 8002584:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002586:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800258a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800258e:	2b00      	cmp	r3, #0
 8002590:	bfcc      	ite	gt
 8002592:	2301      	movgt	r3, #1
 8002594:	2300      	movle	r3, #0
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f107 0008 	add.w	r0, r7, #8
 800259c:	9303      	str	r3, [sp, #12]
 800259e:	9402      	str	r4, [sp, #8]
 80025a0:	9101      	str	r1, [sp, #4]
 80025a2:	9200      	str	r2, [sp, #0]
 80025a4:	4633      	mov	r3, r6
 80025a6:	462a      	mov	r2, r5
 80025a8:	4981      	ldr	r1, [pc, #516]	; (80027b0 <printRadioSettings+0x32c>)
 80025aa:	f006 f813 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80025ae:	f107 0308 	add.w	r3, r7, #8
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd fdcc 	bl	8000150 <strlen>
 80025b8:	4603      	mov	r3, r0
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	f107 0108 	add.w	r1, r7, #8
 80025c0:	230a      	movs	r3, #10
 80025c2:	4877      	ldr	r0, [pc, #476]	; (80027a0 <printRadioSettings+0x31c>)
 80025c4:	f004 fe60 	bl	8007288 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80025c8:	2002      	movs	r0, #2
 80025ca:	f7ff fb69 	bl	8001ca0 <NRF24_read_register>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80025d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80025d8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bfcc      	ite	gt
 80025e0:	2301      	movgt	r3, #1
 80025e2:	2300      	movle	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80025e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80025ec:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bfcc      	ite	gt
 80025f4:	2301      	movgt	r3, #1
 80025f6:	2300      	movle	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80025fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002600:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002604:	2b00      	cmp	r3, #0
 8002606:	bfcc      	ite	gt
 8002608:	2301      	movgt	r3, #1
 800260a:	2300      	movle	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002610:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002614:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002618:	2b00      	cmp	r3, #0
 800261a:	bfcc      	ite	gt
 800261c:	2301      	movgt	r3, #1
 800261e:	2300      	movle	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002624:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002628:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800262c:	2b00      	cmp	r3, #0
 800262e:	bfcc      	ite	gt
 8002630:	2301      	movgt	r3, #1
 8002632:	2300      	movle	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002638:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800263c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002640:	2b00      	cmp	r3, #0
 8002642:	bfcc      	ite	gt
 8002644:	2301      	movgt	r3, #1
 8002646:	2300      	movle	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f107 0008 	add.w	r0, r7, #8
 800264e:	9303      	str	r3, [sp, #12]
 8002650:	9402      	str	r4, [sp, #8]
 8002652:	9101      	str	r1, [sp, #4]
 8002654:	9200      	str	r2, [sp, #0]
 8002656:	4633      	mov	r3, r6
 8002658:	462a      	mov	r2, r5
 800265a:	4956      	ldr	r1, [pc, #344]	; (80027b4 <printRadioSettings+0x330>)
 800265c:	f005 ffba 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002660:	f107 0308 	add.w	r3, r7, #8
 8002664:	4618      	mov	r0, r3
 8002666:	f7fd fd73 	bl	8000150 <strlen>
 800266a:	4603      	mov	r3, r0
 800266c:	b29a      	uxth	r2, r3
 800266e:	f107 0108 	add.w	r1, r7, #8
 8002672:	230a      	movs	r3, #10
 8002674:	484a      	ldr	r0, [pc, #296]	; (80027a0 <printRadioSettings+0x31c>)
 8002676:	f004 fe07 	bl	8007288 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800267a:	2003      	movs	r0, #3
 800267c:	f7ff fb10 	bl	8001ca0 <NRF24_read_register>
 8002680:	4603      	mov	r3, r0
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 800268a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800268e:	3302      	adds	r3, #2
 8002690:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8002694:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8002698:	f107 0308 	add.w	r3, r7, #8
 800269c:	4946      	ldr	r1, [pc, #280]	; (80027b8 <printRadioSettings+0x334>)
 800269e:	4618      	mov	r0, r3
 80026a0:	f005 ff98 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80026a4:	f107 0308 	add.w	r3, r7, #8
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fd fd51 	bl	8000150 <strlen>
 80026ae:	4603      	mov	r3, r0
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	f107 0108 	add.w	r1, r7, #8
 80026b6:	230a      	movs	r3, #10
 80026b8:	4839      	ldr	r0, [pc, #228]	; (80027a0 <printRadioSettings+0x31c>)
 80026ba:	f004 fde5 	bl	8007288 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80026be:	2005      	movs	r0, #5
 80026c0:	f7ff faee 	bl	8001ca0 <NRF24_read_register>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80026ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80026ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026d2:	f107 0308 	add.w	r3, r7, #8
 80026d6:	4939      	ldr	r1, [pc, #228]	; (80027bc <printRadioSettings+0x338>)
 80026d8:	4618      	mov	r0, r3
 80026da:	f005 ff7b 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80026de:	f107 0308 	add.w	r3, r7, #8
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fd fd34 	bl	8000150 <strlen>
 80026e8:	4603      	mov	r3, r0
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	f107 0108 	add.w	r1, r7, #8
 80026f0:	230a      	movs	r3, #10
 80026f2:	482b      	ldr	r0, [pc, #172]	; (80027a0 <printRadioSettings+0x31c>)
 80026f4:	f004 fdc8 	bl	8007288 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80026f8:	2006      	movs	r0, #6
 80026fa:	f7ff fad1 	bl	8001ca0 <NRF24_read_register>
 80026fe:	4603      	mov	r3, r0
 8002700:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8002704:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	2b00      	cmp	r3, #0
 800270e:	d006      	beq.n	800271e <printRadioSettings+0x29a>
 8002710:	f107 0308 	add.w	r3, r7, #8
 8002714:	492a      	ldr	r1, [pc, #168]	; (80027c0 <printRadioSettings+0x33c>)
 8002716:	4618      	mov	r0, r3
 8002718:	f005 ff5c 	bl	80085d4 <siprintf>
 800271c:	e005      	b.n	800272a <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800271e:	f107 0308 	add.w	r3, r7, #8
 8002722:	4928      	ldr	r1, [pc, #160]	; (80027c4 <printRadioSettings+0x340>)
 8002724:	4618      	mov	r0, r3
 8002726:	f005 ff55 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800272a:	f107 0308 	add.w	r3, r7, #8
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd fd0e 	bl	8000150 <strlen>
 8002734:	4603      	mov	r3, r0
 8002736:	b29a      	uxth	r2, r3
 8002738:	f107 0108 	add.w	r1, r7, #8
 800273c:	230a      	movs	r3, #10
 800273e:	4818      	ldr	r0, [pc, #96]	; (80027a0 <printRadioSettings+0x31c>)
 8002740:	f004 fda2 	bl	8007288 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8002744:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002748:	f003 0306 	and.w	r3, r3, #6
 800274c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8002750:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002754:	085b      	lsrs	r3, r3, #1
 8002756:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800275a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <printRadioSettings+0x2ec>
 8002762:	f107 0308 	add.w	r3, r7, #8
 8002766:	4918      	ldr	r1, [pc, #96]	; (80027c8 <printRadioSettings+0x344>)
 8002768:	4618      	mov	r0, r3
 800276a:	f005 ff33 	bl	80085d4 <siprintf>
 800276e:	e03b      	b.n	80027e8 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8002770:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002774:	2b01      	cmp	r3, #1
 8002776:	d106      	bne.n	8002786 <printRadioSettings+0x302>
 8002778:	f107 0308 	add.w	r3, r7, #8
 800277c:	4913      	ldr	r1, [pc, #76]	; (80027cc <printRadioSettings+0x348>)
 800277e:	4618      	mov	r0, r3
 8002780:	f005 ff28 	bl	80085d4 <siprintf>
 8002784:	e030      	b.n	80027e8 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8002786:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800278a:	2b02      	cmp	r3, #2
 800278c:	d122      	bne.n	80027d4 <printRadioSettings+0x350>
 800278e:	f107 0308 	add.w	r3, r7, #8
 8002792:	490f      	ldr	r1, [pc, #60]	; (80027d0 <printRadioSettings+0x34c>)
 8002794:	4618      	mov	r0, r3
 8002796:	f005 ff1d 	bl	80085d4 <siprintf>
 800279a:	e025      	b.n	80027e8 <printRadioSettings+0x364>
 800279c:	08008d2c 	.word	0x08008d2c
 80027a0:	200015e4 	.word	0x200015e4
 80027a4:	08008d60 	.word	0x08008d60
 80027a8:	08008d7c 	.word	0x08008d7c
 80027ac:	08008d98 	.word	0x08008d98
 80027b0:	08008dac 	.word	0x08008dac
 80027b4:	08008df0 	.word	0x08008df0
 80027b8:	08008e3c 	.word	0x08008e3c
 80027bc:	08008e58 	.word	0x08008e58
 80027c0:	08008e6c 	.word	0x08008e6c
 80027c4:	08008e84 	.word	0x08008e84
 80027c8:	08008e9c 	.word	0x08008e9c
 80027cc:	08008eb0 	.word	0x08008eb0
 80027d0:	08008ec4 	.word	0x08008ec4
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80027d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d105      	bne.n	80027e8 <printRadioSettings+0x364>
 80027dc:	f107 0308 	add.w	r3, r7, #8
 80027e0:	49d7      	ldr	r1, [pc, #860]	; (8002b40 <printRadioSettings+0x6bc>)
 80027e2:	4618      	mov	r0, r3
 80027e4:	f005 fef6 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80027e8:	f107 0308 	add.w	r3, r7, #8
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fd fcaf 	bl	8000150 <strlen>
 80027f2:	4603      	mov	r3, r0
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	f107 0108 	add.w	r1, r7, #8
 80027fa:	230a      	movs	r3, #10
 80027fc:	48d1      	ldr	r0, [pc, #836]	; (8002b44 <printRadioSettings+0x6c0>)
 80027fe:	f004 fd43 	bl	8007288 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8002802:	463b      	mov	r3, r7
 8002804:	2205      	movs	r2, #5
 8002806:	4619      	mov	r1, r3
 8002808:	200a      	movs	r0, #10
 800280a:	f7ff fa71 	bl	8001cf0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800280e:	793b      	ldrb	r3, [r7, #4]
 8002810:	461c      	mov	r4, r3
 8002812:	78fb      	ldrb	r3, [r7, #3]
 8002814:	461d      	mov	r5, r3
 8002816:	78bb      	ldrb	r3, [r7, #2]
 8002818:	787a      	ldrb	r2, [r7, #1]
 800281a:	7839      	ldrb	r1, [r7, #0]
 800281c:	f107 0008 	add.w	r0, r7, #8
 8002820:	9102      	str	r1, [sp, #8]
 8002822:	9201      	str	r2, [sp, #4]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	462b      	mov	r3, r5
 8002828:	4622      	mov	r2, r4
 800282a:	49c7      	ldr	r1, [pc, #796]	; (8002b48 <printRadioSettings+0x6c4>)
 800282c:	f005 fed2 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002830:	f107 0308 	add.w	r3, r7, #8
 8002834:	4618      	mov	r0, r3
 8002836:	f7fd fc8b 	bl	8000150 <strlen>
 800283a:	4603      	mov	r3, r0
 800283c:	b29a      	uxth	r2, r3
 800283e:	f107 0108 	add.w	r1, r7, #8
 8002842:	230a      	movs	r3, #10
 8002844:	48bf      	ldr	r0, [pc, #764]	; (8002b44 <printRadioSettings+0x6c0>)
 8002846:	f004 fd1f 	bl	8007288 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800284a:	463b      	mov	r3, r7
 800284c:	2205      	movs	r2, #5
 800284e:	4619      	mov	r1, r3
 8002850:	200b      	movs	r0, #11
 8002852:	f7ff fa4d 	bl	8001cf0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002856:	793b      	ldrb	r3, [r7, #4]
 8002858:	461c      	mov	r4, r3
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	461d      	mov	r5, r3
 800285e:	78bb      	ldrb	r3, [r7, #2]
 8002860:	787a      	ldrb	r2, [r7, #1]
 8002862:	7839      	ldrb	r1, [r7, #0]
 8002864:	f107 0008 	add.w	r0, r7, #8
 8002868:	9102      	str	r1, [sp, #8]
 800286a:	9201      	str	r2, [sp, #4]
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	462b      	mov	r3, r5
 8002870:	4622      	mov	r2, r4
 8002872:	49b6      	ldr	r1, [pc, #728]	; (8002b4c <printRadioSettings+0x6c8>)
 8002874:	f005 feae 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002878:	f107 0308 	add.w	r3, r7, #8
 800287c:	4618      	mov	r0, r3
 800287e:	f7fd fc67 	bl	8000150 <strlen>
 8002882:	4603      	mov	r3, r0
 8002884:	b29a      	uxth	r2, r3
 8002886:	f107 0108 	add.w	r1, r7, #8
 800288a:	230a      	movs	r3, #10
 800288c:	48ad      	ldr	r0, [pc, #692]	; (8002b44 <printRadioSettings+0x6c0>)
 800288e:	f004 fcfb 	bl	8007288 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8002892:	463b      	mov	r3, r7
 8002894:	2201      	movs	r2, #1
 8002896:	4619      	mov	r1, r3
 8002898:	200c      	movs	r0, #12
 800289a:	f7ff fa29 	bl	8001cf0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800289e:	783b      	ldrb	r3, [r7, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	f107 0308 	add.w	r3, r7, #8
 80028a6:	49aa      	ldr	r1, [pc, #680]	; (8002b50 <printRadioSettings+0x6cc>)
 80028a8:	4618      	mov	r0, r3
 80028aa:	f005 fe93 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80028ae:	f107 0308 	add.w	r3, r7, #8
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fd fc4c 	bl	8000150 <strlen>
 80028b8:	4603      	mov	r3, r0
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	f107 0108 	add.w	r1, r7, #8
 80028c0:	230a      	movs	r3, #10
 80028c2:	48a0      	ldr	r0, [pc, #640]	; (8002b44 <printRadioSettings+0x6c0>)
 80028c4:	f004 fce0 	bl	8007288 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80028c8:	463b      	mov	r3, r7
 80028ca:	2201      	movs	r2, #1
 80028cc:	4619      	mov	r1, r3
 80028ce:	200d      	movs	r0, #13
 80028d0:	f7ff fa0e 	bl	8001cf0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80028d4:	783b      	ldrb	r3, [r7, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	f107 0308 	add.w	r3, r7, #8
 80028dc:	499d      	ldr	r1, [pc, #628]	; (8002b54 <printRadioSettings+0x6d0>)
 80028de:	4618      	mov	r0, r3
 80028e0:	f005 fe78 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80028e4:	f107 0308 	add.w	r3, r7, #8
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fd fc31 	bl	8000150 <strlen>
 80028ee:	4603      	mov	r3, r0
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	f107 0108 	add.w	r1, r7, #8
 80028f6:	230a      	movs	r3, #10
 80028f8:	4892      	ldr	r0, [pc, #584]	; (8002b44 <printRadioSettings+0x6c0>)
 80028fa:	f004 fcc5 	bl	8007288 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80028fe:	463b      	mov	r3, r7
 8002900:	2201      	movs	r2, #1
 8002902:	4619      	mov	r1, r3
 8002904:	200e      	movs	r0, #14
 8002906:	f7ff f9f3 	bl	8001cf0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800290a:	783b      	ldrb	r3, [r7, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	f107 0308 	add.w	r3, r7, #8
 8002912:	4991      	ldr	r1, [pc, #580]	; (8002b58 <printRadioSettings+0x6d4>)
 8002914:	4618      	mov	r0, r3
 8002916:	f005 fe5d 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800291a:	f107 0308 	add.w	r3, r7, #8
 800291e:	4618      	mov	r0, r3
 8002920:	f7fd fc16 	bl	8000150 <strlen>
 8002924:	4603      	mov	r3, r0
 8002926:	b29a      	uxth	r2, r3
 8002928:	f107 0108 	add.w	r1, r7, #8
 800292c:	230a      	movs	r3, #10
 800292e:	4885      	ldr	r0, [pc, #532]	; (8002b44 <printRadioSettings+0x6c0>)
 8002930:	f004 fcaa 	bl	8007288 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8002934:	463b      	mov	r3, r7
 8002936:	2201      	movs	r2, #1
 8002938:	4619      	mov	r1, r3
 800293a:	200f      	movs	r0, #15
 800293c:	f7ff f9d8 	bl	8001cf0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002940:	783b      	ldrb	r3, [r7, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	f107 0308 	add.w	r3, r7, #8
 8002948:	4984      	ldr	r1, [pc, #528]	; (8002b5c <printRadioSettings+0x6d8>)
 800294a:	4618      	mov	r0, r3
 800294c:	f005 fe42 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002950:	f107 0308 	add.w	r3, r7, #8
 8002954:	4618      	mov	r0, r3
 8002956:	f7fd fbfb 	bl	8000150 <strlen>
 800295a:	4603      	mov	r3, r0
 800295c:	b29a      	uxth	r2, r3
 800295e:	f107 0108 	add.w	r1, r7, #8
 8002962:	230a      	movs	r3, #10
 8002964:	4877      	ldr	r0, [pc, #476]	; (8002b44 <printRadioSettings+0x6c0>)
 8002966:	f004 fc8f 	bl	8007288 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800296a:	463b      	mov	r3, r7
 800296c:	2205      	movs	r2, #5
 800296e:	4619      	mov	r1, r3
 8002970:	2010      	movs	r0, #16
 8002972:	f7ff f9bd 	bl	8001cf0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002976:	793b      	ldrb	r3, [r7, #4]
 8002978:	461c      	mov	r4, r3
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	461d      	mov	r5, r3
 800297e:	78bb      	ldrb	r3, [r7, #2]
 8002980:	787a      	ldrb	r2, [r7, #1]
 8002982:	7839      	ldrb	r1, [r7, #0]
 8002984:	f107 0008 	add.w	r0, r7, #8
 8002988:	9102      	str	r1, [sp, #8]
 800298a:	9201      	str	r2, [sp, #4]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	462b      	mov	r3, r5
 8002990:	4622      	mov	r2, r4
 8002992:	4973      	ldr	r1, [pc, #460]	; (8002b60 <printRadioSettings+0x6dc>)
 8002994:	f005 fe1e 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002998:	f107 0308 	add.w	r3, r7, #8
 800299c:	4618      	mov	r0, r3
 800299e:	f7fd fbd7 	bl	8000150 <strlen>
 80029a2:	4603      	mov	r3, r0
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	f107 0108 	add.w	r1, r7, #8
 80029aa:	230a      	movs	r3, #10
 80029ac:	4865      	ldr	r0, [pc, #404]	; (8002b44 <printRadioSettings+0x6c0>)
 80029ae:	f004 fc6b 	bl	8007288 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80029b2:	2011      	movs	r0, #17
 80029b4:	f7ff f974 	bl	8001ca0 <NRF24_read_register>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80029be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80029c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029c6:	f107 0308 	add.w	r3, r7, #8
 80029ca:	4966      	ldr	r1, [pc, #408]	; (8002b64 <printRadioSettings+0x6e0>)
 80029cc:	4618      	mov	r0, r3
 80029ce:	f005 fe01 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80029d2:	f107 0308 	add.w	r3, r7, #8
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fd fbba 	bl	8000150 <strlen>
 80029dc:	4603      	mov	r3, r0
 80029de:	b29a      	uxth	r2, r3
 80029e0:	f107 0108 	add.w	r1, r7, #8
 80029e4:	230a      	movs	r3, #10
 80029e6:	4857      	ldr	r0, [pc, #348]	; (8002b44 <printRadioSettings+0x6c0>)
 80029e8:	f004 fc4e 	bl	8007288 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 80029ec:	2012      	movs	r0, #18
 80029ee:	f7ff f957 	bl	8001ca0 <NRF24_read_register>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80029f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80029fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a00:	f107 0308 	add.w	r3, r7, #8
 8002a04:	4958      	ldr	r1, [pc, #352]	; (8002b68 <printRadioSettings+0x6e4>)
 8002a06:	4618      	mov	r0, r3
 8002a08:	f005 fde4 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002a0c:	f107 0308 	add.w	r3, r7, #8
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fd fb9d 	bl	8000150 <strlen>
 8002a16:	4603      	mov	r3, r0
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	f107 0108 	add.w	r1, r7, #8
 8002a1e:	230a      	movs	r3, #10
 8002a20:	4848      	ldr	r0, [pc, #288]	; (8002b44 <printRadioSettings+0x6c0>)
 8002a22:	f004 fc31 	bl	8007288 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8002a26:	2013      	movs	r0, #19
 8002a28:	f7ff f93a 	bl	8001ca0 <NRF24_read_register>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002a32:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002a36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a3a:	f107 0308 	add.w	r3, r7, #8
 8002a3e:	494b      	ldr	r1, [pc, #300]	; (8002b6c <printRadioSettings+0x6e8>)
 8002a40:	4618      	mov	r0, r3
 8002a42:	f005 fdc7 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002a46:	f107 0308 	add.w	r3, r7, #8
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fd fb80 	bl	8000150 <strlen>
 8002a50:	4603      	mov	r3, r0
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	f107 0108 	add.w	r1, r7, #8
 8002a58:	230a      	movs	r3, #10
 8002a5a:	483a      	ldr	r0, [pc, #232]	; (8002b44 <printRadioSettings+0x6c0>)
 8002a5c:	f004 fc14 	bl	8007288 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8002a60:	2014      	movs	r0, #20
 8002a62:	f7ff f91d 	bl	8001ca0 <NRF24_read_register>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002a6c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002a70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a74:	f107 0308 	add.w	r3, r7, #8
 8002a78:	493d      	ldr	r1, [pc, #244]	; (8002b70 <printRadioSettings+0x6ec>)
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f005 fdaa 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002a80:	f107 0308 	add.w	r3, r7, #8
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd fb63 	bl	8000150 <strlen>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	f107 0108 	add.w	r1, r7, #8
 8002a92:	230a      	movs	r3, #10
 8002a94:	482b      	ldr	r0, [pc, #172]	; (8002b44 <printRadioSettings+0x6c0>)
 8002a96:	f004 fbf7 	bl	8007288 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8002a9a:	2015      	movs	r0, #21
 8002a9c:	f7ff f900 	bl	8001ca0 <NRF24_read_register>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002aa6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002aaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aae:	f107 0308 	add.w	r3, r7, #8
 8002ab2:	4930      	ldr	r1, [pc, #192]	; (8002b74 <printRadioSettings+0x6f0>)
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f005 fd8d 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002aba:	f107 0308 	add.w	r3, r7, #8
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fd fb46 	bl	8000150 <strlen>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	f107 0108 	add.w	r1, r7, #8
 8002acc:	230a      	movs	r3, #10
 8002ace:	481d      	ldr	r0, [pc, #116]	; (8002b44 <printRadioSettings+0x6c0>)
 8002ad0:	f004 fbda 	bl	8007288 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8002ad4:	2016      	movs	r0, #22
 8002ad6:	f7ff f8e3 	bl	8001ca0 <NRF24_read_register>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002ae0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002ae4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ae8:	f107 0308 	add.w	r3, r7, #8
 8002aec:	4922      	ldr	r1, [pc, #136]	; (8002b78 <printRadioSettings+0x6f4>)
 8002aee:	4618      	mov	r0, r3
 8002af0:	f005 fd70 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002af4:	f107 0308 	add.w	r3, r7, #8
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fd fb29 	bl	8000150 <strlen>
 8002afe:	4603      	mov	r3, r0
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	f107 0108 	add.w	r1, r7, #8
 8002b06:	230a      	movs	r3, #10
 8002b08:	480e      	ldr	r0, [pc, #56]	; (8002b44 <printRadioSettings+0x6c0>)
 8002b0a:	f004 fbbd 	bl	8007288 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8002b0e:	201c      	movs	r0, #28
 8002b10:	f7ff f8c6 	bl	8001ca0 <NRF24_read_register>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002b1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002b1e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	bfcc      	ite	gt
 8002b26:	2301      	movgt	r3, #1
 8002b28:	2300      	movle	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002b2e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002b32:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bfcc      	ite	gt
 8002b3a:	2301      	movgt	r3, #1
 8002b3c:	2300      	movle	r3, #0
 8002b3e:	e01d      	b.n	8002b7c <printRadioSettings+0x6f8>
 8002b40:	08008ed8 	.word	0x08008ed8
 8002b44:	200015e4 	.word	0x200015e4
 8002b48:	08008eec 	.word	0x08008eec
 8002b4c:	08008f1c 	.word	0x08008f1c
 8002b50:	08008f4c 	.word	0x08008f4c
 8002b54:	08008f74 	.word	0x08008f74
 8002b58:	08008f9c 	.word	0x08008f9c
 8002b5c:	08008fc4 	.word	0x08008fc4
 8002b60:	08008fec 	.word	0x08008fec
 8002b64:	08009018 	.word	0x08009018
 8002b68:	08009034 	.word	0x08009034
 8002b6c:	08009050 	.word	0x08009050
 8002b70:	0800906c 	.word	0x0800906c
 8002b74:	08009088 	.word	0x08009088
 8002b78:	080090a4 	.word	0x080090a4
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002b80:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002b84:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bfcc      	ite	gt
 8002b8c:	2301      	movgt	r3, #1
 8002b8e:	2300      	movle	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002b94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002b98:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bfcc      	ite	gt
 8002ba0:	2301      	movgt	r3, #1
 8002ba2:	2300      	movle	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002ba8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002bac:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bfcc      	ite	gt
 8002bb4:	2301      	movgt	r3, #1
 8002bb6:	2300      	movle	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002bbc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002bc0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bfcc      	ite	gt
 8002bc8:	2301      	movgt	r3, #1
 8002bca:	2300      	movle	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f107 0008 	add.w	r0, r7, #8
 8002bd2:	9303      	str	r3, [sp, #12]
 8002bd4:	9402      	str	r4, [sp, #8]
 8002bd6:	9101      	str	r1, [sp, #4]
 8002bd8:	9200      	str	r2, [sp, #0]
 8002bda:	4633      	mov	r3, r6
 8002bdc:	462a      	mov	r2, r5
 8002bde:	4936      	ldr	r1, [pc, #216]	; (8002cb8 <printRadioSettings+0x834>)
 8002be0:	f005 fcf8 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002be4:	f107 0308 	add.w	r3, r7, #8
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fd fab1 	bl	8000150 <strlen>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	f107 0108 	add.w	r1, r7, #8
 8002bf6:	230a      	movs	r3, #10
 8002bf8:	4830      	ldr	r0, [pc, #192]	; (8002cbc <printRadioSettings+0x838>)
 8002bfa:	f004 fb45 	bl	8007288 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8002bfe:	201d      	movs	r0, #29
 8002c00:	f7ff f84e 	bl	8001ca0 <NRF24_read_register>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8002c0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d006      	beq.n	8002c24 <printRadioSettings+0x7a0>
 8002c16:	f107 0308 	add.w	r3, r7, #8
 8002c1a:	4929      	ldr	r1, [pc, #164]	; (8002cc0 <printRadioSettings+0x83c>)
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f005 fcd9 	bl	80085d4 <siprintf>
 8002c22:	e005      	b.n	8002c30 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8002c24:	f107 0308 	add.w	r3, r7, #8
 8002c28:	4926      	ldr	r1, [pc, #152]	; (8002cc4 <printRadioSettings+0x840>)
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f005 fcd2 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002c30:	f107 0308 	add.w	r3, r7, #8
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fd fa8b 	bl	8000150 <strlen>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	f107 0108 	add.w	r1, r7, #8
 8002c42:	230a      	movs	r3, #10
 8002c44:	481d      	ldr	r0, [pc, #116]	; (8002cbc <printRadioSettings+0x838>)
 8002c46:	f004 fb1f 	bl	8007288 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8002c4a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d006      	beq.n	8002c64 <printRadioSettings+0x7e0>
 8002c56:	f107 0308 	add.w	r3, r7, #8
 8002c5a:	491b      	ldr	r1, [pc, #108]	; (8002cc8 <printRadioSettings+0x844>)
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f005 fcb9 	bl	80085d4 <siprintf>
 8002c62:	e005      	b.n	8002c70 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8002c64:	f107 0308 	add.w	r3, r7, #8
 8002c68:	4918      	ldr	r1, [pc, #96]	; (8002ccc <printRadioSettings+0x848>)
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f005 fcb2 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002c70:	f107 0308 	add.w	r3, r7, #8
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fd fa6b 	bl	8000150 <strlen>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	f107 0108 	add.w	r1, r7, #8
 8002c82:	230a      	movs	r3, #10
 8002c84:	480d      	ldr	r0, [pc, #52]	; (8002cbc <printRadioSettings+0x838>)
 8002c86:	f004 faff 	bl	8007288 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002c8a:	f107 0308 	add.w	r3, r7, #8
 8002c8e:	4910      	ldr	r1, [pc, #64]	; (8002cd0 <printRadioSettings+0x84c>)
 8002c90:	4618      	mov	r0, r3
 8002c92:	f005 fc9f 	bl	80085d4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002c96:	f107 0308 	add.w	r3, r7, #8
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd fa58 	bl	8000150 <strlen>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	f107 0108 	add.w	r1, r7, #8
 8002ca8:	230a      	movs	r3, #10
 8002caa:	4804      	ldr	r0, [pc, #16]	; (8002cbc <printRadioSettings+0x838>)
 8002cac:	f004 faec 	bl	8007288 <HAL_UART_Transmit>
}
 8002cb0:	bf00      	nop
 8002cb2:	3774      	adds	r7, #116	; 0x74
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cb8:	080090c0 	.word	0x080090c0
 8002cbc:	200015e4 	.word	0x200015e4
 8002cc0:	0800910c 	.word	0x0800910c
 8002cc4:	08009124 	.word	0x08009124
 8002cc8:	0800913c 	.word	0x0800913c
 8002ccc:	08009158 	.word	0x08009158
 8002cd0:	08008d2c 	.word	0x08008d2c

08002cd4 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	b4b0      	push	{r4, r5, r7}
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	f107 040c 	add.w	r4, r7, #12
 8002cde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <nrf24_DebugUART_Init+0x34>)
 8002ce4:	461d      	mov	r5, r3
 8002ce6:	f107 040c 	add.w	r4, r7, #12
 8002cea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cfa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8002cfe:	bf00      	nop
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bcb0      	pop	{r4, r5, r7}
 8002d04:	b004      	add	sp, #16
 8002d06:	4770      	bx	lr
 8002d08:	200015e4 	.word	0x200015e4

08002d0c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002d10:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d12:	4a18      	ldr	r2, [pc, #96]	; (8002d74 <MX_SPI1_Init+0x68>)
 8002d14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d16:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d1e:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d24:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d2a:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d30:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d36:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002d3e:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d40:	2220      	movs	r2, #32
 8002d42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d44:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d58:	220a      	movs	r2, #10
 8002d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d5c:	4804      	ldr	r0, [pc, #16]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d5e:	f002 f8eb 	bl	8004f38 <HAL_SPI_Init>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d68:	f7fe fefa 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d6c:	bf00      	nop
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	20001690 	.word	0x20001690
 8002d74:	40013000 	.word	0x40013000

08002d78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d80:	f107 0310 	add.w	r3, r7, #16
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a1b      	ldr	r2, [pc, #108]	; (8002e00 <HAL_SPI_MspInit+0x88>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d12f      	bne.n	8002df8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d98:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <HAL_SPI_MspInit+0x8c>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	4a19      	ldr	r2, [pc, #100]	; (8002e04 <HAL_SPI_MspInit+0x8c>)
 8002d9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002da2:	6193      	str	r3, [r2, #24]
 8002da4:	4b17      	ldr	r3, [pc, #92]	; (8002e04 <HAL_SPI_MspInit+0x8c>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db0:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <HAL_SPI_MspInit+0x8c>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	4a13      	ldr	r2, [pc, #76]	; (8002e04 <HAL_SPI_MspInit+0x8c>)
 8002db6:	f043 0304 	orr.w	r3, r3, #4
 8002dba:	6193      	str	r3, [r2, #24]
 8002dbc:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <HAL_SPI_MspInit+0x8c>)
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002dc8:	23a0      	movs	r3, #160	; 0xa0
 8002dca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd4:	f107 0310 	add.w	r3, r7, #16
 8002dd8:	4619      	mov	r1, r3
 8002dda:	480b      	ldr	r0, [pc, #44]	; (8002e08 <HAL_SPI_MspInit+0x90>)
 8002ddc:	f001 f998 	bl	8004110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002de0:	2340      	movs	r3, #64	; 0x40
 8002de2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	4619      	mov	r1, r3
 8002df2:	4805      	ldr	r0, [pc, #20]	; (8002e08 <HAL_SPI_MspInit+0x90>)
 8002df4:	f001 f98c 	bl	8004110 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002df8:	bf00      	nop
 8002dfa:	3720      	adds	r7, #32
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40013000 	.word	0x40013000
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40010800 	.word	0x40010800

08002e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e12:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <HAL_MspInit+0x5c>)
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	4a14      	ldr	r2, [pc, #80]	; (8002e68 <HAL_MspInit+0x5c>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	6193      	str	r3, [r2, #24]
 8002e1e:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <HAL_MspInit+0x5c>)
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <HAL_MspInit+0x5c>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	4a0e      	ldr	r2, [pc, #56]	; (8002e68 <HAL_MspInit+0x5c>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e34:	61d3      	str	r3, [r2, #28]
 8002e36:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <HAL_MspInit+0x5c>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	607b      	str	r3, [r7, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e42:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <HAL_MspInit+0x60>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <HAL_MspInit+0x60>)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40010000 	.word	0x40010000

08002e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e74:	e7fe      	b.n	8002e74 <NMI_Handler+0x4>
	...

08002e78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <HardFault_Handler+0x30>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e84:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8002e86:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <HardFault_Handler+0x30>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e8e:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HardFault_Handler+0x30>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e98:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8002e9a:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <HardFault_Handler+0x30>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ea4:	e7fe      	b.n	8002ea4 <HardFault_Handler+0x2c>
 8002ea6:	bf00      	nop
 8002ea8:	20001778 	.word	0x20001778

08002eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eb0:	e7fe      	b.n	8002eb0 <MemManage_Handler+0x4>

08002eb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eb6:	e7fe      	b.n	8002eb6 <BusFault_Handler+0x4>

08002eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ebc:	e7fe      	b.n	8002ebc <UsageFault_Handler+0x4>

08002ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr

08002eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr
	...

08002ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(timeout >0)  timeout--;
 8002ee8:	4b07      	ldr	r3, [pc, #28]	; (8002f08 <SysTick_Handler+0x24>)
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d006      	beq.n	8002f00 <SysTick_Handler+0x1c>
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <SysTick_Handler+0x24>)
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	4b02      	ldr	r3, [pc, #8]	; (8002f08 <SysTick_Handler+0x24>)
 8002efe:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f00:	f000 fd54 	bl	80039ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f04:	bf00      	nop
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20001638 	.word	0x20001638

08002f0c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002f10:	4802      	ldr	r0, [pc, #8]	; (8002f1c <DMA1_Channel5_IRQHandler+0x10>)
 8002f12:	f000 ffc9 	bl	8003ea8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	2000188c 	.word	0x2000188c

08002f20 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002f24:	4802      	ldr	r0, [pc, #8]	; (8002f30 <DMA1_Channel6_IRQHandler+0x10>)
 8002f26:	f000 ffbf 	bl	8003ea8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20001808 	.word	0x20001808

08002f34 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002f38:	4802      	ldr	r0, [pc, #8]	; (8002f44 <DMA1_Channel7_IRQHandler+0x10>)
 8002f3a:	f000 ffb5 	bl	8003ea8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	200018d0 	.word	0x200018d0

08002f48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f4c:	4802      	ldr	r0, [pc, #8]	; (8002f58 <TIM2_IRQHandler+0x10>)
 8002f4e:	f003 f89b 	bl	8006088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	200017c0 	.word	0x200017c0

08002f5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f60:	4802      	ldr	r0, [pc, #8]	; (8002f6c <TIM3_IRQHandler+0x10>)
 8002f62:	f003 f891 	bl	8006088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20001730 	.word	0x20001730

08002f70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f74:	4802      	ldr	r0, [pc, #8]	; (8002f80 <USART2_IRQHandler+0x10>)
 8002f76:	f004 fb05 	bl	8007584 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20001954 	.word	0x20001954

08002f84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	  Uart_isr (&huart3);
 8002f88:	4803      	ldr	r0, [pc, #12]	; (8002f98 <USART3_IRQHandler+0x14>)
 8002f8a:	f7fd fdc1 	bl	8000b10 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002f8e:	4802      	ldr	r0, [pc, #8]	; (8002f98 <USART3_IRQHandler+0x14>)
 8002f90:	f004 faf8 	bl	8007584 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002f94:	bf00      	nop
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	2000184c 	.word	0x2000184c

08002f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fa4:	4a14      	ldr	r2, [pc, #80]	; (8002ff8 <_sbrk+0x5c>)
 8002fa6:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <_sbrk+0x60>)
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fb0:	4b13      	ldr	r3, [pc, #76]	; (8003000 <_sbrk+0x64>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d102      	bne.n	8002fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fb8:	4b11      	ldr	r3, [pc, #68]	; (8003000 <_sbrk+0x64>)
 8002fba:	4a12      	ldr	r2, [pc, #72]	; (8003004 <_sbrk+0x68>)
 8002fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fbe:	4b10      	ldr	r3, [pc, #64]	; (8003000 <_sbrk+0x64>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d207      	bcs.n	8002fdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fcc:	f005 fa0c 	bl	80083e8 <__errno>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	220c      	movs	r2, #12
 8002fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fda:	e009      	b.n	8002ff0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fdc:	4b08      	ldr	r3, [pc, #32]	; (8003000 <_sbrk+0x64>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fe2:	4b07      	ldr	r3, [pc, #28]	; (8003000 <_sbrk+0x64>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4413      	add	r3, r2
 8002fea:	4a05      	ldr	r2, [pc, #20]	; (8003000 <_sbrk+0x64>)
 8002fec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fee:	68fb      	ldr	r3, [r7, #12]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20005000 	.word	0x20005000
 8002ffc:	00000400 	.word	0x00000400
 8003000:	20001624 	.word	0x20001624
 8003004:	200019a8 	.word	0x200019a8

08003008 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b092      	sub	sp, #72	; 0x48
 8003018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800301a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	611a      	str	r2, [r3, #16]
 8003034:	615a      	str	r2, [r3, #20]
 8003036:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003038:	1d3b      	adds	r3, r7, #4
 800303a:	2220      	movs	r2, #32
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f005 fa0a 	bl	8008458 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003044:	4b45      	ldr	r3, [pc, #276]	; (800315c <MX_TIM1_Init+0x148>)
 8003046:	4a46      	ldr	r2, [pc, #280]	; (8003160 <MX_TIM1_Init+0x14c>)
 8003048:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800304a:	4b44      	ldr	r3, [pc, #272]	; (800315c <MX_TIM1_Init+0x148>)
 800304c:	2247      	movs	r2, #71	; 0x47
 800304e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003050:	4b42      	ldr	r3, [pc, #264]	; (800315c <MX_TIM1_Init+0x148>)
 8003052:	2200      	movs	r2, #0
 8003054:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8003056:	4b41      	ldr	r3, [pc, #260]	; (800315c <MX_TIM1_Init+0x148>)
 8003058:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800305c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800305e:	4b3f      	ldr	r3, [pc, #252]	; (800315c <MX_TIM1_Init+0x148>)
 8003060:	2200      	movs	r2, #0
 8003062:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003064:	4b3d      	ldr	r3, [pc, #244]	; (800315c <MX_TIM1_Init+0x148>)
 8003066:	2200      	movs	r2, #0
 8003068:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800306a:	4b3c      	ldr	r3, [pc, #240]	; (800315c <MX_TIM1_Init+0x148>)
 800306c:	2200      	movs	r2, #0
 800306e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003070:	483a      	ldr	r0, [pc, #232]	; (800315c <MX_TIM1_Init+0x148>)
 8003072:	f002 fdb9 	bl	8005be8 <HAL_TIM_PWM_Init>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800307c:	f7fe fd70 	bl	8001b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003080:	2300      	movs	r3, #0
 8003082:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003084:	2300      	movs	r3, #0
 8003086:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003088:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800308c:	4619      	mov	r1, r3
 800308e:	4833      	ldr	r0, [pc, #204]	; (800315c <MX_TIM1_Init+0x148>)
 8003090:	f003 ffc8 	bl	8007024 <HAL_TIMEx_MasterConfigSynchronization>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800309a:	f7fe fd61 	bl	8001b60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800309e:	2360      	movs	r3, #96	; 0x60
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030a6:	2300      	movs	r3, #0
 80030a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80030aa:	2300      	movs	r3, #0
 80030ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80030b2:	2300      	movs	r3, #0
 80030b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80030b6:	2300      	movs	r3, #0
 80030b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030be:	2200      	movs	r2, #0
 80030c0:	4619      	mov	r1, r3
 80030c2:	4826      	ldr	r0, [pc, #152]	; (800315c <MX_TIM1_Init+0x148>)
 80030c4:	f003 f97c 	bl	80063c0 <HAL_TIM_PWM_ConfigChannel>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80030ce:	f7fe fd47 	bl	8001b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d6:	2204      	movs	r2, #4
 80030d8:	4619      	mov	r1, r3
 80030da:	4820      	ldr	r0, [pc, #128]	; (800315c <MX_TIM1_Init+0x148>)
 80030dc:	f003 f970 	bl	80063c0 <HAL_TIM_PWM_ConfigChannel>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80030e6:	f7fe fd3b 	bl	8001b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ee:	2208      	movs	r2, #8
 80030f0:	4619      	mov	r1, r3
 80030f2:	481a      	ldr	r0, [pc, #104]	; (800315c <MX_TIM1_Init+0x148>)
 80030f4:	f003 f964 	bl	80063c0 <HAL_TIM_PWM_ConfigChannel>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80030fe:	f7fe fd2f 	bl	8001b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003106:	220c      	movs	r2, #12
 8003108:	4619      	mov	r1, r3
 800310a:	4814      	ldr	r0, [pc, #80]	; (800315c <MX_TIM1_Init+0x148>)
 800310c:	f003 f958 	bl	80063c0 <HAL_TIM_PWM_ConfigChannel>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8003116:	f7fe fd23 	bl	8001b60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800311a:	2300      	movs	r3, #0
 800311c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800311e:	2300      	movs	r3, #0
 8003120:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800312e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003132:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003134:	2300      	movs	r3, #0
 8003136:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003138:	1d3b      	adds	r3, r7, #4
 800313a:	4619      	mov	r1, r3
 800313c:	4807      	ldr	r0, [pc, #28]	; (800315c <MX_TIM1_Init+0x148>)
 800313e:	f003 ffcf 	bl	80070e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8003148:	f7fe fd0a 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800314c:	4803      	ldr	r0, [pc, #12]	; (800315c <MX_TIM1_Init+0x148>)
 800314e:	f000 f9a5 	bl	800349c <HAL_TIM_MspPostInit>

}
 8003152:	bf00      	nop
 8003154:	3748      	adds	r7, #72	; 0x48
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20001778 	.word	0x20001778
 8003160:	40012c00 	.word	0x40012c00

08003164 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800316a:	f107 0308 	add.w	r3, r7, #8
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	609a      	str	r2, [r3, #8]
 8003176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003178:	463b      	mov	r3, r7
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003180:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <MX_TIM2_Init+0x94>)
 8003182:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003186:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8003188:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <MX_TIM2_Init+0x94>)
 800318a:	2247      	movs	r2, #71	; 0x47
 800318c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800318e:	4b1a      	ldr	r3, [pc, #104]	; (80031f8 <MX_TIM2_Init+0x94>)
 8003190:	2200      	movs	r2, #0
 8003192:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8003194:	4b18      	ldr	r3, [pc, #96]	; (80031f8 <MX_TIM2_Init+0x94>)
 8003196:	f241 3288 	movw	r2, #5000	; 0x1388
 800319a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800319c:	4b16      	ldr	r3, [pc, #88]	; (80031f8 <MX_TIM2_Init+0x94>)
 800319e:	2200      	movs	r2, #0
 80031a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031a2:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <MX_TIM2_Init+0x94>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80031a8:	4813      	ldr	r0, [pc, #76]	; (80031f8 <MX_TIM2_Init+0x94>)
 80031aa:	f002 fc31 	bl	8005a10 <HAL_TIM_Base_Init>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80031b4:	f7fe fcd4 	bl	8001b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80031be:	f107 0308 	add.w	r3, r7, #8
 80031c2:	4619      	mov	r1, r3
 80031c4:	480c      	ldr	r0, [pc, #48]	; (80031f8 <MX_TIM2_Init+0x94>)
 80031c6:	f003 f9b9 	bl	800653c <HAL_TIM_ConfigClockSource>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80031d0:	f7fe fcc6 	bl	8001b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031d4:	2300      	movs	r3, #0
 80031d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031d8:	2300      	movs	r3, #0
 80031da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031dc:	463b      	mov	r3, r7
 80031de:	4619      	mov	r1, r3
 80031e0:	4805      	ldr	r0, [pc, #20]	; (80031f8 <MX_TIM2_Init+0x94>)
 80031e2:	f003 ff1f 	bl	8007024 <HAL_TIMEx_MasterConfigSynchronization>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80031ec:	f7fe fcb8 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80031f0:	bf00      	nop
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	200017c0 	.word	0x200017c0

080031fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	; 0x28
 8003200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003202:	f107 0318 	add.w	r3, r7, #24
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	605a      	str	r2, [r3, #4]
 800320c:	609a      	str	r2, [r3, #8]
 800320e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003210:	f107 0310 	add.w	r3, r7, #16
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800321a:	463b      	mov	r3, r7
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003226:	4b2b      	ldr	r3, [pc, #172]	; (80032d4 <MX_TIM3_Init+0xd8>)
 8003228:	4a2b      	ldr	r2, [pc, #172]	; (80032d8 <MX_TIM3_Init+0xdc>)
 800322a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800322c:	4b29      	ldr	r3, [pc, #164]	; (80032d4 <MX_TIM3_Init+0xd8>)
 800322e:	2247      	movs	r2, #71	; 0x47
 8003230:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003232:	4b28      	ldr	r3, [pc, #160]	; (80032d4 <MX_TIM3_Init+0xd8>)
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003238:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <MX_TIM3_Init+0xd8>)
 800323a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800323e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003240:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <MX_TIM3_Init+0xd8>)
 8003242:	2200      	movs	r2, #0
 8003244:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003246:	4b23      	ldr	r3, [pc, #140]	; (80032d4 <MX_TIM3_Init+0xd8>)
 8003248:	2200      	movs	r2, #0
 800324a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800324c:	4821      	ldr	r0, [pc, #132]	; (80032d4 <MX_TIM3_Init+0xd8>)
 800324e:	f002 fbdf 	bl	8005a10 <HAL_TIM_Base_Init>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8003258:	f7fe fc82 	bl	8001b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800325c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003260:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003262:	f107 0318 	add.w	r3, r7, #24
 8003266:	4619      	mov	r1, r3
 8003268:	481a      	ldr	r0, [pc, #104]	; (80032d4 <MX_TIM3_Init+0xd8>)
 800326a:	f003 f967 	bl	800653c <HAL_TIM_ConfigClockSource>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003274:	f7fe fc74 	bl	8001b60 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003278:	4816      	ldr	r0, [pc, #88]	; (80032d4 <MX_TIM3_Init+0xd8>)
 800327a:	f002 fda7 	bl	8005dcc <HAL_TIM_IC_Init>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003284:	f7fe fc6c 	bl	8001b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003288:	2300      	movs	r3, #0
 800328a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003290:	f107 0310 	add.w	r3, r7, #16
 8003294:	4619      	mov	r1, r3
 8003296:	480f      	ldr	r0, [pc, #60]	; (80032d4 <MX_TIM3_Init+0xd8>)
 8003298:	f003 fec4 	bl	8007024 <HAL_TIMEx_MasterConfigSynchronization>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80032a2:	f7fe fc5d 	bl	8001b60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80032a6:	2300      	movs	r3, #0
 80032a8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80032aa:	2301      	movs	r3, #1
 80032ac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80032ae:	2300      	movs	r3, #0
 80032b0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80032b6:	463b      	mov	r3, r7
 80032b8:	2208      	movs	r2, #8
 80032ba:	4619      	mov	r1, r3
 80032bc:	4805      	ldr	r0, [pc, #20]	; (80032d4 <MX_TIM3_Init+0xd8>)
 80032be:	f002 ffeb 	bl	8006298 <HAL_TIM_IC_ConfigChannel>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80032c8:	f7fe fc4a 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80032cc:	bf00      	nop
 80032ce:	3728      	adds	r7, #40	; 0x28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20001730 	.word	0x20001730
 80032d8:	40000400 	.word	0x40000400

080032dc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032e2:	f107 0308 	add.w	r3, r7, #8
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	605a      	str	r2, [r3, #4]
 80032ec:	609a      	str	r2, [r3, #8]
 80032ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032f0:	463b      	mov	r3, r7
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80032f8:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <MX_TIM4_Init+0x94>)
 80032fa:	4a1e      	ldr	r2, [pc, #120]	; (8003374 <MX_TIM4_Init+0x98>)
 80032fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 80032fe:	4b1c      	ldr	r3, [pc, #112]	; (8003370 <MX_TIM4_Init+0x94>)
 8003300:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8003304:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003306:	4b1a      	ldr	r3, [pc, #104]	; (8003370 <MX_TIM4_Init+0x94>)
 8003308:	2200      	movs	r2, #0
 800330a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800330c:	4b18      	ldr	r3, [pc, #96]	; (8003370 <MX_TIM4_Init+0x94>)
 800330e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003312:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003314:	4b16      	ldr	r3, [pc, #88]	; (8003370 <MX_TIM4_Init+0x94>)
 8003316:	2200      	movs	r2, #0
 8003318:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800331a:	4b15      	ldr	r3, [pc, #84]	; (8003370 <MX_TIM4_Init+0x94>)
 800331c:	2200      	movs	r2, #0
 800331e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003320:	4813      	ldr	r0, [pc, #76]	; (8003370 <MX_TIM4_Init+0x94>)
 8003322:	f002 fb75 	bl	8005a10 <HAL_TIM_Base_Init>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800332c:	f7fe fc18 	bl	8001b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003334:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003336:	f107 0308 	add.w	r3, r7, #8
 800333a:	4619      	mov	r1, r3
 800333c:	480c      	ldr	r0, [pc, #48]	; (8003370 <MX_TIM4_Init+0x94>)
 800333e:	f003 f8fd 	bl	800653c <HAL_TIM_ConfigClockSource>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003348:	f7fe fc0a 	bl	8001b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800334c:	2300      	movs	r3, #0
 800334e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003350:	2300      	movs	r3, #0
 8003352:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003354:	463b      	mov	r3, r7
 8003356:	4619      	mov	r1, r3
 8003358:	4805      	ldr	r0, [pc, #20]	; (8003370 <MX_TIM4_Init+0x94>)
 800335a:	f003 fe63 	bl	8007024 <HAL_TIMEx_MasterConfigSynchronization>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003364:	f7fe fbfc 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003368:	bf00      	nop
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	200016e8 	.word	0x200016e8
 8003374:	40000800 	.word	0x40000800

08003378 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a09      	ldr	r2, [pc, #36]	; (80033ac <HAL_TIM_PWM_MspInit+0x34>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d10b      	bne.n	80033a2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <HAL_TIM_PWM_MspInit+0x38>)
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	4a08      	ldr	r2, [pc, #32]	; (80033b0 <HAL_TIM_PWM_MspInit+0x38>)
 8003390:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003394:	6193      	str	r3, [r2, #24]
 8003396:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_TIM_PWM_MspInit+0x38>)
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80033a2:	bf00      	nop
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr
 80033ac:	40012c00 	.word	0x40012c00
 80033b0:	40021000 	.word	0x40021000

080033b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08a      	sub	sp, #40	; 0x28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033bc:	f107 0318 	add.w	r3, r7, #24
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d2:	d114      	bne.n	80033fe <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033d4:	4b2d      	ldr	r3, [pc, #180]	; (800348c <HAL_TIM_Base_MspInit+0xd8>)
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	4a2c      	ldr	r2, [pc, #176]	; (800348c <HAL_TIM_Base_MspInit+0xd8>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	61d3      	str	r3, [r2, #28]
 80033e0:	4b2a      	ldr	r3, [pc, #168]	; (800348c <HAL_TIM_Base_MspInit+0xd8>)
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80033ec:	2200      	movs	r2, #0
 80033ee:	2101      	movs	r1, #1
 80033f0:	201c      	movs	r0, #28
 80033f2:	f000 fbf2 	bl	8003bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033f6:	201c      	movs	r0, #28
 80033f8:	f000 fc0b 	bl	8003c12 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80033fc:	e042      	b.n	8003484 <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM3)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a23      	ldr	r2, [pc, #140]	; (8003490 <HAL_TIM_Base_MspInit+0xdc>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d12c      	bne.n	8003462 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003408:	4b20      	ldr	r3, [pc, #128]	; (800348c <HAL_TIM_Base_MspInit+0xd8>)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	4a1f      	ldr	r2, [pc, #124]	; (800348c <HAL_TIM_Base_MspInit+0xd8>)
 800340e:	f043 0302 	orr.w	r3, r3, #2
 8003412:	61d3      	str	r3, [r2, #28]
 8003414:	4b1d      	ldr	r3, [pc, #116]	; (800348c <HAL_TIM_Base_MspInit+0xd8>)
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003420:	4b1a      	ldr	r3, [pc, #104]	; (800348c <HAL_TIM_Base_MspInit+0xd8>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	4a19      	ldr	r2, [pc, #100]	; (800348c <HAL_TIM_Base_MspInit+0xd8>)
 8003426:	f043 0308 	orr.w	r3, r3, #8
 800342a:	6193      	str	r3, [r2, #24]
 800342c:	4b17      	ldr	r3, [pc, #92]	; (800348c <HAL_TIM_Base_MspInit+0xd8>)
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003438:	2301      	movs	r3, #1
 800343a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800343c:	2300      	movs	r3, #0
 800343e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	2300      	movs	r3, #0
 8003442:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003444:	f107 0318 	add.w	r3, r7, #24
 8003448:	4619      	mov	r1, r3
 800344a:	4812      	ldr	r0, [pc, #72]	; (8003494 <HAL_TIM_Base_MspInit+0xe0>)
 800344c:	f000 fe60 	bl	8004110 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003450:	2200      	movs	r2, #0
 8003452:	2100      	movs	r1, #0
 8003454:	201d      	movs	r0, #29
 8003456:	f000 fbc0 	bl	8003bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800345a:	201d      	movs	r0, #29
 800345c:	f000 fbd9 	bl	8003c12 <HAL_NVIC_EnableIRQ>
}
 8003460:	e010      	b.n	8003484 <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM4)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a0c      	ldr	r2, [pc, #48]	; (8003498 <HAL_TIM_Base_MspInit+0xe4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d10b      	bne.n	8003484 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800346c:	4b07      	ldr	r3, [pc, #28]	; (800348c <HAL_TIM_Base_MspInit+0xd8>)
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	4a06      	ldr	r2, [pc, #24]	; (800348c <HAL_TIM_Base_MspInit+0xd8>)
 8003472:	f043 0304 	orr.w	r3, r3, #4
 8003476:	61d3      	str	r3, [r2, #28]
 8003478:	4b04      	ldr	r3, [pc, #16]	; (800348c <HAL_TIM_Base_MspInit+0xd8>)
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	68bb      	ldr	r3, [r7, #8]
}
 8003484:	bf00      	nop
 8003486:	3728      	adds	r7, #40	; 0x28
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40021000 	.word	0x40021000
 8003490:	40000400 	.word	0x40000400
 8003494:	40010c00 	.word	0x40010c00
 8003498:	40000800 	.word	0x40000800

0800349c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a4:	f107 0310 	add.w	r3, r7, #16
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a1c      	ldr	r2, [pc, #112]	; (8003528 <HAL_TIM_MspPostInit+0x8c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d131      	bne.n	8003520 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <HAL_TIM_MspPostInit+0x90>)
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	4a1a      	ldr	r2, [pc, #104]	; (800352c <HAL_TIM_MspPostInit+0x90>)
 80034c2:	f043 0308 	orr.w	r3, r3, #8
 80034c6:	6193      	str	r3, [r2, #24]
 80034c8:	4b18      	ldr	r3, [pc, #96]	; (800352c <HAL_TIM_MspPostInit+0x90>)
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d4:	4b15      	ldr	r3, [pc, #84]	; (800352c <HAL_TIM_MspPostInit+0x90>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	4a14      	ldr	r2, [pc, #80]	; (800352c <HAL_TIM_MspPostInit+0x90>)
 80034da:	f043 0304 	orr.w	r3, r3, #4
 80034de:	6193      	str	r3, [r2, #24]
 80034e0:	4b12      	ldr	r3, [pc, #72]	; (800352c <HAL_TIM_MspPostInit+0x90>)
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80034ec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80034f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f2:	2302      	movs	r3, #2
 80034f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f6:	2302      	movs	r3, #2
 80034f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fa:	f107 0310 	add.w	r3, r7, #16
 80034fe:	4619      	mov	r1, r3
 8003500:	480b      	ldr	r0, [pc, #44]	; (8003530 <HAL_TIM_MspPostInit+0x94>)
 8003502:	f000 fe05 	bl	8004110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8003506:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800350a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350c:	2302      	movs	r3, #2
 800350e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003510:	2302      	movs	r3, #2
 8003512:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003514:	f107 0310 	add.w	r3, r7, #16
 8003518:	4619      	mov	r1, r3
 800351a:	4806      	ldr	r0, [pc, #24]	; (8003534 <HAL_TIM_MspPostInit+0x98>)
 800351c:	f000 fdf8 	bl	8004110 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003520:	bf00      	nop
 8003522:	3720      	adds	r7, #32
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40012c00 	.word	0x40012c00
 800352c:	40021000 	.word	0x40021000
 8003530:	40010c00 	.word	0x40010c00
 8003534:	40010800 	.word	0x40010800

08003538 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <MX_USART1_UART_Init+0x4c>)
 800353e:	4a12      	ldr	r2, [pc, #72]	; (8003588 <MX_USART1_UART_Init+0x50>)
 8003540:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003542:	4b10      	ldr	r3, [pc, #64]	; (8003584 <MX_USART1_UART_Init+0x4c>)
 8003544:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003548:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800354a:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <MX_USART1_UART_Init+0x4c>)
 800354c:	2200      	movs	r2, #0
 800354e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <MX_USART1_UART_Init+0x4c>)
 8003552:	2200      	movs	r2, #0
 8003554:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003556:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <MX_USART1_UART_Init+0x4c>)
 8003558:	2200      	movs	r2, #0
 800355a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800355c:	4b09      	ldr	r3, [pc, #36]	; (8003584 <MX_USART1_UART_Init+0x4c>)
 800355e:	220c      	movs	r2, #12
 8003560:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003562:	4b08      	ldr	r3, [pc, #32]	; (8003584 <MX_USART1_UART_Init+0x4c>)
 8003564:	2200      	movs	r2, #0
 8003566:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003568:	4b06      	ldr	r3, [pc, #24]	; (8003584 <MX_USART1_UART_Init+0x4c>)
 800356a:	2200      	movs	r2, #0
 800356c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800356e:	4805      	ldr	r0, [pc, #20]	; (8003584 <MX_USART1_UART_Init+0x4c>)
 8003570:	f003 fe3d 	bl	80071ee <HAL_UART_Init>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800357a:	f7fe faf1 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800357e:	bf00      	nop
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20001914 	.word	0x20001914
 8003588:	40013800 	.word	0x40013800

0800358c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003590:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <MX_USART2_UART_Init+0x48>)
 8003592:	4a11      	ldr	r2, [pc, #68]	; (80035d8 <MX_USART2_UART_Init+0x4c>)
 8003594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8003596:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <MX_USART2_UART_Init+0x48>)
 8003598:	4a10      	ldr	r2, [pc, #64]	; (80035dc <MX_USART2_UART_Init+0x50>)
 800359a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800359c:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <MX_USART2_UART_Init+0x48>)
 800359e:	2200      	movs	r2, #0
 80035a0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035a2:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <MX_USART2_UART_Init+0x48>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035a8:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <MX_USART2_UART_Init+0x48>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035ae:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <MX_USART2_UART_Init+0x48>)
 80035b0:	220c      	movs	r2, #12
 80035b2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035b4:	4b07      	ldr	r3, [pc, #28]	; (80035d4 <MX_USART2_UART_Init+0x48>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035ba:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <MX_USART2_UART_Init+0x48>)
 80035bc:	2200      	movs	r2, #0
 80035be:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80035c0:	4804      	ldr	r0, [pc, #16]	; (80035d4 <MX_USART2_UART_Init+0x48>)
 80035c2:	f003 fe14 	bl	80071ee <HAL_UART_Init>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 80035cc:	f7fe fac8 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80035d0:	bf00      	nop
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	20001954 	.word	0x20001954
 80035d8:	40004400 	.word	0x40004400
 80035dc:	000f4240 	.word	0x000f4240

080035e0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80035e4:	4b11      	ldr	r3, [pc, #68]	; (800362c <MX_USART3_UART_Init+0x4c>)
 80035e6:	4a12      	ldr	r2, [pc, #72]	; (8003630 <MX_USART3_UART_Init+0x50>)
 80035e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <MX_USART3_UART_Init+0x4c>)
 80035ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80035f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80035f2:	4b0e      	ldr	r3, [pc, #56]	; (800362c <MX_USART3_UART_Init+0x4c>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80035f8:	4b0c      	ldr	r3, [pc, #48]	; (800362c <MX_USART3_UART_Init+0x4c>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80035fe:	4b0b      	ldr	r3, [pc, #44]	; (800362c <MX_USART3_UART_Init+0x4c>)
 8003600:	2200      	movs	r2, #0
 8003602:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <MX_USART3_UART_Init+0x4c>)
 8003606:	220c      	movs	r2, #12
 8003608:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800360a:	4b08      	ldr	r3, [pc, #32]	; (800362c <MX_USART3_UART_Init+0x4c>)
 800360c:	2200      	movs	r2, #0
 800360e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003610:	4b06      	ldr	r3, [pc, #24]	; (800362c <MX_USART3_UART_Init+0x4c>)
 8003612:	2200      	movs	r2, #0
 8003614:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003616:	4805      	ldr	r0, [pc, #20]	; (800362c <MX_USART3_UART_Init+0x4c>)
 8003618:	f003 fde9 	bl	80071ee <HAL_UART_Init>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003622:	f7fe fa9d 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	2000184c 	.word	0x2000184c
 8003630:	40004800 	.word	0x40004800

08003634 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08c      	sub	sp, #48	; 0x30
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800363c:	f107 0320 	add.w	r3, r7, #32
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a95      	ldr	r2, [pc, #596]	; (80038a4 <HAL_UART_MspInit+0x270>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d159      	bne.n	8003708 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003654:	4b94      	ldr	r3, [pc, #592]	; (80038a8 <HAL_UART_MspInit+0x274>)
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	4a93      	ldr	r2, [pc, #588]	; (80038a8 <HAL_UART_MspInit+0x274>)
 800365a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800365e:	6193      	str	r3, [r2, #24]
 8003660:	4b91      	ldr	r3, [pc, #580]	; (80038a8 <HAL_UART_MspInit+0x274>)
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800366c:	4b8e      	ldr	r3, [pc, #568]	; (80038a8 <HAL_UART_MspInit+0x274>)
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	4a8d      	ldr	r2, [pc, #564]	; (80038a8 <HAL_UART_MspInit+0x274>)
 8003672:	f043 0304 	orr.w	r3, r3, #4
 8003676:	6193      	str	r3, [r2, #24]
 8003678:	4b8b      	ldr	r3, [pc, #556]	; (80038a8 <HAL_UART_MspInit+0x274>)
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368a:	2302      	movs	r3, #2
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800368e:	2303      	movs	r3, #3
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003692:	f107 0320 	add.w	r3, r7, #32
 8003696:	4619      	mov	r1, r3
 8003698:	4884      	ldr	r0, [pc, #528]	; (80038ac <HAL_UART_MspInit+0x278>)
 800369a:	f000 fd39 	bl	8004110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800369e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036a4:	2300      	movs	r3, #0
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ac:	f107 0320 	add.w	r3, r7, #32
 80036b0:	4619      	mov	r1, r3
 80036b2:	487e      	ldr	r0, [pc, #504]	; (80038ac <HAL_UART_MspInit+0x278>)
 80036b4:	f000 fd2c 	bl	8004110 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80036b8:	4b7d      	ldr	r3, [pc, #500]	; (80038b0 <HAL_UART_MspInit+0x27c>)
 80036ba:	4a7e      	ldr	r2, [pc, #504]	; (80038b4 <HAL_UART_MspInit+0x280>)
 80036bc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036be:	4b7c      	ldr	r3, [pc, #496]	; (80038b0 <HAL_UART_MspInit+0x27c>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036c4:	4b7a      	ldr	r3, [pc, #488]	; (80038b0 <HAL_UART_MspInit+0x27c>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036ca:	4b79      	ldr	r3, [pc, #484]	; (80038b0 <HAL_UART_MspInit+0x27c>)
 80036cc:	2280      	movs	r2, #128	; 0x80
 80036ce:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036d0:	4b77      	ldr	r3, [pc, #476]	; (80038b0 <HAL_UART_MspInit+0x27c>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036d6:	4b76      	ldr	r3, [pc, #472]	; (80038b0 <HAL_UART_MspInit+0x27c>)
 80036d8:	2200      	movs	r2, #0
 80036da:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80036dc:	4b74      	ldr	r3, [pc, #464]	; (80038b0 <HAL_UART_MspInit+0x27c>)
 80036de:	2220      	movs	r2, #32
 80036e0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80036e2:	4b73      	ldr	r3, [pc, #460]	; (80038b0 <HAL_UART_MspInit+0x27c>)
 80036e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036e8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80036ea:	4871      	ldr	r0, [pc, #452]	; (80038b0 <HAL_UART_MspInit+0x27c>)
 80036ec:	f000 faac 	bl	8003c48 <HAL_DMA_Init>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80036f6:	f7fe fa33 	bl	8001b60 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a6c      	ldr	r2, [pc, #432]	; (80038b0 <HAL_UART_MspInit+0x27c>)
 80036fe:	635a      	str	r2, [r3, #52]	; 0x34
 8003700:	4a6b      	ldr	r2, [pc, #428]	; (80038b0 <HAL_UART_MspInit+0x27c>)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003706:	e0c9      	b.n	800389c <HAL_UART_MspInit+0x268>
  else if(uartHandle->Instance==USART2)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a6a      	ldr	r2, [pc, #424]	; (80038b8 <HAL_UART_MspInit+0x284>)
 800370e:	4293      	cmp	r3, r2
 8003710:	f040 8085 	bne.w	800381e <HAL_UART_MspInit+0x1ea>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003714:	4b64      	ldr	r3, [pc, #400]	; (80038a8 <HAL_UART_MspInit+0x274>)
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	4a63      	ldr	r2, [pc, #396]	; (80038a8 <HAL_UART_MspInit+0x274>)
 800371a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800371e:	61d3      	str	r3, [r2, #28]
 8003720:	4b61      	ldr	r3, [pc, #388]	; (80038a8 <HAL_UART_MspInit+0x274>)
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800372c:	4b5e      	ldr	r3, [pc, #376]	; (80038a8 <HAL_UART_MspInit+0x274>)
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	4a5d      	ldr	r2, [pc, #372]	; (80038a8 <HAL_UART_MspInit+0x274>)
 8003732:	f043 0304 	orr.w	r3, r3, #4
 8003736:	6193      	str	r3, [r2, #24]
 8003738:	4b5b      	ldr	r3, [pc, #364]	; (80038a8 <HAL_UART_MspInit+0x274>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003744:	2304      	movs	r3, #4
 8003746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003748:	2302      	movs	r3, #2
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800374c:	2303      	movs	r3, #3
 800374e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003750:	f107 0320 	add.w	r3, r7, #32
 8003754:	4619      	mov	r1, r3
 8003756:	4855      	ldr	r0, [pc, #340]	; (80038ac <HAL_UART_MspInit+0x278>)
 8003758:	f000 fcda 	bl	8004110 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800375c:	2308      	movs	r3, #8
 800375e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003760:	2300      	movs	r3, #0
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003764:	2300      	movs	r3, #0
 8003766:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003768:	f107 0320 	add.w	r3, r7, #32
 800376c:	4619      	mov	r1, r3
 800376e:	484f      	ldr	r0, [pc, #316]	; (80038ac <HAL_UART_MspInit+0x278>)
 8003770:	f000 fcce 	bl	8004110 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003774:	4b51      	ldr	r3, [pc, #324]	; (80038bc <HAL_UART_MspInit+0x288>)
 8003776:	4a52      	ldr	r2, [pc, #328]	; (80038c0 <HAL_UART_MspInit+0x28c>)
 8003778:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800377a:	4b50      	ldr	r3, [pc, #320]	; (80038bc <HAL_UART_MspInit+0x288>)
 800377c:	2200      	movs	r2, #0
 800377e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003780:	4b4e      	ldr	r3, [pc, #312]	; (80038bc <HAL_UART_MspInit+0x288>)
 8003782:	2200      	movs	r2, #0
 8003784:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003786:	4b4d      	ldr	r3, [pc, #308]	; (80038bc <HAL_UART_MspInit+0x288>)
 8003788:	2280      	movs	r2, #128	; 0x80
 800378a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800378c:	4b4b      	ldr	r3, [pc, #300]	; (80038bc <HAL_UART_MspInit+0x288>)
 800378e:	2200      	movs	r2, #0
 8003790:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003792:	4b4a      	ldr	r3, [pc, #296]	; (80038bc <HAL_UART_MspInit+0x288>)
 8003794:	2200      	movs	r2, #0
 8003796:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003798:	4b48      	ldr	r3, [pc, #288]	; (80038bc <HAL_UART_MspInit+0x288>)
 800379a:	2220      	movs	r2, #32
 800379c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800379e:	4b47      	ldr	r3, [pc, #284]	; (80038bc <HAL_UART_MspInit+0x288>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80037a4:	4845      	ldr	r0, [pc, #276]	; (80038bc <HAL_UART_MspInit+0x288>)
 80037a6:	f000 fa4f 	bl	8003c48 <HAL_DMA_Init>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_UART_MspInit+0x180>
      Error_Handler();
 80037b0:	f7fe f9d6 	bl	8001b60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a41      	ldr	r2, [pc, #260]	; (80038bc <HAL_UART_MspInit+0x288>)
 80037b8:	635a      	str	r2, [r3, #52]	; 0x34
 80037ba:	4a40      	ldr	r2, [pc, #256]	; (80038bc <HAL_UART_MspInit+0x288>)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80037c0:	4b40      	ldr	r3, [pc, #256]	; (80038c4 <HAL_UART_MspInit+0x290>)
 80037c2:	4a41      	ldr	r2, [pc, #260]	; (80038c8 <HAL_UART_MspInit+0x294>)
 80037c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037c6:	4b3f      	ldr	r3, [pc, #252]	; (80038c4 <HAL_UART_MspInit+0x290>)
 80037c8:	2210      	movs	r2, #16
 80037ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037cc:	4b3d      	ldr	r3, [pc, #244]	; (80038c4 <HAL_UART_MspInit+0x290>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037d2:	4b3c      	ldr	r3, [pc, #240]	; (80038c4 <HAL_UART_MspInit+0x290>)
 80037d4:	2280      	movs	r2, #128	; 0x80
 80037d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037d8:	4b3a      	ldr	r3, [pc, #232]	; (80038c4 <HAL_UART_MspInit+0x290>)
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037de:	4b39      	ldr	r3, [pc, #228]	; (80038c4 <HAL_UART_MspInit+0x290>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80037e4:	4b37      	ldr	r3, [pc, #220]	; (80038c4 <HAL_UART_MspInit+0x290>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037ea:	4b36      	ldr	r3, [pc, #216]	; (80038c4 <HAL_UART_MspInit+0x290>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80037f0:	4834      	ldr	r0, [pc, #208]	; (80038c4 <HAL_UART_MspInit+0x290>)
 80037f2:	f000 fa29 	bl	8003c48 <HAL_DMA_Init>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_UART_MspInit+0x1cc>
      Error_Handler();
 80037fc:	f7fe f9b0 	bl	8001b60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a30      	ldr	r2, [pc, #192]	; (80038c4 <HAL_UART_MspInit+0x290>)
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
 8003806:	4a2f      	ldr	r2, [pc, #188]	; (80038c4 <HAL_UART_MspInit+0x290>)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800380c:	2200      	movs	r2, #0
 800380e:	2100      	movs	r1, #0
 8003810:	2026      	movs	r0, #38	; 0x26
 8003812:	f000 f9e2 	bl	8003bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003816:	2026      	movs	r0, #38	; 0x26
 8003818:	f000 f9fb 	bl	8003c12 <HAL_NVIC_EnableIRQ>
}
 800381c:	e03e      	b.n	800389c <HAL_UART_MspInit+0x268>
  else if(uartHandle->Instance==USART3)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a2a      	ldr	r2, [pc, #168]	; (80038cc <HAL_UART_MspInit+0x298>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d139      	bne.n	800389c <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003828:	4b1f      	ldr	r3, [pc, #124]	; (80038a8 <HAL_UART_MspInit+0x274>)
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	4a1e      	ldr	r2, [pc, #120]	; (80038a8 <HAL_UART_MspInit+0x274>)
 800382e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003832:	61d3      	str	r3, [r2, #28]
 8003834:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <HAL_UART_MspInit+0x274>)
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003840:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <HAL_UART_MspInit+0x274>)
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	4a18      	ldr	r2, [pc, #96]	; (80038a8 <HAL_UART_MspInit+0x274>)
 8003846:	f043 0308 	orr.w	r3, r3, #8
 800384a:	6193      	str	r3, [r2, #24]
 800384c:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <HAL_UART_MspInit+0x274>)
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	60bb      	str	r3, [r7, #8]
 8003856:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800385c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385e:	2302      	movs	r3, #2
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003862:	2303      	movs	r3, #3
 8003864:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003866:	f107 0320 	add.w	r3, r7, #32
 800386a:	4619      	mov	r1, r3
 800386c:	4818      	ldr	r0, [pc, #96]	; (80038d0 <HAL_UART_MspInit+0x29c>)
 800386e:	f000 fc4f 	bl	8004110 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003872:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003878:	2300      	movs	r3, #0
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387c:	2300      	movs	r3, #0
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003880:	f107 0320 	add.w	r3, r7, #32
 8003884:	4619      	mov	r1, r3
 8003886:	4812      	ldr	r0, [pc, #72]	; (80038d0 <HAL_UART_MspInit+0x29c>)
 8003888:	f000 fc42 	bl	8004110 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800388c:	2200      	movs	r2, #0
 800388e:	2100      	movs	r1, #0
 8003890:	2027      	movs	r0, #39	; 0x27
 8003892:	f000 f9a2 	bl	8003bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003896:	2027      	movs	r0, #39	; 0x27
 8003898:	f000 f9bb 	bl	8003c12 <HAL_NVIC_EnableIRQ>
}
 800389c:	bf00      	nop
 800389e:	3730      	adds	r7, #48	; 0x30
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40013800 	.word	0x40013800
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40010800 	.word	0x40010800
 80038b0:	2000188c 	.word	0x2000188c
 80038b4:	40020058 	.word	0x40020058
 80038b8:	40004400 	.word	0x40004400
 80038bc:	20001808 	.word	0x20001808
 80038c0:	4002006c 	.word	0x4002006c
 80038c4:	200018d0 	.word	0x200018d0
 80038c8:	40020080 	.word	0x40020080
 80038cc:	40004800 	.word	0x40004800
 80038d0:	40010c00 	.word	0x40010c00

080038d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80038d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80038d6:	e003      	b.n	80038e0 <LoopCopyDataInit>

080038d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80038da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80038dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80038de:	3104      	adds	r1, #4

080038e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80038e0:	480a      	ldr	r0, [pc, #40]	; (800390c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80038e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80038e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80038e8:	d3f6      	bcc.n	80038d8 <CopyDataInit>
  ldr r2, =_sbss
 80038ea:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80038ec:	e002      	b.n	80038f4 <LoopFillZerobss>

080038ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80038ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80038f0:	f842 3b04 	str.w	r3, [r2], #4

080038f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80038f4:	4b08      	ldr	r3, [pc, #32]	; (8003918 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80038f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80038f8:	d3f9      	bcc.n	80038ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038fa:	f7ff fb85 	bl	8003008 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038fe:	f004 fd79 	bl	80083f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003902:	f7fd fb1d 	bl	8000f40 <main>
  bx lr
 8003906:	4770      	bx	lr
  ldr r3, =_sidata
 8003908:	0800934c 	.word	0x0800934c
  ldr r0, =_sdata
 800390c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003910:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8003914:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8003918:	200019a8 	.word	0x200019a8

0800391c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800391c:	e7fe      	b.n	800391c <ADC1_2_IRQHandler>
	...

08003920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003924:	4b08      	ldr	r3, [pc, #32]	; (8003948 <HAL_Init+0x28>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a07      	ldr	r2, [pc, #28]	; (8003948 <HAL_Init+0x28>)
 800392a:	f043 0310 	orr.w	r3, r3, #16
 800392e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003930:	2003      	movs	r0, #3
 8003932:	f000 f947 	bl	8003bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003936:	2000      	movs	r0, #0
 8003938:	f000 f808 	bl	800394c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800393c:	f7ff fa66 	bl	8002e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40022000 	.word	0x40022000

0800394c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003954:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <HAL_InitTick+0x54>)
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <HAL_InitTick+0x58>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	4619      	mov	r1, r3
 800395e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003962:	fbb3 f3f1 	udiv	r3, r3, r1
 8003966:	fbb2 f3f3 	udiv	r3, r2, r3
 800396a:	4618      	mov	r0, r3
 800396c:	f000 f95f 	bl	8003c2e <HAL_SYSTICK_Config>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e00e      	b.n	8003998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b0f      	cmp	r3, #15
 800397e:	d80a      	bhi.n	8003996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003980:	2200      	movs	r2, #0
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	f04f 30ff 	mov.w	r0, #4294967295
 8003988:	f000 f927 	bl	8003bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800398c:	4a06      	ldr	r2, [pc, #24]	; (80039a8 <HAL_InitTick+0x5c>)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	e000      	b.n	8003998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
}
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	20000008 	.word	0x20000008
 80039a4:	20000010 	.word	0x20000010
 80039a8:	2000000c 	.word	0x2000000c

080039ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <HAL_IncTick+0x1c>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	4b05      	ldr	r3, [pc, #20]	; (80039cc <HAL_IncTick+0x20>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4413      	add	r3, r2
 80039bc:	4a03      	ldr	r2, [pc, #12]	; (80039cc <HAL_IncTick+0x20>)
 80039be:	6013      	str	r3, [r2, #0]
}
 80039c0:	bf00      	nop
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr
 80039c8:	20000010 	.word	0x20000010
 80039cc:	20001994 	.word	0x20001994

080039d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  return uwTick;
 80039d4:	4b02      	ldr	r3, [pc, #8]	; (80039e0 <HAL_GetTick+0x10>)
 80039d6:	681b      	ldr	r3, [r3, #0]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr
 80039e0:	20001994 	.word	0x20001994

080039e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039ec:	f7ff fff0 	bl	80039d0 <HAL_GetTick>
 80039f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fc:	d005      	beq.n	8003a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039fe:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <HAL_Delay+0x44>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a0a:	bf00      	nop
 8003a0c:	f7ff ffe0 	bl	80039d0 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d8f7      	bhi.n	8003a0c <HAL_Delay+0x28>
  {
  }
}
 8003a1c:	bf00      	nop
 8003a1e:	bf00      	nop
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000010 	.word	0x20000010

08003a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a3c:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <__NVIC_SetPriorityGrouping+0x44>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a48:	4013      	ands	r3, r2
 8003a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a5e:	4a04      	ldr	r2, [pc, #16]	; (8003a70 <__NVIC_SetPriorityGrouping+0x44>)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	60d3      	str	r3, [r2, #12]
}
 8003a64:	bf00      	nop
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bc80      	pop	{r7}
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	e000ed00 	.word	0xe000ed00

08003a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a78:	4b04      	ldr	r3, [pc, #16]	; (8003a8c <__NVIC_GetPriorityGrouping+0x18>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	0a1b      	lsrs	r3, r3, #8
 8003a7e:	f003 0307 	and.w	r3, r3, #7
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc80      	pop	{r7}
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	e000ed00 	.word	0xe000ed00

08003a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	db0b      	blt.n	8003aba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	f003 021f 	and.w	r2, r3, #31
 8003aa8:	4906      	ldr	r1, [pc, #24]	; (8003ac4 <__NVIC_EnableIRQ+0x34>)
 8003aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	2001      	movs	r0, #1
 8003ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr
 8003ac4:	e000e100 	.word	0xe000e100

08003ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	6039      	str	r1, [r7, #0]
 8003ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	db0a      	blt.n	8003af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	490c      	ldr	r1, [pc, #48]	; (8003b14 <__NVIC_SetPriority+0x4c>)
 8003ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae6:	0112      	lsls	r2, r2, #4
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	440b      	add	r3, r1
 8003aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003af0:	e00a      	b.n	8003b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	4908      	ldr	r1, [pc, #32]	; (8003b18 <__NVIC_SetPriority+0x50>)
 8003af8:	79fb      	ldrb	r3, [r7, #7]
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	3b04      	subs	r3, #4
 8003b00:	0112      	lsls	r2, r2, #4
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	440b      	add	r3, r1
 8003b06:	761a      	strb	r2, [r3, #24]
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	e000e100 	.word	0xe000e100
 8003b18:	e000ed00 	.word	0xe000ed00

08003b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b089      	sub	sp, #36	; 0x24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f1c3 0307 	rsb	r3, r3, #7
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	bf28      	it	cs
 8003b3a:	2304      	movcs	r3, #4
 8003b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	3304      	adds	r3, #4
 8003b42:	2b06      	cmp	r3, #6
 8003b44:	d902      	bls.n	8003b4c <NVIC_EncodePriority+0x30>
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	3b03      	subs	r3, #3
 8003b4a:	e000      	b.n	8003b4e <NVIC_EncodePriority+0x32>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b50:	f04f 32ff 	mov.w	r2, #4294967295
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43da      	mvns	r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	401a      	ands	r2, r3
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b64:	f04f 31ff 	mov.w	r1, #4294967295
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6e:	43d9      	mvns	r1, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b74:	4313      	orrs	r3, r2
         );
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3724      	adds	r7, #36	; 0x24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr

08003b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b90:	d301      	bcc.n	8003b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b92:	2301      	movs	r3, #1
 8003b94:	e00f      	b.n	8003bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b96:	4a0a      	ldr	r2, [pc, #40]	; (8003bc0 <SysTick_Config+0x40>)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b9e:	210f      	movs	r1, #15
 8003ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba4:	f7ff ff90 	bl	8003ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <SysTick_Config+0x40>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bae:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <SysTick_Config+0x40>)
 8003bb0:	2207      	movs	r2, #7
 8003bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	e000e010 	.word	0xe000e010

08003bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff ff2d 	bl	8003a2c <__NVIC_SetPriorityGrouping>
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b086      	sub	sp, #24
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	4603      	mov	r3, r0
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bec:	f7ff ff42 	bl	8003a74 <__NVIC_GetPriorityGrouping>
 8003bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	6978      	ldr	r0, [r7, #20]
 8003bf8:	f7ff ff90 	bl	8003b1c <NVIC_EncodePriority>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c02:	4611      	mov	r1, r2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff ff5f 	bl	8003ac8 <__NVIC_SetPriority>
}
 8003c0a:	bf00      	nop
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	4603      	mov	r3, r0
 8003c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff ff35 	bl	8003a90 <__NVIC_EnableIRQ>
}
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff ffa2 	bl	8003b80 <SysTick_Config>
 8003c3c:	4603      	mov	r3, r0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e043      	b.n	8003ce6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	4b22      	ldr	r3, [pc, #136]	; (8003cf0 <HAL_DMA_Init+0xa8>)
 8003c66:	4413      	add	r3, r2
 8003c68:	4a22      	ldr	r2, [pc, #136]	; (8003cf4 <HAL_DMA_Init+0xac>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	091b      	lsrs	r3, r3, #4
 8003c70:	009a      	lsls	r2, r3, #2
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a1f      	ldr	r2, [pc, #124]	; (8003cf8 <HAL_DMA_Init+0xb0>)
 8003c7a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c92:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003c96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr
 8003cf0:	bffdfff8 	.word	0xbffdfff8
 8003cf4:	cccccccd 	.word	0xcccccccd
 8003cf8:	40020000 	.word	0x40020000

08003cfc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_DMA_Start_IT+0x20>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e04a      	b.n	8003db2 <HAL_DMA_Start_IT+0xb6>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d13a      	bne.n	8003da4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2202      	movs	r2, #2
 8003d32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0201 	bic.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 f9ae 	bl	80040b4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 020e 	orr.w	r2, r2, #14
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	e00f      	b.n	8003d92 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0204 	bic.w	r2, r2, #4
 8003d80:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 020a 	orr.w	r2, r2, #10
 8003d90:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0201 	orr.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	e005      	b.n	8003db0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003dac:	2302      	movs	r3, #2
 8003dae:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d005      	beq.n	8003dde <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	73fb      	strb	r3, [r7, #15]
 8003ddc:	e051      	b.n	8003e82 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 020e 	bic.w	r2, r2, #14
 8003dec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0201 	bic.w	r2, r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a22      	ldr	r2, [pc, #136]	; (8003e8c <HAL_DMA_Abort_IT+0xd0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d029      	beq.n	8003e5c <HAL_DMA_Abort_IT+0xa0>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a20      	ldr	r2, [pc, #128]	; (8003e90 <HAL_DMA_Abort_IT+0xd4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d022      	beq.n	8003e58 <HAL_DMA_Abort_IT+0x9c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a1f      	ldr	r2, [pc, #124]	; (8003e94 <HAL_DMA_Abort_IT+0xd8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d01a      	beq.n	8003e52 <HAL_DMA_Abort_IT+0x96>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a1d      	ldr	r2, [pc, #116]	; (8003e98 <HAL_DMA_Abort_IT+0xdc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d012      	beq.n	8003e4c <HAL_DMA_Abort_IT+0x90>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <HAL_DMA_Abort_IT+0xe0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00a      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x8a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a1a      	ldr	r2, [pc, #104]	; (8003ea0 <HAL_DMA_Abort_IT+0xe4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d102      	bne.n	8003e40 <HAL_DMA_Abort_IT+0x84>
 8003e3a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e3e:	e00e      	b.n	8003e5e <HAL_DMA_Abort_IT+0xa2>
 8003e40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e44:	e00b      	b.n	8003e5e <HAL_DMA_Abort_IT+0xa2>
 8003e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e4a:	e008      	b.n	8003e5e <HAL_DMA_Abort_IT+0xa2>
 8003e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e50:	e005      	b.n	8003e5e <HAL_DMA_Abort_IT+0xa2>
 8003e52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e56:	e002      	b.n	8003e5e <HAL_DMA_Abort_IT+0xa2>
 8003e58:	2310      	movs	r3, #16
 8003e5a:	e000      	b.n	8003e5e <HAL_DMA_Abort_IT+0xa2>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	4a11      	ldr	r2, [pc, #68]	; (8003ea4 <HAL_DMA_Abort_IT+0xe8>)
 8003e60:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	4798      	blx	r3
    } 
  }
  return status;
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40020008 	.word	0x40020008
 8003e90:	4002001c 	.word	0x4002001c
 8003e94:	40020030 	.word	0x40020030
 8003e98:	40020044 	.word	0x40020044
 8003e9c:	40020058 	.word	0x40020058
 8003ea0:	4002006c 	.word	0x4002006c
 8003ea4:	40020000 	.word	0x40020000

08003ea8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d04f      	beq.n	8003f70 <HAL_DMA_IRQHandler+0xc8>
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d04a      	beq.n	8003f70 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0320 	and.w	r3, r3, #32
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d107      	bne.n	8003ef8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0204 	bic.w	r2, r2, #4
 8003ef6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a66      	ldr	r2, [pc, #408]	; (8004098 <HAL_DMA_IRQHandler+0x1f0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d029      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xae>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a65      	ldr	r2, [pc, #404]	; (800409c <HAL_DMA_IRQHandler+0x1f4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d022      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xaa>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a63      	ldr	r2, [pc, #396]	; (80040a0 <HAL_DMA_IRQHandler+0x1f8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d01a      	beq.n	8003f4c <HAL_DMA_IRQHandler+0xa4>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a62      	ldr	r2, [pc, #392]	; (80040a4 <HAL_DMA_IRQHandler+0x1fc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d012      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x9e>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a60      	ldr	r2, [pc, #384]	; (80040a8 <HAL_DMA_IRQHandler+0x200>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00a      	beq.n	8003f40 <HAL_DMA_IRQHandler+0x98>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a5f      	ldr	r2, [pc, #380]	; (80040ac <HAL_DMA_IRQHandler+0x204>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d102      	bne.n	8003f3a <HAL_DMA_IRQHandler+0x92>
 8003f34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f38:	e00e      	b.n	8003f58 <HAL_DMA_IRQHandler+0xb0>
 8003f3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f3e:	e00b      	b.n	8003f58 <HAL_DMA_IRQHandler+0xb0>
 8003f40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f44:	e008      	b.n	8003f58 <HAL_DMA_IRQHandler+0xb0>
 8003f46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f4a:	e005      	b.n	8003f58 <HAL_DMA_IRQHandler+0xb0>
 8003f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f50:	e002      	b.n	8003f58 <HAL_DMA_IRQHandler+0xb0>
 8003f52:	2340      	movs	r3, #64	; 0x40
 8003f54:	e000      	b.n	8003f58 <HAL_DMA_IRQHandler+0xb0>
 8003f56:	2304      	movs	r3, #4
 8003f58:	4a55      	ldr	r2, [pc, #340]	; (80040b0 <HAL_DMA_IRQHandler+0x208>)
 8003f5a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8094 	beq.w	800408e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003f6e:	e08e      	b.n	800408e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	2202      	movs	r2, #2
 8003f76:	409a      	lsls	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d056      	beq.n	800402e <HAL_DMA_IRQHandler+0x186>
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d051      	beq.n	800402e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10b      	bne.n	8003fb0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 020a 	bic.w	r2, r2, #10
 8003fa6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a38      	ldr	r2, [pc, #224]	; (8004098 <HAL_DMA_IRQHandler+0x1f0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d029      	beq.n	800400e <HAL_DMA_IRQHandler+0x166>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a37      	ldr	r2, [pc, #220]	; (800409c <HAL_DMA_IRQHandler+0x1f4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d022      	beq.n	800400a <HAL_DMA_IRQHandler+0x162>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a35      	ldr	r2, [pc, #212]	; (80040a0 <HAL_DMA_IRQHandler+0x1f8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d01a      	beq.n	8004004 <HAL_DMA_IRQHandler+0x15c>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a34      	ldr	r2, [pc, #208]	; (80040a4 <HAL_DMA_IRQHandler+0x1fc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d012      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x156>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a32      	ldr	r2, [pc, #200]	; (80040a8 <HAL_DMA_IRQHandler+0x200>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_DMA_IRQHandler+0x150>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a31      	ldr	r2, [pc, #196]	; (80040ac <HAL_DMA_IRQHandler+0x204>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d102      	bne.n	8003ff2 <HAL_DMA_IRQHandler+0x14a>
 8003fec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ff0:	e00e      	b.n	8004010 <HAL_DMA_IRQHandler+0x168>
 8003ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ff6:	e00b      	b.n	8004010 <HAL_DMA_IRQHandler+0x168>
 8003ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ffc:	e008      	b.n	8004010 <HAL_DMA_IRQHandler+0x168>
 8003ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004002:	e005      	b.n	8004010 <HAL_DMA_IRQHandler+0x168>
 8004004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004008:	e002      	b.n	8004010 <HAL_DMA_IRQHandler+0x168>
 800400a:	2320      	movs	r3, #32
 800400c:	e000      	b.n	8004010 <HAL_DMA_IRQHandler+0x168>
 800400e:	2302      	movs	r3, #2
 8004010:	4a27      	ldr	r2, [pc, #156]	; (80040b0 <HAL_DMA_IRQHandler+0x208>)
 8004012:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	2b00      	cmp	r3, #0
 8004022:	d034      	beq.n	800408e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800402c:	e02f      	b.n	800408e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	2208      	movs	r2, #8
 8004034:	409a      	lsls	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4013      	ands	r3, r2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d028      	beq.n	8004090 <HAL_DMA_IRQHandler+0x1e8>
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d023      	beq.n	8004090 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 020e 	bic.w	r2, r2, #14
 8004056:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004060:	2101      	movs	r1, #1
 8004062:	fa01 f202 	lsl.w	r2, r1, r2
 8004066:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	2b00      	cmp	r3, #0
 8004084:	d004      	beq.n	8004090 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	4798      	blx	r3
    }
  }
  return;
 800408e:	bf00      	nop
 8004090:	bf00      	nop
}
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40020008 	.word	0x40020008
 800409c:	4002001c 	.word	0x4002001c
 80040a0:	40020030 	.word	0x40020030
 80040a4:	40020044 	.word	0x40020044
 80040a8:	40020058 	.word	0x40020058
 80040ac:	4002006c 	.word	0x4002006c
 80040b0:	40020000 	.word	0x40020000

080040b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ca:	2101      	movs	r1, #1
 80040cc:	fa01 f202 	lsl.w	r2, r1, r2
 80040d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b10      	cmp	r3, #16
 80040e0:	d108      	bne.n	80040f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040f2:	e007      	b.n	8004104 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	60da      	str	r2, [r3, #12]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr
	...

08004110 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004110:	b480      	push	{r7}
 8004112:	b08b      	sub	sp, #44	; 0x2c
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800411a:	2300      	movs	r3, #0
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800411e:	2300      	movs	r3, #0
 8004120:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004122:	e169      	b.n	80043f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004124:	2201      	movs	r2, #1
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69fa      	ldr	r2, [r7, #28]
 8004134:	4013      	ands	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	429a      	cmp	r2, r3
 800413e:	f040 8158 	bne.w	80043f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4a9a      	ldr	r2, [pc, #616]	; (80043b0 <HAL_GPIO_Init+0x2a0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d05e      	beq.n	800420a <HAL_GPIO_Init+0xfa>
 800414c:	4a98      	ldr	r2, [pc, #608]	; (80043b0 <HAL_GPIO_Init+0x2a0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d875      	bhi.n	800423e <HAL_GPIO_Init+0x12e>
 8004152:	4a98      	ldr	r2, [pc, #608]	; (80043b4 <HAL_GPIO_Init+0x2a4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d058      	beq.n	800420a <HAL_GPIO_Init+0xfa>
 8004158:	4a96      	ldr	r2, [pc, #600]	; (80043b4 <HAL_GPIO_Init+0x2a4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d86f      	bhi.n	800423e <HAL_GPIO_Init+0x12e>
 800415e:	4a96      	ldr	r2, [pc, #600]	; (80043b8 <HAL_GPIO_Init+0x2a8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d052      	beq.n	800420a <HAL_GPIO_Init+0xfa>
 8004164:	4a94      	ldr	r2, [pc, #592]	; (80043b8 <HAL_GPIO_Init+0x2a8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d869      	bhi.n	800423e <HAL_GPIO_Init+0x12e>
 800416a:	4a94      	ldr	r2, [pc, #592]	; (80043bc <HAL_GPIO_Init+0x2ac>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d04c      	beq.n	800420a <HAL_GPIO_Init+0xfa>
 8004170:	4a92      	ldr	r2, [pc, #584]	; (80043bc <HAL_GPIO_Init+0x2ac>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d863      	bhi.n	800423e <HAL_GPIO_Init+0x12e>
 8004176:	4a92      	ldr	r2, [pc, #584]	; (80043c0 <HAL_GPIO_Init+0x2b0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d046      	beq.n	800420a <HAL_GPIO_Init+0xfa>
 800417c:	4a90      	ldr	r2, [pc, #576]	; (80043c0 <HAL_GPIO_Init+0x2b0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d85d      	bhi.n	800423e <HAL_GPIO_Init+0x12e>
 8004182:	2b12      	cmp	r3, #18
 8004184:	d82a      	bhi.n	80041dc <HAL_GPIO_Init+0xcc>
 8004186:	2b12      	cmp	r3, #18
 8004188:	d859      	bhi.n	800423e <HAL_GPIO_Init+0x12e>
 800418a:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <HAL_GPIO_Init+0x80>)
 800418c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004190:	0800420b 	.word	0x0800420b
 8004194:	080041e5 	.word	0x080041e5
 8004198:	080041f7 	.word	0x080041f7
 800419c:	08004239 	.word	0x08004239
 80041a0:	0800423f 	.word	0x0800423f
 80041a4:	0800423f 	.word	0x0800423f
 80041a8:	0800423f 	.word	0x0800423f
 80041ac:	0800423f 	.word	0x0800423f
 80041b0:	0800423f 	.word	0x0800423f
 80041b4:	0800423f 	.word	0x0800423f
 80041b8:	0800423f 	.word	0x0800423f
 80041bc:	0800423f 	.word	0x0800423f
 80041c0:	0800423f 	.word	0x0800423f
 80041c4:	0800423f 	.word	0x0800423f
 80041c8:	0800423f 	.word	0x0800423f
 80041cc:	0800423f 	.word	0x0800423f
 80041d0:	0800423f 	.word	0x0800423f
 80041d4:	080041ed 	.word	0x080041ed
 80041d8:	08004201 	.word	0x08004201
 80041dc:	4a79      	ldr	r2, [pc, #484]	; (80043c4 <HAL_GPIO_Init+0x2b4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d013      	beq.n	800420a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80041e2:	e02c      	b.n	800423e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	623b      	str	r3, [r7, #32]
          break;
 80041ea:	e029      	b.n	8004240 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	3304      	adds	r3, #4
 80041f2:	623b      	str	r3, [r7, #32]
          break;
 80041f4:	e024      	b.n	8004240 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	3308      	adds	r3, #8
 80041fc:	623b      	str	r3, [r7, #32]
          break;
 80041fe:	e01f      	b.n	8004240 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	330c      	adds	r3, #12
 8004206:	623b      	str	r3, [r7, #32]
          break;
 8004208:	e01a      	b.n	8004240 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d102      	bne.n	8004218 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004212:	2304      	movs	r3, #4
 8004214:	623b      	str	r3, [r7, #32]
          break;
 8004216:	e013      	b.n	8004240 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d105      	bne.n	800422c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004220:	2308      	movs	r3, #8
 8004222:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	611a      	str	r2, [r3, #16]
          break;
 800422a:	e009      	b.n	8004240 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800422c:	2308      	movs	r3, #8
 800422e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69fa      	ldr	r2, [r7, #28]
 8004234:	615a      	str	r2, [r3, #20]
          break;
 8004236:	e003      	b.n	8004240 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004238:	2300      	movs	r3, #0
 800423a:	623b      	str	r3, [r7, #32]
          break;
 800423c:	e000      	b.n	8004240 <HAL_GPIO_Init+0x130>
          break;
 800423e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	2bff      	cmp	r3, #255	; 0xff
 8004244:	d801      	bhi.n	800424a <HAL_GPIO_Init+0x13a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	e001      	b.n	800424e <HAL_GPIO_Init+0x13e>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3304      	adds	r3, #4
 800424e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	2bff      	cmp	r3, #255	; 0xff
 8004254:	d802      	bhi.n	800425c <HAL_GPIO_Init+0x14c>
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	e002      	b.n	8004262 <HAL_GPIO_Init+0x152>
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	3b08      	subs	r3, #8
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	210f      	movs	r1, #15
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	fa01 f303 	lsl.w	r3, r1, r3
 8004270:	43db      	mvns	r3, r3
 8004272:	401a      	ands	r2, r3
 8004274:	6a39      	ldr	r1, [r7, #32]
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	431a      	orrs	r2, r3
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 80b1 	beq.w	80043f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004290:	4b4d      	ldr	r3, [pc, #308]	; (80043c8 <HAL_GPIO_Init+0x2b8>)
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	4a4c      	ldr	r2, [pc, #304]	; (80043c8 <HAL_GPIO_Init+0x2b8>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	6193      	str	r3, [r2, #24]
 800429c:	4b4a      	ldr	r3, [pc, #296]	; (80043c8 <HAL_GPIO_Init+0x2b8>)
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80042a8:	4a48      	ldr	r2, [pc, #288]	; (80043cc <HAL_GPIO_Init+0x2bc>)
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	089b      	lsrs	r3, r3, #2
 80042ae:	3302      	adds	r3, #2
 80042b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	f003 0303 	and.w	r3, r3, #3
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	220f      	movs	r2, #15
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	43db      	mvns	r3, r3
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4013      	ands	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a40      	ldr	r2, [pc, #256]	; (80043d0 <HAL_GPIO_Init+0x2c0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d013      	beq.n	80042fc <HAL_GPIO_Init+0x1ec>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a3f      	ldr	r2, [pc, #252]	; (80043d4 <HAL_GPIO_Init+0x2c4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00d      	beq.n	80042f8 <HAL_GPIO_Init+0x1e8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a3e      	ldr	r2, [pc, #248]	; (80043d8 <HAL_GPIO_Init+0x2c8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d007      	beq.n	80042f4 <HAL_GPIO_Init+0x1e4>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a3d      	ldr	r2, [pc, #244]	; (80043dc <HAL_GPIO_Init+0x2cc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d101      	bne.n	80042f0 <HAL_GPIO_Init+0x1e0>
 80042ec:	2303      	movs	r3, #3
 80042ee:	e006      	b.n	80042fe <HAL_GPIO_Init+0x1ee>
 80042f0:	2304      	movs	r3, #4
 80042f2:	e004      	b.n	80042fe <HAL_GPIO_Init+0x1ee>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e002      	b.n	80042fe <HAL_GPIO_Init+0x1ee>
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <HAL_GPIO_Init+0x1ee>
 80042fc:	2300      	movs	r3, #0
 80042fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004300:	f002 0203 	and.w	r2, r2, #3
 8004304:	0092      	lsls	r2, r2, #2
 8004306:	4093      	lsls	r3, r2
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800430e:	492f      	ldr	r1, [pc, #188]	; (80043cc <HAL_GPIO_Init+0x2bc>)
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	089b      	lsrs	r3, r3, #2
 8004314:	3302      	adds	r3, #2
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d006      	beq.n	8004336 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004328:	4b2d      	ldr	r3, [pc, #180]	; (80043e0 <HAL_GPIO_Init+0x2d0>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	492c      	ldr	r1, [pc, #176]	; (80043e0 <HAL_GPIO_Init+0x2d0>)
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	4313      	orrs	r3, r2
 8004332:	600b      	str	r3, [r1, #0]
 8004334:	e006      	b.n	8004344 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004336:	4b2a      	ldr	r3, [pc, #168]	; (80043e0 <HAL_GPIO_Init+0x2d0>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	43db      	mvns	r3, r3
 800433e:	4928      	ldr	r1, [pc, #160]	; (80043e0 <HAL_GPIO_Init+0x2d0>)
 8004340:	4013      	ands	r3, r2
 8004342:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d006      	beq.n	800435e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004350:	4b23      	ldr	r3, [pc, #140]	; (80043e0 <HAL_GPIO_Init+0x2d0>)
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	4922      	ldr	r1, [pc, #136]	; (80043e0 <HAL_GPIO_Init+0x2d0>)
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	4313      	orrs	r3, r2
 800435a:	604b      	str	r3, [r1, #4]
 800435c:	e006      	b.n	800436c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800435e:	4b20      	ldr	r3, [pc, #128]	; (80043e0 <HAL_GPIO_Init+0x2d0>)
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	43db      	mvns	r3, r3
 8004366:	491e      	ldr	r1, [pc, #120]	; (80043e0 <HAL_GPIO_Init+0x2d0>)
 8004368:	4013      	ands	r3, r2
 800436a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d006      	beq.n	8004386 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004378:	4b19      	ldr	r3, [pc, #100]	; (80043e0 <HAL_GPIO_Init+0x2d0>)
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	4918      	ldr	r1, [pc, #96]	; (80043e0 <HAL_GPIO_Init+0x2d0>)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	4313      	orrs	r3, r2
 8004382:	608b      	str	r3, [r1, #8]
 8004384:	e006      	b.n	8004394 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004386:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <HAL_GPIO_Init+0x2d0>)
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	43db      	mvns	r3, r3
 800438e:	4914      	ldr	r1, [pc, #80]	; (80043e0 <HAL_GPIO_Init+0x2d0>)
 8004390:	4013      	ands	r3, r2
 8004392:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d021      	beq.n	80043e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80043a0:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <HAL_GPIO_Init+0x2d0>)
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	490e      	ldr	r1, [pc, #56]	; (80043e0 <HAL_GPIO_Init+0x2d0>)
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60cb      	str	r3, [r1, #12]
 80043ac:	e021      	b.n	80043f2 <HAL_GPIO_Init+0x2e2>
 80043ae:	bf00      	nop
 80043b0:	10320000 	.word	0x10320000
 80043b4:	10310000 	.word	0x10310000
 80043b8:	10220000 	.word	0x10220000
 80043bc:	10210000 	.word	0x10210000
 80043c0:	10120000 	.word	0x10120000
 80043c4:	10110000 	.word	0x10110000
 80043c8:	40021000 	.word	0x40021000
 80043cc:	40010000 	.word	0x40010000
 80043d0:	40010800 	.word	0x40010800
 80043d4:	40010c00 	.word	0x40010c00
 80043d8:	40011000 	.word	0x40011000
 80043dc:	40011400 	.word	0x40011400
 80043e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80043e4:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_GPIO_Init+0x304>)
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	43db      	mvns	r3, r3
 80043ec:	4909      	ldr	r1, [pc, #36]	; (8004414 <HAL_GPIO_Init+0x304>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	3301      	adds	r3, #1
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	f47f ae8e 	bne.w	8004124 <HAL_GPIO_Init+0x14>
  }
}
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	372c      	adds	r7, #44	; 0x2c
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr
 8004414:	40010400 	.word	0x40010400

08004418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	807b      	strh	r3, [r7, #2]
 8004424:	4613      	mov	r3, r2
 8004426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004428:	787b      	ldrb	r3, [r7, #1]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800442e:	887a      	ldrh	r2, [r7, #2]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004434:	e003      	b.n	800443e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004436:	887b      	ldrh	r3, [r7, #2]
 8004438:	041a      	lsls	r2, r3, #16
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	611a      	str	r2, [r3, #16]
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr

08004448 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800445a:	887a      	ldrh	r2, [r7, #2]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4013      	ands	r3, r2
 8004460:	041a      	lsls	r2, r3, #16
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	43d9      	mvns	r1, r3
 8004466:	887b      	ldrh	r3, [r7, #2]
 8004468:	400b      	ands	r3, r1
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	611a      	str	r2, [r3, #16]
}
 8004470:	bf00      	nop
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr
	...

0800447c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e12b      	b.n	80046e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fc fca8 	bl	8000df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2224      	movs	r2, #36	; 0x24
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0201 	bic.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044e0:	f000 fce4 	bl	8004eac <HAL_RCC_GetPCLK1Freq>
 80044e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	4a81      	ldr	r2, [pc, #516]	; (80046f0 <HAL_I2C_Init+0x274>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d807      	bhi.n	8004500 <HAL_I2C_Init+0x84>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4a80      	ldr	r2, [pc, #512]	; (80046f4 <HAL_I2C_Init+0x278>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	bf94      	ite	ls
 80044f8:	2301      	movls	r3, #1
 80044fa:	2300      	movhi	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	e006      	b.n	800450e <HAL_I2C_Init+0x92>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4a7d      	ldr	r2, [pc, #500]	; (80046f8 <HAL_I2C_Init+0x27c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	bf94      	ite	ls
 8004508:	2301      	movls	r3, #1
 800450a:	2300      	movhi	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e0e7      	b.n	80046e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4a78      	ldr	r2, [pc, #480]	; (80046fc <HAL_I2C_Init+0x280>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	0c9b      	lsrs	r3, r3, #18
 8004520:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	430a      	orrs	r2, r1
 8004534:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	4a6a      	ldr	r2, [pc, #424]	; (80046f0 <HAL_I2C_Init+0x274>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d802      	bhi.n	8004550 <HAL_I2C_Init+0xd4>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	3301      	adds	r3, #1
 800454e:	e009      	b.n	8004564 <HAL_I2C_Init+0xe8>
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004556:	fb02 f303 	mul.w	r3, r2, r3
 800455a:	4a69      	ldr	r2, [pc, #420]	; (8004700 <HAL_I2C_Init+0x284>)
 800455c:	fba2 2303 	umull	r2, r3, r2, r3
 8004560:	099b      	lsrs	r3, r3, #6
 8004562:	3301      	adds	r3, #1
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	430b      	orrs	r3, r1
 800456a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004576:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	495c      	ldr	r1, [pc, #368]	; (80046f0 <HAL_I2C_Init+0x274>)
 8004580:	428b      	cmp	r3, r1
 8004582:	d819      	bhi.n	80045b8 <HAL_I2C_Init+0x13c>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	1e59      	subs	r1, r3, #1
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004592:	1c59      	adds	r1, r3, #1
 8004594:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004598:	400b      	ands	r3, r1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <HAL_I2C_Init+0x138>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1e59      	subs	r1, r3, #1
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80045ac:	3301      	adds	r3, #1
 80045ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b2:	e051      	b.n	8004658 <HAL_I2C_Init+0x1dc>
 80045b4:	2304      	movs	r3, #4
 80045b6:	e04f      	b.n	8004658 <HAL_I2C_Init+0x1dc>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d111      	bne.n	80045e4 <HAL_I2C_Init+0x168>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	1e58      	subs	r0, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6859      	ldr	r1, [r3, #4]
 80045c8:	460b      	mov	r3, r1
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	440b      	add	r3, r1
 80045ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80045d2:	3301      	adds	r3, #1
 80045d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf0c      	ite	eq
 80045dc:	2301      	moveq	r3, #1
 80045de:	2300      	movne	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	e012      	b.n	800460a <HAL_I2C_Init+0x18e>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	1e58      	subs	r0, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6859      	ldr	r1, [r3, #4]
 80045ec:	460b      	mov	r3, r1
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	0099      	lsls	r1, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045fa:	3301      	adds	r3, #1
 80045fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004600:	2b00      	cmp	r3, #0
 8004602:	bf0c      	ite	eq
 8004604:	2301      	moveq	r3, #1
 8004606:	2300      	movne	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_I2C_Init+0x196>
 800460e:	2301      	movs	r3, #1
 8004610:	e022      	b.n	8004658 <HAL_I2C_Init+0x1dc>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10e      	bne.n	8004638 <HAL_I2C_Init+0x1bc>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1e58      	subs	r0, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6859      	ldr	r1, [r3, #4]
 8004622:	460b      	mov	r3, r1
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	440b      	add	r3, r1
 8004628:	fbb0 f3f3 	udiv	r3, r0, r3
 800462c:	3301      	adds	r3, #1
 800462e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004636:	e00f      	b.n	8004658 <HAL_I2C_Init+0x1dc>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1e58      	subs	r0, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6859      	ldr	r1, [r3, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	0099      	lsls	r1, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	fbb0 f3f3 	udiv	r3, r0, r3
 800464e:	3301      	adds	r3, #1
 8004650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004654:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	6809      	ldr	r1, [r1, #0]
 800465c:	4313      	orrs	r3, r2
 800465e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69da      	ldr	r2, [r3, #28]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004686:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6911      	ldr	r1, [r2, #16]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	68d2      	ldr	r2, [r2, #12]
 8004692:	4311      	orrs	r1, r2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6812      	ldr	r2, [r2, #0]
 8004698:	430b      	orrs	r3, r1
 800469a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695a      	ldr	r2, [r3, #20]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	000186a0 	.word	0x000186a0
 80046f4:	001e847f 	.word	0x001e847f
 80046f8:	003d08ff 	.word	0x003d08ff
 80046fc:	431bde83 	.word	0x431bde83
 8004700:	10624dd3 	.word	0x10624dd3

08004704 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e26c      	b.n	8004bf0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 8087 	beq.w	8004832 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004724:	4b92      	ldr	r3, [pc, #584]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f003 030c 	and.w	r3, r3, #12
 800472c:	2b04      	cmp	r3, #4
 800472e:	d00c      	beq.n	800474a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004730:	4b8f      	ldr	r3, [pc, #572]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 030c 	and.w	r3, r3, #12
 8004738:	2b08      	cmp	r3, #8
 800473a:	d112      	bne.n	8004762 <HAL_RCC_OscConfig+0x5e>
 800473c:	4b8c      	ldr	r3, [pc, #560]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004748:	d10b      	bne.n	8004762 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800474a:	4b89      	ldr	r3, [pc, #548]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d06c      	beq.n	8004830 <HAL_RCC_OscConfig+0x12c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d168      	bne.n	8004830 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e246      	b.n	8004bf0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476a:	d106      	bne.n	800477a <HAL_RCC_OscConfig+0x76>
 800476c:	4b80      	ldr	r3, [pc, #512]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a7f      	ldr	r2, [pc, #508]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	e02e      	b.n	80047d8 <HAL_RCC_OscConfig+0xd4>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0x98>
 8004782:	4b7b      	ldr	r3, [pc, #492]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a7a      	ldr	r2, [pc, #488]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	4b78      	ldr	r3, [pc, #480]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a77      	ldr	r2, [pc, #476]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	e01d      	b.n	80047d8 <HAL_RCC_OscConfig+0xd4>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCC_OscConfig+0xbc>
 80047a6:	4b72      	ldr	r3, [pc, #456]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a71      	ldr	r2, [pc, #452]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80047ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	4b6f      	ldr	r3, [pc, #444]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a6e      	ldr	r2, [pc, #440]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80047b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	e00b      	b.n	80047d8 <HAL_RCC_OscConfig+0xd4>
 80047c0:	4b6b      	ldr	r3, [pc, #428]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a6a      	ldr	r2, [pc, #424]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80047c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	4b68      	ldr	r3, [pc, #416]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a67      	ldr	r2, [pc, #412]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80047d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d013      	beq.n	8004808 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e0:	f7ff f8f6 	bl	80039d0 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e8:	f7ff f8f2 	bl	80039d0 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b64      	cmp	r3, #100	; 0x64
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e1fa      	b.n	8004bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fa:	4b5d      	ldr	r3, [pc, #372]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCC_OscConfig+0xe4>
 8004806:	e014      	b.n	8004832 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004808:	f7ff f8e2 	bl	80039d0 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004810:	f7ff f8de 	bl	80039d0 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b64      	cmp	r3, #100	; 0x64
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e1e6      	b.n	8004bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004822:	4b53      	ldr	r3, [pc, #332]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0x10c>
 800482e:	e000      	b.n	8004832 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d063      	beq.n	8004906 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800483e:	4b4c      	ldr	r3, [pc, #304]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f003 030c 	and.w	r3, r3, #12
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00b      	beq.n	8004862 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800484a:	4b49      	ldr	r3, [pc, #292]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f003 030c 	and.w	r3, r3, #12
 8004852:	2b08      	cmp	r3, #8
 8004854:	d11c      	bne.n	8004890 <HAL_RCC_OscConfig+0x18c>
 8004856:	4b46      	ldr	r3, [pc, #280]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d116      	bne.n	8004890 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004862:	4b43      	ldr	r3, [pc, #268]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <HAL_RCC_OscConfig+0x176>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d001      	beq.n	800487a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e1ba      	b.n	8004bf0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487a:	4b3d      	ldr	r3, [pc, #244]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	4939      	ldr	r1, [pc, #228]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 800488a:	4313      	orrs	r3, r2
 800488c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800488e:	e03a      	b.n	8004906 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d020      	beq.n	80048da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004898:	4b36      	ldr	r3, [pc, #216]	; (8004974 <HAL_RCC_OscConfig+0x270>)
 800489a:	2201      	movs	r2, #1
 800489c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489e:	f7ff f897 	bl	80039d0 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048a6:	f7ff f893 	bl	80039d0 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e19b      	b.n	8004bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b8:	4b2d      	ldr	r3, [pc, #180]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0f0      	beq.n	80048a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c4:	4b2a      	ldr	r3, [pc, #168]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	4927      	ldr	r1, [pc, #156]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	600b      	str	r3, [r1, #0]
 80048d8:	e015      	b.n	8004906 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048da:	4b26      	ldr	r3, [pc, #152]	; (8004974 <HAL_RCC_OscConfig+0x270>)
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e0:	f7ff f876 	bl	80039d0 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048e8:	f7ff f872 	bl	80039d0 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e17a      	b.n	8004bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048fa:	4b1d      	ldr	r3, [pc, #116]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d03a      	beq.n	8004988 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d019      	beq.n	800494e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800491a:	4b17      	ldr	r3, [pc, #92]	; (8004978 <HAL_RCC_OscConfig+0x274>)
 800491c:	2201      	movs	r2, #1
 800491e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004920:	f7ff f856 	bl	80039d0 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004928:	f7ff f852 	bl	80039d0 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e15a      	b.n	8004bf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800493a:	4b0d      	ldr	r3, [pc, #52]	; (8004970 <HAL_RCC_OscConfig+0x26c>)
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0f0      	beq.n	8004928 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004946:	2001      	movs	r0, #1
 8004948:	f000 fad8 	bl	8004efc <RCC_Delay>
 800494c:	e01c      	b.n	8004988 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800494e:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <HAL_RCC_OscConfig+0x274>)
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004954:	f7ff f83c 	bl	80039d0 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800495a:	e00f      	b.n	800497c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800495c:	f7ff f838 	bl	80039d0 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d908      	bls.n	800497c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e140      	b.n	8004bf0 <HAL_RCC_OscConfig+0x4ec>
 800496e:	bf00      	nop
 8004970:	40021000 	.word	0x40021000
 8004974:	42420000 	.word	0x42420000
 8004978:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800497c:	4b9e      	ldr	r3, [pc, #632]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1e9      	bne.n	800495c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80a6 	beq.w	8004ae2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004996:	2300      	movs	r3, #0
 8004998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800499a:	4b97      	ldr	r3, [pc, #604]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10d      	bne.n	80049c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049a6:	4b94      	ldr	r3, [pc, #592]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	4a93      	ldr	r2, [pc, #588]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 80049ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b0:	61d3      	str	r3, [r2, #28]
 80049b2:	4b91      	ldr	r3, [pc, #580]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ba:	60bb      	str	r3, [r7, #8]
 80049bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049be:	2301      	movs	r3, #1
 80049c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c2:	4b8e      	ldr	r3, [pc, #568]	; (8004bfc <HAL_RCC_OscConfig+0x4f8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d118      	bne.n	8004a00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ce:	4b8b      	ldr	r3, [pc, #556]	; (8004bfc <HAL_RCC_OscConfig+0x4f8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a8a      	ldr	r2, [pc, #552]	; (8004bfc <HAL_RCC_OscConfig+0x4f8>)
 80049d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049da:	f7fe fff9 	bl	80039d0 <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049e2:	f7fe fff5 	bl	80039d0 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b64      	cmp	r3, #100	; 0x64
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e0fd      	b.n	8004bf0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f4:	4b81      	ldr	r3, [pc, #516]	; (8004bfc <HAL_RCC_OscConfig+0x4f8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d106      	bne.n	8004a16 <HAL_RCC_OscConfig+0x312>
 8004a08:	4b7b      	ldr	r3, [pc, #492]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	4a7a      	ldr	r2, [pc, #488]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	6213      	str	r3, [r2, #32]
 8004a14:	e02d      	b.n	8004a72 <HAL_RCC_OscConfig+0x36e>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10c      	bne.n	8004a38 <HAL_RCC_OscConfig+0x334>
 8004a1e:	4b76      	ldr	r3, [pc, #472]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	4a75      	ldr	r2, [pc, #468]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004a24:	f023 0301 	bic.w	r3, r3, #1
 8004a28:	6213      	str	r3, [r2, #32]
 8004a2a:	4b73      	ldr	r3, [pc, #460]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	4a72      	ldr	r2, [pc, #456]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004a30:	f023 0304 	bic.w	r3, r3, #4
 8004a34:	6213      	str	r3, [r2, #32]
 8004a36:	e01c      	b.n	8004a72 <HAL_RCC_OscConfig+0x36e>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	2b05      	cmp	r3, #5
 8004a3e:	d10c      	bne.n	8004a5a <HAL_RCC_OscConfig+0x356>
 8004a40:	4b6d      	ldr	r3, [pc, #436]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	4a6c      	ldr	r2, [pc, #432]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004a46:	f043 0304 	orr.w	r3, r3, #4
 8004a4a:	6213      	str	r3, [r2, #32]
 8004a4c:	4b6a      	ldr	r3, [pc, #424]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	4a69      	ldr	r2, [pc, #420]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004a52:	f043 0301 	orr.w	r3, r3, #1
 8004a56:	6213      	str	r3, [r2, #32]
 8004a58:	e00b      	b.n	8004a72 <HAL_RCC_OscConfig+0x36e>
 8004a5a:	4b67      	ldr	r3, [pc, #412]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	4a66      	ldr	r2, [pc, #408]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004a60:	f023 0301 	bic.w	r3, r3, #1
 8004a64:	6213      	str	r3, [r2, #32]
 8004a66:	4b64      	ldr	r3, [pc, #400]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	4a63      	ldr	r2, [pc, #396]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004a6c:	f023 0304 	bic.w	r3, r3, #4
 8004a70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d015      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a7a:	f7fe ffa9 	bl	80039d0 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a80:	e00a      	b.n	8004a98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a82:	f7fe ffa5 	bl	80039d0 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e0ab      	b.n	8004bf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a98:	4b57      	ldr	r3, [pc, #348]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0ee      	beq.n	8004a82 <HAL_RCC_OscConfig+0x37e>
 8004aa4:	e014      	b.n	8004ad0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa6:	f7fe ff93 	bl	80039d0 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aac:	e00a      	b.n	8004ac4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aae:	f7fe ff8f 	bl	80039d0 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e095      	b.n	8004bf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ac4:	4b4c      	ldr	r3, [pc, #304]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1ee      	bne.n	8004aae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ad0:	7dfb      	ldrb	r3, [r7, #23]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d105      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ad6:	4b48      	ldr	r3, [pc, #288]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	4a47      	ldr	r2, [pc, #284]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 8081 	beq.w	8004bee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aec:	4b42      	ldr	r3, [pc, #264]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 030c 	and.w	r3, r3, #12
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d061      	beq.n	8004bbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d146      	bne.n	8004b8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b00:	4b3f      	ldr	r3, [pc, #252]	; (8004c00 <HAL_RCC_OscConfig+0x4fc>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b06:	f7fe ff63 	bl	80039d0 <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b0e:	f7fe ff5f 	bl	80039d0 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e067      	b.n	8004bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b20:	4b35      	ldr	r3, [pc, #212]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1f0      	bne.n	8004b0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b34:	d108      	bne.n	8004b48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b36:	4b30      	ldr	r3, [pc, #192]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	492d      	ldr	r1, [pc, #180]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b48:	4b2b      	ldr	r3, [pc, #172]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a19      	ldr	r1, [r3, #32]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	4927      	ldr	r1, [pc, #156]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b60:	4b27      	ldr	r3, [pc, #156]	; (8004c00 <HAL_RCC_OscConfig+0x4fc>)
 8004b62:	2201      	movs	r2, #1
 8004b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b66:	f7fe ff33 	bl	80039d0 <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6e:	f7fe ff2f 	bl	80039d0 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e037      	b.n	8004bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b80:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0f0      	beq.n	8004b6e <HAL_RCC_OscConfig+0x46a>
 8004b8c:	e02f      	b.n	8004bee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b8e:	4b1c      	ldr	r3, [pc, #112]	; (8004c00 <HAL_RCC_OscConfig+0x4fc>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b94:	f7fe ff1c 	bl	80039d0 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b9c:	f7fe ff18 	bl	80039d0 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e020      	b.n	8004bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bae:	4b12      	ldr	r3, [pc, #72]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCC_OscConfig+0x498>
 8004bba:	e018      	b.n	8004bee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d101      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e013      	b.n	8004bf0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <HAL_RCC_OscConfig+0x4f4>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d106      	bne.n	8004bea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d001      	beq.n	8004bee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3718      	adds	r7, #24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	40007000 	.word	0x40007000
 8004c00:	42420060 	.word	0x42420060

08004c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0d0      	b.n	8004dba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c18:	4b6a      	ldr	r3, [pc, #424]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d910      	bls.n	8004c48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c26:	4b67      	ldr	r3, [pc, #412]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f023 0207 	bic.w	r2, r3, #7
 8004c2e:	4965      	ldr	r1, [pc, #404]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c36:	4b63      	ldr	r3, [pc, #396]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d001      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e0b8      	b.n	8004dba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d020      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c60:	4b59      	ldr	r3, [pc, #356]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	4a58      	ldr	r2, [pc, #352]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c78:	4b53      	ldr	r3, [pc, #332]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	4a52      	ldr	r2, [pc, #328]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c84:	4b50      	ldr	r3, [pc, #320]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	494d      	ldr	r1, [pc, #308]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d040      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d107      	bne.n	8004cba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004caa:	4b47      	ldr	r3, [pc, #284]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d115      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e07f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d107      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc2:	4b41      	ldr	r3, [pc, #260]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d109      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e073      	b.n	8004dba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd2:	4b3d      	ldr	r3, [pc, #244]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e06b      	b.n	8004dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ce2:	4b39      	ldr	r3, [pc, #228]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f023 0203 	bic.w	r2, r3, #3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	4936      	ldr	r1, [pc, #216]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cf4:	f7fe fe6c 	bl	80039d0 <HAL_GetTick>
 8004cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cfc:	f7fe fe68 	bl	80039d0 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e053      	b.n	8004dba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d12:	4b2d      	ldr	r3, [pc, #180]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f003 020c 	and.w	r2, r3, #12
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d1eb      	bne.n	8004cfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d24:	4b27      	ldr	r3, [pc, #156]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d210      	bcs.n	8004d54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d32:	4b24      	ldr	r3, [pc, #144]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f023 0207 	bic.w	r2, r3, #7
 8004d3a:	4922      	ldr	r1, [pc, #136]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d42:	4b20      	ldr	r3, [pc, #128]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d001      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e032      	b.n	8004dba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d60:	4b19      	ldr	r3, [pc, #100]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	4916      	ldr	r1, [pc, #88]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d7e:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	490e      	ldr	r1, [pc, #56]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d92:	f000 f821 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 8004d96:	4602      	mov	r2, r0
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	490a      	ldr	r1, [pc, #40]	; (8004dcc <HAL_RCC_ClockConfig+0x1c8>)
 8004da4:	5ccb      	ldrb	r3, [r1, r3]
 8004da6:	fa22 f303 	lsr.w	r3, r2, r3
 8004daa:	4a09      	ldr	r2, [pc, #36]	; (8004dd0 <HAL_RCC_ClockConfig+0x1cc>)
 8004dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dae:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <HAL_RCC_ClockConfig+0x1d0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe fdca 	bl	800394c <HAL_InitTick>

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40022000 	.word	0x40022000
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	08009290 	.word	0x08009290
 8004dd0:	20000008 	.word	0x20000008
 8004dd4:	2000000c 	.word	0x2000000c

08004dd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd8:	b490      	push	{r4, r7}
 8004dda:	b08a      	sub	sp, #40	; 0x28
 8004ddc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004dde:	4b2a      	ldr	r3, [pc, #168]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004de0:	1d3c      	adds	r4, r7, #4
 8004de2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004de4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004de8:	f240 2301 	movw	r3, #513	; 0x201
 8004dec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
 8004df2:	2300      	movs	r3, #0
 8004df4:	61bb      	str	r3, [r7, #24]
 8004df6:	2300      	movs	r3, #0
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e02:	4b22      	ldr	r3, [pc, #136]	; (8004e8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f003 030c 	and.w	r3, r3, #12
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d002      	beq.n	8004e18 <HAL_RCC_GetSysClockFreq+0x40>
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d003      	beq.n	8004e1e <HAL_RCC_GetSysClockFreq+0x46>
 8004e16:	e02d      	b.n	8004e74 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e18:	4b1d      	ldr	r3, [pc, #116]	; (8004e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e1a:	623b      	str	r3, [r7, #32]
      break;
 8004e1c:	e02d      	b.n	8004e7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	0c9b      	lsrs	r3, r3, #18
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004e30:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d013      	beq.n	8004e64 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e3c:	4b13      	ldr	r3, [pc, #76]	; (8004e8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	0c5b      	lsrs	r3, r3, #17
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004e50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	4a0e      	ldr	r2, [pc, #56]	; (8004e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e56:	fb02 f203 	mul.w	r2, r2, r3
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
 8004e62:	e004      	b.n	8004e6e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	4a0b      	ldr	r2, [pc, #44]	; (8004e94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e68:	fb02 f303 	mul.w	r3, r2, r3
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	623b      	str	r3, [r7, #32]
      break;
 8004e72:	e002      	b.n	8004e7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e74:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e76:	623b      	str	r3, [r7, #32]
      break;
 8004e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3728      	adds	r7, #40	; 0x28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bc90      	pop	{r4, r7}
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	08009270 	.word	0x08009270
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	007a1200 	.word	0x007a1200
 8004e94:	003d0900 	.word	0x003d0900

08004e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e9c:	4b02      	ldr	r3, [pc, #8]	; (8004ea8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bc80      	pop	{r7}
 8004ea6:	4770      	bx	lr
 8004ea8:	20000008 	.word	0x20000008

08004eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004eb0:	f7ff fff2 	bl	8004e98 <HAL_RCC_GetHCLKFreq>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	0a1b      	lsrs	r3, r3, #8
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	4903      	ldr	r1, [pc, #12]	; (8004ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ec2:	5ccb      	ldrb	r3, [r1, r3]
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	080092a0 	.word	0x080092a0

08004ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ed8:	f7ff ffde 	bl	8004e98 <HAL_RCC_GetHCLKFreq>
 8004edc:	4602      	mov	r2, r0
 8004ede:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	0adb      	lsrs	r3, r3, #11
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	4903      	ldr	r1, [pc, #12]	; (8004ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eea:	5ccb      	ldrb	r3, [r1, r3]
 8004eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	080092a0 	.word	0x080092a0

08004efc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f04:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <RCC_Delay+0x34>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a0a      	ldr	r2, [pc, #40]	; (8004f34 <RCC_Delay+0x38>)
 8004f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0e:	0a5b      	lsrs	r3, r3, #9
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	fb02 f303 	mul.w	r3, r2, r3
 8004f16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f18:	bf00      	nop
  }
  while (Delay --);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1e5a      	subs	r2, r3, #1
 8004f1e:	60fa      	str	r2, [r7, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1f9      	bne.n	8004f18 <RCC_Delay+0x1c>
}
 8004f24:	bf00      	nop
 8004f26:	bf00      	nop
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bc80      	pop	{r7}
 8004f2e:	4770      	bx	lr
 8004f30:	20000008 	.word	0x20000008
 8004f34:	10624dd3 	.word	0x10624dd3

08004f38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e076      	b.n	8005038 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d108      	bne.n	8004f64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f5a:	d009      	beq.n	8004f70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	61da      	str	r2, [r3, #28]
 8004f62:	e005      	b.n	8004f70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fd fef4 	bl	8002d78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fa6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff4:	ea42 0103 	orr.w	r1, r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	0c1a      	lsrs	r2, r3, #16
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f002 0204 	and.w	r2, r2, #4
 8005016:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	69da      	ldr	r2, [r3, #28]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005026:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	4613      	mov	r3, r2
 800504e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_SPI_Transmit+0x22>
 800505e:	2302      	movs	r3, #2
 8005060:	e126      	b.n	80052b0 <HAL_SPI_Transmit+0x270>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800506a:	f7fe fcb1 	bl	80039d0 <HAL_GetTick>
 800506e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b01      	cmp	r3, #1
 800507e:	d002      	beq.n	8005086 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005080:	2302      	movs	r3, #2
 8005082:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005084:	e10b      	b.n	800529e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <HAL_SPI_Transmit+0x52>
 800508c:	88fb      	ldrh	r3, [r7, #6]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d102      	bne.n	8005098 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005096:	e102      	b.n	800529e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2203      	movs	r2, #3
 800509c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	88fa      	ldrh	r2, [r7, #6]
 80050b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	88fa      	ldrh	r2, [r7, #6]
 80050b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050de:	d10f      	bne.n	8005100 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510a:	2b40      	cmp	r3, #64	; 0x40
 800510c:	d007      	beq.n	800511e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800511c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005126:	d14b      	bne.n	80051c0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <HAL_SPI_Transmit+0xf6>
 8005130:	8afb      	ldrh	r3, [r7, #22]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d13e      	bne.n	80051b4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	881a      	ldrh	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	1c9a      	adds	r2, r3, #2
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800515a:	e02b      	b.n	80051b4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b02      	cmp	r3, #2
 8005168:	d112      	bne.n	8005190 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	881a      	ldrh	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	1c9a      	adds	r2, r3, #2
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	86da      	strh	r2, [r3, #54]	; 0x36
 800518e:	e011      	b.n	80051b4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005190:	f7fe fc1e 	bl	80039d0 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d803      	bhi.n	80051a8 <HAL_SPI_Transmit+0x168>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a6:	d102      	bne.n	80051ae <HAL_SPI_Transmit+0x16e>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d102      	bne.n	80051b4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051b2:	e074      	b.n	800529e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1ce      	bne.n	800515c <HAL_SPI_Transmit+0x11c>
 80051be:	e04c      	b.n	800525a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <HAL_SPI_Transmit+0x18e>
 80051c8:	8afb      	ldrh	r3, [r7, #22]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d140      	bne.n	8005250 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	330c      	adds	r3, #12
 80051d8:	7812      	ldrb	r2, [r2, #0]
 80051da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051f4:	e02c      	b.n	8005250 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b02      	cmp	r3, #2
 8005202:	d113      	bne.n	800522c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	330c      	adds	r3, #12
 800520e:	7812      	ldrb	r2, [r2, #0]
 8005210:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	86da      	strh	r2, [r3, #54]	; 0x36
 800522a:	e011      	b.n	8005250 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800522c:	f7fe fbd0 	bl	80039d0 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d803      	bhi.n	8005244 <HAL_SPI_Transmit+0x204>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005242:	d102      	bne.n	800524a <HAL_SPI_Transmit+0x20a>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d102      	bne.n	8005250 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800524e:	e026      	b.n	800529e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005254:	b29b      	uxth	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1cd      	bne.n	80051f6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	6839      	ldr	r1, [r7, #0]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 fbb8 	bl	80059d4 <SPI_EndRxTxTransaction>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005278:	2300      	movs	r3, #0
 800527a:	613b      	str	r3, [r7, #16]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	77fb      	strb	r3, [r7, #31]
 800529a:	e000      	b.n	800529e <HAL_SPI_Transmit+0x25e>
  }

error:
 800529c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3720      	adds	r7, #32
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af02      	add	r7, sp, #8
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	603b      	str	r3, [r7, #0]
 80052c4:	4613      	mov	r3, r2
 80052c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052d4:	d112      	bne.n	80052fc <HAL_SPI_Receive+0x44>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10e      	bne.n	80052fc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2204      	movs	r2, #4
 80052e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80052e6:	88fa      	ldrh	r2, [r7, #6]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	4613      	mov	r3, r2
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 f8f1 	bl	80054da <HAL_SPI_TransmitReceive>
 80052f8:	4603      	mov	r3, r0
 80052fa:	e0ea      	b.n	80054d2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005302:	2b01      	cmp	r3, #1
 8005304:	d101      	bne.n	800530a <HAL_SPI_Receive+0x52>
 8005306:	2302      	movs	r3, #2
 8005308:	e0e3      	b.n	80054d2 <HAL_SPI_Receive+0x21a>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005312:	f7fe fb5d 	bl	80039d0 <HAL_GetTick>
 8005316:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b01      	cmp	r3, #1
 8005322:	d002      	beq.n	800532a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005324:	2302      	movs	r3, #2
 8005326:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005328:	e0ca      	b.n	80054c0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d002      	beq.n	8005336 <HAL_SPI_Receive+0x7e>
 8005330:	88fb      	ldrh	r3, [r7, #6]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d102      	bne.n	800533c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	75fb      	strb	r3, [r7, #23]
    goto error;
 800533a:	e0c1      	b.n	80054c0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2204      	movs	r2, #4
 8005340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	88fa      	ldrh	r2, [r7, #6]
 8005354:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	88fa      	ldrh	r2, [r7, #6]
 800535a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005382:	d10f      	bne.n	80053a4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005392:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053a2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ae:	2b40      	cmp	r3, #64	; 0x40
 80053b0:	d007      	beq.n	80053c2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053c0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d162      	bne.n	8005490 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80053ca:	e02e      	b.n	800542a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d115      	bne.n	8005406 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f103 020c 	add.w	r2, r3, #12
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	7812      	ldrb	r2, [r2, #0]
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	3b01      	subs	r3, #1
 80053fe:	b29a      	uxth	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005404:	e011      	b.n	800542a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005406:	f7fe fae3 	bl	80039d0 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	429a      	cmp	r2, r3
 8005414:	d803      	bhi.n	800541e <HAL_SPI_Receive+0x166>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541c:	d102      	bne.n	8005424 <HAL_SPI_Receive+0x16c>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d102      	bne.n	800542a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005428:	e04a      	b.n	80054c0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800542e:	b29b      	uxth	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1cb      	bne.n	80053cc <HAL_SPI_Receive+0x114>
 8005434:	e031      	b.n	800549a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b01      	cmp	r3, #1
 8005442:	d113      	bne.n	800546c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544e:	b292      	uxth	r2, r2
 8005450:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005456:	1c9a      	adds	r2, r3, #2
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005460:	b29b      	uxth	r3, r3
 8005462:	3b01      	subs	r3, #1
 8005464:	b29a      	uxth	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	87da      	strh	r2, [r3, #62]	; 0x3e
 800546a:	e011      	b.n	8005490 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800546c:	f7fe fab0 	bl	80039d0 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	429a      	cmp	r2, r3
 800547a:	d803      	bhi.n	8005484 <HAL_SPI_Receive+0x1cc>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005482:	d102      	bne.n	800548a <HAL_SPI_Receive+0x1d2>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d102      	bne.n	8005490 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800548e:	e017      	b.n	80054c0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005494:	b29b      	uxth	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1cd      	bne.n	8005436 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	6839      	ldr	r1, [r7, #0]
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 fa46 	bl	8005930 <SPI_EndRxTransaction>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2220      	movs	r2, #32
 80054ae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	75fb      	strb	r3, [r7, #23]
 80054bc:	e000      	b.n	80054c0 <HAL_SPI_Receive+0x208>
  }

error :
 80054be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b08c      	sub	sp, #48	; 0x30
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	607a      	str	r2, [r7, #4]
 80054e6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054e8:	2301      	movs	r3, #1
 80054ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d101      	bne.n	8005500 <HAL_SPI_TransmitReceive+0x26>
 80054fc:	2302      	movs	r3, #2
 80054fe:	e18a      	b.n	8005816 <HAL_SPI_TransmitReceive+0x33c>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005508:	f7fe fa62 	bl	80039d0 <HAL_GetTick>
 800550c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800551e:	887b      	ldrh	r3, [r7, #2]
 8005520:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005522:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005526:	2b01      	cmp	r3, #1
 8005528:	d00f      	beq.n	800554a <HAL_SPI_TransmitReceive+0x70>
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005530:	d107      	bne.n	8005542 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d103      	bne.n	8005542 <HAL_SPI_TransmitReceive+0x68>
 800553a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800553e:	2b04      	cmp	r3, #4
 8005540:	d003      	beq.n	800554a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005542:	2302      	movs	r3, #2
 8005544:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005548:	e15b      	b.n	8005802 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <HAL_SPI_TransmitReceive+0x82>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <HAL_SPI_TransmitReceive+0x82>
 8005556:	887b      	ldrh	r3, [r7, #2]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d103      	bne.n	8005564 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005562:	e14e      	b.n	8005802 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b04      	cmp	r3, #4
 800556e:	d003      	beq.n	8005578 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2205      	movs	r2, #5
 8005574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	887a      	ldrh	r2, [r7, #2]
 8005588:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	887a      	ldrh	r2, [r7, #2]
 800558e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	887a      	ldrh	r2, [r7, #2]
 800559a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	887a      	ldrh	r2, [r7, #2]
 80055a0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b8:	2b40      	cmp	r3, #64	; 0x40
 80055ba:	d007      	beq.n	80055cc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d4:	d178      	bne.n	80056c8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <HAL_SPI_TransmitReceive+0x10a>
 80055de:	8b7b      	ldrh	r3, [r7, #26]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d166      	bne.n	80056b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e8:	881a      	ldrh	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f4:	1c9a      	adds	r2, r3, #2
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005608:	e053      	b.n	80056b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b02      	cmp	r3, #2
 8005616:	d11b      	bne.n	8005650 <HAL_SPI_TransmitReceive+0x176>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d016      	beq.n	8005650 <HAL_SPI_TransmitReceive+0x176>
 8005622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005624:	2b01      	cmp	r3, #1
 8005626:	d113      	bne.n	8005650 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	881a      	ldrh	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005638:	1c9a      	adds	r2, r3, #2
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005642:	b29b      	uxth	r3, r3
 8005644:	3b01      	subs	r3, #1
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b01      	cmp	r3, #1
 800565c:	d119      	bne.n	8005692 <HAL_SPI_TransmitReceive+0x1b8>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005662:	b29b      	uxth	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d014      	beq.n	8005692 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005672:	b292      	uxth	r2, r2
 8005674:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567a:	1c9a      	adds	r2, r3, #2
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005684:	b29b      	uxth	r3, r3
 8005686:	3b01      	subs	r3, #1
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800568e:	2301      	movs	r3, #1
 8005690:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005692:	f7fe f99d 	bl	80039d0 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800569e:	429a      	cmp	r2, r3
 80056a0:	d807      	bhi.n	80056b2 <HAL_SPI_TransmitReceive+0x1d8>
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a8:	d003      	beq.n	80056b2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80056b0:	e0a7      	b.n	8005802 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1a6      	bne.n	800560a <HAL_SPI_TransmitReceive+0x130>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1a1      	bne.n	800560a <HAL_SPI_TransmitReceive+0x130>
 80056c6:	e07c      	b.n	80057c2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <HAL_SPI_TransmitReceive+0x1fc>
 80056d0:	8b7b      	ldrh	r3, [r7, #26]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d16b      	bne.n	80057ae <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	330c      	adds	r3, #12
 80056e0:	7812      	ldrb	r2, [r2, #0]
 80056e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	1c5a      	adds	r2, r3, #1
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056fc:	e057      	b.n	80057ae <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b02      	cmp	r3, #2
 800570a:	d11c      	bne.n	8005746 <HAL_SPI_TransmitReceive+0x26c>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005710:	b29b      	uxth	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d017      	beq.n	8005746 <HAL_SPI_TransmitReceive+0x26c>
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	2b01      	cmp	r3, #1
 800571a:	d114      	bne.n	8005746 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	330c      	adds	r3, #12
 8005726:	7812      	ldrb	r2, [r2, #0]
 8005728:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b01      	subs	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b01      	cmp	r3, #1
 8005752:	d119      	bne.n	8005788 <HAL_SPI_TransmitReceive+0x2ae>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005758:	b29b      	uxth	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d014      	beq.n	8005788 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577a:	b29b      	uxth	r3, r3
 800577c:	3b01      	subs	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005784:	2301      	movs	r3, #1
 8005786:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005788:	f7fe f922 	bl	80039d0 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005794:	429a      	cmp	r2, r3
 8005796:	d803      	bhi.n	80057a0 <HAL_SPI_TransmitReceive+0x2c6>
 8005798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579e:	d102      	bne.n	80057a6 <HAL_SPI_TransmitReceive+0x2cc>
 80057a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d103      	bne.n	80057ae <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80057ac:	e029      	b.n	8005802 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1a2      	bne.n	80056fe <HAL_SPI_TransmitReceive+0x224>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d19d      	bne.n	80056fe <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 f904 	bl	80059d4 <SPI_EndRxTxTransaction>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d006      	beq.n	80057e0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2220      	movs	r2, #32
 80057dc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80057de:	e010      	b.n	8005802 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10b      	bne.n	8005800 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	e000      	b.n	8005802 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005800:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005812:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005816:	4618      	mov	r0, r3
 8005818:	3730      	adds	r7, #48	; 0x30
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	4613      	mov	r3, r2
 800582e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005830:	f7fe f8ce 	bl	80039d0 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005838:	1a9b      	subs	r3, r3, r2
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	4413      	add	r3, r2
 800583e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005840:	f7fe f8c6 	bl	80039d0 <HAL_GetTick>
 8005844:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005846:	4b39      	ldr	r3, [pc, #228]	; (800592c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	015b      	lsls	r3, r3, #5
 800584c:	0d1b      	lsrs	r3, r3, #20
 800584e:	69fa      	ldr	r2, [r7, #28]
 8005850:	fb02 f303 	mul.w	r3, r2, r3
 8005854:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005856:	e054      	b.n	8005902 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585e:	d050      	beq.n	8005902 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005860:	f7fe f8b6 	bl	80039d0 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	429a      	cmp	r2, r3
 800586e:	d902      	bls.n	8005876 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d13d      	bne.n	80058f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005884:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800588e:	d111      	bne.n	80058b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005898:	d004      	beq.n	80058a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a2:	d107      	bne.n	80058b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058bc:	d10f      	bne.n	80058de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e017      	b.n	8005922 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	3b01      	subs	r3, #1
 8005900:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4013      	ands	r3, r2
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	429a      	cmp	r2, r3
 8005910:	bf0c      	ite	eq
 8005912:	2301      	moveq	r3, #1
 8005914:	2300      	movne	r3, #0
 8005916:	b2db      	uxtb	r3, r3
 8005918:	461a      	mov	r2, r3
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	429a      	cmp	r2, r3
 800591e:	d19b      	bne.n	8005858 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3720      	adds	r7, #32
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20000008 	.word	0x20000008

08005930 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af02      	add	r7, sp, #8
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005944:	d111      	bne.n	800596a <SPI_EndRxTransaction+0x3a>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800594e:	d004      	beq.n	800595a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005958:	d107      	bne.n	800596a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005968:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005972:	d117      	bne.n	80059a4 <SPI_EndRxTransaction+0x74>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800597c:	d112      	bne.n	80059a4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2200      	movs	r2, #0
 8005986:	2101      	movs	r1, #1
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f7ff ff49 	bl	8005820 <SPI_WaitFlagStateUntilTimeout>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d01a      	beq.n	80059ca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005998:	f043 0220 	orr.w	r2, r3, #32
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e013      	b.n	80059cc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2200      	movs	r2, #0
 80059ac:	2180      	movs	r1, #128	; 0x80
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f7ff ff36 	bl	8005820 <SPI_WaitFlagStateUntilTimeout>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d007      	beq.n	80059ca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059be:	f043 0220 	orr.w	r2, r3, #32
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e000      	b.n	80059cc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af02      	add	r7, sp, #8
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2200      	movs	r2, #0
 80059e8:	2180      	movs	r1, #128	; 0x80
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f7ff ff18 	bl	8005820 <SPI_WaitFlagStateUntilTimeout>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d007      	beq.n	8005a06 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fa:	f043 0220 	orr.w	r2, r3, #32
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e000      	b.n	8005a08 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e041      	b.n	8005aa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7fd fcbc 	bl	80033b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4610      	mov	r0, r2
 8005a50:	f000 fe98 	bl	8006784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d001      	beq.n	8005ac8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e032      	b.n	8005b2e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a18      	ldr	r2, [pc, #96]	; (8005b38 <HAL_TIM_Base_Start+0x88>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d00e      	beq.n	8005af8 <HAL_TIM_Base_Start+0x48>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae2:	d009      	beq.n	8005af8 <HAL_TIM_Base_Start+0x48>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a14      	ldr	r2, [pc, #80]	; (8005b3c <HAL_TIM_Base_Start+0x8c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d004      	beq.n	8005af8 <HAL_TIM_Base_Start+0x48>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a13      	ldr	r2, [pc, #76]	; (8005b40 <HAL_TIM_Base_Start+0x90>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d111      	bne.n	8005b1c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 0307 	and.w	r3, r3, #7
 8005b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b06      	cmp	r3, #6
 8005b08:	d010      	beq.n	8005b2c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f042 0201 	orr.w	r2, r2, #1
 8005b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b1a:	e007      	b.n	8005b2c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bc80      	pop	{r7}
 8005b36:	4770      	bx	lr
 8005b38:	40012c00 	.word	0x40012c00
 8005b3c:	40000400 	.word	0x40000400
 8005b40:	40000800 	.word	0x40000800

08005b44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d001      	beq.n	8005b5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e03a      	b.n	8005bd2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0201 	orr.w	r2, r2, #1
 8005b72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a18      	ldr	r2, [pc, #96]	; (8005bdc <HAL_TIM_Base_Start_IT+0x98>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d00e      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x58>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b86:	d009      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x58>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a14      	ldr	r2, [pc, #80]	; (8005be0 <HAL_TIM_Base_Start_IT+0x9c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d004      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x58>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a13      	ldr	r2, [pc, #76]	; (8005be4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d111      	bne.n	8005bc0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b06      	cmp	r3, #6
 8005bac:	d010      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f042 0201 	orr.w	r2, r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bbe:	e007      	b.n	8005bd0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0201 	orr.w	r2, r2, #1
 8005bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bc80      	pop	{r7}
 8005bda:	4770      	bx	lr
 8005bdc:	40012c00 	.word	0x40012c00
 8005be0:	40000400 	.word	0x40000400
 8005be4:	40000800 	.word	0x40000800

08005be8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e041      	b.n	8005c7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d106      	bne.n	8005c14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7fd fbb2 	bl	8003378 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3304      	adds	r3, #4
 8005c24:	4619      	mov	r1, r3
 8005c26:	4610      	mov	r0, r2
 8005c28:	f000 fdac 	bl	8006784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d109      	bne.n	8005cac <HAL_TIM_PWM_Start+0x24>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	bf14      	ite	ne
 8005ca4:	2301      	movne	r3, #1
 8005ca6:	2300      	moveq	r3, #0
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	e022      	b.n	8005cf2 <HAL_TIM_PWM_Start+0x6a>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d109      	bne.n	8005cc6 <HAL_TIM_PWM_Start+0x3e>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	bf14      	ite	ne
 8005cbe:	2301      	movne	r3, #1
 8005cc0:	2300      	moveq	r3, #0
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	e015      	b.n	8005cf2 <HAL_TIM_PWM_Start+0x6a>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d109      	bne.n	8005ce0 <HAL_TIM_PWM_Start+0x58>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	bf14      	ite	ne
 8005cd8:	2301      	movne	r3, #1
 8005cda:	2300      	moveq	r3, #0
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	e008      	b.n	8005cf2 <HAL_TIM_PWM_Start+0x6a>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	bf14      	ite	ne
 8005cec:	2301      	movne	r3, #1
 8005cee:	2300      	moveq	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e05e      	b.n	8005db8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d104      	bne.n	8005d0a <HAL_TIM_PWM_Start+0x82>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d08:	e013      	b.n	8005d32 <HAL_TIM_PWM_Start+0xaa>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b04      	cmp	r3, #4
 8005d0e:	d104      	bne.n	8005d1a <HAL_TIM_PWM_Start+0x92>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d18:	e00b      	b.n	8005d32 <HAL_TIM_PWM_Start+0xaa>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d104      	bne.n	8005d2a <HAL_TIM_PWM_Start+0xa2>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d28:	e003      	b.n	8005d32 <HAL_TIM_PWM_Start+0xaa>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2201      	movs	r2, #1
 8005d38:	6839      	ldr	r1, [r7, #0]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f001 f8af 	bl	8006e9e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a1e      	ldr	r2, [pc, #120]	; (8005dc0 <HAL_TIM_PWM_Start+0x138>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d107      	bne.n	8005d5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a18      	ldr	r2, [pc, #96]	; (8005dc0 <HAL_TIM_PWM_Start+0x138>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d00e      	beq.n	8005d82 <HAL_TIM_PWM_Start+0xfa>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6c:	d009      	beq.n	8005d82 <HAL_TIM_PWM_Start+0xfa>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a14      	ldr	r2, [pc, #80]	; (8005dc4 <HAL_TIM_PWM_Start+0x13c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d004      	beq.n	8005d82 <HAL_TIM_PWM_Start+0xfa>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a12      	ldr	r2, [pc, #72]	; (8005dc8 <HAL_TIM_PWM_Start+0x140>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d111      	bne.n	8005da6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f003 0307 	and.w	r3, r3, #7
 8005d8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b06      	cmp	r3, #6
 8005d92:	d010      	beq.n	8005db6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 0201 	orr.w	r2, r2, #1
 8005da2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da4:	e007      	b.n	8005db6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f042 0201 	orr.w	r2, r2, #1
 8005db4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	40012c00 	.word	0x40012c00
 8005dc4:	40000400 	.word	0x40000400
 8005dc8:	40000800 	.word	0x40000800

08005dcc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e041      	b.n	8005e62 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d106      	bne.n	8005df8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f839 	bl	8005e6a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	f000 fcba 	bl	8006784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bc80      	pop	{r7}
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d104      	bne.n	8005e96 <HAL_TIM_IC_Start_IT+0x1a>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	e013      	b.n	8005ebe <HAL_TIM_IC_Start_IT+0x42>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d104      	bne.n	8005ea6 <HAL_TIM_IC_Start_IT+0x2a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	e00b      	b.n	8005ebe <HAL_TIM_IC_Start_IT+0x42>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d104      	bne.n	8005eb6 <HAL_TIM_IC_Start_IT+0x3a>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	e003      	b.n	8005ebe <HAL_TIM_IC_Start_IT+0x42>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d104      	bne.n	8005ed0 <HAL_TIM_IC_Start_IT+0x54>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	e013      	b.n	8005ef8 <HAL_TIM_IC_Start_IT+0x7c>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	d104      	bne.n	8005ee0 <HAL_TIM_IC_Start_IT+0x64>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	e00b      	b.n	8005ef8 <HAL_TIM_IC_Start_IT+0x7c>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	d104      	bne.n	8005ef0 <HAL_TIM_IC_Start_IT+0x74>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	e003      	b.n	8005ef8 <HAL_TIM_IC_Start_IT+0x7c>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d102      	bne.n	8005f06 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f00:	7bbb      	ldrb	r3, [r7, #14]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d001      	beq.n	8005f0a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e0b3      	b.n	8006072 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d104      	bne.n	8005f1a <HAL_TIM_IC_Start_IT+0x9e>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f18:	e013      	b.n	8005f42 <HAL_TIM_IC_Start_IT+0xc6>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d104      	bne.n	8005f2a <HAL_TIM_IC_Start_IT+0xae>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f28:	e00b      	b.n	8005f42 <HAL_TIM_IC_Start_IT+0xc6>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b08      	cmp	r3, #8
 8005f2e:	d104      	bne.n	8005f3a <HAL_TIM_IC_Start_IT+0xbe>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f38:	e003      	b.n	8005f42 <HAL_TIM_IC_Start_IT+0xc6>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d104      	bne.n	8005f52 <HAL_TIM_IC_Start_IT+0xd6>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f50:	e013      	b.n	8005f7a <HAL_TIM_IC_Start_IT+0xfe>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d104      	bne.n	8005f62 <HAL_TIM_IC_Start_IT+0xe6>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f60:	e00b      	b.n	8005f7a <HAL_TIM_IC_Start_IT+0xfe>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d104      	bne.n	8005f72 <HAL_TIM_IC_Start_IT+0xf6>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f70:	e003      	b.n	8005f7a <HAL_TIM_IC_Start_IT+0xfe>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2202      	movs	r2, #2
 8005f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b0c      	cmp	r3, #12
 8005f7e:	d841      	bhi.n	8006004 <HAL_TIM_IC_Start_IT+0x188>
 8005f80:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <HAL_TIM_IC_Start_IT+0x10c>)
 8005f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f86:	bf00      	nop
 8005f88:	08005fbd 	.word	0x08005fbd
 8005f8c:	08006005 	.word	0x08006005
 8005f90:	08006005 	.word	0x08006005
 8005f94:	08006005 	.word	0x08006005
 8005f98:	08005fcf 	.word	0x08005fcf
 8005f9c:	08006005 	.word	0x08006005
 8005fa0:	08006005 	.word	0x08006005
 8005fa4:	08006005 	.word	0x08006005
 8005fa8:	08005fe1 	.word	0x08005fe1
 8005fac:	08006005 	.word	0x08006005
 8005fb0:	08006005 	.word	0x08006005
 8005fb4:	08006005 	.word	0x08006005
 8005fb8:	08005ff3 	.word	0x08005ff3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0202 	orr.w	r2, r2, #2
 8005fca:	60da      	str	r2, [r3, #12]
      break;
 8005fcc:	e01b      	b.n	8006006 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f042 0204 	orr.w	r2, r2, #4
 8005fdc:	60da      	str	r2, [r3, #12]
      break;
 8005fde:	e012      	b.n	8006006 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0208 	orr.w	r2, r2, #8
 8005fee:	60da      	str	r2, [r3, #12]
      break;
 8005ff0:	e009      	b.n	8006006 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f042 0210 	orr.w	r2, r2, #16
 8006000:	60da      	str	r2, [r3, #12]
      break;
 8006002:	e000      	b.n	8006006 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8006004:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2201      	movs	r2, #1
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f000 ff45 	bl	8006e9e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a18      	ldr	r2, [pc, #96]	; (800607c <HAL_TIM_IC_Start_IT+0x200>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d00e      	beq.n	800603c <HAL_TIM_IC_Start_IT+0x1c0>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006026:	d009      	beq.n	800603c <HAL_TIM_IC_Start_IT+0x1c0>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a14      	ldr	r2, [pc, #80]	; (8006080 <HAL_TIM_IC_Start_IT+0x204>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d004      	beq.n	800603c <HAL_TIM_IC_Start_IT+0x1c0>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a13      	ldr	r2, [pc, #76]	; (8006084 <HAL_TIM_IC_Start_IT+0x208>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d111      	bne.n	8006060 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f003 0307 	and.w	r3, r3, #7
 8006046:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2b06      	cmp	r3, #6
 800604c:	d010      	beq.n	8006070 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 0201 	orr.w	r2, r2, #1
 800605c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800605e:	e007      	b.n	8006070 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0201 	orr.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	40012c00 	.word	0x40012c00
 8006080:	40000400 	.word	0x40000400
 8006084:	40000800 	.word	0x40000800

08006088 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b02      	cmp	r3, #2
 800609c:	d122      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d11b      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f06f 0202 	mvn.w	r2, #2
 80060b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	f003 0303 	and.w	r3, r3, #3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fb fc7e 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 80060d0:	e005      	b.n	80060de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fb3a 	bl	800674c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fb40 	bl	800675e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 0304 	and.w	r3, r3, #4
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d122      	bne.n	8006138 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	d11b      	bne.n	8006138 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0204 	mvn.w	r2, #4
 8006108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2202      	movs	r2, #2
 800610e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7fb fc54 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8006124:	e005      	b.n	8006132 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fb10 	bl	800674c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fb16 	bl	800675e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	2b08      	cmp	r3, #8
 8006144:	d122      	bne.n	800618c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f003 0308 	and.w	r3, r3, #8
 8006150:	2b08      	cmp	r3, #8
 8006152:	d11b      	bne.n	800618c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f06f 0208 	mvn.w	r2, #8
 800615c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2204      	movs	r2, #4
 8006162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7fb fc2a 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8006178:	e005      	b.n	8006186 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fae6 	bl	800674c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 faec 	bl	800675e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0310 	and.w	r3, r3, #16
 8006196:	2b10      	cmp	r3, #16
 8006198:	d122      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f003 0310 	and.w	r3, r3, #16
 80061a4:	2b10      	cmp	r3, #16
 80061a6:	d11b      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0210 	mvn.w	r2, #16
 80061b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2208      	movs	r2, #8
 80061b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7fb fc00 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 80061cc:	e005      	b.n	80061da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fabc 	bl	800674c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fac2 	bl	800675e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d10e      	bne.n	800620c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d107      	bne.n	800620c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0201 	mvn.w	r2, #1
 8006204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7fb fb7c 	bl	8001904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006216:	2b80      	cmp	r3, #128	; 0x80
 8006218:	d10e      	bne.n	8006238 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006224:	2b80      	cmp	r3, #128	; 0x80
 8006226:	d107      	bne.n	8006238 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 ffae 	bl	8007194 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006242:	2b40      	cmp	r3, #64	; 0x40
 8006244:	d10e      	bne.n	8006264 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006250:	2b40      	cmp	r3, #64	; 0x40
 8006252:	d107      	bne.n	8006264 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800625c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fa86 	bl	8006770 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f003 0320 	and.w	r3, r3, #32
 800626e:	2b20      	cmp	r3, #32
 8006270:	d10e      	bne.n	8006290 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	2b20      	cmp	r3, #32
 800627e:	d107      	bne.n	8006290 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f06f 0220 	mvn.w	r2, #32
 8006288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 ff79 	bl	8007182 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006290:	bf00      	nop
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d101      	bne.n	80062b2 <HAL_TIM_IC_ConfigChannel+0x1a>
 80062ae:	2302      	movs	r3, #2
 80062b0:	e082      	b.n	80063b8 <HAL_TIM_IC_ConfigChannel+0x120>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d11b      	bne.n	80062f8 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6818      	ldr	r0, [r3, #0]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	6819      	ldr	r1, [r3, #0]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	f000 fc42 	bl	8006b58 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699a      	ldr	r2, [r3, #24]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 020c 	bic.w	r2, r2, #12
 80062e2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6999      	ldr	r1, [r3, #24]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	619a      	str	r2, [r3, #24]
 80062f6:	e05a      	b.n	80063ae <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	d11c      	bne.n	8006338 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6818      	ldr	r0, [r3, #0]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	6819      	ldr	r1, [r3, #0]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f000 fcab 	bl	8006c68 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	699a      	ldr	r2, [r3, #24]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006320:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6999      	ldr	r1, [r3, #24]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	021a      	lsls	r2, r3, #8
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	619a      	str	r2, [r3, #24]
 8006336:	e03a      	b.n	80063ae <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b08      	cmp	r3, #8
 800633c:	d11b      	bne.n	8006376 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6818      	ldr	r0, [r3, #0]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	6819      	ldr	r1, [r3, #0]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f000 fcf6 	bl	8006d3e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69da      	ldr	r2, [r3, #28]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 020c 	bic.w	r2, r2, #12
 8006360:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69d9      	ldr	r1, [r3, #28]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	61da      	str	r2, [r3, #28]
 8006374:	e01b      	b.n	80063ae <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6818      	ldr	r0, [r3, #0]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	6819      	ldr	r1, [r3, #0]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f000 fd15 	bl	8006db4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69da      	ldr	r2, [r3, #28]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006398:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69d9      	ldr	r1, [r3, #28]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	021a      	lsls	r2, r3, #8
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d101      	bne.n	80063da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80063d6:	2302      	movs	r3, #2
 80063d8:	e0ac      	b.n	8006534 <HAL_TIM_PWM_ConfigChannel+0x174>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b0c      	cmp	r3, #12
 80063e6:	f200 809f 	bhi.w	8006528 <HAL_TIM_PWM_ConfigChannel+0x168>
 80063ea:	a201      	add	r2, pc, #4	; (adr r2, 80063f0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80063ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f0:	08006425 	.word	0x08006425
 80063f4:	08006529 	.word	0x08006529
 80063f8:	08006529 	.word	0x08006529
 80063fc:	08006529 	.word	0x08006529
 8006400:	08006465 	.word	0x08006465
 8006404:	08006529 	.word	0x08006529
 8006408:	08006529 	.word	0x08006529
 800640c:	08006529 	.word	0x08006529
 8006410:	080064a7 	.word	0x080064a7
 8006414:	08006529 	.word	0x08006529
 8006418:	08006529 	.word	0x08006529
 800641c:	08006529 	.word	0x08006529
 8006420:	080064e7 	.word	0x080064e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68b9      	ldr	r1, [r7, #8]
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fa0c 	bl	8006848 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699a      	ldr	r2, [r3, #24]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0208 	orr.w	r2, r2, #8
 800643e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0204 	bic.w	r2, r2, #4
 800644e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6999      	ldr	r1, [r3, #24]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	691a      	ldr	r2, [r3, #16]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	619a      	str	r2, [r3, #24]
      break;
 8006462:	e062      	b.n	800652a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fa52 	bl	8006914 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699a      	ldr	r2, [r3, #24]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800647e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699a      	ldr	r2, [r3, #24]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800648e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6999      	ldr	r1, [r3, #24]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	021a      	lsls	r2, r3, #8
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	619a      	str	r2, [r3, #24]
      break;
 80064a4:	e041      	b.n	800652a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68b9      	ldr	r1, [r7, #8]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fa9b 	bl	80069e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69da      	ldr	r2, [r3, #28]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f042 0208 	orr.w	r2, r2, #8
 80064c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69da      	ldr	r2, [r3, #28]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 0204 	bic.w	r2, r2, #4
 80064d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69d9      	ldr	r1, [r3, #28]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	691a      	ldr	r2, [r3, #16]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	61da      	str	r2, [r3, #28]
      break;
 80064e4:	e021      	b.n	800652a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68b9      	ldr	r1, [r7, #8]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 fae5 	bl	8006abc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69da      	ldr	r2, [r3, #28]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69da      	ldr	r2, [r3, #28]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69d9      	ldr	r1, [r3, #28]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	021a      	lsls	r2, r3, #8
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	61da      	str	r2, [r3, #28]
      break;
 8006526:	e000      	b.n	800652a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006528:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800654c:	2b01      	cmp	r3, #1
 800654e:	d101      	bne.n	8006554 <HAL_TIM_ConfigClockSource+0x18>
 8006550:	2302      	movs	r3, #2
 8006552:	e0b3      	b.n	80066bc <HAL_TIM_ConfigClockSource+0x180>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006572:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800657a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800658c:	d03e      	beq.n	800660c <HAL_TIM_ConfigClockSource+0xd0>
 800658e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006592:	f200 8087 	bhi.w	80066a4 <HAL_TIM_ConfigClockSource+0x168>
 8006596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800659a:	f000 8085 	beq.w	80066a8 <HAL_TIM_ConfigClockSource+0x16c>
 800659e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a2:	d87f      	bhi.n	80066a4 <HAL_TIM_ConfigClockSource+0x168>
 80065a4:	2b70      	cmp	r3, #112	; 0x70
 80065a6:	d01a      	beq.n	80065de <HAL_TIM_ConfigClockSource+0xa2>
 80065a8:	2b70      	cmp	r3, #112	; 0x70
 80065aa:	d87b      	bhi.n	80066a4 <HAL_TIM_ConfigClockSource+0x168>
 80065ac:	2b60      	cmp	r3, #96	; 0x60
 80065ae:	d050      	beq.n	8006652 <HAL_TIM_ConfigClockSource+0x116>
 80065b0:	2b60      	cmp	r3, #96	; 0x60
 80065b2:	d877      	bhi.n	80066a4 <HAL_TIM_ConfigClockSource+0x168>
 80065b4:	2b50      	cmp	r3, #80	; 0x50
 80065b6:	d03c      	beq.n	8006632 <HAL_TIM_ConfigClockSource+0xf6>
 80065b8:	2b50      	cmp	r3, #80	; 0x50
 80065ba:	d873      	bhi.n	80066a4 <HAL_TIM_ConfigClockSource+0x168>
 80065bc:	2b40      	cmp	r3, #64	; 0x40
 80065be:	d058      	beq.n	8006672 <HAL_TIM_ConfigClockSource+0x136>
 80065c0:	2b40      	cmp	r3, #64	; 0x40
 80065c2:	d86f      	bhi.n	80066a4 <HAL_TIM_ConfigClockSource+0x168>
 80065c4:	2b30      	cmp	r3, #48	; 0x30
 80065c6:	d064      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0x156>
 80065c8:	2b30      	cmp	r3, #48	; 0x30
 80065ca:	d86b      	bhi.n	80066a4 <HAL_TIM_ConfigClockSource+0x168>
 80065cc:	2b20      	cmp	r3, #32
 80065ce:	d060      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0x156>
 80065d0:	2b20      	cmp	r3, #32
 80065d2:	d867      	bhi.n	80066a4 <HAL_TIM_ConfigClockSource+0x168>
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d05c      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0x156>
 80065d8:	2b10      	cmp	r3, #16
 80065da:	d05a      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80065dc:	e062      	b.n	80066a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6818      	ldr	r0, [r3, #0]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	6899      	ldr	r1, [r3, #8]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f000 fc37 	bl	8006e60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006600:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	609a      	str	r2, [r3, #8]
      break;
 800660a:	e04e      	b.n	80066aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6818      	ldr	r0, [r3, #0]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	6899      	ldr	r1, [r3, #8]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f000 fc20 	bl	8006e60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689a      	ldr	r2, [r3, #8]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800662e:	609a      	str	r2, [r3, #8]
      break;
 8006630:	e03b      	b.n	80066aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6818      	ldr	r0, [r3, #0]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	6859      	ldr	r1, [r3, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	461a      	mov	r2, r3
 8006640:	f000 fae4 	bl	8006c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2150      	movs	r1, #80	; 0x50
 800664a:	4618      	mov	r0, r3
 800664c:	f000 fbee 	bl	8006e2c <TIM_ITRx_SetConfig>
      break;
 8006650:	e02b      	b.n	80066aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	6859      	ldr	r1, [r3, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	461a      	mov	r2, r3
 8006660:	f000 fb3e 	bl	8006ce0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2160      	movs	r1, #96	; 0x60
 800666a:	4618      	mov	r0, r3
 800666c:	f000 fbde 	bl	8006e2c <TIM_ITRx_SetConfig>
      break;
 8006670:	e01b      	b.n	80066aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	6859      	ldr	r1, [r3, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	461a      	mov	r2, r3
 8006680:	f000 fac4 	bl	8006c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2140      	movs	r1, #64	; 0x40
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fbce 	bl	8006e2c <TIM_ITRx_SetConfig>
      break;
 8006690:	e00b      	b.n	80066aa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4619      	mov	r1, r3
 800669c:	4610      	mov	r0, r2
 800669e:	f000 fbc5 	bl	8006e2c <TIM_ITRx_SetConfig>
        break;
 80066a2:	e002      	b.n	80066aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80066a4:	bf00      	nop
 80066a6:	e000      	b.n	80066aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80066a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	60fb      	str	r3, [r7, #12]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b0c      	cmp	r3, #12
 80066d6:	d831      	bhi.n	800673c <HAL_TIM_ReadCapturedValue+0x78>
 80066d8:	a201      	add	r2, pc, #4	; (adr r2, 80066e0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80066da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066de:	bf00      	nop
 80066e0:	08006715 	.word	0x08006715
 80066e4:	0800673d 	.word	0x0800673d
 80066e8:	0800673d 	.word	0x0800673d
 80066ec:	0800673d 	.word	0x0800673d
 80066f0:	0800671f 	.word	0x0800671f
 80066f4:	0800673d 	.word	0x0800673d
 80066f8:	0800673d 	.word	0x0800673d
 80066fc:	0800673d 	.word	0x0800673d
 8006700:	08006729 	.word	0x08006729
 8006704:	0800673d 	.word	0x0800673d
 8006708:	0800673d 	.word	0x0800673d
 800670c:	0800673d 	.word	0x0800673d
 8006710:	08006733 	.word	0x08006733
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800671a:	60fb      	str	r3, [r7, #12]

      break;
 800671c:	e00f      	b.n	800673e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006724:	60fb      	str	r3, [r7, #12]

      break;
 8006726:	e00a      	b.n	800673e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672e:	60fb      	str	r3, [r7, #12]

      break;
 8006730:	e005      	b.n	800673e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006738:	60fb      	str	r3, [r7, #12]

      break;
 800673a:	e000      	b.n	800673e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800673c:	bf00      	nop
  }

  return tmpreg;
 800673e:	68fb      	ldr	r3, [r7, #12]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	bc80      	pop	{r7}
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop

0800674c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	bc80      	pop	{r7}
 800675c:	4770      	bx	lr

0800675e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	bc80      	pop	{r7}
 800676e:	4770      	bx	lr

08006770 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	bc80      	pop	{r7}
 8006780:	4770      	bx	lr
	...

08006784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a29      	ldr	r2, [pc, #164]	; (800683c <TIM_Base_SetConfig+0xb8>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d00b      	beq.n	80067b4 <TIM_Base_SetConfig+0x30>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a2:	d007      	beq.n	80067b4 <TIM_Base_SetConfig+0x30>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a26      	ldr	r2, [pc, #152]	; (8006840 <TIM_Base_SetConfig+0xbc>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d003      	beq.n	80067b4 <TIM_Base_SetConfig+0x30>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a25      	ldr	r2, [pc, #148]	; (8006844 <TIM_Base_SetConfig+0xc0>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d108      	bne.n	80067c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a1c      	ldr	r2, [pc, #112]	; (800683c <TIM_Base_SetConfig+0xb8>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00b      	beq.n	80067e6 <TIM_Base_SetConfig+0x62>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d4:	d007      	beq.n	80067e6 <TIM_Base_SetConfig+0x62>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a19      	ldr	r2, [pc, #100]	; (8006840 <TIM_Base_SetConfig+0xbc>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d003      	beq.n	80067e6 <TIM_Base_SetConfig+0x62>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a18      	ldr	r2, [pc, #96]	; (8006844 <TIM_Base_SetConfig+0xc0>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d108      	bne.n	80067f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	4313      	orrs	r3, r2
 8006804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a07      	ldr	r2, [pc, #28]	; (800683c <TIM_Base_SetConfig+0xb8>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d103      	bne.n	800682c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	691a      	ldr	r2, [r3, #16]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	615a      	str	r2, [r3, #20]
}
 8006832:	bf00      	nop
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	bc80      	pop	{r7}
 800683a:	4770      	bx	lr
 800683c:	40012c00 	.word	0x40012c00
 8006840:	40000400 	.word	0x40000400
 8006844:	40000800 	.word	0x40000800

08006848 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	f023 0201 	bic.w	r2, r3, #1
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0303 	bic.w	r3, r3, #3
 800687e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f023 0302 	bic.w	r3, r3, #2
 8006890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	4313      	orrs	r3, r2
 800689a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a1c      	ldr	r2, [pc, #112]	; (8006910 <TIM_OC1_SetConfig+0xc8>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d10c      	bne.n	80068be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f023 0308 	bic.w	r3, r3, #8
 80068aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f023 0304 	bic.w	r3, r3, #4
 80068bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a13      	ldr	r2, [pc, #76]	; (8006910 <TIM_OC1_SetConfig+0xc8>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d111      	bne.n	80068ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	621a      	str	r2, [r3, #32]
}
 8006904:	bf00      	nop
 8006906:	371c      	adds	r7, #28
 8006908:	46bd      	mov	sp, r7
 800690a:	bc80      	pop	{r7}
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	40012c00 	.word	0x40012c00

08006914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	f023 0210 	bic.w	r2, r3, #16
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800694a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	021b      	lsls	r3, r3, #8
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4313      	orrs	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f023 0320 	bic.w	r3, r3, #32
 800695e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	011b      	lsls	r3, r3, #4
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	4313      	orrs	r3, r2
 800696a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a1d      	ldr	r2, [pc, #116]	; (80069e4 <TIM_OC2_SetConfig+0xd0>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d10d      	bne.n	8006990 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800697a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	011b      	lsls	r3, r3, #4
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	4313      	orrs	r3, r2
 8006986:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800698e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a14      	ldr	r2, [pc, #80]	; (80069e4 <TIM_OC2_SetConfig+0xd0>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d113      	bne.n	80069c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800699e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	4313      	orrs	r3, r2
 80069be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	621a      	str	r2, [r3, #32]
}
 80069da:	bf00      	nop
 80069dc:	371c      	adds	r7, #28
 80069de:	46bd      	mov	sp, r7
 80069e0:	bc80      	pop	{r7}
 80069e2:	4770      	bx	lr
 80069e4:	40012c00 	.word	0x40012c00

080069e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 0303 	bic.w	r3, r3, #3
 8006a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	021b      	lsls	r3, r3, #8
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a1d      	ldr	r2, [pc, #116]	; (8006ab8 <TIM_OC3_SetConfig+0xd0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d10d      	bne.n	8006a62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	021b      	lsls	r3, r3, #8
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a14      	ldr	r2, [pc, #80]	; (8006ab8 <TIM_OC3_SetConfig+0xd0>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d113      	bne.n	8006a92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	011b      	lsls	r3, r3, #4
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	621a      	str	r2, [r3, #32]
}
 8006aac:	bf00      	nop
 8006aae:	371c      	adds	r7, #28
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bc80      	pop	{r7}
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	40012c00 	.word	0x40012c00

08006abc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	69db      	ldr	r3, [r3, #28]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	021b      	lsls	r3, r3, #8
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	031b      	lsls	r3, r3, #12
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a0f      	ldr	r2, [pc, #60]	; (8006b54 <TIM_OC4_SetConfig+0x98>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d109      	bne.n	8006b30 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	019b      	lsls	r3, r3, #6
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	621a      	str	r2, [r3, #32]
}
 8006b4a:	bf00      	nop
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bc80      	pop	{r7}
 8006b52:	4770      	bx	lr
 8006b54:	40012c00 	.word	0x40012c00

08006b58 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	f023 0201 	bic.w	r2, r3, #1
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4a1f      	ldr	r2, [pc, #124]	; (8006c00 <TIM_TI1_SetConfig+0xa8>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00b      	beq.n	8006b9e <TIM_TI1_SetConfig+0x46>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b8c:	d007      	beq.n	8006b9e <TIM_TI1_SetConfig+0x46>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4a1c      	ldr	r2, [pc, #112]	; (8006c04 <TIM_TI1_SetConfig+0xac>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d003      	beq.n	8006b9e <TIM_TI1_SetConfig+0x46>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4a1b      	ldr	r2, [pc, #108]	; (8006c08 <TIM_TI1_SetConfig+0xb0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d101      	bne.n	8006ba2 <TIM_TI1_SetConfig+0x4a>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e000      	b.n	8006ba4 <TIM_TI1_SetConfig+0x4c>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d008      	beq.n	8006bba <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f023 0303 	bic.w	r3, r3, #3
 8006bae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	e003      	b.n	8006bc2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f043 0301 	orr.w	r3, r3, #1
 8006bc0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	011b      	lsls	r3, r3, #4
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f023 030a 	bic.w	r3, r3, #10
 8006bdc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	f003 030a 	and.w	r3, r3, #10
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	621a      	str	r2, [r3, #32]
}
 8006bf6:	bf00      	nop
 8006bf8:	371c      	adds	r7, #28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bc80      	pop	{r7}
 8006bfe:	4770      	bx	lr
 8006c00:	40012c00 	.word	0x40012c00
 8006c04:	40000400 	.word	0x40000400
 8006c08:	40000800 	.word	0x40000800

08006c0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	f023 0201 	bic.w	r2, r3, #1
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	011b      	lsls	r3, r3, #4
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f023 030a 	bic.w	r3, r3, #10
 8006c48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	621a      	str	r2, [r3, #32]
}
 8006c5e:	bf00      	nop
 8006c60:	371c      	adds	r7, #28
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bc80      	pop	{r7}
 8006c66:	4770      	bx	lr

08006c68 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	f023 0210 	bic.w	r2, r3, #16
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	021b      	lsls	r3, r3, #8
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ca6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	031b      	lsls	r3, r3, #12
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	011b      	lsls	r3, r3, #4
 8006cc0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	621a      	str	r2, [r3, #32]
}
 8006cd6:	bf00      	nop
 8006cd8:	371c      	adds	r7, #28
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bc80      	pop	{r7}
 8006cde:	4770      	bx	lr

08006ce0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	f023 0210 	bic.w	r2, r3, #16
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	031b      	lsls	r3, r3, #12
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	011b      	lsls	r3, r3, #4
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	621a      	str	r2, [r3, #32]
}
 8006d34:	bf00      	nop
 8006d36:	371c      	adds	r7, #28
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bc80      	pop	{r7}
 8006d3c:	4770      	bx	lr

08006d3e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b087      	sub	sp, #28
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	60f8      	str	r0, [r7, #12]
 8006d46:	60b9      	str	r1, [r7, #8]
 8006d48:	607a      	str	r2, [r7, #4]
 8006d4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a1b      	ldr	r3, [r3, #32]
 8006d50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f023 0303 	bic.w	r3, r3, #3
 8006d6a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d7a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	011b      	lsls	r3, r3, #4
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	021b      	lsls	r3, r3, #8
 8006d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	621a      	str	r2, [r3, #32]
}
 8006daa:	bf00      	nop
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bc80      	pop	{r7}
 8006db2:	4770      	bx	lr

08006db4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
 8006dc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006de0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006df2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	031b      	lsls	r3, r3, #12
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	031b      	lsls	r3, r3, #12
 8006e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	621a      	str	r2, [r3, #32]
}
 8006e22:	bf00      	nop
 8006e24:	371c      	adds	r7, #28
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bc80      	pop	{r7}
 8006e2a:	4770      	bx	lr

08006e2c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	f043 0307 	orr.w	r3, r3, #7
 8006e4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	609a      	str	r2, [r3, #8]
}
 8006e56:	bf00      	nop
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bc80      	pop	{r7}
 8006e5e:	4770      	bx	lr

08006e60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	021a      	lsls	r2, r3, #8
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	431a      	orrs	r2, r3
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	609a      	str	r2, [r3, #8]
}
 8006e94:	bf00      	nop
 8006e96:	371c      	adds	r7, #28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bc80      	pop	{r7}
 8006e9c:	4770      	bx	lr

08006e9e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b087      	sub	sp, #28
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	60f8      	str	r0, [r7, #12]
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	f003 031f 	and.w	r3, r3, #31
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6a1a      	ldr	r2, [r3, #32]
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	43db      	mvns	r3, r3
 8006ec0:	401a      	ands	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6a1a      	ldr	r2, [r3, #32]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f003 031f 	and.w	r3, r3, #31
 8006ed0:	6879      	ldr	r1, [r7, #4]
 8006ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	621a      	str	r2, [r3, #32]
}
 8006edc:	bf00      	nop
 8006ede:	371c      	adds	r7, #28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bc80      	pop	{r7}
 8006ee4:	4770      	bx	lr
	...

08006ee8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d109      	bne.n	8006f0c <HAL_TIMEx_PWMN_Start+0x24>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	bf14      	ite	ne
 8006f04:	2301      	movne	r3, #1
 8006f06:	2300      	moveq	r3, #0
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	e022      	b.n	8006f52 <HAL_TIMEx_PWMN_Start+0x6a>
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d109      	bne.n	8006f26 <HAL_TIMEx_PWMN_Start+0x3e>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	bf14      	ite	ne
 8006f1e:	2301      	movne	r3, #1
 8006f20:	2300      	moveq	r3, #0
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	e015      	b.n	8006f52 <HAL_TIMEx_PWMN_Start+0x6a>
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d109      	bne.n	8006f40 <HAL_TIMEx_PWMN_Start+0x58>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	bf14      	ite	ne
 8006f38:	2301      	movne	r3, #1
 8006f3a:	2300      	moveq	r3, #0
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	e008      	b.n	8006f52 <HAL_TIMEx_PWMN_Start+0x6a>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	bf14      	ite	ne
 8006f4c:	2301      	movne	r3, #1
 8006f4e:	2300      	moveq	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e059      	b.n	800700e <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d104      	bne.n	8006f6a <HAL_TIMEx_PWMN_Start+0x82>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f68:	e013      	b.n	8006f92 <HAL_TIMEx_PWMN_Start+0xaa>
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d104      	bne.n	8006f7a <HAL_TIMEx_PWMN_Start+0x92>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f78:	e00b      	b.n	8006f92 <HAL_TIMEx_PWMN_Start+0xaa>
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	d104      	bne.n	8006f8a <HAL_TIMEx_PWMN_Start+0xa2>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2202      	movs	r2, #2
 8006f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f88:	e003      	b.n	8006f92 <HAL_TIMEx_PWMN_Start+0xaa>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2204      	movs	r2, #4
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 f903 	bl	80071a6 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a18      	ldr	r2, [pc, #96]	; (8007018 <HAL_TIMEx_PWMN_Start+0x130>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d00e      	beq.n	8006fd8 <HAL_TIMEx_PWMN_Start+0xf0>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc2:	d009      	beq.n	8006fd8 <HAL_TIMEx_PWMN_Start+0xf0>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a14      	ldr	r2, [pc, #80]	; (800701c <HAL_TIMEx_PWMN_Start+0x134>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d004      	beq.n	8006fd8 <HAL_TIMEx_PWMN_Start+0xf0>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a13      	ldr	r2, [pc, #76]	; (8007020 <HAL_TIMEx_PWMN_Start+0x138>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d111      	bne.n	8006ffc <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 0307 	and.w	r3, r3, #7
 8006fe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2b06      	cmp	r3, #6
 8006fe8:	d010      	beq.n	800700c <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f042 0201 	orr.w	r2, r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ffa:	e007      	b.n	800700c <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f042 0201 	orr.w	r2, r2, #1
 800700a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	40012c00 	.word	0x40012c00
 800701c:	40000400 	.word	0x40000400
 8007020:	40000800 	.word	0x40000800

08007024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007034:	2b01      	cmp	r3, #1
 8007036:	d101      	bne.n	800703c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007038:	2302      	movs	r3, #2
 800703a:	e046      	b.n	80070ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2202      	movs	r2, #2
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a16      	ldr	r2, [pc, #88]	; (80070d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d00e      	beq.n	800709e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007088:	d009      	beq.n	800709e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a12      	ldr	r2, [pc, #72]	; (80070d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d004      	beq.n	800709e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a10      	ldr	r2, [pc, #64]	; (80070dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d10c      	bne.n	80070b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bc80      	pop	{r7}
 80070d2:	4770      	bx	lr
 80070d4:	40012c00 	.word	0x40012c00
 80070d8:	40000400 	.word	0x40000400
 80070dc:	40000800 	.word	0x40000800

080070e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d101      	bne.n	80070fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070f8:	2302      	movs	r3, #2
 80070fa:	e03d      	b.n	8007178 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	4313      	orrs	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4313      	orrs	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	4313      	orrs	r3, r2
 8007148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	4313      	orrs	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	bc80      	pop	{r7}
 8007180:	4770      	bx	lr

08007182 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800718a:	bf00      	nop
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	bc80      	pop	{r7}
 8007192:	4770      	bx	lr

08007194 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bc80      	pop	{r7}
 80071a4:	4770      	bx	lr

080071a6 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b087      	sub	sp, #28
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	f003 031f 	and.w	r3, r3, #31
 80071b8:	2204      	movs	r2, #4
 80071ba:	fa02 f303 	lsl.w	r3, r2, r3
 80071be:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6a1a      	ldr	r2, [r3, #32]
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	43db      	mvns	r3, r3
 80071c8:	401a      	ands	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a1a      	ldr	r2, [r3, #32]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f003 031f 	and.w	r3, r3, #31
 80071d8:	6879      	ldr	r1, [r7, #4]
 80071da:	fa01 f303 	lsl.w	r3, r1, r3
 80071de:	431a      	orrs	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	621a      	str	r2, [r3, #32]
}
 80071e4:	bf00      	nop
 80071e6:	371c      	adds	r7, #28
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bc80      	pop	{r7}
 80071ec:	4770      	bx	lr

080071ee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b082      	sub	sp, #8
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e03f      	b.n	8007280 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	d106      	bne.n	800721a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7fc fa0d 	bl	8003634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2224      	movs	r2, #36	; 0x24
 800721e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68da      	ldr	r2, [r3, #12]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007230:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fd04 	bl	8007c40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	691a      	ldr	r2, [r3, #16]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007246:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	695a      	ldr	r2, [r3, #20]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007256:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68da      	ldr	r2, [r3, #12]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007266:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2220      	movs	r2, #32
 800727a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b08a      	sub	sp, #40	; 0x28
 800728c:	af02      	add	r7, sp, #8
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	603b      	str	r3, [r7, #0]
 8007294:	4613      	mov	r3, r2
 8007296:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b20      	cmp	r3, #32
 80072a6:	d17c      	bne.n	80073a2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d002      	beq.n	80072b4 <HAL_UART_Transmit+0x2c>
 80072ae:	88fb      	ldrh	r3, [r7, #6]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e075      	b.n	80073a4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d101      	bne.n	80072c6 <HAL_UART_Transmit+0x3e>
 80072c2:	2302      	movs	r3, #2
 80072c4:	e06e      	b.n	80073a4 <HAL_UART_Transmit+0x11c>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2221      	movs	r2, #33	; 0x21
 80072d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80072dc:	f7fc fb78 	bl	80039d0 <HAL_GetTick>
 80072e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	88fa      	ldrh	r2, [r7, #6]
 80072e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	88fa      	ldrh	r2, [r7, #6]
 80072ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f6:	d108      	bne.n	800730a <HAL_UART_Transmit+0x82>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d104      	bne.n	800730a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007300:	2300      	movs	r3, #0
 8007302:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	61bb      	str	r3, [r7, #24]
 8007308:	e003      	b.n	8007312 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800730e:	2300      	movs	r3, #0
 8007310:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800731a:	e02a      	b.n	8007372 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2200      	movs	r2, #0
 8007324:	2180      	movs	r1, #128	; 0x80
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 fb13 	bl	8007952 <UART_WaitOnFlagUntilTimeout>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e036      	b.n	80073a4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10b      	bne.n	8007354 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	881b      	ldrh	r3, [r3, #0]
 8007340:	461a      	mov	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800734a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	3302      	adds	r3, #2
 8007350:	61bb      	str	r3, [r7, #24]
 8007352:	e007      	b.n	8007364 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	781a      	ldrb	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	3301      	adds	r3, #1
 8007362:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007368:	b29b      	uxth	r3, r3
 800736a:	3b01      	subs	r3, #1
 800736c:	b29a      	uxth	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007376:	b29b      	uxth	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1cf      	bne.n	800731c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	2200      	movs	r2, #0
 8007384:	2140      	movs	r1, #64	; 0x40
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f000 fae3 	bl	8007952 <UART_WaitOnFlagUntilTimeout>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e006      	b.n	80073a4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2220      	movs	r2, #32
 800739a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	e000      	b.n	80073a4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80073a2:	2302      	movs	r3, #2
  }
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3720      	adds	r7, #32
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	4613      	mov	r3, r2
 80073b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b20      	cmp	r3, #32
 80073c4:	d153      	bne.n	800746e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <HAL_UART_Transmit_DMA+0x26>
 80073cc:	88fb      	ldrh	r3, [r7, #6]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e04c      	b.n	8007470 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d101      	bne.n	80073e4 <HAL_UART_Transmit_DMA+0x38>
 80073e0:	2302      	movs	r3, #2
 80073e2:	e045      	b.n	8007470 <HAL_UART_Transmit_DMA+0xc4>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	88fa      	ldrh	r2, [r7, #6]
 80073f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	88fa      	ldrh	r2, [r7, #6]
 80073fc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2221      	movs	r2, #33	; 0x21
 8007408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007410:	4a19      	ldr	r2, [pc, #100]	; (8007478 <HAL_UART_Transmit_DMA+0xcc>)
 8007412:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007418:	4a18      	ldr	r2, [pc, #96]	; (800747c <HAL_UART_Transmit_DMA+0xd0>)
 800741a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007420:	4a17      	ldr	r2, [pc, #92]	; (8007480 <HAL_UART_Transmit_DMA+0xd4>)
 8007422:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007428:	2200      	movs	r2, #0
 800742a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 800742c:	f107 0308 	add.w	r3, r7, #8
 8007430:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	6819      	ldr	r1, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3304      	adds	r3, #4
 8007440:	461a      	mov	r2, r3
 8007442:	88fb      	ldrh	r3, [r7, #6]
 8007444:	f7fc fc5a 	bl	8003cfc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007450:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	695a      	ldr	r2, [r3, #20]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007468:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	e000      	b.n	8007470 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800746e:	2302      	movs	r3, #2
  }
}
 8007470:	4618      	mov	r0, r3
 8007472:	3718      	adds	r7, #24
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	080077cd 	.word	0x080077cd
 800747c:	0800781f 	.word	0x0800781f
 8007480:	080078bf 	.word	0x080078bf

08007484 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	4613      	mov	r3, r2
 8007490:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b20      	cmp	r3, #32
 800749c:	d166      	bne.n	800756c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <HAL_UART_Receive_DMA+0x26>
 80074a4:	88fb      	ldrh	r3, [r7, #6]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e05f      	b.n	800756e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d101      	bne.n	80074bc <HAL_UART_Receive_DMA+0x38>
 80074b8:	2302      	movs	r3, #2
 80074ba:	e058      	b.n	800756e <HAL_UART_Receive_DMA+0xea>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	88fa      	ldrh	r2, [r7, #6]
 80074ce:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2222      	movs	r2, #34	; 0x22
 80074da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e2:	4a25      	ldr	r2, [pc, #148]	; (8007578 <HAL_UART_Receive_DMA+0xf4>)
 80074e4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ea:	4a24      	ldr	r2, [pc, #144]	; (800757c <HAL_UART_Receive_DMA+0xf8>)
 80074ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f2:	4a23      	ldr	r2, [pc, #140]	; (8007580 <HAL_UART_Receive_DMA+0xfc>)
 80074f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074fa:	2200      	movs	r2, #0
 80074fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 80074fe:	f107 0308 	add.w	r3, r7, #8
 8007502:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3304      	adds	r3, #4
 800750e:	4619      	mov	r1, r3
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	88fb      	ldrh	r3, [r7, #6]
 8007516:	f7fc fbf1 	bl	8003cfc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800751a:	2300      	movs	r3, #0
 800751c:	613b      	str	r3, [r7, #16]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	613b      	str	r3, [r7, #16]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	613b      	str	r3, [r7, #16]
 800752e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68da      	ldr	r2, [r3, #12]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007546:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	695a      	ldr	r2, [r3, #20]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f042 0201 	orr.w	r2, r2, #1
 8007556:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	695a      	ldr	r2, [r3, #20]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007566:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	e000      	b.n	800756e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800756c:	2302      	movs	r3, #2
  }
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	0800783b 	.word	0x0800783b
 800757c:	080078a3 	.word	0x080078a3
 8007580:	080078bf 	.word	0x080078bf

08007584 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b088      	sub	sp, #32
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80075a8:	2300      	movs	r3, #0
 80075aa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	f003 030f 	and.w	r3, r3, #15
 80075b2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10d      	bne.n	80075d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	f003 0320 	and.w	r3, r3, #32
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d008      	beq.n	80075d6 <HAL_UART_IRQHandler+0x52>
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	f003 0320 	and.w	r3, r3, #32
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fab6 	bl	8007b40 <UART_Receive_IT>
      return;
 80075d4:	e0d0      	b.n	8007778 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 80b0 	beq.w	800773e <HAL_UART_IRQHandler+0x1ba>
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d105      	bne.n	80075f4 <HAL_UART_IRQHandler+0x70>
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f000 80a5 	beq.w	800773e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <HAL_UART_IRQHandler+0x90>
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007604:	2b00      	cmp	r3, #0
 8007606:	d005      	beq.n	8007614 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760c:	f043 0201 	orr.w	r2, r3, #1
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	f003 0304 	and.w	r3, r3, #4
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <HAL_UART_IRQHandler+0xb0>
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	2b00      	cmp	r3, #0
 8007626:	d005      	beq.n	8007634 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762c:	f043 0202 	orr.w	r2, r3, #2
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <HAL_UART_IRQHandler+0xd0>
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b00      	cmp	r3, #0
 8007646:	d005      	beq.n	8007654 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764c:	f043 0204 	orr.w	r2, r3, #4
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	f003 0308 	and.w	r3, r3, #8
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00f      	beq.n	800767e <HAL_UART_IRQHandler+0xfa>
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	f003 0320 	and.w	r3, r3, #32
 8007664:	2b00      	cmp	r3, #0
 8007666:	d104      	bne.n	8007672 <HAL_UART_IRQHandler+0xee>
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d005      	beq.n	800767e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007676:	f043 0208 	orr.w	r2, r3, #8
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007682:	2b00      	cmp	r3, #0
 8007684:	d077      	beq.n	8007776 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	f003 0320 	and.w	r3, r3, #32
 800768c:	2b00      	cmp	r3, #0
 800768e:	d007      	beq.n	80076a0 <HAL_UART_IRQHandler+0x11c>
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	f003 0320 	and.w	r3, r3, #32
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fa50 	bl	8007b40 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	bf14      	ite	ne
 80076ae:	2301      	movne	r3, #1
 80076b0:	2300      	moveq	r3, #0
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ba:	f003 0308 	and.w	r3, r3, #8
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d102      	bne.n	80076c8 <HAL_UART_IRQHandler+0x144>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d031      	beq.n	800772c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f9a1 	bl	8007a10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	695b      	ldr	r3, [r3, #20]
 80076d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d023      	beq.n	8007724 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	695a      	ldr	r2, [r3, #20]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076ea:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d013      	beq.n	800771c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f8:	4a21      	ldr	r2, [pc, #132]	; (8007780 <HAL_UART_IRQHandler+0x1fc>)
 80076fa:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007700:	4618      	mov	r0, r3
 8007702:	f7fc fb5b 	bl	8003dbc <HAL_DMA_Abort_IT>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d016      	beq.n	800773a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007716:	4610      	mov	r0, r2
 8007718:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800771a:	e00e      	b.n	800773a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f84c 	bl	80077ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007722:	e00a      	b.n	800773a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f848 	bl	80077ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800772a:	e006      	b.n	800773a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f844 	bl	80077ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007738:	e01d      	b.n	8007776 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800773a:	bf00      	nop
    return;
 800773c:	e01b      	b.n	8007776 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007744:	2b00      	cmp	r3, #0
 8007746:	d008      	beq.n	800775a <HAL_UART_IRQHandler+0x1d6>
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f98d 	bl	8007a72 <UART_Transmit_IT>
    return;
 8007758:	e00e      	b.n	8007778 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007760:	2b00      	cmp	r3, #0
 8007762:	d009      	beq.n	8007778 <HAL_UART_IRQHandler+0x1f4>
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776a:	2b00      	cmp	r3, #0
 800776c:	d004      	beq.n	8007778 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f9ce 	bl	8007b10 <UART_EndTransmit_IT>
    return;
 8007774:	e000      	b.n	8007778 <HAL_UART_IRQHandler+0x1f4>
    return;
 8007776:	bf00      	nop
  }
}
 8007778:	3720      	adds	r7, #32
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	08007a4b 	.word	0x08007a4b

08007784 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	bc80      	pop	{r7}
 8007794:	4770      	bx	lr

08007796 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007796:	b480      	push	{r7}
 8007798:	b083      	sub	sp, #12
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800779e:	bf00      	nop
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bc80      	pop	{r7}
 80077a6:	4770      	bx	lr

080077a8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bc80      	pop	{r7}
 80077b8:	4770      	bx	lr

080077ba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b083      	sub	sp, #12
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80077c2:	bf00      	nop
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bc80      	pop	{r7}
 80077ca:	4770      	bx	lr

080077cc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0320 	and.w	r3, r3, #32
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d113      	bne.n	8007810 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	695a      	ldr	r2, [r3, #20]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077fc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68da      	ldr	r2, [r3, #12]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800780c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800780e:	e002      	b.n	8007816 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f7f9 fb3b 	bl	8000e8c <HAL_UART_TxCpltCallback>
}
 8007816:	bf00      	nop
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b084      	sub	sp, #16
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f7ff ffa9 	bl	8007784 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007832:	bf00      	nop
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0320 	and.w	r3, r3, #32
 8007852:	2b00      	cmp	r3, #0
 8007854:	d11e      	bne.n	8007894 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68da      	ldr	r2, [r3, #12]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800786a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	695a      	ldr	r2, [r3, #20]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f022 0201 	bic.w	r2, r2, #1
 800787a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	695a      	ldr	r2, [r3, #20]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800788a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2220      	movs	r2, #32
 8007890:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f7ff ff7e 	bl	8007796 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800789a:	bf00      	nop
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f7ff ff79 	bl	80077a8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078b6:	bf00      	nop
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b084      	sub	sp, #16
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078da:	2b00      	cmp	r3, #0
 80078dc:	bf14      	ite	ne
 80078de:	2301      	movne	r3, #1
 80078e0:	2300      	moveq	r3, #0
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b21      	cmp	r3, #33	; 0x21
 80078f0:	d108      	bne.n	8007904 <UART_DMAError+0x46>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d005      	beq.n	8007904 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2200      	movs	r2, #0
 80078fc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80078fe:	68b8      	ldr	r0, [r7, #8]
 8007900:	f000 f871 	bl	80079e6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790e:	2b00      	cmp	r3, #0
 8007910:	bf14      	ite	ne
 8007912:	2301      	movne	r3, #1
 8007914:	2300      	moveq	r3, #0
 8007916:	b2db      	uxtb	r3, r3
 8007918:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b22      	cmp	r3, #34	; 0x22
 8007924:	d108      	bne.n	8007938 <UART_DMAError+0x7a>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d005      	beq.n	8007938 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	2200      	movs	r2, #0
 8007930:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007932:	68b8      	ldr	r0, [r7, #8]
 8007934:	f000 f86c 	bl	8007a10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800793c:	f043 0210 	orr.w	r2, r3, #16
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007944:	68b8      	ldr	r0, [r7, #8]
 8007946:	f7ff ff38 	bl	80077ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800794a:	bf00      	nop
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	60f8      	str	r0, [r7, #12]
 800795a:	60b9      	str	r1, [r7, #8]
 800795c:	603b      	str	r3, [r7, #0]
 800795e:	4613      	mov	r3, r2
 8007960:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007962:	e02c      	b.n	80079be <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796a:	d028      	beq.n	80079be <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d007      	beq.n	8007982 <UART_WaitOnFlagUntilTimeout+0x30>
 8007972:	f7fc f82d 	bl	80039d0 <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	429a      	cmp	r2, r3
 8007980:	d21d      	bcs.n	80079be <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68da      	ldr	r2, [r3, #12]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007990:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	695a      	ldr	r2, [r3, #20]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f022 0201 	bic.w	r2, r2, #1
 80079a0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2220      	movs	r2, #32
 80079ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e00f      	b.n	80079de <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	4013      	ands	r3, r2
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	bf0c      	ite	eq
 80079ce:	2301      	moveq	r3, #1
 80079d0:	2300      	movne	r3, #0
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	461a      	mov	r2, r3
 80079d6:	79fb      	ldrb	r3, [r7, #7]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d0c3      	beq.n	8007964 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68da      	ldr	r2, [r3, #12]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80079fc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2220      	movs	r2, #32
 8007a02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007a06:	bf00      	nop
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bc80      	pop	{r7}
 8007a0e:	4770      	bx	lr

08007a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68da      	ldr	r2, [r3, #12]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007a26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	695a      	ldr	r2, [r3, #20]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f022 0201 	bic.w	r2, r2, #1
 8007a36:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bc80      	pop	{r7}
 8007a48:	4770      	bx	lr

08007a4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b084      	sub	sp, #16
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f7ff fea8 	bl	80077ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a6a:	bf00      	nop
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b085      	sub	sp, #20
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b21      	cmp	r3, #33	; 0x21
 8007a84:	d13e      	bne.n	8007b04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a8e:	d114      	bne.n	8007aba <UART_Transmit_IT+0x48>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d110      	bne.n	8007aba <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a1b      	ldr	r3, [r3, #32]
 8007a9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007aac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	1c9a      	adds	r2, r3, #2
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	621a      	str	r2, [r3, #32]
 8007ab8:	e008      	b.n	8007acc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	1c59      	adds	r1, r3, #1
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	6211      	str	r1, [r2, #32]
 8007ac4:	781a      	ldrb	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10f      	bne.n	8007b00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68da      	ldr	r2, [r3, #12]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007aee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007afe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	e000      	b.n	8007b06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b04:	2302      	movs	r3, #2
  }
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bc80      	pop	{r7}
 8007b0e:	4770      	bx	lr

08007b10 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68da      	ldr	r2, [r3, #12]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b26:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7f9 f9ab 	bl	8000e8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b22      	cmp	r3, #34	; 0x22
 8007b52:	d170      	bne.n	8007c36 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b5c:	d117      	bne.n	8007b8e <UART_Receive_IT+0x4e>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d113      	bne.n	8007b8e <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8007b66:	2300      	movs	r3, #0
 8007b68:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b86:	1c9a      	adds	r2, r3, #2
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	629a      	str	r2, [r3, #40]	; 0x28
 8007b8c:	e026      	b.n	8007bdc <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b92:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007b94:	2300      	movs	r3, #0
 8007b96:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba0:	d007      	beq.n	8007bb2 <UART_Receive_IT+0x72>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10a      	bne.n	8007bc0 <UART_Receive_IT+0x80>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d106      	bne.n	8007bc0 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	701a      	strb	r2, [r3, #0]
 8007bbe:	e008      	b.n	8007bd2 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	3b01      	subs	r3, #1
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	4619      	mov	r1, r3
 8007bea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d120      	bne.n	8007c32 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 0220 	bic.w	r2, r2, #32
 8007bfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	695a      	ldr	r2, [r3, #20]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 0201 	bic.w	r2, r2, #1
 8007c1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2220      	movs	r2, #32
 8007c24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7ff fdb4 	bl	8007796 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	e002      	b.n	8007c38 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	e000      	b.n	8007c38 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8007c36:	2302      	movs	r3, #2
  }
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	689a      	ldr	r2, [r3, #8]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	431a      	orrs	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	695b      	ldr	r3, [r3, #20]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007c7a:	f023 030c 	bic.w	r3, r3, #12
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	6812      	ldr	r2, [r2, #0]
 8007c82:	68b9      	ldr	r1, [r7, #8]
 8007c84:	430b      	orrs	r3, r1
 8007c86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	699a      	ldr	r2, [r3, #24]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a2c      	ldr	r2, [pc, #176]	; (8007d54 <UART_SetConfig+0x114>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d103      	bne.n	8007cb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007ca8:	f7fd f914 	bl	8004ed4 <HAL_RCC_GetPCLK2Freq>
 8007cac:	60f8      	str	r0, [r7, #12]
 8007cae:	e002      	b.n	8007cb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007cb0:	f7fd f8fc 	bl	8004eac <HAL_RCC_GetPCLK1Freq>
 8007cb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	009a      	lsls	r2, r3, #2
 8007cc0:	441a      	add	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ccc:	4a22      	ldr	r2, [pc, #136]	; (8007d58 <UART_SetConfig+0x118>)
 8007cce:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd2:	095b      	lsrs	r3, r3, #5
 8007cd4:	0119      	lsls	r1, r3, #4
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	009a      	lsls	r2, r3, #2
 8007ce0:	441a      	add	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007cec:	4b1a      	ldr	r3, [pc, #104]	; (8007d58 <UART_SetConfig+0x118>)
 8007cee:	fba3 0302 	umull	r0, r3, r3, r2
 8007cf2:	095b      	lsrs	r3, r3, #5
 8007cf4:	2064      	movs	r0, #100	; 0x64
 8007cf6:	fb00 f303 	mul.w	r3, r0, r3
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	011b      	lsls	r3, r3, #4
 8007cfe:	3332      	adds	r3, #50	; 0x32
 8007d00:	4a15      	ldr	r2, [pc, #84]	; (8007d58 <UART_SetConfig+0x118>)
 8007d02:	fba2 2303 	umull	r2, r3, r2, r3
 8007d06:	095b      	lsrs	r3, r3, #5
 8007d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d0c:	4419      	add	r1, r3
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	4613      	mov	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	009a      	lsls	r2, r3, #2
 8007d18:	441a      	add	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d24:	4b0c      	ldr	r3, [pc, #48]	; (8007d58 <UART_SetConfig+0x118>)
 8007d26:	fba3 0302 	umull	r0, r3, r3, r2
 8007d2a:	095b      	lsrs	r3, r3, #5
 8007d2c:	2064      	movs	r0, #100	; 0x64
 8007d2e:	fb00 f303 	mul.w	r3, r0, r3
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	011b      	lsls	r3, r3, #4
 8007d36:	3332      	adds	r3, #50	; 0x32
 8007d38:	4a07      	ldr	r2, [pc, #28]	; (8007d58 <UART_SetConfig+0x118>)
 8007d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d3e:	095b      	lsrs	r3, r3, #5
 8007d40:	f003 020f 	and.w	r2, r3, #15
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	440a      	add	r2, r1
 8007d4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007d4c:	bf00      	nop
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	40013800 	.word	0x40013800
 8007d58:	51eb851f 	.word	0x51eb851f
 8007d5c:	00000000 	.word	0x00000000

08007d60 <_ZN10ControllerC1Ev>:
#include "Controller.hpp"



Controller::Controller() {}
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af04      	add	r7, sp, #16
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a6b      	ldr	r2, [pc, #428]	; (8007f18 <_ZN10ControllerC1Ev+0x1b8>)
 8007d6c:	639a      	str	r2, [r3, #56]	; 0x38
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a6a      	ldr	r2, [pc, #424]	; (8007f1c <_ZN10ControllerC1Ev+0x1bc>)
 8007d72:	63da      	str	r2, [r3, #60]	; 0x3c
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	22c8      	movs	r2, #200	; 0xc8
 8007d78:	641a      	str	r2, [r3, #64]	; 0x40
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7f8 fc64 	bl	800064c <__aeabi_i2f>
 8007d84:	4603      	mov	r3, r0
 8007d86:	4619      	mov	r1, r3
 8007d88:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007d8c:	f7f8 fd66 	bl	800085c <__aeabi_fdiv>
 8007d90:	4603      	mov	r3, r0
 8007d92:	461a      	mov	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	645a      	str	r2, [r3, #68]	; 0x44
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a61      	ldr	r2, [pc, #388]	; (8007f20 <_ZN10ControllerC1Ev+0x1c0>)
 8007d9c:	649a      	str	r2, [r3, #72]	; 0x48
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a60      	ldr	r2, [pc, #384]	; (8007f24 <_ZN10ControllerC1Ev+0x1c4>)
 8007da2:	64da      	str	r2, [r3, #76]	; 0x4c
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a60      	ldr	r2, [pc, #384]	; (8007f28 <_ZN10ControllerC1Ev+0x1c8>)
 8007da8:	651a      	str	r2, [r3, #80]	; 0x50
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f04f 0200 	mov.w	r2, #0
 8007db0:	655a      	str	r2, [r3, #84]	; 0x54
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a5d      	ldr	r2, [pc, #372]	; (8007f2c <_ZN10ControllerC1Ev+0x1cc>)
 8007db6:	659a      	str	r2, [r3, #88]	; 0x58
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a5d      	ldr	r2, [pc, #372]	; (8007f30 <_ZN10ControllerC1Ev+0x1d0>)
 8007dbc:	65da      	str	r2, [r3, #92]	; 0x5c
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a5c      	ldr	r2, [pc, #368]	; (8007f34 <_ZN10ControllerC1Ev+0x1d4>)
 8007dc2:	661a      	str	r2, [r3, #96]	; 0x60
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	665a      	str	r2, [r3, #100]	; 0x64
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	669a      	str	r2, [r3, #104]	; 0x68
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	66da      	str	r2, [r3, #108]	; 0x6c
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a56      	ldr	r2, [pc, #344]	; (8007f38 <_ZN10ControllerC1Ev+0x1d8>)
 8007de0:	671a      	str	r2, [r3, #112]	; 0x70
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a55      	ldr	r2, [pc, #340]	; (8007f3c <_ZN10ControllerC1Ev+0x1dc>)
 8007de6:	675a      	str	r2, [r3, #116]	; 0x74
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a55      	ldr	r2, [pc, #340]	; (8007f40 <_ZN10ControllerC1Ev+0x1e0>)
 8007dec:	679a      	str	r2, [r3, #120]	; 0x78
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a54      	ldr	r2, [pc, #336]	; (8007f44 <_ZN10ControllerC1Ev+0x1e4>)
 8007df2:	67da      	str	r2, [r3, #124]	; 0x7c
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a54      	ldr	r2, [pc, #336]	; (8007f48 <_ZN10ControllerC1Ev+0x1e8>)
 8007df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a53      	ldr	r2, [pc, #332]	; (8007f4c <_ZN10ControllerC1Ev+0x1ec>)
 8007e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a52      	ldr	r2, [pc, #328]	; (8007f50 <_ZN10ControllerC1Ev+0x1f0>)
 8007e08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f04f 0200 	mov.w	r2, #0
 8007e12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f04f 0200 	mov.w	r2, #0
 8007e1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8007e26:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f04f 0200 	mov.w	r2, #0
 8007e30:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f04f 0200 	mov.w	r2, #0
 8007e3a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8007e44:	a330      	add	r3, pc, #192	; (adr r3, 8007f08 <_ZN10ControllerC1Ev+0x1a8>)
 8007e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e4e:	a32e      	add	r3, pc, #184	; (adr r3, 8007f08 <_ZN10ControllerC1Ev+0x1a8>)
 8007e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e54:	e9cd 2300 	strd	r2, r3, [sp]
 8007e58:	a32d      	add	r3, pc, #180	; (adr r3, 8007f10 <_ZN10ControllerC1Ev+0x1b0>)
 8007e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5e:	4608      	mov	r0, r1
 8007e60:	f000 fa9c 	bl	800839c <_ZN3lpfC1Eddd>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f103 01c8 	add.w	r1, r3, #200	; 0xc8
 8007e6a:	a327      	add	r3, pc, #156	; (adr r3, 8007f08 <_ZN10ControllerC1Ev+0x1a8>)
 8007e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e74:	a324      	add	r3, pc, #144	; (adr r3, 8007f08 <_ZN10ControllerC1Ev+0x1a8>)
 8007e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7a:	e9cd 2300 	strd	r2, r3, [sp]
 8007e7e:	a324      	add	r3, pc, #144	; (adr r3, 8007f10 <_ZN10ControllerC1Ev+0x1b0>)
 8007e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e84:	4608      	mov	r0, r1
 8007e86:	f000 fa89 	bl	800839c <_ZN3lpfC1Eddd>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8007e90:	a31d      	add	r3, pc, #116	; (adr r3, 8007f08 <_ZN10ControllerC1Ev+0x1a8>)
 8007e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e9a:	a31b      	add	r3, pc, #108	; (adr r3, 8007f08 <_ZN10ControllerC1Ev+0x1a8>)
 8007e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea0:	e9cd 2300 	strd	r2, r3, [sp]
 8007ea4:	a31a      	add	r3, pc, #104	; (adr r3, 8007f10 <_ZN10ControllerC1Ev+0x1b0>)
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	4608      	mov	r0, r1
 8007eac:	f000 fa76 	bl	800839c <_ZN3lpfC1Eddd>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 f9ea 	bl	8008290 <_ZN3PIDC1Ev>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 f9e4 	bl	8008290 <_ZN3PIDC1Ev>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 f9de 	bl	8008290 <_ZN3PIDC1Ev>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eda:	4618      	mov	r0, r3
 8007edc:	f000 f9d8 	bl	8008290 <_ZN3PIDC1Ev>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 f9d2 	bl	8008290 <_ZN3PIDC1Ev>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 f9cc 	bl	8008290 <_ZN3PIDC1Ev>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4618      	mov	r0, r3
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	f3af 8000 	nop.w
 8007f08:	fc3b4f61 	.word	0xfc3b4f61
 8007f0c:	3fa35935 	.word	0x3fa35935
 8007f10:	4f0d844d 	.word	0x4f0d844d
 8007f14:	3fed94af 	.word	0x3fed94af
 8007f18:	44c1c000 	.word	0x44c1c000
 8007f1c:	42654ca3 	.word	0x42654ca3
 8007f20:	3fb33333 	.word	0x3fb33333
 8007f24:	411cf5c3 	.word	0x411cf5c3
 8007f28:	41f9d70a 	.word	0x41f9d70a
 8007f2c:	3e6147ae 	.word	0x3e6147ae
 8007f30:	3d4ccccd 	.word	0x3d4ccccd
 8007f34:	3cf5c28f 	.word	0x3cf5c28f
 8007f38:	40a00000 	.word	0x40a00000
 8007f3c:	41100000 	.word	0x41100000
 8007f40:	41400000 	.word	0x41400000
 8007f44:	40400000 	.word	0x40400000
 8007f48:	41200000 	.word	0x41200000
 8007f4c:	41700000 	.word	0x41700000
 8007f50:	c0800000 	.word	0xc0800000

08007f54 <_ZN10ControllerD1Ev>:
    controller_output_pwm[3] = pwm4;

  //  return controller_output;
}

Controller::~Controller() {}
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 fa0c 	bl	8008380 <_ZN3PIDD1Ev>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 fa06 	bl	8008380 <_ZN3PIDD1Ev>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 fa00 	bl	8008380 <_ZN3PIDD1Ev>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 f9fa 	bl	8008380 <_ZN3PIDD1Ev>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 f9f4 	bl	8008380 <_ZN3PIDD1Ev>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 f9ee 	bl	8008380 <_ZN3PIDD1Ev>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	33f0      	adds	r3, #240	; 0xf0
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f000 fa12 	bl	80083d2 <_ZN3lpfD1Ev>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	33c8      	adds	r3, #200	; 0xc8
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fa0d 	bl	80083d2 <_ZN3lpfD1Ev>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	33a0      	adds	r3, #160	; 0xa0
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 fa08 	bl	80083d2 <_ZN3lpfD1Ev>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	0000      	movs	r0, r0
	...

08007fd0 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi()  {
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af04      	add	r7, sp, #16
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f04f 0200 	mov.w	r2, #0
 8007fde:	611a      	str	r2, [r3, #16]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a89      	ldr	r2, [pc, #548]	; (8008208 <_ZN15Kalman_FiltresiC1Ev+0x238>)
 8007fe4:	615a      	str	r2, [r3, #20]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f04f 0200 	mov.w	r2, #0
 8007fec:	631a      	str	r2, [r3, #48]	; 0x30
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f04f 0200 	mov.w	r2, #0
 8007ff4:	635a      	str	r2, [r3, #52]	; 0x34
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f04f 0200 	mov.w	r2, #0
 8007ffc:	639a      	str	r2, [r3, #56]	; 0x38
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a82      	ldr	r2, [pc, #520]	; (800820c <_ZN15Kalman_FiltresiC1Ev+0x23c>)
 8008002:	63da      	str	r2, [r3, #60]	; 0x3c
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a82      	ldr	r2, [pc, #520]	; (8008210 <_ZN15Kalman_FiltresiC1Ev+0x240>)
 8008008:	655a      	str	r2, [r3, #84]	; 0x54
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a80      	ldr	r2, [pc, #512]	; (8008210 <_ZN15Kalman_FiltresiC1Ev+0x240>)
 800800e:	659a      	str	r2, [r3, #88]	; 0x58
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8008016:	65da      	str	r2, [r3, #92]	; 0x5c
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f04f 0200 	mov.w	r2, #0
 800801e:	661a      	str	r2, [r3, #96]	; 0x60
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f04f 0200 	mov.w	r2, #0
 8008026:	665a      	str	r2, [r3, #100]	; 0x64
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f04f 0200 	mov.w	r2, #0
 800802e:	669a      	str	r2, [r3, #104]	; 0x68
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a76      	ldr	r2, [pc, #472]	; (800820c <_ZN15Kalman_FiltresiC1Ev+0x23c>)
 8008034:	66da      	str	r2, [r3, #108]	; 0x6c
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a76      	ldr	r2, [pc, #472]	; (8008214 <_ZN15Kalman_FiltresiC1Ev+0x244>)
 800803a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f04f 0200 	mov.w	r2, #0
 8008044:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f04f 0200 	mov.w	r2, #0
 800804e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a6d      	ldr	r2, [pc, #436]	; (800820c <_ZN15Kalman_FiltresiC1Ev+0x23c>)
 8008056:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a6e      	ldr	r2, [pc, #440]	; (8008218 <_ZN15Kalman_FiltresiC1Ev+0x248>)
 800805e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a6d      	ldr	r2, [pc, #436]	; (800821c <_ZN15Kalman_FiltresiC1Ev+0x24c>)
 8008066:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a6b      	ldr	r2, [pc, #428]	; (800821c <_ZN15Kalman_FiltresiC1Ev+0x24c>)
 800806e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a6a      	ldr	r2, [pc, #424]	; (8008220 <_ZN15Kalman_FiltresiC1Ev+0x250>)
 8008076:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a69      	ldr	r2, [pc, #420]	; (8008224 <_ZN15Kalman_FiltresiC1Ev+0x254>)
 800807e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008088:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a66      	ldr	r2, [pc, #408]	; (8008228 <_ZN15Kalman_FiltresiC1Ev+0x258>)
 8008090:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a65      	ldr	r2, [pc, #404]	; (800822c <_ZN15Kalman_FiltresiC1Ev+0x25c>)
 8008098:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80080a2:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a61      	ldr	r2, [pc, #388]	; (8008230 <_ZN15Kalman_FiltresiC1Ev+0x260>)
 80080aa:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	22c8      	movs	r2, #200	; 0xc8
 80080b2:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80080bc:	4618      	mov	r0, r3
 80080be:	f7f8 fac5 	bl	800064c <__aeabi_i2f>
 80080c2:	4603      	mov	r3, r0
 80080c4:	4619      	mov	r1, r3
 80080c6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80080ca:	f7f8 fbc7 	bl	800085c <__aeabi_fdiv>
 80080ce:	4603      	mov	r3, r0
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7f8 f9a9 	bl	8000428 <__aeabi_f2d>
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	6879      	ldr	r1, [r7, #4]
 80080dc:	e9c1 2360 	strd	r2, r3, [r1, #384]	; 0x180
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a54      	ldr	r2, [pc, #336]	; (8008234 <_ZN15Kalman_FiltresiC1Ev+0x264>)
 80080e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a53      	ldr	r2, [pc, #332]	; (8008238 <_ZN15Kalman_FiltresiC1Ev+0x268>)
 80080ec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a52      	ldr	r2, [pc, #328]	; (800823c <_ZN15Kalman_FiltresiC1Ev+0x26c>)
 80080f4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a51      	ldr	r2, [pc, #324]	; (8008240 <_ZN15Kalman_FiltresiC1Ev+0x270>)
 80080fc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a4f      	ldr	r2, [pc, #316]	; (8008240 <_ZN15Kalman_FiltresiC1Ev+0x270>)
 8008104:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a4e      	ldr	r2, [pc, #312]	; (8008244 <_ZN15Kalman_FiltresiC1Ev+0x274>)
 800810c:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8008116:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a4a      	ldr	r2, [pc, #296]	; (8008248 <_ZN15Kalman_FiltresiC1Ev+0x278>)
 800811e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008128:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a47      	ldr	r2, [pc, #284]	; (800824c <_ZN15Kalman_FiltresiC1Ev+0x27c>)
 8008130:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a46      	ldr	r2, [pc, #280]	; (8008250 <_ZN15Kalman_FiltresiC1Ev+0x280>)
 8008138:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a34      	ldr	r2, [pc, #208]	; (8008210 <_ZN15Kalman_FiltresiC1Ev+0x240>)
 8008140:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800814a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008154:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f503 7134 	add.w	r1, r3, #720	; 0x2d0
 800815e:	a31e      	add	r3, pc, #120	; (adr r3, 80081d8 <_ZN15Kalman_FiltresiC1Ev+0x208>)
 8008160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008164:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008168:	a31b      	add	r3, pc, #108	; (adr r3, 80081d8 <_ZN15Kalman_FiltresiC1Ev+0x208>)
 800816a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816e:	e9cd 2300 	strd	r2, r3, [sp]
 8008172:	a31b      	add	r3, pc, #108	; (adr r3, 80081e0 <_ZN15Kalman_FiltresiC1Ev+0x210>)
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	4608      	mov	r0, r1
 800817a:	f000 f90f 	bl	800839c <_ZN3lpfC1Eddd>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f503 713e 	add.w	r1, r3, #760	; 0x2f8
 8008184:	a318      	add	r3, pc, #96	; (adr r3, 80081e8 <_ZN15Kalman_FiltresiC1Ev+0x218>)
 8008186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800818e:	a316      	add	r3, pc, #88	; (adr r3, 80081e8 <_ZN15Kalman_FiltresiC1Ev+0x218>)
 8008190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008194:	e9cd 2300 	strd	r2, r3, [sp]
 8008198:	a315      	add	r3, pc, #84	; (adr r3, 80081f0 <_ZN15Kalman_FiltresiC1Ev+0x220>)
 800819a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819e:	4608      	mov	r0, r1
 80081a0:	f000 f8fc 	bl	800839c <_ZN3lpfC1Eddd>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f503 7148 	add.w	r1, r3, #800	; 0x320
 80081aa:	a313      	add	r3, pc, #76	; (adr r3, 80081f8 <_ZN15Kalman_FiltresiC1Ev+0x228>)
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081b4:	a310      	add	r3, pc, #64	; (adr r3, 80081f8 <_ZN15Kalman_FiltresiC1Ev+0x228>)
 80081b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ba:	e9cd 2300 	strd	r2, r3, [sp]
 80081be:	a310      	add	r3, pc, #64	; (adr r3, 8008200 <_ZN15Kalman_FiltresiC1Ev+0x230>)
 80081c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c4:	4608      	mov	r0, r1
 80081c6:	f000 f8e9 	bl	800839c <_ZN3lpfC1Eddd>

}
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	f3af 8000 	nop.w
 80081d8:	de7ea5f8 	.word	0xde7ea5f8
 80081dc:	3fb2a454 	.word	0x3fb2a454
 80081e0:	ab367a10 	.word	0xab367a10
 80081e4:	3feb573e 	.word	0x3feb573e
 80081e8:	fc3b4f61 	.word	0xfc3b4f61
 80081ec:	3fa35935 	.word	0x3fa35935
 80081f0:	4f0d844d 	.word	0x4f0d844d
 80081f4:	3fed94af 	.word	0x3fed94af
 80081f8:	e5c91d15 	.word	0xe5c91d15
 80081fc:	3feda43f 	.word	0x3feda43f
 8008200:	cb923a2a 	.word	0xcb923a2a
 8008204:	bfeb487f 	.word	0xbfeb487f
 8008208:	3ca3d70a 	.word	0x3ca3d70a
 800820c:	3c23d70a 	.word	0x3c23d70a
 8008210:	322bcc77 	.word	0x322bcc77
 8008214:	47c35000 	.word	0x47c35000
 8008218:	461c4000 	.word	0x461c4000
 800821c:	4e6e6b28 	.word	0x4e6e6b28
 8008220:	41200000 	.word	0x41200000
 8008224:	4b189680 	.word	0x4b189680
 8008228:	40a00000 	.word	0x40a00000
 800822c:	42480000 	.word	0x42480000
 8008230:	42654ca3 	.word	0x42654ca3
 8008234:	bd824c8c 	.word	0xbd824c8c
 8008238:	3c8d8029 	.word	0x3c8d8029
 800823c:	3c16a355 	.word	0x3c16a355
 8008240:	40400000 	.word	0x40400000
 8008244:	41a00000 	.word	0x41a00000
 8008248:	3cdd2f1b 	.word	0x3cdd2f1b
 800824c:	48f42400 	.word	0x48f42400
 8008250:	3727c5ac 	.word	0x3727c5ac

08008254 <_ZN15Kalman_FiltresiD1Ev>:
    state.bias[1] = pitch_bias;
    state.bias[2] = yaw_bias;

}

Kalman_Filtresi::~Kalman_Filtresi() {}
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8008262:	4618      	mov	r0, r3
 8008264:	f000 f8b5 	bl	80083d2 <_ZN3lpfD1Ev>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 800826e:	4618      	mov	r0, r3
 8008270:	f000 f8af 	bl	80083d2 <_ZN3lpfD1Ev>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800827a:	4618      	mov	r0, r3
 800827c:	f000 f8a9 	bl	80083d2 <_ZN3lpfD1Ev>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	0000      	movs	r0, r0
 800828c:	0000      	movs	r0, r0
	...

08008290 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID() {};
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af04      	add	r7, sp, #16
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a27      	ldr	r2, [pc, #156]	; (8008338 <_ZN3PIDC1Ev+0xa8>)
 800829c:	609a      	str	r2, [r3, #8]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a26      	ldr	r2, [pc, #152]	; (800833c <_ZN3PIDC1Ev+0xac>)
 80082a2:	60da      	str	r2, [r3, #12]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a26      	ldr	r2, [pc, #152]	; (8008340 <_ZN3PIDC1Ev+0xb0>)
 80082a8:	611a      	str	r2, [r3, #16]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	22c8      	movs	r2, #200	; 0xc8
 80082ae:	615a      	str	r2, [r3, #20]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	695b      	ldr	r3, [r3, #20]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7f8 f9c9 	bl	800064c <__aeabi_i2f>
 80082ba:	4603      	mov	r3, r0
 80082bc:	4619      	mov	r1, r3
 80082be:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80082c2:	f7f8 facb 	bl	800085c <__aeabi_fdiv>
 80082c6:	4603      	mov	r3, r0
 80082c8:	461a      	mov	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	619a      	str	r2, [r3, #24]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a1c      	ldr	r2, [pc, #112]	; (8008344 <_ZN3PIDC1Ev+0xb4>)
 80082d2:	61da      	str	r2, [r3, #28]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	69da      	ldr	r2, [r3, #28]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	4619      	mov	r1, r3
 80082de:	4610      	mov	r0, r2
 80082e0:	f7f8 fa08 	bl	80006f4 <__aeabi_fmul>
 80082e4:	4603      	mov	r3, r0
 80082e6:	461a      	mov	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	621a      	str	r2, [r3, #32]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80082f2:	a30d      	add	r3, pc, #52	; (adr r3, 8008328 <_ZN3PIDC1Ev+0x98>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082fc:	a30a      	add	r3, pc, #40	; (adr r3, 8008328 <_ZN3PIDC1Ev+0x98>)
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	e9cd 2300 	strd	r2, r3, [sp]
 8008306:	a30a      	add	r3, pc, #40	; (adr r3, 8008330 <_ZN3PIDC1Ev+0xa0>)
 8008308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830c:	4608      	mov	r0, r1
 800830e:	f000 f845 	bl	800839c <_ZN3lpfC1Eddd>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008318:	669a      	str	r2, [r3, #104]	; 0x68
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4618      	mov	r0, r3
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	f3af 8000 	nop.w
 8008328:	de7ea5f8 	.word	0xde7ea5f8
 800832c:	3fb2a454 	.word	0x3fb2a454
 8008330:	ab367a10 	.word	0xab367a10
 8008334:	3feb573e 	.word	0x3feb573e
 8008338:	3d4ccccd 	.word	0x3d4ccccd
 800833c:	42f00000 	.word	0x42f00000
 8008340:	c2f00000 	.word	0xc2f00000
 8008344:	3e99999a 	.word	0x3e99999a

08008348 <_ZN3PID5resetEv>:
	pd_roll_sat_buf = pd;
    return pd;

}

void PID::reset() {
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
	ie_roll = 0;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f04f 0200 	mov.w	r2, #0
 8008356:	67da      	str	r2, [r3, #124]	; 0x7c
	ie_roll_rate = 0;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f04f 0200 	mov.w	r2, #0
 800835e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	de_filt = 0;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f04f 0200 	mov.w	r2, #0
 8008368:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	de_int = 0;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f04f 0200 	mov.w	r2, #0
 8008372:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	bc80      	pop	{r7}
 800837e:	4770      	bx	lr

08008380 <_ZN3PIDD1Ev>:

	unsigned int thr = (wh - 0) * (2000 - 1000) / (max_rpm - 0) + 1000;
	return thr;
}

PID::~PID() {};
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3338      	adds	r3, #56	; 0x38
 800838c:	4618      	mov	r0, r3
 800838e:	f000 f820 	bl	80083d2 <_ZN3lpfD1Ev>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4618      	mov	r0, r3
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <_ZN3lpfC1Eddd>:
#include "lpf.hpp"

lpf::lpf(double a, double b, double c)  {
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	e9c7 2300 	strd	r2, r3, [r7]
	a_f = a;
 80083a8:	68f9      	ldr	r1, [r7, #12]
 80083aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ae:	e9c1 2302 	strd	r2, r3, [r1, #8]
	b_f = b;
 80083b2:	68f9      	ldr	r1, [r7, #12]
 80083b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083b8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	c_f = c;
 80083bc:	68f9      	ldr	r1, [r7, #12]
 80083be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083c2:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	4618      	mov	r0, r3
 80083ca:	3714      	adds	r7, #20
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bc80      	pop	{r7}
 80083d0:	4770      	bx	lr

080083d2 <_ZN3lpfD1Ev>:
	y_ = y;
	return y;

}

lpf::~lpf() {}
 80083d2:	b480      	push	{r7}
 80083d4:	b083      	sub	sp, #12
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4618      	mov	r0, r3
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bc80      	pop	{r7}
 80083e4:	4770      	bx	lr
	...

080083e8 <__errno>:
 80083e8:	4b01      	ldr	r3, [pc, #4]	; (80083f0 <__errno+0x8>)
 80083ea:	6818      	ldr	r0, [r3, #0]
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	20000014 	.word	0x20000014

080083f4 <__libc_init_array>:
 80083f4:	b570      	push	{r4, r5, r6, lr}
 80083f6:	2600      	movs	r6, #0
 80083f8:	4d0c      	ldr	r5, [pc, #48]	; (800842c <__libc_init_array+0x38>)
 80083fa:	4c0d      	ldr	r4, [pc, #52]	; (8008430 <__libc_init_array+0x3c>)
 80083fc:	1b64      	subs	r4, r4, r5
 80083fe:	10a4      	asrs	r4, r4, #2
 8008400:	42a6      	cmp	r6, r4
 8008402:	d109      	bne.n	8008418 <__libc_init_array+0x24>
 8008404:	f000 fc5c 	bl	8008cc0 <_init>
 8008408:	2600      	movs	r6, #0
 800840a:	4d0a      	ldr	r5, [pc, #40]	; (8008434 <__libc_init_array+0x40>)
 800840c:	4c0a      	ldr	r4, [pc, #40]	; (8008438 <__libc_init_array+0x44>)
 800840e:	1b64      	subs	r4, r4, r5
 8008410:	10a4      	asrs	r4, r4, #2
 8008412:	42a6      	cmp	r6, r4
 8008414:	d105      	bne.n	8008422 <__libc_init_array+0x2e>
 8008416:	bd70      	pop	{r4, r5, r6, pc}
 8008418:	f855 3b04 	ldr.w	r3, [r5], #4
 800841c:	4798      	blx	r3
 800841e:	3601      	adds	r6, #1
 8008420:	e7ee      	b.n	8008400 <__libc_init_array+0xc>
 8008422:	f855 3b04 	ldr.w	r3, [r5], #4
 8008426:	4798      	blx	r3
 8008428:	3601      	adds	r6, #1
 800842a:	e7f2      	b.n	8008412 <__libc_init_array+0x1e>
 800842c:	0800933c 	.word	0x0800933c
 8008430:	0800933c 	.word	0x0800933c
 8008434:	0800933c 	.word	0x0800933c
 8008438:	08009344 	.word	0x08009344

0800843c <memcpy>:
 800843c:	440a      	add	r2, r1
 800843e:	4291      	cmp	r1, r2
 8008440:	f100 33ff 	add.w	r3, r0, #4294967295
 8008444:	d100      	bne.n	8008448 <memcpy+0xc>
 8008446:	4770      	bx	lr
 8008448:	b510      	push	{r4, lr}
 800844a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800844e:	4291      	cmp	r1, r2
 8008450:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008454:	d1f9      	bne.n	800844a <memcpy+0xe>
 8008456:	bd10      	pop	{r4, pc}

08008458 <memset>:
 8008458:	4603      	mov	r3, r0
 800845a:	4402      	add	r2, r0
 800845c:	4293      	cmp	r3, r2
 800845e:	d100      	bne.n	8008462 <memset+0xa>
 8008460:	4770      	bx	lr
 8008462:	f803 1b01 	strb.w	r1, [r3], #1
 8008466:	e7f9      	b.n	800845c <memset+0x4>

08008468 <_free_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	4605      	mov	r5, r0
 800846c:	2900      	cmp	r1, #0
 800846e:	d043      	beq.n	80084f8 <_free_r+0x90>
 8008470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008474:	1f0c      	subs	r4, r1, #4
 8008476:	2b00      	cmp	r3, #0
 8008478:	bfb8      	it	lt
 800847a:	18e4      	addlt	r4, r4, r3
 800847c:	f000 f8cc 	bl	8008618 <__malloc_lock>
 8008480:	4a1e      	ldr	r2, [pc, #120]	; (80084fc <_free_r+0x94>)
 8008482:	6813      	ldr	r3, [r2, #0]
 8008484:	4610      	mov	r0, r2
 8008486:	b933      	cbnz	r3, 8008496 <_free_r+0x2e>
 8008488:	6063      	str	r3, [r4, #4]
 800848a:	6014      	str	r4, [r2, #0]
 800848c:	4628      	mov	r0, r5
 800848e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008492:	f000 b8c7 	b.w	8008624 <__malloc_unlock>
 8008496:	42a3      	cmp	r3, r4
 8008498:	d90a      	bls.n	80084b0 <_free_r+0x48>
 800849a:	6821      	ldr	r1, [r4, #0]
 800849c:	1862      	adds	r2, r4, r1
 800849e:	4293      	cmp	r3, r2
 80084a0:	bf01      	itttt	eq
 80084a2:	681a      	ldreq	r2, [r3, #0]
 80084a4:	685b      	ldreq	r3, [r3, #4]
 80084a6:	1852      	addeq	r2, r2, r1
 80084a8:	6022      	streq	r2, [r4, #0]
 80084aa:	6063      	str	r3, [r4, #4]
 80084ac:	6004      	str	r4, [r0, #0]
 80084ae:	e7ed      	b.n	800848c <_free_r+0x24>
 80084b0:	461a      	mov	r2, r3
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	b10b      	cbz	r3, 80084ba <_free_r+0x52>
 80084b6:	42a3      	cmp	r3, r4
 80084b8:	d9fa      	bls.n	80084b0 <_free_r+0x48>
 80084ba:	6811      	ldr	r1, [r2, #0]
 80084bc:	1850      	adds	r0, r2, r1
 80084be:	42a0      	cmp	r0, r4
 80084c0:	d10b      	bne.n	80084da <_free_r+0x72>
 80084c2:	6820      	ldr	r0, [r4, #0]
 80084c4:	4401      	add	r1, r0
 80084c6:	1850      	adds	r0, r2, r1
 80084c8:	4283      	cmp	r3, r0
 80084ca:	6011      	str	r1, [r2, #0]
 80084cc:	d1de      	bne.n	800848c <_free_r+0x24>
 80084ce:	6818      	ldr	r0, [r3, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	4401      	add	r1, r0
 80084d4:	6011      	str	r1, [r2, #0]
 80084d6:	6053      	str	r3, [r2, #4]
 80084d8:	e7d8      	b.n	800848c <_free_r+0x24>
 80084da:	d902      	bls.n	80084e2 <_free_r+0x7a>
 80084dc:	230c      	movs	r3, #12
 80084de:	602b      	str	r3, [r5, #0]
 80084e0:	e7d4      	b.n	800848c <_free_r+0x24>
 80084e2:	6820      	ldr	r0, [r4, #0]
 80084e4:	1821      	adds	r1, r4, r0
 80084e6:	428b      	cmp	r3, r1
 80084e8:	bf01      	itttt	eq
 80084ea:	6819      	ldreq	r1, [r3, #0]
 80084ec:	685b      	ldreq	r3, [r3, #4]
 80084ee:	1809      	addeq	r1, r1, r0
 80084f0:	6021      	streq	r1, [r4, #0]
 80084f2:	6063      	str	r3, [r4, #4]
 80084f4:	6054      	str	r4, [r2, #4]
 80084f6:	e7c9      	b.n	800848c <_free_r+0x24>
 80084f8:	bd38      	pop	{r3, r4, r5, pc}
 80084fa:	bf00      	nop
 80084fc:	20001628 	.word	0x20001628

08008500 <_malloc_r>:
 8008500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008502:	1ccd      	adds	r5, r1, #3
 8008504:	f025 0503 	bic.w	r5, r5, #3
 8008508:	3508      	adds	r5, #8
 800850a:	2d0c      	cmp	r5, #12
 800850c:	bf38      	it	cc
 800850e:	250c      	movcc	r5, #12
 8008510:	2d00      	cmp	r5, #0
 8008512:	4606      	mov	r6, r0
 8008514:	db01      	blt.n	800851a <_malloc_r+0x1a>
 8008516:	42a9      	cmp	r1, r5
 8008518:	d903      	bls.n	8008522 <_malloc_r+0x22>
 800851a:	230c      	movs	r3, #12
 800851c:	6033      	str	r3, [r6, #0]
 800851e:	2000      	movs	r0, #0
 8008520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008522:	f000 f879 	bl	8008618 <__malloc_lock>
 8008526:	4921      	ldr	r1, [pc, #132]	; (80085ac <_malloc_r+0xac>)
 8008528:	680a      	ldr	r2, [r1, #0]
 800852a:	4614      	mov	r4, r2
 800852c:	b99c      	cbnz	r4, 8008556 <_malloc_r+0x56>
 800852e:	4f20      	ldr	r7, [pc, #128]	; (80085b0 <_malloc_r+0xb0>)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	b923      	cbnz	r3, 800853e <_malloc_r+0x3e>
 8008534:	4621      	mov	r1, r4
 8008536:	4630      	mov	r0, r6
 8008538:	f000 f83c 	bl	80085b4 <_sbrk_r>
 800853c:	6038      	str	r0, [r7, #0]
 800853e:	4629      	mov	r1, r5
 8008540:	4630      	mov	r0, r6
 8008542:	f000 f837 	bl	80085b4 <_sbrk_r>
 8008546:	1c43      	adds	r3, r0, #1
 8008548:	d123      	bne.n	8008592 <_malloc_r+0x92>
 800854a:	230c      	movs	r3, #12
 800854c:	4630      	mov	r0, r6
 800854e:	6033      	str	r3, [r6, #0]
 8008550:	f000 f868 	bl	8008624 <__malloc_unlock>
 8008554:	e7e3      	b.n	800851e <_malloc_r+0x1e>
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	1b5b      	subs	r3, r3, r5
 800855a:	d417      	bmi.n	800858c <_malloc_r+0x8c>
 800855c:	2b0b      	cmp	r3, #11
 800855e:	d903      	bls.n	8008568 <_malloc_r+0x68>
 8008560:	6023      	str	r3, [r4, #0]
 8008562:	441c      	add	r4, r3
 8008564:	6025      	str	r5, [r4, #0]
 8008566:	e004      	b.n	8008572 <_malloc_r+0x72>
 8008568:	6863      	ldr	r3, [r4, #4]
 800856a:	42a2      	cmp	r2, r4
 800856c:	bf0c      	ite	eq
 800856e:	600b      	streq	r3, [r1, #0]
 8008570:	6053      	strne	r3, [r2, #4]
 8008572:	4630      	mov	r0, r6
 8008574:	f000 f856 	bl	8008624 <__malloc_unlock>
 8008578:	f104 000b 	add.w	r0, r4, #11
 800857c:	1d23      	adds	r3, r4, #4
 800857e:	f020 0007 	bic.w	r0, r0, #7
 8008582:	1ac2      	subs	r2, r0, r3
 8008584:	d0cc      	beq.n	8008520 <_malloc_r+0x20>
 8008586:	1a1b      	subs	r3, r3, r0
 8008588:	50a3      	str	r3, [r4, r2]
 800858a:	e7c9      	b.n	8008520 <_malloc_r+0x20>
 800858c:	4622      	mov	r2, r4
 800858e:	6864      	ldr	r4, [r4, #4]
 8008590:	e7cc      	b.n	800852c <_malloc_r+0x2c>
 8008592:	1cc4      	adds	r4, r0, #3
 8008594:	f024 0403 	bic.w	r4, r4, #3
 8008598:	42a0      	cmp	r0, r4
 800859a:	d0e3      	beq.n	8008564 <_malloc_r+0x64>
 800859c:	1a21      	subs	r1, r4, r0
 800859e:	4630      	mov	r0, r6
 80085a0:	f000 f808 	bl	80085b4 <_sbrk_r>
 80085a4:	3001      	adds	r0, #1
 80085a6:	d1dd      	bne.n	8008564 <_malloc_r+0x64>
 80085a8:	e7cf      	b.n	800854a <_malloc_r+0x4a>
 80085aa:	bf00      	nop
 80085ac:	20001628 	.word	0x20001628
 80085b0:	2000162c 	.word	0x2000162c

080085b4 <_sbrk_r>:
 80085b4:	b538      	push	{r3, r4, r5, lr}
 80085b6:	2300      	movs	r3, #0
 80085b8:	4d05      	ldr	r5, [pc, #20]	; (80085d0 <_sbrk_r+0x1c>)
 80085ba:	4604      	mov	r4, r0
 80085bc:	4608      	mov	r0, r1
 80085be:	602b      	str	r3, [r5, #0]
 80085c0:	f7fa fcec 	bl	8002f9c <_sbrk>
 80085c4:	1c43      	adds	r3, r0, #1
 80085c6:	d102      	bne.n	80085ce <_sbrk_r+0x1a>
 80085c8:	682b      	ldr	r3, [r5, #0]
 80085ca:	b103      	cbz	r3, 80085ce <_sbrk_r+0x1a>
 80085cc:	6023      	str	r3, [r4, #0]
 80085ce:	bd38      	pop	{r3, r4, r5, pc}
 80085d0:	200019a4 	.word	0x200019a4

080085d4 <siprintf>:
 80085d4:	b40e      	push	{r1, r2, r3}
 80085d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085da:	b500      	push	{lr}
 80085dc:	b09c      	sub	sp, #112	; 0x70
 80085de:	ab1d      	add	r3, sp, #116	; 0x74
 80085e0:	9002      	str	r0, [sp, #8]
 80085e2:	9006      	str	r0, [sp, #24]
 80085e4:	9107      	str	r1, [sp, #28]
 80085e6:	9104      	str	r1, [sp, #16]
 80085e8:	4808      	ldr	r0, [pc, #32]	; (800860c <siprintf+0x38>)
 80085ea:	4909      	ldr	r1, [pc, #36]	; (8008610 <siprintf+0x3c>)
 80085ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80085f0:	9105      	str	r1, [sp, #20]
 80085f2:	6800      	ldr	r0, [r0, #0]
 80085f4:	a902      	add	r1, sp, #8
 80085f6:	9301      	str	r3, [sp, #4]
 80085f8:	f000 f876 	bl	80086e8 <_svfiprintf_r>
 80085fc:	2200      	movs	r2, #0
 80085fe:	9b02      	ldr	r3, [sp, #8]
 8008600:	701a      	strb	r2, [r3, #0]
 8008602:	b01c      	add	sp, #112	; 0x70
 8008604:	f85d eb04 	ldr.w	lr, [sp], #4
 8008608:	b003      	add	sp, #12
 800860a:	4770      	bx	lr
 800860c:	20000014 	.word	0x20000014
 8008610:	ffff0208 	.word	0xffff0208

08008614 <__retarget_lock_acquire_recursive>:
 8008614:	4770      	bx	lr

08008616 <__retarget_lock_release_recursive>:
 8008616:	4770      	bx	lr

08008618 <__malloc_lock>:
 8008618:	4801      	ldr	r0, [pc, #4]	; (8008620 <__malloc_lock+0x8>)
 800861a:	f7ff bffb 	b.w	8008614 <__retarget_lock_acquire_recursive>
 800861e:	bf00      	nop
 8008620:	2000199c 	.word	0x2000199c

08008624 <__malloc_unlock>:
 8008624:	4801      	ldr	r0, [pc, #4]	; (800862c <__malloc_unlock+0x8>)
 8008626:	f7ff bff6 	b.w	8008616 <__retarget_lock_release_recursive>
 800862a:	bf00      	nop
 800862c:	2000199c 	.word	0x2000199c

08008630 <__ssputs_r>:
 8008630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008634:	688e      	ldr	r6, [r1, #8]
 8008636:	4682      	mov	sl, r0
 8008638:	429e      	cmp	r6, r3
 800863a:	460c      	mov	r4, r1
 800863c:	4690      	mov	r8, r2
 800863e:	461f      	mov	r7, r3
 8008640:	d838      	bhi.n	80086b4 <__ssputs_r+0x84>
 8008642:	898a      	ldrh	r2, [r1, #12]
 8008644:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008648:	d032      	beq.n	80086b0 <__ssputs_r+0x80>
 800864a:	6825      	ldr	r5, [r4, #0]
 800864c:	6909      	ldr	r1, [r1, #16]
 800864e:	3301      	adds	r3, #1
 8008650:	eba5 0901 	sub.w	r9, r5, r1
 8008654:	6965      	ldr	r5, [r4, #20]
 8008656:	444b      	add	r3, r9
 8008658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800865c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008660:	106d      	asrs	r5, r5, #1
 8008662:	429d      	cmp	r5, r3
 8008664:	bf38      	it	cc
 8008666:	461d      	movcc	r5, r3
 8008668:	0553      	lsls	r3, r2, #21
 800866a:	d531      	bpl.n	80086d0 <__ssputs_r+0xa0>
 800866c:	4629      	mov	r1, r5
 800866e:	f7ff ff47 	bl	8008500 <_malloc_r>
 8008672:	4606      	mov	r6, r0
 8008674:	b950      	cbnz	r0, 800868c <__ssputs_r+0x5c>
 8008676:	230c      	movs	r3, #12
 8008678:	f04f 30ff 	mov.w	r0, #4294967295
 800867c:	f8ca 3000 	str.w	r3, [sl]
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008686:	81a3      	strh	r3, [r4, #12]
 8008688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800868c:	464a      	mov	r2, r9
 800868e:	6921      	ldr	r1, [r4, #16]
 8008690:	f7ff fed4 	bl	800843c <memcpy>
 8008694:	89a3      	ldrh	r3, [r4, #12]
 8008696:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800869a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800869e:	81a3      	strh	r3, [r4, #12]
 80086a0:	6126      	str	r6, [r4, #16]
 80086a2:	444e      	add	r6, r9
 80086a4:	6026      	str	r6, [r4, #0]
 80086a6:	463e      	mov	r6, r7
 80086a8:	6165      	str	r5, [r4, #20]
 80086aa:	eba5 0509 	sub.w	r5, r5, r9
 80086ae:	60a5      	str	r5, [r4, #8]
 80086b0:	42be      	cmp	r6, r7
 80086b2:	d900      	bls.n	80086b6 <__ssputs_r+0x86>
 80086b4:	463e      	mov	r6, r7
 80086b6:	4632      	mov	r2, r6
 80086b8:	4641      	mov	r1, r8
 80086ba:	6820      	ldr	r0, [r4, #0]
 80086bc:	f000 fab8 	bl	8008c30 <memmove>
 80086c0:	68a3      	ldr	r3, [r4, #8]
 80086c2:	6822      	ldr	r2, [r4, #0]
 80086c4:	1b9b      	subs	r3, r3, r6
 80086c6:	4432      	add	r2, r6
 80086c8:	2000      	movs	r0, #0
 80086ca:	60a3      	str	r3, [r4, #8]
 80086cc:	6022      	str	r2, [r4, #0]
 80086ce:	e7db      	b.n	8008688 <__ssputs_r+0x58>
 80086d0:	462a      	mov	r2, r5
 80086d2:	f000 fac7 	bl	8008c64 <_realloc_r>
 80086d6:	4606      	mov	r6, r0
 80086d8:	2800      	cmp	r0, #0
 80086da:	d1e1      	bne.n	80086a0 <__ssputs_r+0x70>
 80086dc:	4650      	mov	r0, sl
 80086de:	6921      	ldr	r1, [r4, #16]
 80086e0:	f7ff fec2 	bl	8008468 <_free_r>
 80086e4:	e7c7      	b.n	8008676 <__ssputs_r+0x46>
	...

080086e8 <_svfiprintf_r>:
 80086e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ec:	4698      	mov	r8, r3
 80086ee:	898b      	ldrh	r3, [r1, #12]
 80086f0:	4607      	mov	r7, r0
 80086f2:	061b      	lsls	r3, r3, #24
 80086f4:	460d      	mov	r5, r1
 80086f6:	4614      	mov	r4, r2
 80086f8:	b09d      	sub	sp, #116	; 0x74
 80086fa:	d50e      	bpl.n	800871a <_svfiprintf_r+0x32>
 80086fc:	690b      	ldr	r3, [r1, #16]
 80086fe:	b963      	cbnz	r3, 800871a <_svfiprintf_r+0x32>
 8008700:	2140      	movs	r1, #64	; 0x40
 8008702:	f7ff fefd 	bl	8008500 <_malloc_r>
 8008706:	6028      	str	r0, [r5, #0]
 8008708:	6128      	str	r0, [r5, #16]
 800870a:	b920      	cbnz	r0, 8008716 <_svfiprintf_r+0x2e>
 800870c:	230c      	movs	r3, #12
 800870e:	603b      	str	r3, [r7, #0]
 8008710:	f04f 30ff 	mov.w	r0, #4294967295
 8008714:	e0d1      	b.n	80088ba <_svfiprintf_r+0x1d2>
 8008716:	2340      	movs	r3, #64	; 0x40
 8008718:	616b      	str	r3, [r5, #20]
 800871a:	2300      	movs	r3, #0
 800871c:	9309      	str	r3, [sp, #36]	; 0x24
 800871e:	2320      	movs	r3, #32
 8008720:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008724:	2330      	movs	r3, #48	; 0x30
 8008726:	f04f 0901 	mov.w	r9, #1
 800872a:	f8cd 800c 	str.w	r8, [sp, #12]
 800872e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80088d4 <_svfiprintf_r+0x1ec>
 8008732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008736:	4623      	mov	r3, r4
 8008738:	469a      	mov	sl, r3
 800873a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800873e:	b10a      	cbz	r2, 8008744 <_svfiprintf_r+0x5c>
 8008740:	2a25      	cmp	r2, #37	; 0x25
 8008742:	d1f9      	bne.n	8008738 <_svfiprintf_r+0x50>
 8008744:	ebba 0b04 	subs.w	fp, sl, r4
 8008748:	d00b      	beq.n	8008762 <_svfiprintf_r+0x7a>
 800874a:	465b      	mov	r3, fp
 800874c:	4622      	mov	r2, r4
 800874e:	4629      	mov	r1, r5
 8008750:	4638      	mov	r0, r7
 8008752:	f7ff ff6d 	bl	8008630 <__ssputs_r>
 8008756:	3001      	adds	r0, #1
 8008758:	f000 80aa 	beq.w	80088b0 <_svfiprintf_r+0x1c8>
 800875c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800875e:	445a      	add	r2, fp
 8008760:	9209      	str	r2, [sp, #36]	; 0x24
 8008762:	f89a 3000 	ldrb.w	r3, [sl]
 8008766:	2b00      	cmp	r3, #0
 8008768:	f000 80a2 	beq.w	80088b0 <_svfiprintf_r+0x1c8>
 800876c:	2300      	movs	r3, #0
 800876e:	f04f 32ff 	mov.w	r2, #4294967295
 8008772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008776:	f10a 0a01 	add.w	sl, sl, #1
 800877a:	9304      	str	r3, [sp, #16]
 800877c:	9307      	str	r3, [sp, #28]
 800877e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008782:	931a      	str	r3, [sp, #104]	; 0x68
 8008784:	4654      	mov	r4, sl
 8008786:	2205      	movs	r2, #5
 8008788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800878c:	4851      	ldr	r0, [pc, #324]	; (80088d4 <_svfiprintf_r+0x1ec>)
 800878e:	f000 fa41 	bl	8008c14 <memchr>
 8008792:	9a04      	ldr	r2, [sp, #16]
 8008794:	b9d8      	cbnz	r0, 80087ce <_svfiprintf_r+0xe6>
 8008796:	06d0      	lsls	r0, r2, #27
 8008798:	bf44      	itt	mi
 800879a:	2320      	movmi	r3, #32
 800879c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087a0:	0711      	lsls	r1, r2, #28
 80087a2:	bf44      	itt	mi
 80087a4:	232b      	movmi	r3, #43	; 0x2b
 80087a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087aa:	f89a 3000 	ldrb.w	r3, [sl]
 80087ae:	2b2a      	cmp	r3, #42	; 0x2a
 80087b0:	d015      	beq.n	80087de <_svfiprintf_r+0xf6>
 80087b2:	4654      	mov	r4, sl
 80087b4:	2000      	movs	r0, #0
 80087b6:	f04f 0c0a 	mov.w	ip, #10
 80087ba:	9a07      	ldr	r2, [sp, #28]
 80087bc:	4621      	mov	r1, r4
 80087be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087c2:	3b30      	subs	r3, #48	; 0x30
 80087c4:	2b09      	cmp	r3, #9
 80087c6:	d94e      	bls.n	8008866 <_svfiprintf_r+0x17e>
 80087c8:	b1b0      	cbz	r0, 80087f8 <_svfiprintf_r+0x110>
 80087ca:	9207      	str	r2, [sp, #28]
 80087cc:	e014      	b.n	80087f8 <_svfiprintf_r+0x110>
 80087ce:	eba0 0308 	sub.w	r3, r0, r8
 80087d2:	fa09 f303 	lsl.w	r3, r9, r3
 80087d6:	4313      	orrs	r3, r2
 80087d8:	46a2      	mov	sl, r4
 80087da:	9304      	str	r3, [sp, #16]
 80087dc:	e7d2      	b.n	8008784 <_svfiprintf_r+0x9c>
 80087de:	9b03      	ldr	r3, [sp, #12]
 80087e0:	1d19      	adds	r1, r3, #4
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	9103      	str	r1, [sp, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	bfbb      	ittet	lt
 80087ea:	425b      	neglt	r3, r3
 80087ec:	f042 0202 	orrlt.w	r2, r2, #2
 80087f0:	9307      	strge	r3, [sp, #28]
 80087f2:	9307      	strlt	r3, [sp, #28]
 80087f4:	bfb8      	it	lt
 80087f6:	9204      	strlt	r2, [sp, #16]
 80087f8:	7823      	ldrb	r3, [r4, #0]
 80087fa:	2b2e      	cmp	r3, #46	; 0x2e
 80087fc:	d10c      	bne.n	8008818 <_svfiprintf_r+0x130>
 80087fe:	7863      	ldrb	r3, [r4, #1]
 8008800:	2b2a      	cmp	r3, #42	; 0x2a
 8008802:	d135      	bne.n	8008870 <_svfiprintf_r+0x188>
 8008804:	9b03      	ldr	r3, [sp, #12]
 8008806:	3402      	adds	r4, #2
 8008808:	1d1a      	adds	r2, r3, #4
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	9203      	str	r2, [sp, #12]
 800880e:	2b00      	cmp	r3, #0
 8008810:	bfb8      	it	lt
 8008812:	f04f 33ff 	movlt.w	r3, #4294967295
 8008816:	9305      	str	r3, [sp, #20]
 8008818:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80088e4 <_svfiprintf_r+0x1fc>
 800881c:	2203      	movs	r2, #3
 800881e:	4650      	mov	r0, sl
 8008820:	7821      	ldrb	r1, [r4, #0]
 8008822:	f000 f9f7 	bl	8008c14 <memchr>
 8008826:	b140      	cbz	r0, 800883a <_svfiprintf_r+0x152>
 8008828:	2340      	movs	r3, #64	; 0x40
 800882a:	eba0 000a 	sub.w	r0, r0, sl
 800882e:	fa03 f000 	lsl.w	r0, r3, r0
 8008832:	9b04      	ldr	r3, [sp, #16]
 8008834:	3401      	adds	r4, #1
 8008836:	4303      	orrs	r3, r0
 8008838:	9304      	str	r3, [sp, #16]
 800883a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800883e:	2206      	movs	r2, #6
 8008840:	4825      	ldr	r0, [pc, #148]	; (80088d8 <_svfiprintf_r+0x1f0>)
 8008842:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008846:	f000 f9e5 	bl	8008c14 <memchr>
 800884a:	2800      	cmp	r0, #0
 800884c:	d038      	beq.n	80088c0 <_svfiprintf_r+0x1d8>
 800884e:	4b23      	ldr	r3, [pc, #140]	; (80088dc <_svfiprintf_r+0x1f4>)
 8008850:	bb1b      	cbnz	r3, 800889a <_svfiprintf_r+0x1b2>
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	3307      	adds	r3, #7
 8008856:	f023 0307 	bic.w	r3, r3, #7
 800885a:	3308      	adds	r3, #8
 800885c:	9303      	str	r3, [sp, #12]
 800885e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008860:	4433      	add	r3, r6
 8008862:	9309      	str	r3, [sp, #36]	; 0x24
 8008864:	e767      	b.n	8008736 <_svfiprintf_r+0x4e>
 8008866:	460c      	mov	r4, r1
 8008868:	2001      	movs	r0, #1
 800886a:	fb0c 3202 	mla	r2, ip, r2, r3
 800886e:	e7a5      	b.n	80087bc <_svfiprintf_r+0xd4>
 8008870:	2300      	movs	r3, #0
 8008872:	f04f 0c0a 	mov.w	ip, #10
 8008876:	4619      	mov	r1, r3
 8008878:	3401      	adds	r4, #1
 800887a:	9305      	str	r3, [sp, #20]
 800887c:	4620      	mov	r0, r4
 800887e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008882:	3a30      	subs	r2, #48	; 0x30
 8008884:	2a09      	cmp	r2, #9
 8008886:	d903      	bls.n	8008890 <_svfiprintf_r+0x1a8>
 8008888:	2b00      	cmp	r3, #0
 800888a:	d0c5      	beq.n	8008818 <_svfiprintf_r+0x130>
 800888c:	9105      	str	r1, [sp, #20]
 800888e:	e7c3      	b.n	8008818 <_svfiprintf_r+0x130>
 8008890:	4604      	mov	r4, r0
 8008892:	2301      	movs	r3, #1
 8008894:	fb0c 2101 	mla	r1, ip, r1, r2
 8008898:	e7f0      	b.n	800887c <_svfiprintf_r+0x194>
 800889a:	ab03      	add	r3, sp, #12
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	462a      	mov	r2, r5
 80088a0:	4638      	mov	r0, r7
 80088a2:	4b0f      	ldr	r3, [pc, #60]	; (80088e0 <_svfiprintf_r+0x1f8>)
 80088a4:	a904      	add	r1, sp, #16
 80088a6:	f3af 8000 	nop.w
 80088aa:	1c42      	adds	r2, r0, #1
 80088ac:	4606      	mov	r6, r0
 80088ae:	d1d6      	bne.n	800885e <_svfiprintf_r+0x176>
 80088b0:	89ab      	ldrh	r3, [r5, #12]
 80088b2:	065b      	lsls	r3, r3, #25
 80088b4:	f53f af2c 	bmi.w	8008710 <_svfiprintf_r+0x28>
 80088b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088ba:	b01d      	add	sp, #116	; 0x74
 80088bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c0:	ab03      	add	r3, sp, #12
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	462a      	mov	r2, r5
 80088c6:	4638      	mov	r0, r7
 80088c8:	4b05      	ldr	r3, [pc, #20]	; (80088e0 <_svfiprintf_r+0x1f8>)
 80088ca:	a904      	add	r1, sp, #16
 80088cc:	f000 f87c 	bl	80089c8 <_printf_i>
 80088d0:	e7eb      	b.n	80088aa <_svfiprintf_r+0x1c2>
 80088d2:	bf00      	nop
 80088d4:	08009308 	.word	0x08009308
 80088d8:	08009312 	.word	0x08009312
 80088dc:	00000000 	.word	0x00000000
 80088e0:	08008631 	.word	0x08008631
 80088e4:	0800930e 	.word	0x0800930e

080088e8 <_printf_common>:
 80088e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ec:	4616      	mov	r6, r2
 80088ee:	4699      	mov	r9, r3
 80088f0:	688a      	ldr	r2, [r1, #8]
 80088f2:	690b      	ldr	r3, [r1, #16]
 80088f4:	4607      	mov	r7, r0
 80088f6:	4293      	cmp	r3, r2
 80088f8:	bfb8      	it	lt
 80088fa:	4613      	movlt	r3, r2
 80088fc:	6033      	str	r3, [r6, #0]
 80088fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008902:	460c      	mov	r4, r1
 8008904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008908:	b10a      	cbz	r2, 800890e <_printf_common+0x26>
 800890a:	3301      	adds	r3, #1
 800890c:	6033      	str	r3, [r6, #0]
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	0699      	lsls	r1, r3, #26
 8008912:	bf42      	ittt	mi
 8008914:	6833      	ldrmi	r3, [r6, #0]
 8008916:	3302      	addmi	r3, #2
 8008918:	6033      	strmi	r3, [r6, #0]
 800891a:	6825      	ldr	r5, [r4, #0]
 800891c:	f015 0506 	ands.w	r5, r5, #6
 8008920:	d106      	bne.n	8008930 <_printf_common+0x48>
 8008922:	f104 0a19 	add.w	sl, r4, #25
 8008926:	68e3      	ldr	r3, [r4, #12]
 8008928:	6832      	ldr	r2, [r6, #0]
 800892a:	1a9b      	subs	r3, r3, r2
 800892c:	42ab      	cmp	r3, r5
 800892e:	dc28      	bgt.n	8008982 <_printf_common+0x9a>
 8008930:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008934:	1e13      	subs	r3, r2, #0
 8008936:	6822      	ldr	r2, [r4, #0]
 8008938:	bf18      	it	ne
 800893a:	2301      	movne	r3, #1
 800893c:	0692      	lsls	r2, r2, #26
 800893e:	d42d      	bmi.n	800899c <_printf_common+0xb4>
 8008940:	4649      	mov	r1, r9
 8008942:	4638      	mov	r0, r7
 8008944:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008948:	47c0      	blx	r8
 800894a:	3001      	adds	r0, #1
 800894c:	d020      	beq.n	8008990 <_printf_common+0xa8>
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	68e5      	ldr	r5, [r4, #12]
 8008952:	f003 0306 	and.w	r3, r3, #6
 8008956:	2b04      	cmp	r3, #4
 8008958:	bf18      	it	ne
 800895a:	2500      	movne	r5, #0
 800895c:	6832      	ldr	r2, [r6, #0]
 800895e:	f04f 0600 	mov.w	r6, #0
 8008962:	68a3      	ldr	r3, [r4, #8]
 8008964:	bf08      	it	eq
 8008966:	1aad      	subeq	r5, r5, r2
 8008968:	6922      	ldr	r2, [r4, #16]
 800896a:	bf08      	it	eq
 800896c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008970:	4293      	cmp	r3, r2
 8008972:	bfc4      	itt	gt
 8008974:	1a9b      	subgt	r3, r3, r2
 8008976:	18ed      	addgt	r5, r5, r3
 8008978:	341a      	adds	r4, #26
 800897a:	42b5      	cmp	r5, r6
 800897c:	d11a      	bne.n	80089b4 <_printf_common+0xcc>
 800897e:	2000      	movs	r0, #0
 8008980:	e008      	b.n	8008994 <_printf_common+0xac>
 8008982:	2301      	movs	r3, #1
 8008984:	4652      	mov	r2, sl
 8008986:	4649      	mov	r1, r9
 8008988:	4638      	mov	r0, r7
 800898a:	47c0      	blx	r8
 800898c:	3001      	adds	r0, #1
 800898e:	d103      	bne.n	8008998 <_printf_common+0xb0>
 8008990:	f04f 30ff 	mov.w	r0, #4294967295
 8008994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008998:	3501      	adds	r5, #1
 800899a:	e7c4      	b.n	8008926 <_printf_common+0x3e>
 800899c:	2030      	movs	r0, #48	; 0x30
 800899e:	18e1      	adds	r1, r4, r3
 80089a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089a4:	1c5a      	adds	r2, r3, #1
 80089a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089aa:	4422      	add	r2, r4
 80089ac:	3302      	adds	r3, #2
 80089ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089b2:	e7c5      	b.n	8008940 <_printf_common+0x58>
 80089b4:	2301      	movs	r3, #1
 80089b6:	4622      	mov	r2, r4
 80089b8:	4649      	mov	r1, r9
 80089ba:	4638      	mov	r0, r7
 80089bc:	47c0      	blx	r8
 80089be:	3001      	adds	r0, #1
 80089c0:	d0e6      	beq.n	8008990 <_printf_common+0xa8>
 80089c2:	3601      	adds	r6, #1
 80089c4:	e7d9      	b.n	800897a <_printf_common+0x92>
	...

080089c8 <_printf_i>:
 80089c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089cc:	460c      	mov	r4, r1
 80089ce:	7e27      	ldrb	r7, [r4, #24]
 80089d0:	4691      	mov	r9, r2
 80089d2:	2f78      	cmp	r7, #120	; 0x78
 80089d4:	4680      	mov	r8, r0
 80089d6:	469a      	mov	sl, r3
 80089d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80089da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089de:	d807      	bhi.n	80089f0 <_printf_i+0x28>
 80089e0:	2f62      	cmp	r7, #98	; 0x62
 80089e2:	d80a      	bhi.n	80089fa <_printf_i+0x32>
 80089e4:	2f00      	cmp	r7, #0
 80089e6:	f000 80d9 	beq.w	8008b9c <_printf_i+0x1d4>
 80089ea:	2f58      	cmp	r7, #88	; 0x58
 80089ec:	f000 80a4 	beq.w	8008b38 <_printf_i+0x170>
 80089f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80089f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089f8:	e03a      	b.n	8008a70 <_printf_i+0xa8>
 80089fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089fe:	2b15      	cmp	r3, #21
 8008a00:	d8f6      	bhi.n	80089f0 <_printf_i+0x28>
 8008a02:	a001      	add	r0, pc, #4	; (adr r0, 8008a08 <_printf_i+0x40>)
 8008a04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008a08:	08008a61 	.word	0x08008a61
 8008a0c:	08008a75 	.word	0x08008a75
 8008a10:	080089f1 	.word	0x080089f1
 8008a14:	080089f1 	.word	0x080089f1
 8008a18:	080089f1 	.word	0x080089f1
 8008a1c:	080089f1 	.word	0x080089f1
 8008a20:	08008a75 	.word	0x08008a75
 8008a24:	080089f1 	.word	0x080089f1
 8008a28:	080089f1 	.word	0x080089f1
 8008a2c:	080089f1 	.word	0x080089f1
 8008a30:	080089f1 	.word	0x080089f1
 8008a34:	08008b83 	.word	0x08008b83
 8008a38:	08008aa5 	.word	0x08008aa5
 8008a3c:	08008b65 	.word	0x08008b65
 8008a40:	080089f1 	.word	0x080089f1
 8008a44:	080089f1 	.word	0x080089f1
 8008a48:	08008ba5 	.word	0x08008ba5
 8008a4c:	080089f1 	.word	0x080089f1
 8008a50:	08008aa5 	.word	0x08008aa5
 8008a54:	080089f1 	.word	0x080089f1
 8008a58:	080089f1 	.word	0x080089f1
 8008a5c:	08008b6d 	.word	0x08008b6d
 8008a60:	680b      	ldr	r3, [r1, #0]
 8008a62:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008a66:	1d1a      	adds	r2, r3, #4
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	600a      	str	r2, [r1, #0]
 8008a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a70:	2301      	movs	r3, #1
 8008a72:	e0a4      	b.n	8008bbe <_printf_i+0x1f6>
 8008a74:	6825      	ldr	r5, [r4, #0]
 8008a76:	6808      	ldr	r0, [r1, #0]
 8008a78:	062e      	lsls	r6, r5, #24
 8008a7a:	f100 0304 	add.w	r3, r0, #4
 8008a7e:	d50a      	bpl.n	8008a96 <_printf_i+0xce>
 8008a80:	6805      	ldr	r5, [r0, #0]
 8008a82:	600b      	str	r3, [r1, #0]
 8008a84:	2d00      	cmp	r5, #0
 8008a86:	da03      	bge.n	8008a90 <_printf_i+0xc8>
 8008a88:	232d      	movs	r3, #45	; 0x2d
 8008a8a:	426d      	negs	r5, r5
 8008a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a90:	230a      	movs	r3, #10
 8008a92:	485e      	ldr	r0, [pc, #376]	; (8008c0c <_printf_i+0x244>)
 8008a94:	e019      	b.n	8008aca <_printf_i+0x102>
 8008a96:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008a9a:	6805      	ldr	r5, [r0, #0]
 8008a9c:	600b      	str	r3, [r1, #0]
 8008a9e:	bf18      	it	ne
 8008aa0:	b22d      	sxthne	r5, r5
 8008aa2:	e7ef      	b.n	8008a84 <_printf_i+0xbc>
 8008aa4:	680b      	ldr	r3, [r1, #0]
 8008aa6:	6825      	ldr	r5, [r4, #0]
 8008aa8:	1d18      	adds	r0, r3, #4
 8008aaa:	6008      	str	r0, [r1, #0]
 8008aac:	0628      	lsls	r0, r5, #24
 8008aae:	d501      	bpl.n	8008ab4 <_printf_i+0xec>
 8008ab0:	681d      	ldr	r5, [r3, #0]
 8008ab2:	e002      	b.n	8008aba <_printf_i+0xf2>
 8008ab4:	0669      	lsls	r1, r5, #25
 8008ab6:	d5fb      	bpl.n	8008ab0 <_printf_i+0xe8>
 8008ab8:	881d      	ldrh	r5, [r3, #0]
 8008aba:	2f6f      	cmp	r7, #111	; 0x6f
 8008abc:	bf0c      	ite	eq
 8008abe:	2308      	moveq	r3, #8
 8008ac0:	230a      	movne	r3, #10
 8008ac2:	4852      	ldr	r0, [pc, #328]	; (8008c0c <_printf_i+0x244>)
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008aca:	6866      	ldr	r6, [r4, #4]
 8008acc:	2e00      	cmp	r6, #0
 8008ace:	bfa8      	it	ge
 8008ad0:	6821      	ldrge	r1, [r4, #0]
 8008ad2:	60a6      	str	r6, [r4, #8]
 8008ad4:	bfa4      	itt	ge
 8008ad6:	f021 0104 	bicge.w	r1, r1, #4
 8008ada:	6021      	strge	r1, [r4, #0]
 8008adc:	b90d      	cbnz	r5, 8008ae2 <_printf_i+0x11a>
 8008ade:	2e00      	cmp	r6, #0
 8008ae0:	d04d      	beq.n	8008b7e <_printf_i+0x1b6>
 8008ae2:	4616      	mov	r6, r2
 8008ae4:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ae8:	fb03 5711 	mls	r7, r3, r1, r5
 8008aec:	5dc7      	ldrb	r7, [r0, r7]
 8008aee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008af2:	462f      	mov	r7, r5
 8008af4:	42bb      	cmp	r3, r7
 8008af6:	460d      	mov	r5, r1
 8008af8:	d9f4      	bls.n	8008ae4 <_printf_i+0x11c>
 8008afa:	2b08      	cmp	r3, #8
 8008afc:	d10b      	bne.n	8008b16 <_printf_i+0x14e>
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	07df      	lsls	r7, r3, #31
 8008b02:	d508      	bpl.n	8008b16 <_printf_i+0x14e>
 8008b04:	6923      	ldr	r3, [r4, #16]
 8008b06:	6861      	ldr	r1, [r4, #4]
 8008b08:	4299      	cmp	r1, r3
 8008b0a:	bfde      	ittt	le
 8008b0c:	2330      	movle	r3, #48	; 0x30
 8008b0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b16:	1b92      	subs	r2, r2, r6
 8008b18:	6122      	str	r2, [r4, #16]
 8008b1a:	464b      	mov	r3, r9
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	4640      	mov	r0, r8
 8008b20:	f8cd a000 	str.w	sl, [sp]
 8008b24:	aa03      	add	r2, sp, #12
 8008b26:	f7ff fedf 	bl	80088e8 <_printf_common>
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	d14c      	bne.n	8008bc8 <_printf_i+0x200>
 8008b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b32:	b004      	add	sp, #16
 8008b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b38:	4834      	ldr	r0, [pc, #208]	; (8008c0c <_printf_i+0x244>)
 8008b3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008b3e:	680e      	ldr	r6, [r1, #0]
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	f856 5b04 	ldr.w	r5, [r6], #4
 8008b46:	061f      	lsls	r7, r3, #24
 8008b48:	600e      	str	r6, [r1, #0]
 8008b4a:	d514      	bpl.n	8008b76 <_printf_i+0x1ae>
 8008b4c:	07d9      	lsls	r1, r3, #31
 8008b4e:	bf44      	itt	mi
 8008b50:	f043 0320 	orrmi.w	r3, r3, #32
 8008b54:	6023      	strmi	r3, [r4, #0]
 8008b56:	b91d      	cbnz	r5, 8008b60 <_printf_i+0x198>
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	f023 0320 	bic.w	r3, r3, #32
 8008b5e:	6023      	str	r3, [r4, #0]
 8008b60:	2310      	movs	r3, #16
 8008b62:	e7af      	b.n	8008ac4 <_printf_i+0xfc>
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	f043 0320 	orr.w	r3, r3, #32
 8008b6a:	6023      	str	r3, [r4, #0]
 8008b6c:	2378      	movs	r3, #120	; 0x78
 8008b6e:	4828      	ldr	r0, [pc, #160]	; (8008c10 <_printf_i+0x248>)
 8008b70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b74:	e7e3      	b.n	8008b3e <_printf_i+0x176>
 8008b76:	065e      	lsls	r6, r3, #25
 8008b78:	bf48      	it	mi
 8008b7a:	b2ad      	uxthmi	r5, r5
 8008b7c:	e7e6      	b.n	8008b4c <_printf_i+0x184>
 8008b7e:	4616      	mov	r6, r2
 8008b80:	e7bb      	b.n	8008afa <_printf_i+0x132>
 8008b82:	680b      	ldr	r3, [r1, #0]
 8008b84:	6826      	ldr	r6, [r4, #0]
 8008b86:	1d1d      	adds	r5, r3, #4
 8008b88:	6960      	ldr	r0, [r4, #20]
 8008b8a:	600d      	str	r5, [r1, #0]
 8008b8c:	0635      	lsls	r5, r6, #24
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	d501      	bpl.n	8008b96 <_printf_i+0x1ce>
 8008b92:	6018      	str	r0, [r3, #0]
 8008b94:	e002      	b.n	8008b9c <_printf_i+0x1d4>
 8008b96:	0671      	lsls	r1, r6, #25
 8008b98:	d5fb      	bpl.n	8008b92 <_printf_i+0x1ca>
 8008b9a:	8018      	strh	r0, [r3, #0]
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	4616      	mov	r6, r2
 8008ba0:	6123      	str	r3, [r4, #16]
 8008ba2:	e7ba      	b.n	8008b1a <_printf_i+0x152>
 8008ba4:	680b      	ldr	r3, [r1, #0]
 8008ba6:	1d1a      	adds	r2, r3, #4
 8008ba8:	600a      	str	r2, [r1, #0]
 8008baa:	681e      	ldr	r6, [r3, #0]
 8008bac:	2100      	movs	r1, #0
 8008bae:	4630      	mov	r0, r6
 8008bb0:	6862      	ldr	r2, [r4, #4]
 8008bb2:	f000 f82f 	bl	8008c14 <memchr>
 8008bb6:	b108      	cbz	r0, 8008bbc <_printf_i+0x1f4>
 8008bb8:	1b80      	subs	r0, r0, r6
 8008bba:	6060      	str	r0, [r4, #4]
 8008bbc:	6863      	ldr	r3, [r4, #4]
 8008bbe:	6123      	str	r3, [r4, #16]
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bc6:	e7a8      	b.n	8008b1a <_printf_i+0x152>
 8008bc8:	4632      	mov	r2, r6
 8008bca:	4649      	mov	r1, r9
 8008bcc:	4640      	mov	r0, r8
 8008bce:	6923      	ldr	r3, [r4, #16]
 8008bd0:	47d0      	blx	sl
 8008bd2:	3001      	adds	r0, #1
 8008bd4:	d0ab      	beq.n	8008b2e <_printf_i+0x166>
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	079b      	lsls	r3, r3, #30
 8008bda:	d413      	bmi.n	8008c04 <_printf_i+0x23c>
 8008bdc:	68e0      	ldr	r0, [r4, #12]
 8008bde:	9b03      	ldr	r3, [sp, #12]
 8008be0:	4298      	cmp	r0, r3
 8008be2:	bfb8      	it	lt
 8008be4:	4618      	movlt	r0, r3
 8008be6:	e7a4      	b.n	8008b32 <_printf_i+0x16a>
 8008be8:	2301      	movs	r3, #1
 8008bea:	4632      	mov	r2, r6
 8008bec:	4649      	mov	r1, r9
 8008bee:	4640      	mov	r0, r8
 8008bf0:	47d0      	blx	sl
 8008bf2:	3001      	adds	r0, #1
 8008bf4:	d09b      	beq.n	8008b2e <_printf_i+0x166>
 8008bf6:	3501      	adds	r5, #1
 8008bf8:	68e3      	ldr	r3, [r4, #12]
 8008bfa:	9903      	ldr	r1, [sp, #12]
 8008bfc:	1a5b      	subs	r3, r3, r1
 8008bfe:	42ab      	cmp	r3, r5
 8008c00:	dcf2      	bgt.n	8008be8 <_printf_i+0x220>
 8008c02:	e7eb      	b.n	8008bdc <_printf_i+0x214>
 8008c04:	2500      	movs	r5, #0
 8008c06:	f104 0619 	add.w	r6, r4, #25
 8008c0a:	e7f5      	b.n	8008bf8 <_printf_i+0x230>
 8008c0c:	08009319 	.word	0x08009319
 8008c10:	0800932a 	.word	0x0800932a

08008c14 <memchr>:
 8008c14:	4603      	mov	r3, r0
 8008c16:	b510      	push	{r4, lr}
 8008c18:	b2c9      	uxtb	r1, r1
 8008c1a:	4402      	add	r2, r0
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	d101      	bne.n	8008c26 <memchr+0x12>
 8008c22:	2000      	movs	r0, #0
 8008c24:	e003      	b.n	8008c2e <memchr+0x1a>
 8008c26:	7804      	ldrb	r4, [r0, #0]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	428c      	cmp	r4, r1
 8008c2c:	d1f6      	bne.n	8008c1c <memchr+0x8>
 8008c2e:	bd10      	pop	{r4, pc}

08008c30 <memmove>:
 8008c30:	4288      	cmp	r0, r1
 8008c32:	b510      	push	{r4, lr}
 8008c34:	eb01 0402 	add.w	r4, r1, r2
 8008c38:	d902      	bls.n	8008c40 <memmove+0x10>
 8008c3a:	4284      	cmp	r4, r0
 8008c3c:	4623      	mov	r3, r4
 8008c3e:	d807      	bhi.n	8008c50 <memmove+0x20>
 8008c40:	1e43      	subs	r3, r0, #1
 8008c42:	42a1      	cmp	r1, r4
 8008c44:	d008      	beq.n	8008c58 <memmove+0x28>
 8008c46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c4e:	e7f8      	b.n	8008c42 <memmove+0x12>
 8008c50:	4601      	mov	r1, r0
 8008c52:	4402      	add	r2, r0
 8008c54:	428a      	cmp	r2, r1
 8008c56:	d100      	bne.n	8008c5a <memmove+0x2a>
 8008c58:	bd10      	pop	{r4, pc}
 8008c5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c62:	e7f7      	b.n	8008c54 <memmove+0x24>

08008c64 <_realloc_r>:
 8008c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c66:	4607      	mov	r7, r0
 8008c68:	4614      	mov	r4, r2
 8008c6a:	460e      	mov	r6, r1
 8008c6c:	b921      	cbnz	r1, 8008c78 <_realloc_r+0x14>
 8008c6e:	4611      	mov	r1, r2
 8008c70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c74:	f7ff bc44 	b.w	8008500 <_malloc_r>
 8008c78:	b922      	cbnz	r2, 8008c84 <_realloc_r+0x20>
 8008c7a:	f7ff fbf5 	bl	8008468 <_free_r>
 8008c7e:	4625      	mov	r5, r4
 8008c80:	4628      	mov	r0, r5
 8008c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c84:	f000 f814 	bl	8008cb0 <_malloc_usable_size_r>
 8008c88:	42a0      	cmp	r0, r4
 8008c8a:	d20f      	bcs.n	8008cac <_realloc_r+0x48>
 8008c8c:	4621      	mov	r1, r4
 8008c8e:	4638      	mov	r0, r7
 8008c90:	f7ff fc36 	bl	8008500 <_malloc_r>
 8008c94:	4605      	mov	r5, r0
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d0f2      	beq.n	8008c80 <_realloc_r+0x1c>
 8008c9a:	4631      	mov	r1, r6
 8008c9c:	4622      	mov	r2, r4
 8008c9e:	f7ff fbcd 	bl	800843c <memcpy>
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	4638      	mov	r0, r7
 8008ca6:	f7ff fbdf 	bl	8008468 <_free_r>
 8008caa:	e7e9      	b.n	8008c80 <_realloc_r+0x1c>
 8008cac:	4635      	mov	r5, r6
 8008cae:	e7e7      	b.n	8008c80 <_realloc_r+0x1c>

08008cb0 <_malloc_usable_size_r>:
 8008cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cb4:	1f18      	subs	r0, r3, #4
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	bfbc      	itt	lt
 8008cba:	580b      	ldrlt	r3, [r1, r0]
 8008cbc:	18c0      	addlt	r0, r0, r3
 8008cbe:	4770      	bx	lr

08008cc0 <_init>:
 8008cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc2:	bf00      	nop
 8008cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cc6:	bc08      	pop	{r3}
 8008cc8:	469e      	mov	lr, r3
 8008cca:	4770      	bx	lr

08008ccc <_fini>:
 8008ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cce:	bf00      	nop
 8008cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cd2:	bc08      	pop	{r3}
 8008cd4:	469e      	mov	lr, r3
 8008cd6:	4770      	bx	lr
