
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee54  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800ef68  0800ef68  0001ef68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f440  0800f440  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800f440  0800f440  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f440  0800f440  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f440  0800f440  0001f440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800f448  0800f448  0001f448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800f450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a6c  20000078  0800f4c4  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000ae4  0800f4c4  00020ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022784  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042ed  00000000  00000000  00042821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00046b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e8  00000000  00000000  00047f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d169  00000000  00000000  00049210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e49  00000000  00000000  00066379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096860  00000000  00000000  0007d1c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00113a22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006430  00000000  00000000  00113a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ef4c 	.word	0x0800ef4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800ef4c 	.word	0x0800ef4c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpun>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010cc:	d102      	bne.n	80010d4 <__aeabi_fcmpun+0x14>
 80010ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010d2:	d108      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d8:	d102      	bne.n	80010e0 <__aeabi_fcmpun+0x20>
 80010da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010de:	d102      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0001 	mov.w	r0, #1
 80010ea:	4770      	bx	lr

080010ec <__aeabi_f2iz>:
 80010ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010f4:	d30f      	bcc.n	8001116 <__aeabi_f2iz+0x2a>
 80010f6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010fe:	d90d      	bls.n	800111c <__aeabi_f2iz+0x30>
 8001100:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001108:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800110c:	fa23 f002 	lsr.w	r0, r3, r2
 8001110:	bf18      	it	ne
 8001112:	4240      	negne	r0, r0
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr
 800111c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001120:	d101      	bne.n	8001126 <__aeabi_f2iz+0x3a>
 8001122:	0242      	lsls	r2, r0, #9
 8001124:	d105      	bne.n	8001132 <__aeabi_f2iz+0x46>
 8001126:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800112a:	bf08      	it	eq
 800112c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr

08001138 <__aeabi_f2uiz>:
 8001138:	0042      	lsls	r2, r0, #1
 800113a:	d20e      	bcs.n	800115a <__aeabi_f2uiz+0x22>
 800113c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001140:	d30b      	bcc.n	800115a <__aeabi_f2uiz+0x22>
 8001142:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001146:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114a:	d409      	bmi.n	8001160 <__aeabi_f2uiz+0x28>
 800114c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001150:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001154:	fa23 f002 	lsr.w	r0, r3, r2
 8001158:	4770      	bx	lr
 800115a:	f04f 0000 	mov.w	r0, #0
 800115e:	4770      	bx	lr
 8001160:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001164:	d101      	bne.n	800116a <__aeabi_f2uiz+0x32>
 8001166:	0242      	lsls	r2, r0, #9
 8001168:	d102      	bne.n	8001170 <__aeabi_f2uiz+0x38>
 800116a:	f04f 30ff 	mov.w	r0, #4294967295
 800116e:	4770      	bx	lr
 8001170:	f04f 0000 	mov.w	r0, #0
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8001182:	2300      	movs	r3, #0
 8001184:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 8001186:	2301      	movs	r3, #1
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2301      	movs	r3, #1
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	1dbb      	adds	r3, r7, #6
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	22d0      	movs	r2, #208	; 0xd0
 8001196:	21ef      	movs	r1, #239	; 0xef
 8001198:	4806      	ldr	r0, [pc, #24]	; (80011b4 <read_chip_id+0x3c>)
 800119a:	f003 fca3 	bl	8004ae4 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 800119e:	79bb      	ldrb	r3, [r7, #6]
 80011a0:	2b55      	cmp	r3, #85	; 0x55
 80011a2:	d001      	beq.n	80011a8 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 80011a8:	79fb      	ldrb	r3, [r7, #7]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000009c 	.word	0x2000009c

080011b8 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af04      	add	r7, sp, #16
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 80011c4:	2300      	movs	r3, #0
 80011c6:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d81a      	bhi.n	8001204 <set_oss+0x4c>
 80011ce:	a201      	add	r2, pc, #4	; (adr r2, 80011d4 <set_oss+0x1c>)
 80011d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d4:	080011e5 	.word	0x080011e5
 80011d8:	080011ed 	.word	0x080011ed
 80011dc:	080011f5 	.word	0x080011f5
 80011e0:	080011fd 	.word	0x080011fd
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2205      	movs	r2, #5
 80011e8:	705a      	strb	r2, [r3, #1]
			break;
 80011ea:	e00f      	b.n	800120c <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2208      	movs	r2, #8
 80011f0:	705a      	strb	r2, [r3, #1]
			break;
 80011f2:	e00b      	b.n	800120c <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	220e      	movs	r2, #14
 80011f8:	705a      	strb	r2, [r3, #1]
			break;
 80011fa:	e007      	b.n	800120c <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	221a      	movs	r2, #26
 8001200:	705a      	strb	r2, [r3, #1]
			break;
 8001202:	e003      	b.n	800120c <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2208      	movs	r2, #8
 8001208:	705a      	strb	r2, [r3, #1]
			break;
 800120a:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	78fa      	ldrb	r2, [r7, #3]
 8001210:	701a      	strb	r2, [r3, #0]

	//BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));

	ratio = (ratio & 0x3) << 6;
 8001212:	78fb      	ldrb	r3, [r7, #3]
 8001214:	019b      	lsls	r3, r3, #6
 8001216:	70fb      	strb	r3, [r7, #3]
	in_buff[1] = ratio;
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 800121c:	2301      	movs	r3, #1
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	2302      	movs	r3, #2
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2301      	movs	r3, #1
 800122c:	22f4      	movs	r2, #244	; 0xf4
 800122e:	21ee      	movs	r1, #238	; 0xee
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <set_oss+0x88>)
 8001232:	f003 fb5d 	bl	80048f0 <HAL_I2C_Mem_Write>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000009c 	.word	0x2000009c

08001244 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08e      	sub	sp, #56	; 0x38
 8001248:	af04      	add	r7, sp, #16
 800124a:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 800124c:	2300      	movs	r3, #0
 800124e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 800126c:	2301      	movs	r3, #1
 800126e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 8001272:	2301      	movs	r3, #1
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	2316      	movs	r3, #22
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2301      	movs	r3, #1
 8001282:	22aa      	movs	r2, #170	; 0xaa
 8001284:	21ef      	movs	r1, #239	; 0xef
 8001286:	4828      	ldr	r0, [pc, #160]	; (8001328 <read_calib_data+0xe4>)
 8001288:	f003 fc2c 	bl	8004ae4 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 800128c:	2300      	movs	r3, #0
 800128e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001292:	e03e      	b.n	8001312 <read_calib_data+0xce>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 8001294:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800129e:	4413      	add	r3, r2
 80012a0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b219      	sxth	r1, r3
 80012a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012b0:	4413      	add	r3, r2
 80012b2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	4403      	add	r3, r0
 80012c2:	430a      	orrs	r2, r1
 80012c4:	b212      	sxth	r2, r2
 80012c6:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80012c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	bf0c      	ite	eq
 80012da:	2301      	moveq	r3, #1
 80012dc:	2300      	movne	r3, #0
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	440b      	add	r3, r1
 80012ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f2:	bf0c      	ite	eq
 80012f4:	2301      	moveq	r3, #1
 80012f6:	2300      	movne	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	4313      	orrs	r3, r2
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <read_calib_data+0xc4>
		{
			ret_val = GET_CALIB_ERR;
 8001302:	2302      	movs	r3, #2
 8001304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001308:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800130c:	3301      	adds	r3, #1
 800130e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001312:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001316:	2b0b      	cmp	r3, #11
 8001318:	d9bc      	bls.n	8001294 <read_calib_data+0x50>
		}
	}

	return ret_val;
 800131a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800131e:	4618      	mov	r0, r3
 8001320:	3728      	adds	r7, #40	; 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000009c 	.word	0x2000009c

0800132c <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2204      	movs	r2, #4
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f00d fcf6 	bl	800ed2c <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8001340:	687c      	ldr	r4, [r7, #4]
 8001342:	f7ff ff19 	bl	8001178 <read_chip_id>
 8001346:	4603      	mov	r3, r0
 8001348:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp->err = read_calib_data ((short *)&bmp->calib);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	687c      	ldr	r4, [r7, #4]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff77 	bl	8001244 <read_calib_data>
 8001356:	4603      	mov	r3, r0
 8001358:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3338      	adds	r3, #56	; 0x38
 8001360:	2101      	movs	r1, #1
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff28 	bl	80011b8 <set_oss>
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}

08001370 <write_ut>:

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
}

void write_ut (void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
	out_buff[0] = BMP_SET_TEMP_CONV;
 8001376:	232e      	movs	r3, #46	; 0x2e
 8001378:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800137a:	2301      	movs	r3, #1
 800137c:	9302      	str	r3, [sp, #8]
 800137e:	2301      	movs	r3, #1
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2301      	movs	r3, #1
 8001388:	22f4      	movs	r2, #244	; 0xf4
 800138a:	21ee      	movs	r1, #238	; 0xee
 800138c:	4803      	ldr	r0, [pc, #12]	; (800139c <write_ut+0x2c>)
 800138e:	f003 faaf 	bl	80048f0 <HAL_I2C_Mem_Write>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2000009c 	.word	0x2000009c

080013a0 <read_ut>:

int32_t read_ut (void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 80013a6:	2301      	movs	r3, #1
 80013a8:	9302      	str	r3, [sp, #8]
 80013aa:	2302      	movs	r3, #2
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2301      	movs	r3, #1
 80013b4:	22f6      	movs	r2, #246	; 0xf6
 80013b6:	21ef      	movs	r1, #239	; 0xef
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <read_ut+0x30>)
 80013ba:	f003 fb93 	bl	8004ae4 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 80013be:	793b      	ldrb	r3, [r7, #4]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	797a      	ldrb	r2, [r7, #5]
 80013c4:	4313      	orrs	r3, r2
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000009c 	.word	0x2000009c

080013d4 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fe7c 	bl	80010ec <__aeabi_f2iz>
 80013f4:	4602      	mov	r2, r0
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	895b      	ldrh	r3, [r3, #10]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	8912      	ldrh	r2, [r2, #8]
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	13db      	asrs	r3, r3, #15
 8001406:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800140e:	02da      	lsls	r2, r3, #11
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001416:	4619      	mov	r1, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	440b      	add	r3, r1
 800141c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001420:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	441a      	add	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	3308      	adds	r3, #8
 8001432:	111b      	asrs	r3, r3, #4
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fc29 	bl	8000c8c <__aeabi_i2f>
 800143a:	4603      	mov	r3, r0
 800143c:	490e      	ldr	r1, [pc, #56]	; (8001478 <get_temp+0xa4>)
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fc78 	bl	8000d34 <__aeabi_fmul>
 8001444:	4603      	mov	r3, r0
 8001446:	60fb      	str	r3, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <get_temp+0xa8>)
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f7ff fe1a 	bl	8001084 <__aeabi_fcmple>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d106      	bne.n	8001464 <get_temp+0x90>
 8001456:	490a      	ldr	r1, [pc, #40]	; (8001480 <get_temp+0xac>)
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f7ff fe1d 	bl	8001098 <__aeabi_fcmpge>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <get_temp+0x98>
	{
		bmp->err = GET_TEMP_ERR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2203      	movs	r2, #3
 8001468:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 800146c:	68fb      	ldr	r3, [r7, #12]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	3dcccccd 	.word	0x3dcccccd
 800147c:	c2200000 	.word	0xc2200000
 8001480:	42aa0000 	.word	0x42aa0000

08001484 <write_up>:
	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
	return up;
}

void write_up (void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af04      	add	r7, sp, #16
	uint8_t out_buff[3] = {0};
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <write_up+0x38>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	803b      	strh	r3, [r7, #0]
 8001490:	2300      	movs	r3, #0
 8001492:	70bb      	strb	r3, [r7, #2]
	long up = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
	out_buff[0] = BMP_SET_PRESS_CONV;
 8001498:	2334      	movs	r3, #52	; 0x34
 800149a:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800149c:	2301      	movs	r3, #1
 800149e:	9302      	str	r3, [sp, #8]
 80014a0:	2301      	movs	r3, #1
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	463b      	mov	r3, r7
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2301      	movs	r3, #1
 80014aa:	22f4      	movs	r2, #244	; 0xf4
 80014ac:	21ee      	movs	r1, #238	; 0xee
 80014ae:	4804      	ldr	r0, [pc, #16]	; (80014c0 <write_up+0x3c>)
 80014b0:	f003 fa1e 	bl	80048f0 <HAL_I2C_Mem_Write>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	0800ef68 	.word	0x0800ef68
 80014c0:	2000009c 	.word	0x2000009c

080014c4 <read_up>:

int32_t read_up (oss_t oss)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af04      	add	r7, sp, #16
 80014ca:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <read_up+0x54>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	813b      	strh	r3, [r7, #8]
 80014d2:	2300      	movs	r3, #0
 80014d4:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
	//Delay BMP_OSS1_CONV_TIME
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80014da:	2301      	movs	r3, #1
 80014dc:	9302      	str	r3, [sp, #8]
 80014de:	2303      	movs	r3, #3
 80014e0:	9301      	str	r3, [sp, #4]
 80014e2:	f107 0308 	add.w	r3, r7, #8
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2301      	movs	r3, #1
 80014ea:	22f6      	movs	r2, #246	; 0xf6
 80014ec:	21ef      	movs	r1, #239	; 0xef
 80014ee:	480b      	ldr	r0, [pc, #44]	; (800151c <read_up+0x58>)
 80014f0:	f003 faf8 	bl	8004ae4 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80014f4:	7a3b      	ldrb	r3, [r7, #8]
 80014f6:	041a      	lsls	r2, r3, #16
 80014f8:	7a7b      	ldrb	r3, [r7, #9]
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	4413      	add	r3, r2
 80014fe:	7aba      	ldrb	r2, [r7, #10]
 8001500:	441a      	add	r2, r3
 8001502:	793b      	ldrb	r3, [r7, #4]
 8001504:	f1c3 0308 	rsb	r3, r3, #8
 8001508:	fa42 f303 	asr.w	r3, r2, r3
 800150c:	60fb      	str	r3, [r7, #12]
	return up;
 800150e:	68fb      	ldr	r3, [r7, #12]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	0800ef68 	.word	0x0800ef68
 800151c:	2000009c 	.word	0x2000009c

08001520 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 8001520:	b084      	sub	sp, #16
 8001522:	b480      	push	{r7}
 8001524:	b089      	sub	sp, #36	; 0x24
 8001526:	af00      	add	r7, sp, #0
 8001528:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800152c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800153a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800153e:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001540:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001544:	461a      	mov	r2, r3
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	fb03 f303 	mul.w	r3, r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	da01      	bge.n	8001554 <get_pressure+0x34>
 8001550:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001554:	131b      	asrs	r3, r3, #12
 8001556:	fb03 f302 	mul.w	r3, r3, r2
 800155a:	2b00      	cmp	r3, #0
 800155c:	da01      	bge.n	8001562 <get_pressure+0x42>
 800155e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001562:	12db      	asrs	r3, r3, #11
 8001564:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 8001566:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800156a:	461a      	mov	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fb03 f302 	mul.w	r3, r3, r2
 8001572:	2b00      	cmp	r3, #0
 8001574:	da01      	bge.n	800157a <get_pressure+0x5a>
 8001576:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800157a:	12db      	asrs	r3, r3, #11
 800157c:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 8001586:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800158a:	009a      	lsls	r2, r3, #2
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4413      	add	r3, r2
 8001590:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001594:	4093      	lsls	r3, r2
 8001596:	3302      	adds	r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	da00      	bge.n	800159e <get_pressure+0x7e>
 800159c:	3303      	adds	r3, #3
 800159e:	109b      	asrs	r3, r3, #2
 80015a0:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 80015a2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80015a6:	461a      	mov	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fb03 f302 	mul.w	r3, r3, r2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	da02      	bge.n	80015b8 <get_pressure+0x98>
 80015b2:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80015b6:	331f      	adds	r3, #31
 80015b8:	135b      	asrs	r3, r3, #13
 80015ba:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 80015bc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80015c0:	461a      	mov	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	fb03 f303 	mul.w	r3, r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	da01      	bge.n	80015d0 <get_pressure+0xb0>
 80015cc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80015d0:	131b      	asrs	r3, r3, #12
 80015d2:	fb03 f302 	mul.w	r3, r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	da02      	bge.n	80015e0 <get_pressure+0xc0>
 80015da:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80015de:	33ff      	adds	r3, #255	; 0xff
 80015e0:	141b      	asrs	r3, r3, #16
 80015e2:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4413      	add	r3, r2
 80015ea:	3302      	adds	r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	da00      	bge.n	80015f2 <get_pressure+0xd2>
 80015f0:	3303      	adds	r3, #3
 80015f2:	109b      	asrs	r3, r3, #2
 80015f4:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 80015f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015f8:	461a      	mov	r2, r3
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001600:	fb03 f302 	mul.w	r3, r3, r2
 8001604:	0bdb      	lsrs	r3, r3, #15
 8001606:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 8001608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800160a:	461a      	mov	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001614:	4611      	mov	r1, r2
 8001616:	f24c 3250 	movw	r2, #50000	; 0xc350
 800161a:	410a      	asrs	r2, r1
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db06      	blt.n	8001636 <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	005a      	lsls	r2, r3, #1
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	61fb      	str	r3, [r7, #28]
 8001634:	e005      	b.n	8001642 <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	fbb2 f3f3 	udiv	r3, r2, r3
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	2b00      	cmp	r3, #0
 8001646:	da00      	bge.n	800164a <get_pressure+0x12a>
 8001648:	33ff      	adds	r3, #255	; 0xff
 800164a:	121b      	asrs	r3, r3, #8
 800164c:	461a      	mov	r2, r3
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	2b00      	cmp	r3, #0
 8001652:	da00      	bge.n	8001656 <get_pressure+0x136>
 8001654:	33ff      	adds	r3, #255	; 0xff
 8001656:	121b      	asrs	r3, r3, #8
 8001658:	fb03 f302 	mul.w	r3, r3, r2
 800165c:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	f640 32de 	movw	r2, #3038	; 0xbde
 8001664:	fb02 f303 	mul.w	r3, r2, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	da02      	bge.n	8001672 <get_pressure+0x152>
 800166c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001670:	33ff      	adds	r3, #255	; 0xff
 8001672:	141b      	asrs	r3, r3, #16
 8001674:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <get_pressure+0x194>)
 800167a:	fb02 f303 	mul.w	r3, r2, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	da02      	bge.n	8001688 <get_pressure+0x168>
 8001682:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001686:	33ff      	adds	r3, #255	; 0xff
 8001688:	141b      	asrs	r3, r3, #16
 800168a:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001696:	2b00      	cmp	r3, #0
 8001698:	da00      	bge.n	800169c <get_pressure+0x17c>
 800169a:	330f      	adds	r3, #15
 800169c:	111b      	asrs	r3, r3, #4
 800169e:	461a      	mov	r2, r3
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	4413      	add	r3, r2
 80016a4:	61fb      	str	r3, [r7, #28]

	return p;
 80016a6:	69fb      	ldr	r3, [r7, #28]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3724      	adds	r7, #36	; 0x24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	b004      	add	sp, #16
 80016b2:	4770      	bx	lr
 80016b4:	ffffe343 	.word	0xffffe343

080016b8 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fade 	bl	8000c8c <__aeabi_i2f>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4923      	ldr	r1, [pc, #140]	; (8001760 <get_altitude+0xa8>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fbe1 	bl	8000e9c <__aeabi_fdiv>
 80016da:	4603      	mov	r3, r0
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fe9b 	bl	8000418 <__aeabi_f2d>
 80016e2:	a31b      	add	r3, pc, #108	; (adr r3, 8001750 <get_altitude+0x98>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f00b fb7e 	bl	800cde8 <pow>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	f04f 0000 	mov.w	r0, #0
 80016f4:	491b      	ldr	r1, [pc, #108]	; (8001764 <get_altitude+0xac>)
 80016f6:	f7fe fd2f 	bl	8000158 <__aeabi_dsub>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	a315      	add	r3, pc, #84	; (adr r3, 8001758 <get_altitude+0xa0>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	f7fe fede 	bl	80004c8 <__aeabi_dmul>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff f9b0 	bl	8000a78 <__aeabi_d2f>
 8001718:	4603      	mov	r3, r0
 800171a:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 800171c:	4912      	ldr	r1, [pc, #72]	; (8001768 <get_altitude+0xb0>)
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f7ff fcb0 	bl	8001084 <__aeabi_fcmple>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d106      	bne.n	8001738 <get_altitude+0x80>
 800172a:	4910      	ldr	r1, [pc, #64]	; (800176c <get_altitude+0xb4>)
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f7ff fcb3 	bl	8001098 <__aeabi_fcmpge>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <get_altitude+0x88>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2205      	movs	r2, #5
 800173c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return altitude;
 8001740:	68fb      	ldr	r3, [r7, #12]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	f3af 8000 	nop.w
 8001750:	ccd9456c 	.word	0xccd9456c
 8001754:	3fc85b95 	.word	0x3fc85b95
 8001758:	00000000 	.word	0x00000000
 800175c:	40e5a540 	.word	0x40e5a540
 8001760:	47c5e680 	.word	0x47c5e680
 8001764:	3ff00000 	.word	0x3ff00000
 8001768:	c3fa0000 	.word	0xc3fa0000
 800176c:	460ca000 	.word	0x460ca000

08001770 <get_b_counter>:
int get_b_t_counter(void) {
	return b_t_counter;
}


int get_b_counter(void) {
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
	return b_counter;
 8001774:	4b02      	ldr	r3, [pc, #8]	; (8001780 <get_b_counter+0x10>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	20000094 	.word	0x20000094

08001784 <set_b_counter>:

void set_b_counter(unsigned int CLOCK_RATE) {
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

	b_counter++;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <set_b_counter+0x30>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <set_b_counter+0x30>)
 8001794:	6013      	str	r3, [r2, #0]
	if(b_counter > CLOCK_RATE) {
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <set_b_counter+0x30>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4293      	cmp	r3, r2
 80017a0:	d202      	bcs.n	80017a8 <set_b_counter+0x24>
		b_counter = 0;
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <set_b_counter+0x30>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
	}
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000094 	.word	0x20000094

080017b8 <request_range>:
static int u_counter;
char read;
char write = 1;
char error;

void request_range(void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af02      	add	r7, sp, #8



		//char error = 1;

		unsigned char command = 0x51;
 80017be:	2351      	movs	r3, #81	; 0x51
 80017c0:	71bb      	strb	r3, [r7, #6]
		char error = HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
 80017c2:	1dba      	adds	r2, r7, #6
 80017c4:	2364      	movs	r3, #100	; 0x64
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2301      	movs	r3, #1
 80017ca:	21e0      	movs	r1, #224	; 0xe0
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <request_range+0x2c>)
 80017ce:	f002 fd31 	bl	8004234 <HAL_I2C_Master_Transmit>
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
		//HAL_Delay(100);
		write = 0;
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <request_range+0x30>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]

}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	2000009c 	.word	0x2000009c
 80017e8:	20000000 	.word	0x20000000

080017ec <getRange>:

			//HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
int getRange (void)
				{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af02      	add	r7, sp, #8
		//if (!error) {
			read = 0;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <getRange+0x34>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
			write = 1;
 80017f8:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <getRange+0x38>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
			unsigned char range[2];
			HAL_I2C_Master_Receive(&hi2c1, 225, range, 2, I2C_TIMEOUT);
 80017fe:	1d3a      	adds	r2, r7, #4
 8001800:	2364      	movs	r3, #100	; 0x64
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2302      	movs	r3, #2
 8001806:	21e1      	movs	r1, #225	; 0xe1
 8001808:	4807      	ldr	r0, [pc, #28]	; (8001828 <getRange+0x3c>)
 800180a:	f002 fe11 	bl	8004430 <HAL_I2C_Master_Receive>
			return (range[0] << BYTE_SHIFT) | range[1];
 800180e:	793b      	ldrb	r3, [r7, #4]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	797a      	ldrb	r2, [r7, #5]
 8001814:	4313      	orrs	r3, r2



	//return -1;

}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000acc 	.word	0x20000acc
 8001824:	20000000 	.word	0x20000000
 8001828:	2000009c 	.word	0x2000009c

0800182c <set_ucounter>:

void set_ucounter(unsigned int CLOCK_RATE) {
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

	u_counter++;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <set_ucounter+0x30>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	3301      	adds	r3, #1
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <set_ucounter+0x30>)
 800183c:	6013      	str	r3, [r2, #0]
	if(u_counter > CLOCK_RATE) {
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <set_ucounter+0x30>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4293      	cmp	r3, r2
 8001848:	d202      	bcs.n	8001850 <set_ucounter+0x24>
		u_counter = 0;
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <set_ucounter+0x30>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
	}
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000098 	.word	0x20000098

08001860 <get_ucounter>:

int get_ucounter(void) {
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
	return u_counter;
 8001864:	4b02      	ldr	r3, [pc, #8]	; (8001870 <get_ucounter+0x10>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	20000098 	.word	0x20000098

08001874 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f00b fb7f 	bl	800cf98 <asinf>
 800189a:	4603      	mov	r3, r0
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f00b fa67 	bl	800cd80 <cosf>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f00b fb8d 	bl	800cfe4 <sqrtf>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f001 fba6 	bl	800302e <_ZNSaIdED1Ev>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_ZNSt12_Vector_baseIdSaIdEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f001 fb89 	bl	800300e <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_ZNSt6vectorIdSaIdEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ffeb 	bl	80018ec <_ZNSt12_Vector_baseIdSaIdEEC1Ev>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001926:	f001 fff7 	bl	8003918 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 800192a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800192e:	f002 f855 	bl	80039dc <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001932:	f000 f905 	bl	8001b40 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001936:	f000 fbc5 	bl	80020c4 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 800193a:	f000 f951 	bl	8001be0 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 800193e:	f000 fa4d 	bl	8001ddc <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 8001942:	f000 f981 	bl	8001c48 <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 8001946:	f000 fb8d 	bl	8002064 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 800194a:	f000 faa3 	bl	8001e94 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 800194e:	f000 fb2b 	bl	8001fa8 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */

  MPU6050_Baslat();
 8001952:	f000 fc3b 	bl	80021cc <_Z14MPU6050_Baslatv>
  bmp_init(&bmp);
 8001956:	486a      	ldr	r0, [pc, #424]	; (8001b00 <main+0x1e0>)
 8001958:	f7ff fce8 	bl	800132c <bmp_init>
  //Gyro kalibrasyon hatalarını hesapla.
  HAL_Delay(2000);
 800195c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001960:	f002 f83c 	bl	80039dc <HAL_Delay>
  GyroXh=GyroErr(GYRO_X_ADDR)/65.5; GyroYh=GyroErr(GYRO_Y_ADDR)/65.5; GyroZh=GyroErr(GYRO_Z_ADDR)/65.5;
 8001964:	2043      	movs	r0, #67	; 0x43
 8001966:	f000 fe99 	bl	800269c <_Z7GyroErrh>
 800196a:	4603      	mov	r3, r0
 800196c:	4965      	ldr	r1, [pc, #404]	; (8001b04 <main+0x1e4>)
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fa94 	bl	8000e9c <__aeabi_fdiv>
 8001974:	4603      	mov	r3, r0
 8001976:	461a      	mov	r2, r3
 8001978:	4b63      	ldr	r3, [pc, #396]	; (8001b08 <main+0x1e8>)
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	2045      	movs	r0, #69	; 0x45
 800197e:	f000 fe8d 	bl	800269c <_Z7GyroErrh>
 8001982:	4603      	mov	r3, r0
 8001984:	495f      	ldr	r1, [pc, #380]	; (8001b04 <main+0x1e4>)
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fa88 	bl	8000e9c <__aeabi_fdiv>
 800198c:	4603      	mov	r3, r0
 800198e:	461a      	mov	r2, r3
 8001990:	4b5e      	ldr	r3, [pc, #376]	; (8001b0c <main+0x1ec>)
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	2047      	movs	r0, #71	; 0x47
 8001996:	f000 fe81 	bl	800269c <_Z7GyroErrh>
 800199a:	4603      	mov	r3, r0
 800199c:	4959      	ldr	r1, [pc, #356]	; (8001b04 <main+0x1e4>)
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fa7c 	bl	8000e9c <__aeabi_fdiv>
 80019a4:	4603      	mov	r3, r0
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b59      	ldr	r3, [pc, #356]	; (8001b10 <main+0x1f0>)
 80019aa:	601a      	str	r2, [r3, #0]
  AccXh = GyroErr(ACC_X_ADDR); AccYh = GyroErr(ACC_Y_ADDR); AccZh = GyroErr(ACC_Z_ADDR);
 80019ac:	203b      	movs	r0, #59	; 0x3b
 80019ae:	f000 fe75 	bl	800269c <_Z7GyroErrh>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4a57      	ldr	r2, [pc, #348]	; (8001b14 <main+0x1f4>)
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	203d      	movs	r0, #61	; 0x3d
 80019ba:	f000 fe6f 	bl	800269c <_Z7GyroErrh>
 80019be:	4603      	mov	r3, r0
 80019c0:	4a55      	ldr	r2, [pc, #340]	; (8001b18 <main+0x1f8>)
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	203f      	movs	r0, #63	; 0x3f
 80019c6:	f000 fe69 	bl	800269c <_Z7GyroErrh>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4a53      	ldr	r2, [pc, #332]	; (8001b1c <main+0x1fc>)
 80019ce:	6013      	str	r3, [r2, #0]

  //İvmeölçer degerlerini oku
  accX = GyroOku(ACC_X_ADDR);
 80019d0:	203b      	movs	r0, #59	; 0x3b
 80019d2:	f000 fde9 	bl	80025a8 <_Z7GyroOkuh>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff f957 	bl	8000c8c <__aeabi_i2f>
 80019de:	4603      	mov	r3, r0
 80019e0:	4a4f      	ldr	r2, [pc, #316]	; (8001b20 <main+0x200>)
 80019e2:	6013      	str	r3, [r2, #0]
  accY = GyroOku(ACC_Y_ADDR);
 80019e4:	203d      	movs	r0, #61	; 0x3d
 80019e6:	f000 fddf 	bl	80025a8 <_Z7GyroOkuh>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff f94d 	bl	8000c8c <__aeabi_i2f>
 80019f2:	4603      	mov	r3, r0
 80019f4:	4a4b      	ldr	r2, [pc, #300]	; (8001b24 <main+0x204>)
 80019f6:	6013      	str	r3, [r2, #0]
  accZ = GyroOku(ACC_Z_ADDR);
 80019f8:	203f      	movs	r0, #63	; 0x3f
 80019fa:	f000 fdd5 	bl	80025a8 <_Z7GyroOkuh>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff f943 	bl	8000c8c <__aeabi_i2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4a47      	ldr	r2, [pc, #284]	; (8001b28 <main+0x208>)
 8001a0a:	6013      	str	r3, [r2, #0]

  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 8001a0c:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <main+0x200>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a43      	ldr	r2, [pc, #268]	; (8001b20 <main+0x200>)
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	4611      	mov	r1, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f98c 	bl	8000d34 <__aeabi_fmul>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461c      	mov	r4, r3
 8001a20:	4b40      	ldr	r3, [pc, #256]	; (8001b24 <main+0x204>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a3f      	ldr	r2, [pc, #252]	; (8001b24 <main+0x204>)
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	4611      	mov	r1, r2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff f982 	bl	8000d34 <__aeabi_fmul>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4619      	mov	r1, r3
 8001a34:	4620      	mov	r0, r4
 8001a36:	f7ff f875 	bl	8000b24 <__addsf3>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461c      	mov	r4, r3
 8001a3e:	4b3a      	ldr	r3, [pc, #232]	; (8001b28 <main+0x208>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a39      	ldr	r2, [pc, #228]	; (8001b28 <main+0x208>)
 8001a44:	6812      	ldr	r2, [r2, #0]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff f973 	bl	8000d34 <__aeabi_fmul>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4619      	mov	r1, r3
 8001a52:	4620      	mov	r0, r4
 8001a54:	f7ff f866 	bl	8000b24 <__addsf3>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff2e 	bl	80018bc <_ZSt4sqrtf>
 8001a60:	6078      	str	r0, [r7, #4]

  float rad2deg = 57.3248;
 8001a62:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <main+0x20c>)
 8001a64:	603b      	str	r3, [r7, #0]
  EKF.PITCH_OFFSET = -1 * asin(accX/acctop)*rad2deg;
 8001a66:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <main+0x200>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fa15 	bl	8000e9c <__aeabi_fdiv>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff09 	bl	800188c <_ZSt4asinf>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a80:	6839      	ldr	r1, [r7, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff f956 	bl	8000d34 <__aeabi_fmul>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <main+0x210>)
 8001a8e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
  EKF.ROLL_OFFSET  = -1 * asin(accY/acctop)*rad2deg;
 8001a92:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <main+0x204>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff f9ff 	bl	8000e9c <__aeabi_fdiv>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fef3 	bl	800188c <_ZSt4asinf>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001aac:	6839      	ldr	r1, [r7, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff f940 	bl	8000d34 <__aeabi_fmul>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <main+0x210>)
 8001aba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 8001abe:	481d      	ldr	r0, [pc, #116]	; (8001b34 <main+0x214>)
 8001ac0:	f004 fbd6 	bl	8006270 <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 8001ac4:	481c      	ldr	r0, [pc, #112]	; (8001b38 <main+0x218>)
 8001ac6:	f004 fb89 	bl	80061dc <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001aca:	2100      	movs	r1, #0
 8001acc:	481b      	ldr	r0, [pc, #108]	; (8001b3c <main+0x21c>)
 8001ace:	f004 fc71 	bl	80063b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	4819      	ldr	r0, [pc, #100]	; (8001b3c <main+0x21c>)
 8001ad6:	f004 fc6d 	bl	80063b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001ada:	2108      	movs	r1, #8
 8001adc:	4817      	ldr	r0, [pc, #92]	; (8001b3c <main+0x21c>)
 8001ade:	f004 fc69 	bl	80063b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001ae2:	210c      	movs	r1, #12
 8001ae4:	4815      	ldr	r0, [pc, #84]	; (8001b3c <main+0x21c>)
 8001ae6:	f004 fc65 	bl	80063b4 <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8001aea:	2108      	movs	r1, #8
 8001aec:	4812      	ldr	r0, [pc, #72]	; (8001b38 <main+0x218>)
 8001aee:	f004 fd5b 	bl	80065a8 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SendTelem();
 8001af2:	f000 fd2f 	bl	8002554 <_Z9SendTelemv>
	  Check_Arm();
 8001af6:	f000 fb9d 	bl	8002234 <_Z9Check_Armv>
	  Check_Disarm();
 8001afa:	f000 fbf9 	bl	80022f0 <_Z12Check_Disarmv>
	  SendTelem();
 8001afe:	e7f8      	b.n	8001af2 <main+0x1d2>
 8001b00:	20000a7c 	.word	0x20000a7c
 8001b04:	42830000 	.word	0x42830000
 8001b08:	20000268 	.word	0x20000268
 8001b0c:	2000026c 	.word	0x2000026c
 8001b10:	20000270 	.word	0x20000270
 8001b14:	20000274 	.word	0x20000274
 8001b18:	20000278 	.word	0x20000278
 8001b1c:	2000027c 	.word	0x2000027c
 8001b20:	2000025c 	.word	0x2000025c
 8001b24:	20000260 	.word	0x20000260
 8001b28:	20000264 	.word	0x20000264
 8001b2c:	42654c98 	.word	0x42654c98
 8001b30:	200003e8 	.word	0x200003e8
 8001b34:	20000138 	.word	0x20000138
 8001b38:	20000180 	.word	0x20000180
 8001b3c:	200000f0 	.word	0x200000f0

08001b40 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b090      	sub	sp, #64	; 0x40
 8001b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b46:	f107 0318 	add.w	r3, r7, #24
 8001b4a:	2228      	movs	r2, #40	; 0x28
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00d f8ec 	bl	800ed2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b62:	2301      	movs	r3, #1
 8001b64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b70:	2301      	movs	r3, #1
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b74:	2302      	movs	r3, #2
 8001b76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b7e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b84:	f107 0318 	add.w	r3, r7, #24
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 febd 	bl	8005908 <HAL_RCC_OscConfig>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	bf14      	ite	ne
 8001b94:	2301      	movne	r3, #1
 8001b96:	2300      	moveq	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8001b9e:	f001 fa31 	bl	8003004 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba2:	230f      	movs	r3, #15
 8001ba4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	2102      	movs	r1, #2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f004 f923 	bl	8005e08 <HAL_RCC_ClockConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf14      	ite	ne
 8001bc8:	2301      	movne	r3, #1
 8001bca:	2300      	moveq	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8001bd2:	f001 fa17 	bl	8003004 <Error_Handler>
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	3740      	adds	r7, #64	; 0x40
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001be4:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <_ZL12MX_I2C1_Initv+0x5c>)
 8001be6:	4a16      	ldr	r2, [pc, #88]	; (8001c40 <_ZL12MX_I2C1_Initv+0x60>)
 8001be8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001bea:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <_ZL12MX_I2C1_Initv+0x5c>)
 8001bec:	4a15      	ldr	r2, [pc, #84]	; (8001c44 <_ZL12MX_I2C1_Initv+0x64>)
 8001bee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <_ZL12MX_I2C1_Initv+0x5c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <_ZL12MX_I2C1_Initv+0x5c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <_ZL12MX_I2C1_Initv+0x5c>)
 8001bfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c04:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <_ZL12MX_I2C1_Initv+0x5c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <_ZL12MX_I2C1_Initv+0x5c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c10:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <_ZL12MX_I2C1_Initv+0x5c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <_ZL12MX_I2C1_Initv+0x5c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c1c:	4807      	ldr	r0, [pc, #28]	; (8001c3c <_ZL12MX_I2C1_Initv+0x5c>)
 8001c1e:	f002 f9c5 	bl	8003fac <HAL_I2C_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf14      	ite	ne
 8001c28:	2301      	movne	r3, #1
 8001c2a:	2300      	moveq	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001c32:	f001 f9e7 	bl	8003004 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	2000009c 	.word	0x2000009c
 8001c40:	40005400 	.word	0x40005400
 8001c44:	00061a80 	.word	0x00061a80

08001c48 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b092      	sub	sp, #72	; 0x48
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
 8001c68:	615a      	str	r2, [r3, #20]
 8001c6a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	2220      	movs	r2, #32
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f00d f85a 	bl	800ed2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c78:	4b56      	ldr	r3, [pc, #344]	; (8001dd4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001c7a:	4a57      	ldr	r2, [pc, #348]	; (8001dd8 <_ZL12MX_TIM1_Initv+0x190>)
 8001c7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001c7e:	4b55      	ldr	r3, [pc, #340]	; (8001dd4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001c80:	2247      	movs	r2, #71	; 0x47
 8001c82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c84:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8001c8a:	4b52      	ldr	r3, [pc, #328]	; (8001dd4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001c8c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001c90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c92:	4b50      	ldr	r3, [pc, #320]	; (8001dd4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c98:	4b4e      	ldr	r3, [pc, #312]	; (8001dd4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c9e:	4b4d      	ldr	r3, [pc, #308]	; (8001dd4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ca4:	484b      	ldr	r0, [pc, #300]	; (8001dd4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001ca6:	f004 fb35 	bl	8006314 <HAL_TIM_PWM_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bf14      	ite	ne
 8001cb0:	2301      	movne	r3, #1
 8001cb2:	2300      	moveq	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8001cba:	f001 f9a3 	bl	8003004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4841      	ldr	r0, [pc, #260]	; (8001dd4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001cce:	f005 fca1 	bl	8007614 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	bf14      	ite	ne
 8001cd8:	2301      	movne	r3, #1
 8001cda:	2300      	moveq	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8001ce2:	f001 f98f 	bl	8003004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce6:	2360      	movs	r3, #96	; 0x60
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d06:	2200      	movs	r2, #0
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4832      	ldr	r0, [pc, #200]	; (8001dd4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001d0c:	f004 feee 	bl	8006aec <HAL_TIM_PWM_ConfigChannel>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	bf14      	ite	ne
 8001d16:	2301      	movne	r3, #1
 8001d18:	2300      	moveq	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001d20:	f001 f970 	bl	8003004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d28:	2204      	movs	r2, #4
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4829      	ldr	r0, [pc, #164]	; (8001dd4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001d2e:	f004 fedd 	bl	8006aec <HAL_TIM_PWM_ConfigChannel>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	bf14      	ite	ne
 8001d38:	2301      	movne	r3, #1
 8001d3a:	2300      	moveq	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8001d42:	f001 f95f 	bl	8003004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4821      	ldr	r0, [pc, #132]	; (8001dd4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001d50:	f004 fecc 	bl	8006aec <HAL_TIM_PWM_ConfigChannel>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bf14      	ite	ne
 8001d5a:	2301      	movne	r3, #1
 8001d5c:	2300      	moveq	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8001d64:	f001 f94e 	bl	8003004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6c:	220c      	movs	r2, #12
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4818      	ldr	r0, [pc, #96]	; (8001dd4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001d72:	f004 febb 	bl	8006aec <HAL_TIM_PWM_ConfigChannel>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bf14      	ite	ne
 8001d7c:	2301      	movne	r3, #1
 8001d7e:	2300      	moveq	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 8001d86:	f001 f93d 	bl	8003004 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001da2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	4619      	mov	r1, r3
 8001dac:	4809      	ldr	r0, [pc, #36]	; (8001dd4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001dae:	f005 fc8f 	bl	80076d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bf14      	ite	ne
 8001db8:	2301      	movne	r3, #1
 8001dba:	2300      	moveq	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <_ZL12MX_TIM1_Initv+0x17e>
  {
    Error_Handler();
 8001dc2:	f001 f91f 	bl	8003004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001dc6:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <_ZL12MX_TIM1_Initv+0x18c>)
 8001dc8:	f001 fc68 	bl	800369c <HAL_TIM_MspPostInit>

}
 8001dcc:	bf00      	nop
 8001dce:	3748      	adds	r7, #72	; 0x48
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	200000f0 	.word	0x200000f0
 8001dd8:	40012c00 	.word	0x40012c00

08001ddc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001de2:	f107 0308 	add.w	r3, r7, #8
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df0:	463b      	mov	r3, r7
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001df8:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <_ZL12MX_TIM2_Initv+0xb4>)
 8001dfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dfe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001e00:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e02:	2247      	movs	r2, #71	; 0x47
 8001e04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e06:	4b22      	ldr	r3, [pc, #136]	; (8001e90 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250;
 8001e0c:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e0e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001e12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e14:	4b1e      	ldr	r3, [pc, #120]	; (8001e90 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e20:	481b      	ldr	r0, [pc, #108]	; (8001e90 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e22:	f004 f98b 	bl	800613c <HAL_TIM_Base_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf14      	ite	ne
 8001e2c:	2301      	movne	r3, #1
 8001e2e:	2300      	moveq	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001e36:	f001 f8e5 	bl	8003004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e40:	f107 0308 	add.w	r3, r7, #8
 8001e44:	4619      	mov	r1, r3
 8001e46:	4812      	ldr	r0, [pc, #72]	; (8001e90 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e48:	f004 ff0e 	bl	8006c68 <HAL_TIM_ConfigClockSource>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bf14      	ite	ne
 8001e52:	2301      	movne	r3, #1
 8001e54:	2300      	moveq	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8001e5c:	f001 f8d2 	bl	8003004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e60:	2300      	movs	r3, #0
 8001e62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e68:	463b      	mov	r3, r7
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4808      	ldr	r0, [pc, #32]	; (8001e90 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e6e:	f005 fbd1 	bl	8007614 <HAL_TIMEx_MasterConfigSynchronization>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf14      	ite	ne
 8001e78:	2301      	movne	r3, #1
 8001e7a:	2300      	moveq	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001e82:	f001 f8bf 	bl	8003004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000138 	.word	0x20000138

08001e94 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e9a:	f107 0318 	add.w	r3, r7, #24
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ebe:	4b38      	ldr	r3, [pc, #224]	; (8001fa0 <_ZL12MX_TIM3_Initv+0x10c>)
 8001ec0:	4a38      	ldr	r2, [pc, #224]	; (8001fa4 <_ZL12MX_TIM3_Initv+0x110>)
 8001ec2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001ec4:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <_ZL12MX_TIM3_Initv+0x10c>)
 8001ec6:	2247      	movs	r2, #71	; 0x47
 8001ec8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eca:	4b35      	ldr	r3, [pc, #212]	; (8001fa0 <_ZL12MX_TIM3_Initv+0x10c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ed0:	4b33      	ldr	r3, [pc, #204]	; (8001fa0 <_ZL12MX_TIM3_Initv+0x10c>)
 8001ed2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed8:	4b31      	ldr	r3, [pc, #196]	; (8001fa0 <_ZL12MX_TIM3_Initv+0x10c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ede:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <_ZL12MX_TIM3_Initv+0x10c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ee4:	482e      	ldr	r0, [pc, #184]	; (8001fa0 <_ZL12MX_TIM3_Initv+0x10c>)
 8001ee6:	f004 f929 	bl	800613c <HAL_TIM_Base_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	bf14      	ite	ne
 8001ef0:	2301      	movne	r3, #1
 8001ef2:	2300      	moveq	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <_ZL12MX_TIM3_Initv+0x6a>
  {
    Error_Handler();
 8001efa:	f001 f883 	bl	8003004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f02:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f04:	f107 0318 	add.w	r3, r7, #24
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4825      	ldr	r0, [pc, #148]	; (8001fa0 <_ZL12MX_TIM3_Initv+0x10c>)
 8001f0c:	f004 feac 	bl	8006c68 <HAL_TIM_ConfigClockSource>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	bf14      	ite	ne
 8001f16:	2301      	movne	r3, #1
 8001f18:	2300      	moveq	r3, #0
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <_ZL12MX_TIM3_Initv+0x90>
  {
    Error_Handler();
 8001f20:	f001 f870 	bl	8003004 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001f24:	481e      	ldr	r0, [pc, #120]	; (8001fa0 <_ZL12MX_TIM3_Initv+0x10c>)
 8001f26:	f004 fae7 	bl	80064f8 <HAL_TIM_IC_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf14      	ite	ne
 8001f30:	2301      	movne	r3, #1
 8001f32:	2300      	moveq	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 8001f3a:	f001 f863 	bl	8003004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f46:	f107 0310 	add.w	r3, r7, #16
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4814      	ldr	r0, [pc, #80]	; (8001fa0 <_ZL12MX_TIM3_Initv+0x10c>)
 8001f4e:	f005 fb61 	bl	8007614 <HAL_TIMEx_MasterConfigSynchronization>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf14      	ite	ne
 8001f58:	2301      	movne	r3, #1
 8001f5a:	2300      	moveq	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <_ZL12MX_TIM3_Initv+0xd2>
  {
    Error_Handler();
 8001f62:	f001 f84f 	bl	8003004 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f66:	2300      	movs	r3, #0
 8001f68:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001f76:	463b      	mov	r3, r7
 8001f78:	2208      	movs	r2, #8
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4808      	ldr	r0, [pc, #32]	; (8001fa0 <_ZL12MX_TIM3_Initv+0x10c>)
 8001f7e:	f004 fd21 	bl	80069c4 <HAL_TIM_IC_ConfigChannel>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	bf14      	ite	ne
 8001f88:	2301      	movne	r3, #1
 8001f8a:	2300      	moveq	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <_ZL12MX_TIM3_Initv+0x102>
  {
    Error_Handler();
 8001f92:	f001 f837 	bl	8003004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	3728      	adds	r7, #40	; 0x28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000180 	.word	0x20000180
 8001fa4:	40000400 	.word	0x40000400

08001fa8 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fae:	f107 0308 	add.w	r3, r7, #8
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fc4:	4b25      	ldr	r3, [pc, #148]	; (800205c <_ZL12MX_TIM4_Initv+0xb4>)
 8001fc6:	4a26      	ldr	r2, [pc, #152]	; (8002060 <_ZL12MX_TIM4_Initv+0xb8>)
 8001fc8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 8001fca:	4b24      	ldr	r3, [pc, #144]	; (800205c <_ZL12MX_TIM4_Initv+0xb4>)
 8001fcc:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001fd0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd2:	4b22      	ldr	r3, [pc, #136]	; (800205c <_ZL12MX_TIM4_Initv+0xb4>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001fd8:	4b20      	ldr	r3, [pc, #128]	; (800205c <_ZL12MX_TIM4_Initv+0xb4>)
 8001fda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fde:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe0:	4b1e      	ldr	r3, [pc, #120]	; (800205c <_ZL12MX_TIM4_Initv+0xb4>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	; (800205c <_ZL12MX_TIM4_Initv+0xb4>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fec:	481b      	ldr	r0, [pc, #108]	; (800205c <_ZL12MX_TIM4_Initv+0xb4>)
 8001fee:	f004 f8a5 	bl	800613c <HAL_TIM_Base_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf14      	ite	ne
 8001ff8:	2301      	movne	r3, #1
 8001ffa:	2300      	moveq	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <_ZL12MX_TIM4_Initv+0x5e>
  {
    Error_Handler();
 8002002:	f000 ffff 	bl	8003004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800200a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800200c:	f107 0308 	add.w	r3, r7, #8
 8002010:	4619      	mov	r1, r3
 8002012:	4812      	ldr	r0, [pc, #72]	; (800205c <_ZL12MX_TIM4_Initv+0xb4>)
 8002014:	f004 fe28 	bl	8006c68 <HAL_TIM_ConfigClockSource>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	bf14      	ite	ne
 800201e:	2301      	movne	r3, #1
 8002020:	2300      	moveq	r3, #0
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 8002028:	f000 ffec 	bl	8003004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202c:	2300      	movs	r3, #0
 800202e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002034:	463b      	mov	r3, r7
 8002036:	4619      	mov	r1, r3
 8002038:	4808      	ldr	r0, [pc, #32]	; (800205c <_ZL12MX_TIM4_Initv+0xb4>)
 800203a:	f005 faeb 	bl	8007614 <HAL_TIMEx_MasterConfigSynchronization>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf14      	ite	ne
 8002044:	2301      	movne	r3, #1
 8002046:	2300      	moveq	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <_ZL12MX_TIM4_Initv+0xaa>
  {
    Error_Handler();
 800204e:	f000 ffd9 	bl	8003004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200001c8 	.word	0x200001c8
 8002060:	40000800 	.word	0x40000800

08002064 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800206a:	4a14      	ldr	r2, [pc, #80]	; (80020bc <_ZL19MX_USART2_UART_Initv+0x58>)
 800206c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002070:	4a13      	ldr	r2, [pc, #76]	; (80020c0 <_ZL19MX_USART2_UART_Initv+0x5c>)
 8002072:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800207c:	2200      	movs	r2, #0
 800207e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002080:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002088:	220c      	movs	r2, #12
 800208a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800208c:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800208e:	2200      	movs	r2, #0
 8002090:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002094:	2200      	movs	r2, #0
 8002096:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002098:	4807      	ldr	r0, [pc, #28]	; (80020b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800209a:	f005 fb7c 	bl	8007796 <HAL_UART_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf14      	ite	ne
 80020a4:	2301      	movne	r3, #1
 80020a6:	2300      	moveq	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 80020ae:	f000 ffa9 	bl	8003004 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000210 	.word	0x20000210
 80020bc:	40004400 	.word	0x40004400
 80020c0:	000f4240 	.word	0x000f4240

080020c4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ca:	f107 0310 	add.w	r3, r7, #16
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	605a      	str	r2, [r3, #4]
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d8:	4b38      	ldr	r3, [pc, #224]	; (80021bc <_ZL12MX_GPIO_Initv+0xf8>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	4a37      	ldr	r2, [pc, #220]	; (80021bc <_ZL12MX_GPIO_Initv+0xf8>)
 80020de:	f043 0310 	orr.w	r3, r3, #16
 80020e2:	6193      	str	r3, [r2, #24]
 80020e4:	4b35      	ldr	r3, [pc, #212]	; (80021bc <_ZL12MX_GPIO_Initv+0xf8>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f003 0310 	and.w	r3, r3, #16
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020f0:	4b32      	ldr	r3, [pc, #200]	; (80021bc <_ZL12MX_GPIO_Initv+0xf8>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	4a31      	ldr	r2, [pc, #196]	; (80021bc <_ZL12MX_GPIO_Initv+0xf8>)
 80020f6:	f043 0320 	orr.w	r3, r3, #32
 80020fa:	6193      	str	r3, [r2, #24]
 80020fc:	4b2f      	ldr	r3, [pc, #188]	; (80021bc <_ZL12MX_GPIO_Initv+0xf8>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002108:	4b2c      	ldr	r3, [pc, #176]	; (80021bc <_ZL12MX_GPIO_Initv+0xf8>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	4a2b      	ldr	r2, [pc, #172]	; (80021bc <_ZL12MX_GPIO_Initv+0xf8>)
 800210e:	f043 0304 	orr.w	r3, r3, #4
 8002112:	6193      	str	r3, [r2, #24]
 8002114:	4b29      	ldr	r3, [pc, #164]	; (80021bc <_ZL12MX_GPIO_Initv+0xf8>)
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002120:	4b26      	ldr	r3, [pc, #152]	; (80021bc <_ZL12MX_GPIO_Initv+0xf8>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	4a25      	ldr	r2, [pc, #148]	; (80021bc <_ZL12MX_GPIO_Initv+0xf8>)
 8002126:	f043 0308 	orr.w	r3, r3, #8
 800212a:	6193      	str	r3, [r2, #24]
 800212c:	4b23      	ldr	r3, [pc, #140]	; (80021bc <_ZL12MX_GPIO_Initv+0xf8>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	603b      	str	r3, [r7, #0]
 8002136:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002138:	2200      	movs	r2, #0
 800213a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800213e:	4820      	ldr	r0, [pc, #128]	; (80021c0 <_ZL12MX_GPIO_Initv+0xfc>)
 8002140:	f001 ff02 	bl	8003f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8002144:	2200      	movs	r2, #0
 8002146:	2102      	movs	r1, #2
 8002148:	481e      	ldr	r0, [pc, #120]	; (80021c4 <_ZL12MX_GPIO_Initv+0x100>)
 800214a:	f001 fefd 	bl	8003f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800214e:	2200      	movs	r2, #0
 8002150:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002154:	481c      	ldr	r0, [pc, #112]	; (80021c8 <_ZL12MX_GPIO_Initv+0x104>)
 8002156:	f001 fef7 	bl	8003f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800215a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800215e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002160:	2301      	movs	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2302      	movs	r3, #2
 800216a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	4619      	mov	r1, r3
 8002172:	4813      	ldr	r0, [pc, #76]	; (80021c0 <_ZL12MX_GPIO_Initv+0xfc>)
 8002174:	f001 fd64 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002178:	2302      	movs	r3, #2
 800217a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217c:	2301      	movs	r3, #1
 800217e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	2302      	movs	r3, #2
 8002186:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	4619      	mov	r1, r3
 800218e:	480d      	ldr	r0, [pc, #52]	; (80021c4 <_ZL12MX_GPIO_Initv+0x100>)
 8002190:	f001 fd56 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002198:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219a:	2301      	movs	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2302      	movs	r3, #2
 80021a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	f107 0310 	add.w	r3, r7, #16
 80021aa:	4619      	mov	r1, r3
 80021ac:	4806      	ldr	r0, [pc, #24]	; (80021c8 <_ZL12MX_GPIO_Initv+0x104>)
 80021ae:	f001 fd47 	bl	8003c40 <HAL_GPIO_Init>

}
 80021b2:	bf00      	nop
 80021b4:	3720      	adds	r7, #32
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40011000 	.word	0x40011000
 80021c4:	40010c00 	.word	0x40010c00
 80021c8:	40010800 	.word	0x40010800

080021cc <_Z14MPU6050_Baslatv>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 80021d2:	2300      	movs	r3, #0
 80021d4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 80021d6:	2305      	movs	r3, #5
 80021d8:	9302      	str	r3, [sp, #8]
 80021da:	2301      	movs	r3, #1
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	1dfb      	adds	r3, r7, #7
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2301      	movs	r3, #1
 80021e4:	226b      	movs	r2, #107	; 0x6b
 80021e6:	21d0      	movs	r1, #208	; 0xd0
 80021e8:	4811      	ldr	r0, [pc, #68]	; (8002230 <_Z14MPU6050_Baslatv+0x64>)
 80021ea:	f002 fb81 	bl	80048f0 <HAL_I2C_Mem_Write>
	config = 0x08;
 80021ee:	2308      	movs	r3, #8
 80021f0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 250 d/s'ye ayarlandi.
 80021f2:	2305      	movs	r3, #5
 80021f4:	9302      	str	r3, [sp, #8]
 80021f6:	2301      	movs	r3, #1
 80021f8:	9301      	str	r3, [sp, #4]
 80021fa:	1dfb      	adds	r3, r7, #7
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	2301      	movs	r3, #1
 8002200:	221b      	movs	r2, #27
 8002202:	21d0      	movs	r1, #208	; 0xd0
 8002204:	480a      	ldr	r0, [pc, #40]	; (8002230 <_Z14MPU6050_Baslatv+0x64>)
 8002206:	f002 fb73 	bl	80048f0 <HAL_I2C_Mem_Write>
	config = 0x10;
 800220a:	2310      	movs	r3, #16
 800220c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, ACC_CONF_REG, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 800220e:	2305      	movs	r3, #5
 8002210:	9302      	str	r3, [sp, #8]
 8002212:	2301      	movs	r3, #1
 8002214:	9301      	str	r3, [sp, #4]
 8002216:	1dfb      	adds	r3, r7, #7
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	2301      	movs	r3, #1
 800221c:	221c      	movs	r2, #28
 800221e:	21d0      	movs	r1, #208	; 0xd0
 8002220:	4803      	ldr	r0, [pc, #12]	; (8002230 <_Z14MPU6050_Baslatv+0x64>)
 8002222:	f002 fb65 	bl	80048f0 <HAL_I2C_Mem_Write>
	//config = 0x04; //0x04
	//HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_DLPF_REG, 1, &config, 1, 5); //Low Pass Filter 94 Hz'e ayarlandı


}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	2000009c 	.word	0x2000009c

08002234 <_Z9Check_Armv>:


void Check_Arm() {
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	if(!armed) {
 8002238:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <_Z9Check_Armv+0x9c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	f083 0301 	eor.w	r3, r3, #1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d041      	beq.n	80022ca <_Z9Check_Armv+0x96>
		if((ch[2] < 1100) && (ch[3] > 1700)) {
 8002246:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <_Z9Check_Armv+0xa0>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f240 424b 	movw	r2, #1099	; 0x44b
 800224e:	4293      	cmp	r3, r2
 8002250:	dc37      	bgt.n	80022c2 <_Z9Check_Armv+0x8e>
 8002252:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <_Z9Check_Armv+0xa0>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800225a:	4293      	cmp	r3, r2
 800225c:	dd31      	ble.n	80022c2 <_Z9Check_Armv+0x8e>
				if(!arm_start){
 800225e:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <_Z9Check_Armv+0xa4>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	f083 0301 	eor.w	r3, r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 800226c:	f001 fbac 	bl	80039c8 <HAL_GetTick>
 8002270:	4603      	mov	r3, r0
 8002272:	461a      	mov	r2, r3
 8002274:	4b19      	ldr	r3, [pc, #100]	; (80022dc <_Z9Check_Armv+0xa8>)
 8002276:	601a      	str	r2, [r3, #0]
					arm_start = true;
 8002278:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <_Z9Check_Armv+0xa4>)
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 800227e:	f001 fba3 	bl	80039c8 <HAL_GetTick>
 8002282:	4603      	mov	r3, r0
 8002284:	4a15      	ldr	r2, [pc, #84]	; (80022dc <_Z9Check_Armv+0xa8>)
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800228e:	4293      	cmp	r3, r2
 8002290:	bf8c      	ite	hi
 8002292:	2301      	movhi	r3, #1
 8002294:	2300      	movls	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d016      	beq.n	80022ca <_Z9Check_Armv+0x96>
					controller.pid_roll.reset();
 800229c:	4810      	ldr	r0, [pc, #64]	; (80022e0 <_Z9Check_Armv+0xac>)
 800229e:	f00a fb0d 	bl	800c8bc <_ZN3PID5resetEv>
					controller.pid_pitch.reset();
 80022a2:	4810      	ldr	r0, [pc, #64]	; (80022e4 <_Z9Check_Armv+0xb0>)
 80022a4:	f00a fb0a 	bl	800c8bc <_ZN3PID5resetEv>
					controller.pid_yaw.reset();
 80022a8:	480f      	ldr	r0, [pc, #60]	; (80022e8 <_Z9Check_Armv+0xb4>)
 80022aa:	f00a fb07 	bl	800c8bc <_ZN3PID5resetEv>
					armed = true;
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <_Z9Check_Armv+0x9c>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80022b4:	2201      	movs	r2, #1
 80022b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022ba:	480c      	ldr	r0, [pc, #48]	; (80022ec <_Z9Check_Armv+0xb8>)
 80022bc:	f001 fe44 	bl	8003f48 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - arm_timer > 3000) {
 80022c0:	e003      	b.n	80022ca <_Z9Check_Armv+0x96>
				}

		}

		else {
			arm_start = false;
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <_Z9Check_Armv+0xa4>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80022c8:	e7ff      	b.n	80022ca <_Z9Check_Armv+0x96>
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000a49 	.word	0x20000a49
 80022d4:	20000a14 	.word	0x20000a14
 80022d8:	20000a48 	.word	0x20000a48
 80022dc:	20000a3c 	.word	0x20000a3c
 80022e0:	20000798 	.word	0x20000798
 80022e4:	20000828 	.word	0x20000828
 80022e8:	200008b8 	.word	0x200008b8
 80022ec:	40010800 	.word	0x40010800

080022f0 <_Z12Check_Disarmv>:

void Check_Disarm() {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
	if(armed) {
 80022f4:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <_Z12Check_Disarmv+0x84>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d038      	beq.n	800236e <_Z12Check_Disarmv+0x7e>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 80022fc:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <_Z12Check_Disarmv+0x88>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f240 424b 	movw	r2, #1099	; 0x44b
 8002304:	4293      	cmp	r3, r2
 8002306:	dc2e      	bgt.n	8002366 <_Z12Check_Disarmv+0x76>
 8002308:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <_Z12Check_Disarmv+0x88>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f240 424b 	movw	r2, #1099	; 0x44b
 8002310:	4293      	cmp	r3, r2
 8002312:	dc28      	bgt.n	8002366 <_Z12Check_Disarmv+0x76>
				if(!disarm_start){
 8002314:	4b19      	ldr	r3, [pc, #100]	; (800237c <_Z12Check_Disarmv+0x8c>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	f083 0301 	eor.w	r3, r3, #1
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d008      	beq.n	8002334 <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 8002322:	f001 fb51 	bl	80039c8 <HAL_GetTick>
 8002326:	4603      	mov	r3, r0
 8002328:	461a      	mov	r2, r3
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <_Z12Check_Disarmv+0x90>)
 800232c:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 800232e:	4b13      	ldr	r3, [pc, #76]	; (800237c <_Z12Check_Disarmv+0x8c>)
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 8002334:	f001 fb48 	bl	80039c8 <HAL_GetTick>
 8002338:	4603      	mov	r3, r0
 800233a:	4a11      	ldr	r2, [pc, #68]	; (8002380 <_Z12Check_Disarmv+0x90>)
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	1a9b      	subs	r3, r3, r2
 8002340:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002344:	4293      	cmp	r3, r2
 8002346:	bf8c      	ite	hi
 8002348:	2301      	movhi	r3, #1
 800234a:	2300      	movls	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00d      	beq.n	800236e <_Z12Check_Disarmv+0x7e>
					armed = false;
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <_Z12Check_Disarmv+0x84>)
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8002358:	2200      	movs	r2, #0
 800235a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800235e:	4809      	ldr	r0, [pc, #36]	; (8002384 <_Z12Check_Disarmv+0x94>)
 8002360:	f001 fdf2 	bl	8003f48 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 8002364:	e003      	b.n	800236e <_Z12Check_Disarmv+0x7e>
				}

		}

		else {
			disarm_start = false;
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <_Z12Check_Disarmv+0x8c>)
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800236c:	e7ff      	b.n	800236e <_Z12Check_Disarmv+0x7e>
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000a49 	.word	0x20000a49
 8002378:	20000a14 	.word	0x20000a14
 800237c:	20000a4b 	.word	0x20000a4b
 8002380:	20000a40 	.word	0x20000a40
 8002384:	40010800 	.word	0x40010800

08002388 <_Z9TelemPackv>:

void TelemPack() {
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 800238c:	4b68      	ldr	r3, [pc, #416]	; (8002530 <_Z9TelemPackv+0x1a8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a68      	ldr	r2, [pc, #416]	; (8002534 <_Z9TelemPackv+0x1ac>)
 8002392:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 8002394:	4b66      	ldr	r3, [pc, #408]	; (8002530 <_Z9TelemPackv+0x1a8>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4a66      	ldr	r2, [pc, #408]	; (8002534 <_Z9TelemPackv+0x1ac>)
 800239a:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 800239c:	4b64      	ldr	r3, [pc, #400]	; (8002530 <_Z9TelemPackv+0x1a8>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a64      	ldr	r2, [pc, #400]	; (8002534 <_Z9TelemPackv+0x1ac>)
 80023a2:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 80023a4:	4b64      	ldr	r3, [pc, #400]	; (8002538 <_Z9TelemPackv+0x1b0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	4b62      	ldr	r3, [pc, #392]	; (8002534 <_Z9TelemPackv+0x1ac>)
 80023ac:	861a      	strh	r2, [r3, #48]	; 0x30
	  telem_pack.pwm.w2 = controller_output[1];
 80023ae:	4b62      	ldr	r3, [pc, #392]	; (8002538 <_Z9TelemPackv+0x1b0>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	4b5f      	ldr	r3, [pc, #380]	; (8002534 <_Z9TelemPackv+0x1ac>)
 80023b6:	865a      	strh	r2, [r3, #50]	; 0x32
	  telem_pack.pwm.w3 = controller_output[2];
 80023b8:	4b5f      	ldr	r3, [pc, #380]	; (8002538 <_Z9TelemPackv+0x1b0>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	b29a      	uxth	r2, r3
 80023be:	4b5d      	ldr	r3, [pc, #372]	; (8002534 <_Z9TelemPackv+0x1ac>)
 80023c0:	869a      	strh	r2, [r3, #52]	; 0x34
	  telem_pack.pwm.w4 = controller_output[3];
 80023c2:	4b5d      	ldr	r3, [pc, #372]	; (8002538 <_Z9TelemPackv+0x1b0>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	4b5a      	ldr	r3, [pc, #360]	; (8002534 <_Z9TelemPackv+0x1ac>)
 80023ca:	86da      	strh	r2, [r3, #54]	; 0x36

	  telem_pack.attitude_des.roll  = state_des.angles[0];
 80023cc:	4b5b      	ldr	r3, [pc, #364]	; (800253c <_Z9TelemPackv+0x1b4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a58      	ldr	r2, [pc, #352]	; (8002534 <_Z9TelemPackv+0x1ac>)
 80023d2:	60d3      	str	r3, [r2, #12]
	  telem_pack.attitude_des.pitch = state_des.angles[1];
 80023d4:	4b59      	ldr	r3, [pc, #356]	; (800253c <_Z9TelemPackv+0x1b4>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4a56      	ldr	r2, [pc, #344]	; (8002534 <_Z9TelemPackv+0x1ac>)
 80023da:	6113      	str	r3, [r2, #16]
	  telem_pack.attitude_des.yaw   = state_des.angles[2];
 80023dc:	4b57      	ldr	r3, [pc, #348]	; (800253c <_Z9TelemPackv+0x1b4>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a54      	ldr	r2, [pc, #336]	; (8002534 <_Z9TelemPackv+0x1ac>)
 80023e2:	6153      	str	r3, [r2, #20]

	  telem_pack.attitude_rate.roll  = state.rates[0];
 80023e4:	4b52      	ldr	r3, [pc, #328]	; (8002530 <_Z9TelemPackv+0x1a8>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4a52      	ldr	r2, [pc, #328]	; (8002534 <_Z9TelemPackv+0x1ac>)
 80023ea:	6193      	str	r3, [r2, #24]
	  telem_pack.attitude_rate.pitch = state.rates[1];
 80023ec:	4b50      	ldr	r3, [pc, #320]	; (8002530 <_Z9TelemPackv+0x1a8>)
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	4a50      	ldr	r2, [pc, #320]	; (8002534 <_Z9TelemPackv+0x1ac>)
 80023f2:	61d3      	str	r3, [r2, #28]
	  telem_pack.attitude_rate.yaw 	 = state.rates[2];
 80023f4:	4b4e      	ldr	r3, [pc, #312]	; (8002530 <_Z9TelemPackv+0x1a8>)
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	4a4e      	ldr	r2, [pc, #312]	; (8002534 <_Z9TelemPackv+0x1ac>)
 80023fa:	6213      	str	r3, [r2, #32]

	  telem_pack.attitude_rate_des.roll =  state_des.rates[0];
 80023fc:	4b4f      	ldr	r3, [pc, #316]	; (800253c <_Z9TelemPackv+0x1b4>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4a4c      	ldr	r2, [pc, #304]	; (8002534 <_Z9TelemPackv+0x1ac>)
 8002402:	6253      	str	r3, [r2, #36]	; 0x24
	  telem_pack.attitude_rate_des.pitch = state_des.rates[1];
 8002404:	4b4d      	ldr	r3, [pc, #308]	; (800253c <_Z9TelemPackv+0x1b4>)
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	4a4a      	ldr	r2, [pc, #296]	; (8002534 <_Z9TelemPackv+0x1ac>)
 800240a:	6293      	str	r3, [r2, #40]	; 0x28

	  telem_pack.ekf.roll_acc  = EKF.roll_acc;
 800240c:	4b4c      	ldr	r3, [pc, #304]	; (8002540 <_Z9TelemPackv+0x1b8>)
 800240e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002412:	4a48      	ldr	r2, [pc, #288]	; (8002534 <_Z9TelemPackv+0x1ac>)
 8002414:	6393      	str	r3, [r2, #56]	; 0x38
	  telem_pack.ekf.pitch_acc = EKF.pitch_acc;
 8002416:	4b4a      	ldr	r3, [pc, #296]	; (8002540 <_Z9TelemPackv+0x1b8>)
 8002418:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800241c:	4a45      	ldr	r2, [pc, #276]	; (8002534 <_Z9TelemPackv+0x1ac>)
 800241e:	63d3      	str	r3, [r2, #60]	; 0x3c

	  telem_pack.ekf.roll_gyro  = gyroX;
 8002420:	4b48      	ldr	r3, [pc, #288]	; (8002544 <_Z9TelemPackv+0x1bc>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a43      	ldr	r2, [pc, #268]	; (8002534 <_Z9TelemPackv+0x1ac>)
 8002426:	6413      	str	r3, [r2, #64]	; 0x40
	  telem_pack.ekf.pitch_gyro = gyroY;
 8002428:	4b47      	ldr	r3, [pc, #284]	; (8002548 <_Z9TelemPackv+0x1c0>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a41      	ldr	r2, [pc, #260]	; (8002534 <_Z9TelemPackv+0x1ac>)
 800242e:	6453      	str	r3, [r2, #68]	; 0x44

	  telem_pack.ekf.roll_comp =  EKF.roll_comp;
 8002430:	4b43      	ldr	r3, [pc, #268]	; (8002540 <_Z9TelemPackv+0x1b8>)
 8002432:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002436:	4a3f      	ldr	r2, [pc, #252]	; (8002534 <_Z9TelemPackv+0x1ac>)
 8002438:	6493      	str	r3, [r2, #72]	; 0x48
	  telem_pack.ekf.pitch_comp = EKF.pitch_comp;
 800243a:	4b41      	ldr	r3, [pc, #260]	; (8002540 <_Z9TelemPackv+0x1b8>)
 800243c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002440:	4a3c      	ldr	r2, [pc, #240]	; (8002534 <_Z9TelemPackv+0x1ac>)
 8002442:	64d3      	str	r3, [r2, #76]	; 0x4c

	  telem_pack.ekf.roll_ekf =  EKF.roll_ekf;
 8002444:	4b3e      	ldr	r3, [pc, #248]	; (8002540 <_Z9TelemPackv+0x1b8>)
 8002446:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800244a:	4a3a      	ldr	r2, [pc, #232]	; (8002534 <_Z9TelemPackv+0x1ac>)
 800244c:	6513      	str	r3, [r2, #80]	; 0x50
	  telem_pack.ekf.pitch_ekf = EKF.pitch_ekf;
 800244e:	4b3c      	ldr	r3, [pc, #240]	; (8002540 <_Z9TelemPackv+0x1b8>)
 8002450:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002454:	4a37      	ldr	r2, [pc, #220]	; (8002534 <_Z9TelemPackv+0x1ac>)
 8002456:	6553      	str	r3, [r2, #84]	; 0x54

	  telem_pack.pid_roll.P = controller.pid_roll.P;
 8002458:	4b3c      	ldr	r3, [pc, #240]	; (800254c <_Z9TelemPackv+0x1c4>)
 800245a:	e9d3 2374 	ldrd	r2, r3, [r3, #464]	; 0x1d0
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	f7fe fb09 	bl	8000a78 <__aeabi_d2f>
 8002466:	4603      	mov	r3, r0
 8002468:	4a32      	ldr	r2, [pc, #200]	; (8002534 <_Z9TelemPackv+0x1ac>)
 800246a:	6593      	str	r3, [r2, #88]	; 0x58
	  telem_pack.pid_roll.I = controller.pid_roll.I;
 800246c:	4b37      	ldr	r3, [pc, #220]	; (800254c <_Z9TelemPackv+0x1c4>)
 800246e:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	; 0x1d8
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f7fe faff 	bl	8000a78 <__aeabi_d2f>
 800247a:	4603      	mov	r3, r0
 800247c:	4a2d      	ldr	r2, [pc, #180]	; (8002534 <_Z9TelemPackv+0x1ac>)
 800247e:	65d3      	str	r3, [r2, #92]	; 0x5c
	  telem_pack.pid_roll.D = controller.pid_roll.D;
 8002480:	4b32      	ldr	r3, [pc, #200]	; (800254c <_Z9TelemPackv+0x1c4>)
 8002482:	e9d3 2378 	ldrd	r2, r3, [r3, #480]	; 0x1e0
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	f7fe faf5 	bl	8000a78 <__aeabi_d2f>
 800248e:	4603      	mov	r3, r0
 8002490:	4a28      	ldr	r2, [pc, #160]	; (8002534 <_Z9TelemPackv+0x1ac>)
 8002492:	6613      	str	r3, [r2, #96]	; 0x60
	  telem_pack.pid_roll.pd_roll_sat_buf = controller.pid_roll.pd_roll_sat_buf;
 8002494:	4b2d      	ldr	r3, [pc, #180]	; (800254c <_Z9TelemPackv+0x1c4>)
 8002496:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800249a:	4a26      	ldr	r2, [pc, #152]	; (8002534 <_Z9TelemPackv+0x1ac>)
 800249c:	6653      	str	r3, [r2, #100]	; 0x64

	  telem_pack.pid_pitch.P = controller.pid_pitch.P;
 800249e:	4b2b      	ldr	r3, [pc, #172]	; (800254c <_Z9TelemPackv+0x1c4>)
 80024a0:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	f7fe fae6 	bl	8000a78 <__aeabi_d2f>
 80024ac:	4603      	mov	r3, r0
 80024ae:	4a21      	ldr	r2, [pc, #132]	; (8002534 <_Z9TelemPackv+0x1ac>)
 80024b0:	6693      	str	r3, [r2, #104]	; 0x68
	  telem_pack.pid_pitch.I = controller.pid_pitch.I;
 80024b2:	4b26      	ldr	r3, [pc, #152]	; (800254c <_Z9TelemPackv+0x1c4>)
 80024b4:	e9d3 239a 	ldrd	r2, r3, [r3, #616]	; 0x268
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	f7fe fadc 	bl	8000a78 <__aeabi_d2f>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4a1c      	ldr	r2, [pc, #112]	; (8002534 <_Z9TelemPackv+0x1ac>)
 80024c4:	66d3      	str	r3, [r2, #108]	; 0x6c
	  telem_pack.pid_pitch.D = controller.pid_pitch.D;
 80024c6:	4b21      	ldr	r3, [pc, #132]	; (800254c <_Z9TelemPackv+0x1c4>)
 80024c8:	e9d3 239c 	ldrd	r2, r3, [r3, #624]	; 0x270
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7fe fad2 	bl	8000a78 <__aeabi_d2f>
 80024d4:	4603      	mov	r3, r0
 80024d6:	4a17      	ldr	r2, [pc, #92]	; (8002534 <_Z9TelemPackv+0x1ac>)
 80024d8:	6713      	str	r3, [r2, #112]	; 0x70
	  telem_pack.pid_pitch.pd_roll_sat_buf = controller.pid_pitch.pd_roll_sat_buf;
 80024da:	4b1c      	ldr	r3, [pc, #112]	; (800254c <_Z9TelemPackv+0x1c4>)
 80024dc:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 80024e0:	4a14      	ldr	r2, [pc, #80]	; (8002534 <_Z9TelemPackv+0x1ac>)
 80024e2:	6753      	str	r3, [r2, #116]	; 0x74

	  telem_pack.sonar_alt = EKF.sonar_alt;
 80024e4:	4b16      	ldr	r3, [pc, #88]	; (8002540 <_Z9TelemPackv+0x1b8>)
 80024e6:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80024ea:	4a12      	ldr	r2, [pc, #72]	; (8002534 <_Z9TelemPackv+0x1ac>)
 80024ec:	67d3      	str	r3, [r2, #124]	; 0x7c
	  telem_pack.sonar_vel = EKF.vz;
 80024ee:	4b14      	ldr	r3, [pc, #80]	; (8002540 <_Z9TelemPackv+0x1b8>)
 80024f0:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80024f4:	4a0f      	ldr	r2, [pc, #60]	; (8002534 <_Z9TelemPackv+0x1ac>)
 80024f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	  telem_pack.baro_alt = EKF.alt_gnd;
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <_Z9TelemPackv+0x1b8>)
 80024fc:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002500:	4a0c      	ldr	r2, [pc, #48]	; (8002534 <_Z9TelemPackv+0x1ac>)
 8002502:	6793      	str	r3, [r2, #120]	; 0x78

	  telem_pack.alt_thr = controller.alt_thr;
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <_Z9TelemPackv+0x1c4>)
 8002506:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <_Z9TelemPackv+0x1ac>)
 800250c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	  telem_pack.time_millis = HAL_GetTick();
 8002510:	f001 fa5a 	bl	80039c8 <HAL_GetTick>
 8002514:	4603      	mov	r3, r0
 8002516:	4a07      	ldr	r2, [pc, #28]	; (8002534 <_Z9TelemPackv+0x1ac>)
 8002518:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 800251c:	4a0c      	ldr	r2, [pc, #48]	; (8002550 <_Z9TelemPackv+0x1c8>)
 800251e:	4b05      	ldr	r3, [pc, #20]	; (8002534 <_Z9TelemPackv+0x1ac>)
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	238c      	movs	r3, #140	; 0x8c
 8002526:	461a      	mov	r2, r3
 8002528:	f00c fbd8 	bl	800ecdc <memcpy>
}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}
 8002530:	200002ac 	.word	0x200002ac
 8002534:	200002d0 	.word	0x200002d0
 8002538:	200009e0 	.word	0x200009e0
 800253c:	20000288 	.word	0x20000288
 8002540:	200003e8 	.word	0x200003e8
 8002544:	20000250 	.word	0x20000250
 8002548:	20000254 	.word	0x20000254
 800254c:	20000628 	.word	0x20000628
 8002550:	2000035c 	.word	0x2000035c

08002554 <_Z9SendTelemv>:

void SendTelem() {
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
	  TelemPack();
 800255a:	f7ff ff15 	bl	8002388 <_Z9TelemPackv>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(struct telem_pack), 100);
 800255e:	2364      	movs	r3, #100	; 0x64
 8002560:	228c      	movs	r2, #140	; 0x8c
 8002562:	490e      	ldr	r1, [pc, #56]	; (800259c <_Z9SendTelemv+0x48>)
 8002564:	480e      	ldr	r0, [pc, #56]	; (80025a0 <_Z9SendTelemv+0x4c>)
 8002566:	f005 f963 	bl	8007830 <HAL_UART_Transmit>
	  char end_char = '@';
 800256a:	2340      	movs	r3, #64	; 0x40
 800256c:	71fb      	strb	r3, [r7, #7]
	  HAL_UART_Transmit(&huart2, (uint8_t*)&end_char, sizeof(end_char), 100);
 800256e:	1df9      	adds	r1, r7, #7
 8002570:	2364      	movs	r3, #100	; 0x64
 8002572:	2201      	movs	r2, #1
 8002574:	480a      	ldr	r0, [pc, #40]	; (80025a0 <_Z9SendTelemv+0x4c>)
 8002576:	f005 f95b 	bl	8007830 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t*)&end_char, sizeof(end_char), 100);
 800257a:	1df9      	adds	r1, r7, #7
 800257c:	2364      	movs	r3, #100	; 0x64
 800257e:	2201      	movs	r2, #1
 8002580:	4807      	ldr	r0, [pc, #28]	; (80025a0 <_Z9SendTelemv+0x4c>)
 8002582:	f005 f955 	bl	8007830 <HAL_UART_Transmit>
	  sent_time = HAL_GetTick();
 8002586:	f001 fa1f 	bl	80039c8 <HAL_GetTick>
 800258a:	4603      	mov	r3, r0
 800258c:	461a      	mov	r2, r3
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <_Z9SendTelemv+0x50>)
 8002590:	601a      	str	r2, [r3, #0]


}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	2000035c 	.word	0x2000035c
 80025a0:	20000210 	.word	0x20000210
 80025a4:	20000a44 	.word	0x20000a44

080025a8 <_Z7GyroOkuh>:

int16_t GyroOku (uint8_t addr) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af04      	add	r7, sp, #16
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	2301      	movs	r3, #1
 80025b8:	9302      	str	r3, [sp, #8]
 80025ba:	2302      	movs	r3, #2
 80025bc:	9301      	str	r3, [sp, #4]
 80025be:	f107 030c 	add.w	r3, r7, #12
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2301      	movs	r3, #1
 80025c6:	21d1      	movs	r1, #209	; 0xd1
 80025c8:	4807      	ldr	r0, [pc, #28]	; (80025e8 <_Z7GyroOkuh+0x40>)
 80025ca:	f002 fa8b 	bl	8004ae4 <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 80025ce:	7b3b      	ldrb	r3, [r7, #12]
 80025d0:	021b      	lsls	r3, r3, #8
 80025d2:	b21a      	sxth	r2, r3
 80025d4:	7b7b      	ldrb	r3, [r7, #13]
 80025d6:	b21b      	sxth	r3, r3
 80025d8:	4313      	orrs	r3, r2
 80025da:	81fb      	strh	r3, [r7, #14]
	return gyro;
 80025dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	2000009c 	.word	0x2000009c

080025ec <_Z6PWMYazv>:




void PWMYaz() {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
	  if(armed) {
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <_Z6PWMYazv+0x9c>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d045      	beq.n	8002684 <_Z6PWMYazv+0x98>

		  if(!motor_start) {
 80025f8:	4b24      	ldr	r3, [pc, #144]	; (800268c <_Z6PWMYazv+0xa0>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	f083 0301 	eor.w	r3, r3, #1
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <_Z6PWMYazv+0x24>
		  	  MotorBaslat();
 8002606:	f000 f877 	bl	80026f8 <_Z11MotorBaslatv>
		  	  motor_start = true;
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <_Z6PWMYazv+0xa0>)
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
		  }

		  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > 1050) {
 8002610:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <_Z6PWMYazv+0xa4>)
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f240 52db 	movw	r2, #1499	; 0x5db
 8002618:	4293      	cmp	r3, r2
 800261a:	dc1b      	bgt.n	8002654 <_Z6PWMYazv+0x68>
 800261c:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <_Z6PWMYazv+0xa4>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f240 421a 	movw	r2, #1050	; 0x41a
 8002624:	4293      	cmp	r3, r2
 8002626:	dd15      	ble.n	8002654 <_Z6PWMYazv+0x68>


			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output[0]);
 8002628:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <_Z6PWMYazv+0xa8>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <_Z6PWMYazv+0xac>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output[1]);
 8002632:	4b18      	ldr	r3, [pc, #96]	; (8002694 <_Z6PWMYazv+0xa8>)
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	4b18      	ldr	r3, [pc, #96]	; (8002698 <_Z6PWMYazv+0xac>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output[2]);
 800263c:	4b15      	ldr	r3, [pc, #84]	; (8002694 <_Z6PWMYazv+0xa8>)
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	4b15      	ldr	r3, [pc, #84]	; (8002698 <_Z6PWMYazv+0xac>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output[3]);
 8002646:	4b13      	ldr	r3, [pc, #76]	; (8002694 <_Z6PWMYazv+0xa8>)
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <_Z6PWMYazv+0xac>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	641a      	str	r2, [r3, #64]	; 0x40
 8002650:	bf00      	nop
		  }
	  }



}
 8002652:	e017      	b.n	8002684 <_Z6PWMYazv+0x98>
		  else if(motor_start) {
 8002654:	4b0d      	ldr	r3, [pc, #52]	; (800268c <_Z6PWMYazv+0xa0>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d013      	beq.n	8002684 <_Z6PWMYazv+0x98>
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 800265c:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <_Z6PWMYazv+0xac>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002664:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <_Z6PWMYazv+0xac>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800266e:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <_Z6PWMYazv+0xac>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002678:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <_Z6PWMYazv+0xac>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002682:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000a49 	.word	0x20000a49
 800268c:	20000a4a 	.word	0x20000a4a
 8002690:	20000a14 	.word	0x20000a14
 8002694:	200009e0 	.word	0x200009e0
 8002698:	200000f0 	.word	0x200000f0

0800269c <_Z7GyroErrh>:


float GyroErr(uint8_t addr) {
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 80026ac:	2300      	movs	r3, #0
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80026b6:	da12      	bge.n	80026de <_Z7GyroErrh+0x42>
	{
		GyroXh += (GyroOku(addr));
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff74 	bl	80025a8 <_Z7GyroOkuh>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fae2 	bl	8000c8c <__aeabi_i2f>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4619      	mov	r1, r3
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f7fe fa29 	bl	8000b24 <__addsf3>
 80026d2:	4603      	mov	r3, r0
 80026d4:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	3301      	adds	r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	e7e8      	b.n	80026b0 <_Z7GyroErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 80026de:	4905      	ldr	r1, [pc, #20]	; (80026f4 <_Z7GyroErrh+0x58>)
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f7fe fbdb 	bl	8000e9c <__aeabi_fdiv>
 80026e6:	4603      	mov	r3, r0
 80026e8:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 80026ea:	68fb      	ldr	r3, [r7, #12]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	44fa0000 	.word	0x44fa0000

080026f8 <_Z11MotorBaslatv>:

void MotorBaslat(void) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <_Z11MotorBaslatv+0x38>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002704:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <_Z11MotorBaslatv+0x38>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800270e:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8002710:	4b07      	ldr	r3, [pc, #28]	; (8002730 <_Z11MotorBaslatv+0x38>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002718:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <_Z11MotorBaslatv+0x38>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002722:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 8002724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002728:	f001 f958 	bl	80039dc <HAL_Delay>
}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}
 8002730:	200000f0 	.word	0x200000f0
 8002734:	00000000 	.word	0x00000000

08002738 <HAL_TIM_PeriodElapsedCallback>:
		ITM_SendChar((*ptr++));
	}
	return len;
}

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8002738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800273c:	b0a0      	sub	sp, #128	; 0x80
 800273e:	af14      	add	r7, sp, #80	; 0x50
 8002740:	6078      	str	r0, [r7, #4]

	if(htim == &htim2) {
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a86      	ldr	r2, [pc, #536]	; (8002960 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002746:	4293      	cmp	r3, r2
 8002748:	f040 8396 	bne.w	8002e78 <HAL_TIM_PeriodElapsedCallback+0x740>
		//1.25 ms || 800 Hz
		set_ucounter(SONAR_CLOCK_RATE);
 800274c:	2050      	movs	r0, #80	; 0x50
 800274e:	f7ff f86d 	bl	800182c <set_ucounter>
		set_b_counter(12);
 8002752:	200c      	movs	r0, #12
 8002754:	f7ff f816 	bl	8001784 <set_b_counter>

		controller_counter++;
 8002758:	4b82      	ldr	r3, [pc, #520]	; (8002964 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	3301      	adds	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	4b80      	ldr	r3, [pc, #512]	; (8002964 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002762:	801a      	strh	r2, [r3, #0]

		if(get_ucounter() == 1) {
 8002764:	f7ff f87c 	bl	8001860 <get_ucounter>
 8002768:	4603      	mov	r3, r0
 800276a:	2b01      	cmp	r3, #1
 800276c:	bf0c      	ite	eq
 800276e:	2301      	moveq	r3, #1
 8002770:	2300      	movne	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <HAL_TIM_PeriodElapsedCallback+0x46>
			request_range();
 8002778:	f7ff f81e 	bl	80017b8 <request_range>
 800277c:	e0c0      	b.n	8002900 <HAL_TIM_PeriodElapsedCallback+0x1c8>
			//sonar_range = getRange();
		}


		else if (get_ucounter() == SONAR_CLOCK_RATE) {
 800277e:	f7ff f86f 	bl	8001860 <get_ucounter>
 8002782:	4603      	mov	r3, r0
 8002784:	2b50      	cmp	r3, #80	; 0x50
 8002786:	bf0c      	ite	eq
 8002788:	2301      	moveq	r3, #1
 800278a:	2300      	movne	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 80b6 	beq.w	8002900 <HAL_TIM_PeriodElapsedCallback+0x1c8>
		  sonar_range = getRange();
 8002794:	f7ff f82a 	bl	80017ec <getRange>
 8002798:	4603      	mov	r3, r0
 800279a:	461a      	mov	r2, r3
 800279c:	4b72      	ldr	r3, [pc, #456]	; (8002968 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800279e:	601a      	str	r2, [r3, #0]
		  sonar_alt_ = sonar_alt;
 80027a0:	4b72      	ldr	r3, [pc, #456]	; (800296c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a72      	ldr	r2, [pc, #456]	; (8002970 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80027a6:	6013      	str	r3, [r2, #0]
		  sonar_vel_ = sonar_vel;
 80027a8:	4b72      	ldr	r3, [pc, #456]	; (8002974 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a72      	ldr	r2, [pc, #456]	; (8002978 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80027ae:	6013      	str	r3, [r2, #0]

		  float sonar_roll = abs(deg2rad*state.angles[0]);
 80027b0:	4b72      	ldr	r3, [pc, #456]	; (800297c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4972      	ldr	r1, [pc, #456]	; (8002980 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fabc 	bl	8000d34 <__aeabi_fmul>
 80027bc:	4603      	mov	r3, r0
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff f858 	bl	8001874 <_ZSt3absf>
 80027c4:	62f8      	str	r0, [r7, #44]	; 0x2c
		  float sonar_pitch = abs(deg2rad*state.angles[1]);
 80027c6:	4b6d      	ldr	r3, [pc, #436]	; (800297c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	496d      	ldr	r1, [pc, #436]	; (8002980 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe fab1 	bl	8000d34 <__aeabi_fmul>
 80027d2:	4603      	mov	r3, r0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff f84d 	bl	8001874 <_ZSt3absf>
 80027da:	62b8      	str	r0, [r7, #40]	; 0x28
		  sonar_alt = (float)sonar_range/100.0 * cos(sonar_roll)* cos(sonar_pitch);
 80027dc:	4b62      	ldr	r3, [pc, #392]	; (8002968 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe fa4f 	bl	8000c84 <__aeabi_ui2f>
 80027e6:	4603      	mov	r3, r0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd fe15 	bl	8000418 <__aeabi_f2d>
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	4b64      	ldr	r3, [pc, #400]	; (8002984 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80027f4:	f7fd ff92 	bl	800071c <__aeabi_ddiv>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4614      	mov	r4, r2
 80027fe:	461d      	mov	r5, r3
 8002800:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002802:	f7ff f84f 	bl	80018a4 <_ZSt3cosf>
 8002806:	4603      	mov	r3, r0
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fe05 	bl	8000418 <__aeabi_f2d>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4620      	mov	r0, r4
 8002814:	4629      	mov	r1, r5
 8002816:	f7fd fe57 	bl	80004c8 <__aeabi_dmul>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4614      	mov	r4, r2
 8002820:	461d      	mov	r5, r3
 8002822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002824:	f7ff f83e 	bl	80018a4 <_ZSt3cosf>
 8002828:	4603      	mov	r3, r0
 800282a:	4618      	mov	r0, r3
 800282c:	f7fd fdf4 	bl	8000418 <__aeabi_f2d>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4620      	mov	r0, r4
 8002836:	4629      	mov	r1, r5
 8002838:	f7fd fe46 	bl	80004c8 <__aeabi_dmul>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4610      	mov	r0, r2
 8002842:	4619      	mov	r1, r3
 8002844:	f7fe f918 	bl	8000a78 <__aeabi_d2f>
 8002848:	4603      	mov	r3, r0
 800284a:	4a48      	ldr	r2, [pc, #288]	; (800296c <HAL_TIM_PeriodElapsedCallback+0x234>)
 800284c:	6013      	str	r3, [r2, #0]
		  float sonar_st = (float)(1.0/SONAR_CLOCK);
 800284e:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
		  sonar_vel = (sonar_alt - sonar_alt_)/sonar_st;
 8002854:	4b45      	ldr	r3, [pc, #276]	; (800296c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a45      	ldr	r2, [pc, #276]	; (8002970 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe f95e 	bl	8000b20 <__aeabi_fsub>
 8002864:	4603      	mov	r3, r0
 8002866:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe fb17 	bl	8000e9c <__aeabi_fdiv>
 800286e:	4603      	mov	r3, r0
 8002870:	461a      	mov	r2, r3
 8002872:	4b40      	ldr	r3, [pc, #256]	; (8002974 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002874:	601a      	str	r2, [r3, #0]


		  if (abs(sonar_vel) > 7) {
 8002876:	4b3f      	ldr	r3, [pc, #252]	; (8002974 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe fffa 	bl	8001874 <_ZSt3absf>
 8002880:	4603      	mov	r3, r0
 8002882:	2201      	movs	r2, #1
 8002884:	4614      	mov	r4, r2
 8002886:	4940      	ldr	r1, [pc, #256]	; (8002988 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002888:	4618      	mov	r0, r3
 800288a:	f7fe fc0f 	bl	80010ac <__aeabi_fcmpgt>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_TIM_PeriodElapsedCallback+0x160>
 8002894:	2300      	movs	r3, #0
 8002896:	461c      	mov	r4, r3
 8002898:	b2e3      	uxtb	r3, r4
 800289a:	2b00      	cmp	r3, #0
 800289c:	d007      	beq.n	80028ae <HAL_TIM_PeriodElapsedCallback+0x176>
			  sonar_alt = sonar_alt_;
 800289e:	4b34      	ldr	r3, [pc, #208]	; (8002970 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a32      	ldr	r2, [pc, #200]	; (800296c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80028a4:	6013      	str	r3, [r2, #0]
			  sonar_vel = sonar_vel_;
 80028a6:	4b34      	ldr	r3, [pc, #208]	; (8002978 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a32      	ldr	r2, [pc, #200]	; (8002974 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80028ac:	6013      	str	r3, [r2, #0]
		  }

		  if(sonar_alt > 6 || sonar_alt < 0.3) {
 80028ae:	4b2f      	ldr	r3, [pc, #188]	; (800296c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4936      	ldr	r1, [pc, #216]	; (800298c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fbf9 	bl	80010ac <__aeabi_fcmpgt>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10c      	bne.n	80028da <HAL_TIM_PeriodElapsedCallback+0x1a2>
 80028c0:	4b2a      	ldr	r3, [pc, #168]	; (800296c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fd fda7 	bl	8000418 <__aeabi_f2d>
 80028ca:	a323      	add	r3, pc, #140	; (adr r3, 8002958 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80028cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d0:	f7fe f86c 	bl	80009ac <__aeabi_dcmplt>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d008      	beq.n	80028ec <HAL_TIM_PeriodElapsedCallback+0x1b4>
			  EKF.Qs = 9e9;
 80028da:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80028dc:	4a2d      	ldr	r2, [pc, #180]	; (8002994 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80028de:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
			  EKF.salt = 50;
 80028e2:	4b2b      	ldr	r3, [pc, #172]	; (8002990 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80028e4:	4a2c      	ldr	r2, [pc, #176]	; (8002998 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80028e6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 80028ea:	e009      	b.n	8002900 <HAL_TIM_PeriodElapsedCallback+0x1c8>
		  }

		  else {
			  EKF.Qs = 0.25;
 80028ec:	4b28      	ldr	r3, [pc, #160]	; (8002990 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80028ee:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80028f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
			  EKF.salt = 1;
 80028f6:	4b26      	ldr	r3, [pc, #152]	; (8002990 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80028f8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80028fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
		  }

		}

		if(get_b_counter() == 1) {
 8002900:	f7fe ff36 	bl	8001770 <get_b_counter>
 8002904:	4603      	mov	r3, r0
 8002906:	2b01      	cmp	r3, #1
 8002908:	bf0c      	ite	eq
 800290a:	2301      	moveq	r3, #1
 800290c:	2300      	movne	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d002      	beq.n	800291a <HAL_TIM_PeriodElapsedCallback+0x1e2>
			write_ut();
 8002914:	f7fe fd2c 	bl	8001370 <write_ut>
 8002918:	e070      	b.n	80029fc <HAL_TIM_PeriodElapsedCallback+0x2c4>
		}

		else if(get_b_counter() == 5) { //5 ms
 800291a:	f7fe ff29 	bl	8001770 <get_b_counter>
 800291e:	4603      	mov	r3, r0
 8002920:	2b05      	cmp	r3, #5
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d038      	beq.n	80029a0 <HAL_TIM_PeriodElapsedCallback+0x268>
			bmp.uncomp.temp = read_ut ();
 800292e:	f7fe fd37 	bl	80013a0 <read_ut>
 8002932:	4603      	mov	r3, r0
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe f9a9 	bl	8000c8c <__aeabi_i2f>
 800293a:	4603      	mov	r3, r0
 800293c:	4a17      	ldr	r2, [pc, #92]	; (800299c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800293e:	6193      	str	r3, [r2, #24]
			bmp.data.temp = get_temp (&bmp);
 8002940:	4816      	ldr	r0, [pc, #88]	; (800299c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002942:	f7fe fd47 	bl	80013d4 <get_temp>
 8002946:	4603      	mov	r3, r0
 8002948:	4a14      	ldr	r2, [pc, #80]	; (800299c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800294a:	6293      	str	r3, [r2, #40]	; 0x28
			write_up();
 800294c:	f7fe fd9a 	bl	8001484 <write_up>
 8002950:	e054      	b.n	80029fc <HAL_TIM_PeriodElapsedCallback+0x2c4>
 8002952:	bf00      	nop
 8002954:	f3af 8000 	nop.w
 8002958:	33333333 	.word	0x33333333
 800295c:	3fd33333 	.word	0x3fd33333
 8002960:	20000138 	.word	0x20000138
 8002964:	20000a78 	.word	0x20000a78
 8002968:	20000a6c 	.word	0x20000a6c
 800296c:	20000a5c 	.word	0x20000a5c
 8002970:	20000a60 	.word	0x20000a60
 8002974:	20000a64 	.word	0x20000a64
 8002978:	20000a68 	.word	0x20000a68
 800297c:	200002ac 	.word	0x200002ac
 8002980:	3c8e8a72 	.word	0x3c8e8a72
 8002984:	40590000 	.word	0x40590000
 8002988:	40e00000 	.word	0x40e00000
 800298c:	40c00000 	.word	0x40c00000
 8002990:	200003e8 	.word	0x200003e8
 8002994:	50061c46 	.word	0x50061c46
 8002998:	42480000 	.word	0x42480000
 800299c:	20000a7c 	.word	0x20000a7c
		}

		else if(get_b_counter() == 12) { //
 80029a0:	f7fe fee6 	bl	8001770 <get_b_counter>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b0c      	cmp	r3, #12
 80029a8:	bf0c      	ite	eq
 80029aa:	2301      	moveq	r3, #1
 80029ac:	2300      	movne	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d023      	beq.n	80029fc <HAL_TIM_PeriodElapsedCallback+0x2c4>
			bmp.uncomp.press = read_up (bmp.oss);
 80029b4:	4bb4      	ldr	r3, [pc, #720]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80029b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80029b8:	f7fe fd84 	bl	80014c4 <read_up>
 80029bc:	4603      	mov	r3, r0
 80029be:	4ab2      	ldr	r2, [pc, #712]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80029c0:	61d3      	str	r3, [r2, #28]
			bmp.data.press = get_pressure (bmp);
 80029c2:	4eb1      	ldr	r6, [pc, #708]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80029c4:	466d      	mov	r5, sp
 80029c6:	f106 0410 	add.w	r4, r6, #16
 80029ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80029d6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80029da:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80029de:	f7fe fd9f 	bl	8001520 <get_pressure>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4aa8      	ldr	r2, [pc, #672]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80029e6:	62d3      	str	r3, [r2, #44]	; 0x2c
			bmp.data.altitude = get_altitude (&bmp);
 80029e8:	48a7      	ldr	r0, [pc, #668]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80029ea:	f7fe fe65 	bl	80016b8 <get_altitude>
 80029ee:	4603      	mov	r3, r0
 80029f0:	4aa5      	ldr	r2, [pc, #660]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80029f2:	6353      	str	r3, [r2, #52]	; 0x34
			baro_alt = bmp.data.altitude;
 80029f4:	4ba4      	ldr	r3, [pc, #656]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80029f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f8:	4aa4      	ldr	r2, [pc, #656]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x554>)
 80029fa:	6013      	str	r3, [r2, #0]

		}

		//}

		if(controller_counter == 2) { //2.5 ms || 400 Hz
 80029fc:	4ba4      	ldr	r3, [pc, #656]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x558>)
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	f040 8239 	bne.w	8002e78 <HAL_TIM_PeriodElapsedCallback+0x740>

		  controller_counter = 0;
 8002a06:	4ba2      	ldr	r3, [pc, #648]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	801a      	strh	r2, [r3, #0]
		  controller_time_pass = HAL_GetTick() - controller_time;
 8002a0c:	f000 ffdc 	bl	80039c8 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	4ba0      	ldr	r3, [pc, #640]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	4a9f      	ldr	r2, [pc, #636]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002a1a:	6013      	str	r3, [r2, #0]
		  controller_time = HAL_GetTick();
 8002a1c:	f000 ffd4 	bl	80039c8 <HAL_GetTick>
 8002a20:	4603      	mov	r3, r0
 8002a22:	4a9c      	ldr	r2, [pc, #624]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002a24:	6013      	str	r3, [r2, #0]
		  gyroX = (GyroOku(GYRO_X_ADDR))/65.5 - GyroXh;
 8002a26:	2043      	movs	r0, #67	; 0x43
 8002a28:	f7ff fdbe 	bl	80025a8 <_Z7GyroOkuh>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fd fce0 	bl	80003f4 <__aeabi_i2d>
 8002a34:	a38e      	add	r3, pc, #568	; (adr r3, 8002c70 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8002a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3a:	f7fd fe6f 	bl	800071c <__aeabi_ddiv>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4614      	mov	r4, r2
 8002a44:	461d      	mov	r5, r3
 8002a46:	4b95      	ldr	r3, [pc, #596]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fd fce4 	bl	8000418 <__aeabi_f2d>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4620      	mov	r0, r4
 8002a56:	4629      	mov	r1, r5
 8002a58:	f7fd fb7e 	bl	8000158 <__aeabi_dsub>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4610      	mov	r0, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	f7fe f808 	bl	8000a78 <__aeabi_d2f>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4a8d      	ldr	r2, [pc, #564]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002a6c:	6013      	str	r3, [r2, #0]
		  gyroY = (GyroOku(GYRO_Y_ADDR))/65.5 - GyroYh;
 8002a6e:	2045      	movs	r0, #69	; 0x45
 8002a70:	f7ff fd9a 	bl	80025a8 <_Z7GyroOkuh>
 8002a74:	4603      	mov	r3, r0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fd fcbc 	bl	80003f4 <__aeabi_i2d>
 8002a7c:	a37c      	add	r3, pc, #496	; (adr r3, 8002c70 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8002a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a82:	f7fd fe4b 	bl	800071c <__aeabi_ddiv>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4614      	mov	r4, r2
 8002a8c:	461d      	mov	r5, r3
 8002a8e:	4b85      	ldr	r3, [pc, #532]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fd fcc0 	bl	8000418 <__aeabi_f2d>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	f7fd fb5a 	bl	8000158 <__aeabi_dsub>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f7fd ffe4 	bl	8000a78 <__aeabi_d2f>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4a7d      	ldr	r2, [pc, #500]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002ab4:	6013      	str	r3, [r2, #0]
		  gyroZ = (GyroOku(GYRO_Z_ADDR))/65.5 - GyroZh;
 8002ab6:	2047      	movs	r0, #71	; 0x47
 8002ab8:	f7ff fd76 	bl	80025a8 <_Z7GyroOkuh>
 8002abc:	4603      	mov	r3, r0
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fd fc98 	bl	80003f4 <__aeabi_i2d>
 8002ac4:	a36a      	add	r3, pc, #424	; (adr r3, 8002c70 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8002ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aca:	f7fd fe27 	bl	800071c <__aeabi_ddiv>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4614      	mov	r4, r2
 8002ad4:	461d      	mov	r5, r3
 8002ad6:	4b75      	ldr	r3, [pc, #468]	; (8002cac <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fd fc9c 	bl	8000418 <__aeabi_f2d>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	4629      	mov	r1, r5
 8002ae8:	f7fd fb36 	bl	8000158 <__aeabi_dsub>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4610      	mov	r0, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	f7fd ffc0 	bl	8000a78 <__aeabi_d2f>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4a6d      	ldr	r2, [pc, #436]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8002afc:	6013      	str	r3, [r2, #0]
		  //gyroX_a_x = (GyroOku(GYRO_X_ADDR)-gyro_e_x)/65.5;
		  //gyroX_a += gyroX_a_x * st;

		  //float gyro[3];
		  EKF.gyro[0] = gyroX;
 8002afe:	4b68      	ldr	r3, [pc, #416]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a6c      	ldr	r2, [pc, #432]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002b04:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
		  EKF.gyro[1] = -1*gyroY;
 8002b08:	4b67      	ldr	r3, [pc, #412]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b10:	4a68      	ldr	r2, [pc, #416]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002b12:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
		  EKF.gyro[2] = gyroZ;
 8002b16:	4b66      	ldr	r3, [pc, #408]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a66      	ldr	r2, [pc, #408]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002b1c:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c

		  //İvmeölçer degerlerini oku
		  accX = GyroOku(ACC_X_ADDR);
 8002b20:	203b      	movs	r0, #59	; 0x3b
 8002b22:	f7ff fd41 	bl	80025a8 <_Z7GyroOkuh>
 8002b26:	4603      	mov	r3, r0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fe f8af 	bl	8000c8c <__aeabi_i2f>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	4a61      	ldr	r2, [pc, #388]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8002b32:	6013      	str	r3, [r2, #0]
		  accY = GyroOku(ACC_Y_ADDR);
 8002b34:	203d      	movs	r0, #61	; 0x3d
 8002b36:	f7ff fd37 	bl	80025a8 <_Z7GyroOkuh>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe f8a5 	bl	8000c8c <__aeabi_i2f>
 8002b42:	4603      	mov	r3, r0
 8002b44:	4a5d      	ldr	r2, [pc, #372]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x584>)
 8002b46:	6013      	str	r3, [r2, #0]
		  accZ = GyroOku(ACC_Z_ADDR);
 8002b48:	203f      	movs	r0, #63	; 0x3f
 8002b4a:	f7ff fd2d 	bl	80025a8 <_Z7GyroOkuh>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe f89b 	bl	8000c8c <__aeabi_i2f>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4a59      	ldr	r2, [pc, #356]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8002b5a:	6013      	str	r3, [r2, #0]

		  //float acc[3];
		  EKF.acc[0] = accX;// - AccXh;
 8002b5c:	4b56      	ldr	r3, [pc, #344]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a54      	ldr	r2, [pc, #336]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002b62:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
		  EKF.acc[1] = accY;// - AccYh;
 8002b66:	4b55      	ldr	r3, [pc, #340]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x584>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a52      	ldr	r2, [pc, #328]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002b6c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
		  EKF.acc[2] = accZ;// - AccZh;
 8002b70:	4b53      	ldr	r3, [pc, #332]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a4f      	ldr	r2, [pc, #316]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002b76:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158

		  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
 8002b7a:	4b4f      	ldr	r3, [pc, #316]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a4e      	ldr	r2, [pc, #312]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe f8d5 	bl	8000d34 <__aeabi_fmul>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	461c      	mov	r4, r3
 8002b8e:	4b4b      	ldr	r3, [pc, #300]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x584>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a4a      	ldr	r2, [pc, #296]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x584>)
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fe f8cb 	bl	8000d34 <__aeabi_fmul>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f7fd ffbe 	bl	8000b24 <__addsf3>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	461c      	mov	r4, r3
 8002bac:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a43      	ldr	r2, [pc, #268]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe f8bc 	bl	8000d34 <__aeabi_fmul>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	f7fd ffaf 	bl	8000b24 <__addsf3>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe fe77 	bl	80018bc <_ZSt4sqrtf>
 8002bce:	6238      	str	r0, [r7, #32]
		  pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı
 8002bd0:	4b3a      	ldr	r3, [pc, #232]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x584>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6a39      	ldr	r1, [r7, #32]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe f960 	bl	8000e9c <__aeabi_fdiv>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe fe54 	bl	800188c <_ZSt4asinf>
 8002be4:	4603      	mov	r3, r0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fc16 	bl	8000418 <__aeabi_f2d>
 8002bec:	a322      	add	r3, pc, #136	; (adr r3, 8002c78 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf2:	f7fd fc69 	bl	80004c8 <__aeabi_dmul>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f7fd ff3b 	bl	8000a78 <__aeabi_d2f>
 8002c02:	4603      	mov	r3, r0
 8002c04:	4a2f      	ldr	r2, [pc, #188]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8002c06:	6013      	str	r3, [r2, #0]

		  EKF.acc_vert = (accZ - AccZh) / 4096 * 9.81;
 8002c08:	4b2d      	ldr	r3, [pc, #180]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a2e      	ldr	r2, [pc, #184]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fd ff84 	bl	8000b20 <__aeabi_fsub>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe f93c 	bl	8000e9c <__aeabi_fdiv>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fd fbf6 	bl	8000418 <__aeabi_f2d>
 8002c2c:	a314      	add	r3, pc, #80	; (adr r3, 8002c80 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c32:	f7fd fc49 	bl	80004c8 <__aeabi_dmul>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f7fd ff1b 	bl	8000a78 <__aeabi_d2f>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4a1b      	ldr	r2, [pc, #108]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002c46:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
		  EKF.sonar_alt = sonar_alt;
 8002c4a:	4b20      	ldr	r3, [pc, #128]	; (8002ccc <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a19      	ldr	r2, [pc, #100]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002c50:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170
		  EKF.baro_alt = baro_alt;
 8002c54:	4b0d      	ldr	r3, [pc, #52]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x554>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a16      	ldr	r2, [pc, #88]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002c5a:	f8c2 3174 	str.w	r3, [r2, #372]	; 0x174

		  EKF.Run();
 8002c5e:	4815      	ldr	r0, [pc, #84]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002c60:	f006 fa9e 	bl	80091a0 <_ZN15Kalman_Filtresi3RunEv>
			  Qs = 1e4;
		  }
*/


		  state.angles[0]  	  = EKF.state.angles[0];
 8002c64:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002c66:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8002c6a:	4a19      	ldr	r2, [pc, #100]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e031      	b.n	8002cd4 <HAL_TIM_PeriodElapsedCallback+0x59c>
 8002c70:	00000000 	.word	0x00000000
 8002c74:	40506000 	.word	0x40506000
 8002c78:	d4fdf3b6 	.word	0xd4fdf3b6
 8002c7c:	404ca978 	.word	0x404ca978
 8002c80:	51eb851f 	.word	0x51eb851f
 8002c84:	40239eb8 	.word	0x40239eb8
 8002c88:	20000a7c 	.word	0x20000a7c
 8002c8c:	20000a58 	.word	0x20000a58
 8002c90:	20000a78 	.word	0x20000a78
 8002c94:	20000a70 	.word	0x20000a70
 8002c98:	20000a74 	.word	0x20000a74
 8002c9c:	20000268 	.word	0x20000268
 8002ca0:	20000250 	.word	0x20000250
 8002ca4:	2000026c 	.word	0x2000026c
 8002ca8:	20000254 	.word	0x20000254
 8002cac:	20000270 	.word	0x20000270
 8002cb0:	20000258 	.word	0x20000258
 8002cb4:	200003e8 	.word	0x200003e8
 8002cb8:	2000025c 	.word	0x2000025c
 8002cbc:	20000260 	.word	0x20000260
 8002cc0:	20000264 	.word	0x20000264
 8002cc4:	20000280 	.word	0x20000280
 8002cc8:	2000027c 	.word	0x2000027c
 8002ccc:	20000a5c 	.word	0x20000a5c
 8002cd0:	200002ac 	.word	0x200002ac
		  state.angles[1] 	  = EKF.state.angles[1];
 8002cd4:	4b6b      	ldr	r3, [pc, #428]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x74c>)
 8002cd6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002cda:	4a6b      	ldr	r2, [pc, #428]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8002cdc:	6053      	str	r3, [r2, #4]
		  state.angles[2]     = EKF.state.angles[2];
 8002cde:	4b69      	ldr	r3, [pc, #420]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x74c>)
 8002ce0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002ce4:	4a68      	ldr	r2, [pc, #416]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8002ce6:	6093      	str	r3, [r2, #8]

		  state.rates[0] = EKF.state.rates[0];
 8002ce8:	4b66      	ldr	r3, [pc, #408]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x74c>)
 8002cea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002cee:	4a66      	ldr	r2, [pc, #408]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8002cf0:	60d3      	str	r3, [r2, #12]
		  state.rates[1] = EKF.state.rates[1];
 8002cf2:	4b64      	ldr	r3, [pc, #400]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x74c>)
 8002cf4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002cf8:	4a63      	ldr	r2, [pc, #396]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8002cfa:	6113      	str	r3, [r2, #16]
		  state.rates[2] = EKF.state.rates[2];
 8002cfc:	4b61      	ldr	r3, [pc, #388]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x74c>)
 8002cfe:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002d02:	4a61      	ldr	r2, [pc, #388]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8002d04:	6153      	str	r3, [r2, #20]
		 // alpha_des = 0;
		 // printf("roll: %d\r\n",int(roll));



		  if(ch[MOD_CH-1] < 1500) {
 8002d06:	4b61      	ldr	r3, [pc, #388]	; (8002e8c <HAL_TIM_PeriodElapsedCallback+0x754>)
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f240 52db 	movw	r2, #1499	; 0x5db
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	dc31      	bgt.n	8002d76 <HAL_TIM_PeriodElapsedCallback+0x63e>
			  controller_output_ang = controller.Run(state, state_des, ch[2]);	//Stabilize
 8002d12:	4b5e      	ldr	r3, [pc, #376]	; (8002e8c <HAL_TIM_PeriodElapsedCallback+0x754>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f107 0c08 	add.w	ip, r7, #8
 8002d1a:	4e5b      	ldr	r6, [pc, #364]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8002d1c:	9310      	str	r3, [sp, #64]	; 0x40
 8002d1e:	4b5c      	ldr	r3, [pc, #368]	; (8002e90 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8002d20:	ac07      	add	r4, sp, #28
 8002d22:	461d      	mov	r5, r3
 8002d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d2c:	682b      	ldr	r3, [r5, #0]
 8002d2e:	6023      	str	r3, [r4, #0]
 8002d30:	466d      	mov	r5, sp
 8002d32:	f106 0408 	add.w	r4, r6, #8
 8002d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d3a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002d3e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002d42:	e896 000c 	ldmia.w	r6, {r2, r3}
 8002d46:	4953      	ldr	r1, [pc, #332]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x75c>)
 8002d48:	4660      	mov	r0, ip
 8002d4a:	f004 ffd5 	bl	8007cf8 <_ZN10Controller3RunE5stateS0_i>
 8002d4e:	f107 0308 	add.w	r3, r7, #8
 8002d52:	4619      	mov	r1, r3
 8002d54:	4850      	ldr	r0, [pc, #320]	; (8002e98 <HAL_TIM_PeriodElapsedCallback+0x760>)
 8002d56:	f000 f9aa 	bl	80030ae <_ZNSt6vectorIdSaIdEEaSEOS1_>
 8002d5a:	f107 0308 	add.w	r3, r7, #8
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f98a 	bl	8003078 <_ZNSt6vectorIdSaIdEED1Ev>
			  z0 = EKF.alt_gnd;
 8002d64:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x74c>)
 8002d66:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002d6a:	4a4c      	ldr	r2, [pc, #304]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x764>)
 8002d6c:	6013      	str	r3, [r2, #0]
			  controller.p_alt.reset();
 8002d6e:	484c      	ldr	r0, [pc, #304]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x768>)
 8002d70:	f009 fda4 	bl	800c8bc <_ZN3PID5resetEv>
 8002d74:	e03d      	b.n	8002df2 <HAL_TIM_PeriodElapsedCallback+0x6ba>
		  }

		  else {
			  //Run (struct state state, struct state state_des, float z_vel, float z0, float z, float ch3)
			  controller_output_ang = controller.Run(state, state_des, EKF.vz, z0, EKF.alt_gnd, ch[3-1]);	//Alt Hold
 8002d76:	4b43      	ldr	r3, [pc, #268]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x74c>)
 8002d78:	f8d3 416c 	ldr.w	r4, [r3, #364]	; 0x16c
 8002d7c:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x764>)
 8002d7e:	681d      	ldr	r5, [r3, #0]
 8002d80:	4b40      	ldr	r3, [pc, #256]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x74c>)
 8002d82:	f8d3 8168 	ldr.w	r8, [r3, #360]	; 0x168
 8002d86:	4b41      	ldr	r3, [pc, #260]	; (8002e8c <HAL_TIM_PeriodElapsedCallback+0x754>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fd ff7e 	bl	8000c8c <__aeabi_i2f>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f107 0c14 	add.w	ip, r7, #20
 8002d96:	4e3c      	ldr	r6, [pc, #240]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8002d98:	9313      	str	r3, [sp, #76]	; 0x4c
 8002d9a:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8002d9e:	9511      	str	r5, [sp, #68]	; 0x44
 8002da0:	9410      	str	r4, [sp, #64]	; 0x40
 8002da2:	4b3b      	ldr	r3, [pc, #236]	; (8002e90 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8002da4:	ac07      	add	r4, sp, #28
 8002da6:	461d      	mov	r5, r3
 8002da8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002daa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002db0:	682b      	ldr	r3, [r5, #0]
 8002db2:	6023      	str	r3, [r4, #0]
 8002db4:	466d      	mov	r5, sp
 8002db6:	f106 0408 	add.w	r4, r6, #8
 8002dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dbe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002dc2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002dc6:	e896 000c 	ldmia.w	r6, {r2, r3}
 8002dca:	4932      	ldr	r1, [pc, #200]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x75c>)
 8002dcc:	4660      	mov	r0, ip
 8002dce:	f005 fac3 	bl	8008358 <_ZN10Controller3RunE5stateS0_ffff>
 8002dd2:	f107 0314 	add.w	r3, r7, #20
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	482f      	ldr	r0, [pc, #188]	; (8002e98 <HAL_TIM_PeriodElapsedCallback+0x760>)
 8002dda:	f000 f968 	bl	80030ae <_ZNSt6vectorIdSaIdEEaSEOS1_>
 8002dde:	f107 0314 	add.w	r3, r7, #20
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 f948 	bl	8003078 <_ZNSt6vectorIdSaIdEED1Ev>
			  z0 = controller.p_alt.zi;
 8002de8:	4b2a      	ldr	r3, [pc, #168]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x75c>)
 8002dea:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8002dee:	4a2b      	ldr	r2, [pc, #172]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x764>)
 8002df0:	6013      	str	r3, [r2, #0]

		  }
		  controller_output[0] = controller.controller_output_pwm[0];
 8002df2:	4b28      	ldr	r3, [pc, #160]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x75c>)
 8002df4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002df8:	4a2a      	ldr	r2, [pc, #168]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x76c>)
 8002dfa:	6013      	str	r3, [r2, #0]
		  controller_output[1] = controller.controller_output_pwm[1];
 8002dfc:	4b25      	ldr	r3, [pc, #148]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x75c>)
 8002dfe:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002e02:	4a28      	ldr	r2, [pc, #160]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x76c>)
 8002e04:	6053      	str	r3, [r2, #4]
		  controller_output[2] = controller.controller_output_pwm[2];
 8002e06:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x75c>)
 8002e08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002e0c:	4a25      	ldr	r2, [pc, #148]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x76c>)
 8002e0e:	6093      	str	r3, [r2, #8]
		  controller_output[3] = controller.controller_output_pwm[3];
 8002e10:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x75c>)
 8002e12:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002e16:	4a23      	ldr	r2, [pc, #140]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x76c>)
 8002e18:	60d3      	str	r3, [r2, #12]

		  state_des.rates[0] = controller.roll_rate_des;
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x75c>)
 8002e1c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002e20:	4a1b      	ldr	r2, [pc, #108]	; (8002e90 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8002e22:	60d3      	str	r3, [r2, #12]
		  state_des.rates[1] = controller.pitch_rate_des;
 8002e24:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x75c>)
 8002e26:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8002e2a:	4a19      	ldr	r2, [pc, #100]	; (8002e90 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8002e2c:	6113      	str	r3, [r2, #16]

		  ie_roll_sat = controller.pid_roll.ie_roll_sat;
 8002e2e:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x75c>)
 8002e30:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8002e34:	4a1c      	ldr	r2, [pc, #112]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x770>)
 8002e36:	6013      	str	r3, [r2, #0]

		  w_ang = controller.pd_roll;
 8002e38:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x75c>)
 8002e3a:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 8002e3e:	491b      	ldr	r1, [pc, #108]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x774>)
 8002e40:	e9c1 2300 	strd	r2, r3, [r1]


		  w1 = controller_output[0];
 8002e44:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x76c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <HAL_TIM_PeriodElapsedCallback+0x778>)
 8002e4c:	801a      	strh	r2, [r3, #0]
		  w2 = controller_output[1];
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x76c>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 8002e56:	801a      	strh	r2, [r3, #0]
		  w3 = controller_output[2];
 8002e58:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x76c>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8002e60:	801a      	strh	r2, [r3, #0]
		  w4 = controller_output[3];
 8002e62:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x76c>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <HAL_TIM_PeriodElapsedCallback+0x784>)
 8002e6a:	801a      	strh	r2, [r3, #0]


		  PWMYaz();
 8002e6c:	f7ff fbbe 	bl	80025ec <_Z6PWMYazv>


		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8002e70:	2102      	movs	r1, #2
 8002e72:	4813      	ldr	r0, [pc, #76]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x788>)
 8002e74:	f001 f880 	bl	8003f78 <HAL_GPIO_TogglePin>
		}
		}
	}
 8002e78:	bf00      	nop
 8002e7a:	3730      	adds	r7, #48	; 0x30
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e82:	bf00      	nop
 8002e84:	200003e8 	.word	0x200003e8
 8002e88:	200002ac 	.word	0x200002ac
 8002e8c:	20000a14 	.word	0x20000a14
 8002e90:	20000288 	.word	0x20000288
 8002e94:	20000628 	.word	0x20000628
 8002e98:	200009f0 	.word	0x200009f0
 8002e9c:	20000ab8 	.word	0x20000ab8
 8002ea0:	20000948 	.word	0x20000948
 8002ea4:	200009e0 	.word	0x200009e0
 8002ea8:	20000284 	.word	0x20000284
 8002eac:	20000a50 	.word	0x20000a50
 8002eb0:	200009fc 	.word	0x200009fc
 8002eb4:	200009fe 	.word	0x200009fe
 8002eb8:	20000a00 	.word	0x20000a00
 8002ebc:	20000a02 	.word	0x20000a02
 8002ec0:	40010c00 	.word	0x40010c00

08002ec4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a43      	ldr	r2, [pc, #268]	; (8002fdc <HAL_TIM_IC_CaptureCallback+0x118>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d17f      	bne.n	8002fd4 <HAL_TIM_IC_CaptureCallback+0x110>


	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	7f1b      	ldrb	r3, [r3, #28]
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d17b      	bne.n	8002fd4 <HAL_TIM_IC_CaptureCallback+0x110>
	{
				IC_Val1 = IC_Val2;
 8002edc:	4b40      	ldr	r3, [pc, #256]	; (8002fe0 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a40      	ldr	r2, [pc, #256]	; (8002fe4 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002ee2:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8002ee4:	2108      	movs	r1, #8
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f003 ff82 	bl	8006df0 <HAL_TIM_ReadCapturedValue>
 8002eec:	4603      	mov	r3, r0
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002ef2:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 8002ef4:	4b3a      	ldr	r3, [pc, #232]	; (8002fe0 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b3a      	ldr	r3, [pc, #232]	; (8002fe4 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	4a3a      	ldr	r2, [pc, #232]	; (8002fe8 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002f00:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 8002f02:	4b39      	ldr	r3, [pc, #228]	; (8002fe8 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	0fdb      	lsrs	r3, r3, #31
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d006      	beq.n	8002f1c <HAL_TIM_IC_CaptureCallback+0x58>
					Diff+=65535;
 8002f0e:	4b36      	ldr	r3, [pc, #216]	; (8002fe8 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002f16:	33ff      	adds	r3, #255	; 0xff
 8002f18:	4a33      	ldr	r2, [pc, #204]	; (8002fe8 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002f1a:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
				ch[i] = Diff;
 8002f1c:	4b33      	ldr	r3, [pc, #204]	; (8002fec <HAL_TIM_IC_CaptureCallback+0x128>)
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	b21b      	sxth	r3, r3
 8002f22:	4619      	mov	r1, r3
 8002f24:	4b30      	ldr	r3, [pc, #192]	; (8002fe8 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a31      	ldr	r2, [pc, #196]	; (8002ff0 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002f2a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				if(1) {
					if(ch[i] > CH0) {
 8002f2e:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <HAL_TIM_IC_CaptureCallback+0x128>)
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	b21b      	sxth	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	4b2e      	ldr	r3, [pc, #184]	; (8002ff0 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	bfcc      	ite	gt
 8002f44:	2301      	movgt	r3, #1
 8002f46:	2300      	movle	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d006      	beq.n	8002f5c <HAL_TIM_IC_CaptureCallback+0x98>
						//ch[CH_NUM] = ch[i];
						i = -1;
 8002f4e:	4b27      	ldr	r3, [pc, #156]	; (8002fec <HAL_TIM_IC_CaptureCallback+0x128>)
 8002f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f54:	801a      	strh	r2, [r3, #0]
						sync = 1;
 8002f56:	4b27      	ldr	r3, [pc, #156]	; (8002ff4 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	801a      	strh	r2, [r3, #0]
					}
				}



				state_des.angles[0] =  pid.pwm2ang(ch[0]);
 8002f5c:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	4619      	mov	r1, r3
 8002f64:	4824      	ldr	r0, [pc, #144]	; (8002ff8 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002f66:	f009 fd70 	bl	800ca4a <_ZN3PID7pwm2angEt>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4a23      	ldr	r2, [pc, #140]	; (8002ffc <HAL_TIM_IC_CaptureCallback+0x138>)
 8002f6e:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pid.pwm2ang(ch[1]);
 8002f70:	4b1f      	ldr	r3, [pc, #124]	; (8002ff0 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	4619      	mov	r1, r3
 8002f78:	481f      	ldr	r0, [pc, #124]	; (8002ff8 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002f7a:	f009 fd66 	bl	800ca4a <_ZN3PID7pwm2angEt>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4a1e      	ldr	r2, [pc, #120]	; (8002ffc <HAL_TIM_IC_CaptureCallback+0x138>)
 8002f82:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 8002f84:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <HAL_TIM_IC_CaptureCallback+0x138>)
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pid.pwm2rate(ch[3]);
 8002f8c:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	4619      	mov	r1, r3
 8002f94:	4818      	ldr	r0, [pc, #96]	; (8002ff8 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002f96:	f009 fd95 	bl	800cac4 <_ZN3PID8pwm2rateEt>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4a17      	ldr	r2, [pc, #92]	; (8002ffc <HAL_TIM_IC_CaptureCallback+0x138>)
 8002f9e:	6153      	str	r3, [r2, #20]

				i++;
 8002fa0:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_TIM_IC_CaptureCallback+0x128>)
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	b21b      	sxth	r3, r3
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3301      	adds	r3, #1
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	b21a      	sxth	r2, r3
 8002fae:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <HAL_TIM_IC_CaptureCallback+0x128>)
 8002fb0:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <HAL_TIM_IC_CaptureCallback+0x128>)
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	b21b      	sxth	r3, r3
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4b11      	ldr	r3, [pc, #68]	; (8003000 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002fbc:	fb83 2301 	smull	r2, r3, r3, r1
 8002fc0:	105a      	asrs	r2, r3, #1
 8002fc2:	17cb      	asrs	r3, r1, #31
 8002fc4:	1ad2      	subs	r2, r2, r3
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	1aca      	subs	r2, r1, r3
 8002fce:	b212      	sxth	r2, r2
 8002fd0:	4b06      	ldr	r3, [pc, #24]	; (8002fec <HAL_TIM_IC_CaptureCallback+0x128>)
 8002fd2:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20000180 	.word	0x20000180
 8002fe0:	20000a04 	.word	0x20000a04
 8002fe4:	20000a08 	.word	0x20000a08
 8002fe8:	20000a0c 	.word	0x20000a0c
 8002fec:	20000a10 	.word	0x20000a10
 8002ff0:	20000a14 	.word	0x20000a14
 8002ff4:	20000a38 	.word	0x20000a38
 8002ff8:	20000598 	.word	0x20000598
 8002ffc:	20000288 	.word	0x20000288
 8003000:	38e38e39 	.word	0x38e38e39

08003004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003008:	b672      	cpsid	i
}
 800300a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800300c:	e7fe      	b.n	800300c <Error_Handler+0x8>

0800300e <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f85e 	bl	80030d8 <_ZNSaIdEC1Ev>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 f866 	bl	80030f0 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	{ }
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <_ZNSaIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f86d 	bl	8003116 <_ZN9__gnu_cxx13new_allocatorIdED1Ev>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <_ZNSt12_Vector_baseIdSaIdEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800305e:	461a      	mov	r2, r3
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f862 	bl	800312a <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
      }
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4618      	mov	r0, r3
 800306a:	f7fe fc33 	bl	80018d4 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <_ZNSt6vectorIdSaIdEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8003078:	b5b0      	push	{r4, r5, r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681c      	ldr	r4, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4618      	mov	r0, r3
 800308c:	f000 f860 	bl	8003150 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8003090:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003092:	461a      	mov	r2, r3
 8003094:	4629      	mov	r1, r5
 8003096:	4620      	mov	r0, r4
 8003098:	f000 f864 	bl	8003164 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff ffd1 	bl	8003046 <_ZNSt12_Vector_baseIdSaIdEED1Ev>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bdb0      	pop	{r4, r5, r7, pc}

080030ae <_ZNSt6vectorIdSaIdEEaSEOS1_>:
       *  Afterwards @a __x is a valid, but unspecified %vector.
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 80030ae:	b590      	push	{r4, r7, lr}
 80030b0:	b085      	sub	sp, #20
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6039      	str	r1, [r7, #0]
      {
	constexpr bool __move_storage =
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 80030bc:	6838      	ldr	r0, [r7, #0]
 80030be:	f000 f85f 	bl	8003180 <_ZSt4moveIRSt6vectorIdSaIdEEEONSt16remove_referenceIT_E4typeEOS5_>
 80030c2:	4603      	mov	r3, r0
 80030c4:	4622      	mov	r2, r4
 80030c6:	4619      	mov	r1, r3
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f863 	bl	8003194 <_ZNSt6vectorIdSaIdEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 80030ce:	687b      	ldr	r3, [r7, #4]
      }
 80030d0:	4618      	mov	r0, r3
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd90      	pop	{r4, r7, pc}

080030d8 <_ZNSaIdEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f895 	bl	8003210 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
	{ }
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4618      	mov	r0, r3
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <_ZN9__gnu_cxx13new_allocatorIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>:
      _M_deallocate(pointer __p, size_t __n)
 800312a:	b580      	push	{r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
	if (__p)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	4618      	mov	r0, r3
 8003144:	f000 f86e 	bl	8003224 <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>
      }
 8003148:	bf00      	nop
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f865 	bl	8003242 <_ZSt8_DestroyIPdEvT_S1_>
    }
 8003178:	bf00      	nop
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <_ZSt4moveIRSt6vectorIdSaIdEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <_ZNSt6vectorIdSaIdEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	f107 031c 	add.w	r3, r7, #28
 80031a6:	4611      	mov	r1, r2
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 f857 	bl	800325c <_ZNKSt12_Vector_baseIdSaIdEE13get_allocatorEv>
 80031ae:	f107 021c 	add.w	r2, r7, #28
 80031b2:	f107 0310 	add.w	r3, r7, #16
 80031b6:	4611      	mov	r1, r2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 f860 	bl	800327e <_ZNSt6vectorIdSaIdEEC1ERKS0_>
 80031be:	f107 031c 	add.w	r3, r7, #28
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff ff33 	bl	800302e <_ZNSaIdED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	4611      	mov	r1, r2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 f864 	bl	800329c <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	f107 0310 	add.w	r3, r7, #16
 80031da:	4611      	mov	r1, r2
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 f85d 	bl	800329c <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ffb3 	bl	8003150 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80031ea:	4604      	mov	r4, r0
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff ffae 	bl	8003150 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80031f4:	4603      	mov	r3, r0
 80031f6:	4619      	mov	r1, r3
 80031f8:	4620      	mov	r0, r4
 80031fa:	f000 f86d 	bl	80032d8 <_ZSt15__alloc_on_moveISaIdEEvRT_S2_>
	vector __tmp(get_allocator());
 80031fe:	f107 0310 	add.w	r3, r7, #16
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff ff38 	bl	8003078 <_ZNSt6vectorIdSaIdEED1Ev>
      }
 8003208:	bf00      	nop
 800320a:	3724      	adds	r7, #36	; 0x24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd90      	pop	{r4, r7, pc}

08003210 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f85d 	bl	80032f4 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <_ZSt8_DestroyIPdEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800324c:	6839      	ldr	r1, [r7, #0]
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f85d 	bl	800330e <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>
    }
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <_ZNKSt12_Vector_baseIdSaIdEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8003266:	6838      	ldr	r0, [r7, #0]
 8003268:	f000 f85b 	bl	8003322 <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 800326c:	4603      	mov	r3, r0
 800326e:	4619      	mov	r1, r3
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f860 	bl	8003336 <_ZNSaIdEC1ERKS_>
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <_ZNSt6vectorIdSaIdEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6839      	ldr	r1, [r7, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f000 f860 	bl	8003352 <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4618      	mov	r0, r3
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 80032a6:	f107 030c 	add.w	r3, r7, #12
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff ff20 	bl	80030f0 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 80032b0:	f107 030c 	add.w	r3, r7, #12
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 f85a 	bl	8003370 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 80032bc:	6839      	ldr	r1, [r7, #0]
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f856 	bl	8003370 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 80032c4:	f107 030c 	add.w	r3, r7, #12
 80032c8:	4619      	mov	r1, r3
 80032ca:	6838      	ldr	r0, [r7, #0]
 80032cc:	f000 f850 	bl	8003370 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 80032d0:	bf00      	nop
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <_ZSt15__alloc_on_moveISaIdEEvRT_S2_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 80032e2:	461a      	mov	r2, r3
 80032e4:	6839      	ldr	r1, [r7, #0]
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f858 	bl	800339c <_ZSt18__do_alloc_on_moveISaIdEEvRT_S2_St17integral_constantIbLb1EE>
    }
 80032ec:	bf00      	nop
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8003300:	68b8      	ldr	r0, [r7, #8]
 8003302:	f009 fd1c 	bl	800cd3e <_ZdlPv>
      }
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	6039      	str	r1, [r7, #0]
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr

08003336 <_ZNSaIdEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003340:	6839      	ldr	r1, [r7, #0]
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f837 	bl	80033b6 <_ZN9__gnu_cxx13new_allocatorIdEC1ERKS1_>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6839      	ldr	r1, [r7, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f000 f833 	bl	80033cc <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1ERKS0_>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	609a      	str	r2, [r3, #8]
	}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr

0800339c <_ZSt18__do_alloc_on_moveISaIdEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 80033a8:	68b8      	ldr	r0, [r7, #8]
 80033aa:	f000 f821 	bl	80033f0 <_ZSt4moveIRSaIdEEONSt16remove_referenceIT_E4typeEOS3_>
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <_ZN9__gnu_cxx13new_allocatorIdEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	6039      	str	r1, [r7, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4618      	mov	r0, r3
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80033d6:	6839      	ldr	r1, [r7, #0]
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff ffac 	bl	8003336 <_ZNSaIdEC1ERKS_>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fe85 	bl	80030f0 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	{ }
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <_ZSt4moveIRSaIdEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4618      	mov	r0, r3
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr

08003404 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d110      	bne.n	8003436 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800341a:	4293      	cmp	r3, r2
 800341c:	d10b      	bne.n	8003436 <_Z41__static_initialization_and_destruction_0ii+0x32>
Kalman_Filtresi EKF;
 800341e:	4812      	ldr	r0, [pc, #72]	; (8003468 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003420:	f005 fe0a 	bl	8009038 <_ZN15Kalman_FiltresiC1Ev>
PID pid;
 8003424:	4811      	ldr	r0, [pc, #68]	; (800346c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003426:	f008 ff8b 	bl	800c340 <_ZN3PIDC1Ev>
Controller controller;
 800342a:	4811      	ldr	r0, [pc, #68]	; (8003470 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800342c:	f004 fb6c 	bl	8007b08 <_ZN10ControllerC1Ev>
std::vector<double> controller_output_ang;
 8003430:	4810      	ldr	r0, [pc, #64]	; (8003474 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003432:	f7fe fa68 	bl	8001906 <_ZNSt6vectorIdSaIdEEC1Ev>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d110      	bne.n	800345e <_Z41__static_initialization_and_destruction_0ii+0x5a>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003442:	4293      	cmp	r3, r2
 8003444:	d10b      	bne.n	800345e <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8003446:	480b      	ldr	r0, [pc, #44]	; (8003474 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003448:	f7ff fe16 	bl	8003078 <_ZNSt6vectorIdSaIdEED1Ev>
Controller controller;
 800344c:	4808      	ldr	r0, [pc, #32]	; (8003470 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800344e:	f005 fb9f 	bl	8008b90 <_ZN10ControllerD1Ev>
PID pid;
 8003452:	4806      	ldr	r0, [pc, #24]	; (800346c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003454:	f009 fbee 	bl	800cc34 <_ZN3PIDD1Ev>
Kalman_Filtresi EKF;
 8003458:	4803      	ldr	r0, [pc, #12]	; (8003468 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800345a:	f008 ff4f 	bl	800c2fc <_ZN15Kalman_FiltresiD1Ev>
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	200003e8 	.word	0x200003e8
 800346c:	20000598 	.word	0x20000598
 8003470:	20000628 	.word	0x20000628
 8003474:	200009f0 	.word	0x200009f0

08003478 <_GLOBAL__sub_I_hi2c1>:
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
 800347c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003480:	2001      	movs	r0, #1
 8003482:	f7ff ffbf 	bl	8003404 <_Z41__static_initialization_and_destruction_0ii>
 8003486:	bd80      	pop	{r7, pc}

08003488 <_GLOBAL__sub_D_hi2c1>:
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
 800348c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003490:	2000      	movs	r0, #0
 8003492:	f7ff ffb7 	bl	8003404 <_Z41__static_initialization_and_destruction_0ii>
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800349e:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <HAL_MspInit+0x5c>)
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	4a14      	ldr	r2, [pc, #80]	; (80034f4 <HAL_MspInit+0x5c>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	6193      	str	r3, [r2, #24]
 80034aa:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <HAL_MspInit+0x5c>)
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034b6:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <HAL_MspInit+0x5c>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	4a0e      	ldr	r2, [pc, #56]	; (80034f4 <HAL_MspInit+0x5c>)
 80034bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c0:	61d3      	str	r3, [r2, #28]
 80034c2:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <HAL_MspInit+0x5c>)
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ca:	607b      	str	r3, [r7, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80034ce:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <HAL_MspInit+0x60>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <HAL_MspInit+0x60>)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034ea:	bf00      	nop
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40010000 	.word	0x40010000

080034fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003504:	f107 0310 	add.w	r3, r7, #16
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a15      	ldr	r2, [pc, #84]	; (800356c <HAL_I2C_MspInit+0x70>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d123      	bne.n	8003564 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800351c:	4b14      	ldr	r3, [pc, #80]	; (8003570 <HAL_I2C_MspInit+0x74>)
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	4a13      	ldr	r2, [pc, #76]	; (8003570 <HAL_I2C_MspInit+0x74>)
 8003522:	f043 0308 	orr.w	r3, r3, #8
 8003526:	6193      	str	r3, [r2, #24]
 8003528:	4b11      	ldr	r3, [pc, #68]	; (8003570 <HAL_I2C_MspInit+0x74>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003534:	23c0      	movs	r3, #192	; 0xc0
 8003536:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003538:	2312      	movs	r3, #18
 800353a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800353c:	2303      	movs	r3, #3
 800353e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003540:	f107 0310 	add.w	r3, r7, #16
 8003544:	4619      	mov	r1, r3
 8003546:	480b      	ldr	r0, [pc, #44]	; (8003574 <HAL_I2C_MspInit+0x78>)
 8003548:	f000 fb7a 	bl	8003c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800354c:	4b08      	ldr	r3, [pc, #32]	; (8003570 <HAL_I2C_MspInit+0x74>)
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	4a07      	ldr	r2, [pc, #28]	; (8003570 <HAL_I2C_MspInit+0x74>)
 8003552:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003556:	61d3      	str	r3, [r2, #28]
 8003558:	4b05      	ldr	r3, [pc, #20]	; (8003570 <HAL_I2C_MspInit+0x74>)
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003564:	bf00      	nop
 8003566:	3720      	adds	r7, #32
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40005400 	.word	0x40005400
 8003570:	40021000 	.word	0x40021000
 8003574:	40010c00 	.word	0x40010c00

08003578 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a09      	ldr	r2, [pc, #36]	; (80035ac <HAL_TIM_PWM_MspInit+0x34>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d10b      	bne.n	80035a2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800358a:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <HAL_TIM_PWM_MspInit+0x38>)
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	4a08      	ldr	r2, [pc, #32]	; (80035b0 <HAL_TIM_PWM_MspInit+0x38>)
 8003590:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003594:	6193      	str	r3, [r2, #24]
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <HAL_TIM_PWM_MspInit+0x38>)
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr
 80035ac:	40012c00 	.word	0x40012c00
 80035b0:	40021000 	.word	0x40021000

080035b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08a      	sub	sp, #40	; 0x28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035bc:	f107 0318 	add.w	r3, r7, #24
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	605a      	str	r2, [r3, #4]
 80035c6:	609a      	str	r2, [r3, #8]
 80035c8:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d2:	d114      	bne.n	80035fe <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035d4:	4b2d      	ldr	r3, [pc, #180]	; (800368c <HAL_TIM_Base_MspInit+0xd8>)
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	4a2c      	ldr	r2, [pc, #176]	; (800368c <HAL_TIM_Base_MspInit+0xd8>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	61d3      	str	r3, [r2, #28]
 80035e0:	4b2a      	ldr	r3, [pc, #168]	; (800368c <HAL_TIM_Base_MspInit+0xd8>)
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80035ec:	2200      	movs	r2, #0
 80035ee:	2101      	movs	r1, #1
 80035f0:	201c      	movs	r0, #28
 80035f2:	f000 faee 	bl	8003bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035f6:	201c      	movs	r0, #28
 80035f8:	f000 fb07 	bl	8003c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80035fc:	e042      	b.n	8003684 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a23      	ldr	r2, [pc, #140]	; (8003690 <HAL_TIM_Base_MspInit+0xdc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d12c      	bne.n	8003662 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003608:	4b20      	ldr	r3, [pc, #128]	; (800368c <HAL_TIM_Base_MspInit+0xd8>)
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	4a1f      	ldr	r2, [pc, #124]	; (800368c <HAL_TIM_Base_MspInit+0xd8>)
 800360e:	f043 0302 	orr.w	r3, r3, #2
 8003612:	61d3      	str	r3, [r2, #28]
 8003614:	4b1d      	ldr	r3, [pc, #116]	; (800368c <HAL_TIM_Base_MspInit+0xd8>)
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003620:	4b1a      	ldr	r3, [pc, #104]	; (800368c <HAL_TIM_Base_MspInit+0xd8>)
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	4a19      	ldr	r2, [pc, #100]	; (800368c <HAL_TIM_Base_MspInit+0xd8>)
 8003626:	f043 0308 	orr.w	r3, r3, #8
 800362a:	6193      	str	r3, [r2, #24]
 800362c:	4b17      	ldr	r3, [pc, #92]	; (800368c <HAL_TIM_Base_MspInit+0xd8>)
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003638:	2301      	movs	r3, #1
 800363a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800363c:	2300      	movs	r3, #0
 800363e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003640:	2300      	movs	r3, #0
 8003642:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003644:	f107 0318 	add.w	r3, r7, #24
 8003648:	4619      	mov	r1, r3
 800364a:	4812      	ldr	r0, [pc, #72]	; (8003694 <HAL_TIM_Base_MspInit+0xe0>)
 800364c:	f000 faf8 	bl	8003c40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003650:	2200      	movs	r2, #0
 8003652:	2100      	movs	r1, #0
 8003654:	201d      	movs	r0, #29
 8003656:	f000 fabc 	bl	8003bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800365a:	201d      	movs	r0, #29
 800365c:	f000 fad5 	bl	8003c0a <HAL_NVIC_EnableIRQ>
}
 8003660:	e010      	b.n	8003684 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a0c      	ldr	r2, [pc, #48]	; (8003698 <HAL_TIM_Base_MspInit+0xe4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d10b      	bne.n	8003684 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800366c:	4b07      	ldr	r3, [pc, #28]	; (800368c <HAL_TIM_Base_MspInit+0xd8>)
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	4a06      	ldr	r2, [pc, #24]	; (800368c <HAL_TIM_Base_MspInit+0xd8>)
 8003672:	f043 0304 	orr.w	r3, r3, #4
 8003676:	61d3      	str	r3, [r2, #28]
 8003678:	4b04      	ldr	r3, [pc, #16]	; (800368c <HAL_TIM_Base_MspInit+0xd8>)
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	68bb      	ldr	r3, [r7, #8]
}
 8003684:	bf00      	nop
 8003686:	3728      	adds	r7, #40	; 0x28
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000
 8003690:	40000400 	.word	0x40000400
 8003694:	40010c00 	.word	0x40010c00
 8003698:	40000800 	.word	0x40000800

0800369c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a4:	f107 0310 	add.w	r3, r7, #16
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a10      	ldr	r2, [pc, #64]	; (80036f8 <HAL_TIM_MspPostInit+0x5c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d118      	bne.n	80036ee <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036bc:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <HAL_TIM_MspPostInit+0x60>)
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	4a0e      	ldr	r2, [pc, #56]	; (80036fc <HAL_TIM_MspPostInit+0x60>)
 80036c2:	f043 0304 	orr.w	r3, r3, #4
 80036c6:	6193      	str	r3, [r2, #24]
 80036c8:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <HAL_TIM_MspPostInit+0x60>)
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80036d4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80036d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036da:	2302      	movs	r3, #2
 80036dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036de:	2302      	movs	r3, #2
 80036e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e2:	f107 0310 	add.w	r3, r7, #16
 80036e6:	4619      	mov	r1, r3
 80036e8:	4805      	ldr	r0, [pc, #20]	; (8003700 <HAL_TIM_MspPostInit+0x64>)
 80036ea:	f000 faa9 	bl	8003c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80036ee:	bf00      	nop
 80036f0:	3720      	adds	r7, #32
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40012c00 	.word	0x40012c00
 80036fc:	40021000 	.word	0x40021000
 8003700:	40010800 	.word	0x40010800

08003704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800370c:	f107 0310 	add.w	r3, r7, #16
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a1b      	ldr	r2, [pc, #108]	; (800378c <HAL_UART_MspInit+0x88>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d12f      	bne.n	8003784 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003724:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <HAL_UART_MspInit+0x8c>)
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	4a19      	ldr	r2, [pc, #100]	; (8003790 <HAL_UART_MspInit+0x8c>)
 800372a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800372e:	61d3      	str	r3, [r2, #28]
 8003730:	4b17      	ldr	r3, [pc, #92]	; (8003790 <HAL_UART_MspInit+0x8c>)
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800373c:	4b14      	ldr	r3, [pc, #80]	; (8003790 <HAL_UART_MspInit+0x8c>)
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	4a13      	ldr	r2, [pc, #76]	; (8003790 <HAL_UART_MspInit+0x8c>)
 8003742:	f043 0304 	orr.w	r3, r3, #4
 8003746:	6193      	str	r3, [r2, #24]
 8003748:	4b11      	ldr	r3, [pc, #68]	; (8003790 <HAL_UART_MspInit+0x8c>)
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003754:	2304      	movs	r3, #4
 8003756:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003758:	2302      	movs	r3, #2
 800375a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800375c:	2303      	movs	r3, #3
 800375e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003760:	f107 0310 	add.w	r3, r7, #16
 8003764:	4619      	mov	r1, r3
 8003766:	480b      	ldr	r0, [pc, #44]	; (8003794 <HAL_UART_MspInit+0x90>)
 8003768:	f000 fa6a 	bl	8003c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800376c:	2308      	movs	r3, #8
 800376e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003778:	f107 0310 	add.w	r3, r7, #16
 800377c:	4619      	mov	r1, r3
 800377e:	4805      	ldr	r0, [pc, #20]	; (8003794 <HAL_UART_MspInit+0x90>)
 8003780:	f000 fa5e 	bl	8003c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003784:	bf00      	nop
 8003786:	3720      	adds	r7, #32
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40004400 	.word	0x40004400
 8003790:	40021000 	.word	0x40021000
 8003794:	40010800 	.word	0x40010800

08003798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800379c:	e7fe      	b.n	800379c <NMI_Handler+0x4>

0800379e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800379e:	b480      	push	{r7}
 80037a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037a2:	e7fe      	b.n	80037a2 <HardFault_Handler+0x4>

080037a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037a8:	e7fe      	b.n	80037a8 <MemManage_Handler+0x4>

080037aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037aa:	b480      	push	{r7}
 80037ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037ae:	e7fe      	b.n	80037ae <BusFault_Handler+0x4>

080037b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037b4:	e7fe      	b.n	80037b4 <UsageFault_Handler+0x4>

080037b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037b6:	b480      	push	{r7}
 80037b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037ba:	bf00      	nop
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr

080037c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037c2:	b480      	push	{r7}
 80037c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr

080037ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037ce:	b480      	push	{r7}
 80037d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr

080037da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037de:	f000 f8e1 	bl	80039a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80037ec:	4802      	ldr	r0, [pc, #8]	; (80037f8 <TIM2_IRQHandler+0x10>)
 80037ee:	f002 ffe1 	bl	80067b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000138 	.word	0x20000138

080037fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003800:	4802      	ldr	r0, [pc, #8]	; (800380c <TIM3_IRQHandler+0x10>)
 8003802:	f002 ffd7 	bl	80067b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000180 	.word	0x20000180

08003810 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
	return 1;
 8003814:	2301      	movs	r3, #1
}
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr

0800381e <_kill>:

int _kill(int pid, int sig)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003828:	f00b fa1e 	bl	800ec68 <__errno>
 800382c:	4603      	mov	r3, r0
 800382e:	2216      	movs	r2, #22
 8003830:	601a      	str	r2, [r3, #0]
	return -1;
 8003832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <_exit>:

void _exit (int status)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003846:	f04f 31ff 	mov.w	r1, #4294967295
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff ffe7 	bl	800381e <_kill>
	while (1) {}		/* Make sure we hang here */
 8003850:	e7fe      	b.n	8003850 <_exit+0x12>
	...

08003854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800385c:	4a14      	ldr	r2, [pc, #80]	; (80038b0 <_sbrk+0x5c>)
 800385e:	4b15      	ldr	r3, [pc, #84]	; (80038b4 <_sbrk+0x60>)
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003868:	4b13      	ldr	r3, [pc, #76]	; (80038b8 <_sbrk+0x64>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d102      	bne.n	8003876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003870:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <_sbrk+0x64>)
 8003872:	4a12      	ldr	r2, [pc, #72]	; (80038bc <_sbrk+0x68>)
 8003874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003876:	4b10      	ldr	r3, [pc, #64]	; (80038b8 <_sbrk+0x64>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	429a      	cmp	r2, r3
 8003882:	d207      	bcs.n	8003894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003884:	f00b f9f0 	bl	800ec68 <__errno>
 8003888:	4603      	mov	r3, r0
 800388a:	220c      	movs	r2, #12
 800388c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800388e:	f04f 33ff 	mov.w	r3, #4294967295
 8003892:	e009      	b.n	80038a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003894:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <_sbrk+0x64>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800389a:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <_sbrk+0x64>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4413      	add	r3, r2
 80038a2:	4a05      	ldr	r2, [pc, #20]	; (80038b8 <_sbrk+0x64>)
 80038a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038a6:	68fb      	ldr	r3, [r7, #12]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20005000 	.word	0x20005000
 80038b4:	00000400 	.word	0x00000400
 80038b8:	20000abc 	.word	0x20000abc
 80038bc:	20000ae8 	.word	0x20000ae8

080038c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr

080038cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80038cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80038ce:	e003      	b.n	80038d8 <LoopCopyDataInit>

080038d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80038d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80038d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80038d6:	3104      	adds	r1, #4

080038d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80038d8:	480a      	ldr	r0, [pc, #40]	; (8003904 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80038da:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80038dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80038de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80038e0:	d3f6      	bcc.n	80038d0 <CopyDataInit>
  ldr r2, =_sbss
 80038e2:	4a0a      	ldr	r2, [pc, #40]	; (800390c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80038e4:	e002      	b.n	80038ec <LoopFillZerobss>

080038e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80038e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80038e8:	f842 3b04 	str.w	r3, [r2], #4

080038ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80038ec:	4b08      	ldr	r3, [pc, #32]	; (8003910 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80038ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80038f0:	d3f9      	bcc.n	80038e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038f2:	f7ff ffe5 	bl	80038c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038f6:	f00b f9bd 	bl	800ec74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038fa:	f7fe f811 	bl	8001920 <main>
  bx lr
 80038fe:	4770      	bx	lr
  ldr r3, =_sidata
 8003900:	0800f450 	.word	0x0800f450
  ldr r0, =_sdata
 8003904:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003908:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 800390c:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8003910:	20000ae4 	.word	0x20000ae4

08003914 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003914:	e7fe      	b.n	8003914 <ADC1_2_IRQHandler>
	...

08003918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <HAL_Init+0x28>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a07      	ldr	r2, [pc, #28]	; (8003940 <HAL_Init+0x28>)
 8003922:	f043 0310 	orr.w	r3, r3, #16
 8003926:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003928:	2003      	movs	r0, #3
 800392a:	f000 f947 	bl	8003bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800392e:	2000      	movs	r0, #0
 8003930:	f000 f808 	bl	8003944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003934:	f7ff fdb0 	bl	8003498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40022000 	.word	0x40022000

08003944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800394c:	4b12      	ldr	r3, [pc, #72]	; (8003998 <HAL_InitTick+0x54>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	4b12      	ldr	r3, [pc, #72]	; (800399c <HAL_InitTick+0x58>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	4619      	mov	r1, r3
 8003956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800395a:	fbb3 f3f1 	udiv	r3, r3, r1
 800395e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003962:	4618      	mov	r0, r3
 8003964:	f000 f95f 	bl	8003c26 <HAL_SYSTICK_Config>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e00e      	b.n	8003990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b0f      	cmp	r3, #15
 8003976:	d80a      	bhi.n	800398e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003978:	2200      	movs	r2, #0
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	f04f 30ff 	mov.w	r0, #4294967295
 8003980:	f000 f927 	bl	8003bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003984:	4a06      	ldr	r2, [pc, #24]	; (80039a0 <HAL_InitTick+0x5c>)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	e000      	b.n	8003990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20000004 	.word	0x20000004
 800399c:	2000000c 	.word	0x2000000c
 80039a0:	20000008 	.word	0x20000008

080039a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <HAL_IncTick+0x1c>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	461a      	mov	r2, r3
 80039ae:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_IncTick+0x20>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4413      	add	r3, r2
 80039b4:	4a03      	ldr	r2, [pc, #12]	; (80039c4 <HAL_IncTick+0x20>)
 80039b6:	6013      	str	r3, [r2, #0]
}
 80039b8:	bf00      	nop
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr
 80039c0:	2000000c 	.word	0x2000000c
 80039c4:	20000ad0 	.word	0x20000ad0

080039c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return uwTick;
 80039cc:	4b02      	ldr	r3, [pc, #8]	; (80039d8 <HAL_GetTick+0x10>)
 80039ce:	681b      	ldr	r3, [r3, #0]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	20000ad0 	.word	0x20000ad0

080039dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039e4:	f7ff fff0 	bl	80039c8 <HAL_GetTick>
 80039e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f4:	d005      	beq.n	8003a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039f6:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_Delay+0x44>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4413      	add	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a02:	bf00      	nop
 8003a04:	f7ff ffe0 	bl	80039c8 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d8f7      	bhi.n	8003a04 <HAL_Delay+0x28>
  {
  }
}
 8003a14:	bf00      	nop
 8003a16:	bf00      	nop
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	2000000c 	.word	0x2000000c

08003a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a34:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <__NVIC_SetPriorityGrouping+0x44>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a40:	4013      	ands	r3, r2
 8003a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a56:	4a04      	ldr	r2, [pc, #16]	; (8003a68 <__NVIC_SetPriorityGrouping+0x44>)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	60d3      	str	r3, [r2, #12]
}
 8003a5c:	bf00      	nop
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	e000ed00 	.word	0xe000ed00

08003a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a70:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <__NVIC_GetPriorityGrouping+0x18>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	0a1b      	lsrs	r3, r3, #8
 8003a76:	f003 0307 	and.w	r3, r3, #7
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	db0b      	blt.n	8003ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	f003 021f 	and.w	r2, r3, #31
 8003aa0:	4906      	ldr	r1, [pc, #24]	; (8003abc <__NVIC_EnableIRQ+0x34>)
 8003aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8003aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr
 8003abc:	e000e100 	.word	0xe000e100

08003ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	6039      	str	r1, [r7, #0]
 8003aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	db0a      	blt.n	8003aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	490c      	ldr	r1, [pc, #48]	; (8003b0c <__NVIC_SetPriority+0x4c>)
 8003ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ade:	0112      	lsls	r2, r2, #4
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ae8:	e00a      	b.n	8003b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	4908      	ldr	r1, [pc, #32]	; (8003b10 <__NVIC_SetPriority+0x50>)
 8003af0:	79fb      	ldrb	r3, [r7, #7]
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	3b04      	subs	r3, #4
 8003af8:	0112      	lsls	r2, r2, #4
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	440b      	add	r3, r1
 8003afe:	761a      	strb	r2, [r3, #24]
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	e000e100 	.word	0xe000e100
 8003b10:	e000ed00 	.word	0xe000ed00

08003b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b089      	sub	sp, #36	; 0x24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f1c3 0307 	rsb	r3, r3, #7
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	bf28      	it	cs
 8003b32:	2304      	movcs	r3, #4
 8003b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	2b06      	cmp	r3, #6
 8003b3c:	d902      	bls.n	8003b44 <NVIC_EncodePriority+0x30>
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	3b03      	subs	r3, #3
 8003b42:	e000      	b.n	8003b46 <NVIC_EncodePriority+0x32>
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b48:	f04f 32ff 	mov.w	r2, #4294967295
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	43da      	mvns	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	401a      	ands	r2, r3
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	fa01 f303 	lsl.w	r3, r1, r3
 8003b66:	43d9      	mvns	r1, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b6c:	4313      	orrs	r3, r2
         );
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3724      	adds	r7, #36	; 0x24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr

08003b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b88:	d301      	bcc.n	8003b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e00f      	b.n	8003bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b8e:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <SysTick_Config+0x40>)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b96:	210f      	movs	r1, #15
 8003b98:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9c:	f7ff ff90 	bl	8003ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ba0:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <SysTick_Config+0x40>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ba6:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <SysTick_Config+0x40>)
 8003ba8:	2207      	movs	r2, #7
 8003baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	e000e010 	.word	0xe000e010

08003bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff ff2d 	bl	8003a24 <__NVIC_SetPriorityGrouping>
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b086      	sub	sp, #24
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	4603      	mov	r3, r0
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003be4:	f7ff ff42 	bl	8003a6c <__NVIC_GetPriorityGrouping>
 8003be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	6978      	ldr	r0, [r7, #20]
 8003bf0:	f7ff ff90 	bl	8003b14 <NVIC_EncodePriority>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff ff5f 	bl	8003ac0 <__NVIC_SetPriority>
}
 8003c02:	bf00      	nop
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	4603      	mov	r3, r0
 8003c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff ff35 	bl	8003a88 <__NVIC_EnableIRQ>
}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b082      	sub	sp, #8
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7ff ffa2 	bl	8003b78 <SysTick_Config>
 8003c34:	4603      	mov	r3, r0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b08b      	sub	sp, #44	; 0x2c
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c52:	e169      	b.n	8003f28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c54:	2201      	movs	r2, #1
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	f040 8158 	bne.w	8003f22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	4a9a      	ldr	r2, [pc, #616]	; (8003ee0 <HAL_GPIO_Init+0x2a0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d05e      	beq.n	8003d3a <HAL_GPIO_Init+0xfa>
 8003c7c:	4a98      	ldr	r2, [pc, #608]	; (8003ee0 <HAL_GPIO_Init+0x2a0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d875      	bhi.n	8003d6e <HAL_GPIO_Init+0x12e>
 8003c82:	4a98      	ldr	r2, [pc, #608]	; (8003ee4 <HAL_GPIO_Init+0x2a4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d058      	beq.n	8003d3a <HAL_GPIO_Init+0xfa>
 8003c88:	4a96      	ldr	r2, [pc, #600]	; (8003ee4 <HAL_GPIO_Init+0x2a4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d86f      	bhi.n	8003d6e <HAL_GPIO_Init+0x12e>
 8003c8e:	4a96      	ldr	r2, [pc, #600]	; (8003ee8 <HAL_GPIO_Init+0x2a8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d052      	beq.n	8003d3a <HAL_GPIO_Init+0xfa>
 8003c94:	4a94      	ldr	r2, [pc, #592]	; (8003ee8 <HAL_GPIO_Init+0x2a8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d869      	bhi.n	8003d6e <HAL_GPIO_Init+0x12e>
 8003c9a:	4a94      	ldr	r2, [pc, #592]	; (8003eec <HAL_GPIO_Init+0x2ac>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d04c      	beq.n	8003d3a <HAL_GPIO_Init+0xfa>
 8003ca0:	4a92      	ldr	r2, [pc, #584]	; (8003eec <HAL_GPIO_Init+0x2ac>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d863      	bhi.n	8003d6e <HAL_GPIO_Init+0x12e>
 8003ca6:	4a92      	ldr	r2, [pc, #584]	; (8003ef0 <HAL_GPIO_Init+0x2b0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d046      	beq.n	8003d3a <HAL_GPIO_Init+0xfa>
 8003cac:	4a90      	ldr	r2, [pc, #576]	; (8003ef0 <HAL_GPIO_Init+0x2b0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d85d      	bhi.n	8003d6e <HAL_GPIO_Init+0x12e>
 8003cb2:	2b12      	cmp	r3, #18
 8003cb4:	d82a      	bhi.n	8003d0c <HAL_GPIO_Init+0xcc>
 8003cb6:	2b12      	cmp	r3, #18
 8003cb8:	d859      	bhi.n	8003d6e <HAL_GPIO_Init+0x12e>
 8003cba:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <HAL_GPIO_Init+0x80>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003d3b 	.word	0x08003d3b
 8003cc4:	08003d15 	.word	0x08003d15
 8003cc8:	08003d27 	.word	0x08003d27
 8003ccc:	08003d69 	.word	0x08003d69
 8003cd0:	08003d6f 	.word	0x08003d6f
 8003cd4:	08003d6f 	.word	0x08003d6f
 8003cd8:	08003d6f 	.word	0x08003d6f
 8003cdc:	08003d6f 	.word	0x08003d6f
 8003ce0:	08003d6f 	.word	0x08003d6f
 8003ce4:	08003d6f 	.word	0x08003d6f
 8003ce8:	08003d6f 	.word	0x08003d6f
 8003cec:	08003d6f 	.word	0x08003d6f
 8003cf0:	08003d6f 	.word	0x08003d6f
 8003cf4:	08003d6f 	.word	0x08003d6f
 8003cf8:	08003d6f 	.word	0x08003d6f
 8003cfc:	08003d6f 	.word	0x08003d6f
 8003d00:	08003d6f 	.word	0x08003d6f
 8003d04:	08003d1d 	.word	0x08003d1d
 8003d08:	08003d31 	.word	0x08003d31
 8003d0c:	4a79      	ldr	r2, [pc, #484]	; (8003ef4 <HAL_GPIO_Init+0x2b4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d013      	beq.n	8003d3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d12:	e02c      	b.n	8003d6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	623b      	str	r3, [r7, #32]
          break;
 8003d1a:	e029      	b.n	8003d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	3304      	adds	r3, #4
 8003d22:	623b      	str	r3, [r7, #32]
          break;
 8003d24:	e024      	b.n	8003d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	623b      	str	r3, [r7, #32]
          break;
 8003d2e:	e01f      	b.n	8003d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	330c      	adds	r3, #12
 8003d36:	623b      	str	r3, [r7, #32]
          break;
 8003d38:	e01a      	b.n	8003d70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d102      	bne.n	8003d48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d42:	2304      	movs	r3, #4
 8003d44:	623b      	str	r3, [r7, #32]
          break;
 8003d46:	e013      	b.n	8003d70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d105      	bne.n	8003d5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d50:	2308      	movs	r3, #8
 8003d52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	611a      	str	r2, [r3, #16]
          break;
 8003d5a:	e009      	b.n	8003d70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d5c:	2308      	movs	r3, #8
 8003d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	615a      	str	r2, [r3, #20]
          break;
 8003d66:	e003      	b.n	8003d70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	623b      	str	r3, [r7, #32]
          break;
 8003d6c:	e000      	b.n	8003d70 <HAL_GPIO_Init+0x130>
          break;
 8003d6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	2bff      	cmp	r3, #255	; 0xff
 8003d74:	d801      	bhi.n	8003d7a <HAL_GPIO_Init+0x13a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	e001      	b.n	8003d7e <HAL_GPIO_Init+0x13e>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	2bff      	cmp	r3, #255	; 0xff
 8003d84:	d802      	bhi.n	8003d8c <HAL_GPIO_Init+0x14c>
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	e002      	b.n	8003d92 <HAL_GPIO_Init+0x152>
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	3b08      	subs	r3, #8
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	210f      	movs	r1, #15
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	401a      	ands	r2, r3
 8003da4:	6a39      	ldr	r1, [r7, #32]
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dac:	431a      	orrs	r2, r3
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 80b1 	beq.w	8003f22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003dc0:	4b4d      	ldr	r3, [pc, #308]	; (8003ef8 <HAL_GPIO_Init+0x2b8>)
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	4a4c      	ldr	r2, [pc, #304]	; (8003ef8 <HAL_GPIO_Init+0x2b8>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	6193      	str	r3, [r2, #24]
 8003dcc:	4b4a      	ldr	r3, [pc, #296]	; (8003ef8 <HAL_GPIO_Init+0x2b8>)
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003dd8:	4a48      	ldr	r2, [pc, #288]	; (8003efc <HAL_GPIO_Init+0x2bc>)
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	089b      	lsrs	r3, r3, #2
 8003dde:	3302      	adds	r3, #2
 8003de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	220f      	movs	r2, #15
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a40      	ldr	r2, [pc, #256]	; (8003f00 <HAL_GPIO_Init+0x2c0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d013      	beq.n	8003e2c <HAL_GPIO_Init+0x1ec>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a3f      	ldr	r2, [pc, #252]	; (8003f04 <HAL_GPIO_Init+0x2c4>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00d      	beq.n	8003e28 <HAL_GPIO_Init+0x1e8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a3e      	ldr	r2, [pc, #248]	; (8003f08 <HAL_GPIO_Init+0x2c8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d007      	beq.n	8003e24 <HAL_GPIO_Init+0x1e4>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a3d      	ldr	r2, [pc, #244]	; (8003f0c <HAL_GPIO_Init+0x2cc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d101      	bne.n	8003e20 <HAL_GPIO_Init+0x1e0>
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e006      	b.n	8003e2e <HAL_GPIO_Init+0x1ee>
 8003e20:	2304      	movs	r3, #4
 8003e22:	e004      	b.n	8003e2e <HAL_GPIO_Init+0x1ee>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e002      	b.n	8003e2e <HAL_GPIO_Init+0x1ee>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <HAL_GPIO_Init+0x1ee>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e30:	f002 0203 	and.w	r2, r2, #3
 8003e34:	0092      	lsls	r2, r2, #2
 8003e36:	4093      	lsls	r3, r2
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e3e:	492f      	ldr	r1, [pc, #188]	; (8003efc <HAL_GPIO_Init+0x2bc>)
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	3302      	adds	r3, #2
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d006      	beq.n	8003e66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e58:	4b2d      	ldr	r3, [pc, #180]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	492c      	ldr	r1, [pc, #176]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	600b      	str	r3, [r1, #0]
 8003e64:	e006      	b.n	8003e74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e66:	4b2a      	ldr	r3, [pc, #168]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	4928      	ldr	r1, [pc, #160]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d006      	beq.n	8003e8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e80:	4b23      	ldr	r3, [pc, #140]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	4922      	ldr	r1, [pc, #136]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	604b      	str	r3, [r1, #4]
 8003e8c:	e006      	b.n	8003e9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e8e:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	43db      	mvns	r3, r3
 8003e96:	491e      	ldr	r1, [pc, #120]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e98:	4013      	ands	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d006      	beq.n	8003eb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ea8:	4b19      	ldr	r3, [pc, #100]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	4918      	ldr	r1, [pc, #96]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	608b      	str	r3, [r1, #8]
 8003eb4:	e006      	b.n	8003ec4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003eb6:	4b16      	ldr	r3, [pc, #88]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	4914      	ldr	r1, [pc, #80]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d021      	beq.n	8003f14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	490e      	ldr	r1, [pc, #56]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60cb      	str	r3, [r1, #12]
 8003edc:	e021      	b.n	8003f22 <HAL_GPIO_Init+0x2e2>
 8003ede:	bf00      	nop
 8003ee0:	10320000 	.word	0x10320000
 8003ee4:	10310000 	.word	0x10310000
 8003ee8:	10220000 	.word	0x10220000
 8003eec:	10210000 	.word	0x10210000
 8003ef0:	10120000 	.word	0x10120000
 8003ef4:	10110000 	.word	0x10110000
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40010000 	.word	0x40010000
 8003f00:	40010800 	.word	0x40010800
 8003f04:	40010c00 	.word	0x40010c00
 8003f08:	40011000 	.word	0x40011000
 8003f0c:	40011400 	.word	0x40011400
 8003f10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <HAL_GPIO_Init+0x304>)
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	4909      	ldr	r1, [pc, #36]	; (8003f44 <HAL_GPIO_Init+0x304>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	3301      	adds	r3, #1
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f47f ae8e 	bne.w	8003c54 <HAL_GPIO_Init+0x14>
  }
}
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop
 8003f3c:	372c      	adds	r7, #44	; 0x2c
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr
 8003f44:	40010400 	.word	0x40010400

08003f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	807b      	strh	r3, [r7, #2]
 8003f54:	4613      	mov	r3, r2
 8003f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f58:	787b      	ldrb	r3, [r7, #1]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f5e:	887a      	ldrh	r2, [r7, #2]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f64:	e003      	b.n	8003f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f66:	887b      	ldrh	r3, [r7, #2]
 8003f68:	041a      	lsls	r2, r3, #16
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	611a      	str	r2, [r3, #16]
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr

08003f78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f8a:	887a      	ldrh	r2, [r7, #2]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	041a      	lsls	r2, r3, #16
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	43d9      	mvns	r1, r3
 8003f96:	887b      	ldrh	r3, [r7, #2]
 8003f98:	400b      	ands	r3, r1
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	611a      	str	r2, [r3, #16]
}
 8003fa0:	bf00      	nop
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr
	...

08003fac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e12b      	b.n	8004216 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff fa92 	bl	80034fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2224      	movs	r2, #36	; 0x24
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0201 	bic.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ffe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800400e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004010:	f002 f84e 	bl	80060b0 <HAL_RCC_GetPCLK1Freq>
 8004014:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	4a81      	ldr	r2, [pc, #516]	; (8004220 <HAL_I2C_Init+0x274>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d807      	bhi.n	8004030 <HAL_I2C_Init+0x84>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4a80      	ldr	r2, [pc, #512]	; (8004224 <HAL_I2C_Init+0x278>)
 8004024:	4293      	cmp	r3, r2
 8004026:	bf94      	ite	ls
 8004028:	2301      	movls	r3, #1
 800402a:	2300      	movhi	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	e006      	b.n	800403e <HAL_I2C_Init+0x92>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4a7d      	ldr	r2, [pc, #500]	; (8004228 <HAL_I2C_Init+0x27c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	bf94      	ite	ls
 8004038:	2301      	movls	r3, #1
 800403a:	2300      	movhi	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e0e7      	b.n	8004216 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4a78      	ldr	r2, [pc, #480]	; (800422c <HAL_I2C_Init+0x280>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	0c9b      	lsrs	r3, r3, #18
 8004050:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	4a6a      	ldr	r2, [pc, #424]	; (8004220 <HAL_I2C_Init+0x274>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d802      	bhi.n	8004080 <HAL_I2C_Init+0xd4>
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	3301      	adds	r3, #1
 800407e:	e009      	b.n	8004094 <HAL_I2C_Init+0xe8>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004086:	fb02 f303 	mul.w	r3, r2, r3
 800408a:	4a69      	ldr	r2, [pc, #420]	; (8004230 <HAL_I2C_Init+0x284>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	099b      	lsrs	r3, r3, #6
 8004092:	3301      	adds	r3, #1
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	430b      	orrs	r3, r1
 800409a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	495c      	ldr	r1, [pc, #368]	; (8004220 <HAL_I2C_Init+0x274>)
 80040b0:	428b      	cmp	r3, r1
 80040b2:	d819      	bhi.n	80040e8 <HAL_I2C_Init+0x13c>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1e59      	subs	r1, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	fbb1 f3f3 	udiv	r3, r1, r3
 80040c2:	1c59      	adds	r1, r3, #1
 80040c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80040c8:	400b      	ands	r3, r1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_I2C_Init+0x138>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1e59      	subs	r1, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80040dc:	3301      	adds	r3, #1
 80040de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e2:	e051      	b.n	8004188 <HAL_I2C_Init+0x1dc>
 80040e4:	2304      	movs	r3, #4
 80040e6:	e04f      	b.n	8004188 <HAL_I2C_Init+0x1dc>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d111      	bne.n	8004114 <HAL_I2C_Init+0x168>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	1e58      	subs	r0, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6859      	ldr	r1, [r3, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	440b      	add	r3, r1
 80040fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004102:	3301      	adds	r3, #1
 8004104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004108:	2b00      	cmp	r3, #0
 800410a:	bf0c      	ite	eq
 800410c:	2301      	moveq	r3, #1
 800410e:	2300      	movne	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	e012      	b.n	800413a <HAL_I2C_Init+0x18e>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	1e58      	subs	r0, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6859      	ldr	r1, [r3, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	0099      	lsls	r1, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	fbb0 f3f3 	udiv	r3, r0, r3
 800412a:	3301      	adds	r3, #1
 800412c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004130:	2b00      	cmp	r3, #0
 8004132:	bf0c      	ite	eq
 8004134:	2301      	moveq	r3, #1
 8004136:	2300      	movne	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_I2C_Init+0x196>
 800413e:	2301      	movs	r3, #1
 8004140:	e022      	b.n	8004188 <HAL_I2C_Init+0x1dc>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10e      	bne.n	8004168 <HAL_I2C_Init+0x1bc>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	1e58      	subs	r0, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6859      	ldr	r1, [r3, #4]
 8004152:	460b      	mov	r3, r1
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	440b      	add	r3, r1
 8004158:	fbb0 f3f3 	udiv	r3, r0, r3
 800415c:	3301      	adds	r3, #1
 800415e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004166:	e00f      	b.n	8004188 <HAL_I2C_Init+0x1dc>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	1e58      	subs	r0, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6859      	ldr	r1, [r3, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	0099      	lsls	r1, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	fbb0 f3f3 	udiv	r3, r0, r3
 800417e:	3301      	adds	r3, #1
 8004180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004184:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	6809      	ldr	r1, [r1, #0]
 800418c:	4313      	orrs	r3, r2
 800418e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69da      	ldr	r2, [r3, #28]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6911      	ldr	r1, [r2, #16]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	68d2      	ldr	r2, [r2, #12]
 80041c2:	4311      	orrs	r1, r2
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695a      	ldr	r2, [r3, #20]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	000186a0 	.word	0x000186a0
 8004224:	001e847f 	.word	0x001e847f
 8004228:	003d08ff 	.word	0x003d08ff
 800422c:	431bde83 	.word	0x431bde83
 8004230:	10624dd3 	.word	0x10624dd3

08004234 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af02      	add	r7, sp, #8
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	607a      	str	r2, [r7, #4]
 800423e:	461a      	mov	r2, r3
 8004240:	460b      	mov	r3, r1
 8004242:	817b      	strh	r3, [r7, #10]
 8004244:	4613      	mov	r3, r2
 8004246:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004248:	f7ff fbbe 	bl	80039c8 <HAL_GetTick>
 800424c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b20      	cmp	r3, #32
 8004258:	f040 80e0 	bne.w	800441c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	2319      	movs	r3, #25
 8004262:	2201      	movs	r2, #1
 8004264:	4970      	ldr	r1, [pc, #448]	; (8004428 <HAL_I2C_Master_Transmit+0x1f4>)
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f001 f972 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004272:	2302      	movs	r3, #2
 8004274:	e0d3      	b.n	800441e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_I2C_Master_Transmit+0x50>
 8004280:	2302      	movs	r3, #2
 8004282:	e0cc      	b.n	800441e <HAL_I2C_Master_Transmit+0x1ea>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b01      	cmp	r3, #1
 8004298:	d007      	beq.n	80042aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0201 	orr.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2221      	movs	r2, #33	; 0x21
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2210      	movs	r2, #16
 80042c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	893a      	ldrh	r2, [r7, #8]
 80042da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4a50      	ldr	r2, [pc, #320]	; (800442c <HAL_I2C_Master_Transmit+0x1f8>)
 80042ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042ec:	8979      	ldrh	r1, [r7, #10]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	6a3a      	ldr	r2, [r7, #32]
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 fe5e 	bl	8004fb4 <I2C_MasterRequestWrite>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e08d      	b.n	800441e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004302:	2300      	movs	r3, #0
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004318:	e066      	b.n	80043e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	6a39      	ldr	r1, [r7, #32]
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f001 f9ec 	bl	80056fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00d      	beq.n	8004346 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	2b04      	cmp	r3, #4
 8004330:	d107      	bne.n	8004342 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004340:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e06b      	b.n	800441e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	781a      	ldrb	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b01      	subs	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b04      	cmp	r3, #4
 8004382:	d11b      	bne.n	80043bc <HAL_I2C_Master_Transmit+0x188>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004388:	2b00      	cmp	r3, #0
 800438a:	d017      	beq.n	80043bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	781a      	ldrb	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	6a39      	ldr	r1, [r7, #32]
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f001 f9dc 	bl	800577e <I2C_WaitOnBTFFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00d      	beq.n	80043e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d107      	bne.n	80043e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e01a      	b.n	800441e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d194      	bne.n	800431a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	e000      	b.n	800441e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800441c:	2302      	movs	r3, #2
  }
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	00100002 	.word	0x00100002
 800442c:	ffff0000 	.word	0xffff0000

08004430 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08c      	sub	sp, #48	; 0x30
 8004434:	af02      	add	r7, sp, #8
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	607a      	str	r2, [r7, #4]
 800443a:	461a      	mov	r2, r3
 800443c:	460b      	mov	r3, r1
 800443e:	817b      	strh	r3, [r7, #10]
 8004440:	4613      	mov	r3, r2
 8004442:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004448:	f7ff fabe 	bl	80039c8 <HAL_GetTick>
 800444c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b20      	cmp	r3, #32
 8004458:	f040 823f 	bne.w	80048da <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	2319      	movs	r3, #25
 8004462:	2201      	movs	r2, #1
 8004464:	497f      	ldr	r1, [pc, #508]	; (8004664 <HAL_I2C_Master_Receive+0x234>)
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f001 f872 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004472:	2302      	movs	r3, #2
 8004474:	e232      	b.n	80048dc <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_I2C_Master_Receive+0x54>
 8004480:	2302      	movs	r3, #2
 8004482:	e22b      	b.n	80048dc <HAL_I2C_Master_Receive+0x4ac>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b01      	cmp	r3, #1
 8004498:	d007      	beq.n	80044aa <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0201 	orr.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2222      	movs	r2, #34	; 0x22
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2210      	movs	r2, #16
 80044c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	893a      	ldrh	r2, [r7, #8]
 80044da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4a5f      	ldr	r2, [pc, #380]	; (8004668 <HAL_I2C_Master_Receive+0x238>)
 80044ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044ec:	8979      	ldrh	r1, [r7, #10]
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 fde0 	bl	80050b8 <I2C_MasterRequestRead>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e1ec      	b.n	80048dc <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004506:	2b00      	cmp	r3, #0
 8004508:	d113      	bne.n	8004532 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800450a:	2300      	movs	r3, #0
 800450c:	61fb      	str	r3, [r7, #28]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	61fb      	str	r3, [r7, #28]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	61fb      	str	r3, [r7, #28]
 800451e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	e1c0      	b.n	80048b4 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004536:	2b01      	cmp	r3, #1
 8004538:	d11e      	bne.n	8004578 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004548:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800454a:	b672      	cpsid	i
}
 800454c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800454e:	2300      	movs	r3, #0
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	61bb      	str	r3, [r7, #24]
 8004562:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004572:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004574:	b662      	cpsie	i
}
 8004576:	e035      	b.n	80045e4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457c:	2b02      	cmp	r3, #2
 800457e:	d11e      	bne.n	80045be <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800458e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004590:	b672      	cpsid	i
}
 8004592:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80045ba:	b662      	cpsie	i
}
 80045bc:	e012      	b.n	80045e4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ce:	2300      	movs	r3, #0
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80045e4:	e166      	b.n	80048b4 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	f200 811f 	bhi.w	800482e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d123      	bne.n	8004640 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f001 f8ff 	bl	8005800 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e167      	b.n	80048dc <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800463e:	e139      	b.n	80048b4 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004644:	2b02      	cmp	r3, #2
 8004646:	d152      	bne.n	80046ee <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464e:	2200      	movs	r2, #0
 8004650:	4906      	ldr	r1, [pc, #24]	; (800466c <HAL_I2C_Master_Receive+0x23c>)
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 ff7c 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e13c      	b.n	80048dc <HAL_I2C_Master_Receive+0x4ac>
 8004662:	bf00      	nop
 8004664:	00100002 	.word	0x00100002
 8004668:	ffff0000 	.word	0xffff0000
 800466c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004670:	b672      	cpsid	i
}
 8004672:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80046b6:	b662      	cpsie	i
}
 80046b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	3b01      	subs	r3, #1
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046ec:	e0e2      	b.n	80048b4 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	2200      	movs	r2, #0
 80046f6:	497b      	ldr	r1, [pc, #492]	; (80048e4 <HAL_I2C_Master_Receive+0x4b4>)
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 ff29 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e0e9      	b.n	80048dc <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004716:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004718:	b672      	cpsid	i
}
 800471a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004738:	3b01      	subs	r3, #1
 800473a:	b29a      	uxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800474e:	4b66      	ldr	r3, [pc, #408]	; (80048e8 <HAL_I2C_Master_Receive+0x4b8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	08db      	lsrs	r3, r3, #3
 8004754:	4a65      	ldr	r2, [pc, #404]	; (80048ec <HAL_I2C_Master_Receive+0x4bc>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	0a1a      	lsrs	r2, r3, #8
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	00da      	lsls	r2, r3, #3
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	3b01      	subs	r3, #1
 800476c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d118      	bne.n	80047a6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f043 0220 	orr.w	r2, r3, #32
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004796:	b662      	cpsie	i
}
 8004798:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e09a      	b.n	80048dc <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d1d9      	bne.n	8004768 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691a      	ldr	r2, [r3, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	1c5a      	adds	r2, r3, #1
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80047f6:	b662      	cpsie	i
}
 80047f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	691a      	ldr	r2, [r3, #16]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004816:	3b01      	subs	r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800482c:	e042      	b.n	80048b4 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800482e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004830:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 ffe4 	bl	8005800 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e04c      	b.n	80048dc <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b04      	cmp	r3, #4
 8004880:	d118      	bne.n	80048b4 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f47f ae94 	bne.w	80045e6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	e000      	b.n	80048dc <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80048da:	2302      	movs	r3, #2
  }
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3728      	adds	r7, #40	; 0x28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	00010004 	.word	0x00010004
 80048e8:	20000004 	.word	0x20000004
 80048ec:	14f8b589 	.word	0x14f8b589

080048f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	4608      	mov	r0, r1
 80048fa:	4611      	mov	r1, r2
 80048fc:	461a      	mov	r2, r3
 80048fe:	4603      	mov	r3, r0
 8004900:	817b      	strh	r3, [r7, #10]
 8004902:	460b      	mov	r3, r1
 8004904:	813b      	strh	r3, [r7, #8]
 8004906:	4613      	mov	r3, r2
 8004908:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800490a:	f7ff f85d 	bl	80039c8 <HAL_GetTick>
 800490e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b20      	cmp	r3, #32
 800491a:	f040 80d9 	bne.w	8004ad0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	2319      	movs	r3, #25
 8004924:	2201      	movs	r2, #1
 8004926:	496d      	ldr	r1, [pc, #436]	; (8004adc <HAL_I2C_Mem_Write+0x1ec>)
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 fe11 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004934:	2302      	movs	r3, #2
 8004936:	e0cc      	b.n	8004ad2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <HAL_I2C_Mem_Write+0x56>
 8004942:	2302      	movs	r3, #2
 8004944:	e0c5      	b.n	8004ad2 <HAL_I2C_Mem_Write+0x1e2>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b01      	cmp	r3, #1
 800495a:	d007      	beq.n	800496c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800497a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2221      	movs	r2, #33	; 0x21
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2240      	movs	r2, #64	; 0x40
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a3a      	ldr	r2, [r7, #32]
 8004996:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800499c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4a4d      	ldr	r2, [pc, #308]	; (8004ae0 <HAL_I2C_Mem_Write+0x1f0>)
 80049ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049ae:	88f8      	ldrh	r0, [r7, #6]
 80049b0:	893a      	ldrh	r2, [r7, #8]
 80049b2:	8979      	ldrh	r1, [r7, #10]
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	9301      	str	r3, [sp, #4]
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	4603      	mov	r3, r0
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 fc48 	bl	8005254 <I2C_RequestMemoryWrite>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d052      	beq.n	8004a70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e081      	b.n	8004ad2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 fe92 	bl	80056fc <I2C_WaitOnTXEFlagUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00d      	beq.n	80049fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d107      	bne.n	80049f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e06b      	b.n	8004ad2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	781a      	ldrb	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d11b      	bne.n	8004a70 <HAL_I2C_Mem_Write+0x180>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d017      	beq.n	8004a70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	781a      	ldrb	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1aa      	bne.n	80049ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 fe7e 	bl	800577e <I2C_WaitOnBTFFlagUntilTimeout>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00d      	beq.n	8004aa4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d107      	bne.n	8004aa0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e016      	b.n	8004ad2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	e000      	b.n	8004ad2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ad0:	2302      	movs	r3, #2
  }
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	00100002 	.word	0x00100002
 8004ae0:	ffff0000 	.word	0xffff0000

08004ae4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08c      	sub	sp, #48	; 0x30
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	4608      	mov	r0, r1
 8004aee:	4611      	mov	r1, r2
 8004af0:	461a      	mov	r2, r3
 8004af2:	4603      	mov	r3, r0
 8004af4:	817b      	strh	r3, [r7, #10]
 8004af6:	460b      	mov	r3, r1
 8004af8:	813b      	strh	r3, [r7, #8]
 8004afa:	4613      	mov	r3, r2
 8004afc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b02:	f7fe ff61 	bl	80039c8 <HAL_GetTick>
 8004b06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	f040 8244 	bne.w	8004f9e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	2319      	movs	r3, #25
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	4982      	ldr	r1, [pc, #520]	; (8004d28 <HAL_I2C_Mem_Read+0x244>)
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 fd15 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e237      	b.n	8004fa0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <HAL_I2C_Mem_Read+0x5a>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e230      	b.n	8004fa0 <HAL_I2C_Mem_Read+0x4bc>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d007      	beq.n	8004b64 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2222      	movs	r2, #34	; 0x22
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2240      	movs	r2, #64	; 0x40
 8004b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4a62      	ldr	r2, [pc, #392]	; (8004d2c <HAL_I2C_Mem_Read+0x248>)
 8004ba4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ba6:	88f8      	ldrh	r0, [r7, #6]
 8004ba8:	893a      	ldrh	r2, [r7, #8]
 8004baa:	8979      	ldrh	r1, [r7, #10]
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 fbe2 	bl	8005380 <I2C_RequestMemoryRead>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e1ec      	b.n	8004fa0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d113      	bne.n	8004bf6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61fb      	str	r3, [r7, #28]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	61fb      	str	r3, [r7, #28]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	61fb      	str	r3, [r7, #28]
 8004be2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	e1c0      	b.n	8004f78 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d11e      	bne.n	8004c3c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c0e:	b672      	cpsid	i
}
 8004c10:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c12:	2300      	movs	r3, #0
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	61bb      	str	r3, [r7, #24]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	61bb      	str	r3, [r7, #24]
 8004c26:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004c38:	b662      	cpsie	i
}
 8004c3a:	e035      	b.n	8004ca8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d11e      	bne.n	8004c82 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c54:	b672      	cpsid	i
}
 8004c56:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c58:	2300      	movs	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004c7e:	b662      	cpsie	i
}
 8004c80:	e012      	b.n	8004ca8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c90:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c92:	2300      	movs	r3, #0
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004ca8:	e166      	b.n	8004f78 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	f200 811f 	bhi.w	8004ef2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d123      	bne.n	8004d04 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fd9d 	bl	8005800 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e167      	b.n	8004fa0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691a      	ldr	r2, [r3, #16]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d02:	e139      	b.n	8004f78 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d152      	bne.n	8004db2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d12:	2200      	movs	r2, #0
 8004d14:	4906      	ldr	r1, [pc, #24]	; (8004d30 <HAL_I2C_Mem_Read+0x24c>)
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 fc1a 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d008      	beq.n	8004d34 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e13c      	b.n	8004fa0 <HAL_I2C_Mem_Read+0x4bc>
 8004d26:	bf00      	nop
 8004d28:	00100002 	.word	0x00100002
 8004d2c:	ffff0000 	.word	0xffff0000
 8004d30:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004d34:	b672      	cpsid	i
}
 8004d36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691a      	ldr	r2, [r3, #16]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004d7a:	b662      	cpsie	i
}
 8004d7c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	b2d2      	uxtb	r2, r2
 8004d8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004db0:	e0e2      	b.n	8004f78 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db8:	2200      	movs	r2, #0
 8004dba:	497b      	ldr	r1, [pc, #492]	; (8004fa8 <HAL_I2C_Mem_Read+0x4c4>)
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 fbc7 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e0e9      	b.n	8004fa0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ddc:	b672      	cpsid	i
}
 8004dde:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691a      	ldr	r2, [r3, #16]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e12:	4b66      	ldr	r3, [pc, #408]	; (8004fac <HAL_I2C_Mem_Read+0x4c8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	08db      	lsrs	r3, r3, #3
 8004e18:	4a65      	ldr	r2, [pc, #404]	; (8004fb0 <HAL_I2C_Mem_Read+0x4cc>)
 8004e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1e:	0a1a      	lsrs	r2, r3, #8
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	00da      	lsls	r2, r3, #3
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d118      	bne.n	8004e6a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f043 0220 	orr.w	r2, r3, #32
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004e5a:	b662      	cpsie	i
}
 8004e5c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e09a      	b.n	8004fa0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d1d9      	bne.n	8004e2c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004eba:	b662      	cpsie	i
}
 8004ebc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ef0:	e042      	b.n	8004f78 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 fc82 	bl	8005800 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e04c      	b.n	8004fa0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	f003 0304 	and.w	r3, r3, #4
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d118      	bne.n	8004f78 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f47f ae94 	bne.w	8004caa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	e000      	b.n	8004fa0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004f9e:	2302      	movs	r3, #2
  }
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3728      	adds	r7, #40	; 0x28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	00010004 	.word	0x00010004
 8004fac:	20000004 	.word	0x20000004
 8004fb0:	14f8b589 	.word	0x14f8b589

08004fb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af02      	add	r7, sp, #8
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	607a      	str	r2, [r7, #4]
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d006      	beq.n	8004fde <I2C_MasterRequestWrite+0x2a>
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d003      	beq.n	8004fde <I2C_MasterRequestWrite+0x2a>
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fdc:	d108      	bne.n	8004ff0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	e00b      	b.n	8005008 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff4:	2b12      	cmp	r3, #18
 8004ff6:	d107      	bne.n	8005008 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005006:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 fa9b 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00d      	beq.n	800503c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800502e:	d103      	bne.n	8005038 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005036:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e035      	b.n	80050a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005044:	d108      	bne.n	8005058 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005046:	897b      	ldrh	r3, [r7, #10]
 8005048:	b2db      	uxtb	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005054:	611a      	str	r2, [r3, #16]
 8005056:	e01b      	b.n	8005090 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005058:	897b      	ldrh	r3, [r7, #10]
 800505a:	11db      	asrs	r3, r3, #7
 800505c:	b2db      	uxtb	r3, r3
 800505e:	f003 0306 	and.w	r3, r3, #6
 8005062:	b2db      	uxtb	r3, r3
 8005064:	f063 030f 	orn	r3, r3, #15
 8005068:	b2da      	uxtb	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	490e      	ldr	r1, [pc, #56]	; (80050b0 <I2C_MasterRequestWrite+0xfc>)
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 fac1 	bl	80055fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e010      	b.n	80050a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005086:	897b      	ldrh	r3, [r7, #10]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	4907      	ldr	r1, [pc, #28]	; (80050b4 <I2C_MasterRequestWrite+0x100>)
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 fab1 	bl	80055fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	00010008 	.word	0x00010008
 80050b4:	00010002 	.word	0x00010002

080050b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af02      	add	r7, sp, #8
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	607a      	str	r2, [r7, #4]
 80050c2:	603b      	str	r3, [r7, #0]
 80050c4:	460b      	mov	r3, r1
 80050c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d006      	beq.n	80050f2 <I2C_MasterRequestRead+0x3a>
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d003      	beq.n	80050f2 <I2C_MasterRequestRead+0x3a>
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050f0:	d108      	bne.n	8005104 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	e00b      	b.n	800511c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005108:	2b11      	cmp	r3, #17
 800510a:	d107      	bne.n	800511c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800511a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 fa11 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00d      	beq.n	8005150 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005142:	d103      	bne.n	800514c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800514a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e079      	b.n	8005244 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005158:	d108      	bne.n	800516c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800515a:	897b      	ldrh	r3, [r7, #10]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	f043 0301 	orr.w	r3, r3, #1
 8005162:	b2da      	uxtb	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	611a      	str	r2, [r3, #16]
 800516a:	e05f      	b.n	800522c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800516c:	897b      	ldrh	r3, [r7, #10]
 800516e:	11db      	asrs	r3, r3, #7
 8005170:	b2db      	uxtb	r3, r3
 8005172:	f003 0306 	and.w	r3, r3, #6
 8005176:	b2db      	uxtb	r3, r3
 8005178:	f063 030f 	orn	r3, r3, #15
 800517c:	b2da      	uxtb	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	4930      	ldr	r1, [pc, #192]	; (800524c <I2C_MasterRequestRead+0x194>)
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 fa37 	bl	80055fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e054      	b.n	8005244 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800519a:	897b      	ldrh	r3, [r7, #10]
 800519c:	b2da      	uxtb	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	4929      	ldr	r1, [pc, #164]	; (8005250 <I2C_MasterRequestRead+0x198>)
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 fa27 	bl	80055fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e044      	b.n	8005244 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 f9af 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00d      	beq.n	8005214 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005206:	d103      	bne.n	8005210 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800520e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e017      	b.n	8005244 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005214:	897b      	ldrh	r3, [r7, #10]
 8005216:	11db      	asrs	r3, r3, #7
 8005218:	b2db      	uxtb	r3, r3
 800521a:	f003 0306 	and.w	r3, r3, #6
 800521e:	b2db      	uxtb	r3, r3
 8005220:	f063 030e 	orn	r3, r3, #14
 8005224:	b2da      	uxtb	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	4907      	ldr	r1, [pc, #28]	; (8005250 <I2C_MasterRequestRead+0x198>)
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 f9e3 	bl	80055fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	00010008 	.word	0x00010008
 8005250:	00010002 	.word	0x00010002

08005254 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af02      	add	r7, sp, #8
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	4608      	mov	r0, r1
 800525e:	4611      	mov	r1, r2
 8005260:	461a      	mov	r2, r3
 8005262:	4603      	mov	r3, r0
 8005264:	817b      	strh	r3, [r7, #10]
 8005266:	460b      	mov	r3, r1
 8005268:	813b      	strh	r3, [r7, #8]
 800526a:	4613      	mov	r3, r2
 800526c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800527c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	2200      	movs	r2, #0
 8005286:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 f960 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00d      	beq.n	80052b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a4:	d103      	bne.n	80052ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e05f      	b.n	8005372 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052b2:	897b      	ldrh	r3, [r7, #10]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	461a      	mov	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	6a3a      	ldr	r2, [r7, #32]
 80052c6:	492d      	ldr	r1, [pc, #180]	; (800537c <I2C_RequestMemoryWrite+0x128>)
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 f998 	bl	80055fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e04c      	b.n	8005372 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d8:	2300      	movs	r3, #0
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f0:	6a39      	ldr	r1, [r7, #32]
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 fa02 	bl	80056fc <I2C_WaitOnTXEFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00d      	beq.n	800531a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	2b04      	cmp	r3, #4
 8005304:	d107      	bne.n	8005316 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005314:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e02b      	b.n	8005372 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800531a:	88fb      	ldrh	r3, [r7, #6]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d105      	bne.n	800532c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005320:	893b      	ldrh	r3, [r7, #8]
 8005322:	b2da      	uxtb	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	611a      	str	r2, [r3, #16]
 800532a:	e021      	b.n	8005370 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800532c:	893b      	ldrh	r3, [r7, #8]
 800532e:	0a1b      	lsrs	r3, r3, #8
 8005330:	b29b      	uxth	r3, r3
 8005332:	b2da      	uxtb	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800533a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800533c:	6a39      	ldr	r1, [r7, #32]
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 f9dc 	bl	80056fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00d      	beq.n	8005366 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	2b04      	cmp	r3, #4
 8005350:	d107      	bne.n	8005362 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005360:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e005      	b.n	8005372 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005366:	893b      	ldrh	r3, [r7, #8]
 8005368:	b2da      	uxtb	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	00010002 	.word	0x00010002

08005380 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b088      	sub	sp, #32
 8005384:	af02      	add	r7, sp, #8
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	4608      	mov	r0, r1
 800538a:	4611      	mov	r1, r2
 800538c:	461a      	mov	r2, r3
 800538e:	4603      	mov	r3, r0
 8005390:	817b      	strh	r3, [r7, #10]
 8005392:	460b      	mov	r3, r1
 8005394:	813b      	strh	r3, [r7, #8]
 8005396:	4613      	mov	r3, r2
 8005398:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 f8c2 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00d      	beq.n	80053ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053e0:	d103      	bne.n	80053ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e0aa      	b.n	8005544 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053ee:	897b      	ldrh	r3, [r7, #10]
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	461a      	mov	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	6a3a      	ldr	r2, [r7, #32]
 8005402:	4952      	ldr	r1, [pc, #328]	; (800554c <I2C_RequestMemoryRead+0x1cc>)
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 f8fa 	bl	80055fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e097      	b.n	8005544 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005414:	2300      	movs	r3, #0
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800542a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800542c:	6a39      	ldr	r1, [r7, #32]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 f964 	bl	80056fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00d      	beq.n	8005456 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	2b04      	cmp	r3, #4
 8005440:	d107      	bne.n	8005452 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005450:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e076      	b.n	8005544 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005456:	88fb      	ldrh	r3, [r7, #6]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d105      	bne.n	8005468 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800545c:	893b      	ldrh	r3, [r7, #8]
 800545e:	b2da      	uxtb	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	611a      	str	r2, [r3, #16]
 8005466:	e021      	b.n	80054ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005468:	893b      	ldrh	r3, [r7, #8]
 800546a:	0a1b      	lsrs	r3, r3, #8
 800546c:	b29b      	uxth	r3, r3
 800546e:	b2da      	uxtb	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005478:	6a39      	ldr	r1, [r7, #32]
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 f93e 	bl	80056fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00d      	beq.n	80054a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	2b04      	cmp	r3, #4
 800548c:	d107      	bne.n	800549e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e050      	b.n	8005544 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054a2:	893b      	ldrh	r3, [r7, #8]
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ae:	6a39      	ldr	r1, [r7, #32]
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f923 	bl	80056fc <I2C_WaitOnTXEFlagUntilTimeout>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00d      	beq.n	80054d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d107      	bne.n	80054d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e035      	b.n	8005544 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 f82b 	bl	8005550 <I2C_WaitOnFlagUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00d      	beq.n	800551c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800550e:	d103      	bne.n	8005518 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005516:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e013      	b.n	8005544 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800551c:	897b      	ldrh	r3, [r7, #10]
 800551e:	b2db      	uxtb	r3, r3
 8005520:	f043 0301 	orr.w	r3, r3, #1
 8005524:	b2da      	uxtb	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	6a3a      	ldr	r2, [r7, #32]
 8005530:	4906      	ldr	r1, [pc, #24]	; (800554c <I2C_RequestMemoryRead+0x1cc>)
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 f863 	bl	80055fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	00010002 	.word	0x00010002

08005550 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	4613      	mov	r3, r2
 800555e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005560:	e025      	b.n	80055ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005568:	d021      	beq.n	80055ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556a:	f7fe fa2d 	bl	80039c8 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d302      	bcc.n	8005580 <I2C_WaitOnFlagUntilTimeout+0x30>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d116      	bne.n	80055ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	f043 0220 	orr.w	r2, r3, #32
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e023      	b.n	80055f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	0c1b      	lsrs	r3, r3, #16
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d10d      	bne.n	80055d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	43da      	mvns	r2, r3
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	4013      	ands	r3, r2
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	bf0c      	ite	eq
 80055ca:	2301      	moveq	r3, #1
 80055cc:	2300      	movne	r3, #0
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	461a      	mov	r2, r3
 80055d2:	e00c      	b.n	80055ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	43da      	mvns	r2, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4013      	ands	r3, r2
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	bf0c      	ite	eq
 80055e6:	2301      	moveq	r3, #1
 80055e8:	2300      	movne	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d0b6      	beq.n	8005562 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	607a      	str	r2, [r7, #4]
 800560a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800560c:	e051      	b.n	80056b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800561c:	d123      	bne.n	8005666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800562c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005636:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	f043 0204 	orr.w	r2, r3, #4
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e046      	b.n	80056f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566c:	d021      	beq.n	80056b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800566e:	f7fe f9ab 	bl	80039c8 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	429a      	cmp	r2, r3
 800567c:	d302      	bcc.n	8005684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d116      	bne.n	80056b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	f043 0220 	orr.w	r2, r3, #32
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e020      	b.n	80056f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	0c1b      	lsrs	r3, r3, #16
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d10c      	bne.n	80056d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	43da      	mvns	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4013      	ands	r3, r2
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	bf14      	ite	ne
 80056ce:	2301      	movne	r3, #1
 80056d0:	2300      	moveq	r3, #0
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	e00b      	b.n	80056ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	43da      	mvns	r2, r3
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	4013      	ands	r3, r2
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	bf14      	ite	ne
 80056e8:	2301      	movne	r3, #1
 80056ea:	2300      	moveq	r3, #0
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d18d      	bne.n	800560e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005708:	e02d      	b.n	8005766 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f8ce 	bl	80058ac <I2C_IsAcknowledgeFailed>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e02d      	b.n	8005776 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005720:	d021      	beq.n	8005766 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005722:	f7fe f951 	bl	80039c8 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	429a      	cmp	r2, r3
 8005730:	d302      	bcc.n	8005738 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d116      	bne.n	8005766 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f043 0220 	orr.w	r2, r3, #32
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e007      	b.n	8005776 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005770:	2b80      	cmp	r3, #128	; 0x80
 8005772:	d1ca      	bne.n	800570a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800578a:	e02d      	b.n	80057e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 f88d 	bl	80058ac <I2C_IsAcknowledgeFailed>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e02d      	b.n	80057f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a2:	d021      	beq.n	80057e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057a4:	f7fe f910 	bl	80039c8 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d302      	bcc.n	80057ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d116      	bne.n	80057e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	f043 0220 	orr.w	r2, r3, #32
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e007      	b.n	80057f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	f003 0304 	and.w	r3, r3, #4
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d1ca      	bne.n	800578c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800580c:	e042      	b.n	8005894 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	f003 0310 	and.w	r3, r3, #16
 8005818:	2b10      	cmp	r3, #16
 800581a:	d119      	bne.n	8005850 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f06f 0210 	mvn.w	r2, #16
 8005824:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e029      	b.n	80058a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005850:	f7fe f8ba 	bl	80039c8 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	429a      	cmp	r2, r3
 800585e:	d302      	bcc.n	8005866 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d116      	bne.n	8005894 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005880:	f043 0220 	orr.w	r2, r3, #32
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e007      	b.n	80058a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589e:	2b40      	cmp	r3, #64	; 0x40
 80058a0:	d1b5      	bne.n	800580e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058c2:	d11b      	bne.n	80058fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	f043 0204 	orr.w	r2, r3, #4
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e000      	b.n	80058fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr

08005908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e26c      	b.n	8005df4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 8087 	beq.w	8005a36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005928:	4b92      	ldr	r3, [pc, #584]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f003 030c 	and.w	r3, r3, #12
 8005930:	2b04      	cmp	r3, #4
 8005932:	d00c      	beq.n	800594e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005934:	4b8f      	ldr	r3, [pc, #572]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f003 030c 	and.w	r3, r3, #12
 800593c:	2b08      	cmp	r3, #8
 800593e:	d112      	bne.n	8005966 <HAL_RCC_OscConfig+0x5e>
 8005940:	4b8c      	ldr	r3, [pc, #560]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800594c:	d10b      	bne.n	8005966 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800594e:	4b89      	ldr	r3, [pc, #548]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d06c      	beq.n	8005a34 <HAL_RCC_OscConfig+0x12c>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d168      	bne.n	8005a34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e246      	b.n	8005df4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596e:	d106      	bne.n	800597e <HAL_RCC_OscConfig+0x76>
 8005970:	4b80      	ldr	r3, [pc, #512]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a7f      	ldr	r2, [pc, #508]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	e02e      	b.n	80059dc <HAL_RCC_OscConfig+0xd4>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10c      	bne.n	80059a0 <HAL_RCC_OscConfig+0x98>
 8005986:	4b7b      	ldr	r3, [pc, #492]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a7a      	ldr	r2, [pc, #488]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 800598c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	4b78      	ldr	r3, [pc, #480]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a77      	ldr	r2, [pc, #476]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	e01d      	b.n	80059dc <HAL_RCC_OscConfig+0xd4>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059a8:	d10c      	bne.n	80059c4 <HAL_RCC_OscConfig+0xbc>
 80059aa:	4b72      	ldr	r3, [pc, #456]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a71      	ldr	r2, [pc, #452]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 80059b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	4b6f      	ldr	r3, [pc, #444]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a6e      	ldr	r2, [pc, #440]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 80059bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	e00b      	b.n	80059dc <HAL_RCC_OscConfig+0xd4>
 80059c4:	4b6b      	ldr	r3, [pc, #428]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a6a      	ldr	r2, [pc, #424]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 80059ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	4b68      	ldr	r3, [pc, #416]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a67      	ldr	r2, [pc, #412]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 80059d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d013      	beq.n	8005a0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e4:	f7fd fff0 	bl	80039c8 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059ec:	f7fd ffec 	bl	80039c8 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b64      	cmp	r3, #100	; 0x64
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e1fa      	b.n	8005df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059fe:	4b5d      	ldr	r3, [pc, #372]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f0      	beq.n	80059ec <HAL_RCC_OscConfig+0xe4>
 8005a0a:	e014      	b.n	8005a36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0c:	f7fd ffdc 	bl	80039c8 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a14:	f7fd ffd8 	bl	80039c8 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b64      	cmp	r3, #100	; 0x64
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e1e6      	b.n	8005df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a26:	4b53      	ldr	r3, [pc, #332]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f0      	bne.n	8005a14 <HAL_RCC_OscConfig+0x10c>
 8005a32:	e000      	b.n	8005a36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d063      	beq.n	8005b0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a42:	4b4c      	ldr	r3, [pc, #304]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f003 030c 	and.w	r3, r3, #12
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00b      	beq.n	8005a66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005a4e:	4b49      	ldr	r3, [pc, #292]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f003 030c 	and.w	r3, r3, #12
 8005a56:	2b08      	cmp	r3, #8
 8005a58:	d11c      	bne.n	8005a94 <HAL_RCC_OscConfig+0x18c>
 8005a5a:	4b46      	ldr	r3, [pc, #280]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d116      	bne.n	8005a94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a66:	4b43      	ldr	r3, [pc, #268]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d005      	beq.n	8005a7e <HAL_RCC_OscConfig+0x176>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d001      	beq.n	8005a7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e1ba      	b.n	8005df4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a7e:	4b3d      	ldr	r3, [pc, #244]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	4939      	ldr	r1, [pc, #228]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a92:	e03a      	b.n	8005b0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d020      	beq.n	8005ade <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a9c:	4b36      	ldr	r3, [pc, #216]	; (8005b78 <HAL_RCC_OscConfig+0x270>)
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa2:	f7fd ff91 	bl	80039c8 <HAL_GetTick>
 8005aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa8:	e008      	b.n	8005abc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aaa:	f7fd ff8d 	bl	80039c8 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d901      	bls.n	8005abc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e19b      	b.n	8005df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005abc:	4b2d      	ldr	r3, [pc, #180]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0f0      	beq.n	8005aaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ac8:	4b2a      	ldr	r3, [pc, #168]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	4927      	ldr	r1, [pc, #156]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	600b      	str	r3, [r1, #0]
 8005adc:	e015      	b.n	8005b0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ade:	4b26      	ldr	r3, [pc, #152]	; (8005b78 <HAL_RCC_OscConfig+0x270>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae4:	f7fd ff70 	bl	80039c8 <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aec:	f7fd ff6c 	bl	80039c8 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e17a      	b.n	8005df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005afe:	4b1d      	ldr	r3, [pc, #116]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1f0      	bne.n	8005aec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d03a      	beq.n	8005b8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d019      	beq.n	8005b52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b1e:	4b17      	ldr	r3, [pc, #92]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005b20:	2201      	movs	r2, #1
 8005b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b24:	f7fd ff50 	bl	80039c8 <HAL_GetTick>
 8005b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b2a:	e008      	b.n	8005b3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b2c:	f7fd ff4c 	bl	80039c8 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e15a      	b.n	8005df4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b3e:	4b0d      	ldr	r3, [pc, #52]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d0f0      	beq.n	8005b2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005b4a:	2001      	movs	r0, #1
 8005b4c:	f000 fad8 	bl	8006100 <RCC_Delay>
 8005b50:	e01c      	b.n	8005b8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b52:	4b0a      	ldr	r3, [pc, #40]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b58:	f7fd ff36 	bl	80039c8 <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b5e:	e00f      	b.n	8005b80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b60:	f7fd ff32 	bl	80039c8 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d908      	bls.n	8005b80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e140      	b.n	8005df4 <HAL_RCC_OscConfig+0x4ec>
 8005b72:	bf00      	nop
 8005b74:	40021000 	.word	0x40021000
 8005b78:	42420000 	.word	0x42420000
 8005b7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b80:	4b9e      	ldr	r3, [pc, #632]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e9      	bne.n	8005b60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 80a6 	beq.w	8005ce6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b9e:	4b97      	ldr	r3, [pc, #604]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10d      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005baa:	4b94      	ldr	r3, [pc, #592]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	4a93      	ldr	r2, [pc, #588]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bb4:	61d3      	str	r3, [r2, #28]
 8005bb6:	4b91      	ldr	r3, [pc, #580]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bbe:	60bb      	str	r3, [r7, #8]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc6:	4b8e      	ldr	r3, [pc, #568]	; (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d118      	bne.n	8005c04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bd2:	4b8b      	ldr	r3, [pc, #556]	; (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a8a      	ldr	r2, [pc, #552]	; (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bde:	f7fd fef3 	bl	80039c8 <HAL_GetTick>
 8005be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be4:	e008      	b.n	8005bf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be6:	f7fd feef 	bl	80039c8 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b64      	cmp	r3, #100	; 0x64
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e0fd      	b.n	8005df4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf8:	4b81      	ldr	r3, [pc, #516]	; (8005e00 <HAL_RCC_OscConfig+0x4f8>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0f0      	beq.n	8005be6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d106      	bne.n	8005c1a <HAL_RCC_OscConfig+0x312>
 8005c0c:	4b7b      	ldr	r3, [pc, #492]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	4a7a      	ldr	r2, [pc, #488]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005c12:	f043 0301 	orr.w	r3, r3, #1
 8005c16:	6213      	str	r3, [r2, #32]
 8005c18:	e02d      	b.n	8005c76 <HAL_RCC_OscConfig+0x36e>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10c      	bne.n	8005c3c <HAL_RCC_OscConfig+0x334>
 8005c22:	4b76      	ldr	r3, [pc, #472]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	4a75      	ldr	r2, [pc, #468]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005c28:	f023 0301 	bic.w	r3, r3, #1
 8005c2c:	6213      	str	r3, [r2, #32]
 8005c2e:	4b73      	ldr	r3, [pc, #460]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	4a72      	ldr	r2, [pc, #456]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005c34:	f023 0304 	bic.w	r3, r3, #4
 8005c38:	6213      	str	r3, [r2, #32]
 8005c3a:	e01c      	b.n	8005c76 <HAL_RCC_OscConfig+0x36e>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	2b05      	cmp	r3, #5
 8005c42:	d10c      	bne.n	8005c5e <HAL_RCC_OscConfig+0x356>
 8005c44:	4b6d      	ldr	r3, [pc, #436]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	4a6c      	ldr	r2, [pc, #432]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005c4a:	f043 0304 	orr.w	r3, r3, #4
 8005c4e:	6213      	str	r3, [r2, #32]
 8005c50:	4b6a      	ldr	r3, [pc, #424]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	4a69      	ldr	r2, [pc, #420]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005c56:	f043 0301 	orr.w	r3, r3, #1
 8005c5a:	6213      	str	r3, [r2, #32]
 8005c5c:	e00b      	b.n	8005c76 <HAL_RCC_OscConfig+0x36e>
 8005c5e:	4b67      	ldr	r3, [pc, #412]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	4a66      	ldr	r2, [pc, #408]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005c64:	f023 0301 	bic.w	r3, r3, #1
 8005c68:	6213      	str	r3, [r2, #32]
 8005c6a:	4b64      	ldr	r3, [pc, #400]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	4a63      	ldr	r2, [pc, #396]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005c70:	f023 0304 	bic.w	r3, r3, #4
 8005c74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d015      	beq.n	8005caa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c7e:	f7fd fea3 	bl	80039c8 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c84:	e00a      	b.n	8005c9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c86:	f7fd fe9f 	bl	80039c8 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e0ab      	b.n	8005df4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c9c:	4b57      	ldr	r3, [pc, #348]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0ee      	beq.n	8005c86 <HAL_RCC_OscConfig+0x37e>
 8005ca8:	e014      	b.n	8005cd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005caa:	f7fd fe8d 	bl	80039c8 <HAL_GetTick>
 8005cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cb0:	e00a      	b.n	8005cc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb2:	f7fd fe89 	bl	80039c8 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e095      	b.n	8005df4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cc8:	4b4c      	ldr	r3, [pc, #304]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1ee      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005cd4:	7dfb      	ldrb	r3, [r7, #23]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d105      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cda:	4b48      	ldr	r3, [pc, #288]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	4a47      	ldr	r2, [pc, #284]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ce4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 8081 	beq.w	8005df2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cf0:	4b42      	ldr	r3, [pc, #264]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f003 030c 	and.w	r3, r3, #12
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d061      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d146      	bne.n	8005d92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d04:	4b3f      	ldr	r3, [pc, #252]	; (8005e04 <HAL_RCC_OscConfig+0x4fc>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d0a:	f7fd fe5d 	bl	80039c8 <HAL_GetTick>
 8005d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d10:	e008      	b.n	8005d24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d12:	f7fd fe59 	bl	80039c8 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d901      	bls.n	8005d24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e067      	b.n	8005df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d24:	4b35      	ldr	r3, [pc, #212]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1f0      	bne.n	8005d12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d38:	d108      	bne.n	8005d4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005d3a:	4b30      	ldr	r3, [pc, #192]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	492d      	ldr	r1, [pc, #180]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d4c:	4b2b      	ldr	r3, [pc, #172]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a19      	ldr	r1, [r3, #32]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	430b      	orrs	r3, r1
 8005d5e:	4927      	ldr	r1, [pc, #156]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d64:	4b27      	ldr	r3, [pc, #156]	; (8005e04 <HAL_RCC_OscConfig+0x4fc>)
 8005d66:	2201      	movs	r2, #1
 8005d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d6a:	f7fd fe2d 	bl	80039c8 <HAL_GetTick>
 8005d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d70:	e008      	b.n	8005d84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d72:	f7fd fe29 	bl	80039c8 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e037      	b.n	8005df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d84:	4b1d      	ldr	r3, [pc, #116]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0f0      	beq.n	8005d72 <HAL_RCC_OscConfig+0x46a>
 8005d90:	e02f      	b.n	8005df2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d92:	4b1c      	ldr	r3, [pc, #112]	; (8005e04 <HAL_RCC_OscConfig+0x4fc>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d98:	f7fd fe16 	bl	80039c8 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da0:	f7fd fe12 	bl	80039c8 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e020      	b.n	8005df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005db2:	4b12      	ldr	r3, [pc, #72]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f0      	bne.n	8005da0 <HAL_RCC_OscConfig+0x498>
 8005dbe:	e018      	b.n	8005df2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e013      	b.n	8005df4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005dcc:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <HAL_RCC_OscConfig+0x4f4>)
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d106      	bne.n	8005dee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d001      	beq.n	8005df2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e000      	b.n	8005df4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	40021000 	.word	0x40021000
 8005e00:	40007000 	.word	0x40007000
 8005e04:	42420060 	.word	0x42420060

08005e08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e0d0      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e1c:	4b6a      	ldr	r3, [pc, #424]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d910      	bls.n	8005e4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e2a:	4b67      	ldr	r3, [pc, #412]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f023 0207 	bic.w	r2, r3, #7
 8005e32:	4965      	ldr	r1, [pc, #404]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e3a:	4b63      	ldr	r3, [pc, #396]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d001      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e0b8      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d020      	beq.n	8005e9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e64:	4b59      	ldr	r3, [pc, #356]	; (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	4a58      	ldr	r2, [pc, #352]	; (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005e6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d005      	beq.n	8005e88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e7c:	4b53      	ldr	r3, [pc, #332]	; (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	4a52      	ldr	r2, [pc, #328]	; (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005e82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005e86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e88:	4b50      	ldr	r3, [pc, #320]	; (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	494d      	ldr	r1, [pc, #308]	; (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d040      	beq.n	8005f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d107      	bne.n	8005ebe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eae:	4b47      	ldr	r3, [pc, #284]	; (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d115      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e07f      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d107      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ec6:	4b41      	ldr	r3, [pc, #260]	; (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d109      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e073      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed6:	4b3d      	ldr	r3, [pc, #244]	; (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e06b      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ee6:	4b39      	ldr	r3, [pc, #228]	; (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f023 0203 	bic.w	r2, r3, #3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	4936      	ldr	r1, [pc, #216]	; (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ef8:	f7fd fd66 	bl	80039c8 <HAL_GetTick>
 8005efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efe:	e00a      	b.n	8005f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f00:	f7fd fd62 	bl	80039c8 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e053      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f16:	4b2d      	ldr	r3, [pc, #180]	; (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f003 020c 	and.w	r2, r3, #12
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d1eb      	bne.n	8005f00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f28:	4b27      	ldr	r3, [pc, #156]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d210      	bcs.n	8005f58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f36:	4b24      	ldr	r3, [pc, #144]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f023 0207 	bic.w	r2, r3, #7
 8005f3e:	4922      	ldr	r1, [pc, #136]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f46:	4b20      	ldr	r3, [pc, #128]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0307 	and.w	r3, r3, #7
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d001      	beq.n	8005f58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e032      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d008      	beq.n	8005f76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f64:	4b19      	ldr	r3, [pc, #100]	; (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	4916      	ldr	r1, [pc, #88]	; (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d009      	beq.n	8005f96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f82:	4b12      	ldr	r3, [pc, #72]	; (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	490e      	ldr	r1, [pc, #56]	; (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f96:	f000 f821 	bl	8005fdc <HAL_RCC_GetSysClockFreq>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	4b0b      	ldr	r3, [pc, #44]	; (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	091b      	lsrs	r3, r3, #4
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	490a      	ldr	r1, [pc, #40]	; (8005fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8005fa8:	5ccb      	ldrb	r3, [r1, r3]
 8005faa:	fa22 f303 	lsr.w	r3, r2, r3
 8005fae:	4a09      	ldr	r2, [pc, #36]	; (8005fd4 <HAL_RCC_ClockConfig+0x1cc>)
 8005fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005fb2:	4b09      	ldr	r3, [pc, #36]	; (8005fd8 <HAL_RCC_ClockConfig+0x1d0>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fd fcc4 	bl	8003944 <HAL_InitTick>

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	40022000 	.word	0x40022000
 8005fcc:	40021000 	.word	0x40021000
 8005fd0:	0800efb0 	.word	0x0800efb0
 8005fd4:	20000004 	.word	0x20000004
 8005fd8:	20000008 	.word	0x20000008

08005fdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fdc:	b490      	push	{r4, r7}
 8005fde:	b08a      	sub	sp, #40	; 0x28
 8005fe0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005fe2:	4b2a      	ldr	r3, [pc, #168]	; (800608c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005fe4:	1d3c      	adds	r4, r7, #4
 8005fe6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005fe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005fec:	f240 2301 	movw	r3, #513	; 0x201
 8005ff0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ffe:	2300      	movs	r3, #0
 8006000:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006006:	4b22      	ldr	r3, [pc, #136]	; (8006090 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f003 030c 	and.w	r3, r3, #12
 8006012:	2b04      	cmp	r3, #4
 8006014:	d002      	beq.n	800601c <HAL_RCC_GetSysClockFreq+0x40>
 8006016:	2b08      	cmp	r3, #8
 8006018:	d003      	beq.n	8006022 <HAL_RCC_GetSysClockFreq+0x46>
 800601a:	e02d      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800601c:	4b1d      	ldr	r3, [pc, #116]	; (8006094 <HAL_RCC_GetSysClockFreq+0xb8>)
 800601e:	623b      	str	r3, [r7, #32]
      break;
 8006020:	e02d      	b.n	800607e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	0c9b      	lsrs	r3, r3, #18
 8006026:	f003 030f 	and.w	r3, r3, #15
 800602a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800602e:	4413      	add	r3, r2
 8006030:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006034:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d013      	beq.n	8006068 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006040:	4b13      	ldr	r3, [pc, #76]	; (8006090 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	0c5b      	lsrs	r3, r3, #17
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800604e:	4413      	add	r3, r2
 8006050:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006054:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	4a0e      	ldr	r2, [pc, #56]	; (8006094 <HAL_RCC_GetSysClockFreq+0xb8>)
 800605a:	fb02 f203 	mul.w	r2, r2, r3
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	fbb2 f3f3 	udiv	r3, r2, r3
 8006064:	627b      	str	r3, [r7, #36]	; 0x24
 8006066:	e004      	b.n	8006072 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	4a0b      	ldr	r2, [pc, #44]	; (8006098 <HAL_RCC_GetSysClockFreq+0xbc>)
 800606c:	fb02 f303 	mul.w	r3, r2, r3
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	623b      	str	r3, [r7, #32]
      break;
 8006076:	e002      	b.n	800607e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006078:	4b06      	ldr	r3, [pc, #24]	; (8006094 <HAL_RCC_GetSysClockFreq+0xb8>)
 800607a:	623b      	str	r3, [r7, #32]
      break;
 800607c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800607e:	6a3b      	ldr	r3, [r7, #32]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3728      	adds	r7, #40	; 0x28
 8006084:	46bd      	mov	sp, r7
 8006086:	bc90      	pop	{r4, r7}
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	0800ef6c 	.word	0x0800ef6c
 8006090:	40021000 	.word	0x40021000
 8006094:	007a1200 	.word	0x007a1200
 8006098:	003d0900 	.word	0x003d0900

0800609c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060a0:	4b02      	ldr	r3, [pc, #8]	; (80060ac <HAL_RCC_GetHCLKFreq+0x10>)
 80060a2:	681b      	ldr	r3, [r3, #0]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bc80      	pop	{r7}
 80060aa:	4770      	bx	lr
 80060ac:	20000004 	.word	0x20000004

080060b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060b4:	f7ff fff2 	bl	800609c <HAL_RCC_GetHCLKFreq>
 80060b8:	4602      	mov	r2, r0
 80060ba:	4b05      	ldr	r3, [pc, #20]	; (80060d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	0a1b      	lsrs	r3, r3, #8
 80060c0:	f003 0307 	and.w	r3, r3, #7
 80060c4:	4903      	ldr	r1, [pc, #12]	; (80060d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060c6:	5ccb      	ldrb	r3, [r1, r3]
 80060c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	40021000 	.word	0x40021000
 80060d4:	0800efc0 	.word	0x0800efc0

080060d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80060dc:	f7ff ffde 	bl	800609c <HAL_RCC_GetHCLKFreq>
 80060e0:	4602      	mov	r2, r0
 80060e2:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	0adb      	lsrs	r3, r3, #11
 80060e8:	f003 0307 	and.w	r3, r3, #7
 80060ec:	4903      	ldr	r1, [pc, #12]	; (80060fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80060ee:	5ccb      	ldrb	r3, [r1, r3]
 80060f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	40021000 	.word	0x40021000
 80060fc:	0800efc0 	.word	0x0800efc0

08006100 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006108:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <RCC_Delay+0x34>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a0a      	ldr	r2, [pc, #40]	; (8006138 <RCC_Delay+0x38>)
 800610e:	fba2 2303 	umull	r2, r3, r2, r3
 8006112:	0a5b      	lsrs	r3, r3, #9
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	fb02 f303 	mul.w	r3, r2, r3
 800611a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800611c:	bf00      	nop
  }
  while (Delay --);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	1e5a      	subs	r2, r3, #1
 8006122:	60fa      	str	r2, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1f9      	bne.n	800611c <RCC_Delay+0x1c>
}
 8006128:	bf00      	nop
 800612a:	bf00      	nop
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	bc80      	pop	{r7}
 8006132:	4770      	bx	lr
 8006134:	20000004 	.word	0x20000004
 8006138:	10624dd3 	.word	0x10624dd3

0800613c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e041      	b.n	80061d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7fd fa26 	bl	80035b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3304      	adds	r3, #4
 8006178:	4619      	mov	r1, r3
 800617a:	4610      	mov	r0, r2
 800617c:	f000 fe98 	bl	8006eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
	...

080061dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d001      	beq.n	80061f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e032      	b.n	800625a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a18      	ldr	r2, [pc, #96]	; (8006264 <HAL_TIM_Base_Start+0x88>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d00e      	beq.n	8006224 <HAL_TIM_Base_Start+0x48>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800620e:	d009      	beq.n	8006224 <HAL_TIM_Base_Start+0x48>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a14      	ldr	r2, [pc, #80]	; (8006268 <HAL_TIM_Base_Start+0x8c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d004      	beq.n	8006224 <HAL_TIM_Base_Start+0x48>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a13      	ldr	r2, [pc, #76]	; (800626c <HAL_TIM_Base_Start+0x90>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d111      	bne.n	8006248 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b06      	cmp	r3, #6
 8006234:	d010      	beq.n	8006258 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f042 0201 	orr.w	r2, r2, #1
 8006244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006246:	e007      	b.n	8006258 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr
 8006264:	40012c00 	.word	0x40012c00
 8006268:	40000400 	.word	0x40000400
 800626c:	40000800 	.word	0x40000800

08006270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b01      	cmp	r3, #1
 8006282:	d001      	beq.n	8006288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e03a      	b.n	80062fe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68da      	ldr	r2, [r3, #12]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0201 	orr.w	r2, r2, #1
 800629e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a18      	ldr	r2, [pc, #96]	; (8006308 <HAL_TIM_Base_Start_IT+0x98>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d00e      	beq.n	80062c8 <HAL_TIM_Base_Start_IT+0x58>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b2:	d009      	beq.n	80062c8 <HAL_TIM_Base_Start_IT+0x58>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a14      	ldr	r2, [pc, #80]	; (800630c <HAL_TIM_Base_Start_IT+0x9c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d004      	beq.n	80062c8 <HAL_TIM_Base_Start_IT+0x58>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a13      	ldr	r2, [pc, #76]	; (8006310 <HAL_TIM_Base_Start_IT+0xa0>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d111      	bne.n	80062ec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b06      	cmp	r3, #6
 80062d8:	d010      	beq.n	80062fc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f042 0201 	orr.w	r2, r2, #1
 80062e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ea:	e007      	b.n	80062fc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0201 	orr.w	r2, r2, #1
 80062fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	bc80      	pop	{r7}
 8006306:	4770      	bx	lr
 8006308:	40012c00 	.word	0x40012c00
 800630c:	40000400 	.word	0x40000400
 8006310:	40000800 	.word	0x40000800

08006314 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e041      	b.n	80063aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d106      	bne.n	8006340 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7fd f91c 	bl	8003578 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3304      	adds	r3, #4
 8006350:	4619      	mov	r1, r3
 8006352:	4610      	mov	r0, r2
 8006354:	f000 fdac 	bl	8006eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
	...

080063b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d109      	bne.n	80063d8 <HAL_TIM_PWM_Start+0x24>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	bf14      	ite	ne
 80063d0:	2301      	movne	r3, #1
 80063d2:	2300      	moveq	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	e022      	b.n	800641e <HAL_TIM_PWM_Start+0x6a>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d109      	bne.n	80063f2 <HAL_TIM_PWM_Start+0x3e>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	bf14      	ite	ne
 80063ea:	2301      	movne	r3, #1
 80063ec:	2300      	moveq	r3, #0
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	e015      	b.n	800641e <HAL_TIM_PWM_Start+0x6a>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d109      	bne.n	800640c <HAL_TIM_PWM_Start+0x58>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b01      	cmp	r3, #1
 8006402:	bf14      	ite	ne
 8006404:	2301      	movne	r3, #1
 8006406:	2300      	moveq	r3, #0
 8006408:	b2db      	uxtb	r3, r3
 800640a:	e008      	b.n	800641e <HAL_TIM_PWM_Start+0x6a>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b01      	cmp	r3, #1
 8006416:	bf14      	ite	ne
 8006418:	2301      	movne	r3, #1
 800641a:	2300      	moveq	r3, #0
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e05e      	b.n	80064e4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d104      	bne.n	8006436 <HAL_TIM_PWM_Start+0x82>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006434:	e013      	b.n	800645e <HAL_TIM_PWM_Start+0xaa>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b04      	cmp	r3, #4
 800643a:	d104      	bne.n	8006446 <HAL_TIM_PWM_Start+0x92>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006444:	e00b      	b.n	800645e <HAL_TIM_PWM_Start+0xaa>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b08      	cmp	r3, #8
 800644a:	d104      	bne.n	8006456 <HAL_TIM_PWM_Start+0xa2>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006454:	e003      	b.n	800645e <HAL_TIM_PWM_Start+0xaa>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2202      	movs	r2, #2
 800645a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2201      	movs	r2, #1
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	4618      	mov	r0, r3
 8006468:	f001 f8af 	bl	80075ca <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a1e      	ldr	r2, [pc, #120]	; (80064ec <HAL_TIM_PWM_Start+0x138>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d107      	bne.n	8006486 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006484:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a18      	ldr	r2, [pc, #96]	; (80064ec <HAL_TIM_PWM_Start+0x138>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00e      	beq.n	80064ae <HAL_TIM_PWM_Start+0xfa>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006498:	d009      	beq.n	80064ae <HAL_TIM_PWM_Start+0xfa>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a14      	ldr	r2, [pc, #80]	; (80064f0 <HAL_TIM_PWM_Start+0x13c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d004      	beq.n	80064ae <HAL_TIM_PWM_Start+0xfa>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a12      	ldr	r2, [pc, #72]	; (80064f4 <HAL_TIM_PWM_Start+0x140>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d111      	bne.n	80064d2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f003 0307 	and.w	r3, r3, #7
 80064b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b06      	cmp	r3, #6
 80064be:	d010      	beq.n	80064e2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0201 	orr.w	r2, r2, #1
 80064ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d0:	e007      	b.n	80064e2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f042 0201 	orr.w	r2, r2, #1
 80064e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40012c00 	.word	0x40012c00
 80064f0:	40000400 	.word	0x40000400
 80064f4:	40000800 	.word	0x40000800

080064f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e041      	b.n	800658e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d106      	bne.n	8006524 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f839 	bl	8006596 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3304      	adds	r3, #4
 8006534:	4619      	mov	r1, r3
 8006536:	4610      	mov	r0, r2
 8006538:	f000 fcba 	bl	8006eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006596:	b480      	push	{r7}
 8006598:	b083      	sub	sp, #12
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr

080065a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d104      	bne.n	80065c2 <HAL_TIM_IC_Start_IT+0x1a>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	e013      	b.n	80065ea <HAL_TIM_IC_Start_IT+0x42>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	d104      	bne.n	80065d2 <HAL_TIM_IC_Start_IT+0x2a>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	e00b      	b.n	80065ea <HAL_TIM_IC_Start_IT+0x42>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b08      	cmp	r3, #8
 80065d6:	d104      	bne.n	80065e2 <HAL_TIM_IC_Start_IT+0x3a>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	e003      	b.n	80065ea <HAL_TIM_IC_Start_IT+0x42>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d104      	bne.n	80065fc <HAL_TIM_IC_Start_IT+0x54>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	e013      	b.n	8006624 <HAL_TIM_IC_Start_IT+0x7c>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d104      	bne.n	800660c <HAL_TIM_IC_Start_IT+0x64>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006608:	b2db      	uxtb	r3, r3
 800660a:	e00b      	b.n	8006624 <HAL_TIM_IC_Start_IT+0x7c>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b08      	cmp	r3, #8
 8006610:	d104      	bne.n	800661c <HAL_TIM_IC_Start_IT+0x74>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006618:	b2db      	uxtb	r3, r3
 800661a:	e003      	b.n	8006624 <HAL_TIM_IC_Start_IT+0x7c>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006622:	b2db      	uxtb	r3, r3
 8006624:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d102      	bne.n	8006632 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800662c:	7bbb      	ldrb	r3, [r7, #14]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d001      	beq.n	8006636 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e0b3      	b.n	800679e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d104      	bne.n	8006646 <HAL_TIM_IC_Start_IT+0x9e>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006644:	e013      	b.n	800666e <HAL_TIM_IC_Start_IT+0xc6>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b04      	cmp	r3, #4
 800664a:	d104      	bne.n	8006656 <HAL_TIM_IC_Start_IT+0xae>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006654:	e00b      	b.n	800666e <HAL_TIM_IC_Start_IT+0xc6>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b08      	cmp	r3, #8
 800665a:	d104      	bne.n	8006666 <HAL_TIM_IC_Start_IT+0xbe>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006664:	e003      	b.n	800666e <HAL_TIM_IC_Start_IT+0xc6>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2202      	movs	r2, #2
 800666a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d104      	bne.n	800667e <HAL_TIM_IC_Start_IT+0xd6>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800667c:	e013      	b.n	80066a6 <HAL_TIM_IC_Start_IT+0xfe>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b04      	cmp	r3, #4
 8006682:	d104      	bne.n	800668e <HAL_TIM_IC_Start_IT+0xe6>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800668c:	e00b      	b.n	80066a6 <HAL_TIM_IC_Start_IT+0xfe>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b08      	cmp	r3, #8
 8006692:	d104      	bne.n	800669e <HAL_TIM_IC_Start_IT+0xf6>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2202      	movs	r2, #2
 8006698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800669c:	e003      	b.n	80066a6 <HAL_TIM_IC_Start_IT+0xfe>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2202      	movs	r2, #2
 80066a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2b0c      	cmp	r3, #12
 80066aa:	d841      	bhi.n	8006730 <HAL_TIM_IC_Start_IT+0x188>
 80066ac:	a201      	add	r2, pc, #4	; (adr r2, 80066b4 <HAL_TIM_IC_Start_IT+0x10c>)
 80066ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b2:	bf00      	nop
 80066b4:	080066e9 	.word	0x080066e9
 80066b8:	08006731 	.word	0x08006731
 80066bc:	08006731 	.word	0x08006731
 80066c0:	08006731 	.word	0x08006731
 80066c4:	080066fb 	.word	0x080066fb
 80066c8:	08006731 	.word	0x08006731
 80066cc:	08006731 	.word	0x08006731
 80066d0:	08006731 	.word	0x08006731
 80066d4:	0800670d 	.word	0x0800670d
 80066d8:	08006731 	.word	0x08006731
 80066dc:	08006731 	.word	0x08006731
 80066e0:	08006731 	.word	0x08006731
 80066e4:	0800671f 	.word	0x0800671f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f042 0202 	orr.w	r2, r2, #2
 80066f6:	60da      	str	r2, [r3, #12]
      break;
 80066f8:	e01b      	b.n	8006732 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f042 0204 	orr.w	r2, r2, #4
 8006708:	60da      	str	r2, [r3, #12]
      break;
 800670a:	e012      	b.n	8006732 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0208 	orr.w	r2, r2, #8
 800671a:	60da      	str	r2, [r3, #12]
      break;
 800671c:	e009      	b.n	8006732 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f042 0210 	orr.w	r2, r2, #16
 800672c:	60da      	str	r2, [r3, #12]
      break;
 800672e:	e000      	b.n	8006732 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8006730:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2201      	movs	r2, #1
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	4618      	mov	r0, r3
 800673c:	f000 ff45 	bl	80075ca <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a18      	ldr	r2, [pc, #96]	; (80067a8 <HAL_TIM_IC_Start_IT+0x200>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d00e      	beq.n	8006768 <HAL_TIM_IC_Start_IT+0x1c0>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006752:	d009      	beq.n	8006768 <HAL_TIM_IC_Start_IT+0x1c0>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a14      	ldr	r2, [pc, #80]	; (80067ac <HAL_TIM_IC_Start_IT+0x204>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d004      	beq.n	8006768 <HAL_TIM_IC_Start_IT+0x1c0>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a13      	ldr	r2, [pc, #76]	; (80067b0 <HAL_TIM_IC_Start_IT+0x208>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d111      	bne.n	800678c <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 0307 	and.w	r3, r3, #7
 8006772:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b06      	cmp	r3, #6
 8006778:	d010      	beq.n	800679c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f042 0201 	orr.w	r2, r2, #1
 8006788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800678a:	e007      	b.n	800679c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0201 	orr.w	r2, r2, #1
 800679a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	40012c00 	.word	0x40012c00
 80067ac:	40000400 	.word	0x40000400
 80067b0:	40000800 	.word	0x40000800

080067b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d122      	bne.n	8006810 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d11b      	bne.n	8006810 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f06f 0202 	mvn.w	r2, #2
 80067e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7fc fb64 	bl	8002ec4 <HAL_TIM_IC_CaptureCallback>
 80067fc:	e005      	b.n	800680a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fb3a 	bl	8006e78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fb40 	bl	8006e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	f003 0304 	and.w	r3, r3, #4
 800681a:	2b04      	cmp	r3, #4
 800681c:	d122      	bne.n	8006864 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b04      	cmp	r3, #4
 800682a:	d11b      	bne.n	8006864 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f06f 0204 	mvn.w	r2, #4
 8006834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2202      	movs	r2, #2
 800683a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7fc fb3a 	bl	8002ec4 <HAL_TIM_IC_CaptureCallback>
 8006850:	e005      	b.n	800685e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fb10 	bl	8006e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fb16 	bl	8006e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	f003 0308 	and.w	r3, r3, #8
 800686e:	2b08      	cmp	r3, #8
 8006870:	d122      	bne.n	80068b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f003 0308 	and.w	r3, r3, #8
 800687c:	2b08      	cmp	r3, #8
 800687e:	d11b      	bne.n	80068b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f06f 0208 	mvn.w	r2, #8
 8006888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2204      	movs	r2, #4
 800688e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	f003 0303 	and.w	r3, r3, #3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f7fc fb10 	bl	8002ec4 <HAL_TIM_IC_CaptureCallback>
 80068a4:	e005      	b.n	80068b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fae6 	bl	8006e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 faec 	bl	8006e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f003 0310 	and.w	r3, r3, #16
 80068c2:	2b10      	cmp	r3, #16
 80068c4:	d122      	bne.n	800690c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f003 0310 	and.w	r3, r3, #16
 80068d0:	2b10      	cmp	r3, #16
 80068d2:	d11b      	bne.n	800690c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f06f 0210 	mvn.w	r2, #16
 80068dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2208      	movs	r2, #8
 80068e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7fc fae6 	bl	8002ec4 <HAL_TIM_IC_CaptureCallback>
 80068f8:	e005      	b.n	8006906 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fabc 	bl	8006e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fac2 	bl	8006e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b01      	cmp	r3, #1
 8006918:	d10e      	bne.n	8006938 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b01      	cmp	r3, #1
 8006926:	d107      	bne.n	8006938 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f06f 0201 	mvn.w	r2, #1
 8006930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7fb ff00 	bl	8002738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006942:	2b80      	cmp	r3, #128	; 0x80
 8006944:	d10e      	bne.n	8006964 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006950:	2b80      	cmp	r3, #128	; 0x80
 8006952:	d107      	bne.n	8006964 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800695c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 ff10 	bl	8007784 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696e:	2b40      	cmp	r3, #64	; 0x40
 8006970:	d10e      	bne.n	8006990 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697c:	2b40      	cmp	r3, #64	; 0x40
 800697e:	d107      	bne.n	8006990 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fa86 	bl	8006e9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	2b20      	cmp	r3, #32
 800699c:	d10e      	bne.n	80069bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f003 0320 	and.w	r3, r3, #32
 80069a8:	2b20      	cmp	r3, #32
 80069aa:	d107      	bne.n	80069bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f06f 0220 	mvn.w	r2, #32
 80069b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fedb 	bl	8007772 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069bc:	bf00      	nop
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d101      	bne.n	80069de <HAL_TIM_IC_ConfigChannel+0x1a>
 80069da:	2302      	movs	r3, #2
 80069dc:	e082      	b.n	8006ae4 <HAL_TIM_IC_ConfigChannel+0x120>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d11b      	bne.n	8006a24 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6818      	ldr	r0, [r3, #0]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	6819      	ldr	r1, [r3, #0]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f000 fc42 	bl	8007284 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	699a      	ldr	r2, [r3, #24]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 020c 	bic.w	r2, r2, #12
 8006a0e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6999      	ldr	r1, [r3, #24]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	689a      	ldr	r2, [r3, #8]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	619a      	str	r2, [r3, #24]
 8006a22:	e05a      	b.n	8006ada <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b04      	cmp	r3, #4
 8006a28:	d11c      	bne.n	8006a64 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6818      	ldr	r0, [r3, #0]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6819      	ldr	r1, [r3, #0]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f000 fcab 	bl	8007394 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	699a      	ldr	r2, [r3, #24]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006a4c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6999      	ldr	r1, [r3, #24]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	021a      	lsls	r2, r3, #8
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	619a      	str	r2, [r3, #24]
 8006a62:	e03a      	b.n	8006ada <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b08      	cmp	r3, #8
 8006a68:	d11b      	bne.n	8006aa2 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6818      	ldr	r0, [r3, #0]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	6819      	ldr	r1, [r3, #0]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	f000 fcf6 	bl	800746a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	69da      	ldr	r2, [r3, #28]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f022 020c 	bic.w	r2, r2, #12
 8006a8c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69d9      	ldr	r1, [r3, #28]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	61da      	str	r2, [r3, #28]
 8006aa0:	e01b      	b.n	8006ada <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6818      	ldr	r0, [r3, #0]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	6819      	ldr	r1, [r3, #0]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	f000 fd15 	bl	80074e0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69da      	ldr	r2, [r3, #28]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ac4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69d9      	ldr	r1, [r3, #28]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	021a      	lsls	r2, r3, #8
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d101      	bne.n	8006b06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006b02:	2302      	movs	r3, #2
 8006b04:	e0ac      	b.n	8006c60 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2b0c      	cmp	r3, #12
 8006b12:	f200 809f 	bhi.w	8006c54 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006b16:	a201      	add	r2, pc, #4	; (adr r2, 8006b1c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1c:	08006b51 	.word	0x08006b51
 8006b20:	08006c55 	.word	0x08006c55
 8006b24:	08006c55 	.word	0x08006c55
 8006b28:	08006c55 	.word	0x08006c55
 8006b2c:	08006b91 	.word	0x08006b91
 8006b30:	08006c55 	.word	0x08006c55
 8006b34:	08006c55 	.word	0x08006c55
 8006b38:	08006c55 	.word	0x08006c55
 8006b3c:	08006bd3 	.word	0x08006bd3
 8006b40:	08006c55 	.word	0x08006c55
 8006b44:	08006c55 	.word	0x08006c55
 8006b48:	08006c55 	.word	0x08006c55
 8006b4c:	08006c13 	.word	0x08006c13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68b9      	ldr	r1, [r7, #8]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fa0c 	bl	8006f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699a      	ldr	r2, [r3, #24]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 0208 	orr.w	r2, r2, #8
 8006b6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699a      	ldr	r2, [r3, #24]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0204 	bic.w	r2, r2, #4
 8006b7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6999      	ldr	r1, [r3, #24]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	691a      	ldr	r2, [r3, #16]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	619a      	str	r2, [r3, #24]
      break;
 8006b8e:	e062      	b.n	8006c56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68b9      	ldr	r1, [r7, #8]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 fa52 	bl	8007040 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	699a      	ldr	r2, [r3, #24]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6999      	ldr	r1, [r3, #24]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	021a      	lsls	r2, r3, #8
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	619a      	str	r2, [r3, #24]
      break;
 8006bd0:	e041      	b.n	8006c56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68b9      	ldr	r1, [r7, #8]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 fa9b 	bl	8007114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69da      	ldr	r2, [r3, #28]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f042 0208 	orr.w	r2, r2, #8
 8006bec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69da      	ldr	r2, [r3, #28]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0204 	bic.w	r2, r2, #4
 8006bfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	69d9      	ldr	r1, [r3, #28]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	691a      	ldr	r2, [r3, #16]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	61da      	str	r2, [r3, #28]
      break;
 8006c10:	e021      	b.n	8006c56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68b9      	ldr	r1, [r7, #8]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 fae5 	bl	80071e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69da      	ldr	r2, [r3, #28]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69da      	ldr	r2, [r3, #28]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69d9      	ldr	r1, [r3, #28]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	021a      	lsls	r2, r3, #8
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	61da      	str	r2, [r3, #28]
      break;
 8006c52:	e000      	b.n	8006c56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006c54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d101      	bne.n	8006c80 <HAL_TIM_ConfigClockSource+0x18>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	e0b3      	b.n	8006de8 <HAL_TIM_ConfigClockSource+0x180>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ca6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb8:	d03e      	beq.n	8006d38 <HAL_TIM_ConfigClockSource+0xd0>
 8006cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cbe:	f200 8087 	bhi.w	8006dd0 <HAL_TIM_ConfigClockSource+0x168>
 8006cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc6:	f000 8085 	beq.w	8006dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cce:	d87f      	bhi.n	8006dd0 <HAL_TIM_ConfigClockSource+0x168>
 8006cd0:	2b70      	cmp	r3, #112	; 0x70
 8006cd2:	d01a      	beq.n	8006d0a <HAL_TIM_ConfigClockSource+0xa2>
 8006cd4:	2b70      	cmp	r3, #112	; 0x70
 8006cd6:	d87b      	bhi.n	8006dd0 <HAL_TIM_ConfigClockSource+0x168>
 8006cd8:	2b60      	cmp	r3, #96	; 0x60
 8006cda:	d050      	beq.n	8006d7e <HAL_TIM_ConfigClockSource+0x116>
 8006cdc:	2b60      	cmp	r3, #96	; 0x60
 8006cde:	d877      	bhi.n	8006dd0 <HAL_TIM_ConfigClockSource+0x168>
 8006ce0:	2b50      	cmp	r3, #80	; 0x50
 8006ce2:	d03c      	beq.n	8006d5e <HAL_TIM_ConfigClockSource+0xf6>
 8006ce4:	2b50      	cmp	r3, #80	; 0x50
 8006ce6:	d873      	bhi.n	8006dd0 <HAL_TIM_ConfigClockSource+0x168>
 8006ce8:	2b40      	cmp	r3, #64	; 0x40
 8006cea:	d058      	beq.n	8006d9e <HAL_TIM_ConfigClockSource+0x136>
 8006cec:	2b40      	cmp	r3, #64	; 0x40
 8006cee:	d86f      	bhi.n	8006dd0 <HAL_TIM_ConfigClockSource+0x168>
 8006cf0:	2b30      	cmp	r3, #48	; 0x30
 8006cf2:	d064      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x156>
 8006cf4:	2b30      	cmp	r3, #48	; 0x30
 8006cf6:	d86b      	bhi.n	8006dd0 <HAL_TIM_ConfigClockSource+0x168>
 8006cf8:	2b20      	cmp	r3, #32
 8006cfa:	d060      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x156>
 8006cfc:	2b20      	cmp	r3, #32
 8006cfe:	d867      	bhi.n	8006dd0 <HAL_TIM_ConfigClockSource+0x168>
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d05c      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x156>
 8006d04:	2b10      	cmp	r3, #16
 8006d06:	d05a      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006d08:	e062      	b.n	8006dd0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6818      	ldr	r0, [r3, #0]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	6899      	ldr	r1, [r3, #8]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f000 fc37 	bl	800758c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	609a      	str	r2, [r3, #8]
      break;
 8006d36:	e04e      	b.n	8006dd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	6899      	ldr	r1, [r3, #8]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f000 fc20 	bl	800758c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689a      	ldr	r2, [r3, #8]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d5a:	609a      	str	r2, [r3, #8]
      break;
 8006d5c:	e03b      	b.n	8006dd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6818      	ldr	r0, [r3, #0]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	6859      	ldr	r1, [r3, #4]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f000 fae4 	bl	8007338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2150      	movs	r1, #80	; 0x50
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 fbee 	bl	8007558 <TIM_ITRx_SetConfig>
      break;
 8006d7c:	e02b      	b.n	8006dd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6818      	ldr	r0, [r3, #0]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	6859      	ldr	r1, [r3, #4]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f000 fb3e 	bl	800740c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2160      	movs	r1, #96	; 0x60
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 fbde 	bl	8007558 <TIM_ITRx_SetConfig>
      break;
 8006d9c:	e01b      	b.n	8006dd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6818      	ldr	r0, [r3, #0]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	6859      	ldr	r1, [r3, #4]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	461a      	mov	r2, r3
 8006dac:	f000 fac4 	bl	8007338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2140      	movs	r1, #64	; 0x40
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 fbce 	bl	8007558 <TIM_ITRx_SetConfig>
      break;
 8006dbc:	e00b      	b.n	8006dd6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4610      	mov	r0, r2
 8006dca:	f000 fbc5 	bl	8007558 <TIM_ITRx_SetConfig>
        break;
 8006dce:	e002      	b.n	8006dd6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006dd0:	bf00      	nop
 8006dd2:	e000      	b.n	8006dd6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006dd4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b0c      	cmp	r3, #12
 8006e02:	d831      	bhi.n	8006e68 <HAL_TIM_ReadCapturedValue+0x78>
 8006e04:	a201      	add	r2, pc, #4	; (adr r2, 8006e0c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0a:	bf00      	nop
 8006e0c:	08006e41 	.word	0x08006e41
 8006e10:	08006e69 	.word	0x08006e69
 8006e14:	08006e69 	.word	0x08006e69
 8006e18:	08006e69 	.word	0x08006e69
 8006e1c:	08006e4b 	.word	0x08006e4b
 8006e20:	08006e69 	.word	0x08006e69
 8006e24:	08006e69 	.word	0x08006e69
 8006e28:	08006e69 	.word	0x08006e69
 8006e2c:	08006e55 	.word	0x08006e55
 8006e30:	08006e69 	.word	0x08006e69
 8006e34:	08006e69 	.word	0x08006e69
 8006e38:	08006e69 	.word	0x08006e69
 8006e3c:	08006e5f 	.word	0x08006e5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e46:	60fb      	str	r3, [r7, #12]

      break;
 8006e48:	e00f      	b.n	8006e6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e50:	60fb      	str	r3, [r7, #12]

      break;
 8006e52:	e00a      	b.n	8006e6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5a:	60fb      	str	r3, [r7, #12]

      break;
 8006e5c:	e005      	b.n	8006e6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e64:	60fb      	str	r3, [r7, #12]

      break;
 8006e66:	e000      	b.n	8006e6a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006e68:	bf00      	nop
  }

  return tmpreg;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bc80      	pop	{r7}
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop

08006e78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bc80      	pop	{r7}
 8006e88:	4770      	bx	lr

08006e8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b083      	sub	sp, #12
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bc80      	pop	{r7}
 8006e9a:	4770      	bx	lr

08006e9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bc80      	pop	{r7}
 8006eac:	4770      	bx	lr
	...

08006eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a29      	ldr	r2, [pc, #164]	; (8006f68 <TIM_Base_SetConfig+0xb8>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00b      	beq.n	8006ee0 <TIM_Base_SetConfig+0x30>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ece:	d007      	beq.n	8006ee0 <TIM_Base_SetConfig+0x30>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a26      	ldr	r2, [pc, #152]	; (8006f6c <TIM_Base_SetConfig+0xbc>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d003      	beq.n	8006ee0 <TIM_Base_SetConfig+0x30>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a25      	ldr	r2, [pc, #148]	; (8006f70 <TIM_Base_SetConfig+0xc0>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d108      	bne.n	8006ef2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a1c      	ldr	r2, [pc, #112]	; (8006f68 <TIM_Base_SetConfig+0xb8>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d00b      	beq.n	8006f12 <TIM_Base_SetConfig+0x62>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f00:	d007      	beq.n	8006f12 <TIM_Base_SetConfig+0x62>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a19      	ldr	r2, [pc, #100]	; (8006f6c <TIM_Base_SetConfig+0xbc>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d003      	beq.n	8006f12 <TIM_Base_SetConfig+0x62>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a18      	ldr	r2, [pc, #96]	; (8006f70 <TIM_Base_SetConfig+0xc0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d108      	bne.n	8006f24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	689a      	ldr	r2, [r3, #8]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a07      	ldr	r2, [pc, #28]	; (8006f68 <TIM_Base_SetConfig+0xb8>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d103      	bne.n	8006f58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	691a      	ldr	r2, [r3, #16]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	615a      	str	r2, [r3, #20]
}
 8006f5e:	bf00      	nop
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bc80      	pop	{r7}
 8006f66:	4770      	bx	lr
 8006f68:	40012c00 	.word	0x40012c00
 8006f6c:	40000400 	.word	0x40000400
 8006f70:	40000800 	.word	0x40000800

08006f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	f023 0201 	bic.w	r2, r3, #1
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 0303 	bic.w	r3, r3, #3
 8006faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f023 0302 	bic.w	r3, r3, #2
 8006fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a1c      	ldr	r2, [pc, #112]	; (800703c <TIM_OC1_SetConfig+0xc8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d10c      	bne.n	8006fea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f023 0308 	bic.w	r3, r3, #8
 8006fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f023 0304 	bic.w	r3, r3, #4
 8006fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a13      	ldr	r2, [pc, #76]	; (800703c <TIM_OC1_SetConfig+0xc8>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d111      	bne.n	8007016 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	4313      	orrs	r3, r2
 800700a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	4313      	orrs	r3, r2
 8007014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	621a      	str	r2, [r3, #32]
}
 8007030:	bf00      	nop
 8007032:	371c      	adds	r7, #28
 8007034:	46bd      	mov	sp, r7
 8007036:	bc80      	pop	{r7}
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	40012c00 	.word	0x40012c00

08007040 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007040:	b480      	push	{r7}
 8007042:	b087      	sub	sp, #28
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	f023 0210 	bic.w	r2, r3, #16
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800706e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	021b      	lsls	r3, r3, #8
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	4313      	orrs	r3, r2
 8007082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f023 0320 	bic.w	r3, r3, #32
 800708a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	011b      	lsls	r3, r3, #4
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	4313      	orrs	r3, r2
 8007096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a1d      	ldr	r2, [pc, #116]	; (8007110 <TIM_OC2_SetConfig+0xd0>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d10d      	bne.n	80070bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	011b      	lsls	r3, r3, #4
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a14      	ldr	r2, [pc, #80]	; (8007110 <TIM_OC2_SetConfig+0xd0>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d113      	bne.n	80070ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	4313      	orrs	r3, r2
 80070de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	621a      	str	r2, [r3, #32]
}
 8007106:	bf00      	nop
 8007108:	371c      	adds	r7, #28
 800710a:	46bd      	mov	sp, r7
 800710c:	bc80      	pop	{r7}
 800710e:	4770      	bx	lr
 8007110:	40012c00 	.word	0x40012c00

08007114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f023 0303 	bic.w	r3, r3, #3
 800714a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800715c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	021b      	lsls	r3, r3, #8
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	4313      	orrs	r3, r2
 8007168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a1d      	ldr	r2, [pc, #116]	; (80071e4 <TIM_OC3_SetConfig+0xd0>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d10d      	bne.n	800718e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007178:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	021b      	lsls	r3, r3, #8
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	4313      	orrs	r3, r2
 8007184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800718c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a14      	ldr	r2, [pc, #80]	; (80071e4 <TIM_OC3_SetConfig+0xd0>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d113      	bne.n	80071be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800719c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	011b      	lsls	r3, r3, #4
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	011b      	lsls	r3, r3, #4
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	621a      	str	r2, [r3, #32]
}
 80071d8:	bf00      	nop
 80071da:	371c      	adds	r7, #28
 80071dc:	46bd      	mov	sp, r7
 80071de:	bc80      	pop	{r7}
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	40012c00 	.word	0x40012c00

080071e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b087      	sub	sp, #28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	69db      	ldr	r3, [r3, #28]
 800720e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800721e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	021b      	lsls	r3, r3, #8
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	4313      	orrs	r3, r2
 800722a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007232:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	031b      	lsls	r3, r3, #12
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	4313      	orrs	r3, r2
 800723e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a0f      	ldr	r2, [pc, #60]	; (8007280 <TIM_OC4_SetConfig+0x98>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d109      	bne.n	800725c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800724e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	019b      	lsls	r3, r3, #6
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	4313      	orrs	r3, r2
 800725a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	621a      	str	r2, [r3, #32]
}
 8007276:	bf00      	nop
 8007278:	371c      	adds	r7, #28
 800727a:	46bd      	mov	sp, r7
 800727c:	bc80      	pop	{r7}
 800727e:	4770      	bx	lr
 8007280:	40012c00 	.word	0x40012c00

08007284 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
 8007290:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	f023 0201 	bic.w	r2, r3, #1
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6a1b      	ldr	r3, [r3, #32]
 80072a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	4a1f      	ldr	r2, [pc, #124]	; (800732c <TIM_TI1_SetConfig+0xa8>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d00b      	beq.n	80072ca <TIM_TI1_SetConfig+0x46>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b8:	d007      	beq.n	80072ca <TIM_TI1_SetConfig+0x46>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4a1c      	ldr	r2, [pc, #112]	; (8007330 <TIM_TI1_SetConfig+0xac>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d003      	beq.n	80072ca <TIM_TI1_SetConfig+0x46>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4a1b      	ldr	r2, [pc, #108]	; (8007334 <TIM_TI1_SetConfig+0xb0>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d101      	bne.n	80072ce <TIM_TI1_SetConfig+0x4a>
 80072ca:	2301      	movs	r3, #1
 80072cc:	e000      	b.n	80072d0 <TIM_TI1_SetConfig+0x4c>
 80072ce:	2300      	movs	r3, #0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d008      	beq.n	80072e6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f023 0303 	bic.w	r3, r3, #3
 80072da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	e003      	b.n	80072ee <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f043 0301 	orr.w	r3, r3, #1
 80072ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	011b      	lsls	r3, r3, #4
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	4313      	orrs	r3, r2
 8007300:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f023 030a 	bic.w	r3, r3, #10
 8007308:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f003 030a 	and.w	r3, r3, #10
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	4313      	orrs	r3, r2
 8007314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	621a      	str	r2, [r3, #32]
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	bc80      	pop	{r7}
 800732a:	4770      	bx	lr
 800732c:	40012c00 	.word	0x40012c00
 8007330:	40000400 	.word	0x40000400
 8007334:	40000800 	.word	0x40000800

08007338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	f023 0201 	bic.w	r2, r3, #1
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	011b      	lsls	r3, r3, #4
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	4313      	orrs	r3, r2
 800736c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f023 030a 	bic.w	r3, r3, #10
 8007374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	4313      	orrs	r3, r2
 800737c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	621a      	str	r2, [r3, #32]
}
 800738a:	bf00      	nop
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	bc80      	pop	{r7}
 8007392:	4770      	bx	lr

08007394 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	f023 0210 	bic.w	r2, r3, #16
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	021b      	lsls	r3, r3, #8
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	031b      	lsls	r3, r3, #12
 80073d8:	b29b      	uxth	r3, r3
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	4313      	orrs	r3, r2
 80073de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	011b      	lsls	r3, r3, #4
 80073ec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	621a      	str	r2, [r3, #32]
}
 8007402:	bf00      	nop
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	bc80      	pop	{r7}
 800740a:	4770      	bx	lr

0800740c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800740c:	b480      	push	{r7}
 800740e:	b087      	sub	sp, #28
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	f023 0210 	bic.w	r2, r3, #16
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007436:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	031b      	lsls	r3, r3, #12
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	4313      	orrs	r3, r2
 8007440:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007448:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	011b      	lsls	r3, r3, #4
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	4313      	orrs	r3, r2
 8007452:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	621a      	str	r2, [r3, #32]
}
 8007460:	bf00      	nop
 8007462:	371c      	adds	r7, #28
 8007464:	46bd      	mov	sp, r7
 8007466:	bc80      	pop	{r7}
 8007468:	4770      	bx	lr

0800746a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800746a:	b480      	push	{r7}
 800746c:	b087      	sub	sp, #28
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	607a      	str	r2, [r7, #4]
 8007476:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6a1b      	ldr	r3, [r3, #32]
 800747c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	69db      	ldr	r3, [r3, #28]
 8007488:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	f023 0303 	bic.w	r3, r3, #3
 8007496:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4313      	orrs	r3, r2
 800749e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	011b      	lsls	r3, r3, #4
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	021b      	lsls	r3, r3, #8
 80074c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	621a      	str	r2, [r3, #32]
}
 80074d6:	bf00      	nop
 80074d8:	371c      	adds	r7, #28
 80074da:	46bd      	mov	sp, r7
 80074dc:	bc80      	pop	{r7}
 80074de:	4770      	bx	lr

080074e0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b087      	sub	sp, #28
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6a1b      	ldr	r3, [r3, #32]
 8007504:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800750c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	021b      	lsls	r3, r3, #8
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	4313      	orrs	r3, r2
 8007516:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800751e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	031b      	lsls	r3, r3, #12
 8007524:	b29b      	uxth	r3, r3
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	4313      	orrs	r3, r2
 800752a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007532:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	031b      	lsls	r3, r3, #12
 8007538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	4313      	orrs	r3, r2
 8007540:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	621a      	str	r2, [r3, #32]
}
 800754e:	bf00      	nop
 8007550:	371c      	adds	r7, #28
 8007552:	46bd      	mov	sp, r7
 8007554:	bc80      	pop	{r7}
 8007556:	4770      	bx	lr

08007558 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800756e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	4313      	orrs	r3, r2
 8007576:	f043 0307 	orr.w	r3, r3, #7
 800757a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	609a      	str	r2, [r3, #8]
}
 8007582:	bf00      	nop
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	bc80      	pop	{r7}
 800758a:	4770      	bx	lr

0800758c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800758c:	b480      	push	{r7}
 800758e:	b087      	sub	sp, #28
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
 8007598:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	021a      	lsls	r2, r3, #8
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	431a      	orrs	r2, r3
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	697a      	ldr	r2, [r7, #20]
 80075be:	609a      	str	r2, [r3, #8]
}
 80075c0:	bf00      	nop
 80075c2:	371c      	adds	r7, #28
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bc80      	pop	{r7}
 80075c8:	4770      	bx	lr

080075ca <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b087      	sub	sp, #28
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	60f8      	str	r0, [r7, #12]
 80075d2:	60b9      	str	r1, [r7, #8]
 80075d4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	f003 031f 	and.w	r3, r3, #31
 80075dc:	2201      	movs	r2, #1
 80075de:	fa02 f303 	lsl.w	r3, r2, r3
 80075e2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6a1a      	ldr	r2, [r3, #32]
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	43db      	mvns	r3, r3
 80075ec:	401a      	ands	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a1a      	ldr	r2, [r3, #32]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f003 031f 	and.w	r3, r3, #31
 80075fc:	6879      	ldr	r1, [r7, #4]
 80075fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007602:	431a      	orrs	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	621a      	str	r2, [r3, #32]
}
 8007608:	bf00      	nop
 800760a:	371c      	adds	r7, #28
 800760c:	46bd      	mov	sp, r7
 800760e:	bc80      	pop	{r7}
 8007610:	4770      	bx	lr
	...

08007614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007624:	2b01      	cmp	r3, #1
 8007626:	d101      	bne.n	800762c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007628:	2302      	movs	r3, #2
 800762a:	e046      	b.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2202      	movs	r2, #2
 8007638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007652:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	4313      	orrs	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a16      	ldr	r2, [pc, #88]	; (80076c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d00e      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007678:	d009      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a12      	ldr	r2, [pc, #72]	; (80076c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d004      	beq.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a10      	ldr	r2, [pc, #64]	; (80076cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d10c      	bne.n	80076a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	4313      	orrs	r3, r2
 800769e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	bc80      	pop	{r7}
 80076c2:	4770      	bx	lr
 80076c4:	40012c00 	.word	0x40012c00
 80076c8:	40000400 	.word	0x40000400
 80076cc:	40000800 	.word	0x40000800

080076d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d101      	bne.n	80076ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80076e8:	2302      	movs	r3, #2
 80076ea:	e03d      	b.n	8007768 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	4313      	orrs	r3, r2
 8007700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	4313      	orrs	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	4313      	orrs	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4313      	orrs	r3, r2
 800772a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	4313      	orrs	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	4313      	orrs	r3, r2
 8007746:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	4313      	orrs	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	bc80      	pop	{r7}
 8007770:	4770      	bx	lr

08007772 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007772:	b480      	push	{r7}
 8007774:	b083      	sub	sp, #12
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800777a:	bf00      	nop
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	bc80      	pop	{r7}
 8007782:	4770      	bx	lr

08007784 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	bc80      	pop	{r7}
 8007794:	4770      	bx	lr

08007796 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b082      	sub	sp, #8
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e03f      	b.n	8007828 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d106      	bne.n	80077c2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7fb ffa1 	bl	8003704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2224      	movs	r2, #36	; 0x24
 80077c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68da      	ldr	r2, [r3, #12]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f904 	bl	80079e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	691a      	ldr	r2, [r3, #16]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	695a      	ldr	r2, [r3, #20]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800780e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2220      	movs	r2, #32
 800781a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b08a      	sub	sp, #40	; 0x28
 8007834:	af02      	add	r7, sp, #8
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	4613      	mov	r3, r2
 800783e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b20      	cmp	r3, #32
 800784e:	d17c      	bne.n	800794a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d002      	beq.n	800785c <HAL_UART_Transmit+0x2c>
 8007856:	88fb      	ldrh	r3, [r7, #6]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d101      	bne.n	8007860 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e075      	b.n	800794c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007866:	2b01      	cmp	r3, #1
 8007868:	d101      	bne.n	800786e <HAL_UART_Transmit+0x3e>
 800786a:	2302      	movs	r3, #2
 800786c:	e06e      	b.n	800794c <HAL_UART_Transmit+0x11c>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2221      	movs	r2, #33	; 0x21
 8007880:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007884:	f7fc f8a0 	bl	80039c8 <HAL_GetTick>
 8007888:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	88fa      	ldrh	r2, [r7, #6]
 800788e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	88fa      	ldrh	r2, [r7, #6]
 8007894:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800789e:	d108      	bne.n	80078b2 <HAL_UART_Transmit+0x82>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d104      	bne.n	80078b2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80078a8:	2300      	movs	r3, #0
 80078aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	61bb      	str	r3, [r7, #24]
 80078b0:	e003      	b.n	80078ba <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80078c2:	e02a      	b.n	800791a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	2200      	movs	r2, #0
 80078cc:	2180      	movs	r1, #128	; 0x80
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f000 f840 	bl	8007954 <UART_WaitOnFlagUntilTimeout>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e036      	b.n	800794c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10b      	bne.n	80078fc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	881b      	ldrh	r3, [r3, #0]
 80078e8:	461a      	mov	r2, r3
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078f2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	3302      	adds	r3, #2
 80078f8:	61bb      	str	r3, [r7, #24]
 80078fa:	e007      	b.n	800790c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	781a      	ldrb	r2, [r3, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	3301      	adds	r3, #1
 800790a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007910:	b29b      	uxth	r3, r3
 8007912:	3b01      	subs	r3, #1
 8007914:	b29a      	uxth	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800791e:	b29b      	uxth	r3, r3
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1cf      	bne.n	80078c4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	2200      	movs	r2, #0
 800792c:	2140      	movs	r1, #64	; 0x40
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f000 f810 	bl	8007954 <UART_WaitOnFlagUntilTimeout>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	e006      	b.n	800794c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2220      	movs	r2, #32
 8007942:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	e000      	b.n	800794c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800794a:	2302      	movs	r3, #2
  }
}
 800794c:	4618      	mov	r0, r3
 800794e:	3720      	adds	r7, #32
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	603b      	str	r3, [r7, #0]
 8007960:	4613      	mov	r3, r2
 8007962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007964:	e02c      	b.n	80079c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796c:	d028      	beq.n	80079c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d007      	beq.n	8007984 <UART_WaitOnFlagUntilTimeout+0x30>
 8007974:	f7fc f828 	bl	80039c8 <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	429a      	cmp	r2, r3
 8007982:	d21d      	bcs.n	80079c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68da      	ldr	r2, [r3, #12]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007992:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	695a      	ldr	r2, [r3, #20]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 0201 	bic.w	r2, r2, #1
 80079a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2220      	movs	r2, #32
 80079a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2220      	movs	r2, #32
 80079b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e00f      	b.n	80079e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	4013      	ands	r3, r2
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	bf0c      	ite	eq
 80079d0:	2301      	moveq	r3, #1
 80079d2:	2300      	movne	r3, #0
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	461a      	mov	r2, r3
 80079d8:	79fb      	ldrb	r3, [r7, #7]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d0c3      	beq.n	8007966 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	689a      	ldr	r2, [r3, #8]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	431a      	orrs	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007a22:	f023 030c 	bic.w	r3, r3, #12
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	6812      	ldr	r2, [r2, #0]
 8007a2a:	68b9      	ldr	r1, [r7, #8]
 8007a2c:	430b      	orrs	r3, r1
 8007a2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	699a      	ldr	r2, [r3, #24]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a2c      	ldr	r2, [pc, #176]	; (8007afc <UART_SetConfig+0x114>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d103      	bne.n	8007a58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007a50:	f7fe fb42 	bl	80060d8 <HAL_RCC_GetPCLK2Freq>
 8007a54:	60f8      	str	r0, [r7, #12]
 8007a56:	e002      	b.n	8007a5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007a58:	f7fe fb2a 	bl	80060b0 <HAL_RCC_GetPCLK1Freq>
 8007a5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	4613      	mov	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	009a      	lsls	r2, r3, #2
 8007a68:	441a      	add	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a74:	4a22      	ldr	r2, [pc, #136]	; (8007b00 <UART_SetConfig+0x118>)
 8007a76:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7a:	095b      	lsrs	r3, r3, #5
 8007a7c:	0119      	lsls	r1, r3, #4
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	4613      	mov	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	009a      	lsls	r2, r3, #2
 8007a88:	441a      	add	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a94:	4b1a      	ldr	r3, [pc, #104]	; (8007b00 <UART_SetConfig+0x118>)
 8007a96:	fba3 0302 	umull	r0, r3, r3, r2
 8007a9a:	095b      	lsrs	r3, r3, #5
 8007a9c:	2064      	movs	r0, #100	; 0x64
 8007a9e:	fb00 f303 	mul.w	r3, r0, r3
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	011b      	lsls	r3, r3, #4
 8007aa6:	3332      	adds	r3, #50	; 0x32
 8007aa8:	4a15      	ldr	r2, [pc, #84]	; (8007b00 <UART_SetConfig+0x118>)
 8007aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8007aae:	095b      	lsrs	r3, r3, #5
 8007ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ab4:	4419      	add	r1, r3
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	009a      	lsls	r2, r3, #2
 8007ac0:	441a      	add	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007acc:	4b0c      	ldr	r3, [pc, #48]	; (8007b00 <UART_SetConfig+0x118>)
 8007ace:	fba3 0302 	umull	r0, r3, r3, r2
 8007ad2:	095b      	lsrs	r3, r3, #5
 8007ad4:	2064      	movs	r0, #100	; 0x64
 8007ad6:	fb00 f303 	mul.w	r3, r0, r3
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	3332      	adds	r3, #50	; 0x32
 8007ae0:	4a07      	ldr	r2, [pc, #28]	; (8007b00 <UART_SetConfig+0x118>)
 8007ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae6:	095b      	lsrs	r3, r3, #5
 8007ae8:	f003 020f 	and.w	r2, r3, #15
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	440a      	add	r2, r1
 8007af2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007af4:	bf00      	nop
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	40013800 	.word	0x40013800
 8007b00:	51eb851f 	.word	0x51eb851f
 8007b04:	00000000 	.word	0x00000000

08007b08 <_ZN10ControllerC1Ev>:
    float angles[3];
    float rates[3];
    float bias[3];
};

Controller::Controller() {}
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af04      	add	r7, sp, #16
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a6f      	ldr	r2, [pc, #444]	; (8007cd0 <_ZN10ControllerC1Ev+0x1c8>)
 8007b14:	651a      	str	r2, [r3, #80]	; 0x50
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a6e      	ldr	r2, [pc, #440]	; (8007cd4 <_ZN10ControllerC1Ev+0x1cc>)
 8007b1a:	655a      	str	r2, [r3, #84]	; 0x54
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007b22:	659a      	str	r2, [r3, #88]	; 0x58
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7f9 f8af 	bl	8000c8c <__aeabi_i2f>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	4619      	mov	r1, r3
 8007b32:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007b36:	f7f9 f9b1 	bl	8000e9c <__aeabi_fdiv>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	65da      	str	r2, [r3, #92]	; 0x5c
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a64      	ldr	r2, [pc, #400]	; (8007cd8 <_ZN10ControllerC1Ev+0x1d0>)
 8007b46:	661a      	str	r2, [r3, #96]	; 0x60
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a64      	ldr	r2, [pc, #400]	; (8007cdc <_ZN10ControllerC1Ev+0x1d4>)
 8007b4c:	665a      	str	r2, [r3, #100]	; 0x64
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a63      	ldr	r2, [pc, #396]	; (8007ce0 <_ZN10ControllerC1Ev+0x1d8>)
 8007b52:	669a      	str	r2, [r3, #104]	; 0x68
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f04f 0200 	mov.w	r2, #0
 8007b5a:	66da      	str	r2, [r3, #108]	; 0x6c
 8007b5c:	6879      	ldr	r1, [r7, #4]
 8007b5e:	a350      	add	r3, pc, #320	; (adr r3, 8007ca0 <_ZN10ControllerC1Ev+0x198>)
 8007b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b64:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8007b68:	6879      	ldr	r1, [r7, #4]
 8007b6a:	a34f      	add	r3, pc, #316	; (adr r3, 8007ca8 <_ZN10ControllerC1Ev+0x1a0>)
 8007b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b70:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8007b74:	6879      	ldr	r1, [r7, #4]
 8007b76:	a34e      	add	r3, pc, #312	; (adr r3, 8007cb0 <_ZN10ControllerC1Ev+0x1a8>)
 8007b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8007b86:	6879      	ldr	r1, [r7, #4]
 8007b88:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8007b92:	6879      	ldr	r1, [r7, #4]
 8007b94:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 8007ba4:	6879      	ldr	r1, [r7, #4]
 8007ba6:	f04f 0200 	mov.w	r2, #0
 8007baa:	4b4e      	ldr	r3, [pc, #312]	; (8007ce4 <_ZN10ControllerC1Ev+0x1dc>)
 8007bac:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
 8007bb0:	6879      	ldr	r1, [r7, #4]
 8007bb2:	f04f 0200 	mov.w	r2, #0
 8007bb6:	4b4c      	ldr	r3, [pc, #304]	; (8007ce8 <_ZN10ControllerC1Ev+0x1e0>)
 8007bb8:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7f8 fc17 	bl	80003f4 <__aeabi_i2d>
 8007bc6:	a33c      	add	r3, pc, #240	; (adr r3, 8007cb8 <_ZN10ControllerC1Ev+0x1b0>)
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	f7f8 fc7c 	bl	80004c8 <__aeabi_dmul>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	f7f8 ff4e 	bl	8000a78 <__aeabi_d2f>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a41      	ldr	r2, [pc, #260]	; (8007cec <_ZN10ControllerC1Ev+0x1e4>)
 8007be8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a40      	ldr	r2, [pc, #256]	; (8007cf0 <_ZN10ControllerC1Ev+0x1e8>)
 8007bf0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 8007bfa:	a331      	add	r3, pc, #196	; (adr r3, 8007cc0 <_ZN10ControllerC1Ev+0x1b8>)
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c04:	a32e      	add	r3, pc, #184	; (adr r3, 8007cc0 <_ZN10ControllerC1Ev+0x1b8>)
 8007c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0a:	e9cd 2300 	strd	r2, r3, [sp]
 8007c0e:	a32e      	add	r3, pc, #184	; (adr r3, 8007cc8 <_ZN10ControllerC1Ev+0x1c0>)
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	4608      	mov	r0, r1
 8007c16:	f005 f817 	bl	800cc48 <_ZN3lpfC1Eddd>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f103 01e8 	add.w	r1, r3, #232	; 0xe8
 8007c20:	a327      	add	r3, pc, #156	; (adr r3, 8007cc0 <_ZN10ControllerC1Ev+0x1b8>)
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c2a:	a325      	add	r3, pc, #148	; (adr r3, 8007cc0 <_ZN10ControllerC1Ev+0x1b8>)
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	e9cd 2300 	strd	r2, r3, [sp]
 8007c34:	a324      	add	r3, pc, #144	; (adr r3, 8007cc8 <_ZN10ControllerC1Ev+0x1c0>)
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	4608      	mov	r0, r1
 8007c3c:	f005 f804 	bl	800cc48 <_ZN3lpfC1Eddd>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f503 7188 	add.w	r1, r3, #272	; 0x110
 8007c46:	a31e      	add	r3, pc, #120	; (adr r3, 8007cc0 <_ZN10ControllerC1Ev+0x1b8>)
 8007c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c50:	a31b      	add	r3, pc, #108	; (adr r3, 8007cc0 <_ZN10ControllerC1Ev+0x1b8>)
 8007c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c56:	e9cd 2300 	strd	r2, r3, [sp]
 8007c5a:	a31b      	add	r3, pc, #108	; (adr r3, 8007cc8 <_ZN10ControllerC1Ev+0x1c0>)
 8007c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c60:	4608      	mov	r0, r1
 8007c62:	f004 fff1 	bl	800cc48 <_ZN3lpfC1Eddd>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f004 fb67 	bl	800c340 <_ZN3PIDC1Ev>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f004 fb61 	bl	800c340 <_ZN3PIDC1Ev>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8007c84:	4618      	mov	r0, r3
 8007c86:	f004 fb5b 	bl	800c340 <_ZN3PIDC1Ev>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8007c90:	4618      	mov	r0, r3
 8007c92:	f004 fb55 	bl	800c340 <_ZN3PIDC1Ev>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	33333333 	.word	0x33333333
 8007ca4:	3fc33333 	.word	0x3fc33333
 8007ca8:	9999999a 	.word	0x9999999a
 8007cac:	3fb99999 	.word	0x3fb99999
 8007cb0:	47ae147b 	.word	0x47ae147b
 8007cb4:	3f947ae1 	.word	0x3f947ae1
 8007cb8:	eb851eb8 	.word	0xeb851eb8
 8007cbc:	3f9eb851 	.word	0x3f9eb851
 8007cc0:	fc3b4f61 	.word	0xfc3b4f61
 8007cc4:	3fa35935 	.word	0x3fa35935
 8007cc8:	4f0d844d 	.word	0x4f0d844d
 8007ccc:	3fed94af 	.word	0x3fed94af
 8007cd0:	44c1c000 	.word	0x44c1c000
 8007cd4:	42654ca3 	.word	0x42654ca3
 8007cd8:	3fb33333 	.word	0x3fb33333
 8007cdc:	411cf5c3 	.word	0x411cf5c3
 8007ce0:	41f9d70a 	.word	0x41f9d70a
 8007ce4:	40140000 	.word	0x40140000
 8007ce8:	401a0000 	.word	0x401a0000
 8007cec:	41200000 	.word	0x41200000
 8007cf0:	41700000 	.word	0x41700000
 8007cf4:	00000000 	.word	0x00000000

08007cf8 <_ZN10Controller3RunE5stateS0_i>:

std::vector<double> Controller::Run (struct state state, struct state state_des, int thr) {
 8007cf8:	b082      	sub	sp, #8
 8007cfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfe:	b09f      	sub	sp, #124	; 0x7c
 8007d00:	af08      	add	r7, sp, #32
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8007d0a:	e881 000c 	stmia.w	r1, {r2, r3}
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);
        
        roll  = state.angles[0];
 8007d0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7f8 fb80 	bl	8000418 <__aeabi_f2d>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	68b9      	ldr	r1, [r7, #8]
 8007d1e:	e9c1 2304 	strd	r2, r3, [r1, #16]
        pitch = state.angles[1];
 8007d22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7f8 fb76 	bl	8000418 <__aeabi_f2d>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	68b9      	ldr	r1, [r7, #8]
 8007d32:	e9c1 2306 	strd	r2, r3, [r1, #24]
        yaw    = state.angles[2];
 8007d36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7f8 fb6c 	bl	8000418 <__aeabi_f2d>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	68b9      	ldr	r1, [r7, #8]
 8007d46:	e9c1 2308 	strd	r2, r3, [r1, #32]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 8007d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7f8 fb62 	bl	8000418 <__aeabi_f2d>
 8007d54:	4602      	mov	r2, r0
 8007d56:	460b      	mov	r3, r1
 8007d58:	68b9      	ldr	r1, [r7, #8]
 8007d5a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        pitch_rate = state.rates[1];
 8007d5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7f8 fb58 	bl	8000418 <__aeabi_f2d>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	68b9      	ldr	r1, [r7, #8]
 8007d6e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        yaw_rate   = state.rates[2];
 8007d72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7f8 fb4e 	bl	8000418 <__aeabi_f2d>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	68b9      	ldr	r1, [r7, #8]
 8007d82:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

        roll_bias = state.bias[0];
 8007d86:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 8007d8e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 8007d96:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	609a      	str	r2, [r3, #8]
        
        float roll_des     = state_des.angles[0];
 8007d9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007da2:	657b      	str	r3, [r7, #84]	; 0x54
        float pitch_des 	 = state_des.angles[1];
 8007da4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007da8:	653b      	str	r3, [r7, #80]	; 0x50
        float yaw_rate_des = state_des.rates[2];
 8007daa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dae:	64fb      	str	r3, [r7, #76]	; 0x4c

        roll_des 	  	= roll_des_filt.Run(roll_des);
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	33c0      	adds	r3, #192	; 0xc0
 8007db4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007db6:	4618      	mov	r0, r3
 8007db8:	f004 ff61 	bl	800cc7e <_ZN3lpf3RunEf>
 8007dbc:	6578      	str	r0, [r7, #84]	; 0x54
        pitch_des 		= pitch_des_filt.Run(pitch_des);
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	33e8      	adds	r3, #232	; 0xe8
 8007dc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f004 ff5a 	bl	800cc7e <_ZN3lpf3RunEf>
 8007dca:	6538      	str	r0, [r7, #80]	; 0x50
        yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8007dd2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f004 ff52 	bl	800cc7e <_ZN3lpf3RunEf>
 8007dda:	64f8      	str	r0, [r7, #76]	; 0x4c
    roll_rate_des  = pid_roll.P_Sqrt(roll_des,  roll,  Kp_angle);
    pitch_rate_des = pid_roll.P_Sqrt(pitch_des, pitch, Kp_angle);
*/


    roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle);
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f503 76b8 	add.w	r6, r3, #368	; 0x170
 8007de2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007de4:	f7f8 fb18 	bl	8000418 <__aeabi_f2d>
 8007de8:	4680      	mov	r8, r0
 8007dea:	4689      	mov	r9, r1
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7f8 fb0d 	bl	8000418 <__aeabi_f2d>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e06:	e9cd 4500 	strd	r4, r5, [sp]
 8007e0a:	4642      	mov	r2, r8
 8007e0c:	464b      	mov	r3, r9
 8007e0e:	4630      	mov	r0, r6
 8007e10:	f004 fad2 	bl	800c3b8 <_ZN3PID7P_AngleEddd>
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	4610      	mov	r0, r2
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	f7f8 fe2c 	bl	8000a78 <__aeabi_d2f>
 8007e20:	4602      	mov	r2, r0
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle);
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f503 7600 	add.w	r6, r3, #512	; 0x200
 8007e2e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007e30:	f7f8 faf2 	bl	8000418 <__aeabi_f2d>
 8007e34:	4680      	mov	r8, r0
 8007e36:	4689      	mov	r9, r1
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7f8 fae7 	bl	8000418 <__aeabi_f2d>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e52:	e9cd 4500 	strd	r4, r5, [sp]
 8007e56:	4642      	mov	r2, r8
 8007e58:	464b      	mov	r3, r9
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	f004 faac 	bl	800c3b8 <_ZN3PID7P_AngleEddd>
 8007e60:	4602      	mov	r2, r0
 8007e62:	460b      	mov	r3, r1
 8007e64:	4610      	mov	r0, r2
 8007e66:	4619      	mov	r1, r3
 8007e68:	f7f8 fe06 	bl	8000a78 <__aeabi_d2f>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    //printf("\npitch_rate_des: %.2f",pitch_rate_des);
    pd_pitch = pid_pitch.PD_Rate(pitch_rate_des,pitch_rate,Kp_pitch,Ki_pitch,Kd_pitch);
    //p_yaw    = pid_yaw.P_Rate_Yaw(yaw_rate_des,yaw_rate,Kp_yaw);
    p_yaw    = pid_yaw.PD_Rate(yaw_rate_des,yaw_rate,Kp_yaw,Ki_yaw,0);
*/
    pd_roll  = pid_roll.PID_Rate2(roll_rate_des,roll_rate, Kp_roll, Ki_roll, Kd_roll);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8007e7a:	607b      	str	r3, [r7, #4]
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7f8 fac8 	bl	8000418 <__aeabi_f2d>
 8007e88:	4682      	mov	sl, r0
 8007e8a:	468b      	mov	fp, r1
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007e92:	68b9      	ldr	r1, [r7, #8]
 8007e94:	e9d1 011c 	ldrd	r0, r1, [r1, #112]	; 0x70
 8007e98:	68bc      	ldr	r4, [r7, #8]
 8007e9a:	f104 0578 	add.w	r5, r4, #120	; 0x78
 8007e9e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007ea2:	68be      	ldr	r6, [r7, #8]
 8007ea4:	e9d6 8920 	ldrd	r8, r9, [r6, #128]	; 0x80
 8007ea8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007eac:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007eb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eb4:	e9cd 2300 	strd	r2, r3, [sp]
 8007eb8:	4652      	mov	r2, sl
 8007eba:	465b      	mov	r3, fp
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f004 fb25 	bl	800c50c <_ZN3PID9PID_Rate2Eddddd>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	68b9      	ldr	r1, [r7, #8]
 8007ec8:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
    pd_pitch = pid_pitch.PID_Rate2(pitch_rate_des,pitch_rate,Kp_pitch,Ki_pitch,Kd_pitch);
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007ed2:	607b      	str	r3, [r7, #4]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7f8 fa9c 	bl	8000418 <__aeabi_f2d>
 8007ee0:	4682      	mov	sl, r0
 8007ee2:	468b      	mov	fp, r1
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007eea:	68b9      	ldr	r1, [r7, #8]
 8007eec:	e9d1 0122 	ldrd	r0, r1, [r1, #136]	; 0x88
 8007ef0:	68bc      	ldr	r4, [r7, #8]
 8007ef2:	f104 0590 	add.w	r5, r4, #144	; 0x90
 8007ef6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007efa:	68be      	ldr	r6, [r7, #8]
 8007efc:	e9d6 8926 	ldrd	r8, r9, [r6, #152]	; 0x98
 8007f00:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007f04:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007f08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f0c:	e9cd 2300 	strd	r2, r3, [sp]
 8007f10:	4652      	mov	r2, sl
 8007f12:	465b      	mov	r3, fp
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f004 faf9 	bl	800c50c <_ZN3PID9PID_Rate2Eddddd>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	68b9      	ldr	r1, [r7, #8]
 8007f20:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
    p_yaw    = pid_yaw.PD_Rate(yaw_rate_des,yaw_rate,Kp_yaw,Ki_yaw,0);
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	f503 7624 	add.w	r6, r3, #656	; 0x290
 8007f2a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007f2c:	f7f8 fa74 	bl	8000418 <__aeabi_f2d>
 8007f30:	4680      	mov	r8, r0
 8007f32:	4689      	mov	r9, r1
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007f3a:	68b9      	ldr	r1, [r7, #8]
 8007f3c:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 8007f40:	68bc      	ldr	r4, [r7, #8]
 8007f42:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
 8007f46:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007f4a:	f04f 0a00 	mov.w	sl, #0
 8007f4e:	f04f 0b00 	mov.w	fp, #0
 8007f52:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8007f56:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007f5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f5e:	e9cd 2300 	strd	r2, r3, [sp]
 8007f62:	4642      	mov	r2, r8
 8007f64:	464b      	mov	r3, r9
 8007f66:	4630      	mov	r0, r6
 8007f68:	f004 fb6e 	bl	800c648 <_ZN3PID7PD_RateEddddd>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	68b9      	ldr	r1, [r7, #8]
 8007f72:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
    //printf("\npd_pitch: %.2f",pd_pitch);
    //printf("\np_yaw: %.2f",p_yaw);

    ////printf("\nst: %.3f",st);

    thr = pid_roll.Sat(thr, 1800, 1000);
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	f503 74b8 	add.w	r4, r3, #368	; 0x170
 8007f7c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8007f80:	f7f8 fa38 	bl	80003f4 <__aeabi_i2d>
 8007f84:	4602      	mov	r2, r0
 8007f86:	460b      	mov	r3, r1
 8007f88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007f8c:	9101      	str	r1, [sp, #4]
 8007f8e:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8007f92:	9100      	str	r1, [sp, #0]
 8007f94:	4620      	mov	r0, r4
 8007f96:	f004 fd1f 	bl	800c9d8 <_ZN3PID3SatEdii>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	4610      	mov	r0, r2
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	f7f8 fd41 	bl	8000a28 <__aeabi_d2iz>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    int pwm1 = thr + pd_pitch - pd_roll  - p_yaw + PITCH_TRIM - ROLL_TRIM;
 8007fac:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8007fb0:	f7f8 fa20 	bl	80003f4 <__aeabi_i2d>
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8007fba:	f7f8 f8cf 	bl	800015c <__adddf3>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	4610      	mov	r0, r2
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 8007fcc:	f7f8 f8c4 	bl	8000158 <__aeabi_dsub>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	; 0x158
 8007fde:	f7f8 f8bb 	bl	8000158 <__aeabi_dsub>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	4619      	mov	r1, r3
 8007fea:	f04f 0200 	mov.w	r2, #0
 8007fee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ff2:	f7f8 f8b1 	bl	8000158 <__aeabi_dsub>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4610      	mov	r0, r2
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	a3c8      	add	r3, pc, #800	; (adr r3, 8008320 <_ZN10Controller3RunE5stateS0_i+0x628>)
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	f7f8 f8a8 	bl	8000158 <__aeabi_dsub>
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	4610      	mov	r0, r2
 800800e:	4619      	mov	r1, r3
 8008010:	f7f8 fd0a 	bl	8000a28 <__aeabi_d2iz>
 8008014:	4603      	mov	r3, r0
 8008016:	64bb      	str	r3, [r7, #72]	; 0x48
    int pwm2 = thr - pd_pitch + pd_roll  - p_yaw - PITCH_TRIM + ROLL_TRIM;
 8008018:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800801c:	f7f8 f9ea 	bl	80003f4 <__aeabi_i2d>
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8008026:	f7f8 f897 	bl	8000158 <__aeabi_dsub>
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	4610      	mov	r0, r2
 8008030:	4619      	mov	r1, r3
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 8008038:	f7f8 f890 	bl	800015c <__adddf3>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4610      	mov	r0, r2
 8008042:	4619      	mov	r1, r3
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	; 0x158
 800804a:	f7f8 f885 	bl	8000158 <__aeabi_dsub>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	4610      	mov	r0, r2
 8008054:	4619      	mov	r1, r3
 8008056:	f04f 0200 	mov.w	r2, #0
 800805a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800805e:	f7f8 f87d 	bl	800015c <__adddf3>
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	4610      	mov	r0, r2
 8008068:	4619      	mov	r1, r3
 800806a:	a3ad      	add	r3, pc, #692	; (adr r3, 8008320 <_ZN10Controller3RunE5stateS0_i+0x628>)
 800806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008070:	f7f8 f874 	bl	800015c <__adddf3>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4610      	mov	r0, r2
 800807a:	4619      	mov	r1, r3
 800807c:	f7f8 fcd4 	bl	8000a28 <__aeabi_d2iz>
 8008080:	4603      	mov	r3, r0
 8008082:	647b      	str	r3, [r7, #68]	; 0x44
    int pwm3 = thr + pd_pitch + pd_roll  + p_yaw + PITCH_TRIM + ROLL_TRIM;
 8008084:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8008088:	f7f8 f9b4 	bl	80003f4 <__aeabi_i2d>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8008092:	f7f8 f863 	bl	800015c <__adddf3>
 8008096:	4602      	mov	r2, r0
 8008098:	460b      	mov	r3, r1
 800809a:	4610      	mov	r0, r2
 800809c:	4619      	mov	r1, r3
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 80080a4:	f7f8 f85a 	bl	800015c <__adddf3>
 80080a8:	4602      	mov	r2, r0
 80080aa:	460b      	mov	r3, r1
 80080ac:	4610      	mov	r0, r2
 80080ae:	4619      	mov	r1, r3
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	; 0x158
 80080b6:	f7f8 f851 	bl	800015c <__adddf3>
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	4610      	mov	r0, r2
 80080c0:	4619      	mov	r1, r3
 80080c2:	f04f 0200 	mov.w	r2, #0
 80080c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080ca:	f7f8 f845 	bl	8000158 <__aeabi_dsub>
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	4610      	mov	r0, r2
 80080d4:	4619      	mov	r1, r3
 80080d6:	a392      	add	r3, pc, #584	; (adr r3, 8008320 <_ZN10Controller3RunE5stateS0_i+0x628>)
 80080d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080dc:	f7f8 f83e 	bl	800015c <__adddf3>
 80080e0:	4602      	mov	r2, r0
 80080e2:	460b      	mov	r3, r1
 80080e4:	4610      	mov	r0, r2
 80080e6:	4619      	mov	r1, r3
 80080e8:	f7f8 fc9e 	bl	8000a28 <__aeabi_d2iz>
 80080ec:	4603      	mov	r3, r0
 80080ee:	643b      	str	r3, [r7, #64]	; 0x40
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw - PITCH_TRIM - ROLL_TRIM;
 80080f0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80080f4:	f7f8 f97e 	bl	80003f4 <__aeabi_i2d>
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 80080fe:	f7f8 f82b 	bl	8000158 <__aeabi_dsub>
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	4610      	mov	r0, r2
 8008108:	4619      	mov	r1, r3
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 8008110:	f7f8 f822 	bl	8000158 <__aeabi_dsub>
 8008114:	4602      	mov	r2, r0
 8008116:	460b      	mov	r3, r1
 8008118:	4610      	mov	r0, r2
 800811a:	4619      	mov	r1, r3
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	; 0x158
 8008122:	f7f8 f81b 	bl	800015c <__adddf3>
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	4610      	mov	r0, r2
 800812c:	4619      	mov	r1, r3
 800812e:	f04f 0200 	mov.w	r2, #0
 8008132:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008136:	f7f8 f811 	bl	800015c <__adddf3>
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	4610      	mov	r0, r2
 8008140:	4619      	mov	r1, r3
 8008142:	a377      	add	r3, pc, #476	; (adr r3, 8008320 <_ZN10Controller3RunE5stateS0_i+0x628>)
 8008144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008148:	f7f8 f806 	bl	8000158 <__aeabi_dsub>
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	4610      	mov	r0, r2
 8008152:	4619      	mov	r1, r3
 8008154:	f7f8 fc68 	bl	8000a28 <__aeabi_d2iz>
 8008158:	4603      	mov	r3, r0
 800815a:	63fb      	str	r3, [r7, #60]	; 0x3c


    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f503 74b8 	add.w	r4, r3, #368	; 0x170
 8008162:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008164:	f7f8 f946 	bl	80003f4 <__aeabi_i2d>
 8008168:	4602      	mov	r2, r0
 800816a:	460b      	mov	r3, r1
 800816c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8008170:	9102      	str	r1, [sp, #8]
 8008172:	f240 414c 	movw	r1, #1100	; 0x44c
 8008176:	9101      	str	r1, [sp, #4]
 8008178:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800817c:	9100      	str	r1, [sp, #0]
 800817e:	4620      	mov	r0, r4
 8008180:	f004 fbe4 	bl	800c94c <_ZN3PID3SatEdiii>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	4610      	mov	r0, r2
 800818a:	4619      	mov	r1, r3
 800818c:	f7f8 fc4c 	bl	8000a28 <__aeabi_d2iz>
 8008190:	4603      	mov	r3, r0
 8008192:	64bb      	str	r3, [r7, #72]	; 0x48
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	f503 74b8 	add.w	r4, r3, #368	; 0x170
 800819a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800819c:	f7f8 f92a 	bl	80003f4 <__aeabi_i2d>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80081a8:	9102      	str	r1, [sp, #8]
 80081aa:	f240 414c 	movw	r1, #1100	; 0x44c
 80081ae:	9101      	str	r1, [sp, #4]
 80081b0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80081b4:	9100      	str	r1, [sp, #0]
 80081b6:	4620      	mov	r0, r4
 80081b8:	f004 fbc8 	bl	800c94c <_ZN3PID3SatEdiii>
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	4610      	mov	r0, r2
 80081c2:	4619      	mov	r1, r3
 80081c4:	f7f8 fc30 	bl	8000a28 <__aeabi_d2iz>
 80081c8:	4603      	mov	r3, r0
 80081ca:	647b      	str	r3, [r7, #68]	; 0x44
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	f503 74b8 	add.w	r4, r3, #368	; 0x170
 80081d2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80081d4:	f7f8 f90e 	bl	80003f4 <__aeabi_i2d>
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80081e0:	9102      	str	r1, [sp, #8]
 80081e2:	f240 414c 	movw	r1, #1100	; 0x44c
 80081e6:	9101      	str	r1, [sp, #4]
 80081e8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80081ec:	9100      	str	r1, [sp, #0]
 80081ee:	4620      	mov	r0, r4
 80081f0:	f004 fbac 	bl	800c94c <_ZN3PID3SatEdiii>
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	4610      	mov	r0, r2
 80081fa:	4619      	mov	r1, r3
 80081fc:	f7f8 fc14 	bl	8000a28 <__aeabi_d2iz>
 8008200:	4603      	mov	r3, r0
 8008202:	643b      	str	r3, [r7, #64]	; 0x40
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	f503 74b8 	add.w	r4, r3, #368	; 0x170
 800820a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800820c:	f7f8 f8f2 	bl	80003f4 <__aeabi_i2d>
 8008210:	4602      	mov	r2, r0
 8008212:	460b      	mov	r3, r1
 8008214:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8008218:	9102      	str	r1, [sp, #8]
 800821a:	f240 414c 	movw	r1, #1100	; 0x44c
 800821e:	9101      	str	r1, [sp, #4]
 8008220:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008224:	9100      	str	r1, [sp, #0]
 8008226:	4620      	mov	r0, r4
 8008228:	f004 fb90 	bl	800c94c <_ZN3PID3SatEdiii>
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	4610      	mov	r0, r2
 8008232:	4619      	mov	r1, r3
 8008234:	f7f8 fbf8 	bl	8000a28 <__aeabi_d2iz>
 8008238:	4603      	mov	r3, r0
 800823a:	63fb      	str	r3, [r7, #60]	; 0x3c

    //Convert pwm to motor speed 
    w1 = pid_roll.pwm2mot(pwm1, 1);
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8008242:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008244:	b291      	uxth	r1, r2
 8008246:	2201      	movs	r2, #1
 8008248:	4618      	mov	r0, r3
 800824a:	f004 fc65 	bl	800cb18 <_ZN3PID7pwm2motEti>
 800824e:	4602      	mov	r2, r0
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	641a      	str	r2, [r3, #64]	; 0x40
    w2 = pid_roll.pwm2mot(pwm2, 1);
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800825a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800825c:	b291      	uxth	r1, r2
 800825e:	2201      	movs	r2, #1
 8008260:	4618      	mov	r0, r3
 8008262:	f004 fc59 	bl	800cb18 <_ZN3PID7pwm2motEti>
 8008266:	4602      	mov	r2, r0
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	645a      	str	r2, [r3, #68]	; 0x44
    w3 = pid_roll.pwm2mot(pwm3,-1);
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8008272:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008274:	b291      	uxth	r1, r2
 8008276:	f04f 32ff 	mov.w	r2, #4294967295
 800827a:	4618      	mov	r0, r3
 800827c:	f004 fc4c 	bl	800cb18 <_ZN3PID7pwm2motEti>
 8008280:	4602      	mov	r2, r0
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	649a      	str	r2, [r3, #72]	; 0x48
    w4 = pid_roll.pwm2mot(pwm4,-1);
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800828c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800828e:	b291      	uxth	r1, r2
 8008290:	f04f 32ff 	mov.w	r2, #4294967295
 8008294:	4618      	mov	r0, r3
 8008296:	f004 fc3f 	bl	800cb18 <_ZN3PID7pwm2motEti>
 800829a:	4602      	mov	r2, r0
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	64da      	str	r2, [r3, #76]	; 0x4c


    std::vector<double> controller_output = 	{w1,w2,w3,w4};
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7f8 f8b7 	bl	8000418 <__aeabi_f2d>
 80082aa:	4602      	mov	r2, r0
 80082ac:	460b      	mov	r3, r1
 80082ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7f8 f8ae 	bl	8000418 <__aeabi_f2d>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7f8 f8a5 	bl	8000418 <__aeabi_f2d>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082da:	4618      	mov	r0, r3
 80082dc:	f7f8 f89c 	bl	8000418 <__aeabi_f2d>
 80082e0:	4602      	mov	r2, r0
 80082e2:	460b      	mov	r3, r1
 80082e4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80082e8:	f107 0318 	add.w	r3, r7, #24
 80082ec:	613b      	str	r3, [r7, #16]
 80082ee:	2304      	movs	r3, #4
 80082f0:	617b      	str	r3, [r7, #20]
 80082f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fa feee 	bl	80030d8 <_ZNSaIdEC1Ev>
 80082fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008300:	f107 0210 	add.w	r2, r7, #16
 8008304:	ca06      	ldmia	r2, {r1, r2}
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 fc73 	bl	8008bf2 <_ZNSt6vectorIdSaIdEEC1ESt16initializer_listIdERKS0_>
 800830c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008310:	4618      	mov	r0, r3
 8008312:	f7fa fe8c 	bl	800302e <_ZNSaIdED1Ev>
    controller_output_pwm[0] = pwm1;
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	e006      	b.n	8008328 <_ZN10Controller3RunE5stateS0_i+0x630>
 800831a:	bf00      	nop
 800831c:	f3af 8000 	nop.w
 8008320:	cccccccd 	.word	0xcccccccd
 8008324:	400ccccc 	.word	0x400ccccc
 8008328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800832a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    controller_output_pwm[1] = pwm2;
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008332:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    controller_output_pwm[2] = pwm3;
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800833a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    controller_output_pwm[3] = pwm4;
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008342:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

    return controller_output;
 8008346:	bf00      	nop
}
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	375c      	adds	r7, #92	; 0x5c
 800834c:	46bd      	mov	sp, r7
 800834e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008352:	b002      	add	sp, #8
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop

08008358 <_ZN10Controller3RunE5stateS0_ffff>:

std::vector<double> Controller::Run (struct state state, struct state state_des, float z_vel, float z0, float z, float ch3) {
 8008358:	b082      	sub	sp, #8
 800835a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835e:	b0a9      	sub	sp, #164	; 0xa4
 8008360:	af0a      	add	r7, sp, #40	; 0x28
 8008362:	6178      	str	r0, [r7, #20]
 8008364:	6139      	str	r1, [r7, #16]
 8008366:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800836a:	e881 000c 	stmia.w	r1, {r2, r3}
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);

        roll  = state.angles[0];
 800836e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008372:	4618      	mov	r0, r3
 8008374:	f7f8 f850 	bl	8000418 <__aeabi_f2d>
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	6939      	ldr	r1, [r7, #16]
 800837e:	e9c1 2304 	strd	r2, r3, [r1, #16]
        pitch = state.angles[1];
 8008382:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008386:	4618      	mov	r0, r3
 8008388:	f7f8 f846 	bl	8000418 <__aeabi_f2d>
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	6939      	ldr	r1, [r7, #16]
 8008392:	e9c1 2306 	strd	r2, r3, [r1, #24]
        yaw    = state.angles[2];
 8008396:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800839a:	4618      	mov	r0, r3
 800839c:	f7f8 f83c 	bl	8000418 <__aeabi_f2d>
 80083a0:	4602      	mov	r2, r0
 80083a2:	460b      	mov	r3, r1
 80083a4:	6939      	ldr	r1, [r7, #16]
 80083a6:	e9c1 2308 	strd	r2, r3, [r1, #32]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 80083aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7f8 f832 	bl	8000418 <__aeabi_f2d>
 80083b4:	4602      	mov	r2, r0
 80083b6:	460b      	mov	r3, r1
 80083b8:	6939      	ldr	r1, [r7, #16]
 80083ba:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        pitch_rate = state.rates[1];
 80083be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7f8 f828 	bl	8000418 <__aeabi_f2d>
 80083c8:	4602      	mov	r2, r0
 80083ca:	460b      	mov	r3, r1
 80083cc:	6939      	ldr	r1, [r7, #16]
 80083ce:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        yaw_rate   = state.rates[2];
 80083d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7f8 f81e 	bl	8000418 <__aeabi_f2d>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	6939      	ldr	r1, [r7, #16]
 80083e2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

        roll_bias = state.bias[0];
 80083e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 80083ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 80083f6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	609a      	str	r2, [r3, #8]

        float roll_des     = state_des.angles[0];
 80083fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008402:	677b      	str	r3, [r7, #116]	; 0x74
        float pitch_des 	 = state_des.angles[1];
 8008404:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008408:	673b      	str	r3, [r7, #112]	; 0x70
        float yaw_rate_des = state_des.rates[2];
 800840a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800840e:	66fb      	str	r3, [r7, #108]	; 0x6c

        roll_des 	  	= roll_des_filt.Run(roll_des);
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	33c0      	adds	r3, #192	; 0xc0
 8008414:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008416:	4618      	mov	r0, r3
 8008418:	f004 fc31 	bl	800cc7e <_ZN3lpf3RunEf>
 800841c:	6778      	str	r0, [r7, #116]	; 0x74
        pitch_des 		= pitch_des_filt.Run(pitch_des);
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	33e8      	adds	r3, #232	; 0xe8
 8008422:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008424:	4618      	mov	r0, r3
 8008426:	f004 fc2a 	bl	800cc7e <_ZN3lpf3RunEf>
 800842a:	6738      	str	r0, [r7, #112]	; 0x70
        yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8008432:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008434:	4618      	mov	r0, r3
 8008436:	f004 fc22 	bl	800cc7e <_ZN3lpf3RunEf>
 800843a:	66f8      	str	r0, [r7, #108]	; 0x6c


    roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle);
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	f503 76b8 	add.w	r6, r3, #368	; 0x170
 8008442:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8008444:	f7f7 ffe8 	bl	8000418 <__aeabi_f2d>
 8008448:	4680      	mov	r8, r0
 800844a:	4689      	mov	r9, r1
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008458:	4618      	mov	r0, r3
 800845a:	f7f7 ffdd 	bl	8000418 <__aeabi_f2d>
 800845e:	4602      	mov	r2, r0
 8008460:	460b      	mov	r3, r1
 8008462:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008466:	e9cd 4500 	strd	r4, r5, [sp]
 800846a:	4642      	mov	r2, r8
 800846c:	464b      	mov	r3, r9
 800846e:	4630      	mov	r0, r6
 8008470:	f003 ffa2 	bl	800c3b8 <_ZN3PID7P_AngleEddd>
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	4610      	mov	r0, r2
 800847a:	4619      	mov	r1, r3
 800847c:	f7f8 fafc 	bl	8000a78 <__aeabi_d2f>
 8008480:	4602      	mov	r2, r0
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle);
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	f503 7600 	add.w	r6, r3, #512	; 0x200
 800848e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008490:	f7f7 ffc2 	bl	8000418 <__aeabi_f2d>
 8008494:	4680      	mov	r8, r0
 8008496:	4689      	mov	r9, r1
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7f7 ffb7 	bl	8000418 <__aeabi_f2d>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084b2:	e9cd 4500 	strd	r4, r5, [sp]
 80084b6:	4642      	mov	r2, r8
 80084b8:	464b      	mov	r3, r9
 80084ba:	4630      	mov	r0, r6
 80084bc:	f003 ff7c 	bl	800c3b8 <_ZN3PID7P_AngleEddd>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4610      	mov	r0, r2
 80084c6:	4619      	mov	r1, r3
 80084c8:	f7f8 fad6 	bl	8000a78 <__aeabi_d2f>
 80084cc:	4602      	mov	r2, r0
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    pd_pitch = pid_pitch.PD_Rate(pitch_rate_des,pitch_rate,Kp_pitch,Ki_pitch,Kd_pitch);
    //p_yaw    = pid_yaw.P_Rate_Yaw(yaw_rate_des,yaw_rate,Kp_yaw);
    p_yaw    = pid_yaw.PD_Rate(yaw_rate_des,yaw_rate,Kp_yaw,Ki_yaw,0);
	*/

    pd_roll  = pid_roll.PID_Rate2(roll_rate_des,roll_rate, Kp_roll, Ki_roll, Kd_roll);
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80084da:	60bb      	str	r3, [r7, #8]
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7f7 ff98 	bl	8000418 <__aeabi_f2d>
 80084e8:	4682      	mov	sl, r0
 80084ea:	468b      	mov	fp, r1
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80084f2:	6939      	ldr	r1, [r7, #16]
 80084f4:	e9d1 011c 	ldrd	r0, r1, [r1, #112]	; 0x70
 80084f8:	693c      	ldr	r4, [r7, #16]
 80084fa:	f104 0578 	add.w	r5, r4, #120	; 0x78
 80084fe:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008502:	693e      	ldr	r6, [r7, #16]
 8008504:	e9d6 8920 	ldrd	r8, r9, [r6, #128]	; 0x80
 8008508:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800850c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008510:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008514:	e9cd 2300 	strd	r2, r3, [sp]
 8008518:	4652      	mov	r2, sl
 800851a:	465b      	mov	r3, fp
 800851c:	68b8      	ldr	r0, [r7, #8]
 800851e:	f003 fff5 	bl	800c50c <_ZN3PID9PID_Rate2Eddddd>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	6939      	ldr	r1, [r7, #16]
 8008528:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
    pd_pitch = pid_pitch.PID_Rate2(pitch_rate_des,pitch_rate,Kp_pitch,Ki_pitch,Kd_pitch);
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008532:	60bb      	str	r3, [r7, #8]
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800853a:	4618      	mov	r0, r3
 800853c:	f7f7 ff6c 	bl	8000418 <__aeabi_f2d>
 8008540:	4682      	mov	sl, r0
 8008542:	468b      	mov	fp, r1
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800854a:	6939      	ldr	r1, [r7, #16]
 800854c:	e9d1 0122 	ldrd	r0, r1, [r1, #136]	; 0x88
 8008550:	693c      	ldr	r4, [r7, #16]
 8008552:	f104 0590 	add.w	r5, r4, #144	; 0x90
 8008556:	e9d5 4500 	ldrd	r4, r5, [r5]
 800855a:	693e      	ldr	r6, [r7, #16]
 800855c:	e9d6 8926 	ldrd	r8, r9, [r6, #152]	; 0x98
 8008560:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008564:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008568:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800856c:	e9cd 2300 	strd	r2, r3, [sp]
 8008570:	4652      	mov	r2, sl
 8008572:	465b      	mov	r3, fp
 8008574:	68b8      	ldr	r0, [r7, #8]
 8008576:	f003 ffc9 	bl	800c50c <_ZN3PID9PID_Rate2Eddddd>
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	6939      	ldr	r1, [r7, #16]
 8008580:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
    p_yaw    = pid_yaw.PD_Rate(yaw_rate_des,yaw_rate,Kp_yaw,Ki_yaw,0);
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	f503 7624 	add.w	r6, r3, #656	; 0x290
 800858a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800858c:	f7f7 ff44 	bl	8000418 <__aeabi_f2d>
 8008590:	4680      	mov	r8, r0
 8008592:	4689      	mov	r9, r1
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800859a:	6939      	ldr	r1, [r7, #16]
 800859c:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 80085a0:	693c      	ldr	r4, [r7, #16]
 80085a2:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
 80085a6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80085aa:	f04f 0a00 	mov.w	sl, #0
 80085ae:	f04f 0b00 	mov.w	fp, #0
 80085b2:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80085b6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80085ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085be:	e9cd 2300 	strd	r2, r3, [sp]
 80085c2:	4642      	mov	r2, r8
 80085c4:	464b      	mov	r3, r9
 80085c6:	4630      	mov	r0, r6
 80085c8:	f004 f83e 	bl	800c648 <_ZN3PID7PD_RateEddddd>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	6939      	ldr	r1, [r7, #16]
 80085d2:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
    //printf("\np_yaw: %.2f",p_yaw);

    ////printf("\nst: %.3f",st);
    //F = p_alt.PD_Rate(0, z_vel, Kp_alt, Ki_alt, 0) + m*g;
    //double PI_Alt(double z0, double z, double v, double Kp_alt, double Ki_alt, unsigned int ch3);
    F = p_alt.PI_Alt(z0, z, z_vel, Kp_alt, Ki_alt, ch3) + m*g;
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	f503 7648 	add.w	r6, r3, #800	; 0x320
 80085dc:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80085e0:	f7f7 ff1a 	bl	8000418 <__aeabi_f2d>
 80085e4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80085e8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80085ec:	f7f7 ff14 	bl	8000418 <__aeabi_f2d>
 80085f0:	4604      	mov	r4, r0
 80085f2:	460d      	mov	r5, r1
 80085f4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80085f8:	f7f7 ff0e 	bl	8000418 <__aeabi_f2d>
 80085fc:	4680      	mov	r8, r0
 80085fe:	4689      	mov	r9, r1
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008606:	4618      	mov	r0, r3
 8008608:	f7f7 ff06 	bl	8000418 <__aeabi_f2d>
 800860c:	4682      	mov	sl, r0
 800860e:	468b      	mov	fp, r1
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008616:	4618      	mov	r0, r3
 8008618:	f7f7 fefe 	bl	8000418 <__aeabi_f2d>
 800861c:	e9c7 0100 	strd	r0, r1, [r7]
 8008620:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8008624:	f7f8 fd88 	bl	8001138 <__aeabi_f2uiz>
 8008628:	4603      	mov	r3, r0
 800862a:	9308      	str	r3, [sp, #32]
 800862c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008630:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008634:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8008638:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800863c:	e9cd 4500 	strd	r4, r5, [sp]
 8008640:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008644:	4630      	mov	r0, r6
 8008646:	f003 feda 	bl	800c3fe <_ZN3PID6PI_AltEdddddj>
 800864a:	4604      	mov	r4, r0
 800864c:	460d      	mov	r5, r1
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008656:	4619      	mov	r1, r3
 8008658:	4610      	mov	r0, r2
 800865a:	f7f8 fb6b 	bl	8000d34 <__aeabi_fmul>
 800865e:	4603      	mov	r3, r0
 8008660:	4618      	mov	r0, r3
 8008662:	f7f7 fed9 	bl	8000418 <__aeabi_f2d>
 8008666:	4602      	mov	r2, r0
 8008668:	460b      	mov	r3, r1
 800866a:	4620      	mov	r0, r4
 800866c:	4629      	mov	r1, r5
 800866e:	f7f7 fd75 	bl	800015c <__adddf3>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	4610      	mov	r0, r2
 8008678:	4619      	mov	r1, r3
 800867a:	f7f8 f9fd 	bl	8000a78 <__aeabi_d2f>
 800867e:	4602      	mov	r2, r0
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    float deg2rad = 0.0175;
 8008686:	4bc6      	ldr	r3, [pc, #792]	; (80089a0 <_ZN10Controller3RunE5stateS0_ffff+0x648>)
 8008688:	66bb      	str	r3, [r7, #104]	; 0x68
    float roll_r = roll * deg2rad;
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8008690:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008692:	f7f7 fec1 	bl	8000418 <__aeabi_f2d>
 8008696:	4602      	mov	r2, r0
 8008698:	460b      	mov	r3, r1
 800869a:	4620      	mov	r0, r4
 800869c:	4629      	mov	r1, r5
 800869e:	f7f7 ff13 	bl	80004c8 <__aeabi_dmul>
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	4610      	mov	r0, r2
 80086a8:	4619      	mov	r1, r3
 80086aa:	f7f8 f9e5 	bl	8000a78 <__aeabi_d2f>
 80086ae:	4603      	mov	r3, r0
 80086b0:	667b      	str	r3, [r7, #100]	; 0x64
    float pitch_r = pitch * deg2rad;
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80086b8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80086ba:	f7f7 fead 	bl	8000418 <__aeabi_f2d>
 80086be:	4602      	mov	r2, r0
 80086c0:	460b      	mov	r3, r1
 80086c2:	4620      	mov	r0, r4
 80086c4:	4629      	mov	r1, r5
 80086c6:	f7f7 feff 	bl	80004c8 <__aeabi_dmul>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	4610      	mov	r0, r2
 80086d0:	4619      	mov	r1, r3
 80086d2:	f7f8 f9d1 	bl	8000a78 <__aeabi_d2f>
 80086d6:	4603      	mov	r3, r0
 80086d8:	663b      	str	r3, [r7, #96]	; 0x60
    float b2e = 1 / cos(roll_r) / cos(pitch_r);
 80086da:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80086dc:	f7f9 f8e2 	bl	80018a4 <_ZSt3cosf>
 80086e0:	4603      	mov	r3, r0
 80086e2:	4619      	mov	r1, r3
 80086e4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80086e8:	f7f8 fbd8 	bl	8000e9c <__aeabi_fdiv>
 80086ec:	4603      	mov	r3, r0
 80086ee:	461c      	mov	r4, r3
 80086f0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80086f2:	f7f9 f8d7 	bl	80018a4 <_ZSt3cosf>
 80086f6:	4603      	mov	r3, r0
 80086f8:	4619      	mov	r1, r3
 80086fa:	4620      	mov	r0, r4
 80086fc:	f7f8 fbce 	bl	8000e9c <__aeabi_fdiv>
 8008700:	4603      	mov	r3, r0
 8008702:	65fb      	str	r3, [r7, #92]	; 0x5c

    F = F * b2e ; // Body to Earth
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800870a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800870c:	4618      	mov	r0, r3
 800870e:	f7f8 fb11 	bl	8000d34 <__aeabi_fmul>
 8008712:	4603      	mov	r3, r0
 8008714:	461a      	mov	r2, r3
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    F = p_alt.Sat(F, F_max, F_min);
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	f503 7648 	add.w	r6, r3, #800	; 0x320
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8008728:	4618      	mov	r0, r3
 800872a:	f7f7 fe75 	bl	8000418 <__aeabi_f2d>
 800872e:	4604      	mov	r4, r0
 8008730:	460d      	mov	r5, r1
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008736:	4618      	mov	r0, r3
 8008738:	f7f8 fcd8 	bl	80010ec <__aeabi_f2iz>
 800873c:	60b8      	str	r0, [r7, #8]
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008742:	4618      	mov	r0, r3
 8008744:	f7f8 fcd2 	bl	80010ec <__aeabi_f2iz>
 8008748:	4603      	mov	r3, r0
 800874a:	9301      	str	r3, [sp, #4]
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	4622      	mov	r2, r4
 8008752:	462b      	mov	r3, r5
 8008754:	4630      	mov	r0, r6
 8008756:	f004 f93f 	bl	800c9d8 <_ZN3PID3SatEdii>
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	4610      	mov	r0, r2
 8008760:	4619      	mov	r1, r3
 8008762:	f7f8 f989 	bl	8000a78 <__aeabi_d2f>
 8008766:	4602      	mov	r2, r0
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    float thr = p_alt.F2thr(F);
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	f503 7248 	add.w	r2, r3, #800	; 0x320
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800877a:	4619      	mov	r1, r3
 800877c:	4610      	mov	r0, r2
 800877e:	f004 fa13 	bl	800cba8 <_ZN3PID5F2thrEf>
 8008782:	4603      	mov	r3, r0
 8008784:	4618      	mov	r0, r3
 8008786:	f7f8 fa7d 	bl	8000c84 <__aeabi_ui2f>
 800878a:	4603      	mov	r3, r0
 800878c:	65bb      	str	r3, [r7, #88]	; 0x58
    thr = p_alt.Sat(thr, 1800, 1100);
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	f503 7448 	add.w	r4, r3, #800	; 0x320
 8008794:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008796:	f7f7 fe3f 	bl	8000418 <__aeabi_f2d>
 800879a:	4602      	mov	r2, r0
 800879c:	460b      	mov	r3, r1
 800879e:	f240 414c 	movw	r1, #1100	; 0x44c
 80087a2:	9101      	str	r1, [sp, #4]
 80087a4:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80087a8:	9100      	str	r1, [sp, #0]
 80087aa:	4620      	mov	r0, r4
 80087ac:	f004 f914 	bl	800c9d8 <_ZN3PID3SatEdii>
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	4610      	mov	r0, r2
 80087b6:	4619      	mov	r1, r3
 80087b8:	f7f8 f95e 	bl	8000a78 <__aeabi_d2f>
 80087bc:	4603      	mov	r3, r0
 80087be:	65bb      	str	r3, [r7, #88]	; 0x58
    alt_thr = thr;
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087c4:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
    int pwm1 = thr + pd_pitch - pd_roll  - p_yaw + PITCH_TRIM - ROLL_TRIM;
 80087c8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80087ca:	f7f7 fe25 	bl	8000418 <__aeabi_f2d>
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 80087d4:	f7f7 fcc2 	bl	800015c <__adddf3>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4610      	mov	r0, r2
 80087de:	4619      	mov	r1, r3
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 80087e6:	f7f7 fcb7 	bl	8000158 <__aeabi_dsub>
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	4610      	mov	r0, r2
 80087f0:	4619      	mov	r1, r3
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	; 0x158
 80087f8:	f7f7 fcae 	bl	8000158 <__aeabi_dsub>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4610      	mov	r0, r2
 8008802:	4619      	mov	r1, r3
 8008804:	f04f 0200 	mov.w	r2, #0
 8008808:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800880c:	f7f7 fca4 	bl	8000158 <__aeabi_dsub>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4610      	mov	r0, r2
 8008816:	4619      	mov	r1, r3
 8008818:	a35f      	add	r3, pc, #380	; (adr r3, 8008998 <_ZN10Controller3RunE5stateS0_ffff+0x640>)
 800881a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881e:	f7f7 fc9b 	bl	8000158 <__aeabi_dsub>
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	4610      	mov	r0, r2
 8008828:	4619      	mov	r1, r3
 800882a:	f7f8 f8fd 	bl	8000a28 <__aeabi_d2iz>
 800882e:	4603      	mov	r3, r0
 8008830:	657b      	str	r3, [r7, #84]	; 0x54
    int pwm2 = thr - pd_pitch + pd_roll  - p_yaw - PITCH_TRIM + ROLL_TRIM;
 8008832:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008834:	f7f7 fdf0 	bl	8000418 <__aeabi_f2d>
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 800883e:	f7f7 fc8b 	bl	8000158 <__aeabi_dsub>
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	4610      	mov	r0, r2
 8008848:	4619      	mov	r1, r3
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 8008850:	f7f7 fc84 	bl	800015c <__adddf3>
 8008854:	4602      	mov	r2, r0
 8008856:	460b      	mov	r3, r1
 8008858:	4610      	mov	r0, r2
 800885a:	4619      	mov	r1, r3
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	; 0x158
 8008862:	f7f7 fc79 	bl	8000158 <__aeabi_dsub>
 8008866:	4602      	mov	r2, r0
 8008868:	460b      	mov	r3, r1
 800886a:	4610      	mov	r0, r2
 800886c:	4619      	mov	r1, r3
 800886e:	f04f 0200 	mov.w	r2, #0
 8008872:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008876:	f7f7 fc71 	bl	800015c <__adddf3>
 800887a:	4602      	mov	r2, r0
 800887c:	460b      	mov	r3, r1
 800887e:	4610      	mov	r0, r2
 8008880:	4619      	mov	r1, r3
 8008882:	a345      	add	r3, pc, #276	; (adr r3, 8008998 <_ZN10Controller3RunE5stateS0_ffff+0x640>)
 8008884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008888:	f7f7 fc68 	bl	800015c <__adddf3>
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	4610      	mov	r0, r2
 8008892:	4619      	mov	r1, r3
 8008894:	f7f8 f8c8 	bl	8000a28 <__aeabi_d2iz>
 8008898:	4603      	mov	r3, r0
 800889a:	653b      	str	r3, [r7, #80]	; 0x50
    int pwm3 = thr + pd_pitch + pd_roll  + p_yaw + PITCH_TRIM + ROLL_TRIM;
 800889c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800889e:	f7f7 fdbb 	bl	8000418 <__aeabi_f2d>
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 80088a8:	f7f7 fc58 	bl	800015c <__adddf3>
 80088ac:	4602      	mov	r2, r0
 80088ae:	460b      	mov	r3, r1
 80088b0:	4610      	mov	r0, r2
 80088b2:	4619      	mov	r1, r3
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 80088ba:	f7f7 fc4f 	bl	800015c <__adddf3>
 80088be:	4602      	mov	r2, r0
 80088c0:	460b      	mov	r3, r1
 80088c2:	4610      	mov	r0, r2
 80088c4:	4619      	mov	r1, r3
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	; 0x158
 80088cc:	f7f7 fc46 	bl	800015c <__adddf3>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	4610      	mov	r0, r2
 80088d6:	4619      	mov	r1, r3
 80088d8:	f04f 0200 	mov.w	r2, #0
 80088dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80088e0:	f7f7 fc3a 	bl	8000158 <__aeabi_dsub>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	4610      	mov	r0, r2
 80088ea:	4619      	mov	r1, r3
 80088ec:	a32a      	add	r3, pc, #168	; (adr r3, 8008998 <_ZN10Controller3RunE5stateS0_ffff+0x640>)
 80088ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f2:	f7f7 fc33 	bl	800015c <__adddf3>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4610      	mov	r0, r2
 80088fc:	4619      	mov	r1, r3
 80088fe:	f7f8 f893 	bl	8000a28 <__aeabi_d2iz>
 8008902:	4603      	mov	r3, r0
 8008904:	64fb      	str	r3, [r7, #76]	; 0x4c
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw - PITCH_TRIM - ROLL_TRIM;
 8008906:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008908:	f7f7 fd86 	bl	8000418 <__aeabi_f2d>
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8008912:	f7f7 fc21 	bl	8000158 <__aeabi_dsub>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	4610      	mov	r0, r2
 800891c:	4619      	mov	r1, r3
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 8008924:	f7f7 fc18 	bl	8000158 <__aeabi_dsub>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4610      	mov	r0, r2
 800892e:	4619      	mov	r1, r3
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	; 0x158
 8008936:	f7f7 fc11 	bl	800015c <__adddf3>
 800893a:	4602      	mov	r2, r0
 800893c:	460b      	mov	r3, r1
 800893e:	4610      	mov	r0, r2
 8008940:	4619      	mov	r1, r3
 8008942:	f04f 0200 	mov.w	r2, #0
 8008946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800894a:	f7f7 fc07 	bl	800015c <__adddf3>
 800894e:	4602      	mov	r2, r0
 8008950:	460b      	mov	r3, r1
 8008952:	4610      	mov	r0, r2
 8008954:	4619      	mov	r1, r3
 8008956:	a310      	add	r3, pc, #64	; (adr r3, 8008998 <_ZN10Controller3RunE5stateS0_ffff+0x640>)
 8008958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895c:	f7f7 fbfc 	bl	8000158 <__aeabi_dsub>
 8008960:	4602      	mov	r2, r0
 8008962:	460b      	mov	r3, r1
 8008964:	4610      	mov	r0, r2
 8008966:	4619      	mov	r1, r3
 8008968:	f7f8 f85e 	bl	8000a28 <__aeabi_d2iz>
 800896c:	4603      	mov	r3, r0
 800896e:	64bb      	str	r3, [r7, #72]	; 0x48


    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	f503 76b8 	add.w	r6, r3, #368	; 0x170
 8008976:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008978:	f7f7 fd3c 	bl	80003f4 <__aeabi_i2d>
 800897c:	4604      	mov	r4, r0
 800897e:	460d      	mov	r5, r1
 8008980:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008982:	f7f8 fbb3 	bl	80010ec <__aeabi_f2iz>
 8008986:	4603      	mov	r3, r0
 8008988:	9302      	str	r3, [sp, #8]
 800898a:	f240 434c 	movw	r3, #1100	; 0x44c
 800898e:	9301      	str	r3, [sp, #4]
 8008990:	e008      	b.n	80089a4 <_ZN10Controller3RunE5stateS0_ffff+0x64c>
 8008992:	bf00      	nop
 8008994:	f3af 8000 	nop.w
 8008998:	cccccccd 	.word	0xcccccccd
 800899c:	400ccccc 	.word	0x400ccccc
 80089a0:	3c8f5c29 	.word	0x3c8f5c29
 80089a4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	4622      	mov	r2, r4
 80089ac:	462b      	mov	r3, r5
 80089ae:	4630      	mov	r0, r6
 80089b0:	f003 ffcc 	bl	800c94c <_ZN3PID3SatEdiii>
 80089b4:	4602      	mov	r2, r0
 80089b6:	460b      	mov	r3, r1
 80089b8:	4610      	mov	r0, r2
 80089ba:	4619      	mov	r1, r3
 80089bc:	f7f8 f834 	bl	8000a28 <__aeabi_d2iz>
 80089c0:	4603      	mov	r3, r0
 80089c2:	657b      	str	r3, [r7, #84]	; 0x54
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	f503 76b8 	add.w	r6, r3, #368	; 0x170
 80089ca:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80089cc:	f7f7 fd12 	bl	80003f4 <__aeabi_i2d>
 80089d0:	4604      	mov	r4, r0
 80089d2:	460d      	mov	r5, r1
 80089d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80089d6:	f7f8 fb89 	bl	80010ec <__aeabi_f2iz>
 80089da:	4603      	mov	r3, r0
 80089dc:	9302      	str	r3, [sp, #8]
 80089de:	f240 434c 	movw	r3, #1100	; 0x44c
 80089e2:	9301      	str	r3, [sp, #4]
 80089e4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	4622      	mov	r2, r4
 80089ec:	462b      	mov	r3, r5
 80089ee:	4630      	mov	r0, r6
 80089f0:	f003 ffac 	bl	800c94c <_ZN3PID3SatEdiii>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	4610      	mov	r0, r2
 80089fa:	4619      	mov	r1, r3
 80089fc:	f7f8 f814 	bl	8000a28 <__aeabi_d2iz>
 8008a00:	4603      	mov	r3, r0
 8008a02:	653b      	str	r3, [r7, #80]	; 0x50
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	f503 76b8 	add.w	r6, r3, #368	; 0x170
 8008a0a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008a0c:	f7f7 fcf2 	bl	80003f4 <__aeabi_i2d>
 8008a10:	4604      	mov	r4, r0
 8008a12:	460d      	mov	r5, r1
 8008a14:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008a16:	f7f8 fb69 	bl	80010ec <__aeabi_f2iz>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	9302      	str	r3, [sp, #8]
 8008a1e:	f240 434c 	movw	r3, #1100	; 0x44c
 8008a22:	9301      	str	r3, [sp, #4]
 8008a24:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	4622      	mov	r2, r4
 8008a2c:	462b      	mov	r3, r5
 8008a2e:	4630      	mov	r0, r6
 8008a30:	f003 ff8c 	bl	800c94c <_ZN3PID3SatEdiii>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	4610      	mov	r0, r2
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	f7f7 fff4 	bl	8000a28 <__aeabi_d2iz>
 8008a40:	4603      	mov	r3, r0
 8008a42:	64fb      	str	r3, [r7, #76]	; 0x4c
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	f503 76b8 	add.w	r6, r3, #368	; 0x170
 8008a4a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008a4c:	f7f7 fcd2 	bl	80003f4 <__aeabi_i2d>
 8008a50:	4604      	mov	r4, r0
 8008a52:	460d      	mov	r5, r1
 8008a54:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008a56:	f7f8 fb49 	bl	80010ec <__aeabi_f2iz>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	9302      	str	r3, [sp, #8]
 8008a5e:	f240 434c 	movw	r3, #1100	; 0x44c
 8008a62:	9301      	str	r3, [sp, #4]
 8008a64:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	4622      	mov	r2, r4
 8008a6c:	462b      	mov	r3, r5
 8008a6e:	4630      	mov	r0, r6
 8008a70:	f003 ff6c 	bl	800c94c <_ZN3PID3SatEdiii>
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	4610      	mov	r0, r2
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	f7f7 ffd4 	bl	8000a28 <__aeabi_d2iz>
 8008a80:	4603      	mov	r3, r0
 8008a82:	64bb      	str	r3, [r7, #72]	; 0x48

    //Convert pwm to motor speed
    w1 = pid_roll.pwm2mot(pwm1, 1);
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8008a8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a8c:	b291      	uxth	r1, r2
 8008a8e:	2201      	movs	r2, #1
 8008a90:	4618      	mov	r0, r3
 8008a92:	f004 f841 	bl	800cb18 <_ZN3PID7pwm2motEti>
 8008a96:	4602      	mov	r2, r0
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	641a      	str	r2, [r3, #64]	; 0x40
    w2 = pid_roll.pwm2mot(pwm2, 1);
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8008aa2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008aa4:	b291      	uxth	r1, r2
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f004 f835 	bl	800cb18 <_ZN3PID7pwm2motEti>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	645a      	str	r2, [r3, #68]	; 0x44
    w3 = pid_roll.pwm2mot(pwm3,-1);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8008aba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008abc:	b291      	uxth	r1, r2
 8008abe:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f004 f828 	bl	800cb18 <_ZN3PID7pwm2motEti>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	649a      	str	r2, [r3, #72]	; 0x48
    w4 = pid_roll.pwm2mot(pwm4,-1);
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8008ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ad6:	b291      	uxth	r1, r2
 8008ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8008adc:	4618      	mov	r0, r3
 8008ade:	f004 f81b 	bl	800cb18 <_ZN3PID7pwm2motEti>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	64da      	str	r2, [r3, #76]	; 0x4c


    std::vector<double> controller_output = 	{w1,w2,w3,w4};
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7f7 fc93 	bl	8000418 <__aeabi_f2d>
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7f7 fc8a 	bl	8000418 <__aeabi_f2d>
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7f7 fc81 	bl	8000418 <__aeabi_f2d>
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7f7 fc78 	bl	8000418 <__aeabi_f2d>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8008b30:	f107 0320 	add.w	r3, r7, #32
 8008b34:	61bb      	str	r3, [r7, #24]
 8008b36:	2304      	movs	r3, #4
 8008b38:	61fb      	str	r3, [r7, #28]
 8008b3a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fa faca 	bl	80030d8 <_ZNSaIdEC1Ev>
 8008b44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008b48:	f107 0218 	add.w	r2, r7, #24
 8008b4c:	ca06      	ldmia	r2, {r1, r2}
 8008b4e:	6978      	ldr	r0, [r7, #20]
 8008b50:	f000 f84f 	bl	8008bf2 <_ZNSt6vectorIdSaIdEEC1ESt16initializer_listIdERKS0_>
 8008b54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7fa fa68 	bl	800302e <_ZNSaIdED1Ev>
    controller_output_pwm[0] = pwm1;
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b62:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    controller_output_pwm[1] = pwm2;
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b6a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    controller_output_pwm[2] = pwm3;
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b72:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    controller_output_pwm[3] = pwm4;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b7a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

    return controller_output;
 8008b7e:	bf00      	nop
}
 8008b80:	6978      	ldr	r0, [r7, #20]
 8008b82:	377c      	adds	r7, #124	; 0x7c
 8008b84:	46bd      	mov	sp, r7
 8008b86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b8a:	b002      	add	sp, #8
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop

08008b90 <_ZN10ControllerD1Ev>:

Controller::~Controller() {}
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f004 f848 	bl	800cc34 <_ZN3PIDD1Ev>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8008baa:	4618      	mov	r0, r3
 8008bac:	f004 f842 	bl	800cc34 <_ZN3PIDD1Ev>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f004 f83c 	bl	800cc34 <_ZN3PIDD1Ev>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f004 f836 	bl	800cc34 <_ZN3PIDD1Ev>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f004 f8ab 	bl	800cd2a <_ZN3lpfD1Ev>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	33e8      	adds	r3, #232	; 0xe8
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f004 f8a6 	bl	800cd2a <_ZN3lpfD1Ev>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	33c0      	adds	r3, #192	; 0xc0
 8008be2:	4618      	mov	r0, r3
 8008be4:	f004 f8a1 	bl	800cd2a <_ZN3lpfD1Ev>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <_ZNSt6vectorIdSaIdEEC1ESt16initializer_listIdERKS0_>:
      vector(initializer_list<value_type> __l,
 8008bf2:	b5b0      	push	{r4, r5, r7, lr}
 8008bf4:	b086      	sub	sp, #24
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	60f8      	str	r0, [r7, #12]
 8008bfa:	1d38      	adds	r0, r7, #4
 8008bfc:	e880 0006 	stmia.w	r0, {r1, r2}
 8008c00:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fa fba3 	bl	8003352 <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8008c0c:	1d3b      	adds	r3, r7, #4
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 f810 	bl	8008c34 <_ZNKSt16initializer_listIdE5beginEv>
 8008c14:	4604      	mov	r4, r0
 8008c16:	1d3b      	adds	r3, r7, #4
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 f816 	bl	8008c4a <_ZNKSt16initializer_listIdE3endEv>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	462b      	mov	r3, r5
 8008c22:	4621      	mov	r1, r4
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f000 f822 	bl	8008c6e <_ZNSt6vectorIdSaIdEE19_M_range_initializeIPKdEEvT_S5_St20forward_iterator_tag>
      }
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3718      	adds	r7, #24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bdb0      	pop	{r4, r5, r7, pc}

08008c34 <_ZNKSt16initializer_listIdE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4618      	mov	r0, r3
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bc80      	pop	{r7}
 8008c48:	4770      	bx	lr

08008c4a <_ZNKSt16initializer_listIdE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8008c4a:	b590      	push	{r4, r7, lr}
 8008c4c:	b083      	sub	sp, #12
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f7ff ffee 	bl	8008c34 <_ZNKSt16initializer_listIdE5beginEv>
 8008c58:	4604      	mov	r4, r0
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f840 	bl	8008ce0 <_ZNKSt16initializer_listIdE4sizeEv>
 8008c60:	4603      	mov	r3, r0
 8008c62:	00db      	lsls	r3, r3, #3
 8008c64:	4423      	add	r3, r4
 8008c66:	4618      	mov	r0, r3
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd90      	pop	{r4, r7, pc}

08008c6e <_ZNSt6vectorIdSaIdEE19_M_range_initializeIPKdEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8008c6e:	b590      	push	{r4, r7, lr}
 8008c70:	b087      	sub	sp, #28
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	60f8      	str	r0, [r7, #12]
 8008c76:	60b9      	str	r1, [r7, #8]
 8008c78:	607a      	str	r2, [r7, #4]
 8008c7a:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8008c7c:	6879      	ldr	r1, [r7, #4]
 8008c7e:	68b8      	ldr	r0, [r7, #8]
 8008c80:	f000 f839 	bl	8008cf6 <_ZSt8distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8008c84:	4603      	mov	r3, r0
 8008c86:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8008c88:	68fc      	ldr	r4, [r7, #12]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fa fa5f 	bl	8003150 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8008c92:	4603      	mov	r3, r0
 8008c94:	4619      	mov	r1, r3
 8008c96:	6978      	ldr	r0, [r7, #20]
 8008c98:	f000 f842 	bl	8008d20 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f000 f865 	bl	8008d70 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 8008ca6:	4602      	mov	r2, r0
	  this->_M_impl._M_start
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	00db      	lsls	r3, r3, #3
 8008cb4:	441a      	add	r2, r3
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fa fa45 	bl	8003150 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8008cc6:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8008cc8:	4622      	mov	r2, r4
 8008cca:	6879      	ldr	r1, [r7, #4]
 8008ccc:	68b8      	ldr	r0, [r7, #8]
 8008cce:	f000 f863 	bl	8008d98 <_ZSt22__uninitialized_copy_aIPKdPddET0_T_S4_S3_RSaIT1_E>
 8008cd2:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	605a      	str	r2, [r3, #4]
	}
 8008cd8:	bf00      	nop
 8008cda:	371c      	adds	r7, #28
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd90      	pop	{r4, r7, pc}

08008ce0 <_ZNKSt16initializer_listIdE4sizeEv>:
      size() const noexcept { return _M_len; }
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	4618      	mov	r0, r3
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bc80      	pop	{r7}
 8008cf4:	4770      	bx	lr

08008cf6 <_ZSt8distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8008cf6:	b5b0      	push	{r4, r5, r7, lr}
 8008cf8:	b084      	sub	sp, #16
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8008d00:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8008d02:	1d3b      	adds	r3, r7, #4
 8008d04:	4618      	mov	r0, r3
 8008d06:	f000 f858 	bl	8008dba <_ZSt19__iterator_categoryIPKdENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8008d0a:	462a      	mov	r2, r5
 8008d0c:	6839      	ldr	r1, [r7, #0]
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f000 f85c 	bl	8008dcc <_ZSt10__distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8008d14:	4603      	mov	r3, r0
    }
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008d20 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8008d20:	b590      	push	{r4, r7, lr}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8008d2a:	f107 030c 	add.w	r3, r7, #12
 8008d2e:	6839      	ldr	r1, [r7, #0]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fa fb00 	bl	8003336 <_ZNSaIdEC1ERKS_>
 8008d36:	f107 030c 	add.w	r3, r7, #12
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 f855 	bl	8008dea <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>
 8008d40:	4602      	mov	r2, r0
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4293      	cmp	r3, r2
 8008d46:	bf8c      	ite	hi
 8008d48:	2301      	movhi	r3, #1
 8008d4a:	2300      	movls	r3, #0
 8008d4c:	b2dc      	uxtb	r4, r3
 8008d4e:	f107 030c 	add.w	r3, r7, #12
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fa f96b 	bl	800302e <_ZNSaIdED1Ev>
 8008d58:	2c00      	cmp	r4, #0
 8008d5a:	d002      	beq.n	8008d62 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8008d5c:	4803      	ldr	r0, [pc, #12]	; (8008d6c <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_+0x4c>)
 8008d5e:	f004 f804 	bl	800cd6a <_ZSt20__throw_length_errorPKc>
	return __n;
 8008d62:	687b      	ldr	r3, [r7, #4]
      }
 8008d64:	4618      	mov	r0, r3
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd90      	pop	{r4, r7, pc}
 8008d6c:	0800ef7c 	.word	0x0800ef7c

08008d70 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d006      	beq.n	8008d8e <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x1e>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	4618      	mov	r0, r3
 8008d86:	f000 f84a 	bl	8008e1e <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	e000      	b.n	8008d90 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x20>
 8008d8e:	2300      	movs	r3, #0
      }
 8008d90:	4618      	mov	r0, r3
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <_ZSt22__uninitialized_copy_aIPKdPddET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
 8008da4:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	68b9      	ldr	r1, [r7, #8]
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f000 f846 	bl	8008e3c <_ZSt18uninitialized_copyIPKdPdET0_T_S4_S3_>
 8008db0:	4603      	mov	r3, r0
 8008db2:	4618      	mov	r0, r3
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <_ZSt19__iterator_categoryIPKdENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8008dba:	b480      	push	{r7}
 8008dbc:	b083      	sub	sp, #12
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	370c      	adds	r7, #12
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bc80      	pop	{r7}
 8008dca:	4770      	bx	lr

08008dcc <_ZSt10__distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8008dd8:	68ba      	ldr	r2, [r7, #8]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	1ad3      	subs	r3, r2, r3
 8008dde:	10db      	asrs	r3, r3, #3
    }
 8008de0:	4618      	mov	r0, r3
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bc80      	pop	{r7}
 8008de8:	4770      	bx	lr

08008dea <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b084      	sub	sp, #16
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8008df2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8008df6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f831 	bl	8008e60 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8008e02:	f107 0208 	add.w	r2, r7, #8
 8008e06:	f107 030c 	add.w	r3, r7, #12
 8008e0a:	4611      	mov	r1, r2
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f000 f833 	bl	8008e78 <_ZSt3minIjERKT_S2_S2_>
 8008e12:	4603      	mov	r3, r0
 8008e14:	681b      	ldr	r3, [r3, #0]
      }
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b082      	sub	sp, #8
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8008e28:	2200      	movs	r2, #0
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f836 	bl	8008e9e <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>
 8008e32:	4603      	mov	r3, r0
 8008e34:	4618      	mov	r0, r3
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <_ZSt18uninitialized_copyIPKdPdET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b086      	sub	sp, #24
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	68b9      	ldr	r1, [r7, #8]
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f000 f842 	bl	8008eda <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKdPdEET0_T_S6_S5_>
 8008e56:	4603      	mov	r3, r0
    }
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3718      	adds	r7, #24
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f846 	bl	8008efa <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	4618      	mov	r0, r3
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d201      	bcs.n	8008e92 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	e000      	b.n	8008e94 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8008e92:	687b      	ldr	r3, [r7, #4]
    }
 8008e94:	4618      	mov	r0, r3
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bc80      	pop	{r7}
 8008e9c:	4770      	bx	lr

08008e9e <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b084      	sub	sp, #16
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	60f8      	str	r0, [r7, #12]
 8008ea6:	60b9      	str	r1, [r7, #8]
 8008ea8:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8008eaa:	68f8      	ldr	r0, [r7, #12]
 8008eac:	f000 f825 	bl	8008efa <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	bf8c      	ite	hi
 8008eb8:	2301      	movhi	r3, #1
 8008eba:	2300      	movls	r3, #0
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d001      	beq.n	8008ec6 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8008ec2:	f003 ff4f 	bl	800cd64 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	00db      	lsls	r3, r3, #3
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f003 ff39 	bl	800cd42 <_Znwj>
 8008ed0:	4603      	mov	r3, r0
      }
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKdPdEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b084      	sub	sp, #16
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	60f8      	str	r0, [r7, #12]
 8008ee2:	60b9      	str	r1, [r7, #8]
 8008ee4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	68b9      	ldr	r1, [r7, #8]
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f000 f810 	bl	8008f10 <_ZSt4copyIPKdPdET0_T_S4_S3_>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008efa:	b480      	push	{r7}
 8008efc:	b083      	sub	sp, #12
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8008f02:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 8008f06:	4618      	mov	r0, r3
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bc80      	pop	{r7}
 8008f0e:	4770      	bx	lr

08008f10 <_ZSt4copyIPKdPdET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8008f10:	b590      	push	{r4, r7, lr}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f000 f80f 	bl	8008f40 <_ZSt12__miter_baseIPKdET_S2_>
 8008f22:	4604      	mov	r4, r0
 8008f24:	68b8      	ldr	r0, [r7, #8]
 8008f26:	f000 f80b 	bl	8008f40 <_ZSt12__miter_baseIPKdET_S2_>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	4619      	mov	r1, r3
 8008f30:	4620      	mov	r0, r4
 8008f32:	f000 f80f 	bl	8008f54 <_ZSt14__copy_move_a2ILb0EPKdPdET1_T0_S4_S3_>
 8008f36:	4603      	mov	r3, r0
    }
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd90      	pop	{r4, r7, pc}

08008f40 <_ZSt12__miter_baseIPKdET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bc80      	pop	{r7}
 8008f52:	4770      	bx	lr

08008f54 <_ZSt14__copy_move_a2ILb0EPKdPdET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8008f54:	b5b0      	push	{r4, r5, r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f000 f81a 	bl	8008f9a <_ZSt12__niter_baseIPKdET_S2_>
 8008f66:	4604      	mov	r4, r0
 8008f68:	68b8      	ldr	r0, [r7, #8]
 8008f6a:	f000 f816 	bl	8008f9a <_ZSt12__niter_baseIPKdET_S2_>
 8008f6e:	4605      	mov	r5, r0
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 f81b 	bl	8008fae <_ZSt12__niter_baseIPdET_S1_>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	4620      	mov	r0, r4
 8008f80:	f000 f81f 	bl	8008fc2 <_ZSt13__copy_move_aILb0EPKdPdET1_T0_S4_S3_>
 8008f84:	4602      	mov	r2, r0
 8008f86:	1d3b      	adds	r3, r7, #4
 8008f88:	4611      	mov	r1, r2
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 f82b 	bl	8008fe6 <_ZSt12__niter_wrapIPdET_RKS1_S1_>
 8008f90:	4603      	mov	r3, r0
    }
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bdb0      	pop	{r4, r5, r7, pc}

08008f9a <_ZSt12__niter_baseIPKdET_S2_>:
    __niter_base(_Iterator __it)
 8008f9a:	b480      	push	{r7}
 8008f9c:	b083      	sub	sp, #12
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bc80      	pop	{r7}
 8008fac:	4770      	bx	lr

08008fae <_ZSt12__niter_baseIPdET_S1_>:
    __niter_base(_Iterator __it)
 8008fae:	b480      	push	{r7}
 8008fb0:	b083      	sub	sp, #12
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bc80      	pop	{r7}
 8008fc0:	4770      	bx	lr

08008fc2 <_ZSt13__copy_move_aILb0EPKdPdET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b086      	sub	sp, #24
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	60f8      	str	r0, [r7, #12]
 8008fca:	60b9      	str	r1, [r7, #8]
 8008fcc:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8008fce:	2301      	movs	r3, #1
 8008fd0:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	68b9      	ldr	r1, [r7, #8]
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f000 f810 	bl	8008ffc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
 8008fdc:	4603      	mov	r3, r0
    }
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <_ZSt12__niter_wrapIPdET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8008fe6:	b480      	push	{r7}
 8008fe8:	b083      	sub	sp, #12
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	6039      	str	r1, [r7, #0]
    { return __res; }
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bc80      	pop	{r7}
 8008ffa:	4770      	bx	lr

08008ffc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	1ad3      	subs	r3, r2, r3
 800900e:	10db      	asrs	r3, r3, #3
 8009010:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d006      	beq.n	8009026 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	00db      	lsls	r3, r3, #3
 800901c:	461a      	mov	r2, r3
 800901e:	68f9      	ldr	r1, [r7, #12]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f005 fe69 	bl	800ecf8 <memmove>
	  return __result + _Num;
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	00db      	lsls	r3, r3, #3
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	4413      	add	r3, r2
	}
 800902e:	4618      	mov	r0, r3
 8009030:	3718      	adds	r7, #24
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi()  {
 8009038:	b580      	push	{r7, lr}
 800903a:	b086      	sub	sp, #24
 800903c:	af04      	add	r7, sp, #16
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f04f 0200 	mov.w	r2, #0
 8009046:	63da      	str	r2, [r3, #60]	; 0x3c
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f04f 0200 	mov.w	r2, #0
 800904e:	641a      	str	r2, [r3, #64]	; 0x40
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f04f 0200 	mov.w	r2, #0
 8009056:	645a      	str	r2, [r3, #68]	; 0x44
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a4b      	ldr	r2, [pc, #300]	; (8009188 <_ZN15Kalman_FiltresiC1Ev+0x150>)
 800905c:	649a      	str	r2, [r3, #72]	; 0x48
 800905e:	6879      	ldr	r1, [r7, #4]
 8009060:	a33f      	add	r3, pc, #252	; (adr r3, 8009160 <_ZN15Kalman_FiltresiC1Ev+0x128>)
 8009062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009066:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 800906a:	6879      	ldr	r1, [r7, #4]
 800906c:	a33c      	add	r3, pc, #240	; (adr r3, 8009160 <_ZN15Kalman_FiltresiC1Ev+0x128>)
 800906e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009072:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8009076:	6879      	ldr	r1, [r7, #4]
 8009078:	a33b      	add	r3, pc, #236	; (adr r3, 8009168 <_ZN15Kalman_FiltresiC1Ev+0x130>)
 800907a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f04f 0200 	mov.w	r2, #0
 8009088:	679a      	str	r2, [r3, #120]	; 0x78
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f04f 0200 	mov.w	r2, #0
 8009090:	67da      	str	r2, [r3, #124]	; 0x7c
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f04f 0200 	mov.w	r2, #0
 8009098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a3a      	ldr	r2, [pc, #232]	; (8009188 <_ZN15Kalman_FiltresiC1Ev+0x150>)
 80090a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a39      	ldr	r2, [pc, #228]	; (800918c <_ZN15Kalman_FiltresiC1Ev+0x154>)
 80090a8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80090ac:	6879      	ldr	r1, [r7, #4]
 80090ae:	a330      	add	r3, pc, #192	; (adr r3, 8009170 <_ZN15Kalman_FiltresiC1Ev+0x138>)
 80090b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b4:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
 80090b8:	6879      	ldr	r1, [r7, #4]
 80090ba:	f04f 0200 	mov.w	r2, #0
 80090be:	4b34      	ldr	r3, [pc, #208]	; (8009190 <_ZN15Kalman_FiltresiC1Ev+0x158>)
 80090c0:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a33      	ldr	r2, [pc, #204]	; (8009194 <_ZN15Kalman_FiltresiC1Ev+0x15c>)
 80090c8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80090d2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a2f      	ldr	r2, [pc, #188]	; (8009198 <_ZN15Kalman_FiltresiC1Ev+0x160>)
 80090da:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a2e      	ldr	r2, [pc, #184]	; (800919c <_ZN15Kalman_FiltresiC1Ev+0x164>)
 80090e2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80090ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7f7 fdc8 	bl	8000c8c <__aeabi_i2f>
 80090fc:	4603      	mov	r3, r0
 80090fe:	4619      	mov	r1, r3
 8009100:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009104:	f7f7 feca 	bl	8000e9c <__aeabi_fdiv>
 8009108:	4603      	mov	r3, r0
 800910a:	4618      	mov	r0, r3
 800910c:	f7f7 f984 	bl	8000418 <__aeabi_f2d>
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	6879      	ldr	r1, [r7, #4]
 8009116:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8009120:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800912a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 8009134:	a310      	add	r3, pc, #64	; (adr r3, 8009178 <_ZN15Kalman_FiltresiC1Ev+0x140>)
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800913e:	a30e      	add	r3, pc, #56	; (adr r3, 8009178 <_ZN15Kalman_FiltresiC1Ev+0x140>)
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	e9cd 2300 	strd	r2, r3, [sp]
 8009148:	a30d      	add	r3, pc, #52	; (adr r3, 8009180 <_ZN15Kalman_FiltresiC1Ev+0x148>)
 800914a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914e:	4608      	mov	r0, r1
 8009150:	f003 fd7a 	bl	800cc48 <_ZN3lpfC1Eddd>

}
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4618      	mov	r0, r3
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	d2f1a9fc 	.word	0xd2f1a9fc
 8009164:	3f50624d 	.word	0x3f50624d
 8009168:	1eb851ec 	.word	0x1eb851ec
 800916c:	3fb1eb85 	.word	0x3fb1eb85
 8009170:	00000000 	.word	0x00000000
 8009174:	40f86a00 	.word	0x40f86a00
 8009178:	de7ea5f8 	.word	0xde7ea5f8
 800917c:	3fb2a454 	.word	0x3fb2a454
 8009180:	ab367a10 	.word	0xab367a10
 8009184:	3feb573e 	.word	0x3feb573e
 8009188:	47c35000 	.word	0x47c35000
 800918c:	461c4000 	.word	0x461c4000
 8009190:	40240000 	.word	0x40240000
 8009194:	4b189680 	.word	0x4b189680
 8009198:	40a00000 	.word	0x40a00000
 800919c:	42654ca3 	.word	0x42654ca3

080091a0 <_ZN15Kalman_Filtresi3RunEv>:


void Kalman_Filtresi::Run() {
 80091a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091a4:	b09e      	sub	sp, #120	; 0x78
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]

  float accX = acc[0]; 
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80091b0:	677b      	str	r3, [r7, #116]	; 0x74
  float accY = acc[1];
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80091b8:	673b      	str	r3, [r7, #112]	; 0x70
  float accZ = acc[2];
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80091c0:	66fb      	str	r3, [r7, #108]	; 0x6c

  float gyroX = gyro[0]; 
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80091c8:	66bb      	str	r3, [r7, #104]	; 0x68
  float gyroY = gyro[1];
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80091d0:	667b      	str	r3, [r7, #100]	; 0x64
  float gyroZ = gyro[2];
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80091d8:	663b      	str	r3, [r7, #96]	; 0x60

    //---IMU KİSMİ----
    //=================================
  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 80091da:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80091dc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80091de:	f7f7 fda9 	bl	8000d34 <__aeabi_fmul>
 80091e2:	4603      	mov	r3, r0
 80091e4:	461c      	mov	r4, r3
 80091e6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80091e8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80091ea:	f7f7 fda3 	bl	8000d34 <__aeabi_fmul>
 80091ee:	4603      	mov	r3, r0
 80091f0:	4619      	mov	r1, r3
 80091f2:	4620      	mov	r0, r4
 80091f4:	f7f7 fc96 	bl	8000b24 <__addsf3>
 80091f8:	4603      	mov	r3, r0
 80091fa:	461c      	mov	r4, r3
 80091fc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80091fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009200:	f7f7 fd98 	bl	8000d34 <__aeabi_fmul>
 8009204:	4603      	mov	r3, r0
 8009206:	4619      	mov	r1, r3
 8009208:	4620      	mov	r0, r4
 800920a:	f7f7 fc8b 	bl	8000b24 <__addsf3>
 800920e:	4603      	mov	r3, r0
 8009210:	4618      	mov	r0, r3
 8009212:	f7f8 fb53 	bl	80018bc <_ZSt4sqrtf>
 8009216:	65f8      	str	r0, [r7, #92]	; 0x5c

  pitch_acc =  asin(accX/acctop)*rad2deg + PITCH_OFFSET;
 8009218:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800921a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800921c:	f7f7 fe3e 	bl	8000e9c <__aeabi_fdiv>
 8009220:	4603      	mov	r3, r0
 8009222:	4618      	mov	r0, r3
 8009224:	f7f8 fb32 	bl	800188c <_ZSt4asinf>
 8009228:	4602      	mov	r2, r0
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009230:	4619      	mov	r1, r3
 8009232:	4610      	mov	r0, r2
 8009234:	f7f7 fd7e 	bl	8000d34 <__aeabi_fmul>
 8009238:	4603      	mov	r3, r0
 800923a:	461a      	mov	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8009242:	4619      	mov	r1, r3
 8009244:	4610      	mov	r0, r2
 8009246:	f7f7 fc6d 	bl	8000b24 <__addsf3>
 800924a:	4603      	mov	r3, r0
 800924c:	461a      	mov	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  roll_acc  =  asin(accY/acctop)*rad2deg + ROLL_OFFSET;
 8009254:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009256:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8009258:	f7f7 fe20 	bl	8000e9c <__aeabi_fdiv>
 800925c:	4603      	mov	r3, r0
 800925e:	4618      	mov	r0, r3
 8009260:	f7f8 fb14 	bl	800188c <_ZSt4asinf>
 8009264:	4602      	mov	r2, r0
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800926c:	4619      	mov	r1, r3
 800926e:	4610      	mov	r0, r2
 8009270:	f7f7 fd60 	bl	8000d34 <__aeabi_fmul>
 8009274:	4603      	mov	r3, r0
 8009276:	461a      	mov	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800927e:	4619      	mov	r1, r3
 8009280:	4610      	mov	r0, r2
 8009282:	f7f7 fc4f 	bl	8000b24 <__addsf3>
 8009286:	4603      	mov	r3, r0
 8009288:	461a      	mov	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

  //pitch_acc = lpf(pitch_acc);
  //roll_acc = lpf(roll_acc);


  pitch_gyro = gyroY * st;
 8009290:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009292:	f7f7 f8c1 	bl	8000418 <__aeabi_f2d>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800929c:	f7f7 f914 	bl	80004c8 <__aeabi_dmul>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	4610      	mov	r0, r2
 80092a6:	4619      	mov	r1, r3
 80092a8:	f7f7 fbe6 	bl	8000a78 <__aeabi_d2f>
 80092ac:	4602      	mov	r2, r0
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
  roll_gyro =  gyroX * st;
 80092b4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80092b6:	f7f7 f8af 	bl	8000418 <__aeabi_f2d>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80092c0:	f7f7 f902 	bl	80004c8 <__aeabi_dmul>
 80092c4:	4602      	mov	r2, r0
 80092c6:	460b      	mov	r3, r1
 80092c8:	4610      	mov	r0, r2
 80092ca:	4619      	mov	r1, r3
 80092cc:	f7f7 fbd4 	bl	8000a78 <__aeabi_d2f>
 80092d0:	4602      	mov	r2, r0
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    attitude.pitch_acc = pitch_acc;
    attitude.yaw_acc = yaw_acc;
    //printf("\npitc_acc: %.2f", pitch_acc);
  #endif
    
    if(gyro_ready) {
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f001 87ae 	beq.w	800b240 <_ZN15Kalman_Filtresi3RunEv+0x20a0>


    pitch_comp=(pitch_gyro+pitch_eski)*0.998+pitch_acc*0.002;	//Tümleyen filtre
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80092f0:	4619      	mov	r1, r3
 80092f2:	4610      	mov	r0, r2
 80092f4:	f7f7 fc16 	bl	8000b24 <__addsf3>
 80092f8:	4603      	mov	r3, r0
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7f7 f88c 	bl	8000418 <__aeabi_f2d>
 8009300:	a3c7      	add	r3, pc, #796	; (adr r3, 8009620 <_ZN15Kalman_Filtresi3RunEv+0x480>)
 8009302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009306:	f7f7 f8df 	bl	80004c8 <__aeabi_dmul>
 800930a:	4602      	mov	r2, r0
 800930c:	460b      	mov	r3, r1
 800930e:	4614      	mov	r4, r2
 8009310:	461d      	mov	r5, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8009318:	4618      	mov	r0, r3
 800931a:	f7f7 f87d 	bl	8000418 <__aeabi_f2d>
 800931e:	a3c2      	add	r3, pc, #776	; (adr r3, 8009628 <_ZN15Kalman_Filtresi3RunEv+0x488>)
 8009320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009324:	f7f7 f8d0 	bl	80004c8 <__aeabi_dmul>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	4620      	mov	r0, r4
 800932e:	4629      	mov	r1, r5
 8009330:	f7f6 ff14 	bl	800015c <__adddf3>
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	4610      	mov	r0, r2
 800933a:	4619      	mov	r1, r3
 800933c:	f7f7 fb9c 	bl	8000a78 <__aeabi_d2f>
 8009340:	4602      	mov	r2, r0
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    roll_comp =(roll_gyro+roll_eski)*0.998+roll_acc*0.002;		//Tümleyen filtre
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009354:	4619      	mov	r1, r3
 8009356:	4610      	mov	r0, r2
 8009358:	f7f7 fbe4 	bl	8000b24 <__addsf3>
 800935c:	4603      	mov	r3, r0
 800935e:	4618      	mov	r0, r3
 8009360:	f7f7 f85a 	bl	8000418 <__aeabi_f2d>
 8009364:	a3ae      	add	r3, pc, #696	; (adr r3, 8009620 <_ZN15Kalman_Filtresi3RunEv+0x480>)
 8009366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936a:	f7f7 f8ad 	bl	80004c8 <__aeabi_dmul>
 800936e:	4602      	mov	r2, r0
 8009370:	460b      	mov	r3, r1
 8009372:	4614      	mov	r4, r2
 8009374:	461d      	mov	r5, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800937c:	4618      	mov	r0, r3
 800937e:	f7f7 f84b 	bl	8000418 <__aeabi_f2d>
 8009382:	a3a9      	add	r3, pc, #676	; (adr r3, 8009628 <_ZN15Kalman_Filtresi3RunEv+0x488>)
 8009384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009388:	f7f7 f89e 	bl	80004c8 <__aeabi_dmul>
 800938c:	4602      	mov	r2, r0
 800938e:	460b      	mov	r3, r1
 8009390:	4620      	mov	r0, r4
 8009392:	4629      	mov	r1, r5
 8009394:	f7f6 fee2 	bl	800015c <__adddf3>
 8009398:	4602      	mov	r2, r0
 800939a:	460b      	mov	r3, r1
 800939c:	4610      	mov	r0, r2
 800939e:	4619      	mov	r1, r3
 80093a0:	f7f7 fb6a 	bl	8000a78 <__aeabi_d2f>
 80093a4:	4602      	mov	r2, r0
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138


    //ANGLE PREDICTION
    roll_ekf = (roll_ekf) + st*(roll_rate);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7f7 f830 	bl	8000418 <__aeabi_f2d>
 80093b8:	4604      	mov	r4, r0
 80093ba:	460d      	mov	r5, r1
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80093c8:	f7f7 f87e 	bl	80004c8 <__aeabi_dmul>
 80093cc:	4602      	mov	r2, r0
 80093ce:	460b      	mov	r3, r1
 80093d0:	4620      	mov	r0, r4
 80093d2:	4629      	mov	r1, r5
 80093d4:	f7f6 fec2 	bl	800015c <__adddf3>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	4610      	mov	r0, r2
 80093de:	4619      	mov	r1, r3
 80093e0:	f7f7 fb4a 	bl	8000a78 <__aeabi_d2f>
 80093e4:	4602      	mov	r2, r0
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

    S11_roll = S11_roll + sa + S31_roll*st + (st*st*(S13_roll + S33_roll*st))/st;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7f7 f811 	bl	8000418 <__aeabi_f2d>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80093fc:	f7f6 feae 	bl	800015c <__adddf3>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	4614      	mov	r4, r2
 8009406:	461d      	mov	r5, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800940e:	4618      	mov	r0, r3
 8009410:	f7f7 f802 	bl	8000418 <__aeabi_f2d>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800941a:	f7f7 f855 	bl	80004c8 <__aeabi_dmul>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4620      	mov	r0, r4
 8009424:	4629      	mov	r1, r5
 8009426:	f7f6 fe99 	bl	800015c <__adddf3>
 800942a:	4602      	mov	r2, r0
 800942c:	460b      	mov	r3, r1
 800942e:	4690      	mov	r8, r2
 8009430:	4699      	mov	r9, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800943e:	f7f7 f843 	bl	80004c8 <__aeabi_dmul>
 8009442:	4602      	mov	r2, r0
 8009444:	460b      	mov	r3, r1
 8009446:	4692      	mov	sl, r2
 8009448:	469b      	mov	fp, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009450:	4618      	mov	r0, r3
 8009452:	f7f6 ffe1 	bl	8000418 <__aeabi_f2d>
 8009456:	4604      	mov	r4, r0
 8009458:	460d      	mov	r5, r1
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009460:	4618      	mov	r0, r3
 8009462:	f7f6 ffd9 	bl	8000418 <__aeabi_f2d>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800946c:	f7f7 f82c 	bl	80004c8 <__aeabi_dmul>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4620      	mov	r0, r4
 8009476:	4629      	mov	r1, r5
 8009478:	f7f6 fe70 	bl	800015c <__adddf3>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	4650      	mov	r0, sl
 8009482:	4659      	mov	r1, fp
 8009484:	f7f7 f820 	bl	80004c8 <__aeabi_dmul>
 8009488:	4602      	mov	r2, r0
 800948a:	460b      	mov	r3, r1
 800948c:	4610      	mov	r0, r2
 800948e:	4619      	mov	r1, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8009496:	f7f7 f941 	bl	800071c <__aeabi_ddiv>
 800949a:	4602      	mov	r2, r0
 800949c:	460b      	mov	r3, r1
 800949e:	4640      	mov	r0, r8
 80094a0:	4649      	mov	r1, r9
 80094a2:	f7f6 fe5b 	bl	800015c <__adddf3>
 80094a6:	4602      	mov	r2, r0
 80094a8:	460b      	mov	r3, r1
 80094aa:	4610      	mov	r0, r2
 80094ac:	4619      	mov	r1, r3
 80094ae:	f7f7 fae3 	bl	8000a78 <__aeabi_d2f>
 80094b2:	4602      	mov	r2, r0
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	679a      	str	r2, [r3, #120]	; 0x78
    S12_roll = S12_roll + S32_roll*st;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094bc:	4618      	mov	r0, r3
 80094be:	f7f6 ffab 	bl	8000418 <__aeabi_f2d>
 80094c2:	4604      	mov	r4, r0
 80094c4:	460d      	mov	r5, r1
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7f6 ffa3 	bl	8000418 <__aeabi_f2d>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80094d8:	f7f6 fff6 	bl	80004c8 <__aeabi_dmul>
 80094dc:	4602      	mov	r2, r0
 80094de:	460b      	mov	r3, r1
 80094e0:	4620      	mov	r0, r4
 80094e2:	4629      	mov	r1, r5
 80094e4:	f7f6 fe3a 	bl	800015c <__adddf3>
 80094e8:	4602      	mov	r2, r0
 80094ea:	460b      	mov	r3, r1
 80094ec:	4610      	mov	r0, r2
 80094ee:	4619      	mov	r1, r3
 80094f0:	f7f7 fac2 	bl	8000a78 <__aeabi_d2f>
 80094f4:	4602      	mov	r2, r0
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	67da      	str	r2, [r3, #124]	; 0x7c
    S13_roll = S13_roll + S33_roll*st;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009500:	4618      	mov	r0, r3
 8009502:	f7f6 ff89 	bl	8000418 <__aeabi_f2d>
 8009506:	4604      	mov	r4, r0
 8009508:	460d      	mov	r5, r1
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009510:	4618      	mov	r0, r3
 8009512:	f7f6 ff81 	bl	8000418 <__aeabi_f2d>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800951c:	f7f6 ffd4 	bl	80004c8 <__aeabi_dmul>
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	4620      	mov	r0, r4
 8009526:	4629      	mov	r1, r5
 8009528:	f7f6 fe18 	bl	800015c <__adddf3>
 800952c:	4602      	mov	r2, r0
 800952e:	460b      	mov	r3, r1
 8009530:	4610      	mov	r0, r2
 8009532:	4619      	mov	r1, r3
 8009534:	f7f7 faa0 	bl	8000a78 <__aeabi_d2f>
 8009538:	4602      	mov	r2, r0
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    S21_roll = S21_roll + S23_roll*(st);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009546:	4618      	mov	r0, r3
 8009548:	f7f6 ff66 	bl	8000418 <__aeabi_f2d>
 800954c:	4604      	mov	r4, r0
 800954e:	460d      	mov	r5, r1
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009556:	4618      	mov	r0, r3
 8009558:	f7f6 ff5e 	bl	8000418 <__aeabi_f2d>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8009562:	f7f6 ffb1 	bl	80004c8 <__aeabi_dmul>
 8009566:	4602      	mov	r2, r0
 8009568:	460b      	mov	r3, r1
 800956a:	4620      	mov	r0, r4
 800956c:	4629      	mov	r1, r5
 800956e:	f7f6 fdf5 	bl	800015c <__adddf3>
 8009572:	4602      	mov	r2, r0
 8009574:	460b      	mov	r3, r1
 8009576:	4610      	mov	r0, r2
 8009578:	4619      	mov	r1, r3
 800957a:	f7f7 fa7d 	bl	8000a78 <__aeabi_d2f>
 800957e:	4602      	mov	r2, r0
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    S22_roll = S22_roll + sb;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800958c:	4618      	mov	r0, r3
 800958e:	f7f6 ff43 	bl	8000418 <__aeabi_f2d>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8009598:	f7f6 fde0 	bl	800015c <__adddf3>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	4610      	mov	r0, r2
 80095a2:	4619      	mov	r1, r3
 80095a4:	f7f7 fa68 	bl	8000a78 <__aeabi_d2f>
 80095a8:	4602      	mov	r2, r0
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    //S23_roll = S23_roll;

    S31_roll = S31_roll + S33_roll*(st);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7f6 ff2e 	bl	8000418 <__aeabi_f2d>
 80095bc:	4604      	mov	r4, r0
 80095be:	460d      	mov	r5, r1
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7f6 ff26 	bl	8000418 <__aeabi_f2d>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80095d2:	f7f6 ff79 	bl	80004c8 <__aeabi_dmul>
 80095d6:	4602      	mov	r2, r0
 80095d8:	460b      	mov	r3, r1
 80095da:	4620      	mov	r0, r4
 80095dc:	4629      	mov	r1, r5
 80095de:	f7f6 fdbd 	bl	800015c <__adddf3>
 80095e2:	4602      	mov	r2, r0
 80095e4:	460b      	mov	r3, r1
 80095e6:	4610      	mov	r0, r2
 80095e8:	4619      	mov	r1, r3
 80095ea:	f7f7 fa45 	bl	8000a78 <__aeabi_d2f>
 80095ee:	4602      	mov	r2, r0
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    //S32_roll = S32_roll;
    S33_roll = S33_roll + sr;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7f6 ff0b 	bl	8000418 <__aeabi_f2d>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8009608:	f7f6 fda8 	bl	800015c <__adddf3>
 800960c:	4602      	mov	r2, r0
 800960e:	460b      	mov	r3, r1
 8009610:	4610      	mov	r0, r2
 8009612:	4619      	mov	r1, r3
 8009614:	f7f7 fa30 	bl	8000a78 <__aeabi_d2f>
 8009618:	4602      	mov	r2, r0
 800961a:	e009      	b.n	8009630 <_ZN15Kalman_Filtresi3RunEv+0x490>
 800961c:	f3af 8000 	nop.w
 8009620:	b22d0e56 	.word	0xb22d0e56
 8009624:	3fefef9d 	.word	0x3fefef9d
 8009628:	d2f1a9fc 	.word	0xd2f1a9fc
 800962c:	3f60624d 	.word	0x3f60624d
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    //ANGLE CORRECTION
    float A_roll = (Qa*Qg + Qa*S22_roll + Qa*S23_roll + Qa*S32_roll + Qa*S33_roll + Qg*S11_roll + S11_roll*S22_roll - S12_roll*S21_roll + S11_roll*S23_roll - S13_roll*S21_roll + S11_roll*S32_roll - S12_roll*S31_roll + S11_roll*S33_roll - S13_roll*S31_roll);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8009642:	f7f6 ff41 	bl	80004c8 <__aeabi_dmul>
 8009646:	4602      	mov	r2, r0
 8009648:	460b      	mov	r3, r1
 800964a:	4690      	mov	r8, r2
 800964c:	4699      	mov	r9, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800965a:	4618      	mov	r0, r3
 800965c:	f7f6 fedc 	bl	8000418 <__aeabi_f2d>
 8009660:	4602      	mov	r2, r0
 8009662:	460b      	mov	r3, r1
 8009664:	4620      	mov	r0, r4
 8009666:	4629      	mov	r1, r5
 8009668:	f7f6 ff2e 	bl	80004c8 <__aeabi_dmul>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	4640      	mov	r0, r8
 8009672:	4649      	mov	r1, r9
 8009674:	f7f6 fd72 	bl	800015c <__adddf3>
 8009678:	4602      	mov	r2, r0
 800967a:	460b      	mov	r3, r1
 800967c:	4690      	mov	r8, r2
 800967e:	4699      	mov	r9, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800968c:	4618      	mov	r0, r3
 800968e:	f7f6 fec3 	bl	8000418 <__aeabi_f2d>
 8009692:	4602      	mov	r2, r0
 8009694:	460b      	mov	r3, r1
 8009696:	4620      	mov	r0, r4
 8009698:	4629      	mov	r1, r5
 800969a:	f7f6 ff15 	bl	80004c8 <__aeabi_dmul>
 800969e:	4602      	mov	r2, r0
 80096a0:	460b      	mov	r3, r1
 80096a2:	4640      	mov	r0, r8
 80096a4:	4649      	mov	r1, r9
 80096a6:	f7f6 fd59 	bl	800015c <__adddf3>
 80096aa:	4602      	mov	r2, r0
 80096ac:	460b      	mov	r3, r1
 80096ae:	4690      	mov	r8, r2
 80096b0:	4699      	mov	r9, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096be:	4618      	mov	r0, r3
 80096c0:	f7f6 feaa 	bl	8000418 <__aeabi_f2d>
 80096c4:	4602      	mov	r2, r0
 80096c6:	460b      	mov	r3, r1
 80096c8:	4620      	mov	r0, r4
 80096ca:	4629      	mov	r1, r5
 80096cc:	f7f6 fefc 	bl	80004c8 <__aeabi_dmul>
 80096d0:	4602      	mov	r2, r0
 80096d2:	460b      	mov	r3, r1
 80096d4:	4640      	mov	r0, r8
 80096d6:	4649      	mov	r1, r9
 80096d8:	f7f6 fd40 	bl	800015c <__adddf3>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	4690      	mov	r8, r2
 80096e2:	4699      	mov	r9, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7f6 fe91 	bl	8000418 <__aeabi_f2d>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	4620      	mov	r0, r4
 80096fc:	4629      	mov	r1, r5
 80096fe:	f7f6 fee3 	bl	80004c8 <__aeabi_dmul>
 8009702:	4602      	mov	r2, r0
 8009704:	460b      	mov	r3, r1
 8009706:	4640      	mov	r0, r8
 8009708:	4649      	mov	r1, r9
 800970a:	f7f6 fd27 	bl	800015c <__adddf3>
 800970e:	4602      	mov	r2, r0
 8009710:	460b      	mov	r3, r1
 8009712:	4690      	mov	r8, r2
 8009714:	4699      	mov	r9, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009720:	4618      	mov	r0, r3
 8009722:	f7f6 fe79 	bl	8000418 <__aeabi_f2d>
 8009726:	4602      	mov	r2, r0
 8009728:	460b      	mov	r3, r1
 800972a:	4620      	mov	r0, r4
 800972c:	4629      	mov	r1, r5
 800972e:	f7f6 fecb 	bl	80004c8 <__aeabi_dmul>
 8009732:	4602      	mov	r2, r0
 8009734:	460b      	mov	r3, r1
 8009736:	4640      	mov	r0, r8
 8009738:	4649      	mov	r1, r9
 800973a:	f7f6 fd0f 	bl	800015c <__adddf3>
 800973e:	4602      	mov	r2, r0
 8009740:	460b      	mov	r3, r1
 8009742:	4614      	mov	r4, r2
 8009744:	461d      	mov	r5, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009750:	4619      	mov	r1, r3
 8009752:	4610      	mov	r0, r2
 8009754:	f7f7 faee 	bl	8000d34 <__aeabi_fmul>
 8009758:	4603      	mov	r3, r0
 800975a:	4618      	mov	r0, r3
 800975c:	f7f6 fe5c 	bl	8000418 <__aeabi_f2d>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4620      	mov	r0, r4
 8009766:	4629      	mov	r1, r5
 8009768:	f7f6 fcf8 	bl	800015c <__adddf3>
 800976c:	4602      	mov	r2, r0
 800976e:	460b      	mov	r3, r1
 8009770:	4614      	mov	r4, r2
 8009772:	461d      	mov	r5, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800977e:	4619      	mov	r1, r3
 8009780:	4610      	mov	r0, r2
 8009782:	f7f7 fad7 	bl	8000d34 <__aeabi_fmul>
 8009786:	4603      	mov	r3, r0
 8009788:	4618      	mov	r0, r3
 800978a:	f7f6 fe45 	bl	8000418 <__aeabi_f2d>
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
 8009792:	4620      	mov	r0, r4
 8009794:	4629      	mov	r1, r5
 8009796:	f7f6 fcdf 	bl	8000158 <__aeabi_dsub>
 800979a:	4602      	mov	r2, r0
 800979c:	460b      	mov	r3, r1
 800979e:	4614      	mov	r4, r2
 80097a0:	461d      	mov	r5, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097ac:	4619      	mov	r1, r3
 80097ae:	4610      	mov	r0, r2
 80097b0:	f7f7 fac0 	bl	8000d34 <__aeabi_fmul>
 80097b4:	4603      	mov	r3, r0
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7f6 fe2e 	bl	8000418 <__aeabi_f2d>
 80097bc:	4602      	mov	r2, r0
 80097be:	460b      	mov	r3, r1
 80097c0:	4620      	mov	r0, r4
 80097c2:	4629      	mov	r1, r5
 80097c4:	f7f6 fcca 	bl	800015c <__adddf3>
 80097c8:	4602      	mov	r2, r0
 80097ca:	460b      	mov	r3, r1
 80097cc:	4614      	mov	r4, r2
 80097ce:	461d      	mov	r5, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097dc:	4619      	mov	r1, r3
 80097de:	4610      	mov	r0, r2
 80097e0:	f7f7 faa8 	bl	8000d34 <__aeabi_fmul>
 80097e4:	4603      	mov	r3, r0
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7f6 fe16 	bl	8000418 <__aeabi_f2d>
 80097ec:	4602      	mov	r2, r0
 80097ee:	460b      	mov	r3, r1
 80097f0:	4620      	mov	r0, r4
 80097f2:	4629      	mov	r1, r5
 80097f4:	f7f6 fcb0 	bl	8000158 <__aeabi_dsub>
 80097f8:	4602      	mov	r2, r0
 80097fa:	460b      	mov	r3, r1
 80097fc:	4614      	mov	r4, r2
 80097fe:	461d      	mov	r5, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800980a:	4619      	mov	r1, r3
 800980c:	4610      	mov	r0, r2
 800980e:	f7f7 fa91 	bl	8000d34 <__aeabi_fmul>
 8009812:	4603      	mov	r3, r0
 8009814:	4618      	mov	r0, r3
 8009816:	f7f6 fdff 	bl	8000418 <__aeabi_f2d>
 800981a:	4602      	mov	r2, r0
 800981c:	460b      	mov	r3, r1
 800981e:	4620      	mov	r0, r4
 8009820:	4629      	mov	r1, r5
 8009822:	f7f6 fc9b 	bl	800015c <__adddf3>
 8009826:	4602      	mov	r2, r0
 8009828:	460b      	mov	r3, r1
 800982a:	4614      	mov	r4, r2
 800982c:	461d      	mov	r5, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009838:	4619      	mov	r1, r3
 800983a:	4610      	mov	r0, r2
 800983c:	f7f7 fa7a 	bl	8000d34 <__aeabi_fmul>
 8009840:	4603      	mov	r3, r0
 8009842:	4618      	mov	r0, r3
 8009844:	f7f6 fde8 	bl	8000418 <__aeabi_f2d>
 8009848:	4602      	mov	r2, r0
 800984a:	460b      	mov	r3, r1
 800984c:	4620      	mov	r0, r4
 800984e:	4629      	mov	r1, r5
 8009850:	f7f6 fc82 	bl	8000158 <__aeabi_dsub>
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	4614      	mov	r4, r2
 800985a:	461d      	mov	r5, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009866:	4619      	mov	r1, r3
 8009868:	4610      	mov	r0, r2
 800986a:	f7f7 fa63 	bl	8000d34 <__aeabi_fmul>
 800986e:	4603      	mov	r3, r0
 8009870:	4618      	mov	r0, r3
 8009872:	f7f6 fdd1 	bl	8000418 <__aeabi_f2d>
 8009876:	4602      	mov	r2, r0
 8009878:	460b      	mov	r3, r1
 800987a:	4620      	mov	r0, r4
 800987c:	4629      	mov	r1, r5
 800987e:	f7f6 fc6d 	bl	800015c <__adddf3>
 8009882:	4602      	mov	r2, r0
 8009884:	460b      	mov	r3, r1
 8009886:	4614      	mov	r4, r2
 8009888:	461d      	mov	r5, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009896:	4619      	mov	r1, r3
 8009898:	4610      	mov	r0, r2
 800989a:	f7f7 fa4b 	bl	8000d34 <__aeabi_fmul>
 800989e:	4603      	mov	r3, r0
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7f6 fdb9 	bl	8000418 <__aeabi_f2d>
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	4620      	mov	r0, r4
 80098ac:	4629      	mov	r1, r5
 80098ae:	f7f6 fc53 	bl	8000158 <__aeabi_dsub>
 80098b2:	4602      	mov	r2, r0
 80098b4:	460b      	mov	r3, r1
 80098b6:	4610      	mov	r0, r2
 80098b8:	4619      	mov	r1, r3
 80098ba:	f7f7 f8dd 	bl	8000a78 <__aeabi_d2f>
 80098be:	4603      	mov	r3, r0
 80098c0:	65bb      	str	r3, [r7, #88]	; 0x58
    float Kt11_roll = 1 - (Qa*(Qg + S22_roll + S23_roll + S32_roll + S33_roll))/A_roll;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	e9d3 8932 	ldrd	r8, r9, [r3, #200]	; 0xc8
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7f6 fd9f 	bl	8000418 <__aeabi_f2d>
 80098da:	4602      	mov	r2, r0
 80098dc:	460b      	mov	r3, r1
 80098de:	4640      	mov	r0, r8
 80098e0:	4649      	mov	r1, r9
 80098e2:	f7f6 fc3b 	bl	800015c <__adddf3>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4690      	mov	r8, r2
 80098ec:	4699      	mov	r9, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7f6 fd8f 	bl	8000418 <__aeabi_f2d>
 80098fa:	4602      	mov	r2, r0
 80098fc:	460b      	mov	r3, r1
 80098fe:	4640      	mov	r0, r8
 8009900:	4649      	mov	r1, r9
 8009902:	f7f6 fc2b 	bl	800015c <__adddf3>
 8009906:	4602      	mov	r2, r0
 8009908:	460b      	mov	r3, r1
 800990a:	4690      	mov	r8, r2
 800990c:	4699      	mov	r9, r3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009914:	4618      	mov	r0, r3
 8009916:	f7f6 fd7f 	bl	8000418 <__aeabi_f2d>
 800991a:	4602      	mov	r2, r0
 800991c:	460b      	mov	r3, r1
 800991e:	4640      	mov	r0, r8
 8009920:	4649      	mov	r1, r9
 8009922:	f7f6 fc1b 	bl	800015c <__adddf3>
 8009926:	4602      	mov	r2, r0
 8009928:	460b      	mov	r3, r1
 800992a:	4690      	mov	r8, r2
 800992c:	4699      	mov	r9, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009934:	4618      	mov	r0, r3
 8009936:	f7f6 fd6f 	bl	8000418 <__aeabi_f2d>
 800993a:	4602      	mov	r2, r0
 800993c:	460b      	mov	r3, r1
 800993e:	4640      	mov	r0, r8
 8009940:	4649      	mov	r1, r9
 8009942:	f7f6 fc0b 	bl	800015c <__adddf3>
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	4620      	mov	r0, r4
 800994c:	4629      	mov	r1, r5
 800994e:	f7f6 fdbb 	bl	80004c8 <__aeabi_dmul>
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	4614      	mov	r4, r2
 8009958:	461d      	mov	r5, r3
 800995a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800995c:	f7f6 fd5c 	bl	8000418 <__aeabi_f2d>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4620      	mov	r0, r4
 8009966:	4629      	mov	r1, r5
 8009968:	f7f6 fed8 	bl	800071c <__aeabi_ddiv>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	f04f 0000 	mov.w	r0, #0
 8009974:	49c8      	ldr	r1, [pc, #800]	; (8009c98 <_ZN15Kalman_Filtresi3RunEv+0xaf8>)
 8009976:	f7f6 fbef 	bl	8000158 <__aeabi_dsub>
 800997a:	4602      	mov	r2, r0
 800997c:	460b      	mov	r3, r1
 800997e:	4610      	mov	r0, r2
 8009980:	4619      	mov	r1, r3
 8009982:	f7f7 f879 	bl	8000a78 <__aeabi_d2f>
 8009986:	4603      	mov	r3, r0
 8009988:	657b      	str	r3, [r7, #84]	; 0x54
    float Kt12_roll = (Qa*(S12_roll + S13_roll))/A_roll;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800999a:	4619      	mov	r1, r3
 800999c:	4610      	mov	r0, r2
 800999e:	f7f7 f8c1 	bl	8000b24 <__addsf3>
 80099a2:	4603      	mov	r3, r0
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7f6 fd37 	bl	8000418 <__aeabi_f2d>
 80099aa:	4602      	mov	r2, r0
 80099ac:	460b      	mov	r3, r1
 80099ae:	4620      	mov	r0, r4
 80099b0:	4629      	mov	r1, r5
 80099b2:	f7f6 fd89 	bl	80004c8 <__aeabi_dmul>
 80099b6:	4602      	mov	r2, r0
 80099b8:	460b      	mov	r3, r1
 80099ba:	4614      	mov	r4, r2
 80099bc:	461d      	mov	r5, r3
 80099be:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80099c0:	f7f6 fd2a 	bl	8000418 <__aeabi_f2d>
 80099c4:	4602      	mov	r2, r0
 80099c6:	460b      	mov	r3, r1
 80099c8:	4620      	mov	r0, r4
 80099ca:	4629      	mov	r1, r5
 80099cc:	f7f6 fea6 	bl	800071c <__aeabi_ddiv>
 80099d0:	4602      	mov	r2, r0
 80099d2:	460b      	mov	r3, r1
 80099d4:	4610      	mov	r0, r2
 80099d6:	4619      	mov	r1, r3
 80099d8:	f7f7 f84e 	bl	8000a78 <__aeabi_d2f>
 80099dc:	4603      	mov	r3, r0
 80099de:	653b      	str	r3, [r7, #80]	; 0x50
    float Kt21_roll = (Qg*S21_roll + S21_roll*S32_roll - S22_roll*S31_roll + S21_roll*S33_roll - S23_roll*S31_roll)/A_roll;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7f6 fd13 	bl	8000418 <__aeabi_f2d>
 80099f2:	4602      	mov	r2, r0
 80099f4:	460b      	mov	r3, r1
 80099f6:	4620      	mov	r0, r4
 80099f8:	4629      	mov	r1, r5
 80099fa:	f7f6 fd65 	bl	80004c8 <__aeabi_dmul>
 80099fe:	4602      	mov	r2, r0
 8009a00:	460b      	mov	r3, r1
 8009a02:	4614      	mov	r4, r2
 8009a04:	461d      	mov	r5, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a12:	4619      	mov	r1, r3
 8009a14:	4610      	mov	r0, r2
 8009a16:	f7f7 f98d 	bl	8000d34 <__aeabi_fmul>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7f6 fcfb 	bl	8000418 <__aeabi_f2d>
 8009a22:	4602      	mov	r2, r0
 8009a24:	460b      	mov	r3, r1
 8009a26:	4620      	mov	r0, r4
 8009a28:	4629      	mov	r1, r5
 8009a2a:	f7f6 fb97 	bl	800015c <__adddf3>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	460b      	mov	r3, r1
 8009a32:	4614      	mov	r4, r2
 8009a34:	461d      	mov	r5, r3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a42:	4619      	mov	r1, r3
 8009a44:	4610      	mov	r0, r2
 8009a46:	f7f7 f975 	bl	8000d34 <__aeabi_fmul>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7f6 fce3 	bl	8000418 <__aeabi_f2d>
 8009a52:	4602      	mov	r2, r0
 8009a54:	460b      	mov	r3, r1
 8009a56:	4620      	mov	r0, r4
 8009a58:	4629      	mov	r1, r5
 8009a5a:	f7f6 fb7d 	bl	8000158 <__aeabi_dsub>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	460b      	mov	r3, r1
 8009a62:	4614      	mov	r4, r2
 8009a64:	461d      	mov	r5, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a72:	4619      	mov	r1, r3
 8009a74:	4610      	mov	r0, r2
 8009a76:	f7f7 f95d 	bl	8000d34 <__aeabi_fmul>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7f6 fccb 	bl	8000418 <__aeabi_f2d>
 8009a82:	4602      	mov	r2, r0
 8009a84:	460b      	mov	r3, r1
 8009a86:	4620      	mov	r0, r4
 8009a88:	4629      	mov	r1, r5
 8009a8a:	f7f6 fb67 	bl	800015c <__adddf3>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	460b      	mov	r3, r1
 8009a92:	4614      	mov	r4, r2
 8009a94:	461d      	mov	r5, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	f7f7 f945 	bl	8000d34 <__aeabi_fmul>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7f6 fcb3 	bl	8000418 <__aeabi_f2d>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	4629      	mov	r1, r5
 8009aba:	f7f6 fb4d 	bl	8000158 <__aeabi_dsub>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	4614      	mov	r4, r2
 8009ac4:	461d      	mov	r5, r3
 8009ac6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009ac8:	f7f6 fca6 	bl	8000418 <__aeabi_f2d>
 8009acc:	4602      	mov	r2, r0
 8009ace:	460b      	mov	r3, r1
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	4629      	mov	r1, r5
 8009ad4:	f7f6 fe22 	bl	800071c <__aeabi_ddiv>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	460b      	mov	r3, r1
 8009adc:	4610      	mov	r0, r2
 8009ade:	4619      	mov	r1, r3
 8009ae0:	f7f6 ffca 	bl	8000a78 <__aeabi_d2f>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
    float Kt22_roll = (Qa*S22_roll + Qa*S23_roll + S11_roll*S22_roll - S12_roll*S21_roll + S11_roll*S23_roll - S13_roll*S21_roll)/A_roll;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7f6 fc8f 	bl	8000418 <__aeabi_f2d>
 8009afa:	4602      	mov	r2, r0
 8009afc:	460b      	mov	r3, r1
 8009afe:	4620      	mov	r0, r4
 8009b00:	4629      	mov	r1, r5
 8009b02:	f7f6 fce1 	bl	80004c8 <__aeabi_dmul>
 8009b06:	4602      	mov	r2, r0
 8009b08:	460b      	mov	r3, r1
 8009b0a:	4690      	mov	r8, r2
 8009b0c:	4699      	mov	r9, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7f6 fc7c 	bl	8000418 <__aeabi_f2d>
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	4620      	mov	r0, r4
 8009b26:	4629      	mov	r1, r5
 8009b28:	f7f6 fcce 	bl	80004c8 <__aeabi_dmul>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	4640      	mov	r0, r8
 8009b32:	4649      	mov	r1, r9
 8009b34:	f7f6 fb12 	bl	800015c <__adddf3>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	4614      	mov	r4, r2
 8009b3e:	461d      	mov	r5, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	f7f7 f8f1 	bl	8000d34 <__aeabi_fmul>
 8009b52:	4603      	mov	r3, r0
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7f6 fc5f 	bl	8000418 <__aeabi_f2d>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	4620      	mov	r0, r4
 8009b60:	4629      	mov	r1, r5
 8009b62:	f7f6 fafb 	bl	800015c <__adddf3>
 8009b66:	4602      	mov	r2, r0
 8009b68:	460b      	mov	r3, r1
 8009b6a:	4614      	mov	r4, r2
 8009b6c:	461d      	mov	r5, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b78:	4619      	mov	r1, r3
 8009b7a:	4610      	mov	r0, r2
 8009b7c:	f7f7 f8da 	bl	8000d34 <__aeabi_fmul>
 8009b80:	4603      	mov	r3, r0
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7f6 fc48 	bl	8000418 <__aeabi_f2d>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	4629      	mov	r1, r5
 8009b90:	f7f6 fae2 	bl	8000158 <__aeabi_dsub>
 8009b94:	4602      	mov	r2, r0
 8009b96:	460b      	mov	r3, r1
 8009b98:	4614      	mov	r4, r2
 8009b9a:	461d      	mov	r5, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	4610      	mov	r0, r2
 8009baa:	f7f7 f8c3 	bl	8000d34 <__aeabi_fmul>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7f6 fc31 	bl	8000418 <__aeabi_f2d>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	460b      	mov	r3, r1
 8009bba:	4620      	mov	r0, r4
 8009bbc:	4629      	mov	r1, r5
 8009bbe:	f7f6 facd 	bl	800015c <__adddf3>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	4614      	mov	r4, r2
 8009bc8:	461d      	mov	r5, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4610      	mov	r0, r2
 8009bda:	f7f7 f8ab 	bl	8000d34 <__aeabi_fmul>
 8009bde:	4603      	mov	r3, r0
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7f6 fc19 	bl	8000418 <__aeabi_f2d>
 8009be6:	4602      	mov	r2, r0
 8009be8:	460b      	mov	r3, r1
 8009bea:	4620      	mov	r0, r4
 8009bec:	4629      	mov	r1, r5
 8009bee:	f7f6 fab3 	bl	8000158 <__aeabi_dsub>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	4614      	mov	r4, r2
 8009bf8:	461d      	mov	r5, r3
 8009bfa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009bfc:	f7f6 fc0c 	bl	8000418 <__aeabi_f2d>
 8009c00:	4602      	mov	r2, r0
 8009c02:	460b      	mov	r3, r1
 8009c04:	4620      	mov	r0, r4
 8009c06:	4629      	mov	r1, r5
 8009c08:	f7f6 fd88 	bl	800071c <__aeabi_ddiv>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	460b      	mov	r3, r1
 8009c10:	4610      	mov	r0, r2
 8009c12:	4619      	mov	r1, r3
 8009c14:	f7f6 ff30 	bl	8000a78 <__aeabi_d2f>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	64bb      	str	r3, [r7, #72]	; 0x48
    float Kt31_roll = (Qg*S31_roll - S21_roll*S32_roll + S22_roll*S31_roll - S21_roll*S33_roll + S23_roll*S31_roll)/A_roll;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7f6 fbf5 	bl	8000418 <__aeabi_f2d>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	460b      	mov	r3, r1
 8009c32:	4620      	mov	r0, r4
 8009c34:	4629      	mov	r1, r5
 8009c36:	f7f6 fc47 	bl	80004c8 <__aeabi_dmul>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	4614      	mov	r4, r2
 8009c40:	461d      	mov	r5, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c4e:	4619      	mov	r1, r3
 8009c50:	4610      	mov	r0, r2
 8009c52:	f7f7 f86f 	bl	8000d34 <__aeabi_fmul>
 8009c56:	4603      	mov	r3, r0
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7f6 fbdd 	bl	8000418 <__aeabi_f2d>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	460b      	mov	r3, r1
 8009c62:	4620      	mov	r0, r4
 8009c64:	4629      	mov	r1, r5
 8009c66:	f7f6 fa77 	bl	8000158 <__aeabi_dsub>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	4614      	mov	r4, r2
 8009c70:	461d      	mov	r5, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c7e:	4619      	mov	r1, r3
 8009c80:	4610      	mov	r0, r2
 8009c82:	f7f7 f857 	bl	8000d34 <__aeabi_fmul>
 8009c86:	4603      	mov	r3, r0
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7f6 fbc5 	bl	8000418 <__aeabi_f2d>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	460b      	mov	r3, r1
 8009c92:	4620      	mov	r0, r4
 8009c94:	4629      	mov	r1, r5
 8009c96:	e001      	b.n	8009c9c <_ZN15Kalman_Filtresi3RunEv+0xafc>
 8009c98:	3ff00000 	.word	0x3ff00000
 8009c9c:	f7f6 fa5e 	bl	800015c <__adddf3>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	4614      	mov	r4, r2
 8009ca6:	461d      	mov	r5, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	4610      	mov	r0, r2
 8009cb8:	f7f7 f83c 	bl	8000d34 <__aeabi_fmul>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7f6 fbaa 	bl	8000418 <__aeabi_f2d>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4620      	mov	r0, r4
 8009cca:	4629      	mov	r1, r5
 8009ccc:	f7f6 fa44 	bl	8000158 <__aeabi_dsub>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	4614      	mov	r4, r2
 8009cd6:	461d      	mov	r5, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	4610      	mov	r0, r2
 8009ce8:	f7f7 f824 	bl	8000d34 <__aeabi_fmul>
 8009cec:	4603      	mov	r3, r0
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7f6 fb92 	bl	8000418 <__aeabi_f2d>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	f7f6 fa2e 	bl	800015c <__adddf3>
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	4614      	mov	r4, r2
 8009d06:	461d      	mov	r5, r3
 8009d08:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009d0a:	f7f6 fb85 	bl	8000418 <__aeabi_f2d>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	460b      	mov	r3, r1
 8009d12:	4620      	mov	r0, r4
 8009d14:	4629      	mov	r1, r5
 8009d16:	f7f6 fd01 	bl	800071c <__aeabi_ddiv>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	4610      	mov	r0, r2
 8009d20:	4619      	mov	r1, r3
 8009d22:	f7f6 fea9 	bl	8000a78 <__aeabi_d2f>
 8009d26:	4603      	mov	r3, r0
 8009d28:	647b      	str	r3, [r7, #68]	; 0x44
    float Kt32_roll = (Qa*S32_roll + Qa*S33_roll + S11_roll*S32_roll - S12_roll*S31_roll + S11_roll*S33_roll - S13_roll*S31_roll)/A_roll;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7f6 fb6e 	bl	8000418 <__aeabi_f2d>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4620      	mov	r0, r4
 8009d42:	4629      	mov	r1, r5
 8009d44:	f7f6 fbc0 	bl	80004c8 <__aeabi_dmul>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	4690      	mov	r8, r2
 8009d4e:	4699      	mov	r9, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7f6 fb5b 	bl	8000418 <__aeabi_f2d>
 8009d62:	4602      	mov	r2, r0
 8009d64:	460b      	mov	r3, r1
 8009d66:	4620      	mov	r0, r4
 8009d68:	4629      	mov	r1, r5
 8009d6a:	f7f6 fbad 	bl	80004c8 <__aeabi_dmul>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	4640      	mov	r0, r8
 8009d74:	4649      	mov	r1, r9
 8009d76:	f7f6 f9f1 	bl	800015c <__adddf3>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4614      	mov	r4, r2
 8009d80:	461d      	mov	r5, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	4610      	mov	r0, r2
 8009d90:	f7f6 ffd0 	bl	8000d34 <__aeabi_fmul>
 8009d94:	4603      	mov	r3, r0
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7f6 fb3e 	bl	8000418 <__aeabi_f2d>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	4620      	mov	r0, r4
 8009da2:	4629      	mov	r1, r5
 8009da4:	f7f6 f9da 	bl	800015c <__adddf3>
 8009da8:	4602      	mov	r2, r0
 8009daa:	460b      	mov	r3, r1
 8009dac:	4614      	mov	r4, r2
 8009dae:	461d      	mov	r5, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dba:	4619      	mov	r1, r3
 8009dbc:	4610      	mov	r0, r2
 8009dbe:	f7f6 ffb9 	bl	8000d34 <__aeabi_fmul>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7f6 fb27 	bl	8000418 <__aeabi_f2d>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	4620      	mov	r0, r4
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	f7f6 f9c1 	bl	8000158 <__aeabi_dsub>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	4614      	mov	r4, r2
 8009ddc:	461d      	mov	r5, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009de8:	4619      	mov	r1, r3
 8009dea:	4610      	mov	r0, r2
 8009dec:	f7f6 ffa2 	bl	8000d34 <__aeabi_fmul>
 8009df0:	4603      	mov	r3, r0
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7f6 fb10 	bl	8000418 <__aeabi_f2d>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	4629      	mov	r1, r5
 8009e00:	f7f6 f9ac 	bl	800015c <__adddf3>
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	4614      	mov	r4, r2
 8009e0a:	461d      	mov	r5, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e18:	4619      	mov	r1, r3
 8009e1a:	4610      	mov	r0, r2
 8009e1c:	f7f6 ff8a 	bl	8000d34 <__aeabi_fmul>
 8009e20:	4603      	mov	r3, r0
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7f6 faf8 	bl	8000418 <__aeabi_f2d>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	4629      	mov	r1, r5
 8009e30:	f7f6 f992 	bl	8000158 <__aeabi_dsub>
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	4614      	mov	r4, r2
 8009e3a:	461d      	mov	r5, r3
 8009e3c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009e3e:	f7f6 faeb 	bl	8000418 <__aeabi_f2d>
 8009e42:	4602      	mov	r2, r0
 8009e44:	460b      	mov	r3, r1
 8009e46:	4620      	mov	r0, r4
 8009e48:	4629      	mov	r1, r5
 8009e4a:	f7f6 fc67 	bl	800071c <__aeabi_ddiv>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	4610      	mov	r0, r2
 8009e54:	4619      	mov	r1, r3
 8009e56:	f7f6 fe0f 	bl	8000a78 <__aeabi_d2f>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	643b      	str	r3, [r7, #64]	; 0x40

    roll_ekf = (roll_ekf) + Kt11_roll*((roll_acc) - (roll_ekf)) - Kt12_roll*((roll_bias) - (gyroX) + (roll_rate));
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8009e70:	4619      	mov	r1, r3
 8009e72:	4610      	mov	r0, r2
 8009e74:	f7f6 fe54 	bl	8000b20 <__aeabi_fsub>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7f6 ff59 	bl	8000d34 <__aeabi_fmul>
 8009e82:	4603      	mov	r3, r0
 8009e84:	4619      	mov	r1, r3
 8009e86:	4620      	mov	r0, r4
 8009e88:	f7f6 fe4c 	bl	8000b24 <__addsf3>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7f6 fac2 	bl	8000418 <__aeabi_f2d>
 8009e94:	4604      	mov	r4, r0
 8009e96:	460d      	mov	r5, r1
 8009e98:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009e9a:	f7f6 fabd 	bl	8000418 <__aeabi_f2d>
 8009e9e:	4680      	mov	r8, r0
 8009ea0:	4689      	mov	r9, r1
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7f6 fe39 	bl	8000b20 <__aeabi_fsub>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7f6 fab1 	bl	8000418 <__aeabi_f2d>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8009ebc:	f7f6 f94e 	bl	800015c <__adddf3>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	4640      	mov	r0, r8
 8009ec6:	4649      	mov	r1, r9
 8009ec8:	f7f6 fafe 	bl	80004c8 <__aeabi_dmul>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	460b      	mov	r3, r1
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	4629      	mov	r1, r5
 8009ed4:	f7f6 f940 	bl	8000158 <__aeabi_dsub>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	4610      	mov	r0, r2
 8009ede:	4619      	mov	r1, r3
 8009ee0:	f7f6 fdca 	bl	8000a78 <__aeabi_d2f>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


    roll_bias = (roll_bias) + Kt21_roll*((roll_acc) - (roll_ekf)) - Kt22_roll*((roll_bias) - (gyroX) + (roll_rate));
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8009efc:	4619      	mov	r1, r3
 8009efe:	4610      	mov	r0, r2
 8009f00:	f7f6 fe0e 	bl	8000b20 <__aeabi_fsub>
 8009f04:	4603      	mov	r3, r0
 8009f06:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7f6 ff13 	bl	8000d34 <__aeabi_fmul>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	4619      	mov	r1, r3
 8009f12:	4620      	mov	r0, r4
 8009f14:	f7f6 fe06 	bl	8000b24 <__addsf3>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7f6 fa7c 	bl	8000418 <__aeabi_f2d>
 8009f20:	4604      	mov	r4, r0
 8009f22:	460d      	mov	r5, r1
 8009f24:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009f26:	f7f6 fa77 	bl	8000418 <__aeabi_f2d>
 8009f2a:	4680      	mov	r8, r0
 8009f2c:	4689      	mov	r9, r1
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7f6 fdf3 	bl	8000b20 <__aeabi_fsub>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7f6 fa6b 	bl	8000418 <__aeabi_f2d>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8009f48:	f7f6 f908 	bl	800015c <__adddf3>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	460b      	mov	r3, r1
 8009f50:	4640      	mov	r0, r8
 8009f52:	4649      	mov	r1, r9
 8009f54:	f7f6 fab8 	bl	80004c8 <__aeabi_dmul>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	4629      	mov	r1, r5
 8009f60:	f7f6 f8fa 	bl	8000158 <__aeabi_dsub>
 8009f64:	4602      	mov	r2, r0
 8009f66:	460b      	mov	r3, r1
 8009f68:	4610      	mov	r0, r2
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	f7f6 fd84 	bl	8000a78 <__aeabi_d2f>
 8009f70:	4602      	mov	r2, r0
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	635a      	str	r2, [r3, #52]	; 0x34


    roll_rate = (roll_rate) + Kt31_roll*((roll_acc) - (roll_ekf)) - Kt32_roll*((roll_bias) - (gyroX) + (roll_rate));
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8009f88:	4619      	mov	r1, r3
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	f7f6 fdc8 	bl	8000b20 <__aeabi_fsub>
 8009f90:	4603      	mov	r3, r0
 8009f92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7f6 fecd 	bl	8000d34 <__aeabi_fmul>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7f6 fa3b 	bl	8000418 <__aeabi_f2d>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	4629      	mov	r1, r5
 8009faa:	f7f6 f8d7 	bl	800015c <__adddf3>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	4690      	mov	r8, r2
 8009fb4:	4699      	mov	r9, r3
 8009fb6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009fb8:	f7f6 fa2e 	bl	8000418 <__aeabi_f2d>
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	460d      	mov	r5, r1
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7f6 fdaa 	bl	8000b20 <__aeabi_fsub>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7f6 fa22 	bl	8000418 <__aeabi_f2d>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8009fda:	f7f6 f8bf 	bl	800015c <__adddf3>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	f7f6 fa6f 	bl	80004c8 <__aeabi_dmul>
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	4640      	mov	r0, r8
 8009ff0:	4649      	mov	r1, r9
 8009ff2:	f7f6 f8b1 	bl	8000158 <__aeabi_dsub>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	6879      	ldr	r1, [r7, #4]
 8009ffc:	e9c1 2306 	strd	r2, r3, [r1, #24]


    S11_roll = - S11_roll*(Kt11_roll - 1) - Kt12_roll*S21_roll - Kt12_roll*S31_roll;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a004:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a008:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a00c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a00e:	f7f6 fd87 	bl	8000b20 <__aeabi_fsub>
 800a012:	4603      	mov	r3, r0
 800a014:	4619      	mov	r1, r3
 800a016:	4620      	mov	r0, r4
 800a018:	f7f6 fe8c 	bl	8000d34 <__aeabi_fmul>
 800a01c:	4603      	mov	r3, r0
 800a01e:	461c      	mov	r4, r3
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a026:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a028:	4618      	mov	r0, r3
 800a02a:	f7f6 fe83 	bl	8000d34 <__aeabi_fmul>
 800a02e:	4603      	mov	r3, r0
 800a030:	4619      	mov	r1, r3
 800a032:	4620      	mov	r0, r4
 800a034:	f7f6 fd74 	bl	8000b20 <__aeabi_fsub>
 800a038:	4603      	mov	r3, r0
 800a03a:	461c      	mov	r4, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a042:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a044:	4618      	mov	r0, r3
 800a046:	f7f6 fe75 	bl	8000d34 <__aeabi_fmul>
 800a04a:	4603      	mov	r3, r0
 800a04c:	4619      	mov	r1, r3
 800a04e:	4620      	mov	r0, r4
 800a050:	f7f6 fd66 	bl	8000b20 <__aeabi_fsub>
 800a054:	4603      	mov	r3, r0
 800a056:	461a      	mov	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	679a      	str	r2, [r3, #120]	; 0x78


    S12_roll = - S12_roll*(Kt11_roll - 1) - Kt12_roll*S22_roll - Kt12_roll*S32_roll;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a060:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a064:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a068:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a06a:	f7f6 fd59 	bl	8000b20 <__aeabi_fsub>
 800a06e:	4603      	mov	r3, r0
 800a070:	4619      	mov	r1, r3
 800a072:	4620      	mov	r0, r4
 800a074:	f7f6 fe5e 	bl	8000d34 <__aeabi_fmul>
 800a078:	4603      	mov	r3, r0
 800a07a:	461c      	mov	r4, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a082:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a084:	4618      	mov	r0, r3
 800a086:	f7f6 fe55 	bl	8000d34 <__aeabi_fmul>
 800a08a:	4603      	mov	r3, r0
 800a08c:	4619      	mov	r1, r3
 800a08e:	4620      	mov	r0, r4
 800a090:	f7f6 fd46 	bl	8000b20 <__aeabi_fsub>
 800a094:	4603      	mov	r3, r0
 800a096:	461c      	mov	r4, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a09e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7f6 fe47 	bl	8000d34 <__aeabi_fmul>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f7f6 fd38 	bl	8000b20 <__aeabi_fsub>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	67da      	str	r2, [r3, #124]	; 0x7c


    S13_roll = - S13_roll*(Kt11_roll - 1) - Kt12_roll*S23_roll - Kt12_roll*S33_roll;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0be:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a0c2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a0c6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a0c8:	f7f6 fd2a 	bl	8000b20 <__aeabi_fsub>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	f7f6 fe2f 	bl	8000d34 <__aeabi_fmul>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	461c      	mov	r4, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7f6 fe26 	bl	8000d34 <__aeabi_fmul>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	f7f6 fd17 	bl	8000b20 <__aeabi_fsub>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	461c      	mov	r4, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a0fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7f6 fe18 	bl	8000d34 <__aeabi_fmul>
 800a104:	4603      	mov	r3, r0
 800a106:	4619      	mov	r1, r3
 800a108:	4620      	mov	r0, r4
 800a10a:	f7f6 fd09 	bl	8000b20 <__aeabi_fsub>
 800a10e:	4603      	mov	r3, r0
 800a110:	461a      	mov	r2, r3
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


    S21_roll = - S21_roll*(Kt22_roll - 1) - Kt21_roll*S11_roll - Kt22_roll*S31_roll;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a11e:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a122:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a126:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a128:	f7f6 fcfa 	bl	8000b20 <__aeabi_fsub>
 800a12c:	4603      	mov	r3, r0
 800a12e:	4619      	mov	r1, r3
 800a130:	4620      	mov	r0, r4
 800a132:	f7f6 fdff 	bl	8000d34 <__aeabi_fmul>
 800a136:	4603      	mov	r3, r0
 800a138:	461c      	mov	r4, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a13e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a140:	4618      	mov	r0, r3
 800a142:	f7f6 fdf7 	bl	8000d34 <__aeabi_fmul>
 800a146:	4603      	mov	r3, r0
 800a148:	4619      	mov	r1, r3
 800a14a:	4620      	mov	r0, r4
 800a14c:	f7f6 fce8 	bl	8000b20 <__aeabi_fsub>
 800a150:	4603      	mov	r3, r0
 800a152:	461c      	mov	r4, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a15a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7f6 fde9 	bl	8000d34 <__aeabi_fmul>
 800a162:	4603      	mov	r3, r0
 800a164:	4619      	mov	r1, r3
 800a166:	4620      	mov	r0, r4
 800a168:	f7f6 fcda 	bl	8000b20 <__aeabi_fsub>
 800a16c:	4603      	mov	r3, r0
 800a16e:	461a      	mov	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80


    S22_roll = - S22_roll*(Kt22_roll - 1) - Kt21_roll*S12_roll - Kt22_roll*S32_roll;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a17c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a180:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a184:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a186:	f7f6 fccb 	bl	8000b20 <__aeabi_fsub>
 800a18a:	4603      	mov	r3, r0
 800a18c:	4619      	mov	r1, r3
 800a18e:	4620      	mov	r0, r4
 800a190:	f7f6 fdd0 	bl	8000d34 <__aeabi_fmul>
 800a194:	4603      	mov	r3, r0
 800a196:	461c      	mov	r4, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a19c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7f6 fdc8 	bl	8000d34 <__aeabi_fmul>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	f7f6 fcb9 	bl	8000b20 <__aeabi_fsub>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	461c      	mov	r4, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7f6 fdba 	bl	8000d34 <__aeabi_fmul>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f7f6 fcab 	bl	8000b20 <__aeabi_fsub>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


    S23_roll = - S23_roll*(Kt22_roll - 1) - Kt21_roll*S13_roll - Kt22_roll*S33_roll;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1da:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a1de:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a1e2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a1e4:	f7f6 fc9c 	bl	8000b20 <__aeabi_fsub>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f7f6 fda1 	bl	8000d34 <__aeabi_fmul>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	461c      	mov	r4, r3
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7f6 fd98 	bl	8000d34 <__aeabi_fmul>
 800a204:	4603      	mov	r3, r0
 800a206:	4619      	mov	r1, r3
 800a208:	4620      	mov	r0, r4
 800a20a:	f7f6 fc89 	bl	8000b20 <__aeabi_fsub>
 800a20e:	4603      	mov	r3, r0
 800a210:	461c      	mov	r4, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a218:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7f6 fd8a 	bl	8000d34 <__aeabi_fmul>
 800a220:	4603      	mov	r3, r0
 800a222:	4619      	mov	r1, r3
 800a224:	4620      	mov	r0, r4
 800a226:	f7f6 fc7b 	bl	8000b20 <__aeabi_fsub>
 800a22a:	4603      	mov	r3, r0
 800a22c:	461a      	mov	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c


    S31_roll = - S31_roll*(Kt32_roll - 1) - Kt31_roll*S11_roll - Kt32_roll*S21_roll;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a23a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a23e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a242:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a244:	f7f6 fc6c 	bl	8000b20 <__aeabi_fsub>
 800a248:	4603      	mov	r3, r0
 800a24a:	4619      	mov	r1, r3
 800a24c:	4620      	mov	r0, r4
 800a24e:	f7f6 fd71 	bl	8000d34 <__aeabi_fmul>
 800a252:	4603      	mov	r3, r0
 800a254:	461c      	mov	r4, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a25a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7f6 fd69 	bl	8000d34 <__aeabi_fmul>
 800a262:	4603      	mov	r3, r0
 800a264:	4619      	mov	r1, r3
 800a266:	4620      	mov	r0, r4
 800a268:	f7f6 fc5a 	bl	8000b20 <__aeabi_fsub>
 800a26c:	4603      	mov	r3, r0
 800a26e:	461c      	mov	r4, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a276:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a278:	4618      	mov	r0, r3
 800a27a:	f7f6 fd5b 	bl	8000d34 <__aeabi_fmul>
 800a27e:	4603      	mov	r3, r0
 800a280:	4619      	mov	r1, r3
 800a282:	4620      	mov	r0, r4
 800a284:	f7f6 fc4c 	bl	8000b20 <__aeabi_fsub>
 800a288:	4603      	mov	r3, r0
 800a28a:	461a      	mov	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90


    S32_roll = - S32_roll*(Kt32_roll - 1) - Kt31_roll*S12_roll - Kt32_roll*S22_roll;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a298:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a29c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a2a0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a2a2:	f7f6 fc3d 	bl	8000b20 <__aeabi_fsub>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f7f6 fd42 	bl	8000d34 <__aeabi_fmul>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	461c      	mov	r4, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7f6 fd3a 	bl	8000d34 <__aeabi_fmul>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	f7f6 fc2b 	bl	8000b20 <__aeabi_fsub>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	461c      	mov	r4, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7f6 fd2c 	bl	8000d34 <__aeabi_fmul>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	4619      	mov	r1, r3
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	f7f6 fc1d 	bl	8000b20 <__aeabi_fsub>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94


    S33_roll = - S33_roll*(Kt32_roll - 1) - Kt31_roll*S13_roll - Kt32_roll*S23_roll;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a2f6:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800a2fa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a2fe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a300:	f7f6 fc0e 	bl	8000b20 <__aeabi_fsub>
 800a304:	4603      	mov	r3, r0
 800a306:	4619      	mov	r1, r3
 800a308:	4620      	mov	r0, r4
 800a30a:	f7f6 fd13 	bl	8000d34 <__aeabi_fmul>
 800a30e:	4603      	mov	r3, r0
 800a310:	461c      	mov	r4, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a318:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7f6 fd0a 	bl	8000d34 <__aeabi_fmul>
 800a320:	4603      	mov	r3, r0
 800a322:	4619      	mov	r1, r3
 800a324:	4620      	mov	r0, r4
 800a326:	f7f6 fbfb 	bl	8000b20 <__aeabi_fsub>
 800a32a:	4603      	mov	r3, r0
 800a32c:	461c      	mov	r4, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a334:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a336:	4618      	mov	r0, r3
 800a338:	f7f6 fcfc 	bl	8000d34 <__aeabi_fmul>
 800a33c:	4603      	mov	r3, r0
 800a33e:	4619      	mov	r1, r3
 800a340:	4620      	mov	r0, r4
 800a342:	f7f6 fbed 	bl	8000b20 <__aeabi_fsub>
 800a346:	4603      	mov	r3, r0
 800a348:	461a      	mov	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    //============================

    //ANGLE PREDICTION
    pitch_ekf = (pitch_ekf) + st*(pitch_rate);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a356:	4618      	mov	r0, r3
 800a358:	f7f6 f85e 	bl	8000418 <__aeabi_f2d>
 800a35c:	4604      	mov	r4, r0
 800a35e:	460d      	mov	r5, r1
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a36c:	f7f6 f8ac 	bl	80004c8 <__aeabi_dmul>
 800a370:	4602      	mov	r2, r0
 800a372:	460b      	mov	r3, r1
 800a374:	4620      	mov	r0, r4
 800a376:	4629      	mov	r1, r5
 800a378:	f7f5 fef0 	bl	800015c <__adddf3>
 800a37c:	4602      	mov	r2, r0
 800a37e:	460b      	mov	r3, r1
 800a380:	4610      	mov	r0, r2
 800a382:	4619      	mov	r1, r3
 800a384:	f7f6 fb78 	bl	8000a78 <__aeabi_d2f>
 800a388:	4602      	mov	r2, r0
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

    S11_pitch = S11_pitch + sa + S31_pitch*st + (st*st*(S13_pitch + S33_pitch*st))/st;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a394:	4618      	mov	r0, r3
 800a396:	f7f6 f83f 	bl	8000418 <__aeabi_f2d>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800a3a0:	f7f5 fedc 	bl	800015c <__adddf3>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	4614      	mov	r4, r2
 800a3aa:	461d      	mov	r5, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7f6 f831 	bl	8000418 <__aeabi_f2d>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800a3bc:	f7f6 f884 	bl	80004c8 <__aeabi_dmul>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	f7f5 fec8 	bl	800015c <__adddf3>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	4690      	mov	r8, r2
 800a3d2:	4699      	mov	r9, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800a3e0:	f7f6 f872 	bl	80004c8 <__aeabi_dmul>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	4692      	mov	sl, r2
 800a3ea:	469b      	mov	fp, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7f6 f811 	bl	8000418 <__aeabi_f2d>
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	460d      	mov	r5, r1
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7f6 f80a 	bl	8000418 <__aeabi_f2d>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800a40a:	f7f6 f85d 	bl	80004c8 <__aeabi_dmul>
 800a40e:	4602      	mov	r2, r0
 800a410:	460b      	mov	r3, r1
 800a412:	4620      	mov	r0, r4
 800a414:	4629      	mov	r1, r5
 800a416:	f7f5 fea1 	bl	800015c <__adddf3>
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	4650      	mov	r0, sl
 800a420:	4659      	mov	r1, fp
 800a422:	f7f6 f851 	bl	80004c8 <__aeabi_dmul>
 800a426:	4602      	mov	r2, r0
 800a428:	460b      	mov	r3, r1
 800a42a:	4610      	mov	r0, r2
 800a42c:	4619      	mov	r1, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800a434:	f7f6 f972 	bl	800071c <__aeabi_ddiv>
 800a438:	4602      	mov	r2, r0
 800a43a:	460b      	mov	r3, r1
 800a43c:	4640      	mov	r0, r8
 800a43e:	4649      	mov	r1, r9
 800a440:	f7f5 fe8c 	bl	800015c <__adddf3>
 800a444:	4602      	mov	r2, r0
 800a446:	460b      	mov	r3, r1
 800a448:	4610      	mov	r0, r2
 800a44a:	4619      	mov	r1, r3
 800a44c:	f7f6 fb14 	bl	8000a78 <__aeabi_d2f>
 800a450:	4602      	mov	r2, r0
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	63da      	str	r2, [r3, #60]	; 0x3c
    S12_pitch = S12_pitch + S32_pitch*st;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7f5 ffdc 	bl	8000418 <__aeabi_f2d>
 800a460:	4604      	mov	r4, r0
 800a462:	460d      	mov	r5, r1
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a468:	4618      	mov	r0, r3
 800a46a:	f7f5 ffd5 	bl	8000418 <__aeabi_f2d>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800a474:	f7f6 f828 	bl	80004c8 <__aeabi_dmul>
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	4620      	mov	r0, r4
 800a47e:	4629      	mov	r1, r5
 800a480:	f7f5 fe6c 	bl	800015c <__adddf3>
 800a484:	4602      	mov	r2, r0
 800a486:	460b      	mov	r3, r1
 800a488:	4610      	mov	r0, r2
 800a48a:	4619      	mov	r1, r3
 800a48c:	f7f6 faf4 	bl	8000a78 <__aeabi_d2f>
 800a490:	4602      	mov	r2, r0
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	641a      	str	r2, [r3, #64]	; 0x40
    S13_pitch = S13_pitch + S33_pitch*st;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7f5 ffbc 	bl	8000418 <__aeabi_f2d>
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	460d      	mov	r5, r1
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7f5 ffb5 	bl	8000418 <__aeabi_f2d>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800a4b4:	f7f6 f808 	bl	80004c8 <__aeabi_dmul>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	4620      	mov	r0, r4
 800a4be:	4629      	mov	r1, r5
 800a4c0:	f7f5 fe4c 	bl	800015c <__adddf3>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	4610      	mov	r0, r2
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	f7f6 fad4 	bl	8000a78 <__aeabi_d2f>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	64da      	str	r2, [r3, #76]	; 0x4c

    S21_pitch = S21_pitch + S23_pitch*(st);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7f5 ff9c 	bl	8000418 <__aeabi_f2d>
 800a4e0:	4604      	mov	r4, r0
 800a4e2:	460d      	mov	r5, r1
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7f5 ff95 	bl	8000418 <__aeabi_f2d>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800a4f4:	f7f5 ffe8 	bl	80004c8 <__aeabi_dmul>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	4629      	mov	r1, r5
 800a500:	f7f5 fe2c 	bl	800015c <__adddf3>
 800a504:	4602      	mov	r2, r0
 800a506:	460b      	mov	r3, r1
 800a508:	4610      	mov	r0, r2
 800a50a:	4619      	mov	r1, r3
 800a50c:	f7f6 fab4 	bl	8000a78 <__aeabi_d2f>
 800a510:	4602      	mov	r2, r0
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	645a      	str	r2, [r3, #68]	; 0x44
    S22_pitch = S22_pitch + sb;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7f5 ff7c 	bl	8000418 <__aeabi_f2d>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800a526:	f7f5 fe19 	bl	800015c <__adddf3>
 800a52a:	4602      	mov	r2, r0
 800a52c:	460b      	mov	r3, r1
 800a52e:	4610      	mov	r0, r2
 800a530:	4619      	mov	r1, r3
 800a532:	f7f6 faa1 	bl	8000a78 <__aeabi_d2f>
 800a536:	4602      	mov	r2, r0
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	649a      	str	r2, [r3, #72]	; 0x48
    //S23_pitch = S23_pitch;

    S31_pitch = S31_pitch + S33_pitch*(st);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a540:	4618      	mov	r0, r3
 800a542:	f7f5 ff69 	bl	8000418 <__aeabi_f2d>
 800a546:	4604      	mov	r4, r0
 800a548:	460d      	mov	r5, r1
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a54e:	4618      	mov	r0, r3
 800a550:	f7f5 ff62 	bl	8000418 <__aeabi_f2d>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800a55a:	f7f5 ffb5 	bl	80004c8 <__aeabi_dmul>
 800a55e:	4602      	mov	r2, r0
 800a560:	460b      	mov	r3, r1
 800a562:	4620      	mov	r0, r4
 800a564:	4629      	mov	r1, r5
 800a566:	f7f5 fdf9 	bl	800015c <__adddf3>
 800a56a:	4602      	mov	r2, r0
 800a56c:	460b      	mov	r3, r1
 800a56e:	4610      	mov	r0, r2
 800a570:	4619      	mov	r1, r3
 800a572:	f7f6 fa81 	bl	8000a78 <__aeabi_d2f>
 800a576:	4602      	mov	r2, r0
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	655a      	str	r2, [r3, #84]	; 0x54
    //S32_pitch = S32_pitch;
    S33_pitch = S33_pitch + sr;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a580:	4618      	mov	r0, r3
 800a582:	f7f5 ff49 	bl	8000418 <__aeabi_f2d>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800a58c:	f7f5 fde6 	bl	800015c <__adddf3>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	4610      	mov	r0, r2
 800a596:	4619      	mov	r1, r3
 800a598:	f7f6 fa6e 	bl	8000a78 <__aeabi_d2f>
 800a59c:	4602      	mov	r2, r0
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	65da      	str	r2, [r3, #92]	; 0x5c

    //ANGLE CORRECTION
    float A_pitch = (Qa*Qg + Qa*S22_pitch + Qa*S23_pitch + Qa*S32_pitch + Qa*S33_pitch + Qg*S11_pitch + S11_pitch*S22_pitch - S12_pitch*S21_pitch + S11_pitch*S23_pitch - S13_pitch*S21_pitch + S11_pitch*S32_pitch - S12_pitch*S31_pitch + S11_pitch*S33_pitch - S13_pitch*S31_pitch);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 800a5ae:	f7f5 ff8b 	bl	80004c8 <__aeabi_dmul>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	4690      	mov	r8, r2
 800a5b8:	4699      	mov	r9, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7f5 ff27 	bl	8000418 <__aeabi_f2d>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	f7f5 ff79 	bl	80004c8 <__aeabi_dmul>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4640      	mov	r0, r8
 800a5dc:	4649      	mov	r1, r9
 800a5de:	f7f5 fdbd 	bl	800015c <__adddf3>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	4690      	mov	r8, r2
 800a5e8:	4699      	mov	r9, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7f5 ff0f 	bl	8000418 <__aeabi_f2d>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	4620      	mov	r0, r4
 800a600:	4629      	mov	r1, r5
 800a602:	f7f5 ff61 	bl	80004c8 <__aeabi_dmul>
 800a606:	4602      	mov	r2, r0
 800a608:	460b      	mov	r3, r1
 800a60a:	4640      	mov	r0, r8
 800a60c:	4649      	mov	r1, r9
 800a60e:	f7f5 fda5 	bl	800015c <__adddf3>
 800a612:	4602      	mov	r2, r0
 800a614:	460b      	mov	r3, r1
 800a616:	4690      	mov	r8, r2
 800a618:	4699      	mov	r9, r3
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a624:	4618      	mov	r0, r3
 800a626:	f7f5 fef7 	bl	8000418 <__aeabi_f2d>
 800a62a:	4602      	mov	r2, r0
 800a62c:	460b      	mov	r3, r1
 800a62e:	4620      	mov	r0, r4
 800a630:	4629      	mov	r1, r5
 800a632:	f7f5 ff49 	bl	80004c8 <__aeabi_dmul>
 800a636:	4602      	mov	r2, r0
 800a638:	460b      	mov	r3, r1
 800a63a:	4640      	mov	r0, r8
 800a63c:	4649      	mov	r1, r9
 800a63e:	f7f5 fd8d 	bl	800015c <__adddf3>
 800a642:	4602      	mov	r2, r0
 800a644:	460b      	mov	r3, r1
 800a646:	4690      	mov	r8, r2
 800a648:	4699      	mov	r9, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a654:	4618      	mov	r0, r3
 800a656:	f7f5 fedf 	bl	8000418 <__aeabi_f2d>
 800a65a:	4602      	mov	r2, r0
 800a65c:	460b      	mov	r3, r1
 800a65e:	4620      	mov	r0, r4
 800a660:	4629      	mov	r1, r5
 800a662:	f7f5 ff31 	bl	80004c8 <__aeabi_dmul>
 800a666:	4602      	mov	r2, r0
 800a668:	460b      	mov	r3, r1
 800a66a:	4640      	mov	r0, r8
 800a66c:	4649      	mov	r1, r9
 800a66e:	f7f5 fd75 	bl	800015c <__adddf3>
 800a672:	4602      	mov	r2, r0
 800a674:	460b      	mov	r3, r1
 800a676:	4690      	mov	r8, r2
 800a678:	4699      	mov	r9, r3
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a684:	4618      	mov	r0, r3
 800a686:	f7f5 fec7 	bl	8000418 <__aeabi_f2d>
 800a68a:	4602      	mov	r2, r0
 800a68c:	460b      	mov	r3, r1
 800a68e:	4620      	mov	r0, r4
 800a690:	4629      	mov	r1, r5
 800a692:	f7f5 ff19 	bl	80004c8 <__aeabi_dmul>
 800a696:	4602      	mov	r2, r0
 800a698:	460b      	mov	r3, r1
 800a69a:	4640      	mov	r0, r8
 800a69c:	4649      	mov	r1, r9
 800a69e:	f7f5 fd5d 	bl	800015c <__adddf3>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	4614      	mov	r4, r2
 800a6a8:	461d      	mov	r5, r3
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	4610      	mov	r0, r2
 800a6b6:	f7f6 fb3d 	bl	8000d34 <__aeabi_fmul>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7f5 feab 	bl	8000418 <__aeabi_f2d>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	f7f5 fd47 	bl	800015c <__adddf3>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	4614      	mov	r4, r2
 800a6d4:	461d      	mov	r5, r3
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6de:	4619      	mov	r1, r3
 800a6e0:	4610      	mov	r0, r2
 800a6e2:	f7f6 fb27 	bl	8000d34 <__aeabi_fmul>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7f5 fe95 	bl	8000418 <__aeabi_f2d>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	4629      	mov	r1, r5
 800a6f6:	f7f5 fd2f 	bl	8000158 <__aeabi_dsub>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	4614      	mov	r4, r2
 800a700:	461d      	mov	r5, r3
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a70a:	4619      	mov	r1, r3
 800a70c:	4610      	mov	r0, r2
 800a70e:	f7f6 fb11 	bl	8000d34 <__aeabi_fmul>
 800a712:	4603      	mov	r3, r0
 800a714:	4618      	mov	r0, r3
 800a716:	f7f5 fe7f 	bl	8000418 <__aeabi_f2d>
 800a71a:	4602      	mov	r2, r0
 800a71c:	460b      	mov	r3, r1
 800a71e:	4620      	mov	r0, r4
 800a720:	4629      	mov	r1, r5
 800a722:	f7f5 fd1b 	bl	800015c <__adddf3>
 800a726:	4602      	mov	r2, r0
 800a728:	460b      	mov	r3, r1
 800a72a:	4614      	mov	r4, r2
 800a72c:	461d      	mov	r5, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a736:	4619      	mov	r1, r3
 800a738:	4610      	mov	r0, r2
 800a73a:	f7f6 fafb 	bl	8000d34 <__aeabi_fmul>
 800a73e:	4603      	mov	r3, r0
 800a740:	4618      	mov	r0, r3
 800a742:	f7f5 fe69 	bl	8000418 <__aeabi_f2d>
 800a746:	4602      	mov	r2, r0
 800a748:	460b      	mov	r3, r1
 800a74a:	4620      	mov	r0, r4
 800a74c:	4629      	mov	r1, r5
 800a74e:	f7f5 fd03 	bl	8000158 <__aeabi_dsub>
 800a752:	4602      	mov	r2, r0
 800a754:	460b      	mov	r3, r1
 800a756:	4614      	mov	r4, r2
 800a758:	461d      	mov	r5, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a762:	4619      	mov	r1, r3
 800a764:	4610      	mov	r0, r2
 800a766:	f7f6 fae5 	bl	8000d34 <__aeabi_fmul>
 800a76a:	4603      	mov	r3, r0
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7f5 fe53 	bl	8000418 <__aeabi_f2d>
 800a772:	4602      	mov	r2, r0
 800a774:	460b      	mov	r3, r1
 800a776:	4620      	mov	r0, r4
 800a778:	4629      	mov	r1, r5
 800a77a:	f7f5 fcef 	bl	800015c <__adddf3>
 800a77e:	4602      	mov	r2, r0
 800a780:	460b      	mov	r3, r1
 800a782:	4614      	mov	r4, r2
 800a784:	461d      	mov	r5, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a78e:	4619      	mov	r1, r3
 800a790:	4610      	mov	r0, r2
 800a792:	f7f6 facf 	bl	8000d34 <__aeabi_fmul>
 800a796:	4603      	mov	r3, r0
 800a798:	4618      	mov	r0, r3
 800a79a:	f7f5 fe3d 	bl	8000418 <__aeabi_f2d>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	4629      	mov	r1, r5
 800a7a6:	f7f5 fcd7 	bl	8000158 <__aeabi_dsub>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	4614      	mov	r4, r2
 800a7b0:	461d      	mov	r5, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	4610      	mov	r0, r2
 800a7be:	f7f6 fab9 	bl	8000d34 <__aeabi_fmul>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7f5 fe27 	bl	8000418 <__aeabi_f2d>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	f7f5 fcc3 	bl	800015c <__adddf3>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	460b      	mov	r3, r1
 800a7da:	4614      	mov	r4, r2
 800a7dc:	461d      	mov	r5, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	4610      	mov	r0, r2
 800a7ea:	f7f6 faa3 	bl	8000d34 <__aeabi_fmul>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7f5 fe11 	bl	8000418 <__aeabi_f2d>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	f7f5 fcab 	bl	8000158 <__aeabi_dsub>
 800a802:	4602      	mov	r2, r0
 800a804:	460b      	mov	r3, r1
 800a806:	4610      	mov	r0, r2
 800a808:	4619      	mov	r1, r3
 800a80a:	f7f6 f935 	bl	8000a78 <__aeabi_d2f>
 800a80e:	4603      	mov	r3, r0
 800a810:	63fb      	str	r3, [r7, #60]	; 0x3c
    float Kt11_pitch = 1 - (Qa*(Qg + S22_pitch + S23_pitch + S32_pitch + S33_pitch))/A_pitch;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	e9d3 8932 	ldrd	r8, r9, [r3, #200]	; 0xc8
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a822:	4618      	mov	r0, r3
 800a824:	f7f5 fdf8 	bl	8000418 <__aeabi_f2d>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	4640      	mov	r0, r8
 800a82e:	4649      	mov	r1, r9
 800a830:	f7f5 fc94 	bl	800015c <__adddf3>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	4690      	mov	r8, r2
 800a83a:	4699      	mov	r9, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a840:	4618      	mov	r0, r3
 800a842:	f7f5 fde9 	bl	8000418 <__aeabi_f2d>
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
 800a84a:	4640      	mov	r0, r8
 800a84c:	4649      	mov	r1, r9
 800a84e:	f7f5 fc85 	bl	800015c <__adddf3>
 800a852:	4602      	mov	r2, r0
 800a854:	460b      	mov	r3, r1
 800a856:	4690      	mov	r8, r2
 800a858:	4699      	mov	r9, r3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a85e:	4618      	mov	r0, r3
 800a860:	f7f5 fdda 	bl	8000418 <__aeabi_f2d>
 800a864:	4602      	mov	r2, r0
 800a866:	460b      	mov	r3, r1
 800a868:	4640      	mov	r0, r8
 800a86a:	4649      	mov	r1, r9
 800a86c:	f7f5 fc76 	bl	800015c <__adddf3>
 800a870:	4602      	mov	r2, r0
 800a872:	460b      	mov	r3, r1
 800a874:	4690      	mov	r8, r2
 800a876:	4699      	mov	r9, r3
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7f5 fdcb 	bl	8000418 <__aeabi_f2d>
 800a882:	4602      	mov	r2, r0
 800a884:	460b      	mov	r3, r1
 800a886:	4640      	mov	r0, r8
 800a888:	4649      	mov	r1, r9
 800a88a:	f7f5 fc67 	bl	800015c <__adddf3>
 800a88e:	4602      	mov	r2, r0
 800a890:	460b      	mov	r3, r1
 800a892:	4620      	mov	r0, r4
 800a894:	4629      	mov	r1, r5
 800a896:	f7f5 fe17 	bl	80004c8 <__aeabi_dmul>
 800a89a:	4602      	mov	r2, r0
 800a89c:	460b      	mov	r3, r1
 800a89e:	4614      	mov	r4, r2
 800a8a0:	461d      	mov	r5, r3
 800a8a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a8a4:	f7f5 fdb8 	bl	8000418 <__aeabi_f2d>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	4629      	mov	r1, r5
 800a8b0:	f7f5 ff34 	bl	800071c <__aeabi_ddiv>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	f04f 0000 	mov.w	r0, #0
 800a8bc:	49bd      	ldr	r1, [pc, #756]	; (800abb4 <_ZN15Kalman_Filtresi3RunEv+0x1a14>)
 800a8be:	f7f5 fc4b 	bl	8000158 <__aeabi_dsub>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	4610      	mov	r0, r2
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	f7f6 f8d5 	bl	8000a78 <__aeabi_d2f>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	63bb      	str	r3, [r7, #56]	; 0x38
    float Kt12_pitch = (Qa*(S12_pitch + S13_pitch))/A_pitch;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	4610      	mov	r0, r2
 800a8e4:	f7f6 f91e 	bl	8000b24 <__addsf3>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7f5 fd94 	bl	8000418 <__aeabi_f2d>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	f7f5 fde6 	bl	80004c8 <__aeabi_dmul>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	460b      	mov	r3, r1
 800a900:	4614      	mov	r4, r2
 800a902:	461d      	mov	r5, r3
 800a904:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a906:	f7f5 fd87 	bl	8000418 <__aeabi_f2d>
 800a90a:	4602      	mov	r2, r0
 800a90c:	460b      	mov	r3, r1
 800a90e:	4620      	mov	r0, r4
 800a910:	4629      	mov	r1, r5
 800a912:	f7f5 ff03 	bl	800071c <__aeabi_ddiv>
 800a916:	4602      	mov	r2, r0
 800a918:	460b      	mov	r3, r1
 800a91a:	4610      	mov	r0, r2
 800a91c:	4619      	mov	r1, r3
 800a91e:	f7f6 f8ab 	bl	8000a78 <__aeabi_d2f>
 800a922:	4603      	mov	r3, r0
 800a924:	637b      	str	r3, [r7, #52]	; 0x34
    float Kt21_pitch = (Qg*S21_pitch + S21_pitch*S32_pitch - S22_pitch*S31_pitch + S21_pitch*S33_pitch - S23_pitch*S31_pitch)/A_pitch;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a930:	4618      	mov	r0, r3
 800a932:	f7f5 fd71 	bl	8000418 <__aeabi_f2d>
 800a936:	4602      	mov	r2, r0
 800a938:	460b      	mov	r3, r1
 800a93a:	4620      	mov	r0, r4
 800a93c:	4629      	mov	r1, r5
 800a93e:	f7f5 fdc3 	bl	80004c8 <__aeabi_dmul>
 800a942:	4602      	mov	r2, r0
 800a944:	460b      	mov	r3, r1
 800a946:	4614      	mov	r4, r2
 800a948:	461d      	mov	r5, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a952:	4619      	mov	r1, r3
 800a954:	4610      	mov	r0, r2
 800a956:	f7f6 f9ed 	bl	8000d34 <__aeabi_fmul>
 800a95a:	4603      	mov	r3, r0
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7f5 fd5b 	bl	8000418 <__aeabi_f2d>
 800a962:	4602      	mov	r2, r0
 800a964:	460b      	mov	r3, r1
 800a966:	4620      	mov	r0, r4
 800a968:	4629      	mov	r1, r5
 800a96a:	f7f5 fbf7 	bl	800015c <__adddf3>
 800a96e:	4602      	mov	r2, r0
 800a970:	460b      	mov	r3, r1
 800a972:	4614      	mov	r4, r2
 800a974:	461d      	mov	r5, r3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a97e:	4619      	mov	r1, r3
 800a980:	4610      	mov	r0, r2
 800a982:	f7f6 f9d7 	bl	8000d34 <__aeabi_fmul>
 800a986:	4603      	mov	r3, r0
 800a988:	4618      	mov	r0, r3
 800a98a:	f7f5 fd45 	bl	8000418 <__aeabi_f2d>
 800a98e:	4602      	mov	r2, r0
 800a990:	460b      	mov	r3, r1
 800a992:	4620      	mov	r0, r4
 800a994:	4629      	mov	r1, r5
 800a996:	f7f5 fbdf 	bl	8000158 <__aeabi_dsub>
 800a99a:	4602      	mov	r2, r0
 800a99c:	460b      	mov	r3, r1
 800a99e:	4614      	mov	r4, r2
 800a9a0:	461d      	mov	r5, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	4610      	mov	r0, r2
 800a9ae:	f7f6 f9c1 	bl	8000d34 <__aeabi_fmul>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7f5 fd2f 	bl	8000418 <__aeabi_f2d>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	460b      	mov	r3, r1
 800a9be:	4620      	mov	r0, r4
 800a9c0:	4629      	mov	r1, r5
 800a9c2:	f7f5 fbcb 	bl	800015c <__adddf3>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	4614      	mov	r4, r2
 800a9cc:	461d      	mov	r5, r3
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	4610      	mov	r0, r2
 800a9da:	f7f6 f9ab 	bl	8000d34 <__aeabi_fmul>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7f5 fd19 	bl	8000418 <__aeabi_f2d>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	f7f5 fbb3 	bl	8000158 <__aeabi_dsub>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	4614      	mov	r4, r2
 800a9f8:	461d      	mov	r5, r3
 800a9fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a9fc:	f7f5 fd0c 	bl	8000418 <__aeabi_f2d>
 800aa00:	4602      	mov	r2, r0
 800aa02:	460b      	mov	r3, r1
 800aa04:	4620      	mov	r0, r4
 800aa06:	4629      	mov	r1, r5
 800aa08:	f7f5 fe88 	bl	800071c <__aeabi_ddiv>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	460b      	mov	r3, r1
 800aa10:	4610      	mov	r0, r2
 800aa12:	4619      	mov	r1, r3
 800aa14:	f7f6 f830 	bl	8000a78 <__aeabi_d2f>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	633b      	str	r3, [r7, #48]	; 0x30
    float Kt22_pitch = (Qa*S22_pitch + Qa*S23_pitch + S11_pitch*S22_pitch - S12_pitch*S21_pitch + S11_pitch*S23_pitch - S13_pitch*S21_pitch)/A_pitch;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7f5 fcf6 	bl	8000418 <__aeabi_f2d>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	460b      	mov	r3, r1
 800aa30:	4620      	mov	r0, r4
 800aa32:	4629      	mov	r1, r5
 800aa34:	f7f5 fd48 	bl	80004c8 <__aeabi_dmul>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	4690      	mov	r8, r2
 800aa3e:	4699      	mov	r9, r3
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7f5 fce4 	bl	8000418 <__aeabi_f2d>
 800aa50:	4602      	mov	r2, r0
 800aa52:	460b      	mov	r3, r1
 800aa54:	4620      	mov	r0, r4
 800aa56:	4629      	mov	r1, r5
 800aa58:	f7f5 fd36 	bl	80004c8 <__aeabi_dmul>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	460b      	mov	r3, r1
 800aa60:	4640      	mov	r0, r8
 800aa62:	4649      	mov	r1, r9
 800aa64:	f7f5 fb7a 	bl	800015c <__adddf3>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	4614      	mov	r4, r2
 800aa6e:	461d      	mov	r5, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa78:	4619      	mov	r1, r3
 800aa7a:	4610      	mov	r0, r2
 800aa7c:	f7f6 f95a 	bl	8000d34 <__aeabi_fmul>
 800aa80:	4603      	mov	r3, r0
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7f5 fcc8 	bl	8000418 <__aeabi_f2d>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	4629      	mov	r1, r5
 800aa90:	f7f5 fb64 	bl	800015c <__adddf3>
 800aa94:	4602      	mov	r2, r0
 800aa96:	460b      	mov	r3, r1
 800aa98:	4614      	mov	r4, r2
 800aa9a:	461d      	mov	r5, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	4610      	mov	r0, r2
 800aaa8:	f7f6 f944 	bl	8000d34 <__aeabi_fmul>
 800aaac:	4603      	mov	r3, r0
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7f5 fcb2 	bl	8000418 <__aeabi_f2d>
 800aab4:	4602      	mov	r2, r0
 800aab6:	460b      	mov	r3, r1
 800aab8:	4620      	mov	r0, r4
 800aaba:	4629      	mov	r1, r5
 800aabc:	f7f5 fb4c 	bl	8000158 <__aeabi_dsub>
 800aac0:	4602      	mov	r2, r0
 800aac2:	460b      	mov	r3, r1
 800aac4:	4614      	mov	r4, r2
 800aac6:	461d      	mov	r5, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aad0:	4619      	mov	r1, r3
 800aad2:	4610      	mov	r0, r2
 800aad4:	f7f6 f92e 	bl	8000d34 <__aeabi_fmul>
 800aad8:	4603      	mov	r3, r0
 800aada:	4618      	mov	r0, r3
 800aadc:	f7f5 fc9c 	bl	8000418 <__aeabi_f2d>
 800aae0:	4602      	mov	r2, r0
 800aae2:	460b      	mov	r3, r1
 800aae4:	4620      	mov	r0, r4
 800aae6:	4629      	mov	r1, r5
 800aae8:	f7f5 fb38 	bl	800015c <__adddf3>
 800aaec:	4602      	mov	r2, r0
 800aaee:	460b      	mov	r3, r1
 800aaf0:	4614      	mov	r4, r2
 800aaf2:	461d      	mov	r5, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aafc:	4619      	mov	r1, r3
 800aafe:	4610      	mov	r0, r2
 800ab00:	f7f6 f918 	bl	8000d34 <__aeabi_fmul>
 800ab04:	4603      	mov	r3, r0
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7f5 fc86 	bl	8000418 <__aeabi_f2d>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	460b      	mov	r3, r1
 800ab10:	4620      	mov	r0, r4
 800ab12:	4629      	mov	r1, r5
 800ab14:	f7f5 fb20 	bl	8000158 <__aeabi_dsub>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	4614      	mov	r4, r2
 800ab1e:	461d      	mov	r5, r3
 800ab20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ab22:	f7f5 fc79 	bl	8000418 <__aeabi_f2d>
 800ab26:	4602      	mov	r2, r0
 800ab28:	460b      	mov	r3, r1
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	f7f5 fdf5 	bl	800071c <__aeabi_ddiv>
 800ab32:	4602      	mov	r2, r0
 800ab34:	460b      	mov	r3, r1
 800ab36:	4610      	mov	r0, r2
 800ab38:	4619      	mov	r1, r3
 800ab3a:	f7f5 ff9d 	bl	8000a78 <__aeabi_d2f>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	62fb      	str	r3, [r7, #44]	; 0x2c
    float Kt31_pitch = (Qg*S31_pitch - S21_pitch*S32_pitch + S22_pitch*S31_pitch - S21_pitch*S33_pitch + S23_pitch*S31_pitch)/A_pitch;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7f5 fc63 	bl	8000418 <__aeabi_f2d>
 800ab52:	4602      	mov	r2, r0
 800ab54:	460b      	mov	r3, r1
 800ab56:	4620      	mov	r0, r4
 800ab58:	4629      	mov	r1, r5
 800ab5a:	f7f5 fcb5 	bl	80004c8 <__aeabi_dmul>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	460b      	mov	r3, r1
 800ab62:	4614      	mov	r4, r2
 800ab64:	461d      	mov	r5, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab6e:	4619      	mov	r1, r3
 800ab70:	4610      	mov	r0, r2
 800ab72:	f7f6 f8df 	bl	8000d34 <__aeabi_fmul>
 800ab76:	4603      	mov	r3, r0
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7f5 fc4d 	bl	8000418 <__aeabi_f2d>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	460b      	mov	r3, r1
 800ab82:	4620      	mov	r0, r4
 800ab84:	4629      	mov	r1, r5
 800ab86:	f7f5 fae7 	bl	8000158 <__aeabi_dsub>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	4614      	mov	r4, r2
 800ab90:	461d      	mov	r5, r3
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	4610      	mov	r0, r2
 800ab9e:	f7f6 f8c9 	bl	8000d34 <__aeabi_fmul>
 800aba2:	4603      	mov	r3, r0
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7f5 fc37 	bl	8000418 <__aeabi_f2d>
 800abaa:	4602      	mov	r2, r0
 800abac:	460b      	mov	r3, r1
 800abae:	4620      	mov	r0, r4
 800abb0:	4629      	mov	r1, r5
 800abb2:	e001      	b.n	800abb8 <_ZN15Kalman_Filtresi3RunEv+0x1a18>
 800abb4:	3ff00000 	.word	0x3ff00000
 800abb8:	f7f5 fad0 	bl	800015c <__adddf3>
 800abbc:	4602      	mov	r2, r0
 800abbe:	460b      	mov	r3, r1
 800abc0:	4614      	mov	r4, r2
 800abc2:	461d      	mov	r5, r3
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abcc:	4619      	mov	r1, r3
 800abce:	4610      	mov	r0, r2
 800abd0:	f7f6 f8b0 	bl	8000d34 <__aeabi_fmul>
 800abd4:	4603      	mov	r3, r0
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7f5 fc1e 	bl	8000418 <__aeabi_f2d>
 800abdc:	4602      	mov	r2, r0
 800abde:	460b      	mov	r3, r1
 800abe0:	4620      	mov	r0, r4
 800abe2:	4629      	mov	r1, r5
 800abe4:	f7f5 fab8 	bl	8000158 <__aeabi_dsub>
 800abe8:	4602      	mov	r2, r0
 800abea:	460b      	mov	r3, r1
 800abec:	4614      	mov	r4, r2
 800abee:	461d      	mov	r5, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abf8:	4619      	mov	r1, r3
 800abfa:	4610      	mov	r0, r2
 800abfc:	f7f6 f89a 	bl	8000d34 <__aeabi_fmul>
 800ac00:	4603      	mov	r3, r0
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7f5 fc08 	bl	8000418 <__aeabi_f2d>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	4629      	mov	r1, r5
 800ac10:	f7f5 faa4 	bl	800015c <__adddf3>
 800ac14:	4602      	mov	r2, r0
 800ac16:	460b      	mov	r3, r1
 800ac18:	4614      	mov	r4, r2
 800ac1a:	461d      	mov	r5, r3
 800ac1c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ac1e:	f7f5 fbfb 	bl	8000418 <__aeabi_f2d>
 800ac22:	4602      	mov	r2, r0
 800ac24:	460b      	mov	r3, r1
 800ac26:	4620      	mov	r0, r4
 800ac28:	4629      	mov	r1, r5
 800ac2a:	f7f5 fd77 	bl	800071c <__aeabi_ddiv>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	460b      	mov	r3, r1
 800ac32:	4610      	mov	r0, r2
 800ac34:	4619      	mov	r1, r3
 800ac36:	f7f5 ff1f 	bl	8000a78 <__aeabi_d2f>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	62bb      	str	r3, [r7, #40]	; 0x28
    float Kt32_pitch = (Qa*S32_pitch + Qa*S33_pitch + S11_pitch*S32_pitch - S12_pitch*S31_pitch + S11_pitch*S33_pitch - S13_pitch*S31_pitch)/A_pitch;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7f5 fbe5 	bl	8000418 <__aeabi_f2d>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	4620      	mov	r0, r4
 800ac54:	4629      	mov	r1, r5
 800ac56:	f7f5 fc37 	bl	80004c8 <__aeabi_dmul>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	4690      	mov	r8, r2
 800ac60:	4699      	mov	r9, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7f5 fbd3 	bl	8000418 <__aeabi_f2d>
 800ac72:	4602      	mov	r2, r0
 800ac74:	460b      	mov	r3, r1
 800ac76:	4620      	mov	r0, r4
 800ac78:	4629      	mov	r1, r5
 800ac7a:	f7f5 fc25 	bl	80004c8 <__aeabi_dmul>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	460b      	mov	r3, r1
 800ac82:	4640      	mov	r0, r8
 800ac84:	4649      	mov	r1, r9
 800ac86:	f7f5 fa69 	bl	800015c <__adddf3>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	4614      	mov	r4, r2
 800ac90:	461d      	mov	r5, r3
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	f7f6 f849 	bl	8000d34 <__aeabi_fmul>
 800aca2:	4603      	mov	r3, r0
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7f5 fbb7 	bl	8000418 <__aeabi_f2d>
 800acaa:	4602      	mov	r2, r0
 800acac:	460b      	mov	r3, r1
 800acae:	4620      	mov	r0, r4
 800acb0:	4629      	mov	r1, r5
 800acb2:	f7f5 fa53 	bl	800015c <__adddf3>
 800acb6:	4602      	mov	r2, r0
 800acb8:	460b      	mov	r3, r1
 800acba:	4614      	mov	r4, r2
 800acbc:	461d      	mov	r5, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acc6:	4619      	mov	r1, r3
 800acc8:	4610      	mov	r0, r2
 800acca:	f7f6 f833 	bl	8000d34 <__aeabi_fmul>
 800acce:	4603      	mov	r3, r0
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7f5 fba1 	bl	8000418 <__aeabi_f2d>
 800acd6:	4602      	mov	r2, r0
 800acd8:	460b      	mov	r3, r1
 800acda:	4620      	mov	r0, r4
 800acdc:	4629      	mov	r1, r5
 800acde:	f7f5 fa3b 	bl	8000158 <__aeabi_dsub>
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	4614      	mov	r4, r2
 800ace8:	461d      	mov	r5, r3
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acf2:	4619      	mov	r1, r3
 800acf4:	4610      	mov	r0, r2
 800acf6:	f7f6 f81d 	bl	8000d34 <__aeabi_fmul>
 800acfa:	4603      	mov	r3, r0
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7f5 fb8b 	bl	8000418 <__aeabi_f2d>
 800ad02:	4602      	mov	r2, r0
 800ad04:	460b      	mov	r3, r1
 800ad06:	4620      	mov	r0, r4
 800ad08:	4629      	mov	r1, r5
 800ad0a:	f7f5 fa27 	bl	800015c <__adddf3>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	460b      	mov	r3, r1
 800ad12:	4614      	mov	r4, r2
 800ad14:	461d      	mov	r5, r3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad1e:	4619      	mov	r1, r3
 800ad20:	4610      	mov	r0, r2
 800ad22:	f7f6 f807 	bl	8000d34 <__aeabi_fmul>
 800ad26:	4603      	mov	r3, r0
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7f5 fb75 	bl	8000418 <__aeabi_f2d>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	460b      	mov	r3, r1
 800ad32:	4620      	mov	r0, r4
 800ad34:	4629      	mov	r1, r5
 800ad36:	f7f5 fa0f 	bl	8000158 <__aeabi_dsub>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	4614      	mov	r4, r2
 800ad40:	461d      	mov	r5, r3
 800ad42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ad44:	f7f5 fb68 	bl	8000418 <__aeabi_f2d>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	4629      	mov	r1, r5
 800ad50:	f7f5 fce4 	bl	800071c <__aeabi_ddiv>
 800ad54:	4602      	mov	r2, r0
 800ad56:	460b      	mov	r3, r1
 800ad58:	4610      	mov	r0, r2
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	f7f5 fe8c 	bl	8000a78 <__aeabi_d2f>
 800ad60:	4603      	mov	r3, r0
 800ad62:	627b      	str	r3, [r7, #36]	; 0x24

    pitch_ekf = (pitch_ekf) + Kt11_pitch*((pitch_acc) - (pitch_ekf)) - Kt12_pitch*((pitch_bias) - (gyroY) + (pitch_rate));
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ad76:	4619      	mov	r1, r3
 800ad78:	4610      	mov	r0, r2
 800ad7a:	f7f5 fed1 	bl	8000b20 <__aeabi_fsub>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7f5 ffd6 	bl	8000d34 <__aeabi_fmul>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	f7f5 fec9 	bl	8000b24 <__addsf3>
 800ad92:	4603      	mov	r3, r0
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7f5 fb3f 	bl	8000418 <__aeabi_f2d>
 800ad9a:	4604      	mov	r4, r0
 800ad9c:	460d      	mov	r5, r1
 800ad9e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ada0:	f7f5 fb3a 	bl	8000418 <__aeabi_f2d>
 800ada4:	4680      	mov	r8, r0
 800ada6:	4689      	mov	r9, r1
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adac:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800adae:	4618      	mov	r0, r3
 800adb0:	f7f5 feb6 	bl	8000b20 <__aeabi_fsub>
 800adb4:	4603      	mov	r3, r0
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7f5 fb2e 	bl	8000418 <__aeabi_f2d>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800adc2:	f7f5 f9cb 	bl	800015c <__adddf3>
 800adc6:	4602      	mov	r2, r0
 800adc8:	460b      	mov	r3, r1
 800adca:	4640      	mov	r0, r8
 800adcc:	4649      	mov	r1, r9
 800adce:	f7f5 fb7b 	bl	80004c8 <__aeabi_dmul>
 800add2:	4602      	mov	r2, r0
 800add4:	460b      	mov	r3, r1
 800add6:	4620      	mov	r0, r4
 800add8:	4629      	mov	r1, r5
 800adda:	f7f5 f9bd 	bl	8000158 <__aeabi_dsub>
 800adde:	4602      	mov	r2, r0
 800ade0:	460b      	mov	r3, r1
 800ade2:	4610      	mov	r0, r2
 800ade4:	4619      	mov	r1, r3
 800ade6:	f7f5 fe47 	bl	8000a78 <__aeabi_d2f>
 800adea:	4602      	mov	r2, r0
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

    //pitch_ekf = 0;
    pitch_bias = (pitch_bias) + Kt21_pitch*((pitch_acc) - (pitch_ekf)) - Kt22_pitch*((pitch_bias) - (gyroY) + (pitch_rate));
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae02:	4619      	mov	r1, r3
 800ae04:	4610      	mov	r0, r2
 800ae06:	f7f5 fe8b 	bl	8000b20 <__aeabi_fsub>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7f5 ff90 	bl	8000d34 <__aeabi_fmul>
 800ae14:	4603      	mov	r3, r0
 800ae16:	4619      	mov	r1, r3
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f7f5 fe83 	bl	8000b24 <__addsf3>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7f5 faf9 	bl	8000418 <__aeabi_f2d>
 800ae26:	4604      	mov	r4, r0
 800ae28:	460d      	mov	r5, r1
 800ae2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae2c:	f7f5 faf4 	bl	8000418 <__aeabi_f2d>
 800ae30:	4680      	mov	r8, r0
 800ae32:	4689      	mov	r9, r1
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae38:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7f5 fe70 	bl	8000b20 <__aeabi_fsub>
 800ae40:	4603      	mov	r3, r0
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7f5 fae8 	bl	8000418 <__aeabi_f2d>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae4e:	f7f5 f985 	bl	800015c <__adddf3>
 800ae52:	4602      	mov	r2, r0
 800ae54:	460b      	mov	r3, r1
 800ae56:	4640      	mov	r0, r8
 800ae58:	4649      	mov	r1, r9
 800ae5a:	f7f5 fb35 	bl	80004c8 <__aeabi_dmul>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	460b      	mov	r3, r1
 800ae62:	4620      	mov	r0, r4
 800ae64:	4629      	mov	r1, r5
 800ae66:	f7f5 f977 	bl	8000158 <__aeabi_dsub>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	4610      	mov	r0, r2
 800ae70:	4619      	mov	r1, r3
 800ae72:	f7f5 fe01 	bl	8000a78 <__aeabi_d2f>
 800ae76:	4602      	mov	r2, r0
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	631a      	str	r2, [r3, #48]	; 0x30
    //pitch_bias = 0;

    pitch_rate = (pitch_rate) + Kt31_pitch*((pitch_acc) - (pitch_ekf)) - Kt32_pitch*((pitch_bias) - (gyroY) + (pitch_rate));
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ae8e:	4619      	mov	r1, r3
 800ae90:	4610      	mov	r0, r2
 800ae92:	f7f5 fe45 	bl	8000b20 <__aeabi_fsub>
 800ae96:	4603      	mov	r3, r0
 800ae98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7f5 ff4a 	bl	8000d34 <__aeabi_fmul>
 800aea0:	4603      	mov	r3, r0
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7f5 fab8 	bl	8000418 <__aeabi_f2d>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	460b      	mov	r3, r1
 800aeac:	4620      	mov	r0, r4
 800aeae:	4629      	mov	r1, r5
 800aeb0:	f7f5 f954 	bl	800015c <__adddf3>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	4690      	mov	r8, r2
 800aeba:	4699      	mov	r9, r3
 800aebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aebe:	f7f5 faab 	bl	8000418 <__aeabi_f2d>
 800aec2:	4604      	mov	r4, r0
 800aec4:	460d      	mov	r5, r1
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800aecc:	4618      	mov	r0, r3
 800aece:	f7f5 fe27 	bl	8000b20 <__aeabi_fsub>
 800aed2:	4603      	mov	r3, r0
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7f5 fa9f 	bl	8000418 <__aeabi_f2d>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aee0:	f7f5 f93c 	bl	800015c <__adddf3>
 800aee4:	4602      	mov	r2, r0
 800aee6:	460b      	mov	r3, r1
 800aee8:	4620      	mov	r0, r4
 800aeea:	4629      	mov	r1, r5
 800aeec:	f7f5 faec 	bl	80004c8 <__aeabi_dmul>
 800aef0:	4602      	mov	r2, r0
 800aef2:	460b      	mov	r3, r1
 800aef4:	4640      	mov	r0, r8
 800aef6:	4649      	mov	r1, r9
 800aef8:	f7f5 f92e 	bl	8000158 <__aeabi_dsub>
 800aefc:	4602      	mov	r2, r0
 800aefe:	460b      	mov	r3, r1
 800af00:	6879      	ldr	r1, [r7, #4]
 800af02:	e9c1 2308 	strd	r2, r3, [r1, #32]


    S11_pitch = - S11_pitch*(Kt11_pitch - 1) - Kt12_pitch*S21_pitch - Kt12_pitch*S31_pitch;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af0a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800af0e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800af12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af14:	f7f5 fe04 	bl	8000b20 <__aeabi_fsub>
 800af18:	4603      	mov	r3, r0
 800af1a:	4619      	mov	r1, r3
 800af1c:	4620      	mov	r0, r4
 800af1e:	f7f5 ff09 	bl	8000d34 <__aeabi_fmul>
 800af22:	4603      	mov	r3, r0
 800af24:	461c      	mov	r4, r3
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7f5 ff01 	bl	8000d34 <__aeabi_fmul>
 800af32:	4603      	mov	r3, r0
 800af34:	4619      	mov	r1, r3
 800af36:	4620      	mov	r0, r4
 800af38:	f7f5 fdf2 	bl	8000b20 <__aeabi_fsub>
 800af3c:	4603      	mov	r3, r0
 800af3e:	461c      	mov	r4, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800af46:	4618      	mov	r0, r3
 800af48:	f7f5 fef4 	bl	8000d34 <__aeabi_fmul>
 800af4c:	4603      	mov	r3, r0
 800af4e:	4619      	mov	r1, r3
 800af50:	4620      	mov	r0, r4
 800af52:	f7f5 fde5 	bl	8000b20 <__aeabi_fsub>
 800af56:	4603      	mov	r3, r0
 800af58:	461a      	mov	r2, r3
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	63da      	str	r2, [r3, #60]	; 0x3c


    S12_pitch = - S12_pitch*(Kt11_pitch - 1) - Kt12_pitch*S22_pitch - Kt12_pitch*S32_pitch;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af62:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800af66:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800af6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af6c:	f7f5 fdd8 	bl	8000b20 <__aeabi_fsub>
 800af70:	4603      	mov	r3, r0
 800af72:	4619      	mov	r1, r3
 800af74:	4620      	mov	r0, r4
 800af76:	f7f5 fedd 	bl	8000d34 <__aeabi_fmul>
 800af7a:	4603      	mov	r3, r0
 800af7c:	461c      	mov	r4, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800af84:	4618      	mov	r0, r3
 800af86:	f7f5 fed5 	bl	8000d34 <__aeabi_fmul>
 800af8a:	4603      	mov	r3, r0
 800af8c:	4619      	mov	r1, r3
 800af8e:	4620      	mov	r0, r4
 800af90:	f7f5 fdc6 	bl	8000b20 <__aeabi_fsub>
 800af94:	4603      	mov	r3, r0
 800af96:	461c      	mov	r4, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7f5 fec8 	bl	8000d34 <__aeabi_fmul>
 800afa4:	4603      	mov	r3, r0
 800afa6:	4619      	mov	r1, r3
 800afa8:	4620      	mov	r0, r4
 800afaa:	f7f5 fdb9 	bl	8000b20 <__aeabi_fsub>
 800afae:	4603      	mov	r3, r0
 800afb0:	461a      	mov	r2, r3
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	641a      	str	r2, [r3, #64]	; 0x40


    S13_pitch = - S13_pitch*(Kt11_pitch - 1) - Kt12_pitch*S23_pitch - Kt12_pitch*S33_pitch;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afba:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800afbe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800afc2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800afc4:	f7f5 fdac 	bl	8000b20 <__aeabi_fsub>
 800afc8:	4603      	mov	r3, r0
 800afca:	4619      	mov	r1, r3
 800afcc:	4620      	mov	r0, r4
 800afce:	f7f5 feb1 	bl	8000d34 <__aeabi_fmul>
 800afd2:	4603      	mov	r3, r0
 800afd4:	461c      	mov	r4, r3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800afdc:	4618      	mov	r0, r3
 800afde:	f7f5 fea9 	bl	8000d34 <__aeabi_fmul>
 800afe2:	4603      	mov	r3, r0
 800afe4:	4619      	mov	r1, r3
 800afe6:	4620      	mov	r0, r4
 800afe8:	f7f5 fd9a 	bl	8000b20 <__aeabi_fsub>
 800afec:	4603      	mov	r3, r0
 800afee:	461c      	mov	r4, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aff4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7f5 fe9c 	bl	8000d34 <__aeabi_fmul>
 800affc:	4603      	mov	r3, r0
 800affe:	4619      	mov	r1, r3
 800b000:	4620      	mov	r0, r4
 800b002:	f7f5 fd8d 	bl	8000b20 <__aeabi_fsub>
 800b006:	4603      	mov	r3, r0
 800b008:	461a      	mov	r2, r3
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	64da      	str	r2, [r3, #76]	; 0x4c


    S21_pitch = - S21_pitch*(Kt22_pitch - 1) - Kt21_pitch*S11_pitch - Kt22_pitch*S31_pitch;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b012:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b016:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b01a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b01c:	f7f5 fd80 	bl	8000b20 <__aeabi_fsub>
 800b020:	4603      	mov	r3, r0
 800b022:	4619      	mov	r1, r3
 800b024:	4620      	mov	r0, r4
 800b026:	f7f5 fe85 	bl	8000d34 <__aeabi_fmul>
 800b02a:	4603      	mov	r3, r0
 800b02c:	461c      	mov	r4, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b032:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b034:	4618      	mov	r0, r3
 800b036:	f7f5 fe7d 	bl	8000d34 <__aeabi_fmul>
 800b03a:	4603      	mov	r3, r0
 800b03c:	4619      	mov	r1, r3
 800b03e:	4620      	mov	r0, r4
 800b040:	f7f5 fd6e 	bl	8000b20 <__aeabi_fsub>
 800b044:	4603      	mov	r3, r0
 800b046:	461c      	mov	r4, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b04c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b04e:	4618      	mov	r0, r3
 800b050:	f7f5 fe70 	bl	8000d34 <__aeabi_fmul>
 800b054:	4603      	mov	r3, r0
 800b056:	4619      	mov	r1, r3
 800b058:	4620      	mov	r0, r4
 800b05a:	f7f5 fd61 	bl	8000b20 <__aeabi_fsub>
 800b05e:	4603      	mov	r3, r0
 800b060:	461a      	mov	r2, r3
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	645a      	str	r2, [r3, #68]	; 0x44


    S22_pitch = - S22_pitch*(Kt22_pitch - 1) - Kt21_pitch*S12_pitch - Kt22_pitch*S32_pitch;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b06a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b06e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b072:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b074:	f7f5 fd54 	bl	8000b20 <__aeabi_fsub>
 800b078:	4603      	mov	r3, r0
 800b07a:	4619      	mov	r1, r3
 800b07c:	4620      	mov	r0, r4
 800b07e:	f7f5 fe59 	bl	8000d34 <__aeabi_fmul>
 800b082:	4603      	mov	r3, r0
 800b084:	461c      	mov	r4, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7f5 fe51 	bl	8000d34 <__aeabi_fmul>
 800b092:	4603      	mov	r3, r0
 800b094:	4619      	mov	r1, r3
 800b096:	4620      	mov	r0, r4
 800b098:	f7f5 fd42 	bl	8000b20 <__aeabi_fsub>
 800b09c:	4603      	mov	r3, r0
 800b09e:	461c      	mov	r4, r3
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7f5 fe44 	bl	8000d34 <__aeabi_fmul>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f7f5 fd35 	bl	8000b20 <__aeabi_fsub>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	649a      	str	r2, [r3, #72]	; 0x48


    S23_pitch = - S23_pitch*(Kt22_pitch - 1) - Kt21_pitch*S13_pitch - Kt22_pitch*S33_pitch;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0c2:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b0c6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b0ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0cc:	f7f5 fd28 	bl	8000b20 <__aeabi_fsub>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	f7f5 fe2d 	bl	8000d34 <__aeabi_fmul>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	461c      	mov	r4, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7f5 fe25 	bl	8000d34 <__aeabi_fmul>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f7f5 fd16 	bl	8000b20 <__aeabi_fsub>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	461c      	mov	r4, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7f5 fe18 	bl	8000d34 <__aeabi_fmul>
 800b104:	4603      	mov	r3, r0
 800b106:	4619      	mov	r1, r3
 800b108:	4620      	mov	r0, r4
 800b10a:	f7f5 fd09 	bl	8000b20 <__aeabi_fsub>
 800b10e:	4603      	mov	r3, r0
 800b110:	461a      	mov	r2, r3
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	651a      	str	r2, [r3, #80]	; 0x50


    S31_pitch = - S31_pitch*(Kt32_pitch - 1) - Kt31_pitch*S11_pitch - Kt32_pitch*S21_pitch;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b11a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b11e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b122:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b124:	f7f5 fcfc 	bl	8000b20 <__aeabi_fsub>
 800b128:	4603      	mov	r3, r0
 800b12a:	4619      	mov	r1, r3
 800b12c:	4620      	mov	r0, r4
 800b12e:	f7f5 fe01 	bl	8000d34 <__aeabi_fmul>
 800b132:	4603      	mov	r3, r0
 800b134:	461c      	mov	r4, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b13a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7f5 fdf9 	bl	8000d34 <__aeabi_fmul>
 800b142:	4603      	mov	r3, r0
 800b144:	4619      	mov	r1, r3
 800b146:	4620      	mov	r0, r4
 800b148:	f7f5 fcea 	bl	8000b20 <__aeabi_fsub>
 800b14c:	4603      	mov	r3, r0
 800b14e:	461c      	mov	r4, r3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b156:	4618      	mov	r0, r3
 800b158:	f7f5 fdec 	bl	8000d34 <__aeabi_fmul>
 800b15c:	4603      	mov	r3, r0
 800b15e:	4619      	mov	r1, r3
 800b160:	4620      	mov	r0, r4
 800b162:	f7f5 fcdd 	bl	8000b20 <__aeabi_fsub>
 800b166:	4603      	mov	r3, r0
 800b168:	461a      	mov	r2, r3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	655a      	str	r2, [r3, #84]	; 0x54


    S32_pitch = - S32_pitch*(Kt32_pitch - 1) - Kt31_pitch*S12_pitch - Kt32_pitch*S22_pitch;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b172:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b176:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b17a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b17c:	f7f5 fcd0 	bl	8000b20 <__aeabi_fsub>
 800b180:	4603      	mov	r3, r0
 800b182:	4619      	mov	r1, r3
 800b184:	4620      	mov	r0, r4
 800b186:	f7f5 fdd5 	bl	8000d34 <__aeabi_fmul>
 800b18a:	4603      	mov	r3, r0
 800b18c:	461c      	mov	r4, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b192:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b194:	4618      	mov	r0, r3
 800b196:	f7f5 fdcd 	bl	8000d34 <__aeabi_fmul>
 800b19a:	4603      	mov	r3, r0
 800b19c:	4619      	mov	r1, r3
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f7f5 fcbe 	bl	8000b20 <__aeabi_fsub>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	461c      	mov	r4, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7f5 fdc0 	bl	8000d34 <__aeabi_fmul>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	f7f5 fcb1 	bl	8000b20 <__aeabi_fsub>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	659a      	str	r2, [r3, #88]	; 0x58


    S33_pitch = - S33_pitch*(Kt32_pitch - 1) - Kt31_pitch*S13_pitch - Kt32_pitch*S23_pitch;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1ca:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800b1ce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b1d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1d4:	f7f5 fca4 	bl	8000b20 <__aeabi_fsub>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	4619      	mov	r1, r3
 800b1dc:	4620      	mov	r0, r4
 800b1de:	f7f5 fda9 	bl	8000d34 <__aeabi_fmul>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	461c      	mov	r4, r3
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7f5 fda1 	bl	8000d34 <__aeabi_fmul>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	f7f5 fc92 	bl	8000b20 <__aeabi_fsub>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	461c      	mov	r4, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b204:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b206:	4618      	mov	r0, r3
 800b208:	f7f5 fd94 	bl	8000d34 <__aeabi_fmul>
 800b20c:	4603      	mov	r3, r0
 800b20e:	4619      	mov	r1, r3
 800b210:	4620      	mov	r0, r4
 800b212:	f7f5 fc85 	bl	8000b20 <__aeabi_fsub>
 800b216:	4603      	mov	r3, r0
 800b218:	461a      	mov	r2, r3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	65da      	str	r2, [r3, #92]	; 0x5c

/*
  roll_rate  = lpf_roll.Run(gyroX);
  pitch_rate = lpf_pitch.Run(gyroY);*/

  yaw_rate   = lpf_yaw.Run(gyroZ);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800b224:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b226:	4618      	mov	r0, r3
 800b228:	f001 fd29 	bl	800cc7e <_ZN3lpf3RunEf>
 800b22c:	4603      	mov	r3, r0
 800b22e:	4618      	mov	r0, r3
 800b230:	f7f5 f8f2 	bl	8000418 <__aeabi_f2d>
 800b234:	4602      	mov	r2, r0
 800b236:	460b      	mov	r3, r1
 800b238:	6879      	ldr	r1, [r7, #4]
 800b23a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 800b23e:	e01b      	b.n	800b278 <_ZN15Kalman_Filtresi3RunEv+0x20d8>
    //=================================

    }

    else {
    	roll_ekf = roll_acc;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    	pitch_ekf = pitch_acc;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

    	roll_comp  = roll_acc;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    	pitch_comp = pitch_acc;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

    	gyro_ready = true;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    }

      float u = acc_vert;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800b27e:	623b      	str	r3, [r7, #32]

      //ALT PREDICTION
	  alt_gnd = (alt_gnd) + st*(vz) + (u*(st)*st)/2;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800b286:	4618      	mov	r0, r3
 800b288:	f7f5 f8c6 	bl	8000418 <__aeabi_f2d>
 800b28c:	4680      	mov	r8, r0
 800b28e:	4689      	mov	r9, r1
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7f5 f8bb 	bl	8000418 <__aeabi_f2d>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	f7f5 f90d 	bl	80004c8 <__aeabi_dmul>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	4640      	mov	r0, r8
 800b2b4:	4649      	mov	r1, r9
 800b2b6:	f7f4 ff51 	bl	800015c <__adddf3>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	460b      	mov	r3, r1
 800b2be:	4614      	mov	r4, r2
 800b2c0:	461d      	mov	r5, r3
 800b2c2:	6a38      	ldr	r0, [r7, #32]
 800b2c4:	f7f5 f8a8 	bl	8000418 <__aeabi_f2d>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800b2ce:	f7f5 f8fb 	bl	80004c8 <__aeabi_dmul>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	4610      	mov	r0, r2
 800b2d8:	4619      	mov	r1, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800b2e0:	f7f5 f8f2 	bl	80004c8 <__aeabi_dmul>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	4610      	mov	r0, r2
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	f04f 0200 	mov.w	r2, #0
 800b2f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b2f4:	f7f5 fa12 	bl	800071c <__aeabi_ddiv>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	4629      	mov	r1, r5
 800b300:	f7f4 ff2c 	bl	800015c <__adddf3>
 800b304:	4602      	mov	r2, r0
 800b306:	460b      	mov	r3, r1
 800b308:	4610      	mov	r0, r2
 800b30a:	4619      	mov	r1, r3
 800b30c:	f7f5 fbb4 	bl	8000a78 <__aeabi_d2f>
 800b310:	4602      	mov	r2, r0
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	  vz = (vz) + u*(st);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800b31e:	4618      	mov	r0, r3
 800b320:	f7f5 f87a 	bl	8000418 <__aeabi_f2d>
 800b324:	4604      	mov	r4, r0
 800b326:	460d      	mov	r5, r1
 800b328:	6a38      	ldr	r0, [r7, #32]
 800b32a:	f7f5 f875 	bl	8000418 <__aeabi_f2d>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800b334:	f7f5 f8c8 	bl	80004c8 <__aeabi_dmul>
 800b338:	4602      	mov	r2, r0
 800b33a:	460b      	mov	r3, r1
 800b33c:	4620      	mov	r0, r4
 800b33e:	4629      	mov	r1, r5
 800b340:	f7f4 ff0c 	bl	800015c <__adddf3>
 800b344:	4602      	mov	r2, r0
 800b346:	460b      	mov	r3, r1
 800b348:	4610      	mov	r0, r2
 800b34a:	4619      	mov	r1, r3
 800b34c:	f7f5 fb94 	bl	8000a78 <__aeabi_d2f>
 800b350:	4602      	mov	r2, r0
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	  //baro_gnd = (baro_gnd);

	  S11_alt = S11_alt + salt + S21_alt*st + (st)*(S12_alt + S22_alt*st);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800b364:	4619      	mov	r1, r3
 800b366:	4610      	mov	r0, r2
 800b368:	f7f5 fbdc 	bl	8000b24 <__addsf3>
 800b36c:	4603      	mov	r3, r0
 800b36e:	4618      	mov	r0, r3
 800b370:	f7f5 f852 	bl	8000418 <__aeabi_f2d>
 800b374:	4604      	mov	r4, r0
 800b376:	460d      	mov	r5, r1
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b37e:	4618      	mov	r0, r3
 800b380:	f7f5 f84a 	bl	8000418 <__aeabi_f2d>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800b38a:	f7f5 f89d 	bl	80004c8 <__aeabi_dmul>
 800b38e:	4602      	mov	r2, r0
 800b390:	460b      	mov	r3, r1
 800b392:	4620      	mov	r0, r4
 800b394:	4629      	mov	r1, r5
 800b396:	f7f4 fee1 	bl	800015c <__adddf3>
 800b39a:	4602      	mov	r2, r0
 800b39c:	460b      	mov	r3, r1
 800b39e:	4692      	mov	sl, r2
 800b3a0:	469b      	mov	fp, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7f5 f832 	bl	8000418 <__aeabi_f2d>
 800b3b4:	4680      	mov	r8, r0
 800b3b6:	4689      	mov	r9, r1
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7f5 f82a 	bl	8000418 <__aeabi_f2d>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800b3ca:	f7f5 f87d 	bl	80004c8 <__aeabi_dmul>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	4640      	mov	r0, r8
 800b3d4:	4649      	mov	r1, r9
 800b3d6:	f7f4 fec1 	bl	800015c <__adddf3>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	460b      	mov	r3, r1
 800b3de:	4620      	mov	r0, r4
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	f7f5 f871 	bl	80004c8 <__aeabi_dmul>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	4650      	mov	r0, sl
 800b3ec:	4659      	mov	r1, fp
 800b3ee:	f7f4 feb5 	bl	800015c <__adddf3>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	f7f5 fb3d 	bl	8000a78 <__aeabi_d2f>
 800b3fe:	4602      	mov	r2, r0
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	  S12_alt = S12_alt + S22_alt*st;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7f5 f803 	bl	8000418 <__aeabi_f2d>
 800b412:	4604      	mov	r4, r0
 800b414:	460d      	mov	r5, r1
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7f4 fffb 	bl	8000418 <__aeabi_f2d>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800b428:	f7f5 f84e 	bl	80004c8 <__aeabi_dmul>
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	4620      	mov	r0, r4
 800b432:	4629      	mov	r1, r5
 800b434:	f7f4 fe92 	bl	800015c <__adddf3>
 800b438:	4602      	mov	r2, r0
 800b43a:	460b      	mov	r3, r1
 800b43c:	4610      	mov	r0, r2
 800b43e:	4619      	mov	r1, r3
 800b440:	f7f5 fb1a 	bl	8000a78 <__aeabi_d2f>
 800b444:	4602      	mov	r2, r0
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	  S13_alt = S13_alt + S23_alt*st;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b452:	4618      	mov	r0, r3
 800b454:	f7f4 ffe0 	bl	8000418 <__aeabi_f2d>
 800b458:	4604      	mov	r4, r0
 800b45a:	460d      	mov	r5, r1
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b462:	4618      	mov	r0, r3
 800b464:	f7f4 ffd8 	bl	8000418 <__aeabi_f2d>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800b46e:	f7f5 f82b 	bl	80004c8 <__aeabi_dmul>
 800b472:	4602      	mov	r2, r0
 800b474:	460b      	mov	r3, r1
 800b476:	4620      	mov	r0, r4
 800b478:	4629      	mov	r1, r5
 800b47a:	f7f4 fe6f 	bl	800015c <__adddf3>
 800b47e:	4602      	mov	r2, r0
 800b480:	460b      	mov	r3, r1
 800b482:	4610      	mov	r0, r2
 800b484:	4619      	mov	r1, r3
 800b486:	f7f5 faf7 	bl	8000a78 <__aeabi_d2f>
 800b48a:	4602      	mov	r2, r0
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	  S21_alt = S21_alt + S22_alt*(st);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b498:	4618      	mov	r0, r3
 800b49a:	f7f4 ffbd 	bl	8000418 <__aeabi_f2d>
 800b49e:	4604      	mov	r4, r0
 800b4a0:	460d      	mov	r5, r1
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7f4 ffb5 	bl	8000418 <__aeabi_f2d>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800b4b4:	f7f5 f808 	bl	80004c8 <__aeabi_dmul>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	4620      	mov	r0, r4
 800b4be:	4629      	mov	r1, r5
 800b4c0:	f7f4 fe4c 	bl	800015c <__adddf3>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	4610      	mov	r0, r2
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	f7f5 fad4 	bl	8000a78 <__aeabi_d2f>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	  S22_alt =  S22_alt + svel;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	4610      	mov	r0, r2
 800b4e8:	f7f5 fb1c 	bl	8000b24 <__addsf3>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	  //S23_alt = S23_alt;

	  S31_alt = S31_alt + S32_alt*(st);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7f4 ff8b 	bl	8000418 <__aeabi_f2d>
 800b502:	4604      	mov	r4, r0
 800b504:	460d      	mov	r5, r1
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7f4 ff83 	bl	8000418 <__aeabi_f2d>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800b518:	f7f4 ffd6 	bl	80004c8 <__aeabi_dmul>
 800b51c:	4602      	mov	r2, r0
 800b51e:	460b      	mov	r3, r1
 800b520:	4620      	mov	r0, r4
 800b522:	4629      	mov	r1, r5
 800b524:	f7f4 fe1a 	bl	800015c <__adddf3>
 800b528:	4602      	mov	r2, r0
 800b52a:	460b      	mov	r3, r1
 800b52c:	4610      	mov	r0, r2
 800b52e:	4619      	mov	r1, r3
 800b530:	f7f5 faa2 	bl	8000a78 <__aeabi_d2f>
 800b534:	4602      	mov	r2, r0
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	  //S32_alt = S32_alt;
	  S33_alt = S33_alt + sbar;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b548:	4619      	mov	r1, r3
 800b54a:	4610      	mov	r0, r2
 800b54c:	f7f5 faea 	bl	8000b24 <__addsf3>
 800b550:	4603      	mov	r3, r0
 800b552:	461a      	mov	r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

	  //ALT CORRECTION
	  float Kt11 = (Qs*(S11_alt + S13_alt))/(Qb*Qs + Qb*S11_alt + Qs*S11_alt + Qs*S13_alt + Qs*S31_alt + Qs*S33_alt + S11_alt*S33_alt - S13_alt*S31_alt);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8d3 415c 	ldr.w	r4, [r3, #348]	; 0x15c
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b56c:	4619      	mov	r1, r3
 800b56e:	4610      	mov	r0, r2
 800b570:	f7f5 fad8 	bl	8000b24 <__addsf3>
 800b574:	4603      	mov	r3, r0
 800b576:	4619      	mov	r1, r3
 800b578:	4620      	mov	r0, r4
 800b57a:	f7f5 fbdb 	bl	8000d34 <__aeabi_fmul>
 800b57e:	4603      	mov	r3, r0
 800b580:	461c      	mov	r4, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800b58e:	4619      	mov	r1, r3
 800b590:	4610      	mov	r0, r2
 800b592:	f7f5 fbcf 	bl	8000d34 <__aeabi_fmul>
 800b596:	4603      	mov	r3, r0
 800b598:	461d      	mov	r5, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	4610      	mov	r0, r2
 800b5aa:	f7f5 fbc3 	bl	8000d34 <__aeabi_fmul>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	f7f5 fab6 	bl	8000b24 <__addsf3>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	461d      	mov	r5, r3
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	4610      	mov	r0, r2
 800b5cc:	f7f5 fbb2 	bl	8000d34 <__aeabi_fmul>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	f7f5 faa5 	bl	8000b24 <__addsf3>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	461d      	mov	r5, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	4610      	mov	r0, r2
 800b5ee:	f7f5 fba1 	bl	8000d34 <__aeabi_fmul>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	f7f5 fa94 	bl	8000b24 <__addsf3>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	461d      	mov	r5, r3
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b60c:	4619      	mov	r1, r3
 800b60e:	4610      	mov	r0, r2
 800b610:	f7f5 fb90 	bl	8000d34 <__aeabi_fmul>
 800b614:	4603      	mov	r3, r0
 800b616:	4619      	mov	r1, r3
 800b618:	4628      	mov	r0, r5
 800b61a:	f7f5 fa83 	bl	8000b24 <__addsf3>
 800b61e:	4603      	mov	r3, r0
 800b620:	461d      	mov	r5, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b62e:	4619      	mov	r1, r3
 800b630:	4610      	mov	r0, r2
 800b632:	f7f5 fb7f 	bl	8000d34 <__aeabi_fmul>
 800b636:	4603      	mov	r3, r0
 800b638:	4619      	mov	r1, r3
 800b63a:	4628      	mov	r0, r5
 800b63c:	f7f5 fa72 	bl	8000b24 <__addsf3>
 800b640:	4603      	mov	r3, r0
 800b642:	461d      	mov	r5, r3
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b650:	4619      	mov	r1, r3
 800b652:	4610      	mov	r0, r2
 800b654:	f7f5 fb6e 	bl	8000d34 <__aeabi_fmul>
 800b658:	4603      	mov	r3, r0
 800b65a:	4619      	mov	r1, r3
 800b65c:	4628      	mov	r0, r5
 800b65e:	f7f5 fa61 	bl	8000b24 <__addsf3>
 800b662:	4603      	mov	r3, r0
 800b664:	461d      	mov	r5, r3
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b672:	4619      	mov	r1, r3
 800b674:	4610      	mov	r0, r2
 800b676:	f7f5 fb5d 	bl	8000d34 <__aeabi_fmul>
 800b67a:	4603      	mov	r3, r0
 800b67c:	4619      	mov	r1, r3
 800b67e:	4628      	mov	r0, r5
 800b680:	f7f5 fa4e 	bl	8000b20 <__aeabi_fsub>
 800b684:	4603      	mov	r3, r0
 800b686:	4619      	mov	r1, r3
 800b688:	4620      	mov	r0, r4
 800b68a:	f7f5 fc07 	bl	8000e9c <__aeabi_fdiv>
 800b68e:	4603      	mov	r3, r0
 800b690:	61fb      	str	r3, [r7, #28]
	  float Kt12 = (Qb*S11_alt + S11_alt*S33_alt - S13_alt*S31_alt)/(Qb*Qs + Qb*S11_alt + Qs*S11_alt + Qs*S13_alt + Qs*S31_alt + Qs*S33_alt + S11_alt*S33_alt - S13_alt*S31_alt);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b69e:	4619      	mov	r1, r3
 800b6a0:	4610      	mov	r0, r2
 800b6a2:	f7f5 fb47 	bl	8000d34 <__aeabi_fmul>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	461c      	mov	r4, r3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	4610      	mov	r0, r2
 800b6ba:	f7f5 fb3b 	bl	8000d34 <__aeabi_fmul>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f7f5 fa2e 	bl	8000b24 <__addsf3>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	461c      	mov	r4, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b6d8:	4619      	mov	r1, r3
 800b6da:	4610      	mov	r0, r2
 800b6dc:	f7f5 fb2a 	bl	8000d34 <__aeabi_fmul>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f7f5 fa1b 	bl	8000b20 <__aeabi_fsub>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	461c      	mov	r4, r3
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	f7f5 fb19 	bl	8000d34 <__aeabi_fmul>
 800b702:	4603      	mov	r3, r0
 800b704:	461d      	mov	r5, r3
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b712:	4619      	mov	r1, r3
 800b714:	4610      	mov	r0, r2
 800b716:	f7f5 fb0d 	bl	8000d34 <__aeabi_fmul>
 800b71a:	4603      	mov	r3, r0
 800b71c:	4619      	mov	r1, r3
 800b71e:	4628      	mov	r0, r5
 800b720:	f7f5 fa00 	bl	8000b24 <__addsf3>
 800b724:	4603      	mov	r3, r0
 800b726:	461d      	mov	r5, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b734:	4619      	mov	r1, r3
 800b736:	4610      	mov	r0, r2
 800b738:	f7f5 fafc 	bl	8000d34 <__aeabi_fmul>
 800b73c:	4603      	mov	r3, r0
 800b73e:	4619      	mov	r1, r3
 800b740:	4628      	mov	r0, r5
 800b742:	f7f5 f9ef 	bl	8000b24 <__addsf3>
 800b746:	4603      	mov	r3, r0
 800b748:	461d      	mov	r5, r3
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b756:	4619      	mov	r1, r3
 800b758:	4610      	mov	r0, r2
 800b75a:	f7f5 faeb 	bl	8000d34 <__aeabi_fmul>
 800b75e:	4603      	mov	r3, r0
 800b760:	4619      	mov	r1, r3
 800b762:	4628      	mov	r0, r5
 800b764:	f7f5 f9de 	bl	8000b24 <__addsf3>
 800b768:	4603      	mov	r3, r0
 800b76a:	461d      	mov	r5, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b778:	4619      	mov	r1, r3
 800b77a:	4610      	mov	r0, r2
 800b77c:	f7f5 fada 	bl	8000d34 <__aeabi_fmul>
 800b780:	4603      	mov	r3, r0
 800b782:	4619      	mov	r1, r3
 800b784:	4628      	mov	r0, r5
 800b786:	f7f5 f9cd 	bl	8000b24 <__addsf3>
 800b78a:	4603      	mov	r3, r0
 800b78c:	461d      	mov	r5, r3
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b79a:	4619      	mov	r1, r3
 800b79c:	4610      	mov	r0, r2
 800b79e:	f7f5 fac9 	bl	8000d34 <__aeabi_fmul>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	f7f5 f9bc 	bl	8000b24 <__addsf3>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	461d      	mov	r5, r3
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b7bc:	4619      	mov	r1, r3
 800b7be:	4610      	mov	r0, r2
 800b7c0:	f7f5 fab8 	bl	8000d34 <__aeabi_fmul>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	f7f5 f9ab 	bl	8000b24 <__addsf3>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	461d      	mov	r5, r3
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b7de:	4619      	mov	r1, r3
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	f7f5 faa7 	bl	8000d34 <__aeabi_fmul>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	f7f5 f998 	bl	8000b20 <__aeabi_fsub>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	f7f5 fb51 	bl	8000e9c <__aeabi_fdiv>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	61bb      	str	r3, [r7, #24]

	  float Kt21 = (Qs*S21_alt + Qs*S23_alt + S11_alt*S23_alt - S13_alt*S21_alt)/(Qb*Qs + Qb*S11_alt + Qs*S11_alt + Qs*S13_alt + Qs*S31_alt + Qs*S33_alt + S11_alt*S33_alt - S13_alt*S31_alt);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b80a:	4619      	mov	r1, r3
 800b80c:	4610      	mov	r0, r2
 800b80e:	f7f5 fa91 	bl	8000d34 <__aeabi_fmul>
 800b812:	4603      	mov	r3, r0
 800b814:	461c      	mov	r4, r3
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b822:	4619      	mov	r1, r3
 800b824:	4610      	mov	r0, r2
 800b826:	f7f5 fa85 	bl	8000d34 <__aeabi_fmul>
 800b82a:	4603      	mov	r3, r0
 800b82c:	4619      	mov	r1, r3
 800b82e:	4620      	mov	r0, r4
 800b830:	f7f5 f978 	bl	8000b24 <__addsf3>
 800b834:	4603      	mov	r3, r0
 800b836:	461c      	mov	r4, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b844:	4619      	mov	r1, r3
 800b846:	4610      	mov	r0, r2
 800b848:	f7f5 fa74 	bl	8000d34 <__aeabi_fmul>
 800b84c:	4603      	mov	r3, r0
 800b84e:	4619      	mov	r1, r3
 800b850:	4620      	mov	r0, r4
 800b852:	f7f5 f967 	bl	8000b24 <__addsf3>
 800b856:	4603      	mov	r3, r0
 800b858:	461c      	mov	r4, r3
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b866:	4619      	mov	r1, r3
 800b868:	4610      	mov	r0, r2
 800b86a:	f7f5 fa63 	bl	8000d34 <__aeabi_fmul>
 800b86e:	4603      	mov	r3, r0
 800b870:	4619      	mov	r1, r3
 800b872:	4620      	mov	r0, r4
 800b874:	f7f5 f954 	bl	8000b20 <__aeabi_fsub>
 800b878:	4603      	mov	r3, r0
 800b87a:	461c      	mov	r4, r3
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800b888:	4619      	mov	r1, r3
 800b88a:	4610      	mov	r0, r2
 800b88c:	f7f5 fa52 	bl	8000d34 <__aeabi_fmul>
 800b890:	4603      	mov	r3, r0
 800b892:	461d      	mov	r5, r3
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	4610      	mov	r0, r2
 800b8a4:	f7f5 fa46 	bl	8000d34 <__aeabi_fmul>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	4628      	mov	r0, r5
 800b8ae:	f7f5 f939 	bl	8000b24 <__addsf3>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	461d      	mov	r5, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	4610      	mov	r0, r2
 800b8c6:	f7f5 fa35 	bl	8000d34 <__aeabi_fmul>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	f7f5 f928 	bl	8000b24 <__addsf3>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	461d      	mov	r5, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	4610      	mov	r0, r2
 800b8e8:	f7f5 fa24 	bl	8000d34 <__aeabi_fmul>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	4628      	mov	r0, r5
 800b8f2:	f7f5 f917 	bl	8000b24 <__addsf3>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	461d      	mov	r5, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b906:	4619      	mov	r1, r3
 800b908:	4610      	mov	r0, r2
 800b90a:	f7f5 fa13 	bl	8000d34 <__aeabi_fmul>
 800b90e:	4603      	mov	r3, r0
 800b910:	4619      	mov	r1, r3
 800b912:	4628      	mov	r0, r5
 800b914:	f7f5 f906 	bl	8000b24 <__addsf3>
 800b918:	4603      	mov	r3, r0
 800b91a:	461d      	mov	r5, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b928:	4619      	mov	r1, r3
 800b92a:	4610      	mov	r0, r2
 800b92c:	f7f5 fa02 	bl	8000d34 <__aeabi_fmul>
 800b930:	4603      	mov	r3, r0
 800b932:	4619      	mov	r1, r3
 800b934:	4628      	mov	r0, r5
 800b936:	f7f5 f8f5 	bl	8000b24 <__addsf3>
 800b93a:	4603      	mov	r3, r0
 800b93c:	461d      	mov	r5, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b94a:	4619      	mov	r1, r3
 800b94c:	4610      	mov	r0, r2
 800b94e:	f7f5 f9f1 	bl	8000d34 <__aeabi_fmul>
 800b952:	4603      	mov	r3, r0
 800b954:	4619      	mov	r1, r3
 800b956:	4628      	mov	r0, r5
 800b958:	f7f5 f8e4 	bl	8000b24 <__addsf3>
 800b95c:	4603      	mov	r3, r0
 800b95e:	461d      	mov	r5, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b96c:	4619      	mov	r1, r3
 800b96e:	4610      	mov	r0, r2
 800b970:	f7f5 f9e0 	bl	8000d34 <__aeabi_fmul>
 800b974:	4603      	mov	r3, r0
 800b976:	4619      	mov	r1, r3
 800b978:	4628      	mov	r0, r5
 800b97a:	f7f5 f8d1 	bl	8000b20 <__aeabi_fsub>
 800b97e:	4603      	mov	r3, r0
 800b980:	4619      	mov	r1, r3
 800b982:	4620      	mov	r0, r4
 800b984:	f7f5 fa8a 	bl	8000e9c <__aeabi_fdiv>
 800b988:	4603      	mov	r3, r0
 800b98a:	617b      	str	r3, [r7, #20]
	  float Kt22 = (Qb*S21_alt - S11_alt*S23_alt + S13_alt*S21_alt + S21_alt*S33_alt - S23_alt*S31_alt)/(Qb*Qs + Qb*S11_alt + Qs*S11_alt + Qs*S13_alt + Qs*S31_alt + Qs*S33_alt + S11_alt*S33_alt - S13_alt*S31_alt);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b998:	4619      	mov	r1, r3
 800b99a:	4610      	mov	r0, r2
 800b99c:	f7f5 f9ca 	bl	8000d34 <__aeabi_fmul>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	461c      	mov	r4, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	4610      	mov	r0, r2
 800b9b4:	f7f5 f9be 	bl	8000d34 <__aeabi_fmul>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	4620      	mov	r0, r4
 800b9be:	f7f5 f8af 	bl	8000b20 <__aeabi_fsub>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	461c      	mov	r4, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	4610      	mov	r0, r2
 800b9d6:	f7f5 f9ad 	bl	8000d34 <__aeabi_fmul>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	4619      	mov	r1, r3
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f7f5 f8a0 	bl	8000b24 <__addsf3>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	461c      	mov	r4, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	4610      	mov	r0, r2
 800b9f8:	f7f5 f99c 	bl	8000d34 <__aeabi_fmul>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	4619      	mov	r1, r3
 800ba00:	4620      	mov	r0, r4
 800ba02:	f7f5 f88f 	bl	8000b24 <__addsf3>
 800ba06:	4603      	mov	r3, r0
 800ba08:	461c      	mov	r4, r3
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ba16:	4619      	mov	r1, r3
 800ba18:	4610      	mov	r0, r2
 800ba1a:	f7f5 f98b 	bl	8000d34 <__aeabi_fmul>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	4619      	mov	r1, r3
 800ba22:	4620      	mov	r0, r4
 800ba24:	f7f5 f87c 	bl	8000b20 <__aeabi_fsub>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	461c      	mov	r4, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800ba38:	4619      	mov	r1, r3
 800ba3a:	4610      	mov	r0, r2
 800ba3c:	f7f5 f97a 	bl	8000d34 <__aeabi_fmul>
 800ba40:	4603      	mov	r3, r0
 800ba42:	461d      	mov	r5, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba50:	4619      	mov	r1, r3
 800ba52:	4610      	mov	r0, r2
 800ba54:	f7f5 f96e 	bl	8000d34 <__aeabi_fmul>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	f7f5 f861 	bl	8000b24 <__addsf3>
 800ba62:	4603      	mov	r3, r0
 800ba64:	461d      	mov	r5, r3
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba72:	4619      	mov	r1, r3
 800ba74:	4610      	mov	r0, r2
 800ba76:	f7f5 f95d 	bl	8000d34 <__aeabi_fmul>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	4628      	mov	r0, r5
 800ba80:	f7f5 f850 	bl	8000b24 <__addsf3>
 800ba84:	4603      	mov	r3, r0
 800ba86:	461d      	mov	r5, r3
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ba94:	4619      	mov	r1, r3
 800ba96:	4610      	mov	r0, r2
 800ba98:	f7f5 f94c 	bl	8000d34 <__aeabi_fmul>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	4619      	mov	r1, r3
 800baa0:	4628      	mov	r0, r5
 800baa2:	f7f5 f83f 	bl	8000b24 <__addsf3>
 800baa6:	4603      	mov	r3, r0
 800baa8:	461d      	mov	r5, r3
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bab6:	4619      	mov	r1, r3
 800bab8:	4610      	mov	r0, r2
 800baba:	f7f5 f93b 	bl	8000d34 <__aeabi_fmul>
 800babe:	4603      	mov	r3, r0
 800bac0:	4619      	mov	r1, r3
 800bac2:	4628      	mov	r0, r5
 800bac4:	f7f5 f82e 	bl	8000b24 <__addsf3>
 800bac8:	4603      	mov	r3, r0
 800baca:	461d      	mov	r5, r3
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bad8:	4619      	mov	r1, r3
 800bada:	4610      	mov	r0, r2
 800badc:	f7f5 f92a 	bl	8000d34 <__aeabi_fmul>
 800bae0:	4603      	mov	r3, r0
 800bae2:	4619      	mov	r1, r3
 800bae4:	4628      	mov	r0, r5
 800bae6:	f7f5 f81d 	bl	8000b24 <__addsf3>
 800baea:	4603      	mov	r3, r0
 800baec:	461d      	mov	r5, r3
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bafa:	4619      	mov	r1, r3
 800bafc:	4610      	mov	r0, r2
 800bafe:	f7f5 f919 	bl	8000d34 <__aeabi_fmul>
 800bb02:	4603      	mov	r3, r0
 800bb04:	4619      	mov	r1, r3
 800bb06:	4628      	mov	r0, r5
 800bb08:	f7f5 f80c 	bl	8000b24 <__addsf3>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	461d      	mov	r5, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	4610      	mov	r0, r2
 800bb20:	f7f5 f908 	bl	8000d34 <__aeabi_fmul>
 800bb24:	4603      	mov	r3, r0
 800bb26:	4619      	mov	r1, r3
 800bb28:	4628      	mov	r0, r5
 800bb2a:	f7f4 fff9 	bl	8000b20 <__aeabi_fsub>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	4619      	mov	r1, r3
 800bb32:	4620      	mov	r0, r4
 800bb34:	f7f5 f9b2 	bl	8000e9c <__aeabi_fdiv>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	613b      	str	r3, [r7, #16]

	  float Kt31 = (Qs*S31_alt + Qs*S33_alt + S11_alt*S33_alt - S13_alt*S31_alt)/(Qb*Qs + Qb*S11_alt + Qs*S11_alt + Qs*S13_alt + Qs*S31_alt + Qs*S33_alt + S11_alt*S33_alt - S13_alt*S31_alt);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bb48:	4619      	mov	r1, r3
 800bb4a:	4610      	mov	r0, r2
 800bb4c:	f7f5 f8f2 	bl	8000d34 <__aeabi_fmul>
 800bb50:	4603      	mov	r3, r0
 800bb52:	461c      	mov	r4, r3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bb60:	4619      	mov	r1, r3
 800bb62:	4610      	mov	r0, r2
 800bb64:	f7f5 f8e6 	bl	8000d34 <__aeabi_fmul>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	f7f4 ffd9 	bl	8000b24 <__addsf3>
 800bb72:	4603      	mov	r3, r0
 800bb74:	461c      	mov	r4, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bb82:	4619      	mov	r1, r3
 800bb84:	4610      	mov	r0, r2
 800bb86:	f7f5 f8d5 	bl	8000d34 <__aeabi_fmul>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	4620      	mov	r0, r4
 800bb90:	f7f4 ffc8 	bl	8000b24 <__addsf3>
 800bb94:	4603      	mov	r3, r0
 800bb96:	461c      	mov	r4, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bba4:	4619      	mov	r1, r3
 800bba6:	4610      	mov	r0, r2
 800bba8:	f7f5 f8c4 	bl	8000d34 <__aeabi_fmul>
 800bbac:	4603      	mov	r3, r0
 800bbae:	4619      	mov	r1, r3
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f7f4 ffb5 	bl	8000b20 <__aeabi_fsub>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	461c      	mov	r4, r3
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	4610      	mov	r0, r2
 800bbca:	f7f5 f8b3 	bl	8000d34 <__aeabi_fmul>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	461d      	mov	r5, r3
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bbde:	4619      	mov	r1, r3
 800bbe0:	4610      	mov	r0, r2
 800bbe2:	f7f5 f8a7 	bl	8000d34 <__aeabi_fmul>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	4619      	mov	r1, r3
 800bbea:	4628      	mov	r0, r5
 800bbec:	f7f4 ff9a 	bl	8000b24 <__addsf3>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	461d      	mov	r5, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc00:	4619      	mov	r1, r3
 800bc02:	4610      	mov	r0, r2
 800bc04:	f7f5 f896 	bl	8000d34 <__aeabi_fmul>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	f7f4 ff89 	bl	8000b24 <__addsf3>
 800bc12:	4603      	mov	r3, r0
 800bc14:	461d      	mov	r5, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bc22:	4619      	mov	r1, r3
 800bc24:	4610      	mov	r0, r2
 800bc26:	f7f5 f885 	bl	8000d34 <__aeabi_fmul>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	4628      	mov	r0, r5
 800bc30:	f7f4 ff78 	bl	8000b24 <__addsf3>
 800bc34:	4603      	mov	r3, r0
 800bc36:	461d      	mov	r5, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc44:	4619      	mov	r1, r3
 800bc46:	4610      	mov	r0, r2
 800bc48:	f7f5 f874 	bl	8000d34 <__aeabi_fmul>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	4619      	mov	r1, r3
 800bc50:	4628      	mov	r0, r5
 800bc52:	f7f4 ff67 	bl	8000b24 <__addsf3>
 800bc56:	4603      	mov	r3, r0
 800bc58:	461d      	mov	r5, r3
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bc66:	4619      	mov	r1, r3
 800bc68:	4610      	mov	r0, r2
 800bc6a:	f7f5 f863 	bl	8000d34 <__aeabi_fmul>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	4619      	mov	r1, r3
 800bc72:	4628      	mov	r0, r5
 800bc74:	f7f4 ff56 	bl	8000b24 <__addsf3>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	461d      	mov	r5, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bc88:	4619      	mov	r1, r3
 800bc8a:	4610      	mov	r0, r2
 800bc8c:	f7f5 f852 	bl	8000d34 <__aeabi_fmul>
 800bc90:	4603      	mov	r3, r0
 800bc92:	4619      	mov	r1, r3
 800bc94:	4628      	mov	r0, r5
 800bc96:	f7f4 ff45 	bl	8000b24 <__addsf3>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	461d      	mov	r5, r3
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bcaa:	4619      	mov	r1, r3
 800bcac:	4610      	mov	r0, r2
 800bcae:	f7f5 f841 	bl	8000d34 <__aeabi_fmul>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	f7f4 ff32 	bl	8000b20 <__aeabi_fsub>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	f7f5 f8eb 	bl	8000e9c <__aeabi_fdiv>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	60fb      	str	r3, [r7, #12]
	  float Kt32 = (Qb*S31_alt - S11_alt*S33_alt + S13_alt*S31_alt)/(Qb*Qs + Qb*S11_alt + Qs*S11_alt + Qs*S13_alt + Qs*S31_alt + Qs*S33_alt + S11_alt*S33_alt - S13_alt*S31_alt);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	4610      	mov	r0, r2
 800bcda:	f7f5 f82b 	bl	8000d34 <__aeabi_fmul>
 800bcde:	4603      	mov	r3, r0
 800bce0:	461c      	mov	r4, r3
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bcee:	4619      	mov	r1, r3
 800bcf0:	4610      	mov	r0, r2
 800bcf2:	f7f5 f81f 	bl	8000d34 <__aeabi_fmul>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f7f4 ff10 	bl	8000b20 <__aeabi_fsub>
 800bd00:	4603      	mov	r3, r0
 800bd02:	461c      	mov	r4, r3
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd10:	4619      	mov	r1, r3
 800bd12:	4610      	mov	r0, r2
 800bd14:	f7f5 f80e 	bl	8000d34 <__aeabi_fmul>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	f7f4 ff01 	bl	8000b24 <__addsf3>
 800bd22:	4603      	mov	r3, r0
 800bd24:	461c      	mov	r4, r3
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800bd32:	4619      	mov	r1, r3
 800bd34:	4610      	mov	r0, r2
 800bd36:	f7f4 fffd 	bl	8000d34 <__aeabi_fmul>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	461d      	mov	r5, r3
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	4610      	mov	r0, r2
 800bd4e:	f7f4 fff1 	bl	8000d34 <__aeabi_fmul>
 800bd52:	4603      	mov	r3, r0
 800bd54:	4619      	mov	r1, r3
 800bd56:	4628      	mov	r0, r5
 800bd58:	f7f4 fee4 	bl	8000b24 <__addsf3>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	461d      	mov	r5, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	4610      	mov	r0, r2
 800bd70:	f7f4 ffe0 	bl	8000d34 <__aeabi_fmul>
 800bd74:	4603      	mov	r3, r0
 800bd76:	4619      	mov	r1, r3
 800bd78:	4628      	mov	r0, r5
 800bd7a:	f7f4 fed3 	bl	8000b24 <__addsf3>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	461d      	mov	r5, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bd8e:	4619      	mov	r1, r3
 800bd90:	4610      	mov	r0, r2
 800bd92:	f7f4 ffcf 	bl	8000d34 <__aeabi_fmul>
 800bd96:	4603      	mov	r3, r0
 800bd98:	4619      	mov	r1, r3
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	f7f4 fec2 	bl	8000b24 <__addsf3>
 800bda0:	4603      	mov	r3, r0
 800bda2:	461d      	mov	r5, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	4610      	mov	r0, r2
 800bdb4:	f7f4 ffbe 	bl	8000d34 <__aeabi_fmul>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	4619      	mov	r1, r3
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	f7f4 feb1 	bl	8000b24 <__addsf3>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	461d      	mov	r5, r3
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	f7f4 ffad 	bl	8000d34 <__aeabi_fmul>
 800bdda:	4603      	mov	r3, r0
 800bddc:	4619      	mov	r1, r3
 800bdde:	4628      	mov	r0, r5
 800bde0:	f7f4 fea0 	bl	8000b24 <__addsf3>
 800bde4:	4603      	mov	r3, r0
 800bde6:	461d      	mov	r5, r3
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	4610      	mov	r0, r2
 800bdf8:	f7f4 ff9c 	bl	8000d34 <__aeabi_fmul>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	4619      	mov	r1, r3
 800be00:	4628      	mov	r0, r5
 800be02:	f7f4 fe8f 	bl	8000b24 <__addsf3>
 800be06:	4603      	mov	r3, r0
 800be08:	461d      	mov	r5, r3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800be16:	4619      	mov	r1, r3
 800be18:	4610      	mov	r0, r2
 800be1a:	f7f4 ff8b 	bl	8000d34 <__aeabi_fmul>
 800be1e:	4603      	mov	r3, r0
 800be20:	4619      	mov	r1, r3
 800be22:	4628      	mov	r0, r5
 800be24:	f7f4 fe7c 	bl	8000b20 <__aeabi_fsub>
 800be28:	4603      	mov	r3, r0
 800be2a:	4619      	mov	r1, r3
 800be2c:	4620      	mov	r0, r4
 800be2e:	f7f5 f835 	bl	8000e9c <__aeabi_fdiv>
 800be32:	4603      	mov	r3, r0
 800be34:	60bb      	str	r3, [r7, #8]

	  alt_gnd = (alt_gnd) - Kt12*((alt_gnd) - (sonar_alt)) - Kt11*((alt_gnd) - (baro_alt) + (baro_gnd));
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8d3 4168 	ldr.w	r4, [r3, #360]	; 0x168
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800be48:	4619      	mov	r1, r3
 800be4a:	4610      	mov	r0, r2
 800be4c:	f7f4 fe68 	bl	8000b20 <__aeabi_fsub>
 800be50:	4603      	mov	r3, r0
 800be52:	69b9      	ldr	r1, [r7, #24]
 800be54:	4618      	mov	r0, r3
 800be56:	f7f4 ff6d 	bl	8000d34 <__aeabi_fmul>
 800be5a:	4603      	mov	r3, r0
 800be5c:	4619      	mov	r1, r3
 800be5e:	4620      	mov	r0, r4
 800be60:	f7f4 fe5e 	bl	8000b20 <__aeabi_fsub>
 800be64:	4603      	mov	r3, r0
 800be66:	461c      	mov	r4, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800be74:	4619      	mov	r1, r3
 800be76:	4610      	mov	r0, r2
 800be78:	f7f4 fe52 	bl	8000b20 <__aeabi_fsub>
 800be7c:	4603      	mov	r3, r0
 800be7e:	461a      	mov	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800be86:	4619      	mov	r1, r3
 800be88:	4610      	mov	r0, r2
 800be8a:	f7f4 fe4b 	bl	8000b24 <__addsf3>
 800be8e:	4603      	mov	r3, r0
 800be90:	69f9      	ldr	r1, [r7, #28]
 800be92:	4618      	mov	r0, r3
 800be94:	f7f4 ff4e 	bl	8000d34 <__aeabi_fmul>
 800be98:	4603      	mov	r3, r0
 800be9a:	4619      	mov	r1, r3
 800be9c:	4620      	mov	r0, r4
 800be9e:	f7f4 fe3f 	bl	8000b20 <__aeabi_fsub>
 800bea2:	4603      	mov	r3, r0
 800bea4:	461a      	mov	r2, r3
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168


	  vz = (vz) - Kt22*((alt_gnd) - (sonar_alt)) - Kt21*((alt_gnd) - (baro_alt) + (baro_gnd));
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 416c 	ldr.w	r4, [r3, #364]	; 0x16c
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800bebe:	4619      	mov	r1, r3
 800bec0:	4610      	mov	r0, r2
 800bec2:	f7f4 fe2d 	bl	8000b20 <__aeabi_fsub>
 800bec6:	4603      	mov	r3, r0
 800bec8:	6939      	ldr	r1, [r7, #16]
 800beca:	4618      	mov	r0, r3
 800becc:	f7f4 ff32 	bl	8000d34 <__aeabi_fmul>
 800bed0:	4603      	mov	r3, r0
 800bed2:	4619      	mov	r1, r3
 800bed4:	4620      	mov	r0, r4
 800bed6:	f7f4 fe23 	bl	8000b20 <__aeabi_fsub>
 800beda:	4603      	mov	r3, r0
 800bedc:	461c      	mov	r4, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800beea:	4619      	mov	r1, r3
 800beec:	4610      	mov	r0, r2
 800beee:	f7f4 fe17 	bl	8000b20 <__aeabi_fsub>
 800bef2:	4603      	mov	r3, r0
 800bef4:	461a      	mov	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800befc:	4619      	mov	r1, r3
 800befe:	4610      	mov	r0, r2
 800bf00:	f7f4 fe10 	bl	8000b24 <__addsf3>
 800bf04:	4603      	mov	r3, r0
 800bf06:	6979      	ldr	r1, [r7, #20]
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7f4 ff13 	bl	8000d34 <__aeabi_fmul>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	4619      	mov	r1, r3
 800bf12:	4620      	mov	r0, r4
 800bf14:	f7f4 fe04 	bl	8000b20 <__aeabi_fsub>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c


	  baro_gnd = (baro_gnd) - Kt32*((alt_gnd) - (sonar_alt)) - Kt31*((alt_gnd) - (baro_alt) + (baro_gnd));
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 4178 	ldr.w	r4, [r3, #376]	; 0x178
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800bf34:	4619      	mov	r1, r3
 800bf36:	4610      	mov	r0, r2
 800bf38:	f7f4 fdf2 	bl	8000b20 <__aeabi_fsub>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	68b9      	ldr	r1, [r7, #8]
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7f4 fef7 	bl	8000d34 <__aeabi_fmul>
 800bf46:	4603      	mov	r3, r0
 800bf48:	4619      	mov	r1, r3
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	f7f4 fde8 	bl	8000b20 <__aeabi_fsub>
 800bf50:	4603      	mov	r3, r0
 800bf52:	461c      	mov	r4, r3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800bf60:	4619      	mov	r1, r3
 800bf62:	4610      	mov	r0, r2
 800bf64:	f7f4 fddc 	bl	8000b20 <__aeabi_fsub>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800bf72:	4619      	mov	r1, r3
 800bf74:	4610      	mov	r0, r2
 800bf76:	f7f4 fdd5 	bl	8000b24 <__addsf3>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	68f9      	ldr	r1, [r7, #12]
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7f4 fed8 	bl	8000d34 <__aeabi_fmul>
 800bf84:	4603      	mov	r3, r0
 800bf86:	4619      	mov	r1, r3
 800bf88:	4620      	mov	r0, r4
 800bf8a:	f7f4 fdc9 	bl	8000b20 <__aeabi_fsub>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	461a      	mov	r2, r3
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178


	  S11_alt =  - S11_alt*(Kt11 + Kt12 - 1) - Kt11*S31_alt;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf9e:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800bfa2:	69b9      	ldr	r1, [r7, #24]
 800bfa4:	69f8      	ldr	r0, [r7, #28]
 800bfa6:	f7f4 fdbd 	bl	8000b24 <__addsf3>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7f4 fdb5 	bl	8000b20 <__aeabi_fsub>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	4619      	mov	r1, r3
 800bfba:	4620      	mov	r0, r4
 800bfbc:	f7f4 feba 	bl	8000d34 <__aeabi_fmul>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	461c      	mov	r4, r3
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bfca:	69f9      	ldr	r1, [r7, #28]
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7f4 feb1 	bl	8000d34 <__aeabi_fmul>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f7f4 fda2 	bl	8000b20 <__aeabi_fsub>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	461a      	mov	r2, r3
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c


	  S12_alt = - S12_alt*(Kt11 + Kt12 - 1) - Kt11*S32_alt;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bfec:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800bff0:	69b9      	ldr	r1, [r7, #24]
 800bff2:	69f8      	ldr	r0, [r7, #28]
 800bff4:	f7f4 fd96 	bl	8000b24 <__addsf3>
 800bff8:	4603      	mov	r3, r0
 800bffa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bffe:	4618      	mov	r0, r3
 800c000:	f7f4 fd8e 	bl	8000b20 <__aeabi_fsub>
 800c004:	4603      	mov	r3, r0
 800c006:	4619      	mov	r1, r3
 800c008:	4620      	mov	r0, r4
 800c00a:	f7f4 fe93 	bl	8000d34 <__aeabi_fmul>
 800c00e:	4603      	mov	r3, r0
 800c010:	461c      	mov	r4, r3
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c018:	69f9      	ldr	r1, [r7, #28]
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7f4 fe8a 	bl	8000d34 <__aeabi_fmul>
 800c020:	4603      	mov	r3, r0
 800c022:	4619      	mov	r1, r3
 800c024:	4620      	mov	r0, r4
 800c026:	f7f4 fd7b 	bl	8000b20 <__aeabi_fsub>
 800c02a:	4603      	mov	r3, r0
 800c02c:	461a      	mov	r2, r3
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0


	  S13_alt = - S13_alt*(Kt11 + Kt12 - 1) - Kt11*S33_alt;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c03a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800c03e:	69b9      	ldr	r1, [r7, #24]
 800c040:	69f8      	ldr	r0, [r7, #28]
 800c042:	f7f4 fd6f 	bl	8000b24 <__addsf3>
 800c046:	4603      	mov	r3, r0
 800c048:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7f4 fd67 	bl	8000b20 <__aeabi_fsub>
 800c052:	4603      	mov	r3, r0
 800c054:	4619      	mov	r1, r3
 800c056:	4620      	mov	r0, r4
 800c058:	f7f4 fe6c 	bl	8000d34 <__aeabi_fmul>
 800c05c:	4603      	mov	r3, r0
 800c05e:	461c      	mov	r4, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c066:	69f9      	ldr	r1, [r7, #28]
 800c068:	4618      	mov	r0, r3
 800c06a:	f7f4 fe63 	bl	8000d34 <__aeabi_fmul>
 800c06e:	4603      	mov	r3, r0
 800c070:	4619      	mov	r1, r3
 800c072:	4620      	mov	r0, r4
 800c074:	f7f4 fd54 	bl	8000b20 <__aeabi_fsub>
 800c078:	4603      	mov	r3, r0
 800c07a:	461a      	mov	r2, r3
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac


	  S21_alt =  S21_alt - S11_alt*(Kt21 + Kt22) - Kt21*S31_alt;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 800c08e:	6939      	ldr	r1, [r7, #16]
 800c090:	6978      	ldr	r0, [r7, #20]
 800c092:	f7f4 fd47 	bl	8000b24 <__addsf3>
 800c096:	4603      	mov	r3, r0
 800c098:	4619      	mov	r1, r3
 800c09a:	4628      	mov	r0, r5
 800c09c:	f7f4 fe4a 	bl	8000d34 <__aeabi_fmul>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	f7f4 fd3b 	bl	8000b20 <__aeabi_fsub>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	461c      	mov	r4, r3
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c0b4:	6979      	ldr	r1, [r7, #20]
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7f4 fe3c 	bl	8000d34 <__aeabi_fmul>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	4619      	mov	r1, r3
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	f7f4 fd2d 	bl	8000b20 <__aeabi_fsub>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


	  S22_alt =  S22_alt - S12_alt*(Kt21 + Kt22) - Kt21*S32_alt;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8d3 50a0 	ldr.w	r5, [r3, #160]	; 0xa0
 800c0dc:	6939      	ldr	r1, [r7, #16]
 800c0de:	6978      	ldr	r0, [r7, #20]
 800c0e0:	f7f4 fd20 	bl	8000b24 <__addsf3>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	4628      	mov	r0, r5
 800c0ea:	f7f4 fe23 	bl	8000d34 <__aeabi_fmul>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f7f4 fd14 	bl	8000b20 <__aeabi_fsub>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	461c      	mov	r4, r3
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c102:	6979      	ldr	r1, [r7, #20]
 800c104:	4618      	mov	r0, r3
 800c106:	f7f4 fe15 	bl	8000d34 <__aeabi_fmul>
 800c10a:	4603      	mov	r3, r0
 800c10c:	4619      	mov	r1, r3
 800c10e:	4620      	mov	r0, r4
 800c110:	f7f4 fd06 	bl	8000b20 <__aeabi_fsub>
 800c114:	4603      	mov	r3, r0
 800c116:	461a      	mov	r2, r3
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8


	  S23_alt =  S23_alt - S13_alt*(Kt21 + Kt22) - Kt21*S33_alt;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 800c12a:	6939      	ldr	r1, [r7, #16]
 800c12c:	6978      	ldr	r0, [r7, #20]
 800c12e:	f7f4 fcf9 	bl	8000b24 <__addsf3>
 800c132:	4603      	mov	r3, r0
 800c134:	4619      	mov	r1, r3
 800c136:	4628      	mov	r0, r5
 800c138:	f7f4 fdfc 	bl	8000d34 <__aeabi_fmul>
 800c13c:	4603      	mov	r3, r0
 800c13e:	4619      	mov	r1, r3
 800c140:	4620      	mov	r0, r4
 800c142:	f7f4 fced 	bl	8000b20 <__aeabi_fsub>
 800c146:	4603      	mov	r3, r0
 800c148:	461c      	mov	r4, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c150:	6979      	ldr	r1, [r7, #20]
 800c152:	4618      	mov	r0, r3
 800c154:	f7f4 fdee 	bl	8000d34 <__aeabi_fmul>
 800c158:	4603      	mov	r3, r0
 800c15a:	4619      	mov	r1, r3
 800c15c:	4620      	mov	r0, r4
 800c15e:	f7f4 fcdf 	bl	8000b20 <__aeabi_fsub>
 800c162:	4603      	mov	r3, r0
 800c164:	461a      	mov	r2, r3
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0


	  S31_alt = - S31_alt*(Kt31 - 1) - S11_alt*(Kt31 + Kt32);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c172:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800c176:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	f7f4 fcd0 	bl	8000b20 <__aeabi_fsub>
 800c180:	4603      	mov	r3, r0
 800c182:	4619      	mov	r1, r3
 800c184:	4620      	mov	r0, r4
 800c186:	f7f4 fdd5 	bl	8000d34 <__aeabi_fmul>
 800c18a:	4603      	mov	r3, r0
 800c18c:	461d      	mov	r5, r3
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 800c194:	68b9      	ldr	r1, [r7, #8]
 800c196:	68f8      	ldr	r0, [r7, #12]
 800c198:	f7f4 fcc4 	bl	8000b24 <__addsf3>
 800c19c:	4603      	mov	r3, r0
 800c19e:	4619      	mov	r1, r3
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	f7f4 fdc7 	bl	8000d34 <__aeabi_fmul>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	f7f4 fcb8 	bl	8000b20 <__aeabi_fsub>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4


	  S32_alt = - S32_alt*(Kt31 - 1) - S12_alt*(Kt31 + Kt32);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c1c0:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800c1c4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f7f4 fca9 	bl	8000b20 <__aeabi_fsub>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	f7f4 fdae 	bl	8000d34 <__aeabi_fmul>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	461d      	mov	r5, r3
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 800c1e2:	68b9      	ldr	r1, [r7, #8]
 800c1e4:	68f8      	ldr	r0, [r7, #12]
 800c1e6:	f7f4 fc9d 	bl	8000b24 <__addsf3>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f7f4 fda0 	bl	8000d34 <__aeabi_fmul>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	f7f4 fc91 	bl	8000b20 <__aeabi_fsub>
 800c1fe:	4603      	mov	r3, r0
 800c200:	461a      	mov	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8


	  S33_alt = - S33_alt*(Kt31 - 1) - S13_alt*(Kt31 + Kt32);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c20e:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800c212:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c216:	68f8      	ldr	r0, [r7, #12]
 800c218:	f7f4 fc82 	bl	8000b20 <__aeabi_fsub>
 800c21c:	4603      	mov	r3, r0
 800c21e:	4619      	mov	r1, r3
 800c220:	4620      	mov	r0, r4
 800c222:	f7f4 fd87 	bl	8000d34 <__aeabi_fmul>
 800c226:	4603      	mov	r3, r0
 800c228:	461d      	mov	r5, r3
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 800c230:	68b9      	ldr	r1, [r7, #8]
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	f7f4 fc76 	bl	8000b24 <__addsf3>
 800c238:	4603      	mov	r3, r0
 800c23a:	4619      	mov	r1, r3
 800c23c:	4620      	mov	r0, r4
 800c23e:	f7f4 fd79 	bl	8000d34 <__aeabi_fmul>
 800c242:	4603      	mov	r3, r0
 800c244:	4619      	mov	r1, r3
 800c246:	4628      	mov	r0, r5
 800c248:	f7f4 fc6a 	bl	8000b20 <__aeabi_fsub>
 800c24c:	4603      	mov	r3, r0
 800c24e:	461a      	mov	r2, r3
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc


	pitch_eski=pitch_comp;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	roll_eski=roll_comp;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

    state.angles[0] = roll_ekf;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    state.angles[1] = pitch_ekf;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    state.angles[2] = 0;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f04f 0200 	mov.w	r2, #0
 800c28c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    state.rates[0] = roll_rate;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800c296:	4610      	mov	r0, r2
 800c298:	4619      	mov	r1, r3
 800c29a:	f7f4 fbed 	bl	8000a78 <__aeabi_d2f>
 800c29e:	4602      	mov	r2, r0
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    state.rates[1] = pitch_rate;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c2ac:	4610      	mov	r0, r2
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	f7f4 fbe2 	bl	8000a78 <__aeabi_d2f>
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    state.rates[2] = yaw_rate;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800c2c2:	4610      	mov	r0, r2
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	f7f4 fbd7 	bl	8000a78 <__aeabi_d2f>
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

    state.bias[0] = roll_bias;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    state.bias[1] = pitch_bias;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    state.bias[2] = yaw_bias;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

}
 800c2f0:	bf00      	nop
 800c2f2:	3778      	adds	r7, #120	; 0x78
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c2fa:	bf00      	nop

0800c2fc <_ZN15Kalman_FiltresiD1Ev>:

Kalman_Filtresi::~Kalman_Filtresi() {}
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800c30a:	4618      	mov	r0, r3
 800c30c:	f000 fd0d 	bl	800cd2a <_ZN3lpfD1Ev>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4618      	mov	r0, r3
 800c314:	3708      	adds	r7, #8
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}

0800c31a <_ZN13LowPassFilterC1Ev>:

#if ERROR_CHECK
#include <iostream>
#endif

LowPassFilter::LowPassFilter():
 800c31a:	b480      	push	{r7}
 800c31c:	b083      	sub	sp, #12
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
	output(0),
	ePow(0){}
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f04f 0200 	mov.w	r2, #0
 800c328:	601a      	str	r2, [r3, #0]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f04f 0200 	mov.w	r2, #0
 800c330:	605a      	str	r2, [r3, #4]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4618      	mov	r0, r3
 800c336:	370c      	adds	r7, #12
 800c338:	46bd      	mov	sp, r7
 800c33a:	bc80      	pop	{r7}
 800c33c:	4770      	bx	lr
	...

0800c340 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID() {};
 800c340:	b580      	push	{r7, lr}
 800c342:	b082      	sub	sp, #8
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	4a18      	ldr	r2, [pc, #96]	; (800c3ac <_ZN3PIDC1Ev+0x6c>)
 800c34c:	601a      	str	r2, [r3, #0]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4a17      	ldr	r2, [pc, #92]	; (800c3b0 <_ZN3PIDC1Ev+0x70>)
 800c352:	605a      	str	r2, [r3, #4]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c35a:	609a      	str	r2, [r3, #8]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	689b      	ldr	r3, [r3, #8]
 800c360:	4618      	mov	r0, r3
 800c362:	f7f4 fc93 	bl	8000c8c <__aeabi_i2f>
 800c366:	4603      	mov	r3, r0
 800c368:	4619      	mov	r1, r3
 800c36a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c36e:	f7f4 fd95 	bl	8000e9c <__aeabi_fdiv>
 800c372:	4603      	mov	r3, r0
 800c374:	461a      	mov	r2, r3
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	60da      	str	r2, [r3, #12]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	4a0d      	ldr	r2, [pc, #52]	; (800c3b4 <_ZN3PIDC1Ev+0x74>)
 800c37e:	611a      	str	r2, [r3, #16]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	691a      	ldr	r2, [r3, #16]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	68db      	ldr	r3, [r3, #12]
 800c388:	4619      	mov	r1, r3
 800c38a:	4610      	mov	r0, r2
 800c38c:	f7f4 fcd2 	bl	8000d34 <__aeabi_fmul>
 800c390:	4603      	mov	r3, r0
 800c392:	461a      	mov	r2, r3
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	615a      	str	r2, [r3, #20]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	3320      	adds	r3, #32
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7ff ffbc 	bl	800c31a <_ZN13LowPassFilterC1Ev>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3708      	adds	r7, #8
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	42f00000 	.word	0x42f00000
 800c3b0:	c2f00000 	.word	0xc2f00000
 800c3b4:	3e99999a 	.word	0x3e99999a

0800c3b8 <_ZN3PID7P_AngleEddd>:

double PID::P_Angle(double alpha_des, double alpha, double Kp_angle) {
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b086      	sub	sp, #24
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	e9c7 2300 	strd	r2, r3, [r7]
	double P;
	e_angle = alpha_des - alpha;
 800c3c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c3c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c3cc:	f7f3 fec4 	bl	8000158 <__aeabi_dsub>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	68f9      	ldr	r1, [r7, #12]
 800c3d6:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	P = Kp_angle*e_angle;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800c3e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c3e4:	f7f4 f870 	bl	80004c8 <__aeabi_dmul>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return P;
 800c3f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]

}
 800c3f4:	4610      	mov	r0, r2
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	3718      	adds	r7, #24
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <_ZN3PID6PI_AltEdddddj>:
	double P = Kp_angle * sqrt_e;
	P = P * sign_e;
	return P;
}

double PID::PI_Alt(double z0, double z, double v, double Kp_alt, double Ki_alt, unsigned int ch3) {
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b090      	sub	sp, #64	; 0x40
 800c402:	af00      	add	r7, sp, #0
 800c404:	60f8      	str	r0, [r7, #12]
 800c406:	e9c7 2300 	strd	r2, r3, [r7]
	double P;
	double I;
	float v_des;

	if(ch3 > 1700) {
 800c40a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c40c:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800c410:	4293      	cmp	r3, r2
 800c412:	d916      	bls.n	800c442 <_ZN3PID6PI_AltEdddddj+0x44>
		zi = z0 + x_inc;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	695b      	ldr	r3, [r3, #20]
 800c418:	4618      	mov	r0, r3
 800c41a:	f7f3 fffd 	bl	8000418 <__aeabi_f2d>
 800c41e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c422:	f7f3 fe9b 	bl	800015c <__adddf3>
 800c426:	4602      	mov	r2, r0
 800c428:	460b      	mov	r3, r1
 800c42a:	4610      	mov	r0, r2
 800c42c:	4619      	mov	r1, r3
 800c42e:	f7f4 fb23 	bl	8000a78 <__aeabi_d2f>
 800c432:	4602      	mov	r2, r0
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		v_des = vz_def;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	691b      	ldr	r3, [r3, #16]
 800c43e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c440:	e02a      	b.n	800c498 <_ZN3PID6PI_AltEdddddj+0x9a>
	}

	else if (ch3 < 1300) {
 800c442:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c444:	f240 5213 	movw	r2, #1299	; 0x513
 800c448:	4293      	cmp	r3, r2
 800c44a:	d81a      	bhi.n	800c482 <_ZN3PID6PI_AltEdddddj+0x84>
		zi = z0 - x_inc;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	695b      	ldr	r3, [r3, #20]
 800c450:	4618      	mov	r0, r3
 800c452:	f7f3 ffe1 	bl	8000418 <__aeabi_f2d>
 800c456:	4602      	mov	r2, r0
 800c458:	460b      	mov	r3, r1
 800c45a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c45e:	f7f3 fe7b 	bl	8000158 <__aeabi_dsub>
 800c462:	4602      	mov	r2, r0
 800c464:	460b      	mov	r3, r1
 800c466:	4610      	mov	r0, r2
 800c468:	4619      	mov	r1, r3
 800c46a:	f7f4 fb05 	bl	8000a78 <__aeabi_d2f>
 800c46e:	4602      	mov	r2, r0
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		v_des = -1 * vz_def;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	691b      	ldr	r3, [r3, #16]
 800c47a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c47e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c480:	e00a      	b.n	800c498 <_ZN3PID6PI_AltEdddddj+0x9a>
	}

	else {
		zi = z0;
 800c482:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c486:	f7f4 faf7 	bl	8000a78 <__aeabi_d2f>
 800c48a:	4602      	mov	r2, r0
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		v_des = 0;
 800c492:	f04f 0300 	mov.w	r3, #0
 800c496:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	double e = v_des - v;
 800c498:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c49a:	f7f3 ffbd 	bl	8000418 <__aeabi_f2d>
 800c49e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c4a2:	f7f3 fe59 	bl	8000158 <__aeabi_dsub>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	P = Kp_alt*e;
 800c4ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c4b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c4b6:	f7f4 f807 	bl	80004c8 <__aeabi_dmul>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	460b      	mov	r3, r1
 800c4be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	double ei = z0 - z;
 800c4c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c4c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c4ca:	f7f3 fe45 	bl	8000158 <__aeabi_dsub>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	I = Ki_alt * ei;
 800c4d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c4da:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800c4de:	f7f3 fff3 	bl	80004c8 <__aeabi_dmul>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double PI = P + I;
 800c4ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c4ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c4f2:	f7f3 fe33 	bl	800015c <__adddf3>
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return PI;
 800c4fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]

}
 800c502:	4610      	mov	r0, r2
 800c504:	4619      	mov	r1, r3
 800c506:	3740      	adds	r7, #64	; 0x40
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <_ZN3PID9PID_Rate2Eddddd>:


double PID::PID_Rate2(double alpha_dot_des, double alpha_dot, double Kp, double Ki, double Kd) {
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b088      	sub	sp, #32
 800c510:	af02      	add	r7, sp, #8
 800c512:	60f8      	str	r0, [r7, #12]
 800c514:	e9c7 2300 	strd	r2, r3, [r7]
	e_roll = alpha_dot_des - alpha_dot;
 800c518:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c51c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c520:	f7f3 fe1a 	bl	8000158 <__aeabi_dsub>
 800c524:	4602      	mov	r2, r0
 800c526:	460b      	mov	r3, r1
 800c528:	4610      	mov	r0, r2
 800c52a:	4619      	mov	r1, r3
 800c52c:	f7f4 faa4 	bl	8000a78 <__aeabi_d2f>
 800c530:	4602      	mov	r2, r0
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	631a      	str	r2, [r3, #48]	; 0x30
	P = Kp * e_roll;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7f3 ff6c 	bl	8000418 <__aeabi_f2d>
 800c540:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c544:	f7f3 ffc0 	bl	80004c8 <__aeabi_dmul>
 800c548:	4602      	mov	r2, r0
 800c54a:	460b      	mov	r3, r1
 800c54c:	68f9      	ldr	r1, [r7, #12]
 800c54e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	I = Ki * e_angle;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800c558:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c55c:	f7f3 ffb4 	bl	80004c8 <__aeabi_dmul>
 800c560:	4602      	mov	r2, r0
 800c562:	460b      	mov	r3, r1
 800c564:	68f9      	ldr	r1, [r7, #12]
 800c566:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	double alpha_dot_dot_des = alpha_dot_des - alpha_dot_des_;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800c570:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c574:	f7f3 fdf0 	bl	8000158 <__aeabi_dsub>
 800c578:	4602      	mov	r2, r0
 800c57a:	460b      	mov	r3, r1
 800c57c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	alpha_dot_dot_des = alpha_dot_dot_des / st;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	68db      	ldr	r3, [r3, #12]
 800c584:	4618      	mov	r0, r3
 800c586:	f7f3 ff47 	bl	8000418 <__aeabi_f2d>
 800c58a:	4602      	mov	r2, r0
 800c58c:	460b      	mov	r3, r1
 800c58e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c592:	f7f4 f8c3 	bl	800071c <__aeabi_ddiv>
 800c596:	4602      	mov	r2, r0
 800c598:	460b      	mov	r3, r1
 800c59a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	D = Kd * alpha_dot_dot_des;
 800c59e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c5a2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c5a6:	f7f3 ff8f 	bl	80004c8 <__aeabi_dmul>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	68f9      	ldr	r1, [r7, #12]
 800c5b0:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
  	de_filt = N * (Kd * alpha_dot_des - de_int);
  	de_int += de_filt*st;
  	D = de_filt;
*/

	pd = P + I + D;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800c5c0:	f7f3 fdcc 	bl	800015c <__adddf3>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	4610      	mov	r0, r2
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800c5d2:	f7f3 fdc3 	bl	800015c <__adddf3>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	460b      	mov	r3, r1
 800c5da:	68f9      	ldr	r1, [r7, #12]
 800c5dc:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
  	pd_roll_buf = pd;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800c5e6:	4610      	mov	r0, r2
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	f7f4 fa45 	bl	8000a78 <__aeabi_d2f>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	619a      	str	r2, [r3, #24]
	pd  = Sat(pd,  300, -300);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800c5fa:	4912      	ldr	r1, [pc, #72]	; (800c644 <_ZN3PID9PID_Rate2Eddddd+0x138>)
 800c5fc:	9101      	str	r1, [sp, #4]
 800c5fe:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c602:	9100      	str	r1, [sp, #0]
 800c604:	68f8      	ldr	r0, [r7, #12]
 800c606:	f000 f9e7 	bl	800c9d8 <_ZN3PID3SatEdii>
 800c60a:	4602      	mov	r2, r0
 800c60c:	460b      	mov	r3, r1
 800c60e:	68f9      	ldr	r1, [r7, #12]
 800c610:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	pd_roll_sat_buf = pd;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800c61a:	4610      	mov	r0, r2
 800c61c:	4619      	mov	r1, r3
 800c61e:	f7f4 fa2b 	bl	8000a78 <__aeabi_d2f>
 800c622:	4602      	mov	r2, r0
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	64da      	str	r2, [r3, #76]	; 0x4c
	alpha_dot_des_ = alpha_dot_des;
 800c628:	68f9      	ldr	r1, [r7, #12]
 800c62a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c62e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	return pd;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
}
 800c638:	4610      	mov	r0, r2
 800c63a:	4619      	mov	r1, r3
 800c63c:	3718      	adds	r7, #24
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	fffffed4 	.word	0xfffffed4

0800c648 <_ZN3PID7PD_RateEddddd>:

double PID::PD_Rate(double alpha_dot_des, double alpha_dot, double Kp, double Ki, double Kd) {
 800c648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c64a:	b08b      	sub	sp, #44	; 0x2c
 800c64c:	af02      	add	r7, sp, #8
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	e9c7 2300 	strd	r2, r3, [r7]

	e_roll = alpha_dot_des - alpha_dot;
 800c654:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c658:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c65c:	f7f3 fd7c 	bl	8000158 <__aeabi_dsub>
 800c660:	4602      	mov	r2, r0
 800c662:	460b      	mov	r3, r1
 800c664:	4610      	mov	r0, r2
 800c666:	4619      	mov	r1, r3
 800c668:	f7f4 fa06 	bl	8000a78 <__aeabi_d2f>
 800c66c:	4602      	mov	r2, r0
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	631a      	str	r2, [r3, #48]	; 0x30
  double e_roll_der = - alpha_dot;
 800c672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c674:	613b      	str	r3, [r7, #16]
 800c676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c678:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c67c:	617b      	str	r3, [r7, #20]
  double e_roll_int = e_roll;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c682:	4618      	mov	r0, r3
 800c684:	f7f3 fec8 	bl	8000418 <__aeabi_f2d>
 800c688:	4602      	mov	r2, r0
 800c68a:	460b      	mov	r3, r1
 800c68c:	e9c7 2306 	strd	r2, r3, [r7, #24]

  if((int)pd_roll_buf != (int)pd_roll_sat_buf) {
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	699b      	ldr	r3, [r3, #24]
 800c694:	4618      	mov	r0, r3
 800c696:	f7f4 fd29 	bl	80010ec <__aeabi_f2iz>
 800c69a:	4604      	mov	r4, r0
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7f4 fd23 	bl	80010ec <__aeabi_f2iz>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	429c      	cmp	r4, r3
 800c6aa:	d02b      	beq.n	800c704 <_ZN3PID7PD_RateEddddd+0xbc>
    if(sgn(e_roll) == sgn(pd_roll_sat_buf)) {
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7f3 feb1 	bl	8000418 <__aeabi_f2d>
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	68f8      	ldr	r0, [r7, #12]
 800c6bc:	f000 f914 	bl	800c8e8 <_ZN3PID3sgnEd>
 800c6c0:	4604      	mov	r4, r0
 800c6c2:	460d      	mov	r5, r1
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7f3 fea5 	bl	8000418 <__aeabi_f2d>
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	68f8      	ldr	r0, [r7, #12]
 800c6d4:	f000 f908 	bl	800c8e8 <_ZN3PID3sgnEd>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	460b      	mov	r3, r1
 800c6dc:	2101      	movs	r1, #1
 800c6de:	460e      	mov	r6, r1
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	4629      	mov	r1, r5
 800c6e4:	f7f4 f958 	bl	8000998 <__aeabi_dcmpeq>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d101      	bne.n	800c6f2 <_ZN3PID7PD_RateEddddd+0xaa>
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	461e      	mov	r6, r3
 800c6f2:	b2f3      	uxtb	r3, r6
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d005      	beq.n	800c704 <_ZN3PID7PD_RateEddddd+0xbc>
      e_roll_int = 0;
 800c6f8:	f04f 0200 	mov.w	r2, #0
 800c6fc:	f04f 0300 	mov.w	r3, #0
 800c700:	e9c7 2306 	strd	r2, r3, [r7, #24]
    }
  }

  	de_filt = N * (Kd * e_roll - de_int);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c708:	4618      	mov	r0, r3
 800c70a:	f7f3 fe85 	bl	8000418 <__aeabi_f2d>
 800c70e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c712:	f7f3 fed9 	bl	80004c8 <__aeabi_dmul>
 800c716:	4602      	mov	r2, r0
 800c718:	460b      	mov	r3, r1
 800c71a:	4614      	mov	r4, r2
 800c71c:	461d      	mov	r5, r3
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c722:	4618      	mov	r0, r3
 800c724:	f7f3 fe78 	bl	8000418 <__aeabi_f2d>
 800c728:	4602      	mov	r2, r0
 800c72a:	460b      	mov	r3, r1
 800c72c:	4620      	mov	r0, r4
 800c72e:	4629      	mov	r1, r5
 800c730:	f7f3 fd12 	bl	8000158 <__aeabi_dsub>
 800c734:	4602      	mov	r2, r0
 800c736:	460b      	mov	r3, r1
 800c738:	4610      	mov	r0, r2
 800c73a:	4619      	mov	r1, r3
 800c73c:	f04f 0200 	mov.w	r2, #0
 800c740:	4b5c      	ldr	r3, [pc, #368]	; (800c8b4 <_ZN3PID7PD_RateEddddd+0x26c>)
 800c742:	f7f3 fec1 	bl	80004c8 <__aeabi_dmul>
 800c746:	4602      	mov	r2, r0
 800c748:	460b      	mov	r3, r1
 800c74a:	4610      	mov	r0, r2
 800c74c:	4619      	mov	r1, r3
 800c74e:	f7f4 f993 	bl	8000a78 <__aeabi_d2f>
 800c752:	4602      	mov	r2, r0
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	655a      	str	r2, [r3, #84]	; 0x54
  	de_int += de_filt*st;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	4619      	mov	r1, r3
 800c766:	4610      	mov	r0, r2
 800c768:	f7f4 fae4 	bl	8000d34 <__aeabi_fmul>
 800c76c:	4603      	mov	r3, r0
 800c76e:	4619      	mov	r1, r3
 800c770:	4620      	mov	r0, r4
 800c772:	f7f4 f9d7 	bl	8000b24 <__addsf3>
 800c776:	4603      	mov	r3, r0
 800c778:	461a      	mov	r2, r3
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	659a      	str	r2, [r3, #88]	; 0x58

	de = e_roll - e_eski_roll;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c786:	4619      	mov	r1, r3
 800c788:	4610      	mov	r0, r2
 800c78a:	f7f4 f9c9 	bl	8000b20 <__aeabi_fsub>
 800c78e:	4603      	mov	r3, r0
 800c790:	461a      	mov	r2, r3
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	651a      	str	r2, [r3, #80]	; 0x50
	e_eski_roll = e_roll;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	639a      	str	r2, [r3, #56]	; 0x38

  ie_roll += e_roll_int*st;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7f3 fe38 	bl	8000418 <__aeabi_f2d>
 800c7a8:	4604      	mov	r4, r0
 800c7aa:	460d      	mov	r5, r1
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	68db      	ldr	r3, [r3, #12]
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7f3 fe31 	bl	8000418 <__aeabi_f2d>
 800c7b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c7ba:	f7f3 fe85 	bl	80004c8 <__aeabi_dmul>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	f7f3 fcc9 	bl	800015c <__adddf3>
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	4610      	mov	r0, r2
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	f7f4 f951 	bl	8000a78 <__aeabi_d2f>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	641a      	str	r2, [r3, #64]	; 0x40

  ie_roll_sat = ie_roll;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	649a      	str	r2, [r3, #72]	; 0x48
	

	P = Kp*e_roll; D = de_filt; I = Ki * ie_roll_sat;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7f3 fe15 	bl	8000418 <__aeabi_f2d>
 800c7ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c7f2:	f7f3 fe69 	bl	80004c8 <__aeabi_dmul>
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	68f9      	ldr	r1, [r7, #12]
 800c7fc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c804:	4618      	mov	r0, r3
 800c806:	f7f3 fe07 	bl	8000418 <__aeabi_f2d>
 800c80a:	4602      	mov	r2, r0
 800c80c:	460b      	mov	r3, r1
 800c80e:	68f9      	ldr	r1, [r7, #12]
 800c810:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c818:	4618      	mov	r0, r3
 800c81a:	f7f3 fdfd 	bl	8000418 <__aeabi_f2d>
 800c81e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c822:	f7f3 fe51 	bl	80004c8 <__aeabi_dmul>
 800c826:	4602      	mov	r2, r0
 800c828:	460b      	mov	r3, r1
 800c82a:	68f9      	ldr	r1, [r7, #12]
 800c82c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	//D = lpf.update(D);
	pd = P + I + D;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800c83c:	f7f3 fc8e 	bl	800015c <__adddf3>
 800c840:	4602      	mov	r2, r0
 800c842:	460b      	mov	r3, r1
 800c844:	4610      	mov	r0, r2
 800c846:	4619      	mov	r1, r3
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800c84e:	f7f3 fc85 	bl	800015c <__adddf3>
 800c852:	4602      	mov	r2, r0
 800c854:	460b      	mov	r3, r1
 800c856:	68f9      	ldr	r1, [r7, #12]
 800c858:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
  	pd_roll_buf = pd;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800c862:	4610      	mov	r0, r2
 800c864:	4619      	mov	r1, r3
 800c866:	f7f4 f907 	bl	8000a78 <__aeabi_d2f>
 800c86a:	4602      	mov	r2, r0
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	619a      	str	r2, [r3, #24]
	pd  = Sat(pd,  300, -300);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800c876:	4910      	ldr	r1, [pc, #64]	; (800c8b8 <_ZN3PID7PD_RateEddddd+0x270>)
 800c878:	9101      	str	r1, [sp, #4]
 800c87a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c87e:	9100      	str	r1, [sp, #0]
 800c880:	68f8      	ldr	r0, [r7, #12]
 800c882:	f000 f8a9 	bl	800c9d8 <_ZN3PID3SatEdii>
 800c886:	4602      	mov	r2, r0
 800c888:	460b      	mov	r3, r1
 800c88a:	68f9      	ldr	r1, [r7, #12]
 800c88c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	pd_roll_sat_buf = pd;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800c896:	4610      	mov	r0, r2
 800c898:	4619      	mov	r1, r3
 800c89a:	f7f4 f8ed 	bl	8000a78 <__aeabi_d2f>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	64da      	str	r2, [r3, #76]	; 0x4c
    return pd;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78

}
 800c8aa:	4610      	mov	r0, r2
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	3724      	adds	r7, #36	; 0x24
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8b4:	40340000 	.word	0x40340000
 800c8b8:	fffffed4 	.word	0xfffffed4

0800c8bc <_ZN3PID5resetEv>:

void PID::reset() {
 800c8bc:	b480      	push	{r7}
 800c8be:	b083      	sub	sp, #12
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
	ie_roll_sat = 0;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f04f 0200 	mov.w	r2, #0
 800c8ca:	649a      	str	r2, [r3, #72]	; 0x48
	de_filt = 0;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f04f 0200 	mov.w	r2, #0
 800c8d2:	655a      	str	r2, [r3, #84]	; 0x54
	de_int = 0;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f04f 0200 	mov.w	r2, #0
 800c8da:	659a      	str	r2, [r3, #88]	; 0x58
}
 800c8dc:	bf00      	nop
 800c8de:	370c      	adds	r7, #12
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bc80      	pop	{r7}
 800c8e4:	4770      	bx	lr
	...

0800c8e8 <_ZN3PID3sgnEd>:

    return P;

}

double PID::sgn(double v) {
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	e9c7 2300 	strd	r2, r3, [r7]
  if (v < 0) return -1;
 800c8f4:	f04f 0200 	mov.w	r2, #0
 800c8f8:	f04f 0300 	mov.w	r3, #0
 800c8fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c900:	f7f4 f854 	bl	80009ac <__aeabi_dcmplt>
 800c904:	4603      	mov	r3, r0
 800c906:	2b00      	cmp	r3, #0
 800c908:	d003      	beq.n	800c912 <_ZN3PID3sgnEd+0x2a>
 800c90a:	f04f 0200 	mov.w	r2, #0
 800c90e:	4b0d      	ldr	r3, [pc, #52]	; (800c944 <_ZN3PID3sgnEd+0x5c>)
 800c910:	e012      	b.n	800c938 <_ZN3PID3sgnEd+0x50>
  if (v > 0) return 1;
 800c912:	f04f 0200 	mov.w	r2, #0
 800c916:	f04f 0300 	mov.w	r3, #0
 800c91a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c91e:	f7f4 f863 	bl	80009e8 <__aeabi_dcmpgt>
 800c922:	4603      	mov	r3, r0
 800c924:	2b00      	cmp	r3, #0
 800c926:	d003      	beq.n	800c930 <_ZN3PID3sgnEd+0x48>
 800c928:	f04f 0200 	mov.w	r2, #0
 800c92c:	4b06      	ldr	r3, [pc, #24]	; (800c948 <_ZN3PID3sgnEd+0x60>)
 800c92e:	e003      	b.n	800c938 <_ZN3PID3sgnEd+0x50>
  return 0;
 800c930:	f04f 0200 	mov.w	r2, #0
 800c934:	f04f 0300 	mov.w	r3, #0
}
 800c938:	4610      	mov	r0, r2
 800c93a:	4619      	mov	r1, r3
 800c93c:	3710      	adds	r7, #16
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}
 800c942:	bf00      	nop
 800c944:	bff00000 	.word	0xbff00000
 800c948:	3ff00000 	.word	0x3ff00000

0800c94c <_ZN3PID3SatEdiii>:

 double PID::Sat(double pwm, int max, int min, int thr) {
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b086      	sub	sp, #24
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	e9c7 2300 	strd	r2, r3, [r7]
	double pwm_out;

	if(thr > 1020) {
 800c958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95a:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800c95e:	dd2c      	ble.n	800c9ba <_ZN3PID3SatEdiii+0x6e>
		if(pwm > max) {
 800c960:	6a38      	ldr	r0, [r7, #32]
 800c962:	f7f3 fd47 	bl	80003f4 <__aeabi_i2d>
 800c966:	4602      	mov	r2, r0
 800c968:	460b      	mov	r3, r1
 800c96a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c96e:	f7f4 f83b 	bl	80009e8 <__aeabi_dcmpgt>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d007      	beq.n	800c988 <_ZN3PID3SatEdiii+0x3c>
			pwm_out = max;
 800c978:	6a38      	ldr	r0, [r7, #32]
 800c97a:	f7f3 fd3b 	bl	80003f4 <__aeabi_i2d>
 800c97e:	4602      	mov	r2, r0
 800c980:	460b      	mov	r3, r1
 800c982:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c986:	e01d      	b.n	800c9c4 <_ZN3PID3SatEdiii+0x78>
		}

		else if (pwm < min) {
 800c988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c98a:	f7f3 fd33 	bl	80003f4 <__aeabi_i2d>
 800c98e:	4602      	mov	r2, r0
 800c990:	460b      	mov	r3, r1
 800c992:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c996:	f7f4 f809 	bl	80009ac <__aeabi_dcmplt>
 800c99a:	4603      	mov	r3, r0
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d007      	beq.n	800c9b0 <_ZN3PID3SatEdiii+0x64>
			pwm_out = min;
 800c9a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9a2:	f7f3 fd27 	bl	80003f4 <__aeabi_i2d>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c9ae:	e009      	b.n	800c9c4 <_ZN3PID3SatEdiii+0x78>
		}

		else {
			pwm_out = pwm;
 800c9b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c9b8:	e004      	b.n	800c9c4 <_ZN3PID3SatEdiii+0x78>


	}

	else {
		pwm_out = 1000;
 800c9ba:	f04f 0200 	mov.w	r2, #0
 800c9be:	4b05      	ldr	r3, [pc, #20]	; (800c9d4 <_ZN3PID3SatEdiii+0x88>)
 800c9c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	return pwm_out;
 800c9c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800c9c8:	4610      	mov	r0, r2
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	3718      	adds	r7, #24
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	408f4000 	.word	0x408f4000

0800c9d8 <_ZN3PID3SatEdii>:

 double PID::Sat(double pwm, int max, int min) {
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b086      	sub	sp, #24
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	e9c7 2300 	strd	r2, r3, [r7]
	double pwm_out;

		if(pwm > max) {
 800c9e4:	6a38      	ldr	r0, [r7, #32]
 800c9e6:	f7f3 fd05 	bl	80003f4 <__aeabi_i2d>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9f2:	f7f3 fff9 	bl	80009e8 <__aeabi_dcmpgt>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d007      	beq.n	800ca0c <_ZN3PID3SatEdii+0x34>
			pwm_out = max;
 800c9fc:	6a38      	ldr	r0, [r7, #32]
 800c9fe:	f7f3 fcf9 	bl	80003f4 <__aeabi_i2d>
 800ca02:	4602      	mov	r2, r0
 800ca04:	460b      	mov	r3, r1
 800ca06:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800ca0a:	e017      	b.n	800ca3c <_ZN3PID3SatEdii+0x64>
		}

		else if (pwm < min) {
 800ca0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca0e:	f7f3 fcf1 	bl	80003f4 <__aeabi_i2d>
 800ca12:	4602      	mov	r2, r0
 800ca14:	460b      	mov	r3, r1
 800ca16:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca1a:	f7f3 ffc7 	bl	80009ac <__aeabi_dcmplt>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d007      	beq.n	800ca34 <_ZN3PID3SatEdii+0x5c>
			pwm_out = min;
 800ca24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca26:	f7f3 fce5 	bl	80003f4 <__aeabi_i2d>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800ca32:	e003      	b.n	800ca3c <_ZN3PID3SatEdii+0x64>
		}

		else {
			pwm_out = pwm;
 800ca34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca38:	e9c7 2304 	strd	r2, r3, [r7, #16]
		}




	return pwm_out;
 800ca3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800ca40:	4610      	mov	r0, r2
 800ca42:	4619      	mov	r1, r3
 800ca44:	3718      	adds	r7, #24
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}

0800ca4a <_ZN3PID7pwm2angEt>:

float PID::pwm2ang(unsigned short int pwm) {
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b088      	sub	sp, #32
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
 800ca52:	460b      	mov	r3, r1
 800ca54:	807b      	strh	r3, [r7, #2]
	int dead_zone = 5;
 800ca56:	2305      	movs	r3, #5
 800ca58:	61bb      	str	r3, [r7, #24]
	int in_min  = 1000;
 800ca5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca5e:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 800ca60:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ca64:	613b      	str	r3, [r7, #16]
	int out_min = -30;
 800ca66:	f06f 031d 	mvn.w	r3, #29
 800ca6a:	60fb      	str	r3, [r7, #12]
	int out_max  = 30;
 800ca6c:	231e      	movs	r3, #30
 800ca6e:	60bb      	str	r3, [r7, #8]
	unsigned short int pwm_out;

	if(pwm > 1500 - dead_zone && pwm < 1500 + dead_zone) {
 800ca70:	887a      	ldrh	r2, [r7, #2]
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800ca78:	3304      	adds	r3, #4
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	dd09      	ble.n	800ca92 <_ZN3PID7pwm2angEt+0x48>
 800ca7e:	69bb      	ldr	r3, [r7, #24]
 800ca80:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 800ca84:	887b      	ldrh	r3, [r7, #2]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	db03      	blt.n	800ca92 <_ZN3PID7pwm2angEt+0x48>
		pwm_out = 1500;
 800ca8a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800ca8e:	83fb      	strh	r3, [r7, #30]
 800ca90:	e001      	b.n	800ca96 <_ZN3PID7pwm2angEt+0x4c>
	}

	else {
		pwm_out = pwm;
 800ca92:	887b      	ldrh	r3, [r7, #2]
 800ca94:	83fb      	strh	r3, [r7, #30]
	}

	return (pwm_out - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800ca96:	8bfa      	ldrh	r2, [r7, #30]
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	1ad3      	subs	r3, r2, r3
 800ca9c:	68b9      	ldr	r1, [r7, #8]
 800ca9e:	68fa      	ldr	r2, [r7, #12]
 800caa0:	1a8a      	subs	r2, r1, r2
 800caa2:	fb02 f203 	mul.w	r2, r2, r3
 800caa6:	6939      	ldr	r1, [r7, #16]
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	1acb      	subs	r3, r1, r3
 800caac:	fb92 f2f3 	sdiv	r2, r2, r3
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	4413      	add	r3, r2
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7f4 f8e9 	bl	8000c8c <__aeabi_i2f>
 800caba:	4603      	mov	r3, r0
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3720      	adds	r7, #32
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <_ZN3PID8pwm2rateEt>:

float PID::pwm2rate(unsigned short int pwm) {
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b086      	sub	sp, #24
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	460b      	mov	r3, r1
 800cace:	807b      	strh	r3, [r7, #2]
	int in_min  = 1000;
 800cad0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cad4:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 800cad6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800cada:	613b      	str	r3, [r7, #16]
	int out_min = -100;
 800cadc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800cae0:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 800cae2:	2364      	movs	r3, #100	; 0x64
 800cae4:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 800cae6:	887a      	ldrh	r2, [r7, #2]
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	1ad3      	subs	r3, r2, r3
 800caec:	68b9      	ldr	r1, [r7, #8]
 800caee:	68fa      	ldr	r2, [r7, #12]
 800caf0:	1a8a      	subs	r2, r1, r2
 800caf2:	fb02 f203 	mul.w	r2, r2, r3
 800caf6:	6939      	ldr	r1, [r7, #16]
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	1acb      	subs	r3, r1, r3
 800cafc:	fb92 f2f3 	sdiv	r2, r2, r3
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	4413      	add	r3, r2
 800cb04:	425b      	negs	r3, r3
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7f4 f8c0 	bl	8000c8c <__aeabi_i2f>
 800cb0c:	4603      	mov	r3, r0
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3718      	adds	r7, #24
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
	...

0800cb18 <_ZN3PID7pwm2motEti>:

//Convert pwm to motor speed for simulation
float PID::pwm2mot(unsigned short int pwm, int dir) {
 800cb18:	b590      	push	{r4, r7, lr}
 800cb1a:	b089      	sub	sp, #36	; 0x24
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	60f8      	str	r0, [r7, #12]
 800cb20:	460b      	mov	r3, r1
 800cb22:	607a      	str	r2, [r7, #4]
 800cb24:	817b      	strh	r3, [r7, #10]
	float in_min  = 1000;
 800cb26:	4b1d      	ldr	r3, [pc, #116]	; (800cb9c <_ZN3PID7pwm2motEti+0x84>)
 800cb28:	61fb      	str	r3, [r7, #28]
	float in_max  = 2000;
 800cb2a:	4b1d      	ldr	r3, [pc, #116]	; (800cba0 <_ZN3PID7pwm2motEti+0x88>)
 800cb2c:	61bb      	str	r3, [r7, #24]
	float out_min = 0;
 800cb2e:	f04f 0300 	mov.w	r3, #0
 800cb32:	617b      	str	r3, [r7, #20]
	float out_max  = 1326;
 800cb34:	4b1b      	ldr	r3, [pc, #108]	; (800cba4 <_ZN3PID7pwm2motEti+0x8c>)
 800cb36:	613b      	str	r3, [r7, #16]

	return (float)(dir) * ((float)pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f7f4 f8a7 	bl	8000c8c <__aeabi_i2f>
 800cb3e:	4604      	mov	r4, r0
 800cb40:	897b      	ldrh	r3, [r7, #10]
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7f4 f89e 	bl	8000c84 <__aeabi_ui2f>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	69f9      	ldr	r1, [r7, #28]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f7f3 ffe7 	bl	8000b20 <__aeabi_fsub>
 800cb52:	4603      	mov	r3, r0
 800cb54:	4619      	mov	r1, r3
 800cb56:	4620      	mov	r0, r4
 800cb58:	f7f4 f8ec 	bl	8000d34 <__aeabi_fmul>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	461c      	mov	r4, r3
 800cb60:	6979      	ldr	r1, [r7, #20]
 800cb62:	6938      	ldr	r0, [r7, #16]
 800cb64:	f7f3 ffdc 	bl	8000b20 <__aeabi_fsub>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	f7f4 f8e1 	bl	8000d34 <__aeabi_fmul>
 800cb72:	4603      	mov	r3, r0
 800cb74:	461c      	mov	r4, r3
 800cb76:	69f9      	ldr	r1, [r7, #28]
 800cb78:	69b8      	ldr	r0, [r7, #24]
 800cb7a:	f7f3 ffd1 	bl	8000b20 <__aeabi_fsub>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	4619      	mov	r1, r3
 800cb82:	4620      	mov	r0, r4
 800cb84:	f7f4 f98a 	bl	8000e9c <__aeabi_fdiv>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	6979      	ldr	r1, [r7, #20]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7f3 ffc9 	bl	8000b24 <__addsf3>
 800cb92:	4603      	mov	r3, r0
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3724      	adds	r7, #36	; 0x24
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd90      	pop	{r4, r7, pc}
 800cb9c:	447a0000 	.word	0x447a0000
 800cba0:	44fa0000 	.word	0x44fa0000
 800cba4:	44a5c000 	.word	0x44a5c000

0800cba8 <_ZN3PID5F2thrEf>:

unsigned int PID::F2thr(float F) {
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b088      	sub	sp, #32
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
	float kf = 5.074714371861032e-08;
 800cbb2:	4b1d      	ldr	r3, [pc, #116]	; (800cc28 <_ZN3PID5F2thrEf+0x80>)
 800cbb4:	61fb      	str	r3, [r7, #28]
	float max_rpm = 17591;
 800cbb6:	4b1d      	ldr	r3, [pc, #116]	; (800cc2c <_ZN3PID5F2thrEf+0x84>)
 800cbb8:	61bb      	str	r3, [r7, #24]
	float Fm = F/4;
 800cbba:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800cbbe:	6838      	ldr	r0, [r7, #0]
 800cbc0:	f7f4 f96c 	bl	8000e9c <__aeabi_fdiv>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	617b      	str	r3, [r7, #20]
	float wh = sqrt(Fm/kf);
 800cbc8:	69f9      	ldr	r1, [r7, #28]
 800cbca:	6978      	ldr	r0, [r7, #20]
 800cbcc:	f7f4 f966 	bl	8000e9c <__aeabi_fdiv>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7f3 fc20 	bl	8000418 <__aeabi_f2d>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	460b      	mov	r3, r1
 800cbdc:	4610      	mov	r0, r2
 800cbde:	4619      	mov	r1, r3
 800cbe0:	f000 f9ae 	bl	800cf40 <sqrt>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	4610      	mov	r0, r2
 800cbea:	4619      	mov	r1, r3
 800cbec:	f7f3 ff44 	bl	8000a78 <__aeabi_d2f>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	613b      	str	r3, [r7, #16]

	unsigned int thr = (wh - 0) * (2000 - 1000) / (max_rpm - 0) + 1000;
 800cbf4:	490e      	ldr	r1, [pc, #56]	; (800cc30 <_ZN3PID5F2thrEf+0x88>)
 800cbf6:	6938      	ldr	r0, [r7, #16]
 800cbf8:	f7f4 f89c 	bl	8000d34 <__aeabi_fmul>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	69b9      	ldr	r1, [r7, #24]
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7f4 f94b 	bl	8000e9c <__aeabi_fdiv>
 800cc06:	4603      	mov	r3, r0
 800cc08:	4909      	ldr	r1, [pc, #36]	; (800cc30 <_ZN3PID5F2thrEf+0x88>)
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7f3 ff8a 	bl	8000b24 <__addsf3>
 800cc10:	4603      	mov	r3, r0
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7f4 fa90 	bl	8001138 <__aeabi_f2uiz>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	60fb      	str	r3, [r7, #12]
	return thr;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3720      	adds	r7, #32
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	3359f513 	.word	0x3359f513
 800cc2c:	46896e00 	.word	0x46896e00
 800cc30:	447a0000 	.word	0x447a0000

0800cc34 <_ZN3PIDD1Ev>:

PID::~PID() {};
 800cc34:	b480      	push	{r7}
 800cc36:	b083      	sub	sp, #12
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	370c      	adds	r7, #12
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bc80      	pop	{r7}
 800cc46:	4770      	bx	lr

0800cc48 <_ZN3lpfC1Eddd>:
#include "lpf.hpp"

lpf::lpf(double a, double b, double c)  {
 800cc48:	b480      	push	{r7}
 800cc4a:	b085      	sub	sp, #20
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	e9c7 2300 	strd	r2, r3, [r7]
	a_f = a;
 800cc54:	68f9      	ldr	r1, [r7, #12]
 800cc56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc5a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	b_f = b;
 800cc5e:	68f9      	ldr	r1, [r7, #12]
 800cc60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cc64:	e9c1 2304 	strd	r2, r3, [r1, #16]
	c_f = c;
 800cc68:	68f9      	ldr	r1, [r7, #12]
 800cc6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cc6e:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	4618      	mov	r0, r3
 800cc76:	3714      	adds	r7, #20
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bc80      	pop	{r7}
 800cc7c:	4770      	bx	lr

0800cc7e <_ZN3lpf3RunEf>:


float lpf::Run(float x) {
 800cc7e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]


	//float y = 0.8544*y_ + 0.07282 * x + 0.07282 * x_;
	float y = a_f*y_ + b_f * x + c_f * x_;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7f3 fbbf 	bl	8000418 <__aeabi_f2d>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	4620      	mov	r0, r4
 800cca0:	4629      	mov	r1, r5
 800cca2:	f7f3 fc11 	bl	80004c8 <__aeabi_dmul>
 800cca6:	4602      	mov	r2, r0
 800cca8:	460b      	mov	r3, r1
 800ccaa:	4690      	mov	r8, r2
 800ccac:	4699      	mov	r9, r3
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800ccb4:	6838      	ldr	r0, [r7, #0]
 800ccb6:	f7f3 fbaf 	bl	8000418 <__aeabi_f2d>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	f7f3 fc01 	bl	80004c8 <__aeabi_dmul>
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	460b      	mov	r3, r1
 800ccca:	4640      	mov	r0, r8
 800cccc:	4649      	mov	r1, r9
 800ccce:	f7f3 fa45 	bl	800015c <__adddf3>
 800ccd2:	4602      	mov	r2, r0
 800ccd4:	460b      	mov	r3, r1
 800ccd6:	4690      	mov	r8, r2
 800ccd8:	4699      	mov	r9, r3
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4618      	mov	r0, r3
 800cce6:	f7f3 fb97 	bl	8000418 <__aeabi_f2d>
 800ccea:	4602      	mov	r2, r0
 800ccec:	460b      	mov	r3, r1
 800ccee:	4620      	mov	r0, r4
 800ccf0:	4629      	mov	r1, r5
 800ccf2:	f7f3 fbe9 	bl	80004c8 <__aeabi_dmul>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	4640      	mov	r0, r8
 800ccfc:	4649      	mov	r1, r9
 800ccfe:	f7f3 fa2d 	bl	800015c <__adddf3>
 800cd02:	4602      	mov	r2, r0
 800cd04:	460b      	mov	r3, r1
 800cd06:	4610      	mov	r0, r2
 800cd08:	4619      	mov	r1, r3
 800cd0a:	f7f3 feb5 	bl	8000a78 <__aeabi_d2f>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	60fb      	str	r3, [r7, #12]
	x_ = x;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	683a      	ldr	r2, [r7, #0]
 800cd16:	601a      	str	r2, [r3, #0]
	y_ = y;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	68fa      	ldr	r2, [r7, #12]
 800cd1c:	605a      	str	r2, [r3, #4]
	return y;
 800cd1e:	68fb      	ldr	r3, [r7, #12]

}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3710      	adds	r7, #16
 800cd24:	46bd      	mov	sp, r7
 800cd26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800cd2a <_ZN3lpfD1Ev>:

lpf::~lpf() {}
 800cd2a:	b480      	push	{r7}
 800cd2c:	b083      	sub	sp, #12
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	4618      	mov	r0, r3
 800cd36:	370c      	adds	r7, #12
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bc80      	pop	{r7}
 800cd3c:	4770      	bx	lr

0800cd3e <_ZdlPv>:
 800cd3e:	f001 bfc5 	b.w	800eccc <free>

0800cd42 <_Znwj>:
 800cd42:	2801      	cmp	r0, #1
 800cd44:	bf38      	it	cc
 800cd46:	2001      	movcc	r0, #1
 800cd48:	b510      	push	{r4, lr}
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	f001 ffb5 	bl	800ecbc <malloc>
 800cd52:	b930      	cbnz	r0, 800cd62 <_Znwj+0x20>
 800cd54:	f000 f80c 	bl	800cd70 <_ZSt15get_new_handlerv>
 800cd58:	b908      	cbnz	r0, 800cd5e <_Znwj+0x1c>
 800cd5a:	f001 ff7d 	bl	800ec58 <abort>
 800cd5e:	4780      	blx	r0
 800cd60:	e7f4      	b.n	800cd4c <_Znwj+0xa>
 800cd62:	bd10      	pop	{r4, pc}

0800cd64 <_ZSt17__throw_bad_allocv>:
 800cd64:	b508      	push	{r3, lr}
 800cd66:	f001 ff77 	bl	800ec58 <abort>

0800cd6a <_ZSt20__throw_length_errorPKc>:
 800cd6a:	b508      	push	{r3, lr}
 800cd6c:	f001 ff74 	bl	800ec58 <abort>

0800cd70 <_ZSt15get_new_handlerv>:
 800cd70:	4b02      	ldr	r3, [pc, #8]	; (800cd7c <_ZSt15get_new_handlerv+0xc>)
 800cd72:	6818      	ldr	r0, [r3, #0]
 800cd74:	f3bf 8f5b 	dmb	ish
 800cd78:	4770      	bx	lr
 800cd7a:	bf00      	nop
 800cd7c:	20000ac0 	.word	0x20000ac0

0800cd80 <cosf>:
 800cd80:	b507      	push	{r0, r1, r2, lr}
 800cd82:	4a18      	ldr	r2, [pc, #96]	; (800cde4 <cosf+0x64>)
 800cd84:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	4601      	mov	r1, r0
 800cd8c:	dc03      	bgt.n	800cd96 <cosf+0x16>
 800cd8e:	2100      	movs	r1, #0
 800cd90:	f001 fa00 	bl	800e194 <__kernel_cosf>
 800cd94:	e004      	b.n	800cda0 <cosf+0x20>
 800cd96:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cd9a:	db04      	blt.n	800cda6 <cosf+0x26>
 800cd9c:	f7f3 fec0 	bl	8000b20 <__aeabi_fsub>
 800cda0:	b003      	add	sp, #12
 800cda2:	f85d fb04 	ldr.w	pc, [sp], #4
 800cda6:	4669      	mov	r1, sp
 800cda8:	f001 f844 	bl	800de34 <__ieee754_rem_pio2f>
 800cdac:	f000 0203 	and.w	r2, r0, #3
 800cdb0:	2a01      	cmp	r2, #1
 800cdb2:	d005      	beq.n	800cdc0 <cosf+0x40>
 800cdb4:	2a02      	cmp	r2, #2
 800cdb6:	d00a      	beq.n	800cdce <cosf+0x4e>
 800cdb8:	b972      	cbnz	r2, 800cdd8 <cosf+0x58>
 800cdba:	9901      	ldr	r1, [sp, #4]
 800cdbc:	9800      	ldr	r0, [sp, #0]
 800cdbe:	e7e7      	b.n	800cd90 <cosf+0x10>
 800cdc0:	9901      	ldr	r1, [sp, #4]
 800cdc2:	9800      	ldr	r0, [sp, #0]
 800cdc4:	f001 fd1c 	bl	800e800 <__kernel_sinf>
 800cdc8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cdcc:	e7e8      	b.n	800cda0 <cosf+0x20>
 800cdce:	9901      	ldr	r1, [sp, #4]
 800cdd0:	9800      	ldr	r0, [sp, #0]
 800cdd2:	f001 f9df 	bl	800e194 <__kernel_cosf>
 800cdd6:	e7f7      	b.n	800cdc8 <cosf+0x48>
 800cdd8:	2201      	movs	r2, #1
 800cdda:	9901      	ldr	r1, [sp, #4]
 800cddc:	9800      	ldr	r0, [sp, #0]
 800cdde:	f001 fd0f 	bl	800e800 <__kernel_sinf>
 800cde2:	e7dd      	b.n	800cda0 <cosf+0x20>
 800cde4:	3f490fd8 	.word	0x3f490fd8

0800cde8 <pow>:
 800cde8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdec:	461f      	mov	r7, r3
 800cdee:	4680      	mov	r8, r0
 800cdf0:	4689      	mov	r9, r1
 800cdf2:	4616      	mov	r6, r2
 800cdf4:	f000 f918 	bl	800d028 <__ieee754_pow>
 800cdf8:	4b4d      	ldr	r3, [pc, #308]	; (800cf30 <pow+0x148>)
 800cdfa:	4604      	mov	r4, r0
 800cdfc:	f993 3000 	ldrsb.w	r3, [r3]
 800ce00:	460d      	mov	r5, r1
 800ce02:	3301      	adds	r3, #1
 800ce04:	d015      	beq.n	800ce32 <pow+0x4a>
 800ce06:	4632      	mov	r2, r6
 800ce08:	463b      	mov	r3, r7
 800ce0a:	4630      	mov	r0, r6
 800ce0c:	4639      	mov	r1, r7
 800ce0e:	f7f3 fdf5 	bl	80009fc <__aeabi_dcmpun>
 800ce12:	b970      	cbnz	r0, 800ce32 <pow+0x4a>
 800ce14:	4642      	mov	r2, r8
 800ce16:	464b      	mov	r3, r9
 800ce18:	4640      	mov	r0, r8
 800ce1a:	4649      	mov	r1, r9
 800ce1c:	f7f3 fdee 	bl	80009fc <__aeabi_dcmpun>
 800ce20:	2200      	movs	r2, #0
 800ce22:	2300      	movs	r3, #0
 800ce24:	b148      	cbz	r0, 800ce3a <pow+0x52>
 800ce26:	4630      	mov	r0, r6
 800ce28:	4639      	mov	r1, r7
 800ce2a:	f7f3 fdb5 	bl	8000998 <__aeabi_dcmpeq>
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	d17b      	bne.n	800cf2a <pow+0x142>
 800ce32:	4620      	mov	r0, r4
 800ce34:	4629      	mov	r1, r5
 800ce36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce3a:	4640      	mov	r0, r8
 800ce3c:	4649      	mov	r1, r9
 800ce3e:	f7f3 fdab 	bl	8000998 <__aeabi_dcmpeq>
 800ce42:	b1e0      	cbz	r0, 800ce7e <pow+0x96>
 800ce44:	2200      	movs	r2, #0
 800ce46:	2300      	movs	r3, #0
 800ce48:	4630      	mov	r0, r6
 800ce4a:	4639      	mov	r1, r7
 800ce4c:	f7f3 fda4 	bl	8000998 <__aeabi_dcmpeq>
 800ce50:	2800      	cmp	r0, #0
 800ce52:	d16a      	bne.n	800cf2a <pow+0x142>
 800ce54:	4630      	mov	r0, r6
 800ce56:	4639      	mov	r1, r7
 800ce58:	f001 fd4b 	bl	800e8f2 <finite>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	d0e8      	beq.n	800ce32 <pow+0x4a>
 800ce60:	2200      	movs	r2, #0
 800ce62:	2300      	movs	r3, #0
 800ce64:	4630      	mov	r0, r6
 800ce66:	4639      	mov	r1, r7
 800ce68:	f7f3 fda0 	bl	80009ac <__aeabi_dcmplt>
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	d0e0      	beq.n	800ce32 <pow+0x4a>
 800ce70:	f001 fefa 	bl	800ec68 <__errno>
 800ce74:	2321      	movs	r3, #33	; 0x21
 800ce76:	2400      	movs	r4, #0
 800ce78:	6003      	str	r3, [r0, #0]
 800ce7a:	4d2e      	ldr	r5, [pc, #184]	; (800cf34 <pow+0x14c>)
 800ce7c:	e7d9      	b.n	800ce32 <pow+0x4a>
 800ce7e:	4620      	mov	r0, r4
 800ce80:	4629      	mov	r1, r5
 800ce82:	f001 fd36 	bl	800e8f2 <finite>
 800ce86:	bba8      	cbnz	r0, 800cef4 <pow+0x10c>
 800ce88:	4640      	mov	r0, r8
 800ce8a:	4649      	mov	r1, r9
 800ce8c:	f001 fd31 	bl	800e8f2 <finite>
 800ce90:	b380      	cbz	r0, 800cef4 <pow+0x10c>
 800ce92:	4630      	mov	r0, r6
 800ce94:	4639      	mov	r1, r7
 800ce96:	f001 fd2c 	bl	800e8f2 <finite>
 800ce9a:	b358      	cbz	r0, 800cef4 <pow+0x10c>
 800ce9c:	4622      	mov	r2, r4
 800ce9e:	462b      	mov	r3, r5
 800cea0:	4620      	mov	r0, r4
 800cea2:	4629      	mov	r1, r5
 800cea4:	f7f3 fdaa 	bl	80009fc <__aeabi_dcmpun>
 800cea8:	b160      	cbz	r0, 800cec4 <pow+0xdc>
 800ceaa:	f001 fedd 	bl	800ec68 <__errno>
 800ceae:	2321      	movs	r3, #33	; 0x21
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	6003      	str	r3, [r0, #0]
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	4610      	mov	r0, r2
 800ceb8:	4619      	mov	r1, r3
 800ceba:	f7f3 fc2f 	bl	800071c <__aeabi_ddiv>
 800cebe:	4604      	mov	r4, r0
 800cec0:	460d      	mov	r5, r1
 800cec2:	e7b6      	b.n	800ce32 <pow+0x4a>
 800cec4:	f001 fed0 	bl	800ec68 <__errno>
 800cec8:	2322      	movs	r3, #34	; 0x22
 800ceca:	2200      	movs	r2, #0
 800cecc:	6003      	str	r3, [r0, #0]
 800cece:	4649      	mov	r1, r9
 800ced0:	2300      	movs	r3, #0
 800ced2:	4640      	mov	r0, r8
 800ced4:	f7f3 fd6a 	bl	80009ac <__aeabi_dcmplt>
 800ced8:	2400      	movs	r4, #0
 800ceda:	b148      	cbz	r0, 800cef0 <pow+0x108>
 800cedc:	4630      	mov	r0, r6
 800cede:	4639      	mov	r1, r7
 800cee0:	f001 fd14 	bl	800e90c <rint>
 800cee4:	4632      	mov	r2, r6
 800cee6:	463b      	mov	r3, r7
 800cee8:	f7f3 fd56 	bl	8000998 <__aeabi_dcmpeq>
 800ceec:	2800      	cmp	r0, #0
 800ceee:	d0c4      	beq.n	800ce7a <pow+0x92>
 800cef0:	4d11      	ldr	r5, [pc, #68]	; (800cf38 <pow+0x150>)
 800cef2:	e79e      	b.n	800ce32 <pow+0x4a>
 800cef4:	2200      	movs	r2, #0
 800cef6:	2300      	movs	r3, #0
 800cef8:	4620      	mov	r0, r4
 800cefa:	4629      	mov	r1, r5
 800cefc:	f7f3 fd4c 	bl	8000998 <__aeabi_dcmpeq>
 800cf00:	2800      	cmp	r0, #0
 800cf02:	d096      	beq.n	800ce32 <pow+0x4a>
 800cf04:	4640      	mov	r0, r8
 800cf06:	4649      	mov	r1, r9
 800cf08:	f001 fcf3 	bl	800e8f2 <finite>
 800cf0c:	2800      	cmp	r0, #0
 800cf0e:	d090      	beq.n	800ce32 <pow+0x4a>
 800cf10:	4630      	mov	r0, r6
 800cf12:	4639      	mov	r1, r7
 800cf14:	f001 fced 	bl	800e8f2 <finite>
 800cf18:	2800      	cmp	r0, #0
 800cf1a:	d08a      	beq.n	800ce32 <pow+0x4a>
 800cf1c:	f001 fea4 	bl	800ec68 <__errno>
 800cf20:	2322      	movs	r3, #34	; 0x22
 800cf22:	2400      	movs	r4, #0
 800cf24:	2500      	movs	r5, #0
 800cf26:	6003      	str	r3, [r0, #0]
 800cf28:	e783      	b.n	800ce32 <pow+0x4a>
 800cf2a:	2400      	movs	r4, #0
 800cf2c:	4d03      	ldr	r5, [pc, #12]	; (800cf3c <pow+0x154>)
 800cf2e:	e780      	b.n	800ce32 <pow+0x4a>
 800cf30:	2000000d 	.word	0x2000000d
 800cf34:	fff00000 	.word	0xfff00000
 800cf38:	7ff00000 	.word	0x7ff00000
 800cf3c:	3ff00000 	.word	0x3ff00000

0800cf40 <sqrt>:
 800cf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf42:	4606      	mov	r6, r0
 800cf44:	460f      	mov	r7, r1
 800cf46:	f000 fd85 	bl	800da54 <__ieee754_sqrt>
 800cf4a:	4b12      	ldr	r3, [pc, #72]	; (800cf94 <sqrt+0x54>)
 800cf4c:	4604      	mov	r4, r0
 800cf4e:	f993 3000 	ldrsb.w	r3, [r3]
 800cf52:	460d      	mov	r5, r1
 800cf54:	3301      	adds	r3, #1
 800cf56:	d019      	beq.n	800cf8c <sqrt+0x4c>
 800cf58:	4632      	mov	r2, r6
 800cf5a:	463b      	mov	r3, r7
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	4639      	mov	r1, r7
 800cf60:	f7f3 fd4c 	bl	80009fc <__aeabi_dcmpun>
 800cf64:	b990      	cbnz	r0, 800cf8c <sqrt+0x4c>
 800cf66:	2200      	movs	r2, #0
 800cf68:	2300      	movs	r3, #0
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	4639      	mov	r1, r7
 800cf6e:	f7f3 fd1d 	bl	80009ac <__aeabi_dcmplt>
 800cf72:	b158      	cbz	r0, 800cf8c <sqrt+0x4c>
 800cf74:	f001 fe78 	bl	800ec68 <__errno>
 800cf78:	2321      	movs	r3, #33	; 0x21
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	6003      	str	r3, [r0, #0]
 800cf7e:	2300      	movs	r3, #0
 800cf80:	4610      	mov	r0, r2
 800cf82:	4619      	mov	r1, r3
 800cf84:	f7f3 fbca 	bl	800071c <__aeabi_ddiv>
 800cf88:	4604      	mov	r4, r0
 800cf8a:	460d      	mov	r5, r1
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	4629      	mov	r1, r5
 800cf90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf92:	bf00      	nop
 800cf94:	2000000d 	.word	0x2000000d

0800cf98 <asinf>:
 800cf98:	b538      	push	{r3, r4, r5, lr}
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	f000 fe06 	bl	800dbac <__ieee754_asinf>
 800cfa0:	4b0e      	ldr	r3, [pc, #56]	; (800cfdc <asinf+0x44>)
 800cfa2:	4605      	mov	r5, r0
 800cfa4:	f993 3000 	ldrsb.w	r3, [r3]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	d015      	beq.n	800cfd8 <asinf+0x40>
 800cfac:	4621      	mov	r1, r4
 800cfae:	4620      	mov	r0, r4
 800cfb0:	f7f4 f886 	bl	80010c0 <__aeabi_fcmpun>
 800cfb4:	b980      	cbnz	r0, 800cfd8 <asinf+0x40>
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f001 fdb8 	bl	800eb2c <fabsf>
 800cfbc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cfc0:	f7f4 f874 	bl	80010ac <__aeabi_fcmpgt>
 800cfc4:	b140      	cbz	r0, 800cfd8 <asinf+0x40>
 800cfc6:	f001 fe4f 	bl	800ec68 <__errno>
 800cfca:	2321      	movs	r3, #33	; 0x21
 800cfcc:	6003      	str	r3, [r0, #0]
 800cfce:	4804      	ldr	r0, [pc, #16]	; (800cfe0 <asinf+0x48>)
 800cfd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfd4:	f001 bdf0 	b.w	800ebb8 <nanf>
 800cfd8:	4628      	mov	r0, r5
 800cfda:	bd38      	pop	{r3, r4, r5, pc}
 800cfdc:	2000000d 	.word	0x2000000d
 800cfe0:	0800efc8 	.word	0x0800efc8

0800cfe4 <sqrtf>:
 800cfe4:	b538      	push	{r3, r4, r5, lr}
 800cfe6:	4605      	mov	r5, r0
 800cfe8:	f001 f882 	bl	800e0f0 <__ieee754_sqrtf>
 800cfec:	4b0d      	ldr	r3, [pc, #52]	; (800d024 <sqrtf+0x40>)
 800cfee:	4604      	mov	r4, r0
 800cff0:	f993 3000 	ldrsb.w	r3, [r3]
 800cff4:	3301      	adds	r3, #1
 800cff6:	d012      	beq.n	800d01e <sqrtf+0x3a>
 800cff8:	4629      	mov	r1, r5
 800cffa:	4628      	mov	r0, r5
 800cffc:	f7f4 f860 	bl	80010c0 <__aeabi_fcmpun>
 800d000:	b968      	cbnz	r0, 800d01e <sqrtf+0x3a>
 800d002:	2100      	movs	r1, #0
 800d004:	4628      	mov	r0, r5
 800d006:	f7f4 f833 	bl	8001070 <__aeabi_fcmplt>
 800d00a:	b140      	cbz	r0, 800d01e <sqrtf+0x3a>
 800d00c:	f001 fe2c 	bl	800ec68 <__errno>
 800d010:	2321      	movs	r3, #33	; 0x21
 800d012:	2100      	movs	r1, #0
 800d014:	6003      	str	r3, [r0, #0]
 800d016:	4608      	mov	r0, r1
 800d018:	f7f3 ff40 	bl	8000e9c <__aeabi_fdiv>
 800d01c:	4604      	mov	r4, r0
 800d01e:	4620      	mov	r0, r4
 800d020:	bd38      	pop	{r3, r4, r5, pc}
 800d022:	bf00      	nop
 800d024:	2000000d 	.word	0x2000000d

0800d028 <__ieee754_pow>:
 800d028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d02c:	b093      	sub	sp, #76	; 0x4c
 800d02e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d032:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800d036:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800d03a:	ea55 0302 	orrs.w	r3, r5, r2
 800d03e:	4607      	mov	r7, r0
 800d040:	4688      	mov	r8, r1
 800d042:	f000 84bf 	beq.w	800d9c4 <__ieee754_pow+0x99c>
 800d046:	4b7e      	ldr	r3, [pc, #504]	; (800d240 <__ieee754_pow+0x218>)
 800d048:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800d04c:	429c      	cmp	r4, r3
 800d04e:	4689      	mov	r9, r1
 800d050:	4682      	mov	sl, r0
 800d052:	dc09      	bgt.n	800d068 <__ieee754_pow+0x40>
 800d054:	d103      	bne.n	800d05e <__ieee754_pow+0x36>
 800d056:	b978      	cbnz	r0, 800d078 <__ieee754_pow+0x50>
 800d058:	42a5      	cmp	r5, r4
 800d05a:	dd02      	ble.n	800d062 <__ieee754_pow+0x3a>
 800d05c:	e00c      	b.n	800d078 <__ieee754_pow+0x50>
 800d05e:	429d      	cmp	r5, r3
 800d060:	dc02      	bgt.n	800d068 <__ieee754_pow+0x40>
 800d062:	429d      	cmp	r5, r3
 800d064:	d10e      	bne.n	800d084 <__ieee754_pow+0x5c>
 800d066:	b16a      	cbz	r2, 800d084 <__ieee754_pow+0x5c>
 800d068:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d06c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d070:	ea54 030a 	orrs.w	r3, r4, sl
 800d074:	f000 84a6 	beq.w	800d9c4 <__ieee754_pow+0x99c>
 800d078:	4872      	ldr	r0, [pc, #456]	; (800d244 <__ieee754_pow+0x21c>)
 800d07a:	b013      	add	sp, #76	; 0x4c
 800d07c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d080:	f001 bc3e 	b.w	800e900 <nan>
 800d084:	f1b9 0f00 	cmp.w	r9, #0
 800d088:	da39      	bge.n	800d0fe <__ieee754_pow+0xd6>
 800d08a:	4b6f      	ldr	r3, [pc, #444]	; (800d248 <__ieee754_pow+0x220>)
 800d08c:	429d      	cmp	r5, r3
 800d08e:	dc54      	bgt.n	800d13a <__ieee754_pow+0x112>
 800d090:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d094:	429d      	cmp	r5, r3
 800d096:	f340 84a6 	ble.w	800d9e6 <__ieee754_pow+0x9be>
 800d09a:	152b      	asrs	r3, r5, #20
 800d09c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d0a0:	2b14      	cmp	r3, #20
 800d0a2:	dd0f      	ble.n	800d0c4 <__ieee754_pow+0x9c>
 800d0a4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d0a8:	fa22 f103 	lsr.w	r1, r2, r3
 800d0ac:	fa01 f303 	lsl.w	r3, r1, r3
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	f040 8498 	bne.w	800d9e6 <__ieee754_pow+0x9be>
 800d0b6:	f001 0101 	and.w	r1, r1, #1
 800d0ba:	f1c1 0302 	rsb	r3, r1, #2
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	b182      	cbz	r2, 800d0e4 <__ieee754_pow+0xbc>
 800d0c2:	e05e      	b.n	800d182 <__ieee754_pow+0x15a>
 800d0c4:	2a00      	cmp	r2, #0
 800d0c6:	d15a      	bne.n	800d17e <__ieee754_pow+0x156>
 800d0c8:	f1c3 0314 	rsb	r3, r3, #20
 800d0cc:	fa45 f103 	asr.w	r1, r5, r3
 800d0d0:	fa01 f303 	lsl.w	r3, r1, r3
 800d0d4:	42ab      	cmp	r3, r5
 800d0d6:	f040 8483 	bne.w	800d9e0 <__ieee754_pow+0x9b8>
 800d0da:	f001 0101 	and.w	r1, r1, #1
 800d0de:	f1c1 0302 	rsb	r3, r1, #2
 800d0e2:	9300      	str	r3, [sp, #0]
 800d0e4:	4b59      	ldr	r3, [pc, #356]	; (800d24c <__ieee754_pow+0x224>)
 800d0e6:	429d      	cmp	r5, r3
 800d0e8:	d130      	bne.n	800d14c <__ieee754_pow+0x124>
 800d0ea:	2e00      	cmp	r6, #0
 800d0ec:	f280 8474 	bge.w	800d9d8 <__ieee754_pow+0x9b0>
 800d0f0:	463a      	mov	r2, r7
 800d0f2:	4643      	mov	r3, r8
 800d0f4:	2000      	movs	r0, #0
 800d0f6:	4955      	ldr	r1, [pc, #340]	; (800d24c <__ieee754_pow+0x224>)
 800d0f8:	f7f3 fb10 	bl	800071c <__aeabi_ddiv>
 800d0fc:	e02f      	b.n	800d15e <__ieee754_pow+0x136>
 800d0fe:	2300      	movs	r3, #0
 800d100:	9300      	str	r3, [sp, #0]
 800d102:	2a00      	cmp	r2, #0
 800d104:	d13d      	bne.n	800d182 <__ieee754_pow+0x15a>
 800d106:	4b4e      	ldr	r3, [pc, #312]	; (800d240 <__ieee754_pow+0x218>)
 800d108:	429d      	cmp	r5, r3
 800d10a:	d1eb      	bne.n	800d0e4 <__ieee754_pow+0xbc>
 800d10c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d110:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d114:	ea53 030a 	orrs.w	r3, r3, sl
 800d118:	f000 8454 	beq.w	800d9c4 <__ieee754_pow+0x99c>
 800d11c:	4b4c      	ldr	r3, [pc, #304]	; (800d250 <__ieee754_pow+0x228>)
 800d11e:	429c      	cmp	r4, r3
 800d120:	dd0d      	ble.n	800d13e <__ieee754_pow+0x116>
 800d122:	2e00      	cmp	r6, #0
 800d124:	f280 8454 	bge.w	800d9d0 <__ieee754_pow+0x9a8>
 800d128:	f04f 0b00 	mov.w	fp, #0
 800d12c:	f04f 0c00 	mov.w	ip, #0
 800d130:	4658      	mov	r0, fp
 800d132:	4661      	mov	r1, ip
 800d134:	b013      	add	sp, #76	; 0x4c
 800d136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d13a:	2302      	movs	r3, #2
 800d13c:	e7e0      	b.n	800d100 <__ieee754_pow+0xd8>
 800d13e:	2e00      	cmp	r6, #0
 800d140:	daf2      	bge.n	800d128 <__ieee754_pow+0x100>
 800d142:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800d146:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800d14a:	e7f1      	b.n	800d130 <__ieee754_pow+0x108>
 800d14c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800d150:	d108      	bne.n	800d164 <__ieee754_pow+0x13c>
 800d152:	463a      	mov	r2, r7
 800d154:	4643      	mov	r3, r8
 800d156:	4638      	mov	r0, r7
 800d158:	4641      	mov	r1, r8
 800d15a:	f7f3 f9b5 	bl	80004c8 <__aeabi_dmul>
 800d15e:	4683      	mov	fp, r0
 800d160:	468c      	mov	ip, r1
 800d162:	e7e5      	b.n	800d130 <__ieee754_pow+0x108>
 800d164:	4b3b      	ldr	r3, [pc, #236]	; (800d254 <__ieee754_pow+0x22c>)
 800d166:	429e      	cmp	r6, r3
 800d168:	d10b      	bne.n	800d182 <__ieee754_pow+0x15a>
 800d16a:	f1b9 0f00 	cmp.w	r9, #0
 800d16e:	db08      	blt.n	800d182 <__ieee754_pow+0x15a>
 800d170:	4638      	mov	r0, r7
 800d172:	4641      	mov	r1, r8
 800d174:	b013      	add	sp, #76	; 0x4c
 800d176:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d17a:	f000 bc6b 	b.w	800da54 <__ieee754_sqrt>
 800d17e:	2300      	movs	r3, #0
 800d180:	9300      	str	r3, [sp, #0]
 800d182:	4638      	mov	r0, r7
 800d184:	4641      	mov	r1, r8
 800d186:	f001 fbb1 	bl	800e8ec <fabs>
 800d18a:	4683      	mov	fp, r0
 800d18c:	468c      	mov	ip, r1
 800d18e:	f1ba 0f00 	cmp.w	sl, #0
 800d192:	d129      	bne.n	800d1e8 <__ieee754_pow+0x1c0>
 800d194:	b124      	cbz	r4, 800d1a0 <__ieee754_pow+0x178>
 800d196:	4b2d      	ldr	r3, [pc, #180]	; (800d24c <__ieee754_pow+0x224>)
 800d198:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d123      	bne.n	800d1e8 <__ieee754_pow+0x1c0>
 800d1a0:	2e00      	cmp	r6, #0
 800d1a2:	da07      	bge.n	800d1b4 <__ieee754_pow+0x18c>
 800d1a4:	465a      	mov	r2, fp
 800d1a6:	4663      	mov	r3, ip
 800d1a8:	2000      	movs	r0, #0
 800d1aa:	4928      	ldr	r1, [pc, #160]	; (800d24c <__ieee754_pow+0x224>)
 800d1ac:	f7f3 fab6 	bl	800071c <__aeabi_ddiv>
 800d1b0:	4683      	mov	fp, r0
 800d1b2:	468c      	mov	ip, r1
 800d1b4:	f1b9 0f00 	cmp.w	r9, #0
 800d1b8:	daba      	bge.n	800d130 <__ieee754_pow+0x108>
 800d1ba:	9b00      	ldr	r3, [sp, #0]
 800d1bc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d1c0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d1c4:	4323      	orrs	r3, r4
 800d1c6:	d108      	bne.n	800d1da <__ieee754_pow+0x1b2>
 800d1c8:	465a      	mov	r2, fp
 800d1ca:	4663      	mov	r3, ip
 800d1cc:	4658      	mov	r0, fp
 800d1ce:	4661      	mov	r1, ip
 800d1d0:	f7f2 ffc2 	bl	8000158 <__aeabi_dsub>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	e78e      	b.n	800d0f8 <__ieee754_pow+0xd0>
 800d1da:	9b00      	ldr	r3, [sp, #0]
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d1a7      	bne.n	800d130 <__ieee754_pow+0x108>
 800d1e0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800d1e4:	469c      	mov	ip, r3
 800d1e6:	e7a3      	b.n	800d130 <__ieee754_pow+0x108>
 800d1e8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800d1ec:	3b01      	subs	r3, #1
 800d1ee:	930c      	str	r3, [sp, #48]	; 0x30
 800d1f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d1f2:	9b00      	ldr	r3, [sp, #0]
 800d1f4:	4313      	orrs	r3, r2
 800d1f6:	d104      	bne.n	800d202 <__ieee754_pow+0x1da>
 800d1f8:	463a      	mov	r2, r7
 800d1fa:	4643      	mov	r3, r8
 800d1fc:	4638      	mov	r0, r7
 800d1fe:	4641      	mov	r1, r8
 800d200:	e7e6      	b.n	800d1d0 <__ieee754_pow+0x1a8>
 800d202:	4b15      	ldr	r3, [pc, #84]	; (800d258 <__ieee754_pow+0x230>)
 800d204:	429d      	cmp	r5, r3
 800d206:	f340 80f9 	ble.w	800d3fc <__ieee754_pow+0x3d4>
 800d20a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d20e:	429d      	cmp	r5, r3
 800d210:	4b0f      	ldr	r3, [pc, #60]	; (800d250 <__ieee754_pow+0x228>)
 800d212:	dd09      	ble.n	800d228 <__ieee754_pow+0x200>
 800d214:	429c      	cmp	r4, r3
 800d216:	dc0c      	bgt.n	800d232 <__ieee754_pow+0x20a>
 800d218:	2e00      	cmp	r6, #0
 800d21a:	da85      	bge.n	800d128 <__ieee754_pow+0x100>
 800d21c:	a306      	add	r3, pc, #24	; (adr r3, 800d238 <__ieee754_pow+0x210>)
 800d21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d222:	4610      	mov	r0, r2
 800d224:	4619      	mov	r1, r3
 800d226:	e798      	b.n	800d15a <__ieee754_pow+0x132>
 800d228:	429c      	cmp	r4, r3
 800d22a:	dbf5      	blt.n	800d218 <__ieee754_pow+0x1f0>
 800d22c:	4b07      	ldr	r3, [pc, #28]	; (800d24c <__ieee754_pow+0x224>)
 800d22e:	429c      	cmp	r4, r3
 800d230:	dd14      	ble.n	800d25c <__ieee754_pow+0x234>
 800d232:	2e00      	cmp	r6, #0
 800d234:	dcf2      	bgt.n	800d21c <__ieee754_pow+0x1f4>
 800d236:	e777      	b.n	800d128 <__ieee754_pow+0x100>
 800d238:	8800759c 	.word	0x8800759c
 800d23c:	7e37e43c 	.word	0x7e37e43c
 800d240:	7ff00000 	.word	0x7ff00000
 800d244:	0800efc8 	.word	0x0800efc8
 800d248:	433fffff 	.word	0x433fffff
 800d24c:	3ff00000 	.word	0x3ff00000
 800d250:	3fefffff 	.word	0x3fefffff
 800d254:	3fe00000 	.word	0x3fe00000
 800d258:	41e00000 	.word	0x41e00000
 800d25c:	4661      	mov	r1, ip
 800d25e:	2200      	movs	r2, #0
 800d260:	4658      	mov	r0, fp
 800d262:	4b61      	ldr	r3, [pc, #388]	; (800d3e8 <__ieee754_pow+0x3c0>)
 800d264:	f7f2 ff78 	bl	8000158 <__aeabi_dsub>
 800d268:	a355      	add	r3, pc, #340	; (adr r3, 800d3c0 <__ieee754_pow+0x398>)
 800d26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26e:	4604      	mov	r4, r0
 800d270:	460d      	mov	r5, r1
 800d272:	f7f3 f929 	bl	80004c8 <__aeabi_dmul>
 800d276:	a354      	add	r3, pc, #336	; (adr r3, 800d3c8 <__ieee754_pow+0x3a0>)
 800d278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27c:	4606      	mov	r6, r0
 800d27e:	460f      	mov	r7, r1
 800d280:	4620      	mov	r0, r4
 800d282:	4629      	mov	r1, r5
 800d284:	f7f3 f920 	bl	80004c8 <__aeabi_dmul>
 800d288:	2200      	movs	r2, #0
 800d28a:	4682      	mov	sl, r0
 800d28c:	468b      	mov	fp, r1
 800d28e:	4620      	mov	r0, r4
 800d290:	4629      	mov	r1, r5
 800d292:	4b56      	ldr	r3, [pc, #344]	; (800d3ec <__ieee754_pow+0x3c4>)
 800d294:	f7f3 f918 	bl	80004c8 <__aeabi_dmul>
 800d298:	4602      	mov	r2, r0
 800d29a:	460b      	mov	r3, r1
 800d29c:	a14c      	add	r1, pc, #304	; (adr r1, 800d3d0 <__ieee754_pow+0x3a8>)
 800d29e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2a2:	f7f2 ff59 	bl	8000158 <__aeabi_dsub>
 800d2a6:	4622      	mov	r2, r4
 800d2a8:	462b      	mov	r3, r5
 800d2aa:	f7f3 f90d 	bl	80004c8 <__aeabi_dmul>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	2000      	movs	r0, #0
 800d2b4:	494e      	ldr	r1, [pc, #312]	; (800d3f0 <__ieee754_pow+0x3c8>)
 800d2b6:	f7f2 ff4f 	bl	8000158 <__aeabi_dsub>
 800d2ba:	4622      	mov	r2, r4
 800d2bc:	462b      	mov	r3, r5
 800d2be:	4680      	mov	r8, r0
 800d2c0:	4689      	mov	r9, r1
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	4629      	mov	r1, r5
 800d2c6:	f7f3 f8ff 	bl	80004c8 <__aeabi_dmul>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	4640      	mov	r0, r8
 800d2d0:	4649      	mov	r1, r9
 800d2d2:	f7f3 f8f9 	bl	80004c8 <__aeabi_dmul>
 800d2d6:	a340      	add	r3, pc, #256	; (adr r3, 800d3d8 <__ieee754_pow+0x3b0>)
 800d2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2dc:	f7f3 f8f4 	bl	80004c8 <__aeabi_dmul>
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	460b      	mov	r3, r1
 800d2e4:	4650      	mov	r0, sl
 800d2e6:	4659      	mov	r1, fp
 800d2e8:	f7f2 ff36 	bl	8000158 <__aeabi_dsub>
 800d2ec:	f04f 0a00 	mov.w	sl, #0
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	4604      	mov	r4, r0
 800d2f6:	460d      	mov	r5, r1
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	4639      	mov	r1, r7
 800d2fc:	f7f2 ff2e 	bl	800015c <__adddf3>
 800d300:	4632      	mov	r2, r6
 800d302:	463b      	mov	r3, r7
 800d304:	4650      	mov	r0, sl
 800d306:	468b      	mov	fp, r1
 800d308:	f7f2 ff26 	bl	8000158 <__aeabi_dsub>
 800d30c:	4602      	mov	r2, r0
 800d30e:	460b      	mov	r3, r1
 800d310:	4620      	mov	r0, r4
 800d312:	4629      	mov	r1, r5
 800d314:	f7f2 ff20 	bl	8000158 <__aeabi_dsub>
 800d318:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d31c:	9b00      	ldr	r3, [sp, #0]
 800d31e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d320:	3b01      	subs	r3, #1
 800d322:	4313      	orrs	r3, r2
 800d324:	f04f 0600 	mov.w	r6, #0
 800d328:	f04f 0200 	mov.w	r2, #0
 800d32c:	bf0c      	ite	eq
 800d32e:	4b31      	ldreq	r3, [pc, #196]	; (800d3f4 <__ieee754_pow+0x3cc>)
 800d330:	4b2d      	ldrne	r3, [pc, #180]	; (800d3e8 <__ieee754_pow+0x3c0>)
 800d332:	4604      	mov	r4, r0
 800d334:	460d      	mov	r5, r1
 800d336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d33a:	e9cd 2300 	strd	r2, r3, [sp]
 800d33e:	4632      	mov	r2, r6
 800d340:	463b      	mov	r3, r7
 800d342:	f7f2 ff09 	bl	8000158 <__aeabi_dsub>
 800d346:	4652      	mov	r2, sl
 800d348:	465b      	mov	r3, fp
 800d34a:	f7f3 f8bd 	bl	80004c8 <__aeabi_dmul>
 800d34e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d352:	4680      	mov	r8, r0
 800d354:	4689      	mov	r9, r1
 800d356:	4620      	mov	r0, r4
 800d358:	4629      	mov	r1, r5
 800d35a:	f7f3 f8b5 	bl	80004c8 <__aeabi_dmul>
 800d35e:	4602      	mov	r2, r0
 800d360:	460b      	mov	r3, r1
 800d362:	4640      	mov	r0, r8
 800d364:	4649      	mov	r1, r9
 800d366:	f7f2 fef9 	bl	800015c <__adddf3>
 800d36a:	4632      	mov	r2, r6
 800d36c:	463b      	mov	r3, r7
 800d36e:	4680      	mov	r8, r0
 800d370:	4689      	mov	r9, r1
 800d372:	4650      	mov	r0, sl
 800d374:	4659      	mov	r1, fp
 800d376:	f7f3 f8a7 	bl	80004c8 <__aeabi_dmul>
 800d37a:	4604      	mov	r4, r0
 800d37c:	460d      	mov	r5, r1
 800d37e:	460b      	mov	r3, r1
 800d380:	4602      	mov	r2, r0
 800d382:	4649      	mov	r1, r9
 800d384:	4640      	mov	r0, r8
 800d386:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d38a:	f7f2 fee7 	bl	800015c <__adddf3>
 800d38e:	4b1a      	ldr	r3, [pc, #104]	; (800d3f8 <__ieee754_pow+0x3d0>)
 800d390:	4682      	mov	sl, r0
 800d392:	4299      	cmp	r1, r3
 800d394:	460f      	mov	r7, r1
 800d396:	460e      	mov	r6, r1
 800d398:	f340 82ed 	ble.w	800d976 <__ieee754_pow+0x94e>
 800d39c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d3a0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d3a4:	4303      	orrs	r3, r0
 800d3a6:	f000 81e7 	beq.w	800d778 <__ieee754_pow+0x750>
 800d3aa:	a30d      	add	r3, pc, #52	; (adr r3, 800d3e0 <__ieee754_pow+0x3b8>)
 800d3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3b4:	f7f3 f888 	bl	80004c8 <__aeabi_dmul>
 800d3b8:	a309      	add	r3, pc, #36	; (adr r3, 800d3e0 <__ieee754_pow+0x3b8>)
 800d3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3be:	e6cc      	b.n	800d15a <__ieee754_pow+0x132>
 800d3c0:	60000000 	.word	0x60000000
 800d3c4:	3ff71547 	.word	0x3ff71547
 800d3c8:	f85ddf44 	.word	0xf85ddf44
 800d3cc:	3e54ae0b 	.word	0x3e54ae0b
 800d3d0:	55555555 	.word	0x55555555
 800d3d4:	3fd55555 	.word	0x3fd55555
 800d3d8:	652b82fe 	.word	0x652b82fe
 800d3dc:	3ff71547 	.word	0x3ff71547
 800d3e0:	8800759c 	.word	0x8800759c
 800d3e4:	7e37e43c 	.word	0x7e37e43c
 800d3e8:	3ff00000 	.word	0x3ff00000
 800d3ec:	3fd00000 	.word	0x3fd00000
 800d3f0:	3fe00000 	.word	0x3fe00000
 800d3f4:	bff00000 	.word	0xbff00000
 800d3f8:	408fffff 	.word	0x408fffff
 800d3fc:	4bd4      	ldr	r3, [pc, #848]	; (800d750 <__ieee754_pow+0x728>)
 800d3fe:	2200      	movs	r2, #0
 800d400:	ea09 0303 	and.w	r3, r9, r3
 800d404:	b943      	cbnz	r3, 800d418 <__ieee754_pow+0x3f0>
 800d406:	4658      	mov	r0, fp
 800d408:	4661      	mov	r1, ip
 800d40a:	4bd2      	ldr	r3, [pc, #840]	; (800d754 <__ieee754_pow+0x72c>)
 800d40c:	f7f3 f85c 	bl	80004c8 <__aeabi_dmul>
 800d410:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d414:	4683      	mov	fp, r0
 800d416:	460c      	mov	r4, r1
 800d418:	1523      	asrs	r3, r4, #20
 800d41a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d41e:	4413      	add	r3, r2
 800d420:	930b      	str	r3, [sp, #44]	; 0x2c
 800d422:	4bcd      	ldr	r3, [pc, #820]	; (800d758 <__ieee754_pow+0x730>)
 800d424:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d428:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d42c:	429c      	cmp	r4, r3
 800d42e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d432:	dd08      	ble.n	800d446 <__ieee754_pow+0x41e>
 800d434:	4bc9      	ldr	r3, [pc, #804]	; (800d75c <__ieee754_pow+0x734>)
 800d436:	429c      	cmp	r4, r3
 800d438:	f340 819c 	ble.w	800d774 <__ieee754_pow+0x74c>
 800d43c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d43e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d442:	3301      	adds	r3, #1
 800d444:	930b      	str	r3, [sp, #44]	; 0x2c
 800d446:	2600      	movs	r6, #0
 800d448:	00f3      	lsls	r3, r6, #3
 800d44a:	930d      	str	r3, [sp, #52]	; 0x34
 800d44c:	4bc4      	ldr	r3, [pc, #784]	; (800d760 <__ieee754_pow+0x738>)
 800d44e:	4658      	mov	r0, fp
 800d450:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d454:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d458:	4629      	mov	r1, r5
 800d45a:	461a      	mov	r2, r3
 800d45c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800d460:	4623      	mov	r3, r4
 800d462:	f7f2 fe79 	bl	8000158 <__aeabi_dsub>
 800d466:	46da      	mov	sl, fp
 800d468:	462b      	mov	r3, r5
 800d46a:	4652      	mov	r2, sl
 800d46c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d470:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d474:	f7f2 fe72 	bl	800015c <__adddf3>
 800d478:	4602      	mov	r2, r0
 800d47a:	460b      	mov	r3, r1
 800d47c:	2000      	movs	r0, #0
 800d47e:	49b9      	ldr	r1, [pc, #740]	; (800d764 <__ieee754_pow+0x73c>)
 800d480:	f7f3 f94c 	bl	800071c <__aeabi_ddiv>
 800d484:	4602      	mov	r2, r0
 800d486:	460b      	mov	r3, r1
 800d488:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d48c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d490:	f7f3 f81a 	bl	80004c8 <__aeabi_dmul>
 800d494:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d498:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800d49c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	46ab      	mov	fp, r5
 800d4a6:	106d      	asrs	r5, r5, #1
 800d4a8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d4ac:	9304      	str	r3, [sp, #16]
 800d4ae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d4b2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d4b6:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800d4ba:	4640      	mov	r0, r8
 800d4bc:	4649      	mov	r1, r9
 800d4be:	4614      	mov	r4, r2
 800d4c0:	461d      	mov	r5, r3
 800d4c2:	f7f3 f801 	bl	80004c8 <__aeabi_dmul>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d4ce:	f7f2 fe43 	bl	8000158 <__aeabi_dsub>
 800d4d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d4d6:	4606      	mov	r6, r0
 800d4d8:	460f      	mov	r7, r1
 800d4da:	4620      	mov	r0, r4
 800d4dc:	4629      	mov	r1, r5
 800d4de:	f7f2 fe3b 	bl	8000158 <__aeabi_dsub>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	4650      	mov	r0, sl
 800d4e8:	4659      	mov	r1, fp
 800d4ea:	f7f2 fe35 	bl	8000158 <__aeabi_dsub>
 800d4ee:	4642      	mov	r2, r8
 800d4f0:	464b      	mov	r3, r9
 800d4f2:	f7f2 ffe9 	bl	80004c8 <__aeabi_dmul>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	4639      	mov	r1, r7
 800d4fe:	f7f2 fe2b 	bl	8000158 <__aeabi_dsub>
 800d502:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d506:	f7f2 ffdf 	bl	80004c8 <__aeabi_dmul>
 800d50a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d50e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d512:	4610      	mov	r0, r2
 800d514:	4619      	mov	r1, r3
 800d516:	f7f2 ffd7 	bl	80004c8 <__aeabi_dmul>
 800d51a:	a37b      	add	r3, pc, #492	; (adr r3, 800d708 <__ieee754_pow+0x6e0>)
 800d51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d520:	4604      	mov	r4, r0
 800d522:	460d      	mov	r5, r1
 800d524:	f7f2 ffd0 	bl	80004c8 <__aeabi_dmul>
 800d528:	a379      	add	r3, pc, #484	; (adr r3, 800d710 <__ieee754_pow+0x6e8>)
 800d52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52e:	f7f2 fe15 	bl	800015c <__adddf3>
 800d532:	4622      	mov	r2, r4
 800d534:	462b      	mov	r3, r5
 800d536:	f7f2 ffc7 	bl	80004c8 <__aeabi_dmul>
 800d53a:	a377      	add	r3, pc, #476	; (adr r3, 800d718 <__ieee754_pow+0x6f0>)
 800d53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d540:	f7f2 fe0c 	bl	800015c <__adddf3>
 800d544:	4622      	mov	r2, r4
 800d546:	462b      	mov	r3, r5
 800d548:	f7f2 ffbe 	bl	80004c8 <__aeabi_dmul>
 800d54c:	a374      	add	r3, pc, #464	; (adr r3, 800d720 <__ieee754_pow+0x6f8>)
 800d54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d552:	f7f2 fe03 	bl	800015c <__adddf3>
 800d556:	4622      	mov	r2, r4
 800d558:	462b      	mov	r3, r5
 800d55a:	f7f2 ffb5 	bl	80004c8 <__aeabi_dmul>
 800d55e:	a372      	add	r3, pc, #456	; (adr r3, 800d728 <__ieee754_pow+0x700>)
 800d560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d564:	f7f2 fdfa 	bl	800015c <__adddf3>
 800d568:	4622      	mov	r2, r4
 800d56a:	462b      	mov	r3, r5
 800d56c:	f7f2 ffac 	bl	80004c8 <__aeabi_dmul>
 800d570:	a36f      	add	r3, pc, #444	; (adr r3, 800d730 <__ieee754_pow+0x708>)
 800d572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d576:	f7f2 fdf1 	bl	800015c <__adddf3>
 800d57a:	4622      	mov	r2, r4
 800d57c:	4606      	mov	r6, r0
 800d57e:	460f      	mov	r7, r1
 800d580:	462b      	mov	r3, r5
 800d582:	4620      	mov	r0, r4
 800d584:	4629      	mov	r1, r5
 800d586:	f7f2 ff9f 	bl	80004c8 <__aeabi_dmul>
 800d58a:	4602      	mov	r2, r0
 800d58c:	460b      	mov	r3, r1
 800d58e:	4630      	mov	r0, r6
 800d590:	4639      	mov	r1, r7
 800d592:	f7f2 ff99 	bl	80004c8 <__aeabi_dmul>
 800d596:	4604      	mov	r4, r0
 800d598:	460d      	mov	r5, r1
 800d59a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d59e:	4642      	mov	r2, r8
 800d5a0:	464b      	mov	r3, r9
 800d5a2:	f7f2 fddb 	bl	800015c <__adddf3>
 800d5a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d5aa:	f7f2 ff8d 	bl	80004c8 <__aeabi_dmul>
 800d5ae:	4622      	mov	r2, r4
 800d5b0:	462b      	mov	r3, r5
 800d5b2:	f7f2 fdd3 	bl	800015c <__adddf3>
 800d5b6:	4642      	mov	r2, r8
 800d5b8:	4606      	mov	r6, r0
 800d5ba:	460f      	mov	r7, r1
 800d5bc:	464b      	mov	r3, r9
 800d5be:	4640      	mov	r0, r8
 800d5c0:	4649      	mov	r1, r9
 800d5c2:	f7f2 ff81 	bl	80004c8 <__aeabi_dmul>
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	4b67      	ldr	r3, [pc, #412]	; (800d768 <__ieee754_pow+0x740>)
 800d5ca:	4682      	mov	sl, r0
 800d5cc:	468b      	mov	fp, r1
 800d5ce:	f7f2 fdc5 	bl	800015c <__adddf3>
 800d5d2:	4632      	mov	r2, r6
 800d5d4:	463b      	mov	r3, r7
 800d5d6:	f7f2 fdc1 	bl	800015c <__adddf3>
 800d5da:	9c04      	ldr	r4, [sp, #16]
 800d5dc:	460d      	mov	r5, r1
 800d5de:	4622      	mov	r2, r4
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	4640      	mov	r0, r8
 800d5e4:	4649      	mov	r1, r9
 800d5e6:	f7f2 ff6f 	bl	80004c8 <__aeabi_dmul>
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	4680      	mov	r8, r0
 800d5ee:	4689      	mov	r9, r1
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	4629      	mov	r1, r5
 800d5f4:	4b5c      	ldr	r3, [pc, #368]	; (800d768 <__ieee754_pow+0x740>)
 800d5f6:	f7f2 fdaf 	bl	8000158 <__aeabi_dsub>
 800d5fa:	4652      	mov	r2, sl
 800d5fc:	465b      	mov	r3, fp
 800d5fe:	f7f2 fdab 	bl	8000158 <__aeabi_dsub>
 800d602:	4602      	mov	r2, r0
 800d604:	460b      	mov	r3, r1
 800d606:	4630      	mov	r0, r6
 800d608:	4639      	mov	r1, r7
 800d60a:	f7f2 fda5 	bl	8000158 <__aeabi_dsub>
 800d60e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d612:	f7f2 ff59 	bl	80004c8 <__aeabi_dmul>
 800d616:	4622      	mov	r2, r4
 800d618:	4606      	mov	r6, r0
 800d61a:	460f      	mov	r7, r1
 800d61c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d620:	462b      	mov	r3, r5
 800d622:	f7f2 ff51 	bl	80004c8 <__aeabi_dmul>
 800d626:	4602      	mov	r2, r0
 800d628:	460b      	mov	r3, r1
 800d62a:	4630      	mov	r0, r6
 800d62c:	4639      	mov	r1, r7
 800d62e:	f7f2 fd95 	bl	800015c <__adddf3>
 800d632:	4606      	mov	r6, r0
 800d634:	460f      	mov	r7, r1
 800d636:	4602      	mov	r2, r0
 800d638:	460b      	mov	r3, r1
 800d63a:	4640      	mov	r0, r8
 800d63c:	4649      	mov	r1, r9
 800d63e:	f7f2 fd8d 	bl	800015c <__adddf3>
 800d642:	a33d      	add	r3, pc, #244	; (adr r3, 800d738 <__ieee754_pow+0x710>)
 800d644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d648:	9c04      	ldr	r4, [sp, #16]
 800d64a:	460d      	mov	r5, r1
 800d64c:	4620      	mov	r0, r4
 800d64e:	f7f2 ff3b 	bl	80004c8 <__aeabi_dmul>
 800d652:	4642      	mov	r2, r8
 800d654:	464b      	mov	r3, r9
 800d656:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d65a:	4620      	mov	r0, r4
 800d65c:	4629      	mov	r1, r5
 800d65e:	f7f2 fd7b 	bl	8000158 <__aeabi_dsub>
 800d662:	4602      	mov	r2, r0
 800d664:	460b      	mov	r3, r1
 800d666:	4630      	mov	r0, r6
 800d668:	4639      	mov	r1, r7
 800d66a:	f7f2 fd75 	bl	8000158 <__aeabi_dsub>
 800d66e:	a334      	add	r3, pc, #208	; (adr r3, 800d740 <__ieee754_pow+0x718>)
 800d670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d674:	f7f2 ff28 	bl	80004c8 <__aeabi_dmul>
 800d678:	a333      	add	r3, pc, #204	; (adr r3, 800d748 <__ieee754_pow+0x720>)
 800d67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67e:	4606      	mov	r6, r0
 800d680:	460f      	mov	r7, r1
 800d682:	4620      	mov	r0, r4
 800d684:	4629      	mov	r1, r5
 800d686:	f7f2 ff1f 	bl	80004c8 <__aeabi_dmul>
 800d68a:	4602      	mov	r2, r0
 800d68c:	460b      	mov	r3, r1
 800d68e:	4630      	mov	r0, r6
 800d690:	4639      	mov	r1, r7
 800d692:	f7f2 fd63 	bl	800015c <__adddf3>
 800d696:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d698:	4b34      	ldr	r3, [pc, #208]	; (800d76c <__ieee754_pow+0x744>)
 800d69a:	4413      	add	r3, r2
 800d69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a0:	f7f2 fd5c 	bl	800015c <__adddf3>
 800d6a4:	4680      	mov	r8, r0
 800d6a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d6a8:	4689      	mov	r9, r1
 800d6aa:	f7f2 fea3 	bl	80003f4 <__aeabi_i2d>
 800d6ae:	4604      	mov	r4, r0
 800d6b0:	460d      	mov	r5, r1
 800d6b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d6b4:	4b2e      	ldr	r3, [pc, #184]	; (800d770 <__ieee754_pow+0x748>)
 800d6b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6ba:	4413      	add	r3, r2
 800d6bc:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d6c0:	4642      	mov	r2, r8
 800d6c2:	464b      	mov	r3, r9
 800d6c4:	f7f2 fd4a 	bl	800015c <__adddf3>
 800d6c8:	4632      	mov	r2, r6
 800d6ca:	463b      	mov	r3, r7
 800d6cc:	f7f2 fd46 	bl	800015c <__adddf3>
 800d6d0:	4622      	mov	r2, r4
 800d6d2:	462b      	mov	r3, r5
 800d6d4:	f7f2 fd42 	bl	800015c <__adddf3>
 800d6d8:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d6dc:	4622      	mov	r2, r4
 800d6de:	462b      	mov	r3, r5
 800d6e0:	4650      	mov	r0, sl
 800d6e2:	468b      	mov	fp, r1
 800d6e4:	f7f2 fd38 	bl	8000158 <__aeabi_dsub>
 800d6e8:	4632      	mov	r2, r6
 800d6ea:	463b      	mov	r3, r7
 800d6ec:	f7f2 fd34 	bl	8000158 <__aeabi_dsub>
 800d6f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d6f4:	f7f2 fd30 	bl	8000158 <__aeabi_dsub>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	460b      	mov	r3, r1
 800d6fc:	4640      	mov	r0, r8
 800d6fe:	4649      	mov	r1, r9
 800d700:	e608      	b.n	800d314 <__ieee754_pow+0x2ec>
 800d702:	bf00      	nop
 800d704:	f3af 8000 	nop.w
 800d708:	4a454eef 	.word	0x4a454eef
 800d70c:	3fca7e28 	.word	0x3fca7e28
 800d710:	93c9db65 	.word	0x93c9db65
 800d714:	3fcd864a 	.word	0x3fcd864a
 800d718:	a91d4101 	.word	0xa91d4101
 800d71c:	3fd17460 	.word	0x3fd17460
 800d720:	518f264d 	.word	0x518f264d
 800d724:	3fd55555 	.word	0x3fd55555
 800d728:	db6fabff 	.word	0xdb6fabff
 800d72c:	3fdb6db6 	.word	0x3fdb6db6
 800d730:	33333303 	.word	0x33333303
 800d734:	3fe33333 	.word	0x3fe33333
 800d738:	e0000000 	.word	0xe0000000
 800d73c:	3feec709 	.word	0x3feec709
 800d740:	dc3a03fd 	.word	0xdc3a03fd
 800d744:	3feec709 	.word	0x3feec709
 800d748:	145b01f5 	.word	0x145b01f5
 800d74c:	be3e2fe0 	.word	0xbe3e2fe0
 800d750:	7ff00000 	.word	0x7ff00000
 800d754:	43400000 	.word	0x43400000
 800d758:	0003988e 	.word	0x0003988e
 800d75c:	000bb679 	.word	0x000bb679
 800d760:	0800efd0 	.word	0x0800efd0
 800d764:	3ff00000 	.word	0x3ff00000
 800d768:	40080000 	.word	0x40080000
 800d76c:	0800eff0 	.word	0x0800eff0
 800d770:	0800efe0 	.word	0x0800efe0
 800d774:	2601      	movs	r6, #1
 800d776:	e667      	b.n	800d448 <__ieee754_pow+0x420>
 800d778:	a39d      	add	r3, pc, #628	; (adr r3, 800d9f0 <__ieee754_pow+0x9c8>)
 800d77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77e:	4640      	mov	r0, r8
 800d780:	4649      	mov	r1, r9
 800d782:	f7f2 fceb 	bl	800015c <__adddf3>
 800d786:	4622      	mov	r2, r4
 800d788:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d78c:	462b      	mov	r3, r5
 800d78e:	4650      	mov	r0, sl
 800d790:	4639      	mov	r1, r7
 800d792:	f7f2 fce1 	bl	8000158 <__aeabi_dsub>
 800d796:	4602      	mov	r2, r0
 800d798:	460b      	mov	r3, r1
 800d79a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d79e:	f7f3 f923 	bl	80009e8 <__aeabi_dcmpgt>
 800d7a2:	2800      	cmp	r0, #0
 800d7a4:	f47f ae01 	bne.w	800d3aa <__ieee754_pow+0x382>
 800d7a8:	4aa5      	ldr	r2, [pc, #660]	; (800da40 <__ieee754_pow+0xa18>)
 800d7aa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	f340 8103 	ble.w	800d9ba <__ieee754_pow+0x992>
 800d7b4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d7b8:	2000      	movs	r0, #0
 800d7ba:	151b      	asrs	r3, r3, #20
 800d7bc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d7c0:	fa4a f303 	asr.w	r3, sl, r3
 800d7c4:	4433      	add	r3, r6
 800d7c6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d7ca:	4f9e      	ldr	r7, [pc, #632]	; (800da44 <__ieee754_pow+0xa1c>)
 800d7cc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d7d0:	4117      	asrs	r7, r2
 800d7d2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d7d6:	ea23 0107 	bic.w	r1, r3, r7
 800d7da:	f1c2 0214 	rsb	r2, r2, #20
 800d7de:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	fa4a fa02 	asr.w	sl, sl, r2
 800d7e8:	2e00      	cmp	r6, #0
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	4629      	mov	r1, r5
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	bfb8      	it	lt
 800d7f2:	f1ca 0a00 	rsblt	sl, sl, #0
 800d7f6:	f7f2 fcaf 	bl	8000158 <__aeabi_dsub>
 800d7fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d802:	2400      	movs	r4, #0
 800d804:	4642      	mov	r2, r8
 800d806:	464b      	mov	r3, r9
 800d808:	f7f2 fca8 	bl	800015c <__adddf3>
 800d80c:	a37a      	add	r3, pc, #488	; (adr r3, 800d9f8 <__ieee754_pow+0x9d0>)
 800d80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d812:	4620      	mov	r0, r4
 800d814:	460d      	mov	r5, r1
 800d816:	f7f2 fe57 	bl	80004c8 <__aeabi_dmul>
 800d81a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d81e:	4606      	mov	r6, r0
 800d820:	460f      	mov	r7, r1
 800d822:	4620      	mov	r0, r4
 800d824:	4629      	mov	r1, r5
 800d826:	f7f2 fc97 	bl	8000158 <__aeabi_dsub>
 800d82a:	4602      	mov	r2, r0
 800d82c:	460b      	mov	r3, r1
 800d82e:	4640      	mov	r0, r8
 800d830:	4649      	mov	r1, r9
 800d832:	f7f2 fc91 	bl	8000158 <__aeabi_dsub>
 800d836:	a372      	add	r3, pc, #456	; (adr r3, 800da00 <__ieee754_pow+0x9d8>)
 800d838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83c:	f7f2 fe44 	bl	80004c8 <__aeabi_dmul>
 800d840:	a371      	add	r3, pc, #452	; (adr r3, 800da08 <__ieee754_pow+0x9e0>)
 800d842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d846:	4680      	mov	r8, r0
 800d848:	4689      	mov	r9, r1
 800d84a:	4620      	mov	r0, r4
 800d84c:	4629      	mov	r1, r5
 800d84e:	f7f2 fe3b 	bl	80004c8 <__aeabi_dmul>
 800d852:	4602      	mov	r2, r0
 800d854:	460b      	mov	r3, r1
 800d856:	4640      	mov	r0, r8
 800d858:	4649      	mov	r1, r9
 800d85a:	f7f2 fc7f 	bl	800015c <__adddf3>
 800d85e:	4604      	mov	r4, r0
 800d860:	460d      	mov	r5, r1
 800d862:	4602      	mov	r2, r0
 800d864:	460b      	mov	r3, r1
 800d866:	4630      	mov	r0, r6
 800d868:	4639      	mov	r1, r7
 800d86a:	f7f2 fc77 	bl	800015c <__adddf3>
 800d86e:	4632      	mov	r2, r6
 800d870:	463b      	mov	r3, r7
 800d872:	4680      	mov	r8, r0
 800d874:	4689      	mov	r9, r1
 800d876:	f7f2 fc6f 	bl	8000158 <__aeabi_dsub>
 800d87a:	4602      	mov	r2, r0
 800d87c:	460b      	mov	r3, r1
 800d87e:	4620      	mov	r0, r4
 800d880:	4629      	mov	r1, r5
 800d882:	f7f2 fc69 	bl	8000158 <__aeabi_dsub>
 800d886:	4642      	mov	r2, r8
 800d888:	4606      	mov	r6, r0
 800d88a:	460f      	mov	r7, r1
 800d88c:	464b      	mov	r3, r9
 800d88e:	4640      	mov	r0, r8
 800d890:	4649      	mov	r1, r9
 800d892:	f7f2 fe19 	bl	80004c8 <__aeabi_dmul>
 800d896:	a35e      	add	r3, pc, #376	; (adr r3, 800da10 <__ieee754_pow+0x9e8>)
 800d898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89c:	4604      	mov	r4, r0
 800d89e:	460d      	mov	r5, r1
 800d8a0:	f7f2 fe12 	bl	80004c8 <__aeabi_dmul>
 800d8a4:	a35c      	add	r3, pc, #368	; (adr r3, 800da18 <__ieee754_pow+0x9f0>)
 800d8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8aa:	f7f2 fc55 	bl	8000158 <__aeabi_dsub>
 800d8ae:	4622      	mov	r2, r4
 800d8b0:	462b      	mov	r3, r5
 800d8b2:	f7f2 fe09 	bl	80004c8 <__aeabi_dmul>
 800d8b6:	a35a      	add	r3, pc, #360	; (adr r3, 800da20 <__ieee754_pow+0x9f8>)
 800d8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8bc:	f7f2 fc4e 	bl	800015c <__adddf3>
 800d8c0:	4622      	mov	r2, r4
 800d8c2:	462b      	mov	r3, r5
 800d8c4:	f7f2 fe00 	bl	80004c8 <__aeabi_dmul>
 800d8c8:	a357      	add	r3, pc, #348	; (adr r3, 800da28 <__ieee754_pow+0xa00>)
 800d8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ce:	f7f2 fc43 	bl	8000158 <__aeabi_dsub>
 800d8d2:	4622      	mov	r2, r4
 800d8d4:	462b      	mov	r3, r5
 800d8d6:	f7f2 fdf7 	bl	80004c8 <__aeabi_dmul>
 800d8da:	a355      	add	r3, pc, #340	; (adr r3, 800da30 <__ieee754_pow+0xa08>)
 800d8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e0:	f7f2 fc3c 	bl	800015c <__adddf3>
 800d8e4:	4622      	mov	r2, r4
 800d8e6:	462b      	mov	r3, r5
 800d8e8:	f7f2 fdee 	bl	80004c8 <__aeabi_dmul>
 800d8ec:	4602      	mov	r2, r0
 800d8ee:	460b      	mov	r3, r1
 800d8f0:	4640      	mov	r0, r8
 800d8f2:	4649      	mov	r1, r9
 800d8f4:	f7f2 fc30 	bl	8000158 <__aeabi_dsub>
 800d8f8:	4604      	mov	r4, r0
 800d8fa:	460d      	mov	r5, r1
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	460b      	mov	r3, r1
 800d900:	4640      	mov	r0, r8
 800d902:	4649      	mov	r1, r9
 800d904:	f7f2 fde0 	bl	80004c8 <__aeabi_dmul>
 800d908:	2200      	movs	r2, #0
 800d90a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d90e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d912:	4620      	mov	r0, r4
 800d914:	4629      	mov	r1, r5
 800d916:	f7f2 fc1f 	bl	8000158 <__aeabi_dsub>
 800d91a:	4602      	mov	r2, r0
 800d91c:	460b      	mov	r3, r1
 800d91e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d922:	f7f2 fefb 	bl	800071c <__aeabi_ddiv>
 800d926:	4632      	mov	r2, r6
 800d928:	4604      	mov	r4, r0
 800d92a:	460d      	mov	r5, r1
 800d92c:	463b      	mov	r3, r7
 800d92e:	4640      	mov	r0, r8
 800d930:	4649      	mov	r1, r9
 800d932:	f7f2 fdc9 	bl	80004c8 <__aeabi_dmul>
 800d936:	4632      	mov	r2, r6
 800d938:	463b      	mov	r3, r7
 800d93a:	f7f2 fc0f 	bl	800015c <__adddf3>
 800d93e:	4602      	mov	r2, r0
 800d940:	460b      	mov	r3, r1
 800d942:	4620      	mov	r0, r4
 800d944:	4629      	mov	r1, r5
 800d946:	f7f2 fc07 	bl	8000158 <__aeabi_dsub>
 800d94a:	4642      	mov	r2, r8
 800d94c:	464b      	mov	r3, r9
 800d94e:	f7f2 fc03 	bl	8000158 <__aeabi_dsub>
 800d952:	4602      	mov	r2, r0
 800d954:	460b      	mov	r3, r1
 800d956:	2000      	movs	r0, #0
 800d958:	493b      	ldr	r1, [pc, #236]	; (800da48 <__ieee754_pow+0xa20>)
 800d95a:	f7f2 fbfd 	bl	8000158 <__aeabi_dsub>
 800d95e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d962:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d966:	da2b      	bge.n	800d9c0 <__ieee754_pow+0x998>
 800d968:	4652      	mov	r2, sl
 800d96a:	f001 f859 	bl	800ea20 <scalbn>
 800d96e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d972:	f7ff bbf2 	b.w	800d15a <__ieee754_pow+0x132>
 800d976:	4b35      	ldr	r3, [pc, #212]	; (800da4c <__ieee754_pow+0xa24>)
 800d978:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800d97c:	429f      	cmp	r7, r3
 800d97e:	f77f af13 	ble.w	800d7a8 <__ieee754_pow+0x780>
 800d982:	4b33      	ldr	r3, [pc, #204]	; (800da50 <__ieee754_pow+0xa28>)
 800d984:	440b      	add	r3, r1
 800d986:	4303      	orrs	r3, r0
 800d988:	d00b      	beq.n	800d9a2 <__ieee754_pow+0x97a>
 800d98a:	a32b      	add	r3, pc, #172	; (adr r3, 800da38 <__ieee754_pow+0xa10>)
 800d98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d990:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d994:	f7f2 fd98 	bl	80004c8 <__aeabi_dmul>
 800d998:	a327      	add	r3, pc, #156	; (adr r3, 800da38 <__ieee754_pow+0xa10>)
 800d99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99e:	f7ff bbdc 	b.w	800d15a <__ieee754_pow+0x132>
 800d9a2:	4622      	mov	r2, r4
 800d9a4:	462b      	mov	r3, r5
 800d9a6:	f7f2 fbd7 	bl	8000158 <__aeabi_dsub>
 800d9aa:	4642      	mov	r2, r8
 800d9ac:	464b      	mov	r3, r9
 800d9ae:	f7f3 f811 	bl	80009d4 <__aeabi_dcmpge>
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	f43f aef8 	beq.w	800d7a8 <__ieee754_pow+0x780>
 800d9b8:	e7e7      	b.n	800d98a <__ieee754_pow+0x962>
 800d9ba:	f04f 0a00 	mov.w	sl, #0
 800d9be:	e71e      	b.n	800d7fe <__ieee754_pow+0x7d6>
 800d9c0:	4621      	mov	r1, r4
 800d9c2:	e7d4      	b.n	800d96e <__ieee754_pow+0x946>
 800d9c4:	f04f 0b00 	mov.w	fp, #0
 800d9c8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800da48 <__ieee754_pow+0xa20>
 800d9cc:	f7ff bbb0 	b.w	800d130 <__ieee754_pow+0x108>
 800d9d0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800d9d4:	f7ff bbac 	b.w	800d130 <__ieee754_pow+0x108>
 800d9d8:	4638      	mov	r0, r7
 800d9da:	4641      	mov	r1, r8
 800d9dc:	f7ff bbbf 	b.w	800d15e <__ieee754_pow+0x136>
 800d9e0:	9200      	str	r2, [sp, #0]
 800d9e2:	f7ff bb7f 	b.w	800d0e4 <__ieee754_pow+0xbc>
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	f7ff bb69 	b.w	800d0be <__ieee754_pow+0x96>
 800d9ec:	f3af 8000 	nop.w
 800d9f0:	652b82fe 	.word	0x652b82fe
 800d9f4:	3c971547 	.word	0x3c971547
 800d9f8:	00000000 	.word	0x00000000
 800d9fc:	3fe62e43 	.word	0x3fe62e43
 800da00:	fefa39ef 	.word	0xfefa39ef
 800da04:	3fe62e42 	.word	0x3fe62e42
 800da08:	0ca86c39 	.word	0x0ca86c39
 800da0c:	be205c61 	.word	0xbe205c61
 800da10:	72bea4d0 	.word	0x72bea4d0
 800da14:	3e663769 	.word	0x3e663769
 800da18:	c5d26bf1 	.word	0xc5d26bf1
 800da1c:	3ebbbd41 	.word	0x3ebbbd41
 800da20:	af25de2c 	.word	0xaf25de2c
 800da24:	3f11566a 	.word	0x3f11566a
 800da28:	16bebd93 	.word	0x16bebd93
 800da2c:	3f66c16c 	.word	0x3f66c16c
 800da30:	5555553e 	.word	0x5555553e
 800da34:	3fc55555 	.word	0x3fc55555
 800da38:	c2f8f359 	.word	0xc2f8f359
 800da3c:	01a56e1f 	.word	0x01a56e1f
 800da40:	3fe00000 	.word	0x3fe00000
 800da44:	000fffff 	.word	0x000fffff
 800da48:	3ff00000 	.word	0x3ff00000
 800da4c:	4090cbff 	.word	0x4090cbff
 800da50:	3f6f3400 	.word	0x3f6f3400

0800da54 <__ieee754_sqrt>:
 800da54:	f8df c150 	ldr.w	ip, [pc, #336]	; 800dba8 <__ieee754_sqrt+0x154>
 800da58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da5c:	ea3c 0c01 	bics.w	ip, ip, r1
 800da60:	460b      	mov	r3, r1
 800da62:	4606      	mov	r6, r0
 800da64:	460d      	mov	r5, r1
 800da66:	460a      	mov	r2, r1
 800da68:	4607      	mov	r7, r0
 800da6a:	4604      	mov	r4, r0
 800da6c:	d10e      	bne.n	800da8c <__ieee754_sqrt+0x38>
 800da6e:	4602      	mov	r2, r0
 800da70:	f7f2 fd2a 	bl	80004c8 <__aeabi_dmul>
 800da74:	4602      	mov	r2, r0
 800da76:	460b      	mov	r3, r1
 800da78:	4630      	mov	r0, r6
 800da7a:	4629      	mov	r1, r5
 800da7c:	f7f2 fb6e 	bl	800015c <__adddf3>
 800da80:	4606      	mov	r6, r0
 800da82:	460d      	mov	r5, r1
 800da84:	4630      	mov	r0, r6
 800da86:	4629      	mov	r1, r5
 800da88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da8c:	2900      	cmp	r1, #0
 800da8e:	dc0d      	bgt.n	800daac <__ieee754_sqrt+0x58>
 800da90:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800da94:	ea5c 0707 	orrs.w	r7, ip, r7
 800da98:	d0f4      	beq.n	800da84 <__ieee754_sqrt+0x30>
 800da9a:	b139      	cbz	r1, 800daac <__ieee754_sqrt+0x58>
 800da9c:	4602      	mov	r2, r0
 800da9e:	f7f2 fb5b 	bl	8000158 <__aeabi_dsub>
 800daa2:	4602      	mov	r2, r0
 800daa4:	460b      	mov	r3, r1
 800daa6:	f7f2 fe39 	bl	800071c <__aeabi_ddiv>
 800daaa:	e7e9      	b.n	800da80 <__ieee754_sqrt+0x2c>
 800daac:	1512      	asrs	r2, r2, #20
 800daae:	d074      	beq.n	800db9a <__ieee754_sqrt+0x146>
 800dab0:	2000      	movs	r0, #0
 800dab2:	07d5      	lsls	r5, r2, #31
 800dab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dab8:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800dabc:	bf5e      	ittt	pl
 800dabe:	0fe3      	lsrpl	r3, r4, #31
 800dac0:	0064      	lslpl	r4, r4, #1
 800dac2:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800dac6:	0fe3      	lsrs	r3, r4, #31
 800dac8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800dacc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800dad0:	2516      	movs	r5, #22
 800dad2:	4601      	mov	r1, r0
 800dad4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800dad8:	1076      	asrs	r6, r6, #1
 800dada:	0064      	lsls	r4, r4, #1
 800dadc:	188f      	adds	r7, r1, r2
 800dade:	429f      	cmp	r7, r3
 800dae0:	bfde      	ittt	le
 800dae2:	1bdb      	suble	r3, r3, r7
 800dae4:	18b9      	addle	r1, r7, r2
 800dae6:	1880      	addle	r0, r0, r2
 800dae8:	005b      	lsls	r3, r3, #1
 800daea:	3d01      	subs	r5, #1
 800daec:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800daf0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800daf4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800daf8:	d1f0      	bne.n	800dadc <__ieee754_sqrt+0x88>
 800dafa:	462a      	mov	r2, r5
 800dafc:	f04f 0e20 	mov.w	lr, #32
 800db00:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800db04:	428b      	cmp	r3, r1
 800db06:	eb07 0c05 	add.w	ip, r7, r5
 800db0a:	dc02      	bgt.n	800db12 <__ieee754_sqrt+0xbe>
 800db0c:	d113      	bne.n	800db36 <__ieee754_sqrt+0xe2>
 800db0e:	45a4      	cmp	ip, r4
 800db10:	d811      	bhi.n	800db36 <__ieee754_sqrt+0xe2>
 800db12:	f1bc 0f00 	cmp.w	ip, #0
 800db16:	eb0c 0507 	add.w	r5, ip, r7
 800db1a:	da43      	bge.n	800dba4 <__ieee754_sqrt+0x150>
 800db1c:	2d00      	cmp	r5, #0
 800db1e:	db41      	blt.n	800dba4 <__ieee754_sqrt+0x150>
 800db20:	f101 0801 	add.w	r8, r1, #1
 800db24:	1a5b      	subs	r3, r3, r1
 800db26:	4641      	mov	r1, r8
 800db28:	45a4      	cmp	ip, r4
 800db2a:	bf88      	it	hi
 800db2c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800db30:	eba4 040c 	sub.w	r4, r4, ip
 800db34:	443a      	add	r2, r7
 800db36:	005b      	lsls	r3, r3, #1
 800db38:	f1be 0e01 	subs.w	lr, lr, #1
 800db3c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800db40:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800db44:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800db48:	d1dc      	bne.n	800db04 <__ieee754_sqrt+0xb0>
 800db4a:	4323      	orrs	r3, r4
 800db4c:	d006      	beq.n	800db5c <__ieee754_sqrt+0x108>
 800db4e:	1c54      	adds	r4, r2, #1
 800db50:	bf0b      	itete	eq
 800db52:	4672      	moveq	r2, lr
 800db54:	3201      	addne	r2, #1
 800db56:	3001      	addeq	r0, #1
 800db58:	f022 0201 	bicne.w	r2, r2, #1
 800db5c:	1043      	asrs	r3, r0, #1
 800db5e:	07c1      	lsls	r1, r0, #31
 800db60:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800db64:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800db68:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800db6c:	bf48      	it	mi
 800db6e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800db72:	4610      	mov	r0, r2
 800db74:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800db78:	e782      	b.n	800da80 <__ieee754_sqrt+0x2c>
 800db7a:	0ae3      	lsrs	r3, r4, #11
 800db7c:	3915      	subs	r1, #21
 800db7e:	0564      	lsls	r4, r4, #21
 800db80:	2b00      	cmp	r3, #0
 800db82:	d0fa      	beq.n	800db7a <__ieee754_sqrt+0x126>
 800db84:	02de      	lsls	r6, r3, #11
 800db86:	d50a      	bpl.n	800db9e <__ieee754_sqrt+0x14a>
 800db88:	f1c2 0020 	rsb	r0, r2, #32
 800db8c:	fa24 f000 	lsr.w	r0, r4, r0
 800db90:	1e55      	subs	r5, r2, #1
 800db92:	4094      	lsls	r4, r2
 800db94:	4303      	orrs	r3, r0
 800db96:	1b4a      	subs	r2, r1, r5
 800db98:	e78a      	b.n	800dab0 <__ieee754_sqrt+0x5c>
 800db9a:	4611      	mov	r1, r2
 800db9c:	e7f0      	b.n	800db80 <__ieee754_sqrt+0x12c>
 800db9e:	005b      	lsls	r3, r3, #1
 800dba0:	3201      	adds	r2, #1
 800dba2:	e7ef      	b.n	800db84 <__ieee754_sqrt+0x130>
 800dba4:	4688      	mov	r8, r1
 800dba6:	e7bd      	b.n	800db24 <__ieee754_sqrt+0xd0>
 800dba8:	7ff00000 	.word	0x7ff00000

0800dbac <__ieee754_asinf>:
 800dbac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbb0:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800dbb4:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800dbb8:	4604      	mov	r4, r0
 800dbba:	4605      	mov	r5, r0
 800dbbc:	d10c      	bne.n	800dbd8 <__ieee754_asinf+0x2c>
 800dbbe:	498d      	ldr	r1, [pc, #564]	; (800ddf4 <__ieee754_asinf+0x248>)
 800dbc0:	f7f3 f8b8 	bl	8000d34 <__aeabi_fmul>
 800dbc4:	498c      	ldr	r1, [pc, #560]	; (800ddf8 <__ieee754_asinf+0x24c>)
 800dbc6:	4605      	mov	r5, r0
 800dbc8:	4620      	mov	r0, r4
 800dbca:	f7f3 f8b3 	bl	8000d34 <__aeabi_fmul>
 800dbce:	4601      	mov	r1, r0
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	f7f2 ffa7 	bl	8000b24 <__addsf3>
 800dbd6:	e006      	b.n	800dbe6 <__ieee754_asinf+0x3a>
 800dbd8:	dd07      	ble.n	800dbea <__ieee754_asinf+0x3e>
 800dbda:	4601      	mov	r1, r0
 800dbdc:	f7f2 ffa0 	bl	8000b20 <__aeabi_fsub>
 800dbe0:	4601      	mov	r1, r0
 800dbe2:	f7f3 f95b 	bl	8000e9c <__aeabi_fdiv>
 800dbe6:	4604      	mov	r4, r0
 800dbe8:	e00e      	b.n	800dc08 <__ieee754_asinf+0x5c>
 800dbea:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800dbee:	da58      	bge.n	800dca2 <__ieee754_asinf+0xf6>
 800dbf0:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800dbf4:	da0b      	bge.n	800dc0e <__ieee754_asinf+0x62>
 800dbf6:	4981      	ldr	r1, [pc, #516]	; (800ddfc <__ieee754_asinf+0x250>)
 800dbf8:	f7f2 ff94 	bl	8000b24 <__addsf3>
 800dbfc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dc00:	f7f3 fa54 	bl	80010ac <__aeabi_fcmpgt>
 800dc04:	2800      	cmp	r0, #0
 800dc06:	d04c      	beq.n	800dca2 <__ieee754_asinf+0xf6>
 800dc08:	4620      	mov	r0, r4
 800dc0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc0e:	4601      	mov	r1, r0
 800dc10:	f7f3 f890 	bl	8000d34 <__aeabi_fmul>
 800dc14:	4605      	mov	r5, r0
 800dc16:	497a      	ldr	r1, [pc, #488]	; (800de00 <__ieee754_asinf+0x254>)
 800dc18:	f7f3 f88c 	bl	8000d34 <__aeabi_fmul>
 800dc1c:	4979      	ldr	r1, [pc, #484]	; (800de04 <__ieee754_asinf+0x258>)
 800dc1e:	f7f2 ff81 	bl	8000b24 <__addsf3>
 800dc22:	4629      	mov	r1, r5
 800dc24:	f7f3 f886 	bl	8000d34 <__aeabi_fmul>
 800dc28:	4977      	ldr	r1, [pc, #476]	; (800de08 <__ieee754_asinf+0x25c>)
 800dc2a:	f7f2 ff79 	bl	8000b20 <__aeabi_fsub>
 800dc2e:	4629      	mov	r1, r5
 800dc30:	f7f3 f880 	bl	8000d34 <__aeabi_fmul>
 800dc34:	4975      	ldr	r1, [pc, #468]	; (800de0c <__ieee754_asinf+0x260>)
 800dc36:	f7f2 ff75 	bl	8000b24 <__addsf3>
 800dc3a:	4629      	mov	r1, r5
 800dc3c:	f7f3 f87a 	bl	8000d34 <__aeabi_fmul>
 800dc40:	4973      	ldr	r1, [pc, #460]	; (800de10 <__ieee754_asinf+0x264>)
 800dc42:	f7f2 ff6d 	bl	8000b20 <__aeabi_fsub>
 800dc46:	4629      	mov	r1, r5
 800dc48:	f7f3 f874 	bl	8000d34 <__aeabi_fmul>
 800dc4c:	4971      	ldr	r1, [pc, #452]	; (800de14 <__ieee754_asinf+0x268>)
 800dc4e:	f7f2 ff69 	bl	8000b24 <__addsf3>
 800dc52:	4629      	mov	r1, r5
 800dc54:	f7f3 f86e 	bl	8000d34 <__aeabi_fmul>
 800dc58:	496f      	ldr	r1, [pc, #444]	; (800de18 <__ieee754_asinf+0x26c>)
 800dc5a:	4606      	mov	r6, r0
 800dc5c:	4628      	mov	r0, r5
 800dc5e:	f7f3 f869 	bl	8000d34 <__aeabi_fmul>
 800dc62:	496e      	ldr	r1, [pc, #440]	; (800de1c <__ieee754_asinf+0x270>)
 800dc64:	f7f2 ff5c 	bl	8000b20 <__aeabi_fsub>
 800dc68:	4629      	mov	r1, r5
 800dc6a:	f7f3 f863 	bl	8000d34 <__aeabi_fmul>
 800dc6e:	496c      	ldr	r1, [pc, #432]	; (800de20 <__ieee754_asinf+0x274>)
 800dc70:	f7f2 ff58 	bl	8000b24 <__addsf3>
 800dc74:	4629      	mov	r1, r5
 800dc76:	f7f3 f85d 	bl	8000d34 <__aeabi_fmul>
 800dc7a:	496a      	ldr	r1, [pc, #424]	; (800de24 <__ieee754_asinf+0x278>)
 800dc7c:	f7f2 ff50 	bl	8000b20 <__aeabi_fsub>
 800dc80:	4629      	mov	r1, r5
 800dc82:	f7f3 f857 	bl	8000d34 <__aeabi_fmul>
 800dc86:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dc8a:	f7f2 ff4b 	bl	8000b24 <__addsf3>
 800dc8e:	4601      	mov	r1, r0
 800dc90:	4630      	mov	r0, r6
 800dc92:	f7f3 f903 	bl	8000e9c <__aeabi_fdiv>
 800dc96:	4621      	mov	r1, r4
 800dc98:	f7f3 f84c 	bl	8000d34 <__aeabi_fmul>
 800dc9c:	4601      	mov	r1, r0
 800dc9e:	4620      	mov	r0, r4
 800dca0:	e797      	b.n	800dbd2 <__ieee754_asinf+0x26>
 800dca2:	4620      	mov	r0, r4
 800dca4:	f000 ff42 	bl	800eb2c <fabsf>
 800dca8:	4601      	mov	r1, r0
 800dcaa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800dcae:	f7f2 ff37 	bl	8000b20 <__aeabi_fsub>
 800dcb2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800dcb6:	f7f3 f83d 	bl	8000d34 <__aeabi_fmul>
 800dcba:	4606      	mov	r6, r0
 800dcbc:	4950      	ldr	r1, [pc, #320]	; (800de00 <__ieee754_asinf+0x254>)
 800dcbe:	f7f3 f839 	bl	8000d34 <__aeabi_fmul>
 800dcc2:	4950      	ldr	r1, [pc, #320]	; (800de04 <__ieee754_asinf+0x258>)
 800dcc4:	f7f2 ff2e 	bl	8000b24 <__addsf3>
 800dcc8:	4631      	mov	r1, r6
 800dcca:	f7f3 f833 	bl	8000d34 <__aeabi_fmul>
 800dcce:	494e      	ldr	r1, [pc, #312]	; (800de08 <__ieee754_asinf+0x25c>)
 800dcd0:	f7f2 ff26 	bl	8000b20 <__aeabi_fsub>
 800dcd4:	4631      	mov	r1, r6
 800dcd6:	f7f3 f82d 	bl	8000d34 <__aeabi_fmul>
 800dcda:	494c      	ldr	r1, [pc, #304]	; (800de0c <__ieee754_asinf+0x260>)
 800dcdc:	f7f2 ff22 	bl	8000b24 <__addsf3>
 800dce0:	4631      	mov	r1, r6
 800dce2:	f7f3 f827 	bl	8000d34 <__aeabi_fmul>
 800dce6:	494a      	ldr	r1, [pc, #296]	; (800de10 <__ieee754_asinf+0x264>)
 800dce8:	f7f2 ff1a 	bl	8000b20 <__aeabi_fsub>
 800dcec:	4631      	mov	r1, r6
 800dcee:	f7f3 f821 	bl	8000d34 <__aeabi_fmul>
 800dcf2:	4948      	ldr	r1, [pc, #288]	; (800de14 <__ieee754_asinf+0x268>)
 800dcf4:	f7f2 ff16 	bl	8000b24 <__addsf3>
 800dcf8:	4631      	mov	r1, r6
 800dcfa:	f7f3 f81b 	bl	8000d34 <__aeabi_fmul>
 800dcfe:	4946      	ldr	r1, [pc, #280]	; (800de18 <__ieee754_asinf+0x26c>)
 800dd00:	4681      	mov	r9, r0
 800dd02:	4630      	mov	r0, r6
 800dd04:	f7f3 f816 	bl	8000d34 <__aeabi_fmul>
 800dd08:	4944      	ldr	r1, [pc, #272]	; (800de1c <__ieee754_asinf+0x270>)
 800dd0a:	f7f2 ff09 	bl	8000b20 <__aeabi_fsub>
 800dd0e:	4631      	mov	r1, r6
 800dd10:	f7f3 f810 	bl	8000d34 <__aeabi_fmul>
 800dd14:	4942      	ldr	r1, [pc, #264]	; (800de20 <__ieee754_asinf+0x274>)
 800dd16:	f7f2 ff05 	bl	8000b24 <__addsf3>
 800dd1a:	4631      	mov	r1, r6
 800dd1c:	f7f3 f80a 	bl	8000d34 <__aeabi_fmul>
 800dd20:	4940      	ldr	r1, [pc, #256]	; (800de24 <__ieee754_asinf+0x278>)
 800dd22:	f7f2 fefd 	bl	8000b20 <__aeabi_fsub>
 800dd26:	4631      	mov	r1, r6
 800dd28:	f7f3 f804 	bl	8000d34 <__aeabi_fmul>
 800dd2c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dd30:	f7f2 fef8 	bl	8000b24 <__addsf3>
 800dd34:	4682      	mov	sl, r0
 800dd36:	4630      	mov	r0, r6
 800dd38:	f000 f9da 	bl	800e0f0 <__ieee754_sqrtf>
 800dd3c:	4b3a      	ldr	r3, [pc, #232]	; (800de28 <__ieee754_asinf+0x27c>)
 800dd3e:	4607      	mov	r7, r0
 800dd40:	4598      	cmp	r8, r3
 800dd42:	dd1a      	ble.n	800dd7a <__ieee754_asinf+0x1ce>
 800dd44:	4651      	mov	r1, sl
 800dd46:	4648      	mov	r0, r9
 800dd48:	f7f3 f8a8 	bl	8000e9c <__aeabi_fdiv>
 800dd4c:	4639      	mov	r1, r7
 800dd4e:	f7f2 fff1 	bl	8000d34 <__aeabi_fmul>
 800dd52:	4639      	mov	r1, r7
 800dd54:	f7f2 fee6 	bl	8000b24 <__addsf3>
 800dd58:	4601      	mov	r1, r0
 800dd5a:	f7f2 fee3 	bl	8000b24 <__addsf3>
 800dd5e:	4933      	ldr	r1, [pc, #204]	; (800de2c <__ieee754_asinf+0x280>)
 800dd60:	f7f2 fee0 	bl	8000b24 <__addsf3>
 800dd64:	4601      	mov	r1, r0
 800dd66:	4823      	ldr	r0, [pc, #140]	; (800ddf4 <__ieee754_asinf+0x248>)
 800dd68:	f7f2 feda 	bl	8000b20 <__aeabi_fsub>
 800dd6c:	2d00      	cmp	r5, #0
 800dd6e:	4604      	mov	r4, r0
 800dd70:	f73f af4a 	bgt.w	800dc08 <__ieee754_asinf+0x5c>
 800dd74:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800dd78:	e735      	b.n	800dbe6 <__ieee754_asinf+0x3a>
 800dd7a:	4601      	mov	r1, r0
 800dd7c:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800dd80:	f7f2 fed0 	bl	8000b24 <__addsf3>
 800dd84:	4651      	mov	r1, sl
 800dd86:	4604      	mov	r4, r0
 800dd88:	4648      	mov	r0, r9
 800dd8a:	f7f3 f887 	bl	8000e9c <__aeabi_fdiv>
 800dd8e:	4601      	mov	r1, r0
 800dd90:	4620      	mov	r0, r4
 800dd92:	f7f2 ffcf 	bl	8000d34 <__aeabi_fmul>
 800dd96:	f028 080f 	bic.w	r8, r8, #15
 800dd9a:	4681      	mov	r9, r0
 800dd9c:	4641      	mov	r1, r8
 800dd9e:	4640      	mov	r0, r8
 800dda0:	f7f2 ffc8 	bl	8000d34 <__aeabi_fmul>
 800dda4:	4601      	mov	r1, r0
 800dda6:	4630      	mov	r0, r6
 800dda8:	f7f2 feba 	bl	8000b20 <__aeabi_fsub>
 800ddac:	4641      	mov	r1, r8
 800ddae:	4604      	mov	r4, r0
 800ddb0:	4638      	mov	r0, r7
 800ddb2:	f7f2 feb7 	bl	8000b24 <__addsf3>
 800ddb6:	4601      	mov	r1, r0
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f7f3 f86f 	bl	8000e9c <__aeabi_fdiv>
 800ddbe:	4601      	mov	r1, r0
 800ddc0:	f7f2 feb0 	bl	8000b24 <__addsf3>
 800ddc4:	4601      	mov	r1, r0
 800ddc6:	480c      	ldr	r0, [pc, #48]	; (800ddf8 <__ieee754_asinf+0x24c>)
 800ddc8:	f7f2 feaa 	bl	8000b20 <__aeabi_fsub>
 800ddcc:	4601      	mov	r1, r0
 800ddce:	4648      	mov	r0, r9
 800ddd0:	f7f2 fea6 	bl	8000b20 <__aeabi_fsub>
 800ddd4:	4641      	mov	r1, r8
 800ddd6:	4604      	mov	r4, r0
 800ddd8:	4640      	mov	r0, r8
 800ddda:	f7f2 fea3 	bl	8000b24 <__addsf3>
 800ddde:	4601      	mov	r1, r0
 800dde0:	4813      	ldr	r0, [pc, #76]	; (800de30 <__ieee754_asinf+0x284>)
 800dde2:	f7f2 fe9d 	bl	8000b20 <__aeabi_fsub>
 800dde6:	4601      	mov	r1, r0
 800dde8:	4620      	mov	r0, r4
 800ddea:	f7f2 fe99 	bl	8000b20 <__aeabi_fsub>
 800ddee:	4601      	mov	r1, r0
 800ddf0:	480f      	ldr	r0, [pc, #60]	; (800de30 <__ieee754_asinf+0x284>)
 800ddf2:	e7b9      	b.n	800dd68 <__ieee754_asinf+0x1bc>
 800ddf4:	3fc90fdb 	.word	0x3fc90fdb
 800ddf8:	b33bbd2e 	.word	0xb33bbd2e
 800ddfc:	7149f2ca 	.word	0x7149f2ca
 800de00:	3811ef08 	.word	0x3811ef08
 800de04:	3a4f7f04 	.word	0x3a4f7f04
 800de08:	3d241146 	.word	0x3d241146
 800de0c:	3e4e0aa8 	.word	0x3e4e0aa8
 800de10:	3ea6b090 	.word	0x3ea6b090
 800de14:	3e2aaaab 	.word	0x3e2aaaab
 800de18:	3d9dc62e 	.word	0x3d9dc62e
 800de1c:	3f303361 	.word	0x3f303361
 800de20:	4001572d 	.word	0x4001572d
 800de24:	4019d139 	.word	0x4019d139
 800de28:	3f799999 	.word	0x3f799999
 800de2c:	333bbd2e 	.word	0x333bbd2e
 800de30:	3f490fdb 	.word	0x3f490fdb

0800de34 <__ieee754_rem_pio2f>:
 800de34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de38:	4aa0      	ldr	r2, [pc, #640]	; (800e0bc <__ieee754_rem_pio2f+0x288>)
 800de3a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800de3e:	4296      	cmp	r6, r2
 800de40:	460c      	mov	r4, r1
 800de42:	4682      	mov	sl, r0
 800de44:	b087      	sub	sp, #28
 800de46:	dc04      	bgt.n	800de52 <__ieee754_rem_pio2f+0x1e>
 800de48:	2300      	movs	r3, #0
 800de4a:	6008      	str	r0, [r1, #0]
 800de4c:	604b      	str	r3, [r1, #4]
 800de4e:	2500      	movs	r5, #0
 800de50:	e01a      	b.n	800de88 <__ieee754_rem_pio2f+0x54>
 800de52:	4a9b      	ldr	r2, [pc, #620]	; (800e0c0 <__ieee754_rem_pio2f+0x28c>)
 800de54:	4296      	cmp	r6, r2
 800de56:	dc4b      	bgt.n	800def0 <__ieee754_rem_pio2f+0xbc>
 800de58:	2800      	cmp	r0, #0
 800de5a:	499a      	ldr	r1, [pc, #616]	; (800e0c4 <__ieee754_rem_pio2f+0x290>)
 800de5c:	4f9a      	ldr	r7, [pc, #616]	; (800e0c8 <__ieee754_rem_pio2f+0x294>)
 800de5e:	f026 060f 	bic.w	r6, r6, #15
 800de62:	dd23      	ble.n	800deac <__ieee754_rem_pio2f+0x78>
 800de64:	f7f2 fe5c 	bl	8000b20 <__aeabi_fsub>
 800de68:	42be      	cmp	r6, r7
 800de6a:	4605      	mov	r5, r0
 800de6c:	d010      	beq.n	800de90 <__ieee754_rem_pio2f+0x5c>
 800de6e:	4997      	ldr	r1, [pc, #604]	; (800e0cc <__ieee754_rem_pio2f+0x298>)
 800de70:	f7f2 fe56 	bl	8000b20 <__aeabi_fsub>
 800de74:	4601      	mov	r1, r0
 800de76:	6020      	str	r0, [r4, #0]
 800de78:	4628      	mov	r0, r5
 800de7a:	f7f2 fe51 	bl	8000b20 <__aeabi_fsub>
 800de7e:	4993      	ldr	r1, [pc, #588]	; (800e0cc <__ieee754_rem_pio2f+0x298>)
 800de80:	f7f2 fe4e 	bl	8000b20 <__aeabi_fsub>
 800de84:	2501      	movs	r5, #1
 800de86:	6060      	str	r0, [r4, #4]
 800de88:	4628      	mov	r0, r5
 800de8a:	b007      	add	sp, #28
 800de8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de90:	498f      	ldr	r1, [pc, #572]	; (800e0d0 <__ieee754_rem_pio2f+0x29c>)
 800de92:	f7f2 fe45 	bl	8000b20 <__aeabi_fsub>
 800de96:	498f      	ldr	r1, [pc, #572]	; (800e0d4 <__ieee754_rem_pio2f+0x2a0>)
 800de98:	4605      	mov	r5, r0
 800de9a:	f7f2 fe41 	bl	8000b20 <__aeabi_fsub>
 800de9e:	4601      	mov	r1, r0
 800dea0:	6020      	str	r0, [r4, #0]
 800dea2:	4628      	mov	r0, r5
 800dea4:	f7f2 fe3c 	bl	8000b20 <__aeabi_fsub>
 800dea8:	498a      	ldr	r1, [pc, #552]	; (800e0d4 <__ieee754_rem_pio2f+0x2a0>)
 800deaa:	e7e9      	b.n	800de80 <__ieee754_rem_pio2f+0x4c>
 800deac:	f7f2 fe3a 	bl	8000b24 <__addsf3>
 800deb0:	42be      	cmp	r6, r7
 800deb2:	4605      	mov	r5, r0
 800deb4:	d00e      	beq.n	800ded4 <__ieee754_rem_pio2f+0xa0>
 800deb6:	4985      	ldr	r1, [pc, #532]	; (800e0cc <__ieee754_rem_pio2f+0x298>)
 800deb8:	f7f2 fe34 	bl	8000b24 <__addsf3>
 800debc:	4601      	mov	r1, r0
 800debe:	6020      	str	r0, [r4, #0]
 800dec0:	4628      	mov	r0, r5
 800dec2:	f7f2 fe2d 	bl	8000b20 <__aeabi_fsub>
 800dec6:	4981      	ldr	r1, [pc, #516]	; (800e0cc <__ieee754_rem_pio2f+0x298>)
 800dec8:	f7f2 fe2c 	bl	8000b24 <__addsf3>
 800decc:	f04f 35ff 	mov.w	r5, #4294967295
 800ded0:	6060      	str	r0, [r4, #4]
 800ded2:	e7d9      	b.n	800de88 <__ieee754_rem_pio2f+0x54>
 800ded4:	497e      	ldr	r1, [pc, #504]	; (800e0d0 <__ieee754_rem_pio2f+0x29c>)
 800ded6:	f7f2 fe25 	bl	8000b24 <__addsf3>
 800deda:	497e      	ldr	r1, [pc, #504]	; (800e0d4 <__ieee754_rem_pio2f+0x2a0>)
 800dedc:	4605      	mov	r5, r0
 800dede:	f7f2 fe21 	bl	8000b24 <__addsf3>
 800dee2:	4601      	mov	r1, r0
 800dee4:	6020      	str	r0, [r4, #0]
 800dee6:	4628      	mov	r0, r5
 800dee8:	f7f2 fe1a 	bl	8000b20 <__aeabi_fsub>
 800deec:	4979      	ldr	r1, [pc, #484]	; (800e0d4 <__ieee754_rem_pio2f+0x2a0>)
 800deee:	e7eb      	b.n	800dec8 <__ieee754_rem_pio2f+0x94>
 800def0:	4a79      	ldr	r2, [pc, #484]	; (800e0d8 <__ieee754_rem_pio2f+0x2a4>)
 800def2:	4296      	cmp	r6, r2
 800def4:	f300 8091 	bgt.w	800e01a <__ieee754_rem_pio2f+0x1e6>
 800def8:	f000 fe18 	bl	800eb2c <fabsf>
 800defc:	4977      	ldr	r1, [pc, #476]	; (800e0dc <__ieee754_rem_pio2f+0x2a8>)
 800defe:	4607      	mov	r7, r0
 800df00:	f7f2 ff18 	bl	8000d34 <__aeabi_fmul>
 800df04:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800df08:	f7f2 fe0c 	bl	8000b24 <__addsf3>
 800df0c:	f7f3 f8ee 	bl	80010ec <__aeabi_f2iz>
 800df10:	4605      	mov	r5, r0
 800df12:	f7f2 febb 	bl	8000c8c <__aeabi_i2f>
 800df16:	496b      	ldr	r1, [pc, #428]	; (800e0c4 <__ieee754_rem_pio2f+0x290>)
 800df18:	4681      	mov	r9, r0
 800df1a:	f7f2 ff0b 	bl	8000d34 <__aeabi_fmul>
 800df1e:	4601      	mov	r1, r0
 800df20:	4638      	mov	r0, r7
 800df22:	f7f2 fdfd 	bl	8000b20 <__aeabi_fsub>
 800df26:	4969      	ldr	r1, [pc, #420]	; (800e0cc <__ieee754_rem_pio2f+0x298>)
 800df28:	4680      	mov	r8, r0
 800df2a:	4648      	mov	r0, r9
 800df2c:	f7f2 ff02 	bl	8000d34 <__aeabi_fmul>
 800df30:	2d1f      	cmp	r5, #31
 800df32:	4607      	mov	r7, r0
 800df34:	dc0c      	bgt.n	800df50 <__ieee754_rem_pio2f+0x11c>
 800df36:	4a6a      	ldr	r2, [pc, #424]	; (800e0e0 <__ieee754_rem_pio2f+0x2ac>)
 800df38:	1e69      	subs	r1, r5, #1
 800df3a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800df3e:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800df42:	4293      	cmp	r3, r2
 800df44:	d004      	beq.n	800df50 <__ieee754_rem_pio2f+0x11c>
 800df46:	4639      	mov	r1, r7
 800df48:	4640      	mov	r0, r8
 800df4a:	f7f2 fde9 	bl	8000b20 <__aeabi_fsub>
 800df4e:	e00b      	b.n	800df68 <__ieee754_rem_pio2f+0x134>
 800df50:	4639      	mov	r1, r7
 800df52:	4640      	mov	r0, r8
 800df54:	f7f2 fde4 	bl	8000b20 <__aeabi_fsub>
 800df58:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800df5c:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800df60:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800df64:	2e08      	cmp	r6, #8
 800df66:	dc01      	bgt.n	800df6c <__ieee754_rem_pio2f+0x138>
 800df68:	6020      	str	r0, [r4, #0]
 800df6a:	e026      	b.n	800dfba <__ieee754_rem_pio2f+0x186>
 800df6c:	4958      	ldr	r1, [pc, #352]	; (800e0d0 <__ieee754_rem_pio2f+0x29c>)
 800df6e:	4648      	mov	r0, r9
 800df70:	f7f2 fee0 	bl	8000d34 <__aeabi_fmul>
 800df74:	4607      	mov	r7, r0
 800df76:	4601      	mov	r1, r0
 800df78:	4640      	mov	r0, r8
 800df7a:	f7f2 fdd1 	bl	8000b20 <__aeabi_fsub>
 800df7e:	4601      	mov	r1, r0
 800df80:	4606      	mov	r6, r0
 800df82:	4640      	mov	r0, r8
 800df84:	f7f2 fdcc 	bl	8000b20 <__aeabi_fsub>
 800df88:	4639      	mov	r1, r7
 800df8a:	f7f2 fdc9 	bl	8000b20 <__aeabi_fsub>
 800df8e:	4607      	mov	r7, r0
 800df90:	4950      	ldr	r1, [pc, #320]	; (800e0d4 <__ieee754_rem_pio2f+0x2a0>)
 800df92:	4648      	mov	r0, r9
 800df94:	f7f2 fece 	bl	8000d34 <__aeabi_fmul>
 800df98:	4639      	mov	r1, r7
 800df9a:	f7f2 fdc1 	bl	8000b20 <__aeabi_fsub>
 800df9e:	4601      	mov	r1, r0
 800dfa0:	4607      	mov	r7, r0
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	f7f2 fdbc 	bl	8000b20 <__aeabi_fsub>
 800dfa8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800dfac:	ebab 0b03 	sub.w	fp, fp, r3
 800dfb0:	f1bb 0f19 	cmp.w	fp, #25
 800dfb4:	dc16      	bgt.n	800dfe4 <__ieee754_rem_pio2f+0x1b0>
 800dfb6:	46b0      	mov	r8, r6
 800dfb8:	6020      	str	r0, [r4, #0]
 800dfba:	6826      	ldr	r6, [r4, #0]
 800dfbc:	4640      	mov	r0, r8
 800dfbe:	4631      	mov	r1, r6
 800dfc0:	f7f2 fdae 	bl	8000b20 <__aeabi_fsub>
 800dfc4:	4639      	mov	r1, r7
 800dfc6:	f7f2 fdab 	bl	8000b20 <__aeabi_fsub>
 800dfca:	f1ba 0f00 	cmp.w	sl, #0
 800dfce:	6060      	str	r0, [r4, #4]
 800dfd0:	f6bf af5a 	bge.w	800de88 <__ieee754_rem_pio2f+0x54>
 800dfd4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800dfd8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800dfdc:	6026      	str	r6, [r4, #0]
 800dfde:	6060      	str	r0, [r4, #4]
 800dfe0:	426d      	negs	r5, r5
 800dfe2:	e751      	b.n	800de88 <__ieee754_rem_pio2f+0x54>
 800dfe4:	493f      	ldr	r1, [pc, #252]	; (800e0e4 <__ieee754_rem_pio2f+0x2b0>)
 800dfe6:	4648      	mov	r0, r9
 800dfe8:	f7f2 fea4 	bl	8000d34 <__aeabi_fmul>
 800dfec:	4607      	mov	r7, r0
 800dfee:	4601      	mov	r1, r0
 800dff0:	4630      	mov	r0, r6
 800dff2:	f7f2 fd95 	bl	8000b20 <__aeabi_fsub>
 800dff6:	4601      	mov	r1, r0
 800dff8:	4680      	mov	r8, r0
 800dffa:	4630      	mov	r0, r6
 800dffc:	f7f2 fd90 	bl	8000b20 <__aeabi_fsub>
 800e000:	4639      	mov	r1, r7
 800e002:	f7f2 fd8d 	bl	8000b20 <__aeabi_fsub>
 800e006:	4606      	mov	r6, r0
 800e008:	4937      	ldr	r1, [pc, #220]	; (800e0e8 <__ieee754_rem_pio2f+0x2b4>)
 800e00a:	4648      	mov	r0, r9
 800e00c:	f7f2 fe92 	bl	8000d34 <__aeabi_fmul>
 800e010:	4631      	mov	r1, r6
 800e012:	f7f2 fd85 	bl	8000b20 <__aeabi_fsub>
 800e016:	4607      	mov	r7, r0
 800e018:	e795      	b.n	800df46 <__ieee754_rem_pio2f+0x112>
 800e01a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800e01e:	db05      	blt.n	800e02c <__ieee754_rem_pio2f+0x1f8>
 800e020:	4601      	mov	r1, r0
 800e022:	f7f2 fd7d 	bl	8000b20 <__aeabi_fsub>
 800e026:	6060      	str	r0, [r4, #4]
 800e028:	6020      	str	r0, [r4, #0]
 800e02a:	e710      	b.n	800de4e <__ieee754_rem_pio2f+0x1a>
 800e02c:	15f7      	asrs	r7, r6, #23
 800e02e:	3f86      	subs	r7, #134	; 0x86
 800e030:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800e034:	4630      	mov	r0, r6
 800e036:	f7f3 f859 	bl	80010ec <__aeabi_f2iz>
 800e03a:	f7f2 fe27 	bl	8000c8c <__aeabi_i2f>
 800e03e:	4601      	mov	r1, r0
 800e040:	9003      	str	r0, [sp, #12]
 800e042:	4630      	mov	r0, r6
 800e044:	f7f2 fd6c 	bl	8000b20 <__aeabi_fsub>
 800e048:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e04c:	f7f2 fe72 	bl	8000d34 <__aeabi_fmul>
 800e050:	4606      	mov	r6, r0
 800e052:	f7f3 f84b 	bl	80010ec <__aeabi_f2iz>
 800e056:	f7f2 fe19 	bl	8000c8c <__aeabi_i2f>
 800e05a:	4601      	mov	r1, r0
 800e05c:	9004      	str	r0, [sp, #16]
 800e05e:	4605      	mov	r5, r0
 800e060:	4630      	mov	r0, r6
 800e062:	f7f2 fd5d 	bl	8000b20 <__aeabi_fsub>
 800e066:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e06a:	f7f2 fe63 	bl	8000d34 <__aeabi_fmul>
 800e06e:	2100      	movs	r1, #0
 800e070:	9005      	str	r0, [sp, #20]
 800e072:	f7f2 fff3 	bl	800105c <__aeabi_fcmpeq>
 800e076:	b1f0      	cbz	r0, 800e0b6 <__ieee754_rem_pio2f+0x282>
 800e078:	2100      	movs	r1, #0
 800e07a:	4628      	mov	r0, r5
 800e07c:	f7f2 ffee 	bl	800105c <__aeabi_fcmpeq>
 800e080:	2800      	cmp	r0, #0
 800e082:	bf14      	ite	ne
 800e084:	2301      	movne	r3, #1
 800e086:	2302      	moveq	r3, #2
 800e088:	4a18      	ldr	r2, [pc, #96]	; (800e0ec <__ieee754_rem_pio2f+0x2b8>)
 800e08a:	4621      	mov	r1, r4
 800e08c:	9201      	str	r2, [sp, #4]
 800e08e:	2202      	movs	r2, #2
 800e090:	a803      	add	r0, sp, #12
 800e092:	9200      	str	r2, [sp, #0]
 800e094:	463a      	mov	r2, r7
 800e096:	f000 f8fd 	bl	800e294 <__kernel_rem_pio2f>
 800e09a:	f1ba 0f00 	cmp.w	sl, #0
 800e09e:	4605      	mov	r5, r0
 800e0a0:	f6bf aef2 	bge.w	800de88 <__ieee754_rem_pio2f+0x54>
 800e0a4:	6823      	ldr	r3, [r4, #0]
 800e0a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e0aa:	6023      	str	r3, [r4, #0]
 800e0ac:	6863      	ldr	r3, [r4, #4]
 800e0ae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e0b2:	6063      	str	r3, [r4, #4]
 800e0b4:	e794      	b.n	800dfe0 <__ieee754_rem_pio2f+0x1ac>
 800e0b6:	2303      	movs	r3, #3
 800e0b8:	e7e6      	b.n	800e088 <__ieee754_rem_pio2f+0x254>
 800e0ba:	bf00      	nop
 800e0bc:	3f490fd8 	.word	0x3f490fd8
 800e0c0:	4016cbe3 	.word	0x4016cbe3
 800e0c4:	3fc90f80 	.word	0x3fc90f80
 800e0c8:	3fc90fd0 	.word	0x3fc90fd0
 800e0cc:	37354443 	.word	0x37354443
 800e0d0:	37354400 	.word	0x37354400
 800e0d4:	2e85a308 	.word	0x2e85a308
 800e0d8:	43490f80 	.word	0x43490f80
 800e0dc:	3f22f984 	.word	0x3f22f984
 800e0e0:	0800f000 	.word	0x0800f000
 800e0e4:	2e85a300 	.word	0x2e85a300
 800e0e8:	248d3132 	.word	0x248d3132
 800e0ec:	0800f080 	.word	0x0800f080

0800e0f0 <__ieee754_sqrtf>:
 800e0f0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800e0f4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e0f8:	b570      	push	{r4, r5, r6, lr}
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	4604      	mov	r4, r0
 800e0fe:	d309      	bcc.n	800e114 <__ieee754_sqrtf+0x24>
 800e100:	4601      	mov	r1, r0
 800e102:	f7f2 fe17 	bl	8000d34 <__aeabi_fmul>
 800e106:	4601      	mov	r1, r0
 800e108:	4620      	mov	r0, r4
 800e10a:	f7f2 fd0b 	bl	8000b24 <__addsf3>
 800e10e:	4604      	mov	r4, r0
 800e110:	4620      	mov	r0, r4
 800e112:	bd70      	pop	{r4, r5, r6, pc}
 800e114:	2a00      	cmp	r2, #0
 800e116:	d0fb      	beq.n	800e110 <__ieee754_sqrtf+0x20>
 800e118:	2800      	cmp	r0, #0
 800e11a:	da06      	bge.n	800e12a <__ieee754_sqrtf+0x3a>
 800e11c:	4601      	mov	r1, r0
 800e11e:	f7f2 fcff 	bl	8000b20 <__aeabi_fsub>
 800e122:	4601      	mov	r1, r0
 800e124:	f7f2 feba 	bl	8000e9c <__aeabi_fdiv>
 800e128:	e7f1      	b.n	800e10e <__ieee754_sqrtf+0x1e>
 800e12a:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800e12e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800e132:	d029      	beq.n	800e188 <__ieee754_sqrtf+0x98>
 800e134:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800e138:	07cb      	lsls	r3, r1, #31
 800e13a:	f04f 0300 	mov.w	r3, #0
 800e13e:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800e142:	f04f 0419 	mov.w	r4, #25
 800e146:	461e      	mov	r6, r3
 800e148:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800e14c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800e150:	bf58      	it	pl
 800e152:	0052      	lslpl	r2, r2, #1
 800e154:	1040      	asrs	r0, r0, #1
 800e156:	0052      	lsls	r2, r2, #1
 800e158:	1875      	adds	r5, r6, r1
 800e15a:	4295      	cmp	r5, r2
 800e15c:	bfde      	ittt	le
 800e15e:	186e      	addle	r6, r5, r1
 800e160:	1b52      	suble	r2, r2, r5
 800e162:	185b      	addle	r3, r3, r1
 800e164:	3c01      	subs	r4, #1
 800e166:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e16a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e16e:	d1f3      	bne.n	800e158 <__ieee754_sqrtf+0x68>
 800e170:	b112      	cbz	r2, 800e178 <__ieee754_sqrtf+0x88>
 800e172:	3301      	adds	r3, #1
 800e174:	f023 0301 	bic.w	r3, r3, #1
 800e178:	105c      	asrs	r4, r3, #1
 800e17a:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800e17e:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800e182:	e7c5      	b.n	800e110 <__ieee754_sqrtf+0x20>
 800e184:	005b      	lsls	r3, r3, #1
 800e186:	3201      	adds	r2, #1
 800e188:	0218      	lsls	r0, r3, #8
 800e18a:	d5fb      	bpl.n	800e184 <__ieee754_sqrtf+0x94>
 800e18c:	3a01      	subs	r2, #1
 800e18e:	1a89      	subs	r1, r1, r2
 800e190:	e7d0      	b.n	800e134 <__ieee754_sqrtf+0x44>
	...

0800e194 <__kernel_cosf>:
 800e194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e198:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800e19c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800e1a0:	4606      	mov	r6, r0
 800e1a2:	4688      	mov	r8, r1
 800e1a4:	da03      	bge.n	800e1ae <__kernel_cosf+0x1a>
 800e1a6:	f7f2 ffa1 	bl	80010ec <__aeabi_f2iz>
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	d05c      	beq.n	800e268 <__kernel_cosf+0xd4>
 800e1ae:	4631      	mov	r1, r6
 800e1b0:	4630      	mov	r0, r6
 800e1b2:	f7f2 fdbf 	bl	8000d34 <__aeabi_fmul>
 800e1b6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e1ba:	4605      	mov	r5, r0
 800e1bc:	f7f2 fdba 	bl	8000d34 <__aeabi_fmul>
 800e1c0:	492b      	ldr	r1, [pc, #172]	; (800e270 <__kernel_cosf+0xdc>)
 800e1c2:	4607      	mov	r7, r0
 800e1c4:	4628      	mov	r0, r5
 800e1c6:	f7f2 fdb5 	bl	8000d34 <__aeabi_fmul>
 800e1ca:	492a      	ldr	r1, [pc, #168]	; (800e274 <__kernel_cosf+0xe0>)
 800e1cc:	f7f2 fcaa 	bl	8000b24 <__addsf3>
 800e1d0:	4629      	mov	r1, r5
 800e1d2:	f7f2 fdaf 	bl	8000d34 <__aeabi_fmul>
 800e1d6:	4928      	ldr	r1, [pc, #160]	; (800e278 <__kernel_cosf+0xe4>)
 800e1d8:	f7f2 fca2 	bl	8000b20 <__aeabi_fsub>
 800e1dc:	4629      	mov	r1, r5
 800e1de:	f7f2 fda9 	bl	8000d34 <__aeabi_fmul>
 800e1e2:	4926      	ldr	r1, [pc, #152]	; (800e27c <__kernel_cosf+0xe8>)
 800e1e4:	f7f2 fc9e 	bl	8000b24 <__addsf3>
 800e1e8:	4629      	mov	r1, r5
 800e1ea:	f7f2 fda3 	bl	8000d34 <__aeabi_fmul>
 800e1ee:	4924      	ldr	r1, [pc, #144]	; (800e280 <__kernel_cosf+0xec>)
 800e1f0:	f7f2 fc96 	bl	8000b20 <__aeabi_fsub>
 800e1f4:	4629      	mov	r1, r5
 800e1f6:	f7f2 fd9d 	bl	8000d34 <__aeabi_fmul>
 800e1fa:	4922      	ldr	r1, [pc, #136]	; (800e284 <__kernel_cosf+0xf0>)
 800e1fc:	f7f2 fc92 	bl	8000b24 <__addsf3>
 800e200:	4629      	mov	r1, r5
 800e202:	f7f2 fd97 	bl	8000d34 <__aeabi_fmul>
 800e206:	4629      	mov	r1, r5
 800e208:	f7f2 fd94 	bl	8000d34 <__aeabi_fmul>
 800e20c:	4641      	mov	r1, r8
 800e20e:	4605      	mov	r5, r0
 800e210:	4630      	mov	r0, r6
 800e212:	f7f2 fd8f 	bl	8000d34 <__aeabi_fmul>
 800e216:	4601      	mov	r1, r0
 800e218:	4628      	mov	r0, r5
 800e21a:	f7f2 fc81 	bl	8000b20 <__aeabi_fsub>
 800e21e:	4b1a      	ldr	r3, [pc, #104]	; (800e288 <__kernel_cosf+0xf4>)
 800e220:	4605      	mov	r5, r0
 800e222:	429c      	cmp	r4, r3
 800e224:	dc0a      	bgt.n	800e23c <__kernel_cosf+0xa8>
 800e226:	4601      	mov	r1, r0
 800e228:	4638      	mov	r0, r7
 800e22a:	f7f2 fc79 	bl	8000b20 <__aeabi_fsub>
 800e22e:	4601      	mov	r1, r0
 800e230:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e234:	f7f2 fc74 	bl	8000b20 <__aeabi_fsub>
 800e238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e23c:	4b13      	ldr	r3, [pc, #76]	; (800e28c <__kernel_cosf+0xf8>)
 800e23e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e242:	429c      	cmp	r4, r3
 800e244:	bfcc      	ite	gt
 800e246:	4c12      	ldrgt	r4, [pc, #72]	; (800e290 <__kernel_cosf+0xfc>)
 800e248:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800e24c:	4621      	mov	r1, r4
 800e24e:	f7f2 fc67 	bl	8000b20 <__aeabi_fsub>
 800e252:	4621      	mov	r1, r4
 800e254:	4606      	mov	r6, r0
 800e256:	4638      	mov	r0, r7
 800e258:	f7f2 fc62 	bl	8000b20 <__aeabi_fsub>
 800e25c:	4629      	mov	r1, r5
 800e25e:	f7f2 fc5f 	bl	8000b20 <__aeabi_fsub>
 800e262:	4601      	mov	r1, r0
 800e264:	4630      	mov	r0, r6
 800e266:	e7e5      	b.n	800e234 <__kernel_cosf+0xa0>
 800e268:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e26c:	e7e4      	b.n	800e238 <__kernel_cosf+0xa4>
 800e26e:	bf00      	nop
 800e270:	ad47d74e 	.word	0xad47d74e
 800e274:	310f74f6 	.word	0x310f74f6
 800e278:	3493f27c 	.word	0x3493f27c
 800e27c:	37d00d01 	.word	0x37d00d01
 800e280:	3ab60b61 	.word	0x3ab60b61
 800e284:	3d2aaaab 	.word	0x3d2aaaab
 800e288:	3e999999 	.word	0x3e999999
 800e28c:	3f480000 	.word	0x3f480000
 800e290:	3e900000 	.word	0x3e900000

0800e294 <__kernel_rem_pio2f>:
 800e294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e298:	b0db      	sub	sp, #364	; 0x16c
 800e29a:	9202      	str	r2, [sp, #8]
 800e29c:	9304      	str	r3, [sp, #16]
 800e29e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800e2a0:	4bc5      	ldr	r3, [pc, #788]	; (800e5b8 <__kernel_rem_pio2f+0x324>)
 800e2a2:	9005      	str	r0, [sp, #20]
 800e2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2a8:	9100      	str	r1, [sp, #0]
 800e2aa:	9301      	str	r3, [sp, #4]
 800e2ac:	9b04      	ldr	r3, [sp, #16]
 800e2ae:	3b01      	subs	r3, #1
 800e2b0:	9303      	str	r3, [sp, #12]
 800e2b2:	9b02      	ldr	r3, [sp, #8]
 800e2b4:	1d1a      	adds	r2, r3, #4
 800e2b6:	f2c0 809b 	blt.w	800e3f0 <__kernel_rem_pio2f+0x15c>
 800e2ba:	1edc      	subs	r4, r3, #3
 800e2bc:	bf48      	it	mi
 800e2be:	1d1c      	addmi	r4, r3, #4
 800e2c0:	10e4      	asrs	r4, r4, #3
 800e2c2:	2500      	movs	r5, #0
 800e2c4:	f04f 0a00 	mov.w	sl, #0
 800e2c8:	1c67      	adds	r7, r4, #1
 800e2ca:	00fb      	lsls	r3, r7, #3
 800e2cc:	9306      	str	r3, [sp, #24]
 800e2ce:	9b02      	ldr	r3, [sp, #8]
 800e2d0:	9a03      	ldr	r2, [sp, #12]
 800e2d2:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800e2d6:	9b01      	ldr	r3, [sp, #4]
 800e2d8:	1aa6      	subs	r6, r4, r2
 800e2da:	eb03 0802 	add.w	r8, r3, r2
 800e2de:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800e2e0:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800e2e4:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800e2e8:	4545      	cmp	r5, r8
 800e2ea:	f340 8083 	ble.w	800e3f4 <__kernel_rem_pio2f+0x160>
 800e2ee:	f04f 0800 	mov.w	r8, #0
 800e2f2:	f04f 0b00 	mov.w	fp, #0
 800e2f6:	9b04      	ldr	r3, [sp, #16]
 800e2f8:	aa1e      	add	r2, sp, #120	; 0x78
 800e2fa:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800e2fe:	ab46      	add	r3, sp, #280	; 0x118
 800e300:	9a01      	ldr	r2, [sp, #4]
 800e302:	4590      	cmp	r8, r2
 800e304:	f340 809c 	ble.w	800e440 <__kernel_rem_pio2f+0x1ac>
 800e308:	4613      	mov	r3, r2
 800e30a:	aa0a      	add	r2, sp, #40	; 0x28
 800e30c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e310:	9308      	str	r3, [sp, #32]
 800e312:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800e314:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e318:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e31c:	9307      	str	r3, [sp, #28]
 800e31e:	ad0a      	add	r5, sp, #40	; 0x28
 800e320:	462e      	mov	r6, r5
 800e322:	46c3      	mov	fp, r8
 800e324:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800e328:	ab5a      	add	r3, sp, #360	; 0x168
 800e32a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800e32e:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800e332:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800e336:	f1bb 0f00 	cmp.w	fp, #0
 800e33a:	f300 8086 	bgt.w	800e44a <__kernel_rem_pio2f+0x1b6>
 800e33e:	4639      	mov	r1, r7
 800e340:	4620      	mov	r0, r4
 800e342:	f000 fc3d 	bl	800ebc0 <scalbnf>
 800e346:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800e34a:	4604      	mov	r4, r0
 800e34c:	f7f2 fcf2 	bl	8000d34 <__aeabi_fmul>
 800e350:	f000 fbf0 	bl	800eb34 <floorf>
 800e354:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800e358:	f7f2 fcec 	bl	8000d34 <__aeabi_fmul>
 800e35c:	4601      	mov	r1, r0
 800e35e:	4620      	mov	r0, r4
 800e360:	f7f2 fbde 	bl	8000b20 <__aeabi_fsub>
 800e364:	4604      	mov	r4, r0
 800e366:	f7f2 fec1 	bl	80010ec <__aeabi_f2iz>
 800e36a:	4606      	mov	r6, r0
 800e36c:	f7f2 fc8e 	bl	8000c8c <__aeabi_i2f>
 800e370:	4601      	mov	r1, r0
 800e372:	4620      	mov	r0, r4
 800e374:	f7f2 fbd4 	bl	8000b20 <__aeabi_fsub>
 800e378:	2f00      	cmp	r7, #0
 800e37a:	4681      	mov	r9, r0
 800e37c:	f340 8084 	ble.w	800e488 <__kernel_rem_pio2f+0x1f4>
 800e380:	f108 32ff 	add.w	r2, r8, #4294967295
 800e384:	ab0a      	add	r3, sp, #40	; 0x28
 800e386:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800e38a:	f1c7 0108 	rsb	r1, r7, #8
 800e38e:	fa44 f301 	asr.w	r3, r4, r1
 800e392:	441e      	add	r6, r3
 800e394:	408b      	lsls	r3, r1
 800e396:	1ae4      	subs	r4, r4, r3
 800e398:	f1c7 0007 	rsb	r0, r7, #7
 800e39c:	ab0a      	add	r3, sp, #40	; 0x28
 800e39e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e3a2:	4104      	asrs	r4, r0
 800e3a4:	2c00      	cmp	r4, #0
 800e3a6:	dd7e      	ble.n	800e4a6 <__kernel_rem_pio2f+0x212>
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	4692      	mov	sl, r2
 800e3ac:	3601      	adds	r6, #1
 800e3ae:	4590      	cmp	r8, r2
 800e3b0:	f300 80b0 	bgt.w	800e514 <__kernel_rem_pio2f+0x280>
 800e3b4:	2f00      	cmp	r7, #0
 800e3b6:	dd05      	ble.n	800e3c4 <__kernel_rem_pio2f+0x130>
 800e3b8:	2f01      	cmp	r7, #1
 800e3ba:	f000 80bd 	beq.w	800e538 <__kernel_rem_pio2f+0x2a4>
 800e3be:	2f02      	cmp	r7, #2
 800e3c0:	f000 80c5 	beq.w	800e54e <__kernel_rem_pio2f+0x2ba>
 800e3c4:	2c02      	cmp	r4, #2
 800e3c6:	d16e      	bne.n	800e4a6 <__kernel_rem_pio2f+0x212>
 800e3c8:	4649      	mov	r1, r9
 800e3ca:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e3ce:	f7f2 fba7 	bl	8000b20 <__aeabi_fsub>
 800e3d2:	4681      	mov	r9, r0
 800e3d4:	f1ba 0f00 	cmp.w	sl, #0
 800e3d8:	d065      	beq.n	800e4a6 <__kernel_rem_pio2f+0x212>
 800e3da:	4639      	mov	r1, r7
 800e3dc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e3e0:	f000 fbee 	bl	800ebc0 <scalbnf>
 800e3e4:	4601      	mov	r1, r0
 800e3e6:	4648      	mov	r0, r9
 800e3e8:	f7f2 fb9a 	bl	8000b20 <__aeabi_fsub>
 800e3ec:	4681      	mov	r9, r0
 800e3ee:	e05a      	b.n	800e4a6 <__kernel_rem_pio2f+0x212>
 800e3f0:	2400      	movs	r4, #0
 800e3f2:	e766      	b.n	800e2c2 <__kernel_rem_pio2f+0x2e>
 800e3f4:	42ee      	cmn	r6, r5
 800e3f6:	d407      	bmi.n	800e408 <__kernel_rem_pio2f+0x174>
 800e3f8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e3fc:	f7f2 fc46 	bl	8000c8c <__aeabi_i2f>
 800e400:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800e404:	3501      	adds	r5, #1
 800e406:	e76f      	b.n	800e2e8 <__kernel_rem_pio2f+0x54>
 800e408:	4650      	mov	r0, sl
 800e40a:	e7f9      	b.n	800e400 <__kernel_rem_pio2f+0x16c>
 800e40c:	9b05      	ldr	r3, [sp, #20]
 800e40e:	f8da 1000 	ldr.w	r1, [sl]
 800e412:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800e416:	f7f2 fc8d 	bl	8000d34 <__aeabi_fmul>
 800e41a:	4601      	mov	r1, r0
 800e41c:	4630      	mov	r0, r6
 800e41e:	f7f2 fb81 	bl	8000b24 <__addsf3>
 800e422:	4606      	mov	r6, r0
 800e424:	f109 0901 	add.w	r9, r9, #1
 800e428:	ab46      	add	r3, sp, #280	; 0x118
 800e42a:	9a03      	ldr	r2, [sp, #12]
 800e42c:	f1aa 0a04 	sub.w	sl, sl, #4
 800e430:	4591      	cmp	r9, r2
 800e432:	ddeb      	ble.n	800e40c <__kernel_rem_pio2f+0x178>
 800e434:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800e438:	3504      	adds	r5, #4
 800e43a:	f108 0801 	add.w	r8, r8, #1
 800e43e:	e75f      	b.n	800e300 <__kernel_rem_pio2f+0x6c>
 800e440:	46aa      	mov	sl, r5
 800e442:	465e      	mov	r6, fp
 800e444:	f04f 0900 	mov.w	r9, #0
 800e448:	e7ef      	b.n	800e42a <__kernel_rem_pio2f+0x196>
 800e44a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800e44e:	4620      	mov	r0, r4
 800e450:	f7f2 fc70 	bl	8000d34 <__aeabi_fmul>
 800e454:	f7f2 fe4a 	bl	80010ec <__aeabi_f2iz>
 800e458:	f7f2 fc18 	bl	8000c8c <__aeabi_i2f>
 800e45c:	4649      	mov	r1, r9
 800e45e:	9009      	str	r0, [sp, #36]	; 0x24
 800e460:	f7f2 fc68 	bl	8000d34 <__aeabi_fmul>
 800e464:	4601      	mov	r1, r0
 800e466:	4620      	mov	r0, r4
 800e468:	f7f2 fb5a 	bl	8000b20 <__aeabi_fsub>
 800e46c:	f7f2 fe3e 	bl	80010ec <__aeabi_f2iz>
 800e470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e472:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e476:	f846 0b04 	str.w	r0, [r6], #4
 800e47a:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800e47e:	4618      	mov	r0, r3
 800e480:	f7f2 fb50 	bl	8000b24 <__addsf3>
 800e484:	4604      	mov	r4, r0
 800e486:	e756      	b.n	800e336 <__kernel_rem_pio2f+0xa2>
 800e488:	d106      	bne.n	800e498 <__kernel_rem_pio2f+0x204>
 800e48a:	f108 33ff 	add.w	r3, r8, #4294967295
 800e48e:	aa0a      	add	r2, sp, #40	; 0x28
 800e490:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e494:	1224      	asrs	r4, r4, #8
 800e496:	e785      	b.n	800e3a4 <__kernel_rem_pio2f+0x110>
 800e498:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e49c:	f7f2 fdfc 	bl	8001098 <__aeabi_fcmpge>
 800e4a0:	4604      	mov	r4, r0
 800e4a2:	2800      	cmp	r0, #0
 800e4a4:	d134      	bne.n	800e510 <__kernel_rem_pio2f+0x27c>
 800e4a6:	2100      	movs	r1, #0
 800e4a8:	4648      	mov	r0, r9
 800e4aa:	f7f2 fdd7 	bl	800105c <__aeabi_fcmpeq>
 800e4ae:	2800      	cmp	r0, #0
 800e4b0:	f000 809a 	beq.w	800e5e8 <__kernel_rem_pio2f+0x354>
 800e4b4:	f108 35ff 	add.w	r5, r8, #4294967295
 800e4b8:	462b      	mov	r3, r5
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	9901      	ldr	r1, [sp, #4]
 800e4be:	428b      	cmp	r3, r1
 800e4c0:	da4d      	bge.n	800e55e <__kernel_rem_pio2f+0x2ca>
 800e4c2:	2a00      	cmp	r2, #0
 800e4c4:	d07c      	beq.n	800e5c0 <__kernel_rem_pio2f+0x32c>
 800e4c6:	ab0a      	add	r3, sp, #40	; 0x28
 800e4c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e4cc:	3f08      	subs	r7, #8
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	f000 8088 	beq.w	800e5e4 <__kernel_rem_pio2f+0x350>
 800e4d4:	4639      	mov	r1, r7
 800e4d6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e4da:	f000 fb71 	bl	800ebc0 <scalbnf>
 800e4de:	46aa      	mov	sl, r5
 800e4e0:	4681      	mov	r9, r0
 800e4e2:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800e4e6:	af46      	add	r7, sp, #280	; 0x118
 800e4e8:	f1ba 0f00 	cmp.w	sl, #0
 800e4ec:	f280 80b1 	bge.w	800e652 <__kernel_rem_pio2f+0x3be>
 800e4f0:	46a9      	mov	r9, r5
 800e4f2:	f04f 0a00 	mov.w	sl, #0
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	f1b9 0f00 	cmp.w	r9, #0
 800e4fc:	f2c0 80db 	blt.w	800e6b6 <__kernel_rem_pio2f+0x422>
 800e500:	a946      	add	r1, sp, #280	; 0x118
 800e502:	4617      	mov	r7, r2
 800e504:	f04f 0800 	mov.w	r8, #0
 800e508:	4b2c      	ldr	r3, [pc, #176]	; (800e5bc <__kernel_rem_pio2f+0x328>)
 800e50a:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800e50e:	e0c3      	b.n	800e698 <__kernel_rem_pio2f+0x404>
 800e510:	2402      	movs	r4, #2
 800e512:	e749      	b.n	800e3a8 <__kernel_rem_pio2f+0x114>
 800e514:	682b      	ldr	r3, [r5, #0]
 800e516:	f1ba 0f00 	cmp.w	sl, #0
 800e51a:	d108      	bne.n	800e52e <__kernel_rem_pio2f+0x29a>
 800e51c:	b11b      	cbz	r3, 800e526 <__kernel_rem_pio2f+0x292>
 800e51e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800e522:	602b      	str	r3, [r5, #0]
 800e524:	2301      	movs	r3, #1
 800e526:	469a      	mov	sl, r3
 800e528:	3201      	adds	r2, #1
 800e52a:	3504      	adds	r5, #4
 800e52c:	e73f      	b.n	800e3ae <__kernel_rem_pio2f+0x11a>
 800e52e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800e532:	602b      	str	r3, [r5, #0]
 800e534:	4653      	mov	r3, sl
 800e536:	e7f6      	b.n	800e526 <__kernel_rem_pio2f+0x292>
 800e538:	f108 32ff 	add.w	r2, r8, #4294967295
 800e53c:	ab0a      	add	r3, sp, #40	; 0x28
 800e53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e546:	a90a      	add	r1, sp, #40	; 0x28
 800e548:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e54c:	e73a      	b.n	800e3c4 <__kernel_rem_pio2f+0x130>
 800e54e:	f108 32ff 	add.w	r2, r8, #4294967295
 800e552:	ab0a      	add	r3, sp, #40	; 0x28
 800e554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e55c:	e7f3      	b.n	800e546 <__kernel_rem_pio2f+0x2b2>
 800e55e:	a90a      	add	r1, sp, #40	; 0x28
 800e560:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e564:	3b01      	subs	r3, #1
 800e566:	430a      	orrs	r2, r1
 800e568:	e7a8      	b.n	800e4bc <__kernel_rem_pio2f+0x228>
 800e56a:	3301      	adds	r3, #1
 800e56c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e570:	2900      	cmp	r1, #0
 800e572:	d0fa      	beq.n	800e56a <__kernel_rem_pio2f+0x2d6>
 800e574:	9a04      	ldr	r2, [sp, #16]
 800e576:	f108 0501 	add.w	r5, r8, #1
 800e57a:	eb08 0402 	add.w	r4, r8, r2
 800e57e:	aa1e      	add	r2, sp, #120	; 0x78
 800e580:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800e584:	4498      	add	r8, r3
 800e586:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800e58a:	45a8      	cmp	r8, r5
 800e58c:	f6ff aec7 	blt.w	800e31e <__kernel_rem_pio2f+0x8a>
 800e590:	9b07      	ldr	r3, [sp, #28]
 800e592:	46a3      	mov	fp, r4
 800e594:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e598:	f7f2 fb78 	bl	8000c8c <__aeabi_i2f>
 800e59c:	f04f 0a00 	mov.w	sl, #0
 800e5a0:	2600      	movs	r6, #0
 800e5a2:	f84b 0b04 	str.w	r0, [fp], #4
 800e5a6:	9b03      	ldr	r3, [sp, #12]
 800e5a8:	459a      	cmp	sl, r3
 800e5aa:	dd0c      	ble.n	800e5c6 <__kernel_rem_pio2f+0x332>
 800e5ac:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800e5b0:	465c      	mov	r4, fp
 800e5b2:	3501      	adds	r5, #1
 800e5b4:	e7e9      	b.n	800e58a <__kernel_rem_pio2f+0x2f6>
 800e5b6:	bf00      	nop
 800e5b8:	0800f3c4 	.word	0x0800f3c4
 800e5bc:	0800f398 	.word	0x0800f398
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	9a08      	ldr	r2, [sp, #32]
 800e5c4:	e7d2      	b.n	800e56c <__kernel_rem_pio2f+0x2d8>
 800e5c6:	9b05      	ldr	r3, [sp, #20]
 800e5c8:	f854 0904 	ldr.w	r0, [r4], #-4
 800e5cc:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800e5d0:	f7f2 fbb0 	bl	8000d34 <__aeabi_fmul>
 800e5d4:	4601      	mov	r1, r0
 800e5d6:	4630      	mov	r0, r6
 800e5d8:	f7f2 faa4 	bl	8000b24 <__addsf3>
 800e5dc:	f10a 0a01 	add.w	sl, sl, #1
 800e5e0:	4606      	mov	r6, r0
 800e5e2:	e7e0      	b.n	800e5a6 <__kernel_rem_pio2f+0x312>
 800e5e4:	3d01      	subs	r5, #1
 800e5e6:	e76e      	b.n	800e4c6 <__kernel_rem_pio2f+0x232>
 800e5e8:	9b06      	ldr	r3, [sp, #24]
 800e5ea:	9a02      	ldr	r2, [sp, #8]
 800e5ec:	4648      	mov	r0, r9
 800e5ee:	1a99      	subs	r1, r3, r2
 800e5f0:	f000 fae6 	bl	800ebc0 <scalbnf>
 800e5f4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e5f8:	4605      	mov	r5, r0
 800e5fa:	f7f2 fd4d 	bl	8001098 <__aeabi_fcmpge>
 800e5fe:	b300      	cbz	r0, 800e642 <__kernel_rem_pio2f+0x3ae>
 800e600:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800e604:	4628      	mov	r0, r5
 800e606:	f7f2 fb95 	bl	8000d34 <__aeabi_fmul>
 800e60a:	f7f2 fd6f 	bl	80010ec <__aeabi_f2iz>
 800e60e:	f7f2 fb3d 	bl	8000c8c <__aeabi_i2f>
 800e612:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e616:	4681      	mov	r9, r0
 800e618:	f7f2 fb8c 	bl	8000d34 <__aeabi_fmul>
 800e61c:	4601      	mov	r1, r0
 800e61e:	4628      	mov	r0, r5
 800e620:	f7f2 fa7e 	bl	8000b20 <__aeabi_fsub>
 800e624:	f7f2 fd62 	bl	80010ec <__aeabi_f2iz>
 800e628:	ab0a      	add	r3, sp, #40	; 0x28
 800e62a:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e62e:	4648      	mov	r0, r9
 800e630:	f7f2 fd5c 	bl	80010ec <__aeabi_f2iz>
 800e634:	f108 0501 	add.w	r5, r8, #1
 800e638:	ab0a      	add	r3, sp, #40	; 0x28
 800e63a:	3708      	adds	r7, #8
 800e63c:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800e640:	e748      	b.n	800e4d4 <__kernel_rem_pio2f+0x240>
 800e642:	4628      	mov	r0, r5
 800e644:	f7f2 fd52 	bl	80010ec <__aeabi_f2iz>
 800e648:	ab0a      	add	r3, sp, #40	; 0x28
 800e64a:	4645      	mov	r5, r8
 800e64c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e650:	e740      	b.n	800e4d4 <__kernel_rem_pio2f+0x240>
 800e652:	ab0a      	add	r3, sp, #40	; 0x28
 800e654:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e658:	f7f2 fb18 	bl	8000c8c <__aeabi_i2f>
 800e65c:	4649      	mov	r1, r9
 800e65e:	f7f2 fb69 	bl	8000d34 <__aeabi_fmul>
 800e662:	4641      	mov	r1, r8
 800e664:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800e668:	4648      	mov	r0, r9
 800e66a:	f7f2 fb63 	bl	8000d34 <__aeabi_fmul>
 800e66e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e672:	4681      	mov	r9, r0
 800e674:	e738      	b.n	800e4e8 <__kernel_rem_pio2f+0x254>
 800e676:	f853 0b04 	ldr.w	r0, [r3], #4
 800e67a:	f85b 1b04 	ldr.w	r1, [fp], #4
 800e67e:	9203      	str	r2, [sp, #12]
 800e680:	9302      	str	r3, [sp, #8]
 800e682:	f7f2 fb57 	bl	8000d34 <__aeabi_fmul>
 800e686:	4601      	mov	r1, r0
 800e688:	4638      	mov	r0, r7
 800e68a:	f7f2 fa4b 	bl	8000b24 <__addsf3>
 800e68e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e692:	4607      	mov	r7, r0
 800e694:	f108 0801 	add.w	r8, r8, #1
 800e698:	9901      	ldr	r1, [sp, #4]
 800e69a:	4588      	cmp	r8, r1
 800e69c:	dc01      	bgt.n	800e6a2 <__kernel_rem_pio2f+0x40e>
 800e69e:	45c2      	cmp	sl, r8
 800e6a0:	dae9      	bge.n	800e676 <__kernel_rem_pio2f+0x3e2>
 800e6a2:	ab5a      	add	r3, sp, #360	; 0x168
 800e6a4:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800e6a8:	f843 7ca0 	str.w	r7, [r3, #-160]
 800e6ac:	f109 39ff 	add.w	r9, r9, #4294967295
 800e6b0:	f10a 0a01 	add.w	sl, sl, #1
 800e6b4:	e720      	b.n	800e4f8 <__kernel_rem_pio2f+0x264>
 800e6b6:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800e6b8:	2b02      	cmp	r3, #2
 800e6ba:	dc07      	bgt.n	800e6cc <__kernel_rem_pio2f+0x438>
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	dc4d      	bgt.n	800e75c <__kernel_rem_pio2f+0x4c8>
 800e6c0:	d02e      	beq.n	800e720 <__kernel_rem_pio2f+0x48c>
 800e6c2:	f006 0007 	and.w	r0, r6, #7
 800e6c6:	b05b      	add	sp, #364	; 0x16c
 800e6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6cc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800e6ce:	2b03      	cmp	r3, #3
 800e6d0:	d1f7      	bne.n	800e6c2 <__kernel_rem_pio2f+0x42e>
 800e6d2:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800e6d6:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800e6da:	46b8      	mov	r8, r7
 800e6dc:	46aa      	mov	sl, r5
 800e6de:	f1ba 0f00 	cmp.w	sl, #0
 800e6e2:	dc48      	bgt.n	800e776 <__kernel_rem_pio2f+0x4e2>
 800e6e4:	46a9      	mov	r9, r5
 800e6e6:	f1b9 0f01 	cmp.w	r9, #1
 800e6ea:	dc5f      	bgt.n	800e7ac <__kernel_rem_pio2f+0x518>
 800e6ec:	2000      	movs	r0, #0
 800e6ee:	2d01      	cmp	r5, #1
 800e6f0:	dc75      	bgt.n	800e7de <__kernel_rem_pio2f+0x54a>
 800e6f2:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800e6f4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800e6f6:	2c00      	cmp	r4, #0
 800e6f8:	d177      	bne.n	800e7ea <__kernel_rem_pio2f+0x556>
 800e6fa:	9900      	ldr	r1, [sp, #0]
 800e6fc:	600a      	str	r2, [r1, #0]
 800e6fe:	460a      	mov	r2, r1
 800e700:	604b      	str	r3, [r1, #4]
 800e702:	6090      	str	r0, [r2, #8]
 800e704:	e7dd      	b.n	800e6c2 <__kernel_rem_pio2f+0x42e>
 800e706:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800e70a:	f7f2 fa0b 	bl	8000b24 <__addsf3>
 800e70e:	3d01      	subs	r5, #1
 800e710:	2d00      	cmp	r5, #0
 800e712:	daf8      	bge.n	800e706 <__kernel_rem_pio2f+0x472>
 800e714:	b10c      	cbz	r4, 800e71a <__kernel_rem_pio2f+0x486>
 800e716:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e71a:	9b00      	ldr	r3, [sp, #0]
 800e71c:	6018      	str	r0, [r3, #0]
 800e71e:	e7d0      	b.n	800e6c2 <__kernel_rem_pio2f+0x42e>
 800e720:	2000      	movs	r0, #0
 800e722:	af32      	add	r7, sp, #200	; 0xc8
 800e724:	e7f4      	b.n	800e710 <__kernel_rem_pio2f+0x47c>
 800e726:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800e72a:	f7f2 f9fb 	bl	8000b24 <__addsf3>
 800e72e:	3f01      	subs	r7, #1
 800e730:	2f00      	cmp	r7, #0
 800e732:	daf8      	bge.n	800e726 <__kernel_rem_pio2f+0x492>
 800e734:	b1bc      	cbz	r4, 800e766 <__kernel_rem_pio2f+0x4d2>
 800e736:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800e73a:	9a00      	ldr	r2, [sp, #0]
 800e73c:	4601      	mov	r1, r0
 800e73e:	6013      	str	r3, [r2, #0]
 800e740:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800e742:	f7f2 f9ed 	bl	8000b20 <__aeabi_fsub>
 800e746:	2701      	movs	r7, #1
 800e748:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800e74c:	42bd      	cmp	r5, r7
 800e74e:	da0c      	bge.n	800e76a <__kernel_rem_pio2f+0x4d6>
 800e750:	b10c      	cbz	r4, 800e756 <__kernel_rem_pio2f+0x4c2>
 800e752:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e756:	9b00      	ldr	r3, [sp, #0]
 800e758:	6058      	str	r0, [r3, #4]
 800e75a:	e7b2      	b.n	800e6c2 <__kernel_rem_pio2f+0x42e>
 800e75c:	462f      	mov	r7, r5
 800e75e:	2000      	movs	r0, #0
 800e760:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800e764:	e7e4      	b.n	800e730 <__kernel_rem_pio2f+0x49c>
 800e766:	4603      	mov	r3, r0
 800e768:	e7e7      	b.n	800e73a <__kernel_rem_pio2f+0x4a6>
 800e76a:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800e76e:	f7f2 f9d9 	bl	8000b24 <__addsf3>
 800e772:	3701      	adds	r7, #1
 800e774:	e7ea      	b.n	800e74c <__kernel_rem_pio2f+0x4b8>
 800e776:	f8d8 3000 	ldr.w	r3, [r8]
 800e77a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800e77e:	4619      	mov	r1, r3
 800e780:	4610      	mov	r0, r2
 800e782:	9302      	str	r3, [sp, #8]
 800e784:	9201      	str	r2, [sp, #4]
 800e786:	f7f2 f9cd 	bl	8000b24 <__addsf3>
 800e78a:	9a01      	ldr	r2, [sp, #4]
 800e78c:	4601      	mov	r1, r0
 800e78e:	4681      	mov	r9, r0
 800e790:	4610      	mov	r0, r2
 800e792:	f7f2 f9c5 	bl	8000b20 <__aeabi_fsub>
 800e796:	9b02      	ldr	r3, [sp, #8]
 800e798:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e79c:	4619      	mov	r1, r3
 800e79e:	f7f2 f9c1 	bl	8000b24 <__addsf3>
 800e7a2:	f848 0904 	str.w	r0, [r8], #-4
 800e7a6:	f8c8 9000 	str.w	r9, [r8]
 800e7aa:	e798      	b.n	800e6de <__kernel_rem_pio2f+0x44a>
 800e7ac:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800e7b0:	f8d7 a000 	ldr.w	sl, [r7]
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	4651      	mov	r1, sl
 800e7b8:	9301      	str	r3, [sp, #4]
 800e7ba:	f7f2 f9b3 	bl	8000b24 <__addsf3>
 800e7be:	9b01      	ldr	r3, [sp, #4]
 800e7c0:	4601      	mov	r1, r0
 800e7c2:	4680      	mov	r8, r0
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7f2 f9ab 	bl	8000b20 <__aeabi_fsub>
 800e7ca:	4651      	mov	r1, sl
 800e7cc:	f7f2 f9aa 	bl	8000b24 <__addsf3>
 800e7d0:	f847 0904 	str.w	r0, [r7], #-4
 800e7d4:	f109 39ff 	add.w	r9, r9, #4294967295
 800e7d8:	f8c7 8000 	str.w	r8, [r7]
 800e7dc:	e783      	b.n	800e6e6 <__kernel_rem_pio2f+0x452>
 800e7de:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800e7e2:	f7f2 f99f 	bl	8000b24 <__addsf3>
 800e7e6:	3d01      	subs	r5, #1
 800e7e8:	e781      	b.n	800e6ee <__kernel_rem_pio2f+0x45a>
 800e7ea:	9900      	ldr	r1, [sp, #0]
 800e7ec:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800e7f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e7f4:	600a      	str	r2, [r1, #0]
 800e7f6:	604b      	str	r3, [r1, #4]
 800e7f8:	460a      	mov	r2, r1
 800e7fa:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e7fe:	e780      	b.n	800e702 <__kernel_rem_pio2f+0x46e>

0800e800 <__kernel_sinf>:
 800e800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e804:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e808:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e80c:	4604      	mov	r4, r0
 800e80e:	460f      	mov	r7, r1
 800e810:	4691      	mov	r9, r2
 800e812:	da03      	bge.n	800e81c <__kernel_sinf+0x1c>
 800e814:	f7f2 fc6a 	bl	80010ec <__aeabi_f2iz>
 800e818:	2800      	cmp	r0, #0
 800e81a:	d035      	beq.n	800e888 <__kernel_sinf+0x88>
 800e81c:	4621      	mov	r1, r4
 800e81e:	4620      	mov	r0, r4
 800e820:	f7f2 fa88 	bl	8000d34 <__aeabi_fmul>
 800e824:	4605      	mov	r5, r0
 800e826:	4601      	mov	r1, r0
 800e828:	4620      	mov	r0, r4
 800e82a:	f7f2 fa83 	bl	8000d34 <__aeabi_fmul>
 800e82e:	4929      	ldr	r1, [pc, #164]	; (800e8d4 <__kernel_sinf+0xd4>)
 800e830:	4606      	mov	r6, r0
 800e832:	4628      	mov	r0, r5
 800e834:	f7f2 fa7e 	bl	8000d34 <__aeabi_fmul>
 800e838:	4927      	ldr	r1, [pc, #156]	; (800e8d8 <__kernel_sinf+0xd8>)
 800e83a:	f7f2 f971 	bl	8000b20 <__aeabi_fsub>
 800e83e:	4629      	mov	r1, r5
 800e840:	f7f2 fa78 	bl	8000d34 <__aeabi_fmul>
 800e844:	4925      	ldr	r1, [pc, #148]	; (800e8dc <__kernel_sinf+0xdc>)
 800e846:	f7f2 f96d 	bl	8000b24 <__addsf3>
 800e84a:	4629      	mov	r1, r5
 800e84c:	f7f2 fa72 	bl	8000d34 <__aeabi_fmul>
 800e850:	4923      	ldr	r1, [pc, #140]	; (800e8e0 <__kernel_sinf+0xe0>)
 800e852:	f7f2 f965 	bl	8000b20 <__aeabi_fsub>
 800e856:	4629      	mov	r1, r5
 800e858:	f7f2 fa6c 	bl	8000d34 <__aeabi_fmul>
 800e85c:	4921      	ldr	r1, [pc, #132]	; (800e8e4 <__kernel_sinf+0xe4>)
 800e85e:	f7f2 f961 	bl	8000b24 <__addsf3>
 800e862:	4680      	mov	r8, r0
 800e864:	f1b9 0f00 	cmp.w	r9, #0
 800e868:	d111      	bne.n	800e88e <__kernel_sinf+0x8e>
 800e86a:	4601      	mov	r1, r0
 800e86c:	4628      	mov	r0, r5
 800e86e:	f7f2 fa61 	bl	8000d34 <__aeabi_fmul>
 800e872:	491d      	ldr	r1, [pc, #116]	; (800e8e8 <__kernel_sinf+0xe8>)
 800e874:	f7f2 f954 	bl	8000b20 <__aeabi_fsub>
 800e878:	4631      	mov	r1, r6
 800e87a:	f7f2 fa5b 	bl	8000d34 <__aeabi_fmul>
 800e87e:	4601      	mov	r1, r0
 800e880:	4620      	mov	r0, r4
 800e882:	f7f2 f94f 	bl	8000b24 <__addsf3>
 800e886:	4604      	mov	r4, r0
 800e888:	4620      	mov	r0, r4
 800e88a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e88e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e892:	4638      	mov	r0, r7
 800e894:	f7f2 fa4e 	bl	8000d34 <__aeabi_fmul>
 800e898:	4641      	mov	r1, r8
 800e89a:	4681      	mov	r9, r0
 800e89c:	4630      	mov	r0, r6
 800e89e:	f7f2 fa49 	bl	8000d34 <__aeabi_fmul>
 800e8a2:	4601      	mov	r1, r0
 800e8a4:	4648      	mov	r0, r9
 800e8a6:	f7f2 f93b 	bl	8000b20 <__aeabi_fsub>
 800e8aa:	4629      	mov	r1, r5
 800e8ac:	f7f2 fa42 	bl	8000d34 <__aeabi_fmul>
 800e8b0:	4639      	mov	r1, r7
 800e8b2:	f7f2 f935 	bl	8000b20 <__aeabi_fsub>
 800e8b6:	490c      	ldr	r1, [pc, #48]	; (800e8e8 <__kernel_sinf+0xe8>)
 800e8b8:	4605      	mov	r5, r0
 800e8ba:	4630      	mov	r0, r6
 800e8bc:	f7f2 fa3a 	bl	8000d34 <__aeabi_fmul>
 800e8c0:	4601      	mov	r1, r0
 800e8c2:	4628      	mov	r0, r5
 800e8c4:	f7f2 f92e 	bl	8000b24 <__addsf3>
 800e8c8:	4601      	mov	r1, r0
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	f7f2 f928 	bl	8000b20 <__aeabi_fsub>
 800e8d0:	e7d9      	b.n	800e886 <__kernel_sinf+0x86>
 800e8d2:	bf00      	nop
 800e8d4:	2f2ec9d3 	.word	0x2f2ec9d3
 800e8d8:	32d72f34 	.word	0x32d72f34
 800e8dc:	3638ef1b 	.word	0x3638ef1b
 800e8e0:	39500d01 	.word	0x39500d01
 800e8e4:	3c088889 	.word	0x3c088889
 800e8e8:	3e2aaaab 	.word	0x3e2aaaab

0800e8ec <fabs>:
 800e8ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e8f0:	4770      	bx	lr

0800e8f2 <finite>:
 800e8f2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800e8f6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e8fa:	0fc0      	lsrs	r0, r0, #31
 800e8fc:	4770      	bx	lr
	...

0800e900 <nan>:
 800e900:	2000      	movs	r0, #0
 800e902:	4901      	ldr	r1, [pc, #4]	; (800e908 <nan+0x8>)
 800e904:	4770      	bx	lr
 800e906:	bf00      	nop
 800e908:	7ff80000 	.word	0x7ff80000

0800e90c <rint>:
 800e90c:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800e910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e912:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800e916:	2f13      	cmp	r7, #19
 800e918:	4602      	mov	r2, r0
 800e91a:	460b      	mov	r3, r1
 800e91c:	460c      	mov	r4, r1
 800e91e:	4605      	mov	r5, r0
 800e920:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800e924:	dc59      	bgt.n	800e9da <rint+0xce>
 800e926:	2f00      	cmp	r7, #0
 800e928:	da2a      	bge.n	800e980 <rint+0x74>
 800e92a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e92e:	4301      	orrs	r1, r0
 800e930:	d022      	beq.n	800e978 <rint+0x6c>
 800e932:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800e936:	4301      	orrs	r1, r0
 800e938:	424d      	negs	r5, r1
 800e93a:	430d      	orrs	r5, r1
 800e93c:	4936      	ldr	r1, [pc, #216]	; (800ea18 <rint+0x10c>)
 800e93e:	0c5c      	lsrs	r4, r3, #17
 800e940:	0b2d      	lsrs	r5, r5, #12
 800e942:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800e946:	0464      	lsls	r4, r4, #17
 800e948:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e94c:	ea45 0304 	orr.w	r3, r5, r4
 800e950:	e9d1 4500 	ldrd	r4, r5, [r1]
 800e954:	4620      	mov	r0, r4
 800e956:	4629      	mov	r1, r5
 800e958:	f7f1 fc00 	bl	800015c <__adddf3>
 800e95c:	e9cd 0100 	strd	r0, r1, [sp]
 800e960:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e964:	462b      	mov	r3, r5
 800e966:	4622      	mov	r2, r4
 800e968:	f7f1 fbf6 	bl	8000158 <__aeabi_dsub>
 800e96c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e970:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800e974:	4602      	mov	r2, r0
 800e976:	460b      	mov	r3, r1
 800e978:	4610      	mov	r0, r2
 800e97a:	4619      	mov	r1, r3
 800e97c:	b003      	add	sp, #12
 800e97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e980:	4926      	ldr	r1, [pc, #152]	; (800ea1c <rint+0x110>)
 800e982:	4139      	asrs	r1, r7
 800e984:	ea03 0001 	and.w	r0, r3, r1
 800e988:	4310      	orrs	r0, r2
 800e98a:	d0f5      	beq.n	800e978 <rint+0x6c>
 800e98c:	084b      	lsrs	r3, r1, #1
 800e98e:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800e992:	ea52 0501 	orrs.w	r5, r2, r1
 800e996:	d00c      	beq.n	800e9b2 <rint+0xa6>
 800e998:	ea24 0303 	bic.w	r3, r4, r3
 800e99c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800e9a0:	2f13      	cmp	r7, #19
 800e9a2:	bf0c      	ite	eq
 800e9a4:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800e9a8:	2500      	movne	r5, #0
 800e9aa:	fa44 f707 	asr.w	r7, r4, r7
 800e9ae:	ea43 0407 	orr.w	r4, r3, r7
 800e9b2:	4919      	ldr	r1, [pc, #100]	; (800ea18 <rint+0x10c>)
 800e9b4:	4623      	mov	r3, r4
 800e9b6:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800e9ba:	462a      	mov	r2, r5
 800e9bc:	e9d6 4500 	ldrd	r4, r5, [r6]
 800e9c0:	4620      	mov	r0, r4
 800e9c2:	4629      	mov	r1, r5
 800e9c4:	f7f1 fbca 	bl	800015c <__adddf3>
 800e9c8:	e9cd 0100 	strd	r0, r1, [sp]
 800e9cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9d0:	4622      	mov	r2, r4
 800e9d2:	462b      	mov	r3, r5
 800e9d4:	f7f1 fbc0 	bl	8000158 <__aeabi_dsub>
 800e9d8:	e7cc      	b.n	800e974 <rint+0x68>
 800e9da:	2f33      	cmp	r7, #51	; 0x33
 800e9dc:	dd05      	ble.n	800e9ea <rint+0xde>
 800e9de:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800e9e2:	d1c9      	bne.n	800e978 <rint+0x6c>
 800e9e4:	f7f1 fbba 	bl	800015c <__adddf3>
 800e9e8:	e7c4      	b.n	800e974 <rint+0x68>
 800e9ea:	f04f 31ff 	mov.w	r1, #4294967295
 800e9ee:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800e9f2:	fa21 f10c 	lsr.w	r1, r1, ip
 800e9f6:	4208      	tst	r0, r1
 800e9f8:	d0be      	beq.n	800e978 <rint+0x6c>
 800e9fa:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800e9fe:	bf18      	it	ne
 800ea00:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800ea04:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800ea08:	bf1e      	ittt	ne
 800ea0a:	ea20 0303 	bicne.w	r3, r0, r3
 800ea0e:	fa45 fc0c 	asrne.w	ip, r5, ip
 800ea12:	ea43 050c 	orrne.w	r5, r3, ip
 800ea16:	e7cc      	b.n	800e9b2 <rint+0xa6>
 800ea18:	0800f3d0 	.word	0x0800f3d0
 800ea1c:	000fffff 	.word	0x000fffff

0800ea20 <scalbn>:
 800ea20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea22:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800ea26:	4604      	mov	r4, r0
 800ea28:	460d      	mov	r5, r1
 800ea2a:	4617      	mov	r7, r2
 800ea2c:	460b      	mov	r3, r1
 800ea2e:	b996      	cbnz	r6, 800ea56 <scalbn+0x36>
 800ea30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ea34:	4303      	orrs	r3, r0
 800ea36:	d039      	beq.n	800eaac <scalbn+0x8c>
 800ea38:	4b35      	ldr	r3, [pc, #212]	; (800eb10 <scalbn+0xf0>)
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f7f1 fd44 	bl	80004c8 <__aeabi_dmul>
 800ea40:	4b34      	ldr	r3, [pc, #208]	; (800eb14 <scalbn+0xf4>)
 800ea42:	4604      	mov	r4, r0
 800ea44:	429f      	cmp	r7, r3
 800ea46:	460d      	mov	r5, r1
 800ea48:	da0f      	bge.n	800ea6a <scalbn+0x4a>
 800ea4a:	a32d      	add	r3, pc, #180	; (adr r3, 800eb00 <scalbn+0xe0>)
 800ea4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea50:	f7f1 fd3a 	bl	80004c8 <__aeabi_dmul>
 800ea54:	e006      	b.n	800ea64 <scalbn+0x44>
 800ea56:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ea5a:	4296      	cmp	r6, r2
 800ea5c:	d10a      	bne.n	800ea74 <scalbn+0x54>
 800ea5e:	4602      	mov	r2, r0
 800ea60:	f7f1 fb7c 	bl	800015c <__adddf3>
 800ea64:	4604      	mov	r4, r0
 800ea66:	460d      	mov	r5, r1
 800ea68:	e020      	b.n	800eaac <scalbn+0x8c>
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ea70:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800ea74:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800ea78:	19b9      	adds	r1, r7, r6
 800ea7a:	4291      	cmp	r1, r2
 800ea7c:	dd0e      	ble.n	800ea9c <scalbn+0x7c>
 800ea7e:	a322      	add	r3, pc, #136	; (adr r3, 800eb08 <scalbn+0xe8>)
 800ea80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea84:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ea88:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ea8c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ea90:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ea94:	4820      	ldr	r0, [pc, #128]	; (800eb18 <scalbn+0xf8>)
 800ea96:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ea9a:	e7d9      	b.n	800ea50 <scalbn+0x30>
 800ea9c:	2900      	cmp	r1, #0
 800ea9e:	dd08      	ble.n	800eab2 <scalbn+0x92>
 800eaa0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eaa4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eaa8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800eaac:	4620      	mov	r0, r4
 800eaae:	4629      	mov	r1, r5
 800eab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eab2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800eab6:	da16      	bge.n	800eae6 <scalbn+0xc6>
 800eab8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800eabc:	429f      	cmp	r7, r3
 800eabe:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800eac2:	dd08      	ble.n	800ead6 <scalbn+0xb6>
 800eac4:	4c15      	ldr	r4, [pc, #84]	; (800eb1c <scalbn+0xfc>)
 800eac6:	4814      	ldr	r0, [pc, #80]	; (800eb18 <scalbn+0xf8>)
 800eac8:	f363 74df 	bfi	r4, r3, #31, #1
 800eacc:	a30e      	add	r3, pc, #56	; (adr r3, 800eb08 <scalbn+0xe8>)
 800eace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead2:	4621      	mov	r1, r4
 800ead4:	e7bc      	b.n	800ea50 <scalbn+0x30>
 800ead6:	4c12      	ldr	r4, [pc, #72]	; (800eb20 <scalbn+0x100>)
 800ead8:	4812      	ldr	r0, [pc, #72]	; (800eb24 <scalbn+0x104>)
 800eada:	f363 74df 	bfi	r4, r3, #31, #1
 800eade:	a308      	add	r3, pc, #32	; (adr r3, 800eb00 <scalbn+0xe0>)
 800eae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae4:	e7f5      	b.n	800ead2 <scalbn+0xb2>
 800eae6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eaea:	3136      	adds	r1, #54	; 0x36
 800eaec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eaf0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800eaf4:	4620      	mov	r0, r4
 800eaf6:	4629      	mov	r1, r5
 800eaf8:	2200      	movs	r2, #0
 800eafa:	4b0b      	ldr	r3, [pc, #44]	; (800eb28 <scalbn+0x108>)
 800eafc:	e7a8      	b.n	800ea50 <scalbn+0x30>
 800eafe:	bf00      	nop
 800eb00:	c2f8f359 	.word	0xc2f8f359
 800eb04:	01a56e1f 	.word	0x01a56e1f
 800eb08:	8800759c 	.word	0x8800759c
 800eb0c:	7e37e43c 	.word	0x7e37e43c
 800eb10:	43500000 	.word	0x43500000
 800eb14:	ffff3cb0 	.word	0xffff3cb0
 800eb18:	8800759c 	.word	0x8800759c
 800eb1c:	7e37e43c 	.word	0x7e37e43c
 800eb20:	01a56e1f 	.word	0x01a56e1f
 800eb24:	c2f8f359 	.word	0xc2f8f359
 800eb28:	3c900000 	.word	0x3c900000

0800eb2c <fabsf>:
 800eb2c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800eb30:	4770      	bx	lr
	...

0800eb34 <floorf>:
 800eb34:	b570      	push	{r4, r5, r6, lr}
 800eb36:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800eb3a:	3d7f      	subs	r5, #127	; 0x7f
 800eb3c:	2d16      	cmp	r5, #22
 800eb3e:	4601      	mov	r1, r0
 800eb40:	4604      	mov	r4, r0
 800eb42:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800eb46:	dc26      	bgt.n	800eb96 <floorf+0x62>
 800eb48:	2d00      	cmp	r5, #0
 800eb4a:	da0e      	bge.n	800eb6a <floorf+0x36>
 800eb4c:	4917      	ldr	r1, [pc, #92]	; (800ebac <floorf+0x78>)
 800eb4e:	f7f1 ffe9 	bl	8000b24 <__addsf3>
 800eb52:	2100      	movs	r1, #0
 800eb54:	f7f2 faaa 	bl	80010ac <__aeabi_fcmpgt>
 800eb58:	b128      	cbz	r0, 800eb66 <floorf+0x32>
 800eb5a:	2c00      	cmp	r4, #0
 800eb5c:	da23      	bge.n	800eba6 <floorf+0x72>
 800eb5e:	4b14      	ldr	r3, [pc, #80]	; (800ebb0 <floorf+0x7c>)
 800eb60:	2e00      	cmp	r6, #0
 800eb62:	bf18      	it	ne
 800eb64:	461c      	movne	r4, r3
 800eb66:	4621      	mov	r1, r4
 800eb68:	e01b      	b.n	800eba2 <floorf+0x6e>
 800eb6a:	4e12      	ldr	r6, [pc, #72]	; (800ebb4 <floorf+0x80>)
 800eb6c:	412e      	asrs	r6, r5
 800eb6e:	4230      	tst	r0, r6
 800eb70:	d017      	beq.n	800eba2 <floorf+0x6e>
 800eb72:	490e      	ldr	r1, [pc, #56]	; (800ebac <floorf+0x78>)
 800eb74:	f7f1 ffd6 	bl	8000b24 <__addsf3>
 800eb78:	2100      	movs	r1, #0
 800eb7a:	f7f2 fa97 	bl	80010ac <__aeabi_fcmpgt>
 800eb7e:	2800      	cmp	r0, #0
 800eb80:	d0f1      	beq.n	800eb66 <floorf+0x32>
 800eb82:	2c00      	cmp	r4, #0
 800eb84:	bfbe      	ittt	lt
 800eb86:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800eb8a:	fa43 f505 	asrlt.w	r5, r3, r5
 800eb8e:	1964      	addlt	r4, r4, r5
 800eb90:	ea24 0406 	bic.w	r4, r4, r6
 800eb94:	e7e7      	b.n	800eb66 <floorf+0x32>
 800eb96:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800eb9a:	d302      	bcc.n	800eba2 <floorf+0x6e>
 800eb9c:	f7f1 ffc2 	bl	8000b24 <__addsf3>
 800eba0:	4601      	mov	r1, r0
 800eba2:	4608      	mov	r0, r1
 800eba4:	bd70      	pop	{r4, r5, r6, pc}
 800eba6:	2400      	movs	r4, #0
 800eba8:	e7dd      	b.n	800eb66 <floorf+0x32>
 800ebaa:	bf00      	nop
 800ebac:	7149f2ca 	.word	0x7149f2ca
 800ebb0:	bf800000 	.word	0xbf800000
 800ebb4:	007fffff 	.word	0x007fffff

0800ebb8 <nanf>:
 800ebb8:	4800      	ldr	r0, [pc, #0]	; (800ebbc <nanf+0x4>)
 800ebba:	4770      	bx	lr
 800ebbc:	7fc00000 	.word	0x7fc00000

0800ebc0 <scalbnf>:
 800ebc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800ebc4:	b538      	push	{r3, r4, r5, lr}
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	460d      	mov	r5, r1
 800ebca:	4604      	mov	r4, r0
 800ebcc:	d02a      	beq.n	800ec24 <scalbnf+0x64>
 800ebce:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ebd2:	d304      	bcc.n	800ebde <scalbnf+0x1e>
 800ebd4:	4601      	mov	r1, r0
 800ebd6:	f7f1 ffa5 	bl	8000b24 <__addsf3>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	e022      	b.n	800ec24 <scalbnf+0x64>
 800ebde:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800ebe2:	d117      	bne.n	800ec14 <scalbnf+0x54>
 800ebe4:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800ebe8:	f7f2 f8a4 	bl	8000d34 <__aeabi_fmul>
 800ebec:	4a17      	ldr	r2, [pc, #92]	; (800ec4c <scalbnf+0x8c>)
 800ebee:	4603      	mov	r3, r0
 800ebf0:	4295      	cmp	r5, r2
 800ebf2:	db0b      	blt.n	800ec0c <scalbnf+0x4c>
 800ebf4:	4604      	mov	r4, r0
 800ebf6:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800ebfa:	3a19      	subs	r2, #25
 800ebfc:	442a      	add	r2, r5
 800ebfe:	2afe      	cmp	r2, #254	; 0xfe
 800ec00:	dd0a      	ble.n	800ec18 <scalbnf+0x58>
 800ec02:	4913      	ldr	r1, [pc, #76]	; (800ec50 <scalbnf+0x90>)
 800ec04:	4618      	mov	r0, r3
 800ec06:	f361 001e 	bfi	r0, r1, #0, #31
 800ec0a:	e000      	b.n	800ec0e <scalbnf+0x4e>
 800ec0c:	4911      	ldr	r1, [pc, #68]	; (800ec54 <scalbnf+0x94>)
 800ec0e:	f7f2 f891 	bl	8000d34 <__aeabi_fmul>
 800ec12:	e7e2      	b.n	800ebda <scalbnf+0x1a>
 800ec14:	0dd2      	lsrs	r2, r2, #23
 800ec16:	e7f1      	b.n	800ebfc <scalbnf+0x3c>
 800ec18:	2a00      	cmp	r2, #0
 800ec1a:	dd05      	ble.n	800ec28 <scalbnf+0x68>
 800ec1c:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800ec20:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800ec24:	4618      	mov	r0, r3
 800ec26:	bd38      	pop	{r3, r4, r5, pc}
 800ec28:	f112 0f16 	cmn.w	r2, #22
 800ec2c:	da05      	bge.n	800ec3a <scalbnf+0x7a>
 800ec2e:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ec32:	4295      	cmp	r5, r2
 800ec34:	dce5      	bgt.n	800ec02 <scalbnf+0x42>
 800ec36:	4907      	ldr	r1, [pc, #28]	; (800ec54 <scalbnf+0x94>)
 800ec38:	e7e4      	b.n	800ec04 <scalbnf+0x44>
 800ec3a:	3219      	adds	r2, #25
 800ec3c:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800ec40:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800ec44:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800ec48:	e7e1      	b.n	800ec0e <scalbnf+0x4e>
 800ec4a:	bf00      	nop
 800ec4c:	ffff3cb0 	.word	0xffff3cb0
 800ec50:	7149f2ca 	.word	0x7149f2ca
 800ec54:	0da24260 	.word	0x0da24260

0800ec58 <abort>:
 800ec58:	2006      	movs	r0, #6
 800ec5a:	b508      	push	{r3, lr}
 800ec5c:	f000 f94c 	bl	800eef8 <raise>
 800ec60:	2001      	movs	r0, #1
 800ec62:	f7f4 fdec 	bl	800383e <_exit>
	...

0800ec68 <__errno>:
 800ec68:	4b01      	ldr	r3, [pc, #4]	; (800ec70 <__errno+0x8>)
 800ec6a:	6818      	ldr	r0, [r3, #0]
 800ec6c:	4770      	bx	lr
 800ec6e:	bf00      	nop
 800ec70:	20000010 	.word	0x20000010

0800ec74 <__libc_init_array>:
 800ec74:	b570      	push	{r4, r5, r6, lr}
 800ec76:	2600      	movs	r6, #0
 800ec78:	4d0c      	ldr	r5, [pc, #48]	; (800ecac <__libc_init_array+0x38>)
 800ec7a:	4c0d      	ldr	r4, [pc, #52]	; (800ecb0 <__libc_init_array+0x3c>)
 800ec7c:	1b64      	subs	r4, r4, r5
 800ec7e:	10a4      	asrs	r4, r4, #2
 800ec80:	42a6      	cmp	r6, r4
 800ec82:	d109      	bne.n	800ec98 <__libc_init_array+0x24>
 800ec84:	f000 f962 	bl	800ef4c <_init>
 800ec88:	2600      	movs	r6, #0
 800ec8a:	4d0a      	ldr	r5, [pc, #40]	; (800ecb4 <__libc_init_array+0x40>)
 800ec8c:	4c0a      	ldr	r4, [pc, #40]	; (800ecb8 <__libc_init_array+0x44>)
 800ec8e:	1b64      	subs	r4, r4, r5
 800ec90:	10a4      	asrs	r4, r4, #2
 800ec92:	42a6      	cmp	r6, r4
 800ec94:	d105      	bne.n	800eca2 <__libc_init_array+0x2e>
 800ec96:	bd70      	pop	{r4, r5, r6, pc}
 800ec98:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec9c:	4798      	blx	r3
 800ec9e:	3601      	adds	r6, #1
 800eca0:	e7ee      	b.n	800ec80 <__libc_init_array+0xc>
 800eca2:	f855 3b04 	ldr.w	r3, [r5], #4
 800eca6:	4798      	blx	r3
 800eca8:	3601      	adds	r6, #1
 800ecaa:	e7f2      	b.n	800ec92 <__libc_init_array+0x1e>
 800ecac:	0800f440 	.word	0x0800f440
 800ecb0:	0800f440 	.word	0x0800f440
 800ecb4:	0800f440 	.word	0x0800f440
 800ecb8:	0800f448 	.word	0x0800f448

0800ecbc <malloc>:
 800ecbc:	4b02      	ldr	r3, [pc, #8]	; (800ecc8 <malloc+0xc>)
 800ecbe:	4601      	mov	r1, r0
 800ecc0:	6818      	ldr	r0, [r3, #0]
 800ecc2:	f000 b887 	b.w	800edd4 <_malloc_r>
 800ecc6:	bf00      	nop
 800ecc8:	20000010 	.word	0x20000010

0800eccc <free>:
 800eccc:	4b02      	ldr	r3, [pc, #8]	; (800ecd8 <free+0xc>)
 800ecce:	4601      	mov	r1, r0
 800ecd0:	6818      	ldr	r0, [r3, #0]
 800ecd2:	f000 b833 	b.w	800ed3c <_free_r>
 800ecd6:	bf00      	nop
 800ecd8:	20000010 	.word	0x20000010

0800ecdc <memcpy>:
 800ecdc:	440a      	add	r2, r1
 800ecde:	4291      	cmp	r1, r2
 800ece0:	f100 33ff 	add.w	r3, r0, #4294967295
 800ece4:	d100      	bne.n	800ece8 <memcpy+0xc>
 800ece6:	4770      	bx	lr
 800ece8:	b510      	push	{r4, lr}
 800ecea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecee:	4291      	cmp	r1, r2
 800ecf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ecf4:	d1f9      	bne.n	800ecea <memcpy+0xe>
 800ecf6:	bd10      	pop	{r4, pc}

0800ecf8 <memmove>:
 800ecf8:	4288      	cmp	r0, r1
 800ecfa:	b510      	push	{r4, lr}
 800ecfc:	eb01 0402 	add.w	r4, r1, r2
 800ed00:	d902      	bls.n	800ed08 <memmove+0x10>
 800ed02:	4284      	cmp	r4, r0
 800ed04:	4623      	mov	r3, r4
 800ed06:	d807      	bhi.n	800ed18 <memmove+0x20>
 800ed08:	1e43      	subs	r3, r0, #1
 800ed0a:	42a1      	cmp	r1, r4
 800ed0c:	d008      	beq.n	800ed20 <memmove+0x28>
 800ed0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed12:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed16:	e7f8      	b.n	800ed0a <memmove+0x12>
 800ed18:	4601      	mov	r1, r0
 800ed1a:	4402      	add	r2, r0
 800ed1c:	428a      	cmp	r2, r1
 800ed1e:	d100      	bne.n	800ed22 <memmove+0x2a>
 800ed20:	bd10      	pop	{r4, pc}
 800ed22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed2a:	e7f7      	b.n	800ed1c <memmove+0x24>

0800ed2c <memset>:
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	4402      	add	r2, r0
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d100      	bne.n	800ed36 <memset+0xa>
 800ed34:	4770      	bx	lr
 800ed36:	f803 1b01 	strb.w	r1, [r3], #1
 800ed3a:	e7f9      	b.n	800ed30 <memset+0x4>

0800ed3c <_free_r>:
 800ed3c:	b538      	push	{r3, r4, r5, lr}
 800ed3e:	4605      	mov	r5, r0
 800ed40:	2900      	cmp	r1, #0
 800ed42:	d043      	beq.n	800edcc <_free_r+0x90>
 800ed44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed48:	1f0c      	subs	r4, r1, #4
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	bfb8      	it	lt
 800ed4e:	18e4      	addlt	r4, r4, r3
 800ed50:	f000 f8f0 	bl	800ef34 <__malloc_lock>
 800ed54:	4a1e      	ldr	r2, [pc, #120]	; (800edd0 <_free_r+0x94>)
 800ed56:	6813      	ldr	r3, [r2, #0]
 800ed58:	4610      	mov	r0, r2
 800ed5a:	b933      	cbnz	r3, 800ed6a <_free_r+0x2e>
 800ed5c:	6063      	str	r3, [r4, #4]
 800ed5e:	6014      	str	r4, [r2, #0]
 800ed60:	4628      	mov	r0, r5
 800ed62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed66:	f000 b8eb 	b.w	800ef40 <__malloc_unlock>
 800ed6a:	42a3      	cmp	r3, r4
 800ed6c:	d90a      	bls.n	800ed84 <_free_r+0x48>
 800ed6e:	6821      	ldr	r1, [r4, #0]
 800ed70:	1862      	adds	r2, r4, r1
 800ed72:	4293      	cmp	r3, r2
 800ed74:	bf01      	itttt	eq
 800ed76:	681a      	ldreq	r2, [r3, #0]
 800ed78:	685b      	ldreq	r3, [r3, #4]
 800ed7a:	1852      	addeq	r2, r2, r1
 800ed7c:	6022      	streq	r2, [r4, #0]
 800ed7e:	6063      	str	r3, [r4, #4]
 800ed80:	6004      	str	r4, [r0, #0]
 800ed82:	e7ed      	b.n	800ed60 <_free_r+0x24>
 800ed84:	461a      	mov	r2, r3
 800ed86:	685b      	ldr	r3, [r3, #4]
 800ed88:	b10b      	cbz	r3, 800ed8e <_free_r+0x52>
 800ed8a:	42a3      	cmp	r3, r4
 800ed8c:	d9fa      	bls.n	800ed84 <_free_r+0x48>
 800ed8e:	6811      	ldr	r1, [r2, #0]
 800ed90:	1850      	adds	r0, r2, r1
 800ed92:	42a0      	cmp	r0, r4
 800ed94:	d10b      	bne.n	800edae <_free_r+0x72>
 800ed96:	6820      	ldr	r0, [r4, #0]
 800ed98:	4401      	add	r1, r0
 800ed9a:	1850      	adds	r0, r2, r1
 800ed9c:	4283      	cmp	r3, r0
 800ed9e:	6011      	str	r1, [r2, #0]
 800eda0:	d1de      	bne.n	800ed60 <_free_r+0x24>
 800eda2:	6818      	ldr	r0, [r3, #0]
 800eda4:	685b      	ldr	r3, [r3, #4]
 800eda6:	4401      	add	r1, r0
 800eda8:	6011      	str	r1, [r2, #0]
 800edaa:	6053      	str	r3, [r2, #4]
 800edac:	e7d8      	b.n	800ed60 <_free_r+0x24>
 800edae:	d902      	bls.n	800edb6 <_free_r+0x7a>
 800edb0:	230c      	movs	r3, #12
 800edb2:	602b      	str	r3, [r5, #0]
 800edb4:	e7d4      	b.n	800ed60 <_free_r+0x24>
 800edb6:	6820      	ldr	r0, [r4, #0]
 800edb8:	1821      	adds	r1, r4, r0
 800edba:	428b      	cmp	r3, r1
 800edbc:	bf01      	itttt	eq
 800edbe:	6819      	ldreq	r1, [r3, #0]
 800edc0:	685b      	ldreq	r3, [r3, #4]
 800edc2:	1809      	addeq	r1, r1, r0
 800edc4:	6021      	streq	r1, [r4, #0]
 800edc6:	6063      	str	r3, [r4, #4]
 800edc8:	6054      	str	r4, [r2, #4]
 800edca:	e7c9      	b.n	800ed60 <_free_r+0x24>
 800edcc:	bd38      	pop	{r3, r4, r5, pc}
 800edce:	bf00      	nop
 800edd0:	20000ac4 	.word	0x20000ac4

0800edd4 <_malloc_r>:
 800edd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edd6:	1ccd      	adds	r5, r1, #3
 800edd8:	f025 0503 	bic.w	r5, r5, #3
 800eddc:	3508      	adds	r5, #8
 800edde:	2d0c      	cmp	r5, #12
 800ede0:	bf38      	it	cc
 800ede2:	250c      	movcc	r5, #12
 800ede4:	2d00      	cmp	r5, #0
 800ede6:	4606      	mov	r6, r0
 800ede8:	db01      	blt.n	800edee <_malloc_r+0x1a>
 800edea:	42a9      	cmp	r1, r5
 800edec:	d903      	bls.n	800edf6 <_malloc_r+0x22>
 800edee:	230c      	movs	r3, #12
 800edf0:	6033      	str	r3, [r6, #0]
 800edf2:	2000      	movs	r0, #0
 800edf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edf6:	f000 f89d 	bl	800ef34 <__malloc_lock>
 800edfa:	4921      	ldr	r1, [pc, #132]	; (800ee80 <_malloc_r+0xac>)
 800edfc:	680a      	ldr	r2, [r1, #0]
 800edfe:	4614      	mov	r4, r2
 800ee00:	b99c      	cbnz	r4, 800ee2a <_malloc_r+0x56>
 800ee02:	4f20      	ldr	r7, [pc, #128]	; (800ee84 <_malloc_r+0xb0>)
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	b923      	cbnz	r3, 800ee12 <_malloc_r+0x3e>
 800ee08:	4621      	mov	r1, r4
 800ee0a:	4630      	mov	r0, r6
 800ee0c:	f000 f83c 	bl	800ee88 <_sbrk_r>
 800ee10:	6038      	str	r0, [r7, #0]
 800ee12:	4629      	mov	r1, r5
 800ee14:	4630      	mov	r0, r6
 800ee16:	f000 f837 	bl	800ee88 <_sbrk_r>
 800ee1a:	1c43      	adds	r3, r0, #1
 800ee1c:	d123      	bne.n	800ee66 <_malloc_r+0x92>
 800ee1e:	230c      	movs	r3, #12
 800ee20:	4630      	mov	r0, r6
 800ee22:	6033      	str	r3, [r6, #0]
 800ee24:	f000 f88c 	bl	800ef40 <__malloc_unlock>
 800ee28:	e7e3      	b.n	800edf2 <_malloc_r+0x1e>
 800ee2a:	6823      	ldr	r3, [r4, #0]
 800ee2c:	1b5b      	subs	r3, r3, r5
 800ee2e:	d417      	bmi.n	800ee60 <_malloc_r+0x8c>
 800ee30:	2b0b      	cmp	r3, #11
 800ee32:	d903      	bls.n	800ee3c <_malloc_r+0x68>
 800ee34:	6023      	str	r3, [r4, #0]
 800ee36:	441c      	add	r4, r3
 800ee38:	6025      	str	r5, [r4, #0]
 800ee3a:	e004      	b.n	800ee46 <_malloc_r+0x72>
 800ee3c:	6863      	ldr	r3, [r4, #4]
 800ee3e:	42a2      	cmp	r2, r4
 800ee40:	bf0c      	ite	eq
 800ee42:	600b      	streq	r3, [r1, #0]
 800ee44:	6053      	strne	r3, [r2, #4]
 800ee46:	4630      	mov	r0, r6
 800ee48:	f000 f87a 	bl	800ef40 <__malloc_unlock>
 800ee4c:	f104 000b 	add.w	r0, r4, #11
 800ee50:	1d23      	adds	r3, r4, #4
 800ee52:	f020 0007 	bic.w	r0, r0, #7
 800ee56:	1ac2      	subs	r2, r0, r3
 800ee58:	d0cc      	beq.n	800edf4 <_malloc_r+0x20>
 800ee5a:	1a1b      	subs	r3, r3, r0
 800ee5c:	50a3      	str	r3, [r4, r2]
 800ee5e:	e7c9      	b.n	800edf4 <_malloc_r+0x20>
 800ee60:	4622      	mov	r2, r4
 800ee62:	6864      	ldr	r4, [r4, #4]
 800ee64:	e7cc      	b.n	800ee00 <_malloc_r+0x2c>
 800ee66:	1cc4      	adds	r4, r0, #3
 800ee68:	f024 0403 	bic.w	r4, r4, #3
 800ee6c:	42a0      	cmp	r0, r4
 800ee6e:	d0e3      	beq.n	800ee38 <_malloc_r+0x64>
 800ee70:	1a21      	subs	r1, r4, r0
 800ee72:	4630      	mov	r0, r6
 800ee74:	f000 f808 	bl	800ee88 <_sbrk_r>
 800ee78:	3001      	adds	r0, #1
 800ee7a:	d1dd      	bne.n	800ee38 <_malloc_r+0x64>
 800ee7c:	e7cf      	b.n	800ee1e <_malloc_r+0x4a>
 800ee7e:	bf00      	nop
 800ee80:	20000ac4 	.word	0x20000ac4
 800ee84:	20000ac8 	.word	0x20000ac8

0800ee88 <_sbrk_r>:
 800ee88:	b538      	push	{r3, r4, r5, lr}
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	4d05      	ldr	r5, [pc, #20]	; (800eea4 <_sbrk_r+0x1c>)
 800ee8e:	4604      	mov	r4, r0
 800ee90:	4608      	mov	r0, r1
 800ee92:	602b      	str	r3, [r5, #0]
 800ee94:	f7f4 fcde 	bl	8003854 <_sbrk>
 800ee98:	1c43      	adds	r3, r0, #1
 800ee9a:	d102      	bne.n	800eea2 <_sbrk_r+0x1a>
 800ee9c:	682b      	ldr	r3, [r5, #0]
 800ee9e:	b103      	cbz	r3, 800eea2 <_sbrk_r+0x1a>
 800eea0:	6023      	str	r3, [r4, #0]
 800eea2:	bd38      	pop	{r3, r4, r5, pc}
 800eea4:	20000ae0 	.word	0x20000ae0

0800eea8 <_raise_r>:
 800eea8:	291f      	cmp	r1, #31
 800eeaa:	b538      	push	{r3, r4, r5, lr}
 800eeac:	4604      	mov	r4, r0
 800eeae:	460d      	mov	r5, r1
 800eeb0:	d904      	bls.n	800eebc <_raise_r+0x14>
 800eeb2:	2316      	movs	r3, #22
 800eeb4:	6003      	str	r3, [r0, #0]
 800eeb6:	f04f 30ff 	mov.w	r0, #4294967295
 800eeba:	bd38      	pop	{r3, r4, r5, pc}
 800eebc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eebe:	b112      	cbz	r2, 800eec6 <_raise_r+0x1e>
 800eec0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eec4:	b94b      	cbnz	r3, 800eeda <_raise_r+0x32>
 800eec6:	4620      	mov	r0, r4
 800eec8:	f000 f830 	bl	800ef2c <_getpid_r>
 800eecc:	462a      	mov	r2, r5
 800eece:	4601      	mov	r1, r0
 800eed0:	4620      	mov	r0, r4
 800eed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eed6:	f000 b817 	b.w	800ef08 <_kill_r>
 800eeda:	2b01      	cmp	r3, #1
 800eedc:	d00a      	beq.n	800eef4 <_raise_r+0x4c>
 800eede:	1c59      	adds	r1, r3, #1
 800eee0:	d103      	bne.n	800eeea <_raise_r+0x42>
 800eee2:	2316      	movs	r3, #22
 800eee4:	6003      	str	r3, [r0, #0]
 800eee6:	2001      	movs	r0, #1
 800eee8:	e7e7      	b.n	800eeba <_raise_r+0x12>
 800eeea:	2400      	movs	r4, #0
 800eeec:	4628      	mov	r0, r5
 800eeee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eef2:	4798      	blx	r3
 800eef4:	2000      	movs	r0, #0
 800eef6:	e7e0      	b.n	800eeba <_raise_r+0x12>

0800eef8 <raise>:
 800eef8:	4b02      	ldr	r3, [pc, #8]	; (800ef04 <raise+0xc>)
 800eefa:	4601      	mov	r1, r0
 800eefc:	6818      	ldr	r0, [r3, #0]
 800eefe:	f7ff bfd3 	b.w	800eea8 <_raise_r>
 800ef02:	bf00      	nop
 800ef04:	20000010 	.word	0x20000010

0800ef08 <_kill_r>:
 800ef08:	b538      	push	{r3, r4, r5, lr}
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	4d06      	ldr	r5, [pc, #24]	; (800ef28 <_kill_r+0x20>)
 800ef0e:	4604      	mov	r4, r0
 800ef10:	4608      	mov	r0, r1
 800ef12:	4611      	mov	r1, r2
 800ef14:	602b      	str	r3, [r5, #0]
 800ef16:	f7f4 fc82 	bl	800381e <_kill>
 800ef1a:	1c43      	adds	r3, r0, #1
 800ef1c:	d102      	bne.n	800ef24 <_kill_r+0x1c>
 800ef1e:	682b      	ldr	r3, [r5, #0]
 800ef20:	b103      	cbz	r3, 800ef24 <_kill_r+0x1c>
 800ef22:	6023      	str	r3, [r4, #0]
 800ef24:	bd38      	pop	{r3, r4, r5, pc}
 800ef26:	bf00      	nop
 800ef28:	20000ae0 	.word	0x20000ae0

0800ef2c <_getpid_r>:
 800ef2c:	f7f4 bc70 	b.w	8003810 <_getpid>

0800ef30 <__retarget_lock_acquire_recursive>:
 800ef30:	4770      	bx	lr

0800ef32 <__retarget_lock_release_recursive>:
 800ef32:	4770      	bx	lr

0800ef34 <__malloc_lock>:
 800ef34:	4801      	ldr	r0, [pc, #4]	; (800ef3c <__malloc_lock+0x8>)
 800ef36:	f7ff bffb 	b.w	800ef30 <__retarget_lock_acquire_recursive>
 800ef3a:	bf00      	nop
 800ef3c:	20000ad8 	.word	0x20000ad8

0800ef40 <__malloc_unlock>:
 800ef40:	4801      	ldr	r0, [pc, #4]	; (800ef48 <__malloc_unlock+0x8>)
 800ef42:	f7ff bff6 	b.w	800ef32 <__retarget_lock_release_recursive>
 800ef46:	bf00      	nop
 800ef48:	20000ad8 	.word	0x20000ad8

0800ef4c <_init>:
 800ef4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef4e:	bf00      	nop
 800ef50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef52:	bc08      	pop	{r3}
 800ef54:	469e      	mov	lr, r3
 800ef56:	4770      	bx	lr

0800ef58 <_fini>:
 800ef58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef5a:	bf00      	nop
 800ef5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef5e:	bc08      	pop	{r3}
 800ef60:	469e      	mov	lr, r3
 800ef62:	4770      	bx	lr
