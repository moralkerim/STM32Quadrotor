
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010620  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa4  08010730  08010730  00020730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080111d4  080111d4  00030080  2**0
                  CONTENTS
  4 .ARM          00000000  080111d4  080111d4  00030080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080111d4  080111d4  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080111d4  080111d4  000211d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080111dc  080111dc  000211dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080111e4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a90  20000080  08011264  00030080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001b10  08011264  00031b10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bc87  00000000  00000000  000300a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005484  00000000  00000000  0005bd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  000611b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001670  00000000  00000000  000629c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e1ba  00000000  00000000  00064038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef18  00000000  00000000  000821f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096bec  00000000  00000000  000a110a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00137cf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007114  00000000  00000000  00137d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08010718 	.word	0x08010718

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08010718 	.word	0x08010718

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpun>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010cc:	d102      	bne.n	80010d4 <__aeabi_fcmpun+0x14>
 80010ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010d2:	d108      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d8:	d102      	bne.n	80010e0 <__aeabi_fcmpun+0x20>
 80010da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010de:	d102      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0001 	mov.w	r0, #1
 80010ea:	4770      	bx	lr

080010ec <__aeabi_f2iz>:
 80010ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010f4:	d30f      	bcc.n	8001116 <__aeabi_f2iz+0x2a>
 80010f6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010fe:	d90d      	bls.n	800111c <__aeabi_f2iz+0x30>
 8001100:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001108:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800110c:	fa23 f002 	lsr.w	r0, r3, r2
 8001110:	bf18      	it	ne
 8001112:	4240      	negne	r0, r0
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr
 800111c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001120:	d101      	bne.n	8001126 <__aeabi_f2iz+0x3a>
 8001122:	0242      	lsls	r2, r0, #9
 8001124:	d105      	bne.n	8001132 <__aeabi_f2iz+0x46>
 8001126:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800112a:	bf08      	it	eq
 800112c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr

08001138 <__aeabi_f2uiz>:
 8001138:	0042      	lsls	r2, r0, #1
 800113a:	d20e      	bcs.n	800115a <__aeabi_f2uiz+0x22>
 800113c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001140:	d30b      	bcc.n	800115a <__aeabi_f2uiz+0x22>
 8001142:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001146:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114a:	d409      	bmi.n	8001160 <__aeabi_f2uiz+0x28>
 800114c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001150:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001154:	fa23 f002 	lsr.w	r0, r3, r2
 8001158:	4770      	bx	lr
 800115a:	f04f 0000 	mov.w	r0, #0
 800115e:	4770      	bx	lr
 8001160:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001164:	d101      	bne.n	800116a <__aeabi_f2uiz+0x32>
 8001166:	0242      	lsls	r2, r0, #9
 8001168:	d102      	bne.n	8001170 <__aeabi_f2uiz+0x38>
 800116a:	f04f 30ff 	mov.w	r0, #4294967295
 800116e:	4770      	bx	lr
 8001170:	f04f 0000 	mov.w	r0, #0
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize() {
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af04      	add	r7, sp, #16
    devAddr = HMC5883L_DEFAULT_ADDRESS << 1;
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HMC5883L_initialize+0x44>)
 8001180:	223c      	movs	r2, #60	; 0x3c
 8001182:	701a      	strb	r2, [r3, #0]
    // write CONFIG_A register
    uint8_t config = (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
 8001184:	2378      	movs	r3, #120	; 0x78
 8001186:	71fb      	strb	r3, [r7, #7]
            		 (HMC5883L_RATE_75     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
					 (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1));
    HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_CONFIG_A, 1, &config, 1, I2C_TIMEOUT);
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HMC5883L_initialize+0x44>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b299      	uxth	r1, r3
 800118e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001192:	9302      	str	r3, [sp, #8]
 8001194:	2301      	movs	r3, #1
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2301      	movs	r3, #1
 800119e:	2200      	movs	r2, #0
 80011a0:	4807      	ldr	r0, [pc, #28]	; (80011c0 <HMC5883L_initialize+0x48>)
 80011a2:	f005 fe4b 	bl	8006e3c <HAL_I2C_Mem_Write>

    // write CONFIG_B register
    HMC5883L_setGain(HMC5883L_GAIN_1090);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 f80c 	bl	80011c4 <HMC5883L_setGain>

    // write MODE register
    HMC5883L_setMode(HMC5883L_MODE_CONTINUOUS);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f000 f829 	bl	8001204 <HMC5883L_setMode>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000009c 	.word	0x2000009c
 80011c0:	200017e8 	.word	0x200017e8

080011c4 <HMC5883L_setGain>:
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */

void HMC5883L_setGain(uint8_t gain) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af04      	add	r7, sp, #16
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
	gain = gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	015b      	lsls	r3, r3, #5
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_CONFIG_B, 1, &gain, 1, I2C_TIMEOUT);
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HMC5883L_setGain+0x38>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b299      	uxth	r1, r3
 80011dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011e0:	9302      	str	r3, [sp, #8]
 80011e2:	2301      	movs	r3, #1
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	2201      	movs	r2, #1
 80011ee:	4804      	ldr	r0, [pc, #16]	; (8001200 <HMC5883L_setGain+0x3c>)
 80011f0:	f005 fe24 	bl	8006e3c <HAL_I2C_Mem_Write>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	2000009c 	.word	0x2000009c
 8001200:	200017e8 	.word	0x200017e8

08001204 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af04      	add	r7, sp, #16
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
	newMode = newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_MODE, 1, &newMode, 1, I2C_TIMEOUT);
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HMC5883L_setMode+0x3c>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b299      	uxth	r1, r3
 8001218:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800121c:	9302      	str	r3, [sp, #8]
 800121e:	2301      	movs	r3, #1
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2301      	movs	r3, #1
 8001228:	2202      	movs	r2, #2
 800122a:	4806      	ldr	r0, [pc, #24]	; (8001244 <HMC5883L_setMode+0x40>)
 800122c:	f005 fe06 	bl	8006e3c <HAL_I2C_Mem_Write>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 8001230:	79fa      	ldrb	r2, [r7, #7]
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HMC5883L_setMode+0x44>)
 8001234:	701a      	strb	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000009c 	.word	0x2000009c
 8001244:	200017e8 	.word	0x200017e8
 8001248:	200000a6 	.word	0x200000a6

0800124c <HMC5883L_getMagData>:
 * @param x 16-bit signed integer container for X-axis heading
 * @param y 16-bit signed integer container for Y-axis heading
 * @param z 16-bit signed integer container for Z-axis heading
 * @see HMC5883L_RA_DATAX_H
 */
void HMC5883L_getMagData(int16_t *x, int16_t *y, int16_t *z) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af04      	add	r7, sp, #16
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, devAddr, HMC5883L_RA_DATAX_H, 1, buffer, 6, I2C_TIMEOUT);
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HMC5883L_getMagData+0x84>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b299      	uxth	r1, r3
 800125e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	2306      	movs	r3, #6
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HMC5883L_getMagData+0x88>)
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	4819      	ldr	r0, [pc, #100]	; (80012d8 <HMC5883L_getMagData+0x8c>)
 8001272:	f005 fedd 	bl	8007030 <HAL_I2C_Mem_Read>
    if (mode == HMC5883L_MODE_SINGLE) HMC5883L_setMode(HMC5883L_MODE_SINGLE);
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HMC5883L_getMagData+0x90>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d102      	bne.n	8001284 <HMC5883L_getMagData+0x38>
 800127e:	2001      	movs	r0, #1
 8001280:	f7ff ffc0 	bl	8001204 <HMC5883L_setMode>
    *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HMC5883L_getMagData+0x88>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HMC5883L_getMagData+0x88>)
 800128e:	785b      	ldrb	r3, [r3, #1]
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21a      	sxth	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[4]) << 8) | buffer[5];
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HMC5883L_getMagData+0x88>)
 800129c:	791b      	ldrb	r3, [r3, #4]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <HMC5883L_getMagData+0x88>)
 80012a4:	795b      	ldrb	r3, [r3, #5]
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[2]) << 8) | buffer[3];
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HMC5883L_getMagData+0x88>)
 80012b2:	789b      	ldrb	r3, [r3, #2]
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HMC5883L_getMagData+0x88>)
 80012ba:	78db      	ldrb	r3, [r3, #3]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	801a      	strh	r2, [r3, #0]
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000009c 	.word	0x2000009c
 80012d4:	200000a0 	.word	0x200000a0
 80012d8:	200017e8 	.word	0x200017e8
 80012dc:	200000a6 	.word	0x200000a6

080012e0 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <Ringbuf_init+0x38>)
 80012e6:	4a0d      	ldr	r2, [pc, #52]	; (800131c <Ringbuf_init+0x3c>)
 80012e8:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <Ringbuf_init+0x40>)
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <Ringbuf_init+0x44>)
 80012ee:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80012f0:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <Ringbuf_init+0x48>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	695a      	ldr	r2, [r3, #20]
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <Ringbuf_init+0x48>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0201 	orr.w	r2, r2, #1
 80012fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <Ringbuf_init+0x48>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <Ringbuf_init+0x48>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0220 	orr.w	r2, r2, #32
 800130e:	60da      	str	r2, [r3, #12]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	200017e0 	.word	0x200017e0
 800131c:	200000a8 	.word	0x200000a8
 8001320:	200017dc 	.word	0x200017dc
 8001324:	200004b0 	.word	0x200004b0
 8001328:	200019b4 	.word	0x200019b4

0800132c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800133e:	3301      	adds	r3, #1
 8001340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001344:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	429a      	cmp	r2, r3
 8001350:	d009      	beq.n	8001366 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	79f9      	ldrb	r1, [r7, #7]
 800135c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  }
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <Uart_isr>:

}


void Uart_isr (UART_HandleTypeDef *huart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f003 0320 	and.w	r3, r3, #32
 800138e:	2b00      	cmp	r3, #0
 8001390:	d013      	beq.n	80013ba <Uart_isr+0x4a>
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	f003 0320 	and.w	r3, r3, #32
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00e      	beq.n	80013ba <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <Uart_isr+0xb4>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ffba 	bl	800132c <store_char>
        return;
 80013b8:	e031      	b.n	800141e <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d02c      	beq.n	800141e <Uart_isr+0xae>
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d027      	beq.n	800141e <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <Uart_isr+0xb8>)
 80013d0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <Uart_isr+0xb8>)
 80013d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80013da:	429a      	cmp	r2, r3
 80013dc:	d108      	bne.n	80013f0 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013ec:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80013ee:	e015      	b.n	800141c <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <Uart_isr+0xb8>)
 80013f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80013f6:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <Uart_isr+0xb8>)
 80013f8:	5cd3      	ldrb	r3, [r2, r3]
 80013fa:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <Uart_isr+0xb8>)
 80013fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001402:	3301      	adds	r3, #1
 8001404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <Uart_isr+0xb8>)
 800140a:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    	      huart->Instance->SR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	7bba      	ldrb	r2, [r7, #14]
 800141a:	605a      	str	r2, [r3, #4]
    	return;
 800141c:	bf00      	nop
    }
}
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200017e0 	.word	0x200017e0
 8001428:	200004b0 	.word	0x200004b0

0800142c <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8001436:	2300      	movs	r3, #0
 8001438:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 800143a:	2301      	movs	r3, #1
 800143c:	9302      	str	r3, [sp, #8]
 800143e:	2301      	movs	r3, #1
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	1dbb      	adds	r3, r7, #6
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2301      	movs	r3, #1
 8001448:	22d0      	movs	r2, #208	; 0xd0
 800144a:	21ef      	movs	r1, #239	; 0xef
 800144c:	4806      	ldr	r0, [pc, #24]	; (8001468 <read_chip_id+0x3c>)
 800144e:	f005 fdef 	bl	8007030 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	2b55      	cmp	r3, #85	; 0x55
 8001456:	d001      	beq.n	800145c <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8001458:	2301      	movs	r3, #1
 800145a:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 800145c:	79fb      	ldrb	r3, [r7, #7]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200017e8 	.word	0x200017e8

0800146c <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af04      	add	r7, sp, #16
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8001478:	2300      	movs	r3, #0
 800147a:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d81a      	bhi.n	80014b8 <set_oss+0x4c>
 8001482:	a201      	add	r2, pc, #4	; (adr r2, 8001488 <set_oss+0x1c>)
 8001484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001488:	08001499 	.word	0x08001499
 800148c:	080014a1 	.word	0x080014a1
 8001490:	080014a9 	.word	0x080014a9
 8001494:	080014b1 	.word	0x080014b1
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2205      	movs	r2, #5
 800149c:	705a      	strb	r2, [r3, #1]
			break;
 800149e:	e00f      	b.n	80014c0 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2208      	movs	r2, #8
 80014a4:	705a      	strb	r2, [r3, #1]
			break;
 80014a6:	e00b      	b.n	80014c0 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	220e      	movs	r2, #14
 80014ac:	705a      	strb	r2, [r3, #1]
			break;
 80014ae:	e007      	b.n	80014c0 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	221a      	movs	r2, #26
 80014b4:	705a      	strb	r2, [r3, #1]
			break;
 80014b6:	e003      	b.n	80014c0 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2208      	movs	r2, #8
 80014bc:	705a      	strb	r2, [r3, #1]
			break;
 80014be:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	78fa      	ldrb	r2, [r7, #3]
 80014c4:	701a      	strb	r2, [r3, #0]

	//BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));

	ratio = (ratio & 0x3) << 6;
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	019b      	lsls	r3, r3, #6
 80014ca:	70fb      	strb	r3, [r7, #3]
	in_buff[1] = ratio;
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 80014d0:	2301      	movs	r3, #1
 80014d2:	9302      	str	r3, [sp, #8]
 80014d4:	2302      	movs	r3, #2
 80014d6:	9301      	str	r3, [sp, #4]
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2301      	movs	r3, #1
 80014e0:	22f4      	movs	r2, #244	; 0xf4
 80014e2:	21ee      	movs	r1, #238	; 0xee
 80014e4:	4803      	ldr	r0, [pc, #12]	; (80014f4 <set_oss+0x88>)
 80014e6:	f005 fca9 	bl	8006e3c <HAL_I2C_Mem_Write>
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200017e8 	.word	0x200017e8

080014f8 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08e      	sub	sp, #56	; 0x38
 80014fc:	af04      	add	r7, sp, #16
 80014fe:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8001500:	2300      	movs	r3, #0
 8001502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8001520:	2301      	movs	r3, #1
 8001522:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 8001526:	2301      	movs	r3, #1
 8001528:	9302      	str	r3, [sp, #8]
 800152a:	2316      	movs	r3, #22
 800152c:	9301      	str	r3, [sp, #4]
 800152e:	f107 030c 	add.w	r3, r7, #12
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2301      	movs	r3, #1
 8001536:	22aa      	movs	r2, #170	; 0xaa
 8001538:	21ef      	movs	r1, #239	; 0xef
 800153a:	4828      	ldr	r0, [pc, #160]	; (80015dc <read_calib_data+0xe4>)
 800153c:	f005 fd78 	bl	8007030 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001540:	2300      	movs	r3, #0
 8001542:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001546:	e03e      	b.n	80015c6 <read_calib_data+0xce>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 8001548:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001552:	4413      	add	r3, r2
 8001554:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	b219      	sxth	r1, r3
 800155c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001560:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001564:	4413      	add	r3, r2
 8001566:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800156a:	b21a      	sxth	r2, r3
 800156c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	4403      	add	r3, r0
 8001576:	430a      	orrs	r2, r1
 8001578:	b212      	sxth	r2, r2
 800157a:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 800157c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf0c      	ite	eq
 800158e:	2301      	moveq	r3, #1
 8001590:	2300      	movne	r3, #0
 8001592:	b2da      	uxtb	r2, r3
 8001594:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	440b      	add	r3, r1
 800159e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a6:	bf0c      	ite	eq
 80015a8:	2301      	moveq	r3, #1
 80015aa:	2300      	movne	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <read_calib_data+0xc4>
		{
			ret_val = GET_CALIB_ERR;
 80015b6:	2302      	movs	r3, #2
 80015b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80015bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015c0:	3301      	adds	r3, #1
 80015c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015ca:	2b0b      	cmp	r3, #11
 80015cc:	d9bc      	bls.n	8001548 <read_calib_data+0x50>
		}
	}

	return ret_val;
 80015ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3728      	adds	r7, #40	; 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200017e8 	.word	0x200017e8

080015e0 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2204      	movs	r2, #4
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f00e fc5e 	bl	800feb0 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 80015f4:	687c      	ldr	r4, [r7, #4]
 80015f6:	f7ff ff19 	bl	800142c <read_chip_id>
 80015fa:	4603      	mov	r3, r0
 80015fc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp->err = read_calib_data ((short *)&bmp->calib);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	687c      	ldr	r4, [r7, #4]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff77 	bl	80014f8 <read_calib_data>
 800160a:	4603      	mov	r3, r0
 800160c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3338      	adds	r3, #56	; 0x38
 8001614:	2101      	movs	r1, #1
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ff28 	bl	800146c <set_oss>
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	bd90      	pop	{r4, r7, pc}

08001624 <write_ut>:

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
}

void write_ut (void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
	out_buff[0] = BMP_SET_TEMP_CONV;
 800162a:	232e      	movs	r3, #46	; 0x2e
 800162c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800162e:	2301      	movs	r3, #1
 8001630:	9302      	str	r3, [sp, #8]
 8001632:	2301      	movs	r3, #1
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2301      	movs	r3, #1
 800163c:	22f4      	movs	r2, #244	; 0xf4
 800163e:	21ee      	movs	r1, #238	; 0xee
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <write_ut+0x2c>)
 8001642:	f005 fbfb 	bl	8006e3c <HAL_I2C_Mem_Write>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200017e8 	.word	0x200017e8

08001654 <read_ut>:

int32_t read_ut (void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 800165a:	2301      	movs	r3, #1
 800165c:	9302      	str	r3, [sp, #8]
 800165e:	2302      	movs	r3, #2
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2301      	movs	r3, #1
 8001668:	22f6      	movs	r2, #246	; 0xf6
 800166a:	21ef      	movs	r1, #239	; 0xef
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <read_ut+0x30>)
 800166e:	f005 fcdf 	bl	8007030 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 8001672:	793b      	ldrb	r3, [r7, #4]
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	797a      	ldrb	r2, [r7, #5]
 8001678:	4313      	orrs	r3, r2
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200017e8 	.word	0x200017e8

08001688 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
	float temp = 0;
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fd22 	bl	80010ec <__aeabi_f2iz>
 80016a8:	4602      	mov	r2, r0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	895b      	ldrh	r3, [r3, #10]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	8912      	ldrh	r2, [r2, #8]
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	13db      	asrs	r3, r3, #15
 80016ba:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80016c2:	02da      	lsls	r2, r3, #11
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80016ca:	4619      	mov	r1, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	440b      	add	r3, r1
 80016d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80016d4:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	441a      	add	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	3308      	adds	r3, #8
 80016e6:	111b      	asrs	r3, r3, #4
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff facf 	bl	8000c8c <__aeabi_i2f>
 80016ee:	4603      	mov	r3, r0
 80016f0:	490e      	ldr	r1, [pc, #56]	; (800172c <get_temp+0xa4>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fb1e 	bl	8000d34 <__aeabi_fmul>
 80016f8:	4603      	mov	r3, r0
 80016fa:	60fb      	str	r3, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 80016fc:	490c      	ldr	r1, [pc, #48]	; (8001730 <get_temp+0xa8>)
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f7ff fcc0 	bl	8001084 <__aeabi_fcmple>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d106      	bne.n	8001718 <get_temp+0x90>
 800170a:	490a      	ldr	r1, [pc, #40]	; (8001734 <get_temp+0xac>)
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f7ff fcc3 	bl	8001098 <__aeabi_fcmpge>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <get_temp+0x98>
	{
		bmp->err = GET_TEMP_ERR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2203      	movs	r2, #3
 800171c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 8001720:	68fb      	ldr	r3, [r7, #12]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	3dcccccd 	.word	0x3dcccccd
 8001730:	c2200000 	.word	0xc2200000
 8001734:	42aa0000 	.word	0x42aa0000

08001738 <write_up>:
	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
	return up;
}

void write_up (void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af04      	add	r7, sp, #16
	uint8_t out_buff[3] = {0};
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <write_up+0x38>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	803b      	strh	r3, [r7, #0]
 8001744:	2300      	movs	r3, #0
 8001746:	70bb      	strb	r3, [r7, #2]
	long up = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
	out_buff[0] = BMP_SET_PRESS_CONV;
 800174c:	2334      	movs	r3, #52	; 0x34
 800174e:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8001750:	2301      	movs	r3, #1
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	2301      	movs	r3, #1
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	463b      	mov	r3, r7
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2301      	movs	r3, #1
 800175e:	22f4      	movs	r2, #244	; 0xf4
 8001760:	21ee      	movs	r1, #238	; 0xee
 8001762:	4804      	ldr	r0, [pc, #16]	; (8001774 <write_up+0x3c>)
 8001764:	f005 fb6a 	bl	8006e3c <HAL_I2C_Mem_Write>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	08010730 	.word	0x08010730
 8001774:	200017e8 	.word	0x200017e8

08001778 <read_up>:

int32_t read_up (oss_t oss)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af04      	add	r7, sp, #16
 800177e:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <read_up+0x54>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	813b      	strh	r3, [r7, #8]
 8001786:	2300      	movs	r3, #0
 8001788:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
	//Delay BMP_OSS1_CONV_TIME
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 800178e:	2301      	movs	r3, #1
 8001790:	9302      	str	r3, [sp, #8]
 8001792:	2303      	movs	r3, #3
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	f107 0308 	add.w	r3, r7, #8
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2301      	movs	r3, #1
 800179e:	22f6      	movs	r2, #246	; 0xf6
 80017a0:	21ef      	movs	r1, #239	; 0xef
 80017a2:	480b      	ldr	r0, [pc, #44]	; (80017d0 <read_up+0x58>)
 80017a4:	f005 fc44 	bl	8007030 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80017a8:	7a3b      	ldrb	r3, [r7, #8]
 80017aa:	041a      	lsls	r2, r3, #16
 80017ac:	7a7b      	ldrb	r3, [r7, #9]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	4413      	add	r3, r2
 80017b2:	7aba      	ldrb	r2, [r7, #10]
 80017b4:	441a      	add	r2, r3
 80017b6:	793b      	ldrb	r3, [r7, #4]
 80017b8:	f1c3 0308 	rsb	r3, r3, #8
 80017bc:	fa42 f303 	asr.w	r3, r2, r3
 80017c0:	60fb      	str	r3, [r7, #12]
	return up;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	08010730 	.word	0x08010730
 80017d0:	200017e8 	.word	0x200017e8

080017d4 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 80017d4:	b084      	sub	sp, #16
 80017d6:	b480      	push	{r7}
 80017d8:	b089      	sub	sp, #36	; 0x24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80017e0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 80017ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017ee:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80017f2:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 80017f4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80017f8:	461a      	mov	r2, r3
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	fb03 f303 	mul.w	r3, r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	da01      	bge.n	8001808 <get_pressure+0x34>
 8001804:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001808:	131b      	asrs	r3, r3, #12
 800180a:	fb03 f302 	mul.w	r3, r3, r2
 800180e:	2b00      	cmp	r3, #0
 8001810:	da01      	bge.n	8001816 <get_pressure+0x42>
 8001812:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001816:	12db      	asrs	r3, r3, #11
 8001818:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 800181a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800181e:	461a      	mov	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fb03 f302 	mul.w	r3, r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	da01      	bge.n	800182e <get_pressure+0x5a>
 800182a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800182e:	12db      	asrs	r3, r3, #11
 8001830:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 800183a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800183e:	009a      	lsls	r2, r3, #2
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4413      	add	r3, r2
 8001844:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001848:	4093      	lsls	r3, r2
 800184a:	3302      	adds	r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	da00      	bge.n	8001852 <get_pressure+0x7e>
 8001850:	3303      	adds	r3, #3
 8001852:	109b      	asrs	r3, r3, #2
 8001854:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 8001856:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800185a:	461a      	mov	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fb03 f302 	mul.w	r3, r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	da02      	bge.n	800186c <get_pressure+0x98>
 8001866:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800186a:	331f      	adds	r3, #31
 800186c:	135b      	asrs	r3, r3, #13
 800186e:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001870:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001874:	461a      	mov	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	fb03 f303 	mul.w	r3, r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	da01      	bge.n	8001884 <get_pressure+0xb0>
 8001880:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001884:	131b      	asrs	r3, r3, #12
 8001886:	fb03 f302 	mul.w	r3, r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	da02      	bge.n	8001894 <get_pressure+0xc0>
 800188e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001892:	33ff      	adds	r3, #255	; 0xff
 8001894:	141b      	asrs	r3, r3, #16
 8001896:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4413      	add	r3, r2
 800189e:	3302      	adds	r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	da00      	bge.n	80018a6 <get_pressure+0xd2>
 80018a4:	3303      	adds	r3, #3
 80018a6:	109b      	asrs	r3, r3, #2
 80018a8:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 80018aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018ac:	461a      	mov	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80018b4:	fb03 f302 	mul.w	r3, r3, r2
 80018b8:	0bdb      	lsrs	r3, r3, #15
 80018ba:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80018bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018be:	461a      	mov	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80018c8:	4611      	mov	r1, r2
 80018ca:	f24c 3250 	movw	r2, #50000	; 0xc350
 80018ce:	410a      	asrs	r2, r1
 80018d0:	fb02 f303 	mul.w	r3, r2, r3
 80018d4:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	db06      	blt.n	80018ea <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	005a      	lsls	r2, r3, #1
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	e005      	b.n	80018f6 <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	da00      	bge.n	80018fe <get_pressure+0x12a>
 80018fc:	33ff      	adds	r3, #255	; 0xff
 80018fe:	121b      	asrs	r3, r3, #8
 8001900:	461a      	mov	r2, r3
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	2b00      	cmp	r3, #0
 8001906:	da00      	bge.n	800190a <get_pressure+0x136>
 8001908:	33ff      	adds	r3, #255	; 0xff
 800190a:	121b      	asrs	r3, r3, #8
 800190c:	fb03 f302 	mul.w	r3, r3, r2
 8001910:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	f640 32de 	movw	r2, #3038	; 0xbde
 8001918:	fb02 f303 	mul.w	r3, r2, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	da02      	bge.n	8001926 <get_pressure+0x152>
 8001920:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001924:	33ff      	adds	r3, #255	; 0xff
 8001926:	141b      	asrs	r3, r3, #16
 8001928:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <get_pressure+0x194>)
 800192e:	fb02 f303 	mul.w	r3, r2, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	da02      	bge.n	800193c <get_pressure+0x168>
 8001936:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800193a:	33ff      	adds	r3, #255	; 0xff
 800193c:	141b      	asrs	r3, r3, #16
 800193e:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4413      	add	r3, r2
 8001946:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800194a:	2b00      	cmp	r3, #0
 800194c:	da00      	bge.n	8001950 <get_pressure+0x17c>
 800194e:	330f      	adds	r3, #15
 8001950:	111b      	asrs	r3, r3, #4
 8001952:	461a      	mov	r2, r3
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	4413      	add	r3, r2
 8001958:	61fb      	str	r3, [r7, #28]

	return p;
 800195a:	69fb      	ldr	r3, [r7, #28]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3724      	adds	r7, #36	; 0x24
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	b004      	add	sp, #16
 8001966:	4770      	bx	lr
 8001968:	ffffe343 	.word	0xffffe343
 800196c:	00000000 	.word	0x00000000

08001970 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f982 	bl	8000c8c <__aeabi_i2f>
 8001988:	4603      	mov	r3, r0
 800198a:	4923      	ldr	r1, [pc, #140]	; (8001a18 <get_altitude+0xa8>)
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fa85 	bl	8000e9c <__aeabi_fdiv>
 8001992:	4603      	mov	r3, r0
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fd3f 	bl	8000418 <__aeabi_f2d>
 800199a:	a31b      	add	r3, pc, #108	; (adr r3, 8001a08 <get_altitude+0x98>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	f00c fa8e 	bl	800dec0 <pow>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	f04f 0000 	mov.w	r0, #0
 80019ac:	491b      	ldr	r1, [pc, #108]	; (8001a1c <get_altitude+0xac>)
 80019ae:	f7fe fbd3 	bl	8000158 <__aeabi_dsub>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	a315      	add	r3, pc, #84	; (adr r3, 8001a10 <get_altitude+0xa0>)
 80019bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c0:	f7fe fd82 	bl	80004c8 <__aeabi_dmul>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	f7ff f854 	bl	8000a78 <__aeabi_d2f>
 80019d0:	4603      	mov	r3, r0
 80019d2:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 80019d4:	4912      	ldr	r1, [pc, #72]	; (8001a20 <get_altitude+0xb0>)
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7ff fb54 	bl	8001084 <__aeabi_fcmple>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d106      	bne.n	80019f0 <get_altitude+0x80>
 80019e2:	4910      	ldr	r1, [pc, #64]	; (8001a24 <get_altitude+0xb4>)
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff fb57 	bl	8001098 <__aeabi_fcmpge>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <get_altitude+0x88>
	{
		bmp->err = GET_ALTITUDE_ERR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2205      	movs	r2, #5
 80019f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return altitude;
 80019f8:	68fb      	ldr	r3, [r7, #12]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	f3af 8000 	nop.w
 8001a08:	ccd9456c 	.word	0xccd9456c
 8001a0c:	3fc85b95 	.word	0x3fc85b95
 8001a10:	00000000 	.word	0x00000000
 8001a14:	40e5a540 	.word	0x40e5a540
 8001a18:	47c5e680 	.word	0x47c5e680
 8001a1c:	3ff00000 	.word	0x3ff00000
 8001a20:	c3fa0000 	.word	0xc3fa0000
 8001a24:	460ca000 	.word	0x460ca000

08001a28 <get_b_counter>:
int get_b_t_counter(void) {
	return b_t_counter;
}


int get_b_counter(void) {
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
	return b_counter;
 8001a2c:	4b02      	ldr	r3, [pc, #8]	; (8001a38 <get_b_counter+0x10>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	200008b8 	.word	0x200008b8

08001a3c <set_b_counter>:

void set_b_counter(unsigned int CLOCK_RATE) {
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

	b_counter++;
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <set_b_counter+0x30>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <set_b_counter+0x30>)
 8001a4c:	6013      	str	r3, [r2, #0]
	if(b_counter > CLOCK_RATE) {
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <set_b_counter+0x30>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d202      	bcs.n	8001a60 <set_b_counter+0x24>
		b_counter = 0;
 8001a5a:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <set_b_counter+0x30>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
	}
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	200008b8 	.word	0x200008b8

08001a70 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f00c f9b3 	bl	800dde4 <cosf>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f00c f9df 	bl	800de54 <sinf>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <MX_DMA_Init+0x48>)
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	4a0f      	ldr	r2, [pc, #60]	; (8001ae8 <MX_DMA_Init+0x48>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6153      	str	r3, [r2, #20]
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <MX_DMA_Init+0x48>)
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	200f      	movs	r0, #15
 8001ac4:	f004 f8e1 	bl	8005c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001ac8:	200f      	movs	r0, #15
 8001aca:	f004 f8fa 	bl	8005cc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2011      	movs	r0, #17
 8001ad4:	f004 f8d9 	bl	8005c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001ad8:	2011      	movs	r0, #17
 8001ada:	f004 f8f2 	bl	8005cc2 <HAL_NVIC_EnableIRQ>

}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000

08001aec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af2:	f107 0310 	add.w	r3, r7, #16
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b00:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <MX_GPIO_Init+0xfc>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a38      	ldr	r2, [pc, #224]	; (8001be8 <MX_GPIO_Init+0xfc>)
 8001b06:	f043 0310 	orr.w	r3, r3, #16
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <MX_GPIO_Init+0xfc>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b18:	4b33      	ldr	r3, [pc, #204]	; (8001be8 <MX_GPIO_Init+0xfc>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a32      	ldr	r2, [pc, #200]	; (8001be8 <MX_GPIO_Init+0xfc>)
 8001b1e:	f043 0320 	orr.w	r3, r3, #32
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b30      	ldr	r3, [pc, #192]	; (8001be8 <MX_GPIO_Init+0xfc>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0320 	and.w	r3, r3, #32
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <MX_GPIO_Init+0xfc>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a2c      	ldr	r2, [pc, #176]	; (8001be8 <MX_GPIO_Init+0xfc>)
 8001b36:	f043 0304 	orr.w	r3, r3, #4
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <MX_GPIO_Init+0xfc>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b48:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <MX_GPIO_Init+0xfc>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a26      	ldr	r2, [pc, #152]	; (8001be8 <MX_GPIO_Init+0xfc>)
 8001b4e:	f043 0308 	orr.w	r3, r3, #8
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <MX_GPIO_Init+0xfc>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	603b      	str	r3, [r7, #0]
 8001b5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b66:	4821      	ldr	r0, [pc, #132]	; (8001bec <MX_GPIO_Init+0x100>)
 8001b68:	f004 fcae 	bl	80064c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f243 0102 	movw	r1, #12290	; 0x3002
 8001b72:	481f      	ldr	r0, [pc, #124]	; (8001bf0 <MX_GPIO_Init+0x104>)
 8001b74:	f004 fca8 	bl	80064c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b7e:	481d      	ldr	r0, [pc, #116]	; (8001bf4 <MX_GPIO_Init+0x108>)
 8001b80:	f004 fca2 	bl	80064c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2302      	movs	r3, #2
 8001b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4813      	ldr	r0, [pc, #76]	; (8001bec <MX_GPIO_Init+0x100>)
 8001b9e:	f004 fb0f 	bl	80061c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|CSN_Pin|CE_Pin;
 8001ba2:	f243 0302 	movw	r3, #12290	; 0x3002
 8001ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb4:	f107 0310 	add.w	r3, r7, #16
 8001bb8:	4619      	mov	r1, r3
 8001bba:	480d      	ldr	r0, [pc, #52]	; (8001bf0 <MX_GPIO_Init+0x104>)
 8001bbc:	f004 fb00 	bl	80061c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 0310 	add.w	r3, r7, #16
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4806      	ldr	r0, [pc, #24]	; (8001bf4 <MX_GPIO_Init+0x108>)
 8001bda:	f004 faf1 	bl	80061c0 <HAL_GPIO_Init>

}
 8001bde:	bf00      	nop
 8001be0:	3720      	adds	r7, #32
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40011000 	.word	0x40011000
 8001bf0:	40010c00 	.word	0x40010c00
 8001bf4:	40010800 	.word	0x40010800

08001bf8 <request_range>:
static int u_counter;
char read;
char write = 1;
char error;

void request_range(void) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af02      	add	r7, sp, #8



		//char error = 1;

		unsigned char command = 0x51;
 8001bfe:	2351      	movs	r3, #81	; 0x51
 8001c00:	71bb      	strb	r3, [r7, #6]
		char error = HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
 8001c02:	1dba      	adds	r2, r7, #6
 8001c04:	2364      	movs	r3, #100	; 0x64
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	2301      	movs	r3, #1
 8001c0a:	21e0      	movs	r1, #224	; 0xe0
 8001c0c:	4805      	ldr	r0, [pc, #20]	; (8001c24 <request_range+0x2c>)
 8001c0e:	f004 fdb7 	bl	8006780 <HAL_I2C_Master_Transmit>
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
		//HAL_Delay(100);
		write = 0;
 8001c16:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <request_range+0x30>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]

}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	200017e8 	.word	0x200017e8
 8001c28:	20000000 	.word	0x20000000

08001c2c <getRange>:

			//HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
int getRange (void)
				{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af02      	add	r7, sp, #8
		//if (!error) {
			read = 0;
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <getRange+0x34>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
			write = 1;
 8001c38:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <getRange+0x38>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
			unsigned char range[2];
			HAL_I2C_Master_Receive(&hi2c1, 225, range, 2, I2C_TIMEOUT);
 8001c3e:	1d3a      	adds	r2, r7, #4
 8001c40:	2364      	movs	r3, #100	; 0x64
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	2302      	movs	r3, #2
 8001c46:	21e1      	movs	r1, #225	; 0xe1
 8001c48:	4807      	ldr	r0, [pc, #28]	; (8001c68 <getRange+0x3c>)
 8001c4a:	f004 fe97 	bl	800697c <HAL_I2C_Master_Receive>
			return (range[0] << BYTE_SHIFT) | range[1];
 8001c4e:	793b      	ldrb	r3, [r7, #4]
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	797a      	ldrb	r2, [r7, #5]
 8001c54:	4313      	orrs	r3, r2



	//return -1;

}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200017e6 	.word	0x200017e6
 8001c64:	20000000 	.word	0x20000000
 8001c68:	200017e8 	.word	0x200017e8

08001c6c <set_ucounter>:

void set_ucounter(unsigned int CLOCK_RATE) {
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

	u_counter++;
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <set_ucounter+0x30>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <set_ucounter+0x30>)
 8001c7c:	6013      	str	r3, [r2, #0]
	if(u_counter > CLOCK_RATE) {
 8001c7e:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <set_ucounter+0x30>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d202      	bcs.n	8001c90 <set_ucounter+0x24>
		u_counter = 0;
 8001c8a:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <set_ucounter+0x30>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
	}
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	200008bc 	.word	0x200008bc

08001ca0 <get_ucounter>:

int get_ucounter(void) {
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
	return u_counter;
 8001ca4:	4b02      	ldr	r3, [pc, #8]	; (8001cb0 <get_ucounter+0x10>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	200008bc 	.word	0x200008bc

08001cb4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <MX_I2C1_Init+0x50>)
 8001cba:	4a13      	ldr	r2, [pc, #76]	; (8001d08 <MX_I2C1_Init+0x54>)
 8001cbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_I2C1_Init+0x50>)
 8001cc0:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <MX_I2C1_Init+0x58>)
 8001cc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <MX_I2C1_Init+0x50>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <MX_I2C1_Init+0x50>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <MX_I2C1_Init+0x50>)
 8001cd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <MX_I2C1_Init+0x50>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <MX_I2C1_Init+0x50>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ce4:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <MX_I2C1_Init+0x50>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MX_I2C1_Init+0x50>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cf0:	4804      	ldr	r0, [pc, #16]	; (8001d04 <MX_I2C1_Init+0x50>)
 8001cf2:	f004 fc01 	bl	80064f8 <HAL_I2C_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cfc:	f002 fa12 	bl	8004124 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	200017e8 	.word	0x200017e8
 8001d08:	40005400 	.word	0x40005400
 8001d0c:	00061a80 	.word	0x00061a80

08001d10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <HAL_I2C_MspInit+0x70>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d123      	bne.n	8001d78 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d30:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <HAL_I2C_MspInit+0x74>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a13      	ldr	r2, [pc, #76]	; (8001d84 <HAL_I2C_MspInit+0x74>)
 8001d36:	f043 0308 	orr.w	r3, r3, #8
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_I2C_MspInit+0x74>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d48:	23c0      	movs	r3, #192	; 0xc0
 8001d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d4c:	2312      	movs	r3, #18
 8001d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d50:	2303      	movs	r3, #3
 8001d52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	4619      	mov	r1, r3
 8001d5a:	480b      	ldr	r0, [pc, #44]	; (8001d88 <HAL_I2C_MspInit+0x78>)
 8001d5c:	f004 fa30 	bl	80061c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <HAL_I2C_MspInit+0x74>)
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	4a07      	ldr	r2, [pc, #28]	; (8001d84 <HAL_I2C_MspInit+0x74>)
 8001d66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d6a:	61d3      	str	r3, [r2, #28]
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_I2C_MspInit+0x74>)
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d78:	bf00      	nop
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40005400 	.word	0x40005400
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40010c00 	.word	0x40010c00

08001d8c <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <_ZSt4asinf>:
  { return __builtin_asinf(__x); }
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f00c f95f 	bl	800e070 <asinf>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_ZSt4atanf>:
  { return __builtin_atanf(__x); }
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f00b ff01 	bl	800dbcc <atanf>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	6839      	ldr	r1, [r7, #0]
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f00c f96b 	bl	800e0bc <atan2f>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f00c f961 	bl	800e0c0 <sqrtf>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_UART_TxCpltCallback>:
	while(delay_timer < current_time + millis) {
		printf("Do nothing...");
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance) {
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <HAL_UART_TxCpltCallback+0xa0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d140      	bne.n	8001e9e <HAL_UART_TxCpltCallback+0x96>
		char end_char;
		switch(tx_type) {
 8001e1c:	4b23      	ldr	r3, [pc, #140]	; (8001eac <HAL_UART_TxCpltCallback+0xa4>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d013      	beq.n	8001e4c <HAL_UART_TxCpltCallback+0x44>
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	dc3a      	bgt.n	8001e9e <HAL_UART_TxCpltCallback+0x96>
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <HAL_UART_TxCpltCallback+0x2a>
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d017      	beq.n	8001e60 <HAL_UART_TxCpltCallback+0x58>
		    period = sent_time - sent_time_;
		    break;
		}

	}
}
 8001e30:	e035      	b.n	8001e9e <HAL_UART_TxCpltCallback+0x96>
			end_char = 0x01;
 8001e32:	2301      	movs	r3, #1
 8001e34:	72fb      	strb	r3, [r7, #11]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 8001e36:	f107 030b 	add.w	r3, r7, #11
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	481a      	ldr	r0, [pc, #104]	; (8001ea8 <HAL_UART_TxCpltCallback+0xa0>)
 8001e40:	f008 fe5c 	bl	800aafc <HAL_UART_Transmit_DMA>
			tx_type = package;
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_UART_TxCpltCallback+0xa4>)
 8001e46:	2202      	movs	r2, #2
 8001e48:	701a      	strb	r2, [r3, #0]
			break;
 8001e4a:	e028      	b.n	8001e9e <HAL_UART_TxCpltCallback+0x96>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buf, sizeof(struct telem_pack));
 8001e4c:	f240 1289 	movw	r2, #393	; 0x189
 8001e50:	4917      	ldr	r1, [pc, #92]	; (8001eb0 <HAL_UART_TxCpltCallback+0xa8>)
 8001e52:	4815      	ldr	r0, [pc, #84]	; (8001ea8 <HAL_UART_TxCpltCallback+0xa0>)
 8001e54:	f008 fe52 	bl	800aafc <HAL_UART_Transmit_DMA>
			tx_type = stop;
 8001e58:	4b14      	ldr	r3, [pc, #80]	; (8001eac <HAL_UART_TxCpltCallback+0xa4>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
			break;
 8001e5e:	e01e      	b.n	8001e9e <HAL_UART_TxCpltCallback+0x96>
			end_char = 0x04;
 8001e60:	2304      	movs	r3, #4
 8001e62:	72fb      	strb	r3, [r7, #11]
		    HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 8001e64:	f107 030b 	add.w	r3, r7, #11
 8001e68:	2201      	movs	r2, #1
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	480e      	ldr	r0, [pc, #56]	; (8001ea8 <HAL_UART_TxCpltCallback+0xa0>)
 8001e6e:	f008 fe45 	bl	800aafc <HAL_UART_Transmit_DMA>
		    tx_type = start;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <HAL_UART_TxCpltCallback+0xa4>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
		    long int sent_time_ = sent_time;
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_UART_TxCpltCallback+0xac>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]
		    sent_time = HAL_GetTick();
 8001e7e:	f003 fdff 	bl	8005a80 <HAL_GetTick>
 8001e82:	4603      	mov	r3, r0
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_UART_TxCpltCallback+0xac>)
 8001e88:	601a      	str	r2, [r3, #0]
		    period = sent_time - sent_time_;
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <HAL_UART_TxCpltCallback+0xac>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <HAL_UART_TxCpltCallback+0xb0>)
 8001e9a:	701a      	strb	r2, [r3, #0]
		    break;
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20001abc 	.word	0x20001abc
 8001eac:	20001725 	.word	0x20001725
 8001eb0:	20000adc 	.word	0x20000adc
 8001eb4:	20001674 	.word	0x20001674
 8001eb8:	20001724 	.word	0x20001724
 8001ebc:	00000000 	.word	0x00000000

08001ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec2:	b09b      	sub	sp, #108	; 0x6c
 8001ec4:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec6:	f003 fd83 	bl	80059d0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 8001eca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ece:	f003 fde1 	bl	8005a94 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ed2:	f000 f935 	bl	8002140 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ed6:	f7ff fe09 	bl	8001aec <MX_GPIO_Init>
  MX_DMA_Init();
 8001eda:	f7ff fde1 	bl	8001aa0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001ede:	f7ff fee9 	bl	8001cb4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001ee2:	f003 f9c1 	bl	8005268 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001ee6:	f003 f917 	bl	8005118 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001eea:	f003 fbd1 	bl	8005690 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001eee:	f003 fa07 	bl	8005300 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001ef2:	f003 fa75 	bl	80053e0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001ef6:	f003 fba1 	bl	800563c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001efa:	f003 fbf3 	bl	80056e4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001efe:	f002 ff91 	bl	8004e24 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, (uint8_t*)&cam_data, sizeof(cam_data));
 8001f02:	2209      	movs	r2, #9
 8001f04:	4978      	ldr	r1, [pc, #480]	; (80020e8 <main+0x228>)
 8001f06:	4879      	ldr	r0, [pc, #484]	; (80020ec <main+0x22c>)
 8001f08:	f008 fe64 	bl	800abd4 <HAL_UART_Receive_DMA>

  //HAL_UART_Receive_DMA(&huart2, (uint8_t*)ch_rcv_buf, 1);
  //HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(cam_data)-1);
#ifdef UAV1
  MPU6050_Baslat();
 8001f0c:	f000 f968 	bl	80021e0 <_Z14MPU6050_Baslatv>
  bmp_init(&bmp);
 8001f10:	4877      	ldr	r0, [pc, #476]	; (80020f0 <main+0x230>)
 8001f12:	f7ff fb65 	bl	80015e0 <bmp_init>
  HMC5883L_initialize();
 8001f16:	f7ff f92f 	bl	8001178 <HMC5883L_initialize>
#endif
  MotorBaslat();
 8001f1a:	f001 fa9b 	bl	8003454 <_Z11MotorBaslatv>
  //GPSInit();
  HAL_Delay(1000);
 8001f1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f22:	f003 fdb7 	bl	8005a94 <HAL_Delay>

  Ringbuf_init();
 8001f26:	f7ff f9db 	bl	80012e0 <Ringbuf_init>

	/***********NRF Ayarlari****************/

#ifdef UAV1

	NRF24_begin(CE_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 8001f2a:	4c72      	ldr	r4, [pc, #456]	; (80020f4 <main+0x234>)
 8001f2c:	4668      	mov	r0, sp
 8001f2e:	1d23      	adds	r3, r4, #4
 8001f30:	2254      	movs	r2, #84	; 0x54
 8001f32:	4619      	mov	r1, r3
 8001f34:	f00d ffae 	bl	800fe94 <memcpy>
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f42:	486d      	ldr	r0, [pc, #436]	; (80020f8 <main+0x238>)
 8001f44:	f002 fa18 	bl	8004378 <NRF24_begin>
	NRF24_stopListening();
 8001f48:	f002 faf6 	bl	8004538 <NRF24_stopListening>
	NRF24_openWritingPipe(TxpipeAddrs);
 8001f4c:	4b6b      	ldr	r3, [pc, #428]	; (80020fc <main+0x23c>)
 8001f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f52:	4610      	mov	r0, r2
 8001f54:	4619      	mov	r1, r3
 8001f56:	f002 fafb 	bl	8004550 <NRF24_openWritingPipe>
	nrf24_DebugUART_Init(huart3);
 8001f5a:	4e69      	ldr	r6, [pc, #420]	; (8002100 <main+0x240>)
 8001f5c:	466d      	mov	r5, sp
 8001f5e:	f106 0410 	add.w	r4, r6, #16
 8001f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f6a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f6e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001f72:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001f76:	f002 ff39 	bl	8004dec <nrf24_DebugUART_Init>
	NRF24_setAutoAck(false);
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f002 fb6a 	bl	8004654 <NRF24_setAutoAck>
	NRF24_setChannel(34);
 8001f80:	2022      	movs	r0, #34	; 0x22
 8001f82:	f002 fb24 	bl	80045ce <NRF24_setChannel>
	NRF24_setPayloadSize(sizeof(struct pwm));
 8001f86:	2008      	movs	r0, #8
 8001f88:	f002 fb36 	bl	80045f8 <NRF24_setPayloadSize>
	char test_data[] = "Testing...";
 8001f8c:	4a5d      	ldr	r2, [pc, #372]	; (8002104 <main+0x244>)
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f92:	c303      	stmia	r3!, {r0, r1}
 8001f94:	801a      	strh	r2, [r3, #0]
 8001f96:	3302      	adds	r3, #2
 8001f98:	0c12      	lsrs	r2, r2, #16
 8001f9a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)&test_data, sizeof(test_data), 5);
 8001f9c:	1d39      	adds	r1, r7, #4
 8001f9e:	2305      	movs	r3, #5
 8001fa0:	220b      	movs	r2, #11
 8001fa2:	4857      	ldr	r0, [pc, #348]	; (8002100 <main+0x240>)
 8001fa4:	f008 fd18 	bl	800a9d8 <HAL_UART_Transmit>
	printRadioSettings();
 8001fa8:	f002 fc42 	bl	8004830 <printRadioSettings>
	HAL_UART_Transmit(&huart3, (uint8_t*)&test_data, sizeof(test_data), 5);
	printRadioSettings();
#endif

  //Gyro kalibrasyon hatalarını hesapla.
  HAL_Delay(2000);
 8001fac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001fb0:	f003 fd70 	bl	8005a94 <HAL_Delay>

#ifdef UAV1

  GyroXh = GyroErr(GYRO_X_ADDR); GyroYh=GyroErr(GYRO_Y_ADDR); GyroZh=GyroErr(GYRO_Z_ADDR);
 8001fb4:	201d      	movs	r0, #29
 8001fb6:	f001 f9f1 	bl	800339c <_Z7GyroErrh>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4a52      	ldr	r2, [pc, #328]	; (8002108 <main+0x248>)
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	201f      	movs	r0, #31
 8001fc2:	f001 f9eb 	bl	800339c <_Z7GyroErrh>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4a50      	ldr	r2, [pc, #320]	; (800210c <main+0x24c>)
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	2021      	movs	r0, #33	; 0x21
 8001fce:	f001 f9e5 	bl	800339c <_Z7GyroErrh>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4a4e      	ldr	r2, [pc, #312]	; (8002110 <main+0x250>)
 8001fd6:	6013      	str	r3, [r2, #0]
  AccXh = AccErr(ACC_X_ADDR)* .0078; AccYh = AccErr(ACC_Y_ADDR)* .0078; AccZh = AccErr(ACC_Z_ADDR)* .0078;
 8001fd8:	2032      	movs	r0, #50	; 0x32
 8001fda:	f001 fa0d 	bl	80033f8 <_Z6AccErrh>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fa19 	bl	8000418 <__aeabi_f2d>
 8001fe6:	a33e      	add	r3, pc, #248	; (adr r3, 80020e0 <main+0x220>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe fa6c 	bl	80004c8 <__aeabi_dmul>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f7fe fd3e 	bl	8000a78 <__aeabi_d2f>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4a45      	ldr	r2, [pc, #276]	; (8002114 <main+0x254>)
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	2034      	movs	r0, #52	; 0x34
 8002004:	f001 f9f8 	bl	80033f8 <_Z6AccErrh>
 8002008:	4603      	mov	r3, r0
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fa04 	bl	8000418 <__aeabi_f2d>
 8002010:	a333      	add	r3, pc, #204	; (adr r3, 80020e0 <main+0x220>)
 8002012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002016:	f7fe fa57 	bl	80004c8 <__aeabi_dmul>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	f7fe fd29 	bl	8000a78 <__aeabi_d2f>
 8002026:	4603      	mov	r3, r0
 8002028:	4a3b      	ldr	r2, [pc, #236]	; (8002118 <main+0x258>)
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	2036      	movs	r0, #54	; 0x36
 800202e:	f001 f9e3 	bl	80033f8 <_Z6AccErrh>
 8002032:	4603      	mov	r3, r0
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe f9ef 	bl	8000418 <__aeabi_f2d>
 800203a:	a329      	add	r3, pc, #164	; (adr r3, 80020e0 <main+0x220>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	f7fe fa42 	bl	80004c8 <__aeabi_dmul>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	f7fe fd14 	bl	8000a78 <__aeabi_d2f>
 8002050:	4603      	mov	r3, r0
 8002052:	4a32      	ldr	r2, [pc, #200]	; (800211c <main+0x25c>)
 8002054:	6013      	str	r3, [r2, #0]

  //İvmeölçer degerlerini oku

  accX = AccOku(ACC_X_ADDR);
 8002056:	2032      	movs	r0, #50	; 0x32
 8002058:	f000 fe78 	bl	8002d4c <_Z6AccOkuh>
 800205c:	4603      	mov	r3, r0
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe fe14 	bl	8000c8c <__aeabi_i2f>
 8002064:	4603      	mov	r3, r0
 8002066:	4a2e      	ldr	r2, [pc, #184]	; (8002120 <main+0x260>)
 8002068:	6013      	str	r3, [r2, #0]
  accY = AccOku(ACC_Y_ADDR);
 800206a:	2034      	movs	r0, #52	; 0x34
 800206c:	f000 fe6e 	bl	8002d4c <_Z6AccOkuh>
 8002070:	4603      	mov	r3, r0
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fe0a 	bl	8000c8c <__aeabi_i2f>
 8002078:	4603      	mov	r3, r0
 800207a:	4a2a      	ldr	r2, [pc, #168]	; (8002124 <main+0x264>)
 800207c:	6013      	str	r3, [r2, #0]
  accZ = AccOku(ACC_Z_ADDR);
 800207e:	2036      	movs	r0, #54	; 0x36
 8002080:	f000 fe64 	bl	8002d4c <_Z6AccOkuh>
 8002084:	4603      	mov	r3, r0
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fe00 	bl	8000c8c <__aeabi_i2f>
 800208c:	4603      	mov	r3, r0
 800208e:	4a26      	ldr	r2, [pc, #152]	; (8002128 <main+0x268>)
 8002090:	6013      	str	r3, [r2, #0]
#endif
  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 8002092:	4826      	ldr	r0, [pc, #152]	; (800212c <main+0x26c>)
 8002094:	f007 f8fe 	bl	8009294 <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 8002098:	4825      	ldr	r0, [pc, #148]	; (8002130 <main+0x270>)
 800209a:	f007 f8b1 	bl	8009200 <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800209e:	2100      	movs	r1, #0
 80020a0:	4824      	ldr	r0, [pc, #144]	; (8002134 <main+0x274>)
 80020a2:	f007 f999 	bl	80093d8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80020a6:	2104      	movs	r1, #4
 80020a8:	4822      	ldr	r0, [pc, #136]	; (8002134 <main+0x274>)
 80020aa:	f008 fac5 	bl	800a638 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80020ae:	2108      	movs	r1, #8
 80020b0:	4820      	ldr	r0, [pc, #128]	; (8002134 <main+0x274>)
 80020b2:	f008 fac1 	bl	800a638 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80020b6:	210c      	movs	r1, #12
 80020b8:	481e      	ldr	r0, [pc, #120]	; (8002134 <main+0x274>)
 80020ba:	f007 f98d 	bl	80093d8 <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 80020be:	2108      	movs	r1, #8
 80020c0:	481b      	ldr	r0, [pc, #108]	; (8002130 <main+0x270>)
 80020c2:	f007 fa83 	bl	80095cc <HAL_TIM_IC_Start_IT>

  //ESP DMA Başlat.
  char end_char = 0x01;
 80020c6:	2301      	movs	r3, #1
 80020c8:	70fb      	strb	r3, [r7, #3]
  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 80020ca:	1cfb      	adds	r3, r7, #3
 80020cc:	2201      	movs	r2, #1
 80020ce:	4619      	mov	r1, r3
 80020d0:	4819      	ldr	r0, [pc, #100]	; (8002138 <main+0x278>)
 80020d2:	f008 fd13 	bl	800aafc <HAL_UART_Transmit_DMA>
  tx_type = package;
 80020d6:	4b19      	ldr	r3, [pc, #100]	; (800213c <main+0x27c>)
 80020d8:	2202      	movs	r2, #2
 80020da:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80020dc:	e7fe      	b.n	80020dc <main+0x21c>
 80020de:	bf00      	nop
 80020e0:	8e8a71de 	.word	0x8e8a71de
 80020e4:	3f7ff2e4 	.word	0x3f7ff2e4
 80020e8:	200016ec 	.word	0x200016ec
 80020ec:	20001a7c 	.word	0x20001a7c
 80020f0:	2000169c 	.word	0x2000169c
 80020f4:	2000183c 	.word	0x2000183c
 80020f8:	40010c00 	.word	0x40010c00
 80020fc:	20000008 	.word	0x20000008
 8002100:	200019b4 	.word	0x200019b4
 8002104:	08010744 	.word	0x08010744
 8002108:	200008f0 	.word	0x200008f0
 800210c:	200008f4 	.word	0x200008f4
 8002110:	200008f8 	.word	0x200008f8
 8002114:	200008fc 	.word	0x200008fc
 8002118:	20000900 	.word	0x20000900
 800211c:	20000904 	.word	0x20000904
 8002120:	200008cc 	.word	0x200008cc
 8002124:	200008d0 	.word	0x200008d0
 8002128:	200008d4 	.word	0x200008d4
 800212c:	2000196c 	.word	0x2000196c
 8002130:	200018dc 	.word	0x200018dc
 8002134:	20001924 	.word	0x20001924
 8002138:	20001abc 	.word	0x20001abc
 800213c:	20001725 	.word	0x20001725

08002140 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b090      	sub	sp, #64	; 0x40
 8002144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002146:	f107 0318 	add.w	r3, r7, #24
 800214a:	2228      	movs	r2, #40	; 0x28
 800214c:	2100      	movs	r1, #0
 800214e:	4618      	mov	r0, r3
 8002150:	f00d feae 	bl	800feb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	60da      	str	r2, [r3, #12]
 8002160:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002162:	2301      	movs	r3, #1
 8002164:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002166:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800216a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800216c:	2300      	movs	r3, #0
 800216e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002170:	2301      	movs	r3, #1
 8002172:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002174:	2302      	movs	r3, #2
 8002176:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002178:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800217c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800217e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002182:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002184:	f107 0318 	add.w	r3, r7, #24
 8002188:	4618      	mov	r0, r3
 800218a:	f005 fe63 	bl	8007e54 <HAL_RCC_OscConfig>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf14      	ite	ne
 8002194:	2301      	movne	r3, #1
 8002196:	2300      	moveq	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800219e:	f001 ffc1 	bl	8004124 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021a2:	230f      	movs	r3, #15
 80021a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a6:	2302      	movs	r3, #2
 80021a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	2102      	movs	r1, #2
 80021bc:	4618      	mov	r0, r3
 80021be:	f006 f8c9 	bl	8008354 <HAL_RCC_ClockConfig>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf14      	ite	ne
 80021c8:	2301      	movne	r3, #1
 80021ca:	2300      	moveq	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80021d2:	f001 ffa7 	bl	8004124 <Error_Handler>
  }
}
 80021d6:	bf00      	nop
 80021d8:	3740      	adds	r7, #64	; 0x40
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <_Z14MPU6050_Baslatv>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 80021e6:	2300      	movs	r3, #0
 80021e8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 80021ea:	2305      	movs	r3, #5
 80021ec:	9302      	str	r3, [sp, #8]
 80021ee:	2301      	movs	r3, #1
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	1dfb      	adds	r3, r7, #7
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2301      	movs	r3, #1
 80021f8:	223e      	movs	r2, #62	; 0x3e
 80021fa:	21d0      	movs	r1, #208	; 0xd0
 80021fc:	4826      	ldr	r0, [pc, #152]	; (8002298 <_Z14MPU6050_Baslatv+0xb8>)
 80021fe:	f004 fe1d 	bl	8006e3c <HAL_I2C_Mem_Write>
	config = 0x18;
 8002202:	2318      	movs	r3, #24
 8002204:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 250 d/s'ye ayarlandi.
 8002206:	2305      	movs	r3, #5
 8002208:	9302      	str	r3, [sp, #8]
 800220a:	2301      	movs	r3, #1
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	1dfb      	adds	r3, r7, #7
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	2301      	movs	r3, #1
 8002214:	2216      	movs	r2, #22
 8002216:	21d0      	movs	r1, #208	; 0xd0
 8002218:	481f      	ldr	r0, [pc, #124]	; (8002298 <_Z14MPU6050_Baslatv+0xb8>)
 800221a:	f004 fe0f 	bl	8006e3c <HAL_I2C_Mem_Write>
	config = 0x00;
 800221e:	2300      	movs	r3, #0
 8002220:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2d, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 8002222:	2305      	movs	r3, #5
 8002224:	9302      	str	r3, [sp, #8]
 8002226:	2301      	movs	r3, #1
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	1dfb      	adds	r3, r7, #7
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	2301      	movs	r3, #1
 8002230:	222d      	movs	r2, #45	; 0x2d
 8002232:	21a6      	movs	r1, #166	; 0xa6
 8002234:	4818      	ldr	r0, [pc, #96]	; (8002298 <_Z14MPU6050_Baslatv+0xb8>)
 8002236:	f004 fe01 	bl	8006e3c <HAL_I2C_Mem_Write>
	config = 0x08;
 800223a:	2308      	movs	r3, #8
 800223c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2d, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 800223e:	2305      	movs	r3, #5
 8002240:	9302      	str	r3, [sp, #8]
 8002242:	2301      	movs	r3, #1
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	1dfb      	adds	r3, r7, #7
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	2301      	movs	r3, #1
 800224c:	222d      	movs	r2, #45	; 0x2d
 800224e:	21a6      	movs	r1, #166	; 0xa6
 8002250:	4811      	ldr	r0, [pc, #68]	; (8002298 <_Z14MPU6050_Baslatv+0xb8>)
 8002252:	f004 fdf3 	bl	8006e3c <HAL_I2C_Mem_Write>
	config = 0x0D;
 8002256:	230d      	movs	r3, #13
 8002258:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2c, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 800225a:	2305      	movs	r3, #5
 800225c:	9302      	str	r3, [sp, #8]
 800225e:	2301      	movs	r3, #1
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	1dfb      	adds	r3, r7, #7
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2301      	movs	r3, #1
 8002268:	222c      	movs	r2, #44	; 0x2c
 800226a:	21a6      	movs	r1, #166	; 0xa6
 800226c:	480a      	ldr	r0, [pc, #40]	; (8002298 <_Z14MPU6050_Baslatv+0xb8>)
 800226e:	f004 fde5 	bl	8006e3c <HAL_I2C_Mem_Write>
	config = 0x01;
 8002272:	2301      	movs	r3, #1
 8002274:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x31, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 8002276:	2305      	movs	r3, #5
 8002278:	9302      	str	r3, [sp, #8]
 800227a:	2301      	movs	r3, #1
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	1dfb      	adds	r3, r7, #7
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	2301      	movs	r3, #1
 8002284:	2231      	movs	r2, #49	; 0x31
 8002286:	21a6      	movs	r1, #166	; 0xa6
 8002288:	4803      	ldr	r0, [pc, #12]	; (8002298 <_Z14MPU6050_Baslatv+0xb8>)
 800228a:	f004 fdd7 	bl	8006e3c <HAL_I2C_Mem_Write>

	//config = 0x04; //0x04
	//HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_DLPF_REG, 1, &config, 1, 5); //Low Pass Filter 94 Hz'e ayarlandı


}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200017e8 	.word	0x200017e8
 800229c:	00000000 	.word	0x00000000

080022a0 <_Z8MagCalibsss>:



void MagCalib(int16_t MAG_X,int16_t MAG_Y,int16_t MAG_Z) {
 80022a0:	b5b0      	push	{r4, r5, r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	80fb      	strh	r3, [r7, #6]
 80022aa:	460b      	mov	r3, r1
 80022ac:	80bb      	strh	r3, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	807b      	strh	r3, [r7, #2]
	/*
	MAG_X_CALIB = 0.94941*MAG_X - 0.0029894*MAG_Y + 0.0042334*MAG_Z - 163.26;
	MAG_Y_CALIB = 0.94369*MAG_Y - 0.0029894*MAG_X + 0.010705*MAG_Z + 179.65;
	MAG_Z_CALIB = 0.0042334*MAG_X + 0.010705*MAG_Y + 1.1163*MAG_Z - 139.67;
	*/
	MAG_X_CALIB = 0.9655*MAG_X + 0.01389*MAG_Y - 0.01816*MAG_Z + 16.0;
 80022b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe f89c 	bl	80003f4 <__aeabi_i2d>
 80022bc:	a366      	add	r3, pc, #408	; (adr r3, 8002458 <_Z8MagCalibsss+0x1b8>)
 80022be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c2:	f7fe f901 	bl	80004c8 <__aeabi_dmul>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4614      	mov	r4, r2
 80022cc:	461d      	mov	r5, r3
 80022ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe f88e 	bl	80003f4 <__aeabi_i2d>
 80022d8:	a361      	add	r3, pc, #388	; (adr r3, 8002460 <_Z8MagCalibsss+0x1c0>)
 80022da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022de:	f7fe f8f3 	bl	80004c8 <__aeabi_dmul>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4620      	mov	r0, r4
 80022e8:	4629      	mov	r1, r5
 80022ea:	f7fd ff37 	bl	800015c <__adddf3>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	4614      	mov	r4, r2
 80022f4:	461d      	mov	r5, r3
 80022f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe f87a 	bl	80003f4 <__aeabi_i2d>
 8002300:	a359      	add	r3, pc, #356	; (adr r3, 8002468 <_Z8MagCalibsss+0x1c8>)
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fe f8df 	bl	80004c8 <__aeabi_dmul>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4620      	mov	r0, r4
 8002310:	4629      	mov	r1, r5
 8002312:	f7fd ff21 	bl	8000158 <__aeabi_dsub>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4610      	mov	r0, r2
 800231c:	4619      	mov	r1, r3
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	4b5d      	ldr	r3, [pc, #372]	; (8002498 <_Z8MagCalibsss+0x1f8>)
 8002324:	f7fd ff1a 	bl	800015c <__adddf3>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4610      	mov	r0, r2
 800232e:	4619      	mov	r1, r3
 8002330:	f7fe fb7a 	bl	8000a28 <__aeabi_d2iz>
 8002334:	4603      	mov	r3, r0
 8002336:	b21a      	sxth	r2, r3
 8002338:	4b58      	ldr	r3, [pc, #352]	; (800249c <_Z8MagCalibsss+0x1fc>)
 800233a:	801a      	strh	r2, [r3, #0]
	MAG_Y_CALIB = 0.01389*MAG_X + 0.9476*MAG_Y + 0.006714*MAG_Z + 103.3;
 800233c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f857 	bl	80003f4 <__aeabi_i2d>
 8002346:	a346      	add	r3, pc, #280	; (adr r3, 8002460 <_Z8MagCalibsss+0x1c0>)
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f7fe f8bc 	bl	80004c8 <__aeabi_dmul>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4614      	mov	r4, r2
 8002356:	461d      	mov	r5, r3
 8002358:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe f849 	bl	80003f4 <__aeabi_i2d>
 8002362:	a343      	add	r3, pc, #268	; (adr r3, 8002470 <_Z8MagCalibsss+0x1d0>)
 8002364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002368:	f7fe f8ae 	bl	80004c8 <__aeabi_dmul>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4620      	mov	r0, r4
 8002372:	4629      	mov	r1, r5
 8002374:	f7fd fef2 	bl	800015c <__adddf3>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4614      	mov	r4, r2
 800237e:	461d      	mov	r5, r3
 8002380:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe f835 	bl	80003f4 <__aeabi_i2d>
 800238a:	a33b      	add	r3, pc, #236	; (adr r3, 8002478 <_Z8MagCalibsss+0x1d8>)
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	f7fe f89a 	bl	80004c8 <__aeabi_dmul>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4620      	mov	r0, r4
 800239a:	4629      	mov	r1, r5
 800239c:	f7fd fede 	bl	800015c <__adddf3>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4610      	mov	r0, r2
 80023a6:	4619      	mov	r1, r3
 80023a8:	a335      	add	r3, pc, #212	; (adr r3, 8002480 <_Z8MagCalibsss+0x1e0>)
 80023aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ae:	f7fd fed5 	bl	800015c <__adddf3>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4610      	mov	r0, r2
 80023b8:	4619      	mov	r1, r3
 80023ba:	f7fe fb35 	bl	8000a28 <__aeabi_d2iz>
 80023be:	4603      	mov	r3, r0
 80023c0:	b21a      	sxth	r2, r3
 80023c2:	4b37      	ldr	r3, [pc, #220]	; (80024a0 <_Z8MagCalibsss+0x200>)
 80023c4:	801a      	strh	r2, [r3, #0]
	MAG_Z_CALIB = 0.006714*MAG_Y - 0.01816*MAG_X + 1.094*MAG_Z - 8.554;
 80023c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe f812 	bl	80003f4 <__aeabi_i2d>
 80023d0:	a329      	add	r3, pc, #164	; (adr r3, 8002478 <_Z8MagCalibsss+0x1d8>)
 80023d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d6:	f7fe f877 	bl	80004c8 <__aeabi_dmul>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4614      	mov	r4, r2
 80023e0:	461d      	mov	r5, r3
 80023e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe f804 	bl	80003f4 <__aeabi_i2d>
 80023ec:	a31e      	add	r3, pc, #120	; (adr r3, 8002468 <_Z8MagCalibsss+0x1c8>)
 80023ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f2:	f7fe f869 	bl	80004c8 <__aeabi_dmul>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4620      	mov	r0, r4
 80023fc:	4629      	mov	r1, r5
 80023fe:	f7fd feab 	bl	8000158 <__aeabi_dsub>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4614      	mov	r4, r2
 8002408:	461d      	mov	r5, r3
 800240a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fd fff0 	bl	80003f4 <__aeabi_i2d>
 8002414:	a31c      	add	r3, pc, #112	; (adr r3, 8002488 <_Z8MagCalibsss+0x1e8>)
 8002416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241a:	f7fe f855 	bl	80004c8 <__aeabi_dmul>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4620      	mov	r0, r4
 8002424:	4629      	mov	r1, r5
 8002426:	f7fd fe99 	bl	800015c <__adddf3>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4610      	mov	r0, r2
 8002430:	4619      	mov	r1, r3
 8002432:	a317      	add	r3, pc, #92	; (adr r3, 8002490 <_Z8MagCalibsss+0x1f0>)
 8002434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002438:	f7fd fe8e 	bl	8000158 <__aeabi_dsub>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	f7fe faf0 	bl	8000a28 <__aeabi_d2iz>
 8002448:	4603      	mov	r3, r0
 800244a:	b21a      	sxth	r2, r3
 800244c:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <_Z8MagCalibsss+0x204>)
 800244e:	801a      	strh	r2, [r3, #0]
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bdb0      	pop	{r4, r5, r7, pc}
 8002458:	4189374c 	.word	0x4189374c
 800245c:	3feee560 	.word	0x3feee560
 8002460:	3dee7818 	.word	0x3dee7818
 8002464:	3f8c725c 	.word	0x3f8c725c
 8002468:	f861a60d 	.word	0xf861a60d
 800246c:	3f929888 	.word	0x3f929888
 8002470:	3c361134 	.word	0x3c361134
 8002474:	3fee52bd 	.word	0x3fee52bd
 8002478:	a6ce3583 	.word	0xa6ce3583
 800247c:	3f7b8023 	.word	0x3f7b8023
 8002480:	33333333 	.word	0x33333333
 8002484:	4059d333 	.word	0x4059d333
 8002488:	24dd2f1b 	.word	0x24dd2f1b
 800248c:	3ff18106 	.word	0x3ff18106
 8002490:	e353f7cf 	.word	0xe353f7cf
 8002494:	40211ba5 	.word	0x40211ba5
 8002498:	40300000 	.word	0x40300000
 800249c:	20001716 	.word	0x20001716
 80024a0:	20001718 	.word	0x20001718
 80024a4:	2000171a 	.word	0x2000171a

080024a8 <_Z9checkModei>:

void checkMode(int mod_ch) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
	  if(mod_ch < 1400) {
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80024b6:	da07      	bge.n	80024c8 <_Z9checkModei+0x20>

		  controller.mod = STABILIZE;
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <_Z9checkModei+0x58>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
//		  controller.z0 = EKF.alt_gnd;
//		  controller.x0 = EKF.x;
//		  controller.y0 = EKF.y;
		  controller.p_alt.reset();
 80024c0:	4810      	ldr	r0, [pc, #64]	; (8002504 <_Z9checkModei+0x5c>)
 80024c2:	f00b fa1d 	bl	800d900 <_ZN3PID5resetEv>

	  else {
		  //controller.mod = LOITER;
		  controller.mod = STABILIZE;
	  }
}
 80024c6:	e016      	b.n	80024f6 <_Z9checkModei+0x4e>
	  else if (mod_ch >=1400 && mod_ch <1700) {
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80024ce:	db0e      	blt.n	80024ee <_Z9checkModei+0x46>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80024d6:	4293      	cmp	r3, r2
 80024d8:	dc09      	bgt.n	80024ee <_Z9checkModei+0x46>
		  controller.mod = STABILIZE;
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <_Z9checkModei+0x58>)
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		  z0 = controller.p_alt.zi;
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <_Z9checkModei+0x58>)
 80024e4:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 80024e8:	4a07      	ldr	r2, [pc, #28]	; (8002508 <_Z9checkModei+0x60>)
 80024ea:	6013      	str	r3, [r2, #0]
}
 80024ec:	e003      	b.n	80024f6 <_Z9checkModei+0x4e>
		  controller.mod = STABILIZE;
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <_Z9checkModei+0x58>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000fb0 	.word	0x20000fb0
 8002504:	200013b0 	.word	0x200013b0
 8002508:	200016d8 	.word	0x200016d8

0800250c <_Z10CheckSwarmv>:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
		break;
	}
}

void CheckSwarm() {
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
	if(ch[SWARM_CH-1] > 1500) {
 8002510:	4b18      	ldr	r3, [pc, #96]	; (8002574 <_Z10CheckSwarmv+0x68>)
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002518:	4293      	cmp	r3, r2
 800251a:	dd14      	ble.n	8002546 <_Z10CheckSwarmv+0x3a>
		if(swarm_mode != SWARM) {
 800251c:	4b16      	ldr	r3, [pc, #88]	; (8002578 <_Z10CheckSwarmv+0x6c>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d024      	beq.n	800256e <_Z10CheckSwarmv+0x62>
			swarm_mode = SWARM;
 8002524:	4b14      	ldr	r3, [pc, #80]	; (8002578 <_Z10CheckSwarmv+0x6c>)
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]

			controller.swarm = true;
 800252a:	4b14      	ldr	r3, [pc, #80]	; (800257c <_Z10CheckSwarmv+0x70>)
 800252c:	2201      	movs	r2, #1
 800252e:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9

			controller.pid_roll.reset();
 8002532:	4813      	ldr	r0, [pc, #76]	; (8002580 <_Z10CheckSwarmv+0x74>)
 8002534:	f00b f9e4 	bl	800d900 <_ZN3PID5resetEv>
			controller.pid_pitch.reset();
 8002538:	4812      	ldr	r0, [pc, #72]	; (8002584 <_Z10CheckSwarmv+0x78>)
 800253a:	f00b f9e1 	bl	800d900 <_ZN3PID5resetEv>
			controller.pid_yaw.reset();
 800253e:	4812      	ldr	r0, [pc, #72]	; (8002588 <_Z10CheckSwarmv+0x7c>)
 8002540:	f00b f9de 	bl	800d900 <_ZN3PID5resetEv>
			controller.pid_roll.reset();
			controller.pid_pitch.reset();
			controller.pid_yaw.reset();
		}
	}
}
 8002544:	e013      	b.n	800256e <_Z10CheckSwarmv+0x62>
		if(swarm_mode != NORMAL) {
 8002546:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <_Z10CheckSwarmv+0x6c>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00f      	beq.n	800256e <_Z10CheckSwarmv+0x62>
			controller.swarm = false;
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <_Z10CheckSwarmv+0x70>)
 8002550:	2200      	movs	r2, #0
 8002552:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			swarm_mode = NORMAL;
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <_Z10CheckSwarmv+0x6c>)
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
			controller.pid_roll.reset();
 800255c:	4808      	ldr	r0, [pc, #32]	; (8002580 <_Z10CheckSwarmv+0x74>)
 800255e:	f00b f9cf 	bl	800d900 <_ZN3PID5resetEv>
			controller.pid_pitch.reset();
 8002562:	4808      	ldr	r0, [pc, #32]	; (8002584 <_Z10CheckSwarmv+0x78>)
 8002564:	f00b f9cc 	bl	800d900 <_ZN3PID5resetEv>
			controller.pid_yaw.reset();
 8002568:	4807      	ldr	r0, [pc, #28]	; (8002588 <_Z10CheckSwarmv+0x7c>)
 800256a:	f00b f9c9 	bl	800d900 <_ZN3PID5resetEv>
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20001610 	.word	0x20001610
 8002578:	20001726 	.word	0x20001726
 800257c:	20000fb0 	.word	0x20000fb0
 8002580:	20001188 	.word	0x20001188
 8002584:	20001240 	.word	0x20001240
 8002588:	200012f8 	.word	0x200012f8

0800258c <_Z13CheckFailsafev>:

void CheckFailsafe() {
 800258c:	b598      	push	{r3, r4, r7, lr}
 800258e:	af00      	add	r7, sp, #0

	if(armed) {
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <_Z13CheckFailsafev+0xa4>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d048      	beq.n	800262a <_Z13CheckFailsafev+0x9e>
		if(ch[2] < 970 && !in_failsafe) {
 8002598:	4b26      	ldr	r3, [pc, #152]	; (8002634 <_Z13CheckFailsafev+0xa8>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f240 32c9 	movw	r2, #969	; 0x3c9
 80025a0:	4293      	cmp	r3, r2
 80025a2:	dc0d      	bgt.n	80025c0 <_Z13CheckFailsafev+0x34>
 80025a4:	4b24      	ldr	r3, [pc, #144]	; (8002638 <_Z13CheckFailsafev+0xac>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	f083 0301 	eor.w	r3, r3, #1
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <_Z13CheckFailsafev+0x34>
			in_failsafe = true;
 80025b2:	4b21      	ldr	r3, [pc, #132]	; (8002638 <_Z13CheckFailsafev+0xac>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
			Fail_Acc = accXc;
 80025b8:	4b20      	ldr	r3, [pc, #128]	; (800263c <_Z13CheckFailsafev+0xb0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a20      	ldr	r2, [pc, #128]	; (8002640 <_Z13CheckFailsafev+0xb4>)
 80025be:	6013      	str	r3, [r2, #0]
		}

		if(failsafe_counter < 1000) {
 80025c0:	4b20      	ldr	r3, [pc, #128]	; (8002644 <_Z13CheckFailsafev+0xb8>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025c8:	d226      	bcs.n	8002618 <_Z13CheckFailsafev+0x8c>

			if(in_failsafe) { //5 seconds
 80025ca:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <_Z13CheckFailsafev+0xac>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d02b      	beq.n	800262a <_Z13CheckFailsafev+0x9e>
				if(abs(accXc - Fail_Acc) < ACC_FAIL_LIM) {
 80025d2:	4b1a      	ldr	r3, [pc, #104]	; (800263c <_Z13CheckFailsafev+0xb0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a1a      	ldr	r2, [pc, #104]	; (8002640 <_Z13CheckFailsafev+0xb4>)
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe fa9f 	bl	8000b20 <__aeabi_fsub>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fbd1 	bl	8001d8c <_ZSt3absf>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2201      	movs	r2, #1
 80025ee:	4614      	mov	r4, r2
 80025f0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe fd3b 	bl	8001070 <__aeabi_fcmplt>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <_Z13CheckFailsafev+0x78>
 8002600:	2300      	movs	r3, #0
 8002602:	461c      	mov	r4, r3
 8002604:	b2e3      	uxtb	r3, r4
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00f      	beq.n	800262a <_Z13CheckFailsafev+0x9e>
					failsafe_counter++;
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <_Z13CheckFailsafev+0xb8>)
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	3301      	adds	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <_Z13CheckFailsafev+0xb8>)
 8002614:	801a      	strh	r2, [r3, #0]
			failsafe_counter = 0;
		}
	}


}
 8002616:	e008      	b.n	800262a <_Z13CheckFailsafev+0x9e>
			armed = false;
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <_Z13CheckFailsafev+0xa4>)
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
			in_failsafe = false;
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <_Z13CheckFailsafev+0xac>)
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
			failsafe_counter = 0;
 8002624:	4b07      	ldr	r3, [pc, #28]	; (8002644 <_Z13CheckFailsafev+0xb8>)
 8002626:	2200      	movs	r2, #0
 8002628:	801a      	strh	r2, [r3, #0]
}
 800262a:	bf00      	nop
 800262c:	bd98      	pop	{r3, r4, r7, pc}
 800262e:	bf00      	nop
 8002630:	20001679 	.word	0x20001679
 8002634:	20001610 	.word	0x20001610
 8002638:	2000171e 	.word	0x2000171e
 800263c:	200008d8 	.word	0x200008d8
 8002640:	20001720 	.word	0x20001720
 8002644:	2000171c 	.word	0x2000171c

08002648 <_Z9Check_Armv>:


void Check_Arm() {
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
	if(!armed) {
 800264c:	4b27      	ldr	r3, [pc, #156]	; (80026ec <_Z9Check_Armv+0xa4>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	f083 0301 	eor.w	r3, r3, #1
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d045      	beq.n	80026e6 <_Z9Check_Armv+0x9e>
		if((ch[2] < CH3_MIN + 100) && (ch[3] > 1700)) {
 800265a:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <_Z9Check_Armv+0xa8>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f240 424b 	movw	r2, #1099	; 0x44b
 8002662:	4293      	cmp	r3, r2
 8002664:	dc3b      	bgt.n	80026de <_Z9Check_Armv+0x96>
 8002666:	4b22      	ldr	r3, [pc, #136]	; (80026f0 <_Z9Check_Armv+0xa8>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800266e:	4293      	cmp	r3, r2
 8002670:	dd35      	ble.n	80026de <_Z9Check_Armv+0x96>
				if(!arm_start){
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <_Z9Check_Armv+0xac>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	f083 0301 	eor.w	r3, r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 8002680:	f003 f9fe 	bl	8005a80 <HAL_GetTick>
 8002684:	4603      	mov	r3, r0
 8002686:	461a      	mov	r2, r3
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <_Z9Check_Armv+0xb0>)
 800268a:	601a      	str	r2, [r3, #0]
					arm_start = true;
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <_Z9Check_Armv+0xac>)
 800268e:	2201      	movs	r2, #1
 8002690:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 8002692:	f003 f9f5 	bl	8005a80 <HAL_GetTick>
 8002696:	4603      	mov	r3, r0
 8002698:	4a17      	ldr	r2, [pc, #92]	; (80026f8 <_Z9Check_Armv+0xb0>)
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80026a2:	4293      	cmp	r3, r2
 80026a4:	bf8c      	ite	hi
 80026a6:	2301      	movhi	r3, #1
 80026a8:	2300      	movls	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d01a      	beq.n	80026e6 <_Z9Check_Armv+0x9e>
					controller.pid_roll.reset();
 80026b0:	4812      	ldr	r0, [pc, #72]	; (80026fc <_Z9Check_Armv+0xb4>)
 80026b2:	f00b f925 	bl	800d900 <_ZN3PID5resetEv>
					controller.pid_pitch.reset();
 80026b6:	4812      	ldr	r0, [pc, #72]	; (8002700 <_Z9Check_Armv+0xb8>)
 80026b8:	f00b f922 	bl	800d900 <_ZN3PID5resetEv>
					controller.pid_yaw.reset();
 80026bc:	4811      	ldr	r0, [pc, #68]	; (8002704 <_Z9Check_Armv+0xbc>)
 80026be:	f00b f91f 	bl	800d900 <_ZN3PID5resetEv>
					armed = true;
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <_Z9Check_Armv+0xa4>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
					EKF.armed = true;
 80026c8:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <_Z9Check_Armv+0xc0>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
					//SetHome2();
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80026d0:	2201      	movs	r2, #1
 80026d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026d6:	480d      	ldr	r0, [pc, #52]	; (800270c <_Z9Check_Armv+0xc4>)
 80026d8:	f003 fef6 	bl	80064c8 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - arm_timer > 3000) {
 80026dc:	e003      	b.n	80026e6 <_Z9Check_Armv+0x9e>
				}

		}

		else {
			arm_start = false;
 80026de:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <_Z9Check_Armv+0xac>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80026e4:	e7ff      	b.n	80026e6 <_Z9Check_Armv+0x9e>
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20001679 	.word	0x20001679
 80026f0:	20001610 	.word	0x20001610
 80026f4:	20001678 	.word	0x20001678
 80026f8:	2000166c 	.word	0x2000166c
 80026fc:	20001188 	.word	0x20001188
 8002700:	20001240 	.word	0x20001240
 8002704:	200012f8 	.word	0x200012f8
 8002708:	20000c68 	.word	0x20000c68
 800270c:	40010800 	.word	0x40010800

08002710 <_Z12Check_Disarmv>:

void Check_Disarm() {
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
	if(armed) {
 8002714:	4b21      	ldr	r3, [pc, #132]	; (800279c <_Z12Check_Disarmv+0x8c>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d03c      	beq.n	8002796 <_Z12Check_Disarmv+0x86>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 800271c:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <_Z12Check_Disarmv+0x90>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f240 424b 	movw	r2, #1099	; 0x44b
 8002724:	4293      	cmp	r3, r2
 8002726:	dc32      	bgt.n	800278e <_Z12Check_Disarmv+0x7e>
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <_Z12Check_Disarmv+0x90>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f240 424b 	movw	r2, #1099	; 0x44b
 8002730:	4293      	cmp	r3, r2
 8002732:	dc2c      	bgt.n	800278e <_Z12Check_Disarmv+0x7e>
				if(!disarm_start){
 8002734:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <_Z12Check_Disarmv+0x94>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	f083 0301 	eor.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d008      	beq.n	8002754 <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 8002742:	f003 f99d 	bl	8005a80 <HAL_GetTick>
 8002746:	4603      	mov	r3, r0
 8002748:	461a      	mov	r2, r3
 800274a:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <_Z12Check_Disarmv+0x98>)
 800274c:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <_Z12Check_Disarmv+0x94>)
 8002750:	2201      	movs	r2, #1
 8002752:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 8002754:	f003 f994 	bl	8005a80 <HAL_GetTick>
 8002758:	4603      	mov	r3, r0
 800275a:	4a13      	ldr	r2, [pc, #76]	; (80027a8 <_Z12Check_Disarmv+0x98>)
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	1a9b      	subs	r3, r3, r2
 8002760:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002764:	4293      	cmp	r3, r2
 8002766:	bf8c      	ite	hi
 8002768:	2301      	movhi	r3, #1
 800276a:	2300      	movls	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d011      	beq.n	8002796 <_Z12Check_Disarmv+0x86>
					armed = false;
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <_Z12Check_Disarmv+0x8c>)
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
					EKF.armed = false;
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <_Z12Check_Disarmv+0x9c>)
 800277a:	2200      	movs	r2, #0
 800277c:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8002780:	2200      	movs	r2, #0
 8002782:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002786:	480a      	ldr	r0, [pc, #40]	; (80027b0 <_Z12Check_Disarmv+0xa0>)
 8002788:	f003 fe9e 	bl	80064c8 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 800278c:	e003      	b.n	8002796 <_Z12Check_Disarmv+0x86>
				}

		}

		else {
			disarm_start = false;
 800278e:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <_Z12Check_Disarmv+0x94>)
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002794:	e7ff      	b.n	8002796 <_Z12Check_Disarmv+0x86>
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20001679 	.word	0x20001679
 80027a0:	20001610 	.word	0x20001610
 80027a4:	2000167a 	.word	0x2000167a
 80027a8:	20001670 	.word	0x20001670
 80027ac:	20000c68 	.word	0x20000c68
 80027b0:	40010800 	.word	0x40010800

080027b4 <_Z9TelemPackv>:

void TelemPack() {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 80027b8:	4b9f      	ldr	r3, [pc, #636]	; (8002a38 <_Z9TelemPackv+0x284>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a9f      	ldr	r2, [pc, #636]	; (8002a3c <_Z9TelemPackv+0x288>)
 80027be:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 80027c0:	4b9d      	ldr	r3, [pc, #628]	; (8002a38 <_Z9TelemPackv+0x284>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a9d      	ldr	r2, [pc, #628]	; (8002a3c <_Z9TelemPackv+0x288>)
 80027c6:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 80027c8:	4b9b      	ldr	r3, [pc, #620]	; (8002a38 <_Z9TelemPackv+0x284>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	4a9b      	ldr	r2, [pc, #620]	; (8002a3c <_Z9TelemPackv+0x288>)
 80027ce:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 80027d0:	4b9b      	ldr	r3, [pc, #620]	; (8002a40 <_Z9TelemPackv+0x28c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	4b99      	ldr	r3, [pc, #612]	; (8002a3c <_Z9TelemPackv+0x288>)
 80027d8:	861a      	strh	r2, [r3, #48]	; 0x30
	  telem_pack.pwm.w2 = controller_output[1];
 80027da:	4b99      	ldr	r3, [pc, #612]	; (8002a40 <_Z9TelemPackv+0x28c>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	b29a      	uxth	r2, r3
 80027e0:	4b96      	ldr	r3, [pc, #600]	; (8002a3c <_Z9TelemPackv+0x288>)
 80027e2:	865a      	strh	r2, [r3, #50]	; 0x32
	  telem_pack.pwm.w3 = controller_output[2];
 80027e4:	4b96      	ldr	r3, [pc, #600]	; (8002a40 <_Z9TelemPackv+0x28c>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	4b94      	ldr	r3, [pc, #592]	; (8002a3c <_Z9TelemPackv+0x288>)
 80027ec:	869a      	strh	r2, [r3, #52]	; 0x34
	  telem_pack.pwm.w4 = controller_output[3];
 80027ee:	4b94      	ldr	r3, [pc, #592]	; (8002a40 <_Z9TelemPackv+0x28c>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	4b91      	ldr	r3, [pc, #580]	; (8002a3c <_Z9TelemPackv+0x288>)
 80027f6:	86da      	strh	r2, [r3, #54]	; 0x36

	  telem_pack.attitude_des.roll  = controller.roll_des;
 80027f8:	4b92      	ldr	r3, [pc, #584]	; (8002a44 <_Z9TelemPackv+0x290>)
 80027fa:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80027fe:	4a8f      	ldr	r2, [pc, #572]	; (8002a3c <_Z9TelemPackv+0x288>)
 8002800:	60d3      	str	r3, [r2, #12]
	  telem_pack.attitude_des.pitch = controller.pitch_des;
 8002802:	4b90      	ldr	r3, [pc, #576]	; (8002a44 <_Z9TelemPackv+0x290>)
 8002804:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8002808:	4a8c      	ldr	r2, [pc, #560]	; (8002a3c <_Z9TelemPackv+0x288>)
 800280a:	6113      	str	r3, [r2, #16]
	  telem_pack.attitude_des.yaw   = yaw_counter;
 800280c:	4b8e      	ldr	r3, [pc, #568]	; (8002a48 <_Z9TelemPackv+0x294>)
 800280e:	f993 3000 	ldrsb.w	r3, [r3]
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fa3a 	bl	8000c8c <__aeabi_i2f>
 8002818:	4603      	mov	r3, r0
 800281a:	4a88      	ldr	r2, [pc, #544]	; (8002a3c <_Z9TelemPackv+0x288>)
 800281c:	6153      	str	r3, [r2, #20]

	  telem_pack.attitude_rate.roll  = state.rates[0];
 800281e:	4b86      	ldr	r3, [pc, #536]	; (8002a38 <_Z9TelemPackv+0x284>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	4a86      	ldr	r2, [pc, #536]	; (8002a3c <_Z9TelemPackv+0x288>)
 8002824:	6193      	str	r3, [r2, #24]
	  telem_pack.attitude_rate.pitch = state.rates[1];
 8002826:	4b84      	ldr	r3, [pc, #528]	; (8002a38 <_Z9TelemPackv+0x284>)
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	4a84      	ldr	r2, [pc, #528]	; (8002a3c <_Z9TelemPackv+0x288>)
 800282c:	61d3      	str	r3, [r2, #28]
	  telem_pack.attitude_rate.yaw 	 = state.rates[2];
 800282e:	4b82      	ldr	r3, [pc, #520]	; (8002a38 <_Z9TelemPackv+0x284>)
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	4a82      	ldr	r2, [pc, #520]	; (8002a3c <_Z9TelemPackv+0x288>)
 8002834:	6213      	str	r3, [r2, #32]

	  telem_pack.attitude_rate_des.roll =  state_des.rates[0];
 8002836:	4b85      	ldr	r3, [pc, #532]	; (8002a4c <_Z9TelemPackv+0x298>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	4a80      	ldr	r2, [pc, #512]	; (8002a3c <_Z9TelemPackv+0x288>)
 800283c:	6253      	str	r3, [r2, #36]	; 0x24
	  telem_pack.attitude_rate_des.pitch = state_des.rates[1];
 800283e:	4b83      	ldr	r3, [pc, #524]	; (8002a4c <_Z9TelemPackv+0x298>)
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	4a7e      	ldr	r2, [pc, #504]	; (8002a3c <_Z9TelemPackv+0x288>)
 8002844:	6293      	str	r3, [r2, #40]	; 0x28

	  telem_pack.ekf.roll_acc  = EKF.roll_acc;
 8002846:	4b82      	ldr	r3, [pc, #520]	; (8002a50 <_Z9TelemPackv+0x29c>)
 8002848:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800284c:	4a7b      	ldr	r2, [pc, #492]	; (8002a3c <_Z9TelemPackv+0x288>)
 800284e:	6393      	str	r3, [r2, #56]	; 0x38
	  telem_pack.ekf.pitch_acc = EKF.pitch_acc;
 8002850:	4b7f      	ldr	r3, [pc, #508]	; (8002a50 <_Z9TelemPackv+0x29c>)
 8002852:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8002856:	4a79      	ldr	r2, [pc, #484]	; (8002a3c <_Z9TelemPackv+0x288>)
 8002858:	63d3      	str	r3, [r2, #60]	; 0x3c
	  telem_pack.ekf.yaw_acc   = EKF.yaw_acc;
 800285a:	4b7d      	ldr	r3, [pc, #500]	; (8002a50 <_Z9TelemPackv+0x29c>)
 800285c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8002860:	4a76      	ldr	r2, [pc, #472]	; (8002a3c <_Z9TelemPackv+0x288>)
 8002862:	6413      	str	r3, [r2, #64]	; 0x40

	  telem_pack.ekf.roll_gyro  = EKF.gyro[0];
 8002864:	4b7a      	ldr	r3, [pc, #488]	; (8002a50 <_Z9TelemPackv+0x29c>)
 8002866:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800286a:	4a74      	ldr	r2, [pc, #464]	; (8002a3c <_Z9TelemPackv+0x288>)
 800286c:	6453      	str	r3, [r2, #68]	; 0x44
	  telem_pack.ekf.pitch_gyro = EKF.gyro[1];
 800286e:	4b78      	ldr	r3, [pc, #480]	; (8002a50 <_Z9TelemPackv+0x29c>)
 8002870:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002874:	4a71      	ldr	r2, [pc, #452]	; (8002a3c <_Z9TelemPackv+0x288>)
 8002876:	6493      	str	r3, [r2, #72]	; 0x48
	  telem_pack.ekf.yaw_gyro   = EKF.gyro[2];
 8002878:	4b75      	ldr	r3, [pc, #468]	; (8002a50 <_Z9TelemPackv+0x29c>)
 800287a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800287e:	4a6f      	ldr	r2, [pc, #444]	; (8002a3c <_Z9TelemPackv+0x288>)
 8002880:	64d3      	str	r3, [r2, #76]	; 0x4c

	  telem_pack.ekf.roll_comp =  EKF.roll_comp;
 8002882:	4b73      	ldr	r3, [pc, #460]	; (8002a50 <_Z9TelemPackv+0x29c>)
 8002884:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8002888:	4a6c      	ldr	r2, [pc, #432]	; (8002a3c <_Z9TelemPackv+0x288>)
 800288a:	6513      	str	r3, [r2, #80]	; 0x50
	  telem_pack.ekf.pitch_comp = EKF.pitch_comp;
 800288c:	4b70      	ldr	r3, [pc, #448]	; (8002a50 <_Z9TelemPackv+0x29c>)
 800288e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8002892:	4a6a      	ldr	r2, [pc, #424]	; (8002a3c <_Z9TelemPackv+0x288>)
 8002894:	6553      	str	r3, [r2, #84]	; 0x54

	  telem_pack.ekf.roll_ekf =  EKF.roll_ekf;
 8002896:	4b6e      	ldr	r3, [pc, #440]	; (8002a50 <_Z9TelemPackv+0x29c>)
 8002898:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800289c:	4a67      	ldr	r2, [pc, #412]	; (8002a3c <_Z9TelemPackv+0x288>)
 800289e:	6593      	str	r3, [r2, #88]	; 0x58
	  telem_pack.ekf.pitch_ekf = EKF.pitch_ekf;
 80028a0:	4b6b      	ldr	r3, [pc, #428]	; (8002a50 <_Z9TelemPackv+0x29c>)
 80028a2:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 80028a6:	4a65      	ldr	r2, [pc, #404]	; (8002a3c <_Z9TelemPackv+0x288>)
 80028a8:	65d3      	str	r3, [r2, #92]	; 0x5c

	  telem_pack.pid_roll.P = controller.pid_roll.P;
 80028aa:	4b66      	ldr	r3, [pc, #408]	; (8002a44 <_Z9TelemPackv+0x290>)
 80028ac:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 80028b0:	4a62      	ldr	r2, [pc, #392]	; (8002a3c <_Z9TelemPackv+0x288>)
 80028b2:	6613      	str	r3, [r2, #96]	; 0x60
	  telem_pack.pid_roll.I = controller.pid_roll.I;
 80028b4:	4b63      	ldr	r3, [pc, #396]	; (8002a44 <_Z9TelemPackv+0x290>)
 80028b6:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 80028ba:	4a60      	ldr	r2, [pc, #384]	; (8002a3c <_Z9TelemPackv+0x288>)
 80028bc:	6653      	str	r3, [r2, #100]	; 0x64
	  telem_pack.pid_roll.D = controller.pid_roll.D;
 80028be:	4b61      	ldr	r3, [pc, #388]	; (8002a44 <_Z9TelemPackv+0x290>)
 80028c0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80028c4:	4a5d      	ldr	r2, [pc, #372]	; (8002a3c <_Z9TelemPackv+0x288>)
 80028c6:	6693      	str	r3, [r2, #104]	; 0x68
	  telem_pack.pid_roll.pd_roll_sat_buf = controller.pid_roll.pd_roll_sat_buf;
 80028c8:	4b5e      	ldr	r3, [pc, #376]	; (8002a44 <_Z9TelemPackv+0x290>)
 80028ca:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 80028ce:	4a5b      	ldr	r2, [pc, #364]	; (8002a3c <_Z9TelemPackv+0x288>)
 80028d0:	66d3      	str	r3, [r2, #108]	; 0x6c

	  telem_pack.pid_pitch.P = controller.pid_pitch.P;
 80028d2:	4b5c      	ldr	r3, [pc, #368]	; (8002a44 <_Z9TelemPackv+0x290>)
 80028d4:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 80028d8:	4a58      	ldr	r2, [pc, #352]	; (8002a3c <_Z9TelemPackv+0x288>)
 80028da:	6713      	str	r3, [r2, #112]	; 0x70
	  telem_pack.pid_pitch.I = controller.pid_pitch.I;
 80028dc:	4b59      	ldr	r3, [pc, #356]	; (8002a44 <_Z9TelemPackv+0x290>)
 80028de:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 80028e2:	4a56      	ldr	r2, [pc, #344]	; (8002a3c <_Z9TelemPackv+0x288>)
 80028e4:	6753      	str	r3, [r2, #116]	; 0x74
	  telem_pack.pid_pitch.D = controller.pid_pitch.D;
 80028e6:	4b57      	ldr	r3, [pc, #348]	; (8002a44 <_Z9TelemPackv+0x290>)
 80028e8:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 80028ec:	4a53      	ldr	r2, [pc, #332]	; (8002a3c <_Z9TelemPackv+0x288>)
 80028ee:	6793      	str	r3, [r2, #120]	; 0x78
	  telem_pack.pid_pitch.pd_roll_sat_buf = controller.pid_pitch.pd_roll_sat_buf;
 80028f0:	4b54      	ldr	r3, [pc, #336]	; (8002a44 <_Z9TelemPackv+0x290>)
 80028f2:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 80028f6:	4a51      	ldr	r2, [pc, #324]	; (8002a3c <_Z9TelemPackv+0x288>)
 80028f8:	67d3      	str	r3, [r2, #124]	; 0x7c

	  telem_pack.p_yaw.P = controller.pid_yaw.P;
 80028fa:	4b52      	ldr	r3, [pc, #328]	; (8002a44 <_Z9TelemPackv+0x290>)
 80028fc:	f8d3 23e4 	ldr.w	r2, [r3, #996]	; 0x3e4
 8002900:	4b4e      	ldr	r3, [pc, #312]	; (8002a3c <_Z9TelemPackv+0x288>)
 8002902:	f8c3 210d 	str.w	r2, [r3, #269]	; 0x10d
	  telem_pack.p_yaw.D = controller.pid_yaw.D;
 8002906:	4b4f      	ldr	r3, [pc, #316]	; (8002a44 <_Z9TelemPackv+0x290>)
 8002908:	f8d3 23ec 	ldr.w	r2, [r3, #1004]	; 0x3ec
 800290c:	4b4b      	ldr	r3, [pc, #300]	; (8002a3c <_Z9TelemPackv+0x288>)
 800290e:	f8c3 2115 	str.w	r2, [r3, #277]	; 0x115
	  telem_pack.p_yaw.I = controller.pid_yaw.I;
 8002912:	4b4c      	ldr	r3, [pc, #304]	; (8002a44 <_Z9TelemPackv+0x290>)
 8002914:	f8d3 23e8 	ldr.w	r2, [r3, #1000]	; 0x3e8
 8002918:	4b48      	ldr	r3, [pc, #288]	; (8002a3c <_Z9TelemPackv+0x288>)
 800291a:	f8c3 2111 	str.w	r2, [r3, #273]	; 0x111
	  telem_pack.p_yaw.pd_roll_sat_buf = controller.pid_yaw.pd_roll_sat_buf;
 800291e:	4b49      	ldr	r3, [pc, #292]	; (8002a44 <_Z9TelemPackv+0x290>)
 8002920:	f8d3 23d4 	ldr.w	r2, [r3, #980]	; 0x3d4
 8002924:	4b45      	ldr	r3, [pc, #276]	; (8002a3c <_Z9TelemPackv+0x288>)
 8002926:	f8c3 2119 	str.w	r2, [r3, #281]	; 0x119

	  telem_pack.sonar_alt = EKF.roll_bias;
 800292a:	4b49      	ldr	r3, [pc, #292]	; (8002a50 <_Z9TelemPackv+0x29c>)
 800292c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002930:	4a42      	ldr	r2, [pc, #264]	; (8002a3c <_Z9TelemPackv+0x288>)
 8002932:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	  telem_pack.velocity_body.z = EKF.pitch_bias;
 8002936:	4b46      	ldr	r3, [pc, #280]	; (8002a50 <_Z9TelemPackv+0x29c>)
 8002938:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800293c:	4a3f      	ldr	r2, [pc, #252]	; (8002a3c <_Z9TelemPackv+0x288>)
 800293e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	  telem_pack.position_body.z = EKF.alt_gnd;
 8002942:	4b43      	ldr	r3, [pc, #268]	; (8002a50 <_Z9TelemPackv+0x29c>)
 8002944:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8002948:	4a3c      	ldr	r2, [pc, #240]	; (8002a3c <_Z9TelemPackv+0x288>)
 800294a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	  telem_pack.cam_data.detected = cam_data_20.detected;
 800294e:	4b41      	ldr	r3, [pc, #260]	; (8002a54 <_Z9TelemPackv+0x2a0>)
 8002950:	781a      	ldrb	r2, [r3, #0]
 8002952:	4b3a      	ldr	r3, [pc, #232]	; (8002a3c <_Z9TelemPackv+0x288>)
 8002954:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	  telem_pack.cam_data.x = cam_data_20.x;
 8002958:	4b3e      	ldr	r3, [pc, #248]	; (8002a54 <_Z9TelemPackv+0x2a0>)
 800295a:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800295e:	b21a      	sxth	r2, r3
 8002960:	4b36      	ldr	r3, [pc, #216]	; (8002a3c <_Z9TelemPackv+0x288>)
 8002962:	f8a3 20a5 	strh.w	r2, [r3, #165]	; 0xa5
	  telem_pack.cam_data.y = cam_data_20.y;
 8002966:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <_Z9TelemPackv+0x2a0>)
 8002968:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800296c:	b21a      	sxth	r2, r3
 800296e:	4b33      	ldr	r3, [pc, #204]	; (8002a3c <_Z9TelemPackv+0x288>)
 8002970:	f8a3 20a7 	strh.w	r2, [r3, #167]	; 0xa7
	  telem_pack.cam_data.z_cam = cam_data_20.z_cam;
 8002974:	4b37      	ldr	r3, [pc, #220]	; (8002a54 <_Z9TelemPackv+0x2a0>)
 8002976:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800297a:	b21a      	sxth	r2, r3
 800297c:	4b2f      	ldr	r3, [pc, #188]	; (8002a3c <_Z9TelemPackv+0x288>)
 800297e:	f8a3 20a9 	strh.w	r2, [r3, #169]	; 0xa9
//	  telem_pack.position_body.x = EKF.x;
//	  telem_pack.velocity_body.x = EKF.vx;
//	  telem_pack.position_body.y = EKF.y;
//	  telem_pack.velocity_body.y = EKF.vy;

	  telem_pack.alt_thr = controller.alt_thr;
 8002982:	4b30      	ldr	r3, [pc, #192]	; (8002a44 <_Z9TelemPackv+0x290>)
 8002984:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
 8002988:	4a2c      	ldr	r2, [pc, #176]	; (8002a3c <_Z9TelemPackv+0x288>)
 800298a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	  telem_pack.time_millis = HAL_GetTick();
 800298e:	f003 f877 	bl	8005a80 <HAL_GetTick>
 8002992:	4603      	mov	r3, r0
 8002994:	4a29      	ldr	r2, [pc, #164]	; (8002a3c <_Z9TelemPackv+0x288>)
 8002996:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

	  telem_pack.acc.x = accXc;
 800299a:	4b2f      	ldr	r3, [pc, #188]	; (8002a58 <_Z9TelemPackv+0x2a4>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <_Z9TelemPackv+0x288>)
 80029a0:	f8c3 20ad 	str.w	r2, [r3, #173]	; 0xad
	  telem_pack.acc.y = accYc;
 80029a4:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <_Z9TelemPackv+0x2a8>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b24      	ldr	r3, [pc, #144]	; (8002a3c <_Z9TelemPackv+0x288>)
 80029aa:	f8c3 20b1 	str.w	r2, [r3, #177]	; 0xb1
	  telem_pack.acc.z = accZm;
 80029ae:	4b2c      	ldr	r3, [pc, #176]	; (8002a60 <_Z9TelemPackv+0x2ac>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <_Z9TelemPackv+0x288>)
 80029b4:	f8c3 20b5 	str.w	r2, [r3, #181]	; 0xb5

	  telem_pack.mag.x = MAG_X_CALIB;
 80029b8:	4b2a      	ldr	r3, [pc, #168]	; (8002a64 <_Z9TelemPackv+0x2b0>)
 80029ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029be:	4b1f      	ldr	r3, [pc, #124]	; (8002a3c <_Z9TelemPackv+0x288>)
 80029c0:	f8a3 20b9 	strh.w	r2, [r3, #185]	; 0xb9
	  telem_pack.mag.y = MAG_Y_CALIB;
 80029c4:	4b28      	ldr	r3, [pc, #160]	; (8002a68 <_Z9TelemPackv+0x2b4>)
 80029c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029ca:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <_Z9TelemPackv+0x288>)
 80029cc:	f8a3 20bb 	strh.w	r2, [r3, #187]	; 0xbb
	  telem_pack.mag.z = MAG_Z_CALIB;
 80029d0:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <_Z9TelemPackv+0x2b8>)
 80029d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <_Z9TelemPackv+0x288>)
 80029d8:	f8a3 20bd 	strh.w	r2, [r3, #189]	; 0xbd

	  telem_pack.gps.vel_body.x = EKF.vgpsx;
	  telem_pack.gps.vel_body.y = EKF.vgpsy;
	   */

	  telem_pack.ch.ch1 = (uint16_t)ch[0];
 80029dc:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <_Z9TelemPackv+0x2bc>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <_Z9TelemPackv+0x288>)
 80029e4:	f8a3 20ef 	strh.w	r2, [r3, #239]	; 0xef
	  telem_pack.ch.ch2 = (uint16_t)ch[1];
 80029e8:	4b21      	ldr	r3, [pc, #132]	; (8002a70 <_Z9TelemPackv+0x2bc>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <_Z9TelemPackv+0x288>)
 80029f0:	f8a3 20f1 	strh.w	r2, [r3, #241]	; 0xf1
	  telem_pack.ch.ch3 = (uint16_t)ch[2];
 80029f4:	4b1e      	ldr	r3, [pc, #120]	; (8002a70 <_Z9TelemPackv+0x2bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	4b10      	ldr	r3, [pc, #64]	; (8002a3c <_Z9TelemPackv+0x288>)
 80029fc:	f8a3 20f3 	strh.w	r2, [r3, #243]	; 0xf3
	  telem_pack.ch.ch4 = (uint16_t)ch[3];
 8002a00:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <_Z9TelemPackv+0x2bc>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	4b0d      	ldr	r3, [pc, #52]	; (8002a3c <_Z9TelemPackv+0x288>)
 8002a08:	f8a3 20f5 	strh.w	r2, [r3, #245]	; 0xf5
	  telem_pack.ch.ch5 = (uint16_t)ch[4];
 8002a0c:	4b18      	ldr	r3, [pc, #96]	; (8002a70 <_Z9TelemPackv+0x2bc>)
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <_Z9TelemPackv+0x288>)
 8002a14:	f8a3 20f7 	strh.w	r2, [r3, #247]	; 0xf7
	  telem_pack.ch.ch6 = (uint16_t)ch[5];
 8002a18:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <_Z9TelemPackv+0x2bc>)
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <_Z9TelemPackv+0x288>)
 8002a20:	f8a3 20f9 	strh.w	r2, [r3, #249]	; 0xf9
	  telem_pack.ch.ch7 = (uint16_t)ch[6];
 8002a24:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <_Z9TelemPackv+0x2bc>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <_Z9TelemPackv+0x288>)
 8002a2c:	f8a3 20fb 	strh.w	r2, [r3, #251]	; 0xfb
	  telem_pack.ch.ch8 = (uint16_t)ch[7];
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <_Z9TelemPackv+0x2bc>)
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	e01e      	b.n	8002a74 <_Z9TelemPackv+0x2c0>
 8002a36:	bf00      	nop
 8002a38:	2000092c 	.word	0x2000092c
 8002a3c:	20000950 	.word	0x20000950
 8002a40:	200015e0 	.word	0x200015e0
 8002a44:	20000fb0 	.word	0x20000fb0
 8002a48:	20001727 	.word	0x20001727
 8002a4c:	20000908 	.word	0x20000908
 8002a50:	20000c68 	.word	0x20000c68
 8002a54:	200016f8 	.word	0x200016f8
 8002a58:	200008d8 	.word	0x200008d8
 8002a5c:	200008dc 	.word	0x200008dc
 8002a60:	200008ec 	.word	0x200008ec
 8002a64:	20001716 	.word	0x20001716
 8002a68:	20001718 	.word	0x20001718
 8002a6c:	2000171a 	.word	0x2000171a
 8002a70:	20001610 	.word	0x20001610
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	4b6d      	ldr	r3, [pc, #436]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002a78:	f8a3 20fd 	strh.w	r2, [r3, #253]	; 0xfd
	  telem_pack.ch.ch9 = (uint16_t)ch[8];
 8002a7c:	4b6c      	ldr	r3, [pc, #432]	; (8002c30 <_Z9TelemPackv+0x47c>)
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	4b6a      	ldr	r3, [pc, #424]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002a84:	f8a3 20ff 	strh.w	r2, [r3, #255]	; 0xff
	  telem_pack.ch.ch10 = (uint16_t)ch[9];
 8002a88:	4b69      	ldr	r3, [pc, #420]	; (8002c30 <_Z9TelemPackv+0x47c>)
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	4b67      	ldr	r3, [pc, #412]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002a90:	f8a3 2101 	strh.w	r2, [r3, #257]	; 0x101
	  telem_pack.ch.ch11 = (uint16_t)ch[10];
 8002a94:	4b66      	ldr	r3, [pc, #408]	; (8002c30 <_Z9TelemPackv+0x47c>)
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	4b64      	ldr	r3, [pc, #400]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002a9c:	f8a3 2103 	strh.w	r2, [r3, #259]	; 0x103

	  telem_pack.pwm2.w1 = controller_output_2[0];
 8002aa0:	4b64      	ldr	r3, [pc, #400]	; (8002c34 <_Z9TelemPackv+0x480>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	4b61      	ldr	r3, [pc, #388]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002aa8:	f8a3 2105 	strh.w	r2, [r3, #261]	; 0x105
	  telem_pack.pwm2.w2 = controller_output_2[1];
 8002aac:	4b61      	ldr	r3, [pc, #388]	; (8002c34 <_Z9TelemPackv+0x480>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	4b5e      	ldr	r3, [pc, #376]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002ab4:	f8a3 2107 	strh.w	r2, [r3, #263]	; 0x107
	  telem_pack.pwm2.w3 = controller_output_2[2];
 8002ab8:	4b5e      	ldr	r3, [pc, #376]	; (8002c34 <_Z9TelemPackv+0x480>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	4b5b      	ldr	r3, [pc, #364]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002ac0:	f8a3 2109 	strh.w	r2, [r3, #265]	; 0x109
	  telem_pack.pwm2.w4 = controller_output_2[3];
 8002ac4:	4b5b      	ldr	r3, [pc, #364]	; (8002c34 <_Z9TelemPackv+0x480>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	4b58      	ldr	r3, [pc, #352]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002acc:	f8a3 210b 	strh.w	r2, [r3, #267]	; 0x10b

	  telem_pack.S_roll.S11 = EKF.S11_roll;
 8002ad0:	4b59      	ldr	r3, [pc, #356]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002ad2:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8002ad6:	4b55      	ldr	r3, [pc, #340]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002ad8:	f8c3 211d 	str.w	r2, [r3, #285]	; 0x11d
	  telem_pack.S_roll.S12 = EKF.S12_roll;
 8002adc:	4b56      	ldr	r3, [pc, #344]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002ade:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8002ae2:	4b52      	ldr	r3, [pc, #328]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002ae4:	f8c3 2121 	str.w	r2, [r3, #289]	; 0x121
	  telem_pack.S_roll.S13 = EKF.S13_roll;
 8002ae8:	4b53      	ldr	r3, [pc, #332]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002aea:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002aee:	4b4f      	ldr	r3, [pc, #316]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002af0:	f8c3 2125 	str.w	r2, [r3, #293]	; 0x125
	  telem_pack.S_roll.S21 = EKF.S21_roll;
 8002af4:	4b50      	ldr	r3, [pc, #320]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002af6:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8002afa:	4b4c      	ldr	r3, [pc, #304]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002afc:	f8c3 2129 	str.w	r2, [r3, #297]	; 0x129
	  telem_pack.S_roll.S22 = EKF.S22_roll;
 8002b00:	4b4d      	ldr	r3, [pc, #308]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002b02:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8002b06:	4b49      	ldr	r3, [pc, #292]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002b08:	f8c3 212d 	str.w	r2, [r3, #301]	; 0x12d
	  telem_pack.S_roll.S23 = EKF.S23_roll;
 8002b0c:	4b4a      	ldr	r3, [pc, #296]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002b0e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002b12:	4b46      	ldr	r3, [pc, #280]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002b14:	f8c3 2131 	str.w	r2, [r3, #305]	; 0x131
	  telem_pack.S_roll.S31 = EKF.S31_roll;
 8002b18:	4b47      	ldr	r3, [pc, #284]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002b1a:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8002b1e:	4b43      	ldr	r3, [pc, #268]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002b20:	f8c3 2135 	str.w	r2, [r3, #309]	; 0x135
	  telem_pack.S_roll.S32 = EKF.S32_roll;
 8002b24:	4b44      	ldr	r3, [pc, #272]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002b26:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002b2a:	4b40      	ldr	r3, [pc, #256]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002b2c:	f8c3 2139 	str.w	r2, [r3, #313]	; 0x139
	  telem_pack.S_roll.S33 = EKF.S33_roll;
 8002b30:	4b41      	ldr	r3, [pc, #260]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002b32:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8002b36:	4b3d      	ldr	r3, [pc, #244]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002b38:	f8c3 213d 	str.w	r2, [r3, #317]	; 0x13d

	  telem_pack.S_pitch.S11 = EKF.S11_pitch;
 8002b3c:	4b3e      	ldr	r3, [pc, #248]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002b3e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8002b42:	4b3a      	ldr	r3, [pc, #232]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002b44:	f8c3 2141 	str.w	r2, [r3, #321]	; 0x141
	  telem_pack.S_pitch.S12 = EKF.S12_pitch;
 8002b48:	4b3b      	ldr	r3, [pc, #236]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002b4a:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8002b4e:	4b37      	ldr	r3, [pc, #220]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002b50:	f8c3 2145 	str.w	r2, [r3, #325]	; 0x145
	  telem_pack.S_pitch.S13 = EKF.S13_pitch;
 8002b54:	4b38      	ldr	r3, [pc, #224]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002b56:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8002b5a:	4b34      	ldr	r3, [pc, #208]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002b5c:	f8c3 2149 	str.w	r2, [r3, #329]	; 0x149
	  telem_pack.S_pitch.S21 = EKF.S21_pitch;
 8002b60:	4b35      	ldr	r3, [pc, #212]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002b62:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 8002b66:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002b68:	f8c3 214d 	str.w	r2, [r3, #333]	; 0x14d
	  telem_pack.S_pitch.S22 = EKF.S22_pitch;
 8002b6c:	4b32      	ldr	r3, [pc, #200]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002b6e:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 8002b72:	4b2e      	ldr	r3, [pc, #184]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002b74:	f8c3 2151 	str.w	r2, [r3, #337]	; 0x151
	  telem_pack.S_pitch.S23 = EKF.S23_pitch;
 8002b78:	4b2f      	ldr	r3, [pc, #188]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002b7a:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8002b7e:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002b80:	f8c3 2155 	str.w	r2, [r3, #341]	; 0x155
	  telem_pack.S_pitch.S31 = EKF.S31_pitch;
 8002b84:	4b2c      	ldr	r3, [pc, #176]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002b86:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8002b8a:	4b28      	ldr	r3, [pc, #160]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002b8c:	f8c3 2159 	str.w	r2, [r3, #345]	; 0x159
	  telem_pack.S_pitch.S32 = EKF.S32_pitch;
 8002b90:	4b29      	ldr	r3, [pc, #164]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002b92:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8002b96:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002b98:	f8c3 215d 	str.w	r2, [r3, #349]	; 0x15d
	  telem_pack.S_pitch.S33 = EKF.S33_pitch;
 8002b9c:	4b26      	ldr	r3, [pc, #152]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002b9e:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8002ba2:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002ba4:	f8c3 2161 	str.w	r2, [r3, #353]	; 0x161

	  telem_pack.S_yaw.S11 = EKF.S11_yaw;
 8002ba8:	4b23      	ldr	r3, [pc, #140]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002baa:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 8002bae:	4b1f      	ldr	r3, [pc, #124]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002bb0:	f8c3 2165 	str.w	r2, [r3, #357]	; 0x165
	  telem_pack.S_yaw.S12 = EKF.S12_yaw;
 8002bb4:	4b20      	ldr	r3, [pc, #128]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002bb6:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 8002bba:	4b1c      	ldr	r3, [pc, #112]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002bbc:	f8c3 2169 	str.w	r2, [r3, #361]	; 0x169
	  telem_pack.S_yaw.S13 = EKF.S13_yaw;
 8002bc0:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002bc2:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8002bc6:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002bc8:	f8c3 216d 	str.w	r2, [r3, #365]	; 0x16d
	  telem_pack.S_yaw.S21 = EKF.S21_yaw;
 8002bcc:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002bce:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002bd2:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002bd4:	f8c3 2171 	str.w	r2, [r3, #369]	; 0x171
	  telem_pack.S_yaw.S22 = EKF.S22_yaw;
 8002bd8:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002bda:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8002bde:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002be0:	f8c3 2175 	str.w	r2, [r3, #373]	; 0x175
	  telem_pack.S_yaw.S23 = EKF.S23_yaw;
 8002be4:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002be6:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002bec:	f8c3 2179 	str.w	r2, [r3, #377]	; 0x179
	  telem_pack.S_yaw.S31 = EKF.S31_yaw;
 8002bf0:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002bf2:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002bf8:	f8c3 217d 	str.w	r2, [r3, #381]	; 0x17d
	  telem_pack.S_yaw.S32 = EKF.S32_yaw;
 8002bfc:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002bfe:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8002c02:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002c04:	f8c3 2181 	str.w	r2, [r3, #385]	; 0x181
	  telem_pack.S_yaw.S33 = EKF.S33_yaw;
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <_Z9TelemPackv+0x484>)
 8002c0a:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 8002c0e:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002c10:	f8c3 2185 	str.w	r2, [r3, #389]	; 0x185

	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 8002c14:	4a09      	ldr	r2, [pc, #36]	; (8002c3c <_Z9TelemPackv+0x488>)
 8002c16:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <_Z9TelemPackv+0x478>)
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f240 1389 	movw	r3, #393	; 0x189
 8002c20:	461a      	mov	r2, r3
 8002c22:	f00d f937 	bl	800fe94 <memcpy>
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000950 	.word	0x20000950
 8002c30:	20001610 	.word	0x20001610
 8002c34:	200015f0 	.word	0x200015f0
 8002c38:	20000c68 	.word	0x20000c68
 8002c3c:	20000adc 	.word	0x20000adc

08002c40 <_Z7GyroOkuh>:
	  sent_time = HAL_GetTick();


}

int16_t GyroOku (uint8_t addr) {
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af04      	add	r7, sp, #16
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	2301      	movs	r3, #1
 8002c50:	9302      	str	r3, [sp, #8]
 8002c52:	2302      	movs	r3, #2
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	f107 030c 	add.w	r3, r7, #12
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	21d1      	movs	r1, #209	; 0xd1
 8002c60:	4807      	ldr	r0, [pc, #28]	; (8002c80 <_Z7GyroOkuh+0x40>)
 8002c62:	f004 f9e5 	bl	8007030 <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 8002c66:	7b3b      	ldrb	r3, [r7, #12]
 8002c68:	021b      	lsls	r3, r3, #8
 8002c6a:	b21a      	sxth	r2, r3
 8002c6c:	7b7b      	ldrb	r3, [r7, #13]
 8002c6e:	b21b      	sxth	r3, r3
 8002c70:	4313      	orrs	r3, r2
 8002c72:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8002c74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	200017e8 	.word	0x200017e8

08002c84 <_Z7pwm2angt>:
    }


}

float pwm2ang(unsigned short int pwm) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	80fb      	strh	r3, [r7, #6]
	int dead_zone = 5;
 8002c8e:	2305      	movs	r3, #5
 8002c90:	61bb      	str	r3, [r7, #24]

	int in_min  = 1000;
 8002c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c96:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8002c98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002c9c:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	*/
	int out_min = -30;
 8002c9e:	f06f 031d 	mvn.w	r3, #29
 8002ca2:	60fb      	str	r3, [r7, #12]
	int out_max  = 30;
 8002ca4:	231e      	movs	r3, #30
 8002ca6:	60bb      	str	r3, [r7, #8]
	unsigned short int pwm_out;

	if(pwm > 1500 - dead_zone && pwm < 1500 + dead_zone) {
 8002ca8:	88fa      	ldrh	r2, [r7, #6]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	dd09      	ble.n	8002cca <_Z7pwm2angt+0x46>
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	db03      	blt.n	8002cca <_Z7pwm2angt+0x46>
		pwm_out = 1500;
 8002cc2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002cc6:	83fb      	strh	r3, [r7, #30]
 8002cc8:	e001      	b.n	8002cce <_Z7pwm2angt+0x4a>
	}

	else {
		pwm_out = pwm;
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	83fb      	strh	r3, [r7, #30]
	}

	return (pwm_out - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002cce:	8bfa      	ldrh	r2, [r7, #30]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	1a8a      	subs	r2, r1, r2
 8002cda:	fb02 f203 	mul.w	r2, r2, r3
 8002cde:	6939      	ldr	r1, [r7, #16]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	1acb      	subs	r3, r1, r3
 8002ce4:	fb92 f2f3 	sdiv	r2, r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4413      	add	r3, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fd ffcd 	bl	8000c8c <__aeabi_i2f>
 8002cf2:	4603      	mov	r3, r0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3720      	adds	r7, #32
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <_Z8pwm2ratet>:

float pwm2rate(unsigned short int pwm) {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	80fb      	strh	r3, [r7, #6]

	int in_min  = 1000;
 8002d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d0a:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8002d0c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002d10:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	 */
	int out_min = -100;
 8002d12:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002d16:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 8002d18:	2364      	movs	r3, #100	; 0x64
 8002d1a:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8002d1c:	88fa      	ldrh	r2, [r7, #6]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	68b9      	ldr	r1, [r7, #8]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	1a8a      	subs	r2, r1, r2
 8002d28:	fb02 f203 	mul.w	r2, r2, r3
 8002d2c:	6939      	ldr	r1, [r7, #16]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	1acb      	subs	r3, r1, r3
 8002d32:	fb92 f2f3 	sdiv	r2, r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4413      	add	r3, r2
 8002d3a:	425b      	negs	r3, r3
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fd ffa5 	bl	8000c8c <__aeabi_i2f>
 8002d42:	4603      	mov	r3, r0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <_Z6AccOkuh>:


int16_t AccOku (uint8_t addr) {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af04      	add	r7, sp, #16
 8002d52:	4603      	mov	r3, r0
 8002d54:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)ADXL345 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	9302      	str	r3, [sp, #8]
 8002d5e:	2302      	movs	r3, #2
 8002d60:	9301      	str	r3, [sp, #4]
 8002d62:	f107 030c 	add.w	r3, r7, #12
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	2301      	movs	r3, #1
 8002d6a:	21a7      	movs	r1, #167	; 0xa7
 8002d6c:	4807      	ldr	r0, [pc, #28]	; (8002d8c <_Z6AccOkuh+0x40>)
 8002d6e:	f004 f95f 	bl	8007030 <HAL_I2C_Mem_Read>
	int16_t gyro = (gyro_data[1]<<8) | gyro_data[0];
 8002d72:	7b7b      	ldrb	r3, [r7, #13]
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	b21a      	sxth	r2, r3
 8002d78:	7b3b      	ldrb	r3, [r7, #12]
 8002d7a:	b21b      	sxth	r3, r3
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8002d80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	200017e8 	.word	0x200017e8

08002d90 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7fd fb2b 	bl	80003f4 <__aeabi_i2d>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4610      	mov	r0, r2
 8002da4:	4619      	mov	r1, r3
 8002da6:	f00b f937 	bl	800e018 <sqrt>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <_Z9DCM2EulerPsS_>:

struct attitude DCM2Euler(int16_t acc[3], int16_t mag[3]) {
 8002db8:	b5b0      	push	{r4, r5, r7, lr}
 8002dba:	b08e      	sub	sp, #56	; 0x38
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
	struct attitude euler_angles;
	float rad2deg = 180.0/3.14;
 8002dc4:	4bc6      	ldr	r3, [pc, #792]	; (80030e0 <_Z9DCM2EulerPsS_+0x328>)
 8002dc6:	637b      	str	r3, [r7, #52]	; 0x34
	float acctop = sqrt(acc[0]*acc[0] + acc[1]*acc[1] + acc[2]*acc[2]);
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dd6:	fb03 f202 	mul.w	r2, r3, r2
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	3302      	adds	r3, #2
 8002dde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de2:	4619      	mov	r1, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	3302      	adds	r3, #2
 8002de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dec:	fb03 f301 	mul.w	r3, r3, r1
 8002df0:	441a      	add	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	3304      	adds	r3, #4
 8002df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e04:	fb03 f301 	mul.w	r3, r3, r1
 8002e08:	4413      	add	r3, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ffc0 	bl	8002d90 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4610      	mov	r0, r2
 8002e16:	4619      	mov	r1, r3
 8002e18:	f7fd fe2e 	bl	8000a78 <__aeabi_d2f>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	633b      	str	r3, [r7, #48]	; 0x30

	//float A = (acctop*sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1])));
	//float DCM11 = (mag[0]*acc[1]*acc[1] - acc[0]*mag[1]*acc[1] + mag[0]*acc[2]*acc[2] - acc[0]*mag[2]*acc[2])/A;
	float DCM11 = (mag[0]*acc[1]*acc[1] - acc[0]*mag[1]*acc[1] + mag[0]*acc[2]*acc[2] - acc[0]*mag[2]*acc[2])/(acctop*sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1])));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e26:	461a      	mov	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e30:	fb03 f302 	mul.w	r3, r3, r2
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	3202      	adds	r2, #2
 8002e38:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e3c:	fb02 f203 	mul.w	r2, r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e46:	4619      	mov	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e50:	fb03 f301 	mul.w	r3, r3, r1
 8002e54:	68b9      	ldr	r1, [r7, #8]
 8002e56:	3102      	adds	r1, #2
 8002e58:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	1ad2      	subs	r2, r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e68:	4619      	mov	r1, r3
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e72:	fb03 f301 	mul.w	r3, r3, r1
 8002e76:	68b9      	ldr	r1, [r7, #8]
 8002e78:	3104      	adds	r1, #4
 8002e7a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	441a      	add	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e94:	fb03 f301 	mul.w	r3, r3, r1
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	3104      	adds	r1, #4
 8002e9c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd fef0 	bl	8000c8c <__aeabi_i2f>
 8002eac:	4604      	mov	r4, r0
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3302      	adds	r3, #2
 8002eba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ebe:	fb03 f202 	mul.w	r2, r3, r2
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	3302      	adds	r3, #2
 8002ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eca:	4619      	mov	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ed2:	fb03 f301 	mul.w	r3, r3, r1
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd fed7 	bl	8000c8c <__aeabi_i2f>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 f9d3 	bl	800328c <_Z6squaref>
 8002ee6:	4605      	mov	r5, r0
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef8:	fb03 f202 	mul.w	r2, r3, r2
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	3304      	adds	r3, #4
 8002f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f04:	4619      	mov	r1, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f0c:	fb03 f301 	mul.w	r3, r3, r1
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd feba 	bl	8000c8c <__aeabi_i2f>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 f9b6 	bl	800328c <_Z6squaref>
 8002f20:	4603      	mov	r3, r0
 8002f22:	4619      	mov	r1, r3
 8002f24:	4628      	mov	r0, r5
 8002f26:	f7fd fdfd 	bl	8000b24 <__addsf3>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	461d      	mov	r5, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	3302      	adds	r3, #2
 8002f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f36:	461a      	mov	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f40:	fb03 f202 	mul.w	r2, r3, r2
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	3304      	adds	r3, #4
 8002f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3302      	adds	r3, #2
 8002f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f56:	fb03 f301 	mul.w	r3, r3, r1
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fd fe95 	bl	8000c8c <__aeabi_i2f>
 8002f62:	4603      	mov	r3, r0
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 f991 	bl	800328c <_Z6squaref>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4628      	mov	r0, r5
 8002f70:	f7fd fdd8 	bl	8000b24 <__addsf3>
 8002f74:	4603      	mov	r3, r0
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fe ff3a 	bl	8001df0 <_ZSt4sqrtf>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fd fed7 	bl	8000d34 <__aeabi_fmul>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f7fd ff86 	bl	8000e9c <__aeabi_fdiv>
 8002f90:	4603      	mov	r3, r0
 8002f92:	62fb      	str	r3, [r7, #44]	; 0x2c
	//A = sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1]));
	//float DCM21 = -(acc[1]*mag[2] - acc[2]*mag[1])/A;
	float DCM21 = -(acc[1]*mag[2] - acc[2]*mag[1])/sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1]));
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	3304      	adds	r3, #4
 8002f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fa6:	fb03 f202 	mul.w	r2, r3, r2
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	3302      	adds	r3, #2
 8002fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fbc:	fb03 f301 	mul.w	r3, r3, r1
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd fe62 	bl	8000c8c <__aeabi_i2f>
 8002fc8:	4604      	mov	r4, r0
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fda:	fb03 f202 	mul.w	r2, r3, r2
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	3302      	adds	r3, #2
 8002fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fee:	fb03 f301 	mul.w	r3, r3, r1
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fd fe49 	bl	8000c8c <__aeabi_i2f>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 f945 	bl	800328c <_Z6squaref>
 8003002:	4605      	mov	r5, r0
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800300a:	461a      	mov	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3304      	adds	r3, #4
 8003010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003014:	fb03 f202 	mul.w	r2, r3, r2
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	3304      	adds	r3, #4
 800301c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003020:	4619      	mov	r1, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003028:	fb03 f301 	mul.w	r3, r3, r1
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	4618      	mov	r0, r3
 8003030:	f7fd fe2c 	bl	8000c8c <__aeabi_i2f>
 8003034:	4603      	mov	r3, r0
 8003036:	4618      	mov	r0, r3
 8003038:	f000 f928 	bl	800328c <_Z6squaref>
 800303c:	4603      	mov	r3, r0
 800303e:	4619      	mov	r1, r3
 8003040:	4628      	mov	r0, r5
 8003042:	f7fd fd6f 	bl	8000b24 <__addsf3>
 8003046:	4603      	mov	r3, r0
 8003048:	461d      	mov	r5, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	3302      	adds	r3, #2
 800304e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003052:	461a      	mov	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3304      	adds	r3, #4
 8003058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800305c:	fb03 f202 	mul.w	r2, r3, r2
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	3304      	adds	r3, #4
 8003064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003068:	4619      	mov	r1, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3302      	adds	r3, #2
 800306e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003072:	fb03 f301 	mul.w	r3, r3, r1
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd fe07 	bl	8000c8c <__aeabi_i2f>
 800307e:	4603      	mov	r3, r0
 8003080:	4618      	mov	r0, r3
 8003082:	f000 f903 	bl	800328c <_Z6squaref>
 8003086:	4603      	mov	r3, r0
 8003088:	4619      	mov	r1, r3
 800308a:	4628      	mov	r0, r5
 800308c:	f7fd fd4a 	bl	8000b24 <__addsf3>
 8003090:	4603      	mov	r3, r0
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe feac 	bl	8001df0 <_ZSt4sqrtf>
 8003098:	4603      	mov	r3, r0
 800309a:	4619      	mov	r1, r3
 800309c:	4620      	mov	r0, r4
 800309e:	f7fd fefd 	bl	8000e9c <__aeabi_fdiv>
 80030a2:	4603      	mov	r3, r0
 80030a4:	62bb      	str	r3, [r7, #40]	; 0x28


	float DCM31 = -acc[0]/acctop;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ac:	425b      	negs	r3, r3
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fd fdec 	bl	8000c8c <__aeabi_i2f>
 80030b4:	4603      	mov	r3, r0
 80030b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fd feef 	bl	8000e9c <__aeabi_fdiv>
 80030be:	4603      	mov	r3, r0
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
	float DCM32 = -acc[1]/acctop;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	3302      	adds	r3, #2
 80030c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ca:	425b      	negs	r3, r3
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fd fddd 	bl	8000c8c <__aeabi_i2f>
 80030d2:	4603      	mov	r3, r0
 80030d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd fee0 	bl	8000e9c <__aeabi_fdiv>
 80030dc:	4603      	mov	r3, r0
 80030de:	e001      	b.n	80030e4 <_Z9DCM2EulerPsS_+0x32c>
 80030e0:	42654ca3 	.word	0x42654ca3
 80030e4:	623b      	str	r3, [r7, #32]
	float DCM33 = -acc[2]/acctop;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	3304      	adds	r3, #4
 80030ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ee:	425b      	negs	r3, r3
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd fdcb 	bl	8000c8c <__aeabi_i2f>
 80030f6:	4603      	mov	r3, r0
 80030f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fd fece 	bl	8000e9c <__aeabi_fdiv>
 8003100:	4603      	mov	r3, r0
 8003102:	61fb      	str	r3, [r7, #28]
	//euler_angles.pitch = rad2deg*atan2(-DCM31,x);
	float pitch = asin(-DCM31);
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe fe4a 	bl	8001da4 <_ZSt4asinf>
 8003110:	61b8      	str	r0, [r7, #24]
	float cp = cos(pitch);
 8003112:	69b8      	ldr	r0, [r7, #24]
 8003114:	f7fe fcac 	bl	8001a70 <_ZSt3cosf>
 8003118:	6178      	str	r0, [r7, #20]

	euler_angles.pitch = rad2deg*pitch;
 800311a:	69b9      	ldr	r1, [r7, #24]
 800311c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800311e:	f7fd fe09 	bl	8000d34 <__aeabi_fmul>
 8003122:	4603      	mov	r3, r0
 8003124:	461a      	mov	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	605a      	str	r2, [r3, #4]
	//pitch = asin(pitch);
	euler_angles.roll = rad2deg*atan(DCM32/DCM33);
 800312a:	69f9      	ldr	r1, [r7, #28]
 800312c:	6a38      	ldr	r0, [r7, #32]
 800312e:	f7fd feb5 	bl	8000e9c <__aeabi_fdiv>
 8003132:	4603      	mov	r3, r0
 8003134:	4618      	mov	r0, r3
 8003136:	f7fe fe41 	bl	8001dbc <_ZSt4atanf>
 800313a:	4603      	mov	r3, r0
 800313c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800313e:	4618      	mov	r0, r3
 8003140:	f7fd fdf8 	bl	8000d34 <__aeabi_fmul>
 8003144:	4603      	mov	r3, r0
 8003146:	461a      	mov	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	601a      	str	r2, [r3, #0]
	float yaw = rad2deg*atan2(DCM21/cp,DCM11/cp);
 800314c:	6979      	ldr	r1, [r7, #20]
 800314e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003150:	f7fd fea4 	bl	8000e9c <__aeabi_fdiv>
 8003154:	4603      	mov	r3, r0
 8003156:	461c      	mov	r4, r3
 8003158:	6979      	ldr	r1, [r7, #20]
 800315a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800315c:	f7fd fe9e 	bl	8000e9c <__aeabi_fdiv>
 8003160:	4603      	mov	r3, r0
 8003162:	4619      	mov	r1, r3
 8003164:	4620      	mov	r0, r4
 8003166:	f7fe fe35 	bl	8001dd4 <_ZSt5atan2ff>
 800316a:	4603      	mov	r3, r0
 800316c:	4619      	mov	r1, r3
 800316e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003170:	f7fd fde0 	bl	8000d34 <__aeabi_fmul>
 8003174:	4603      	mov	r3, r0
 8003176:	613b      	str	r3, [r7, #16]
	//-euler_angles.yaw  = rad2deg*atan2(DCM21,DCM11);
	if((int)yaw < -175 && (int)yaw >= -180) {
 8003178:	6938      	ldr	r0, [r7, #16]
 800317a:	f7fd ffb7 	bl	80010ec <__aeabi_f2iz>
 800317e:	4603      	mov	r3, r0
 8003180:	f113 0faf 	cmn.w	r3, #175	; 0xaf
 8003184:	da23      	bge.n	80031ce <_Z9DCM2EulerPsS_+0x416>
 8003186:	6938      	ldr	r0, [r7, #16]
 8003188:	f7fd ffb0 	bl	80010ec <__aeabi_f2iz>
 800318c:	4603      	mov	r3, r0
 800318e:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8003192:	db1c      	blt.n	80031ce <_Z9DCM2EulerPsS_+0x416>
			//yaw_sign = POSITIVE;
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] > 0) {
 8003194:	4b39      	ldr	r3, [pc, #228]	; (800327c <_Z9DCM2EulerPsS_+0x4c4>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d04b      	beq.n	8003234 <_Z9DCM2EulerPsS_+0x47c>
 800319c:	4b38      	ldr	r3, [pc, #224]	; (8003280 <_Z9DCM2EulerPsS_+0x4c8>)
 800319e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80031a2:	f04f 0100 	mov.w	r1, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd ff62 	bl	8001070 <__aeabi_fcmplt>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d100      	bne.n	80031b4 <_Z9DCM2EulerPsS_+0x3fc>
 80031b2:	e03f      	b.n	8003234 <_Z9DCM2EulerPsS_+0x47c>
			yaw_counter++;
 80031b4:	4b33      	ldr	r3, [pc, #204]	; (8003284 <_Z9DCM2EulerPsS_+0x4cc>)
 80031b6:	f993 3000 	ldrsb.w	r3, [r3]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	3301      	adds	r3, #1
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	b25a      	sxtb	r2, r3
 80031c2:	4b30      	ldr	r3, [pc, #192]	; (8003284 <_Z9DCM2EulerPsS_+0x4cc>)
 80031c4:	701a      	strb	r2, [r3, #0]
			yaw_sign = POSITIVE;
 80031c6:	4b2d      	ldr	r3, [pc, #180]	; (800327c <_Z9DCM2EulerPsS_+0x4c4>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] > 0) {
 80031cc:	e032      	b.n	8003234 <_Z9DCM2EulerPsS_+0x47c>
		}

	}
	else if((int)yaw > 175 && (int)yaw <= 180) {
 80031ce:	6938      	ldr	r0, [r7, #16]
 80031d0:	f7fd ff8c 	bl	80010ec <__aeabi_f2iz>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2baf      	cmp	r3, #175	; 0xaf
 80031d8:	dd22      	ble.n	8003220 <_Z9DCM2EulerPsS_+0x468>
 80031da:	6938      	ldr	r0, [r7, #16]
 80031dc:	f7fd ff86 	bl	80010ec <__aeabi_f2iz>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2bb4      	cmp	r3, #180	; 0xb4
 80031e4:	dc1c      	bgt.n	8003220 <_Z9DCM2EulerPsS_+0x468>
			//yaw_sign = NEGATIVE;
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] < 0) {
 80031e6:	4b25      	ldr	r3, [pc, #148]	; (800327c <_Z9DCM2EulerPsS_+0x4c4>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d022      	beq.n	8003234 <_Z9DCM2EulerPsS_+0x47c>
 80031ee:	4b24      	ldr	r3, [pc, #144]	; (8003280 <_Z9DCM2EulerPsS_+0x4c8>)
 80031f0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80031f4:	f04f 0100 	mov.w	r1, #0
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fd ff57 	bl	80010ac <__aeabi_fcmpgt>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d100      	bne.n	8003206 <_Z9DCM2EulerPsS_+0x44e>
 8003204:	e016      	b.n	8003234 <_Z9DCM2EulerPsS_+0x47c>
			yaw_counter--;
 8003206:	4b1f      	ldr	r3, [pc, #124]	; (8003284 <_Z9DCM2EulerPsS_+0x4cc>)
 8003208:	f993 3000 	ldrsb.w	r3, [r3]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	3b01      	subs	r3, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	b25a      	sxtb	r2, r3
 8003214:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <_Z9DCM2EulerPsS_+0x4cc>)
 8003216:	701a      	strb	r2, [r3, #0]
			yaw_sign = POSITIVE;
 8003218:	4b18      	ldr	r3, [pc, #96]	; (800327c <_Z9DCM2EulerPsS_+0x4c4>)
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] < 0) {
 800321e:	e009      	b.n	8003234 <_Z9DCM2EulerPsS_+0x47c>
		}
	}

	else if(jump_counter > 50) { //Approx 1 sec.
 8003220:	4b19      	ldr	r3, [pc, #100]	; (8003288 <_Z9DCM2EulerPsS_+0x4d0>)
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	2b32      	cmp	r3, #50	; 0x32
 8003226:	d905      	bls.n	8003234 <_Z9DCM2EulerPsS_+0x47c>
		yaw_sign = NEUTRAL;
 8003228:	4b14      	ldr	r3, [pc, #80]	; (800327c <_Z9DCM2EulerPsS_+0x4c4>)
 800322a:	2202      	movs	r2, #2
 800322c:	701a      	strb	r2, [r3, #0]
		jump_counter = 0;
 800322e:	4b16      	ldr	r3, [pc, #88]	; (8003288 <_Z9DCM2EulerPsS_+0x4d0>)
 8003230:	2200      	movs	r2, #0
 8003232:	801a      	strh	r2, [r3, #0]
	}

	if(yaw_sign != NEUTRAL) {
 8003234:	4b11      	ldr	r3, [pc, #68]	; (800327c <_Z9DCM2EulerPsS_+0x4c4>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b02      	cmp	r3, #2
 800323a:	d005      	beq.n	8003248 <_Z9DCM2EulerPsS_+0x490>
		jump_counter++;
 800323c:	4b12      	ldr	r3, [pc, #72]	; (8003288 <_Z9DCM2EulerPsS_+0x4d0>)
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	3301      	adds	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	4b10      	ldr	r3, [pc, #64]	; (8003288 <_Z9DCM2EulerPsS_+0x4d0>)
 8003246:	801a      	strh	r2, [r3, #0]
	}

	yaw += yaw_counter*360;
 8003248:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <_Z9DCM2EulerPsS_+0x4cc>)
 800324a:	f993 3000 	ldrsb.w	r3, [r3]
 800324e:	461a      	mov	r2, r3
 8003250:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003254:	fb03 f302 	mul.w	r3, r3, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd fd17 	bl	8000c8c <__aeabi_i2f>
 800325e:	4603      	mov	r3, r0
 8003260:	4619      	mov	r1, r3
 8003262:	6938      	ldr	r0, [r7, #16]
 8003264:	f7fd fc5e 	bl	8000b24 <__addsf3>
 8003268:	4603      	mov	r3, r0
 800326a:	613b      	str	r3, [r7, #16]
	euler_angles.yaw = yaw;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	609a      	str	r2, [r3, #8]
	//euler_angles.yaw = (atan2((float) mag[1], (float) mag[0]) * 180 / M_PI);
	//yaw = acos(yaw);
	//euler_angles.pitch  = rad2deg*pitch;
	//euler_angles.roll   = rad2deg*roll;
	//euler_angles.yaw    = rad2deg*yaw;
	return euler_angles;
 8003272:	bf00      	nop

}
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	3738      	adds	r7, #56	; 0x38
 8003278:	46bd      	mov	sp, r7
 800327a:	bdb0      	pop	{r4, r5, r7, pc}
 800327c:	20000001 	.word	0x20000001
 8003280:	20000c68 	.word	0x20000c68
 8003284:	20001727 	.word	0x20001727
 8003288:	20001728 	.word	0x20001728

0800328c <_Z6squaref>:

float square(float x) {
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
	float y = x*x;
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fd fd4c 	bl	8000d34 <__aeabi_fmul>
 800329c:	4603      	mov	r3, r0
 800329e:	60fb      	str	r3, [r7, #12]
	return y;
 80032a0:	68fb      	ldr	r3, [r7, #12]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <_Z6PWMYazv>:

void PWMYaz() {
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
*/

#ifdef UAV1


		  if(armed) {
 80032b0:	4b35      	ldr	r3, [pc, #212]	; (8003388 <_Z6PWMYazv+0xdc>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d04f      	beq.n	8003358 <_Z6PWMYazv+0xac>

			  if(in_failsafe) {
 80032b8:	4b34      	ldr	r3, [pc, #208]	; (800338c <_Z6PWMYazv+0xe0>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d014      	beq.n	80032ea <_Z6PWMYazv+0x3e>
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1300);
 80032c0:	4b33      	ldr	r3, [pc, #204]	; (8003390 <_Z6PWMYazv+0xe4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f240 5214 	movw	r2, #1300	; 0x514
 80032c8:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1300);
 80032ca:	4b31      	ldr	r3, [pc, #196]	; (8003390 <_Z6PWMYazv+0xe4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f240 5214 	movw	r2, #1300	; 0x514
 80032d2:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1300);
 80032d4:	4b2e      	ldr	r3, [pc, #184]	; (8003390 <_Z6PWMYazv+0xe4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f240 5214 	movw	r2, #1300	; 0x514
 80032dc:	63da      	str	r2, [r3, #60]	; 0x3c
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1300);
 80032de:	4b2c      	ldr	r3, [pc, #176]	; (8003390 <_Z6PWMYazv+0xe4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f240 5214 	movw	r2, #1300	; 0x514
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
	  }
#endif

}
 80032e8:	e04a      	b.n	8003380 <_Z6PWMYazv+0xd4>
				  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > CH3_MIN + 100) {
 80032ea:	4b2a      	ldr	r3, [pc, #168]	; (8003394 <_Z6PWMYazv+0xe8>)
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f240 52db 	movw	r2, #1499	; 0x5db
 80032f2:	4293      	cmp	r3, r2
 80032f4:	dc1b      	bgt.n	800332e <_Z6PWMYazv+0x82>
 80032f6:	4b27      	ldr	r3, [pc, #156]	; (8003394 <_Z6PWMYazv+0xe8>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f240 424c 	movw	r2, #1100	; 0x44c
 80032fe:	4293      	cmp	r3, r2
 8003300:	dd15      	ble.n	800332e <_Z6PWMYazv+0x82>
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output[0]);
 8003302:	4b25      	ldr	r3, [pc, #148]	; (8003398 <_Z6PWMYazv+0xec>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	4b22      	ldr	r3, [pc, #136]	; (8003390 <_Z6PWMYazv+0xe4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	635a      	str	r2, [r3, #52]	; 0x34
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output[1]);
 800330c:	4b22      	ldr	r3, [pc, #136]	; (8003398 <_Z6PWMYazv+0xec>)
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	4b1f      	ldr	r3, [pc, #124]	; (8003390 <_Z6PWMYazv+0xe4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	639a      	str	r2, [r3, #56]	; 0x38
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output[2]);
 8003316:	4b20      	ldr	r3, [pc, #128]	; (8003398 <_Z6PWMYazv+0xec>)
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <_Z6PWMYazv+0xe4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	63da      	str	r2, [r3, #60]	; 0x3c
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output[3]);
 8003320:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <_Z6PWMYazv+0xec>)
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	4b1a      	ldr	r3, [pc, #104]	; (8003390 <_Z6PWMYazv+0xe4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	641a      	str	r2, [r3, #64]	; 0x40
 800332a:	bf00      	nop
}
 800332c:	e028      	b.n	8003380 <_Z6PWMYazv+0xd4>
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 800332e:	4b18      	ldr	r3, [pc, #96]	; (8003390 <_Z6PWMYazv+0xe4>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003336:	635a      	str	r2, [r3, #52]	; 0x34
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8003338:	4b15      	ldr	r3, [pc, #84]	; (8003390 <_Z6PWMYazv+0xe4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003340:	639a      	str	r2, [r3, #56]	; 0x38
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8003342:	4b13      	ldr	r3, [pc, #76]	; (8003390 <_Z6PWMYazv+0xe4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800334a:	63da      	str	r2, [r3, #60]	; 0x3c
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 800334c:	4b10      	ldr	r3, [pc, #64]	; (8003390 <_Z6PWMYazv+0xe4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003354:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003356:	e013      	b.n	8003380 <_Z6PWMYazv+0xd4>
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8003358:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <_Z6PWMYazv+0xe4>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003360:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8003362:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <_Z6PWMYazv+0xe4>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800336a:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 800336c:	4b08      	ldr	r3, [pc, #32]	; (8003390 <_Z6PWMYazv+0xe4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003374:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <_Z6PWMYazv+0xe4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800337e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr
 8003388:	20001679 	.word	0x20001679
 800338c:	2000171e 	.word	0x2000171e
 8003390:	20001924 	.word	0x20001924
 8003394:	20001610 	.word	0x20001610
 8003398:	200015e0 	.word	0x200015e0

0800339c <_Z7GyroErrh>:


float GyroErr(uint8_t addr) {
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 80033ac:	2300      	movs	r3, #0
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80033b6:	da12      	bge.n	80033de <_Z7GyroErrh+0x42>
	{
		GyroXh += (GyroOku(addr));
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fc40 	bl	8002c40 <_Z7GyroOkuh>
 80033c0:	4603      	mov	r3, r0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd fc62 	bl	8000c8c <__aeabi_i2f>
 80033c8:	4603      	mov	r3, r0
 80033ca:	4619      	mov	r1, r3
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f7fd fba9 	bl	8000b24 <__addsf3>
 80033d2:	4603      	mov	r3, r0
 80033d4:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	3301      	adds	r3, #1
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	e7e8      	b.n	80033b0 <_Z7GyroErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 80033de:	4905      	ldr	r1, [pc, #20]	; (80033f4 <_Z7GyroErrh+0x58>)
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f7fd fd5b 	bl	8000e9c <__aeabi_fdiv>
 80033e6:	4603      	mov	r3, r0
 80033e8:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 80033ea:	68fb      	ldr	r3, [r7, #12]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	44fa0000 	.word	0x44fa0000

080033f8 <_Z6AccErrh>:

float AccErr(uint8_t addr) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8003408:	2300      	movs	r3, #0
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003412:	da12      	bge.n	800343a <_Z6AccErrh+0x42>
	{
		GyroXh += (AccOku(addr));
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fc98 	bl	8002d4c <_Z6AccOkuh>
 800341c:	4603      	mov	r3, r0
 800341e:	4618      	mov	r0, r3
 8003420:	f7fd fc34 	bl	8000c8c <__aeabi_i2f>
 8003424:	4603      	mov	r3, r0
 8003426:	4619      	mov	r1, r3
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f7fd fb7b 	bl	8000b24 <__addsf3>
 800342e:	4603      	mov	r3, r0
 8003430:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	3301      	adds	r3, #1
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	e7e8      	b.n	800340c <_Z6AccErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 800343a:	4905      	ldr	r1, [pc, #20]	; (8003450 <_Z6AccErrh+0x58>)
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f7fd fd2d 	bl	8000e9c <__aeabi_fdiv>
 8003442:	4603      	mov	r3, r0
 8003444:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 8003446:	68fb      	ldr	r3, [r7, #12]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	44fa0000 	.word	0x44fa0000

08003454 <_Z11MotorBaslatv>:

void MotorBaslat(void) {
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8003458:	4b0c      	ldr	r3, [pc, #48]	; (800348c <_Z11MotorBaslatv+0x38>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003460:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <_Z11MotorBaslatv+0x38>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800346a:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 800346c:	4b07      	ldr	r3, [pc, #28]	; (800348c <_Z11MotorBaslatv+0x38>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003474:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8003476:	4b05      	ldr	r3, [pc, #20]	; (800348c <_Z11MotorBaslatv+0x38>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800347e:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 8003480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003484:	f002 fb06 	bl	8005a94 <HAL_Delay>
}
 8003488:	bf00      	nop
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20001924 	.word	0x20001924

08003490 <HAL_TIM_PeriodElapsedCallback>:
		home = true;
}
*/

//Ana Kontrolcü döngüsü
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8003490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003492:	b0a1      	sub	sp, #132	; 0x84
 8003494:	af0c      	add	r7, sp, #48	; 0x30
 8003496:	6178      	str	r0, [r7, #20]

	if(htim == &htim2) {
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	4a51      	ldr	r2, [pc, #324]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800349c:	4293      	cmp	r3, r2
 800349e:	f040 8568 	bne.w	8003f72 <HAL_TIM_PeriodElapsedCallback+0xae2>
		//1.25 ms || 800 Hz
		Check_Arm();
 80034a2:	f7ff f8d1 	bl	8002648 <_Z9Check_Armv>
		Check_Disarm();
 80034a6:	f7ff f933 	bl	8002710 <_Z12Check_Disarmv>

		set_ucounter(SONAR_CLOCK_RATE);
 80034aa:	2014      	movs	r0, #20
 80034ac:	f7fe fbde 	bl	8001c6c <set_ucounter>
		set_b_counter(12);
 80034b0:	200c      	movs	r0, #12
 80034b2:	f7fe fac3 	bl	8001a3c <set_b_counter>

		controller_counter++;
 80034b6:	4b4b      	ldr	r3, [pc, #300]	; (80035e4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	3301      	adds	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	4b49      	ldr	r3, [pc, #292]	; (80035e4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80034c0:	801a      	strh	r2, [r3, #0]
		camera_counter++;
 80034c2:	4b49      	ldr	r3, [pc, #292]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	3301      	adds	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	4b47      	ldr	r3, [pc, #284]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80034cc:	801a      	strh	r2, [r3, #0]
		mag_counter++;
 80034ce:	4b47      	ldr	r3, [pc, #284]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	3301      	adds	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	4b45      	ldr	r3, [pc, #276]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80034d8:	801a      	strh	r2, [r3, #0]

		#ifdef UAV1


		if(mag_counter == MAG_CLOCK_RATE) {
 80034da:	4b44      	ldr	r3, [pc, #272]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d146      	bne.n	8003570 <HAL_TIM_PeriodElapsedCallback+0xe0>
			mag_counter = 0;
 80034e2:	4b42      	ldr	r3, [pc, #264]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	801a      	strh	r2, [r3, #0]
			HMC5883L_getMagData(&MAG_X, &MAG_Y, &MAG_Z);
 80034e8:	4a41      	ldr	r2, [pc, #260]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80034ea:	4942      	ldr	r1, [pc, #264]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80034ec:	4842      	ldr	r0, [pc, #264]	; (80035f8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80034ee:	f7fd fead 	bl	800124c <HMC5883L_getMagData>
			MagCalib(MAG_X, MAG_Y, MAG_Z);
 80034f2:	4b41      	ldr	r3, [pc, #260]	; (80035f8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80034f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034f8:	4a3e      	ldr	r2, [pc, #248]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80034fa:	f9b2 1000 	ldrsh.w	r1, [r2]
 80034fe:	4a3c      	ldr	r2, [pc, #240]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003500:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003504:	4618      	mov	r0, r3
 8003506:	f7fe fecb 	bl	80022a0 <_Z8MagCalibsss>
			int16_t mag[3];
			mag[0] = MAG_X_CALIB;
 800350a:	4b3c      	ldr	r3, [pc, #240]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800350c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003510:	84bb      	strh	r3, [r7, #36]	; 0x24
			mag[1] = MAG_Y_CALIB;
 8003512:	4b3b      	ldr	r3, [pc, #236]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003514:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003518:	84fb      	strh	r3, [r7, #38]	; 0x26
			mag[2] = MAG_Z_CALIB;
 800351a:	4b3a      	ldr	r3, [pc, #232]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800351c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003520:	853b      	strh	r3, [r7, #40]	; 0x28

			int16_t acc[3];
			acc[0] = accX;
 8003522:	4b39      	ldr	r3, [pc, #228]	; (8003608 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7fd fde0 	bl	80010ec <__aeabi_f2iz>
 800352c:	4603      	mov	r3, r0
 800352e:	b21b      	sxth	r3, r3
 8003530:	83bb      	strh	r3, [r7, #28]
			acc[1] = accY;
 8003532:	4b36      	ldr	r3, [pc, #216]	; (800360c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fd fdd8 	bl	80010ec <__aeabi_f2iz>
 800353c:	4603      	mov	r3, r0
 800353e:	b21b      	sxth	r3, r3
 8003540:	83fb      	strh	r3, [r7, #30]
			acc[2] = accZ;
 8003542:	4b33      	ldr	r3, [pc, #204]	; (8003610 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fd fdd0 	bl	80010ec <__aeabi_f2iz>
 800354c:	4603      	mov	r3, r0
 800354e:	b21b      	sxth	r3, r3
 8003550:	843b      	strh	r3, [r7, #32]
			euler_angles = DCM2Euler(acc, mag);
 8003552:	4c30      	ldr	r4, [pc, #192]	; (8003614 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003554:	463b      	mov	r3, r7
 8003556:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800355a:	f107 011c 	add.w	r1, r7, #28
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff fc2a 	bl	8002db8 <_Z9DCM2EulerPsS_>
 8003564:	4623      	mov	r3, r4
 8003566:	463a      	mov	r2, r7
 8003568:	6810      	ldr	r0, [r2, #0]
 800356a:	6851      	ldr	r1, [r2, #4]
 800356c:	6892      	ldr	r2, [r2, #8]
 800356e:	c307      	stmia	r3!, {r0, r1, r2}

		}

		if(camera_counter == 40) {
 8003570:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	2b28      	cmp	r3, #40	; 0x28
 8003576:	d125      	bne.n	80035c4 <HAL_TIM_PeriodElapsedCallback+0x134>
			  camera_counter = 0;
 8003578:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800357a:	2200      	movs	r2, #0
 800357c:	801a      	strh	r2, [r3, #0]
			  memcpy(&cam_data_20, &cam_data, sizeof(cam_data));
 800357e:	4b26      	ldr	r3, [pc, #152]	; (8003618 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003580:	4a26      	ldr	r2, [pc, #152]	; (800361c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003582:	ca07      	ldmia	r2, {r0, r1, r2}
 8003584:	c303      	stmia	r3!, {r0, r1}
 8003586:	701a      	strb	r2, [r3, #0]
			  EKF.camx = (float)cam_data.y/100.0;
 8003588:	4b24      	ldr	r3, [pc, #144]	; (800361c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800358a:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800358e:	b21b      	sxth	r3, r3
 8003590:	4618      	mov	r0, r3
 8003592:	f7fd fb7b 	bl	8000c8c <__aeabi_i2f>
 8003596:	4603      	mov	r3, r0
 8003598:	4921      	ldr	r1, [pc, #132]	; (8003620 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800359a:	4618      	mov	r0, r3
 800359c:	f7fd fc7e 	bl	8000e9c <__aeabi_fdiv>
 80035a0:	4603      	mov	r3, r0
 80035a2:	461a      	mov	r2, r3
 80035a4:	4b1f      	ldr	r3, [pc, #124]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80035a6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

			  if(!cam_data.detected) {
 80035aa:	4b1c      	ldr	r3, [pc, #112]	; (800361c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d104      	bne.n	80035bc <HAL_TIM_PeriodElapsedCallback+0x12c>
				  EKF.Qc = 9e9;
 80035b2:	4b1c      	ldr	r3, [pc, #112]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80035b4:	4a1c      	ldr	r2, [pc, #112]	; (8003628 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80035b6:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 80035ba:	e003      	b.n	80035c4 <HAL_TIM_PeriodElapsedCallback+0x134>
			  }

			  else {
				  EKF.Qc = 2.7e-2;
 80035bc:	4b19      	ldr	r3, [pc, #100]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80035be:	4a1b      	ldr	r2, [pc, #108]	; (800362c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80035c0:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
			  }
		}

		if(get_ucounter() == 1) {
 80035c4:	f7fe fb6c 	bl	8001ca0 <get_ucounter>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	bf0c      	ite	eq
 80035ce:	2301      	moveq	r3, #1
 80035d0:	2300      	movne	r3, #0
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d02b      	beq.n	8003630 <HAL_TIM_PeriodElapsedCallback+0x1a0>
			request_range();
 80035d8:	f7fe fb0e 	bl	8001bf8 <request_range>
 80035dc:	e0e9      	b.n	80037b2 <HAL_TIM_PeriodElapsedCallback+0x322>
 80035de:	bf00      	nop
 80035e0:	2000196c 	.word	0x2000196c
 80035e4:	20001694 	.word	0x20001694
 80035e8:	20001696 	.word	0x20001696
 80035ec:	20001698 	.word	0x20001698
 80035f0:	20001714 	.word	0x20001714
 80035f4:	20001712 	.word	0x20001712
 80035f8:	20001710 	.word	0x20001710
 80035fc:	20001716 	.word	0x20001716
 8003600:	20001718 	.word	0x20001718
 8003604:	2000171a 	.word	0x2000171a
 8003608:	200008cc 	.word	0x200008cc
 800360c:	200008d0 	.word	0x200008d0
 8003610:	200008d4 	.word	0x200008d4
 8003614:	20001704 	.word	0x20001704
 8003618:	200016f8 	.word	0x200016f8
 800361c:	200016ec 	.word	0x200016ec
 8003620:	42c80000 	.word	0x42c80000
 8003624:	20000c68 	.word	0x20000c68
 8003628:	50061c46 	.word	0x50061c46
 800362c:	3cdd2f1b 	.word	0x3cdd2f1b
			//sonar_range = getRange();
		}


		else if (get_ucounter() == SONAR_CLOCK_RATE) {
 8003630:	f7fe fb36 	bl	8001ca0 <get_ucounter>
 8003634:	4603      	mov	r3, r0
 8003636:	2b14      	cmp	r3, #20
 8003638:	bf0c      	ite	eq
 800363a:	2301      	moveq	r3, #1
 800363c:	2300      	movne	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80b6 	beq.w	80037b2 <HAL_TIM_PeriodElapsedCallback+0x322>

		  sonar_range = getRange();
 8003646:	f7fe faf1 	bl	8001c2c <getRange>
 800364a:	4603      	mov	r3, r0
 800364c:	461a      	mov	r2, r3
 800364e:	4b70      	ldr	r3, [pc, #448]	; (8003810 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8003650:	601a      	str	r2, [r3, #0]
		  sonar_alt_ = sonar_alt;
 8003652:	4b70      	ldr	r3, [pc, #448]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a70      	ldr	r2, [pc, #448]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003658:	6013      	str	r3, [r2, #0]
		  sonar_vel_ = sonar_vel;
 800365a:	4b70      	ldr	r3, [pc, #448]	; (800381c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a70      	ldr	r2, [pc, #448]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8003660:	6013      	str	r3, [r2, #0]

		  float sonar_roll = abs(deg2rad*state.angles[0]);
 8003662:	4b70      	ldr	r3, [pc, #448]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4970      	ldr	r1, [pc, #448]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8003668:	4618      	mov	r0, r3
 800366a:	f7fd fb63 	bl	8000d34 <__aeabi_fmul>
 800366e:	4603      	mov	r3, r0
 8003670:	4618      	mov	r0, r3
 8003672:	f7fe fb8b 	bl	8001d8c <_ZSt3absf>
 8003676:	64f8      	str	r0, [r7, #76]	; 0x4c
		  float sonar_pitch = abs(deg2rad*state.angles[1]);
 8003678:	4b6a      	ldr	r3, [pc, #424]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x394>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	496a      	ldr	r1, [pc, #424]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x398>)
 800367e:	4618      	mov	r0, r3
 8003680:	f7fd fb58 	bl	8000d34 <__aeabi_fmul>
 8003684:	4603      	mov	r3, r0
 8003686:	4618      	mov	r0, r3
 8003688:	f7fe fb80 	bl	8001d8c <_ZSt3absf>
 800368c:	64b8      	str	r0, [r7, #72]	; 0x48
		  sonar_alt = (float)sonar_range/100.0 * cos(sonar_roll)* cos(sonar_pitch);
 800368e:	4b60      	ldr	r3, [pc, #384]	; (8003810 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fd faf6 	bl	8000c84 <__aeabi_ui2f>
 8003698:	4603      	mov	r3, r0
 800369a:	4618      	mov	r0, r3
 800369c:	f7fc febc 	bl	8000418 <__aeabi_f2d>
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	4b61      	ldr	r3, [pc, #388]	; (800382c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80036a6:	f7fd f839 	bl	800071c <__aeabi_ddiv>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4614      	mov	r4, r2
 80036b0:	461d      	mov	r5, r3
 80036b2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80036b4:	f7fe f9dc 	bl	8001a70 <_ZSt3cosf>
 80036b8:	4603      	mov	r3, r0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fc feac 	bl	8000418 <__aeabi_f2d>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4620      	mov	r0, r4
 80036c6:	4629      	mov	r1, r5
 80036c8:	f7fc fefe 	bl	80004c8 <__aeabi_dmul>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4614      	mov	r4, r2
 80036d2:	461d      	mov	r5, r3
 80036d4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80036d6:	f7fe f9cb 	bl	8001a70 <_ZSt3cosf>
 80036da:	4603      	mov	r3, r0
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fc fe9b 	bl	8000418 <__aeabi_f2d>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4620      	mov	r0, r4
 80036e8:	4629      	mov	r1, r5
 80036ea:	f7fc feed 	bl	80004c8 <__aeabi_dmul>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	4610      	mov	r0, r2
 80036f4:	4619      	mov	r1, r3
 80036f6:	f7fd f9bf 	bl	8000a78 <__aeabi_d2f>
 80036fa:	4603      	mov	r3, r0
 80036fc:	4a45      	ldr	r2, [pc, #276]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80036fe:	6013      	str	r3, [r2, #0]
		  float sonar_st = (float)(1.0/SONAR_CLOCK);
 8003700:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8003704:	647b      	str	r3, [r7, #68]	; 0x44
		  sonar_vel = (sonar_alt - sonar_alt_)/sonar_st;
 8003706:	4b43      	ldr	r3, [pc, #268]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a43      	ldr	r2, [pc, #268]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	4611      	mov	r1, r2
 8003710:	4618      	mov	r0, r3
 8003712:	f7fd fa05 	bl	8000b20 <__aeabi_fsub>
 8003716:	4603      	mov	r3, r0
 8003718:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800371a:	4618      	mov	r0, r3
 800371c:	f7fd fbbe 	bl	8000e9c <__aeabi_fdiv>
 8003720:	4603      	mov	r3, r0
 8003722:	461a      	mov	r2, r3
 8003724:	4b3d      	ldr	r3, [pc, #244]	; (800381c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8003726:	601a      	str	r2, [r3, #0]


		  if (abs(sonar_vel) > 7) {
 8003728:	4b3c      	ldr	r3, [pc, #240]	; (800381c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7fe fb2d 	bl	8001d8c <_ZSt3absf>
 8003732:	4603      	mov	r3, r0
 8003734:	2201      	movs	r2, #1
 8003736:	4614      	mov	r4, r2
 8003738:	493d      	ldr	r1, [pc, #244]	; (8003830 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 800373a:	4618      	mov	r0, r3
 800373c:	f7fd fcb6 	bl	80010ac <__aeabi_fcmpgt>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_TIM_PeriodElapsedCallback+0x2ba>
 8003746:	2300      	movs	r3, #0
 8003748:	461c      	mov	r4, r3
 800374a:	b2e3      	uxtb	r3, r4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d007      	beq.n	8003760 <HAL_TIM_PeriodElapsedCallback+0x2d0>
			  sonar_alt = sonar_alt_;
 8003750:	4b31      	ldr	r3, [pc, #196]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a2f      	ldr	r2, [pc, #188]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8003756:	6013      	str	r3, [r2, #0]
			  sonar_vel = sonar_vel_;
 8003758:	4b31      	ldr	r3, [pc, #196]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a2f      	ldr	r2, [pc, #188]	; (800381c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800375e:	6013      	str	r3, [r2, #0]
		  }

		  if(sonar_alt > 6 || sonar_alt < 0.3) {
 8003760:	4b2c      	ldr	r3, [pc, #176]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4933      	ldr	r1, [pc, #204]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd fca0 	bl	80010ac <__aeabi_fcmpgt>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10c      	bne.n	800378c <HAL_TIM_PeriodElapsedCallback+0x2fc>
 8003772:	4b28      	ldr	r3, [pc, #160]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7fc fe4e 	bl	8000418 <__aeabi_f2d>
 800377c:	a322      	add	r3, pc, #136	; (adr r3, 8003808 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800377e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003782:	f7fd f913 	bl	80009ac <__aeabi_dcmplt>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_TIM_PeriodElapsedCallback+0x30e>
			  EKF.Qs = 9e9;
 800378c:	4b2a      	ldr	r3, [pc, #168]	; (8003838 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 800378e:	4a2b      	ldr	r2, [pc, #172]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8003790:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
			  EKF.salt = 50;
 8003794:	4b28      	ldr	r3, [pc, #160]	; (8003838 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8003796:	4a2a      	ldr	r2, [pc, #168]	; (8003840 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8003798:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 800379c:	e009      	b.n	80037b2 <HAL_TIM_PeriodElapsedCallback+0x322>
		  }

		  else {
			  EKF.Qs = 0.25;
 800379e:	4b26      	ldr	r3, [pc, #152]	; (8003838 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80037a0:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80037a4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
			  EKF.salt = 1;
 80037a8:	4b23      	ldr	r3, [pc, #140]	; (8003838 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80037aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80037ae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
		  }


		}

		if(get_b_counter() == 1) {
 80037b2:	f7fe f939 	bl	8001a28 <get_b_counter>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_TIM_PeriodElapsedCallback+0x33c>
			write_ut();
 80037c6:	f7fd ff2d 	bl	8001624 <write_ut>
 80037ca:	e06b      	b.n	80038a4 <HAL_TIM_PeriodElapsedCallback+0x414>
		}

		else if(get_b_counter() == 5) { //5 ms
 80037cc:	f7fe f92c 	bl	8001a28 <get_b_counter>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	bf0c      	ite	eq
 80037d6:	2301      	moveq	r3, #1
 80037d8:	2300      	movne	r3, #0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d033      	beq.n	8003848 <HAL_TIM_PeriodElapsedCallback+0x3b8>
			bmp.uncomp.temp = read_ut ();
 80037e0:	f7fd ff38 	bl	8001654 <read_ut>
 80037e4:	4603      	mov	r3, r0
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fd fa50 	bl	8000c8c <__aeabi_i2f>
 80037ec:	4603      	mov	r3, r0
 80037ee:	4a15      	ldr	r2, [pc, #84]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80037f0:	6193      	str	r3, [r2, #24]
			bmp.data.temp = get_temp (&bmp);
 80037f2:	4814      	ldr	r0, [pc, #80]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80037f4:	f7fd ff48 	bl	8001688 <get_temp>
 80037f8:	4603      	mov	r3, r0
 80037fa:	4a12      	ldr	r2, [pc, #72]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80037fc:	6293      	str	r3, [r2, #40]	; 0x28
			write_up();
 80037fe:	f7fd ff9b 	bl	8001738 <write_up>
 8003802:	e04f      	b.n	80038a4 <HAL_TIM_PeriodElapsedCallback+0x414>
 8003804:	f3af 8000 	nop.w
 8003808:	33333333 	.word	0x33333333
 800380c:	3fd33333 	.word	0x3fd33333
 8003810:	20001690 	.word	0x20001690
 8003814:	20001680 	.word	0x20001680
 8003818:	20001684 	.word	0x20001684
 800381c:	20001688 	.word	0x20001688
 8003820:	2000168c 	.word	0x2000168c
 8003824:	2000092c 	.word	0x2000092c
 8003828:	3c8e8a72 	.word	0x3c8e8a72
 800382c:	40590000 	.word	0x40590000
 8003830:	40e00000 	.word	0x40e00000
 8003834:	40c00000 	.word	0x40c00000
 8003838:	20000c68 	.word	0x20000c68
 800383c:	50061c46 	.word	0x50061c46
 8003840:	42480000 	.word	0x42480000
 8003844:	2000169c 	.word	0x2000169c
		}

		else if(get_b_counter() == 12) { //
 8003848:	f7fe f8ee 	bl	8001a28 <get_b_counter>
 800384c:	4603      	mov	r3, r0
 800384e:	2b0c      	cmp	r3, #12
 8003850:	bf0c      	ite	eq
 8003852:	2301      	moveq	r3, #1
 8003854:	2300      	movne	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d023      	beq.n	80038a4 <HAL_TIM_PeriodElapsedCallback+0x414>
			bmp.uncomp.press = read_up (bmp.oss);
 800385c:	4ba8      	ldr	r3, [pc, #672]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800385e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003860:	f7fd ff8a 	bl	8001778 <read_up>
 8003864:	4603      	mov	r3, r0
 8003866:	4aa6      	ldr	r2, [pc, #664]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8003868:	61d3      	str	r3, [r2, #28]
			bmp.data.press = get_pressure (bmp);
 800386a:	4ea5      	ldr	r6, [pc, #660]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800386c:	466d      	mov	r5, sp
 800386e:	f106 0410 	add.w	r4, r6, #16
 8003872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003878:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800387a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800387e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003882:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003886:	f7fd ffa5 	bl	80017d4 <get_pressure>
 800388a:	4603      	mov	r3, r0
 800388c:	4a9c      	ldr	r2, [pc, #624]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800388e:	62d3      	str	r3, [r2, #44]	; 0x2c
			bmp.data.altitude = get_altitude (&bmp);
 8003890:	489b      	ldr	r0, [pc, #620]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8003892:	f7fe f86d 	bl	8001970 <get_altitude>
 8003896:	4603      	mov	r3, r0
 8003898:	4a99      	ldr	r2, [pc, #612]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800389a:	6353      	str	r3, [r2, #52]	; 0x34
			baro_alt = bmp.data.altitude;
 800389c:	4b98      	ldr	r3, [pc, #608]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800389e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a0:	4a98      	ldr	r2, [pc, #608]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x674>)
 80038a2:	6013      	str	r3, [r2, #0]


		}
#endif

		if(controller_counter == CONTROLLER_RATE) { //5 ms || 200 Hz
 80038a4:	4b98      	ldr	r3, [pc, #608]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	f040 8362 	bne.w	8003f72 <HAL_TIM_PeriodElapsedCallback+0xae2>
			_controller_timer = controller_timer;
 80038ae:	4b97      	ldr	r3, [pc, #604]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x67c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a97      	ldr	r2, [pc, #604]	; (8003b10 <HAL_TIM_PeriodElapsedCallback+0x680>)
 80038b4:	6013      	str	r3, [r2, #0]
			controller_timer = HAL_GetTick();
 80038b6:	f002 f8e3 	bl	8005a80 <HAL_GetTick>
 80038ba:	4603      	mov	r3, r0
 80038bc:	461a      	mov	r2, r3
 80038be:	4b93      	ldr	r3, [pc, #588]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x67c>)
 80038c0:	601a      	str	r2, [r3, #0]
			controller_timer_dif = controller_timer-_controller_timer;
 80038c2:	4b92      	ldr	r3, [pc, #584]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x67c>)
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	4b92      	ldr	r3, [pc, #584]	; (8003b10 <HAL_TIM_PeriodElapsedCallback+0x680>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	4a91      	ldr	r2, [pc, #580]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x684>)
 80038ce:	6013      	str	r3, [r2, #0]
			controller_counter = 0;
 80038d0:	4b8d      	ldr	r3, [pc, #564]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	801a      	strh	r2, [r3, #0]


#ifdef UAV1

		  gyroX = (GyroOku(GYRO_X_ADDR)- GyroXh)/14.375 ;
 80038d6:	201d      	movs	r0, #29
 80038d8:	f7ff f9b2 	bl	8002c40 <_Z7GyroOkuh>
 80038dc:	4603      	mov	r3, r0
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fd f9d4 	bl	8000c8c <__aeabi_i2f>
 80038e4:	4602      	mov	r2, r0
 80038e6:	4b8c      	ldr	r3, [pc, #560]	; (8003b18 <HAL_TIM_PeriodElapsedCallback+0x688>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4619      	mov	r1, r3
 80038ec:	4610      	mov	r0, r2
 80038ee:	f7fd f917 	bl	8000b20 <__aeabi_fsub>
 80038f2:	4603      	mov	r3, r0
 80038f4:	4989      	ldr	r1, [pc, #548]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x68c>)
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fd fad0 	bl	8000e9c <__aeabi_fdiv>
 80038fc:	4603      	mov	r3, r0
 80038fe:	461a      	mov	r2, r3
 8003900:	4b87      	ldr	r3, [pc, #540]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8003902:	601a      	str	r2, [r3, #0]
		  gyroY = (GyroOku(GYRO_Y_ADDR)- GyroYh)/14.375 ;
 8003904:	201f      	movs	r0, #31
 8003906:	f7ff f99b 	bl	8002c40 <_Z7GyroOkuh>
 800390a:	4603      	mov	r3, r0
 800390c:	4618      	mov	r0, r3
 800390e:	f7fd f9bd 	bl	8000c8c <__aeabi_i2f>
 8003912:	4602      	mov	r2, r0
 8003914:	4b83      	ldr	r3, [pc, #524]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4619      	mov	r1, r3
 800391a:	4610      	mov	r0, r2
 800391c:	f7fd f900 	bl	8000b20 <__aeabi_fsub>
 8003920:	4603      	mov	r3, r0
 8003922:	497e      	ldr	r1, [pc, #504]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8003924:	4618      	mov	r0, r3
 8003926:	f7fd fab9 	bl	8000e9c <__aeabi_fdiv>
 800392a:	4603      	mov	r3, r0
 800392c:	461a      	mov	r2, r3
 800392e:	4b7e      	ldr	r3, [pc, #504]	; (8003b28 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8003930:	601a      	str	r2, [r3, #0]
		  gyroZ = (GyroOku(GYRO_Z_ADDR)- GyroZh)/14.375 ;
 8003932:	2021      	movs	r0, #33	; 0x21
 8003934:	f7ff f984 	bl	8002c40 <_Z7GyroOkuh>
 8003938:	4603      	mov	r3, r0
 800393a:	4618      	mov	r0, r3
 800393c:	f7fd f9a6 	bl	8000c8c <__aeabi_i2f>
 8003940:	4602      	mov	r2, r0
 8003942:	4b7a      	ldr	r3, [pc, #488]	; (8003b2c <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4619      	mov	r1, r3
 8003948:	4610      	mov	r0, r2
 800394a:	f7fd f8e9 	bl	8000b20 <__aeabi_fsub>
 800394e:	4603      	mov	r3, r0
 8003950:	4972      	ldr	r1, [pc, #456]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8003952:	4618      	mov	r0, r3
 8003954:	f7fd faa2 	bl	8000e9c <__aeabi_fdiv>
 8003958:	4603      	mov	r3, r0
 800395a:	461a      	mov	r2, r3
 800395c:	4b74      	ldr	r3, [pc, #464]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 800395e:	601a      	str	r2, [r3, #0]
		  //gyroX_a += gyroX_a_x * st;



		  //float gyro[3];
		  EKF.gyro[0] = gyroX;
 8003960:	4b6f      	ldr	r3, [pc, #444]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a73      	ldr	r2, [pc, #460]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8003966:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
		  EKF.gyro[1] = -1*gyroY;
 800396a:	4b6f      	ldr	r3, [pc, #444]	; (8003b28 <HAL_TIM_PeriodElapsedCallback+0x698>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003972:	4a70      	ldr	r2, [pc, #448]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8003974:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		  EKF.gyro[2] = gyroZ;
 8003978:	4b6d      	ldr	r3, [pc, #436]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a6d      	ldr	r2, [pc, #436]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 800397e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

		  //İvmeölçer degerlerini oku

		  accX = AccOku(ACC_X_ADDR);
 8003982:	2032      	movs	r0, #50	; 0x32
 8003984:	f7ff f9e2 	bl	8002d4c <_Z6AccOkuh>
 8003988:	4603      	mov	r3, r0
 800398a:	4618      	mov	r0, r3
 800398c:	f7fd f97e 	bl	8000c8c <__aeabi_i2f>
 8003990:	4603      	mov	r3, r0
 8003992:	4a69      	ldr	r2, [pc, #420]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8003994:	6013      	str	r3, [r2, #0]
		  accY = AccOku(ACC_Y_ADDR);
 8003996:	2034      	movs	r0, #52	; 0x34
 8003998:	f7ff f9d8 	bl	8002d4c <_Z6AccOkuh>
 800399c:	4603      	mov	r3, r0
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd f974 	bl	8000c8c <__aeabi_i2f>
 80039a4:	4603      	mov	r3, r0
 80039a6:	4a65      	ldr	r2, [pc, #404]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80039a8:	6013      	str	r3, [r2, #0]
		  accZ = AccOku(ACC_Z_ADDR);
 80039aa:	2036      	movs	r0, #54	; 0x36
 80039ac:	f7ff f9ce 	bl	8002d4c <_Z6AccOkuh>
 80039b0:	4603      	mov	r3, r0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fd f96a 	bl	8000c8c <__aeabi_i2f>
 80039b8:	4603      	mov	r3, r0
 80039ba:	4a61      	ldr	r2, [pc, #388]	; (8003b40 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 80039bc:	6013      	str	r3, [r2, #0]

		  accX = (1+Sx) * accX + bx;
 80039be:	4b5e      	ldr	r3, [pc, #376]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4960      	ldr	r1, [pc, #384]	; (8003b44 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fd f9b5 	bl	8000d34 <__aeabi_fmul>
 80039ca:	4603      	mov	r3, r0
 80039cc:	495e      	ldr	r1, [pc, #376]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fd f8a6 	bl	8000b20 <__aeabi_fsub>
 80039d4:	4603      	mov	r3, r0
 80039d6:	461a      	mov	r2, r3
 80039d8:	4b57      	ldr	r3, [pc, #348]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 80039da:	601a      	str	r2, [r3, #0]
		  accY = (1+Sy) * accY + by;
 80039dc:	4b57      	ldr	r3, [pc, #348]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	495a      	ldr	r1, [pc, #360]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fd f9a6 	bl	8000d34 <__aeabi_fmul>
 80039e8:	4603      	mov	r3, r0
 80039ea:	4959      	ldr	r1, [pc, #356]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fd f899 	bl	8000b24 <__addsf3>
 80039f2:	4603      	mov	r3, r0
 80039f4:	461a      	mov	r2, r3
 80039f6:	4b51      	ldr	r3, [pc, #324]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80039f8:	601a      	str	r2, [r3, #0]
		  accZ = (1+Sz) * accZ + bz;
 80039fa:	4b51      	ldr	r3, [pc, #324]	; (8003b40 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4955      	ldr	r1, [pc, #340]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fd f997 	bl	8000d34 <__aeabi_fmul>
 8003a06:	4603      	mov	r3, r0
 8003a08:	4953      	ldr	r1, [pc, #332]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fd f88a 	bl	8000b24 <__addsf3>
 8003a10:	4603      	mov	r3, r0
 8003a12:	461a      	mov	r2, r3
 8003a14:	4b4a      	ldr	r3, [pc, #296]	; (8003b40 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8003a16:	601a      	str	r2, [r3, #0]

		  accXc = (float)accX* 0.0078;
 8003a18:	4b47      	ldr	r3, [pc, #284]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fc fcfb 	bl	8000418 <__aeabi_f2d>
 8003a22:	a335      	add	r3, pc, #212	; (adr r3, 8003af8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	f7fc fd4e 	bl	80004c8 <__aeabi_dmul>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4610      	mov	r0, r2
 8003a32:	4619      	mov	r1, r3
 8003a34:	f7fd f820 	bl	8000a78 <__aeabi_d2f>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4a48      	ldr	r2, [pc, #288]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8003a3c:	6013      	str	r3, [r2, #0]
		  accYc = (float)accY* 0.0078;
 8003a3e:	4b3f      	ldr	r3, [pc, #252]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fc fce8 	bl	8000418 <__aeabi_f2d>
 8003a48:	a32b      	add	r3, pc, #172	; (adr r3, 8003af8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8003a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4e:	f7fc fd3b 	bl	80004c8 <__aeabi_dmul>
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	4610      	mov	r0, r2
 8003a58:	4619      	mov	r1, r3
 8003a5a:	f7fd f80d 	bl	8000a78 <__aeabi_d2f>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4a3f      	ldr	r2, [pc, #252]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8003a62:	6013      	str	r3, [r2, #0]
		  accZc = (float)accZ* 0.0078;
 8003a64:	4b36      	ldr	r3, [pc, #216]	; (8003b40 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fc fcd5 	bl	8000418 <__aeabi_f2d>
 8003a6e:	a322      	add	r3, pc, #136	; (adr r3, 8003af8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f7fc fd28 	bl	80004c8 <__aeabi_dmul>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	4619      	mov	r1, r3
 8003a80:	f7fc fffa 	bl	8000a78 <__aeabi_d2f>
 8003a84:	4603      	mov	r3, r0
 8003a86:	4a37      	ldr	r2, [pc, #220]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8003a88:	6013      	str	r3, [r2, #0]

		  //float acc[3];
		  EKF.acc[0] = accX;// - AccXh;
 8003a8a:	4b2b      	ldr	r3, [pc, #172]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a29      	ldr	r2, [pc, #164]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8003a90:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		  EKF.acc[1] = accY;// - AccYh;
 8003a94:	4b29      	ldr	r3, [pc, #164]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a26      	ldr	r2, [pc, #152]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8003a9a:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
		  EKF.acc[2] = accZ;// - AccZh;
 8003a9e:	4b28      	ldr	r3, [pc, #160]	; (8003b40 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a24      	ldr	r2, [pc, #144]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8003aa4:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

		  //float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
		 // pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı

		  float g = 9.81;
 8003aa8:	4b2f      	ldr	r3, [pc, #188]	; (8003b68 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8003aaa:	643b      	str	r3, [r7, #64]	; 0x40
		  float roll_r  = deg2rad*EKF.state.angles[0];
 8003aac:	4b21      	ldr	r3, [pc, #132]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8003aae:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003ab2:	492e      	ldr	r1, [pc, #184]	; (8003b6c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fd f93d 	bl	8000d34 <__aeabi_fmul>
 8003aba:	4603      	mov	r3, r0
 8003abc:	63fb      	str	r3, [r7, #60]	; 0x3c
		  float pitch_r = deg2rad*EKF.state.angles[1];
 8003abe:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8003ac0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003ac4:	4929      	ldr	r1, [pc, #164]	; (8003b6c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fd f934 	bl	8000d34 <__aeabi_fmul>
 8003acc:	4603      	mov	r3, r0
 8003ace:	63bb      	str	r3, [r7, #56]	; 0x38

		  //g body components, Without * g
		  float gx = sin(pitch_r);
 8003ad0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ad2:	f7fd ffd9 	bl	8001a88 <_ZSt3sinf>
 8003ad6:	6378      	str	r0, [r7, #52]	; 0x34
		  float gy = cos(pitch_r)*sin(roll_r);
 8003ad8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ada:	f7fd ffc9 	bl	8001a70 <_ZSt3cosf>
 8003ade:	4604      	mov	r4, r0
 8003ae0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003ae2:	f7fd ffd1 	bl	8001a88 <_ZSt3sinf>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4620      	mov	r0, r4
 8003aec:	f7fd f922 	bl	8000d34 <__aeabi_fmul>
 8003af0:	e03e      	b.n	8003b70 <HAL_TIM_PeriodElapsedCallback+0x6e0>
 8003af2:	bf00      	nop
 8003af4:	f3af 8000 	nop.w
 8003af8:	8e8a71de 	.word	0x8e8a71de
 8003afc:	3f7ff2e4 	.word	0x3f7ff2e4
 8003b00:	2000169c 	.word	0x2000169c
 8003b04:	2000167c 	.word	0x2000167c
 8003b08:	20001694 	.word	0x20001694
 8003b0c:	200016e0 	.word	0x200016e0
 8003b10:	200016e4 	.word	0x200016e4
 8003b14:	200016e8 	.word	0x200016e8
 8003b18:	200008f0 	.word	0x200008f0
 8003b1c:	41660000 	.word	0x41660000
 8003b20:	200008c0 	.word	0x200008c0
 8003b24:	200008f4 	.word	0x200008f4
 8003b28:	200008c4 	.word	0x200008c4
 8003b2c:	200008f8 	.word	0x200008f8
 8003b30:	200008c8 	.word	0x200008c8
 8003b34:	20000c68 	.word	0x20000c68
 8003b38:	200008cc 	.word	0x200008cc
 8003b3c:	200008d0 	.word	0x200008d0
 8003b40:	200008d4 	.word	0x200008d4
 8003b44:	3f7f3b64 	.word	0x3f7f3b64
 8003b48:	3efae148 	.word	0x3efae148
 8003b4c:	3f7e978d 	.word	0x3f7e978d
 8003b50:	414d0a3d 	.word	0x414d0a3d
 8003b54:	3f797f63 	.word	0x3f797f63
 8003b58:	404d1eb8 	.word	0x404d1eb8
 8003b5c:	200008d8 	.word	0x200008d8
 8003b60:	200008dc 	.word	0x200008dc
 8003b64:	200008e0 	.word	0x200008e0
 8003b68:	411cf5c3 	.word	0x411cf5c3
 8003b6c:	3c8e8a72 	.word	0x3c8e8a72
 8003b70:	4603      	mov	r3, r0
 8003b72:	633b      	str	r3, [r7, #48]	; 0x30
		  float gz = cos(roll_r)*cos(pitch_r);
 8003b74:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003b76:	f7fd ff7b 	bl	8001a70 <_ZSt3cosf>
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003b7e:	f7fd ff77 	bl	8001a70 <_ZSt3cosf>
 8003b82:	4603      	mov	r3, r0
 8003b84:	4619      	mov	r1, r3
 8003b86:	4620      	mov	r0, r4
 8003b88:	f7fd f8d4 	bl	8000d34 <__aeabi_fmul>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	62fb      	str	r3, [r7, #44]	; 0x2c



		  accXc -= gx;
 8003b90:	4b99      	ldr	r3, [pc, #612]	; (8003df8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fc ffc2 	bl	8000b20 <__aeabi_fsub>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	4b95      	ldr	r3, [pc, #596]	; (8003df8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8003ba2:	601a      	str	r2, [r3, #0]
		  accYc -= gy;
 8003ba4:	4b95      	ldr	r3, [pc, #596]	; (8003dfc <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fc ffb8 	bl	8000b20 <__aeabi_fsub>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	4b91      	ldr	r3, [pc, #580]	; (8003dfc <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8003bb6:	601a      	str	r2, [r3, #0]
		  accZc -= gz;
 8003bb8:	4b91      	ldr	r3, [pc, #580]	; (8003e00 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fc ffae 	bl	8000b20 <__aeabi_fsub>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4b8d      	ldr	r3, [pc, #564]	; (8003e00 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8003bca:	601a      	str	r2, [r3, #0]

		  //Body to Local
		  accXm = accXc*cos(pitch_r) - accZc*cos(roll_r)*sin(pitch_r) - accYc*sin(roll_r)*sin(pitch_r);
 8003bcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003bce:	f7fd ff4f 	bl	8001a70 <_ZSt3cosf>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	4b88      	ldr	r3, [pc, #544]	; (8003df8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4610      	mov	r0, r2
 8003bdc:	f7fd f8aa 	bl	8000d34 <__aeabi_fmul>
 8003be0:	4603      	mov	r3, r0
 8003be2:	461c      	mov	r4, r3
 8003be4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003be6:	f7fd ff43 	bl	8001a70 <_ZSt3cosf>
 8003bea:	4602      	mov	r2, r0
 8003bec:	4b84      	ldr	r3, [pc, #528]	; (8003e00 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	f7fd f89e 	bl	8000d34 <__aeabi_fmul>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	461d      	mov	r5, r3
 8003bfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003bfe:	f7fd ff43 	bl	8001a88 <_ZSt3sinf>
 8003c02:	4603      	mov	r3, r0
 8003c04:	4619      	mov	r1, r3
 8003c06:	4628      	mov	r0, r5
 8003c08:	f7fd f894 	bl	8000d34 <__aeabi_fmul>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4620      	mov	r0, r4
 8003c12:	f7fc ff85 	bl	8000b20 <__aeabi_fsub>
 8003c16:	4603      	mov	r3, r0
 8003c18:	461c      	mov	r4, r3
 8003c1a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c1c:	f7fd ff34 	bl	8001a88 <_ZSt3sinf>
 8003c20:	4602      	mov	r2, r0
 8003c22:	4b76      	ldr	r3, [pc, #472]	; (8003dfc <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4619      	mov	r1, r3
 8003c28:	4610      	mov	r0, r2
 8003c2a:	f7fd f883 	bl	8000d34 <__aeabi_fmul>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	461d      	mov	r5, r3
 8003c32:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c34:	f7fd ff28 	bl	8001a88 <_ZSt3sinf>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	f7fd f879 	bl	8000d34 <__aeabi_fmul>
 8003c42:	4603      	mov	r3, r0
 8003c44:	4619      	mov	r1, r3
 8003c46:	4620      	mov	r0, r4
 8003c48:	f7fc ff6a 	bl	8000b20 <__aeabi_fsub>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	461a      	mov	r2, r3
 8003c50:	4b6c      	ldr	r3, [pc, #432]	; (8003e04 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8003c52:	601a      	str	r2, [r3, #0]
		  accYm = accYc*cos(roll_r) - accZc*sin(roll_r);
 8003c54:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c56:	f7fd ff0b 	bl	8001a70 <_ZSt3cosf>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	4b67      	ldr	r3, [pc, #412]	; (8003dfc <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4619      	mov	r1, r3
 8003c62:	4610      	mov	r0, r2
 8003c64:	f7fd f866 	bl	8000d34 <__aeabi_fmul>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	461c      	mov	r4, r3
 8003c6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c6e:	f7fd ff0b 	bl	8001a88 <_ZSt3sinf>
 8003c72:	4602      	mov	r2, r0
 8003c74:	4b62      	ldr	r3, [pc, #392]	; (8003e00 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	f7fd f85a 	bl	8000d34 <__aeabi_fmul>
 8003c80:	4603      	mov	r3, r0
 8003c82:	4619      	mov	r1, r3
 8003c84:	4620      	mov	r0, r4
 8003c86:	f7fc ff4b 	bl	8000b20 <__aeabi_fsub>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4b5e      	ldr	r3, [pc, #376]	; (8003e08 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8003c90:	601a      	str	r2, [r3, #0]
		  accZm = accZc*cos(roll_r)*cos(pitch_r) + accXc*sin(pitch_r) + accYc*cos(pitch_r)*sin(roll_r);
 8003c92:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c94:	f7fd feec 	bl	8001a70 <_ZSt3cosf>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b59      	ldr	r3, [pc, #356]	; (8003e00 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f7fd f847 	bl	8000d34 <__aeabi_fmul>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	461c      	mov	r4, r3
 8003caa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cac:	f7fd fee0 	bl	8001a70 <_ZSt3cosf>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f7fd f83d 	bl	8000d34 <__aeabi_fmul>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	461c      	mov	r4, r3
 8003cbe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cc0:	f7fd fee2 	bl	8001a88 <_ZSt3sinf>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	4b4c      	ldr	r3, [pc, #304]	; (8003df8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4610      	mov	r0, r2
 8003cce:	f7fd f831 	bl	8000d34 <__aeabi_fmul>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	f7fc ff24 	bl	8000b24 <__addsf3>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	461c      	mov	r4, r3
 8003ce0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ce2:	f7fd fec5 	bl	8001a70 <_ZSt3cosf>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	4b44      	ldr	r3, [pc, #272]	; (8003dfc <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f7fd f820 	bl	8000d34 <__aeabi_fmul>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	461d      	mov	r5, r3
 8003cf8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003cfa:	f7fd fec5 	bl	8001a88 <_ZSt3sinf>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4619      	mov	r1, r3
 8003d02:	4628      	mov	r0, r5
 8003d04:	f7fd f816 	bl	8000d34 <__aeabi_fmul>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	f7fc ff09 	bl	8000b24 <__addsf3>
 8003d12:	4603      	mov	r3, r0
 8003d14:	461a      	mov	r2, r3
 8003d16:	4b3d      	ldr	r3, [pc, #244]	; (8003e0c <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003d18:	601a      	str	r2, [r3, #0]


		  accXm *= g; accYm *= g; accZm *= g;
 8003d1a:	4b3a      	ldr	r3, [pc, #232]	; (8003e04 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fd f807 	bl	8000d34 <__aeabi_fmul>
 8003d26:	4603      	mov	r3, r0
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4b36      	ldr	r3, [pc, #216]	; (8003e04 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	4b36      	ldr	r3, [pc, #216]	; (8003e08 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fc fffd 	bl	8000d34 <__aeabi_fmul>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4b32      	ldr	r3, [pc, #200]	; (8003e08 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	4b32      	ldr	r3, [pc, #200]	; (8003e0c <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fc fff3 	bl	8000d34 <__aeabi_fmul>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	461a      	mov	r2, r3
 8003d52:	4b2e      	ldr	r3, [pc, #184]	; (8003e0c <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003d54:	601a      	str	r2, [r3, #0]

		  EKF.acc_vert = accZm;
 8003d56:	4b2d      	ldr	r3, [pc, #180]	; (8003e0c <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a2d      	ldr	r2, [pc, #180]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8003d5c:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270

		  EKF.accXm = accXm;// * deg2rad*EKF.state.angles[1];
 8003d60:	4b28      	ldr	r3, [pc, #160]	; (8003e04 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a2a      	ldr	r2, [pc, #168]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8003d66:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
		  EKF.accYm = accYm;
 8003d6a:	4b27      	ldr	r3, [pc, #156]	; (8003e08 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a28      	ldr	r2, [pc, #160]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8003d70:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
//		  EKF.acc_pos_x = accXm;
//		  EKF.acc_pos_y = -accYm;

		  EKF.sonar_alt = sonar_alt;
 8003d74:	4b27      	ldr	r3, [pc, #156]	; (8003e14 <HAL_TIM_PeriodElapsedCallback+0x984>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a25      	ldr	r2, [pc, #148]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8003d7a:	f8c2 327c 	str.w	r3, [r2, #636]	; 0x27c
		  EKF.baro_alt = baro_alt;
 8003d7e:	4b26      	ldr	r3, [pc, #152]	; (8003e18 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a23      	ldr	r2, [pc, #140]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8003d84:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
		  EKF.yaw_acc  = -1*euler_angles.yaw;
 8003d88:	4b24      	ldr	r3, [pc, #144]	; (8003e1c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003d90:	4a1f      	ldr	r2, [pc, #124]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8003d92:	f8c2 31e0 	str.w	r3, [r2, #480]	; 0x1e0

		  EKF.Run();
 8003d96:	481e      	ldr	r0, [pc, #120]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8003d98:	f009 fa08 	bl	800d1ac <_ZN15Kalman_Filtresi3RunEv>


		  state.angles[0]  	  = EKF.state.angles[0];
 8003d9c:	4b1c      	ldr	r3, [pc, #112]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8003d9e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003da2:	4a1f      	ldr	r2, [pc, #124]	; (8003e20 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8003da4:	6013      	str	r3, [r2, #0]
		  state.angles[1] 	  = EKF.state.angles[1];
 8003da6:	4b1a      	ldr	r3, [pc, #104]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8003da8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003dac:	4a1c      	ldr	r2, [pc, #112]	; (8003e20 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8003dae:	6053      	str	r3, [r2, #4]
		  state.angles[2]     = EKF.state.angles[2];
 8003db0:	4b17      	ldr	r3, [pc, #92]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8003db2:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8003db6:	4a1a      	ldr	r2, [pc, #104]	; (8003e20 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8003db8:	6093      	str	r3, [r2, #8]

		  state.rates[0] = EKF.state.rates[0];
 8003dba:	4b15      	ldr	r3, [pc, #84]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8003dbc:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8003dc0:	4a17      	ldr	r2, [pc, #92]	; (8003e20 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8003dc2:	60d3      	str	r3, [r2, #12]
		  state.rates[1] = EKF.state.rates[1];
 8003dc4:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8003dc6:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8003dca:	4a15      	ldr	r2, [pc, #84]	; (8003e20 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8003dcc:	6113      	str	r3, [r2, #16]
		  state.rates[2] = EKF.state.rates[2];
 8003dce:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8003dd0:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8003dd4:	4a12      	ldr	r2, [pc, #72]	; (8003e20 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8003dd6:	6153      	str	r3, [r2, #20]


		   checkMode(ch[MOD_CH-1]);
 8003dd8:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fe fb63 	bl	80024a8 <_Z9checkModei>

		   controller.z_vel = EKF.vz;
 8003de2:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8003de4:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8003de8:	4a0f      	ldr	r2, [pc, #60]	; (8003e28 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8003dea:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
		   controller.z = EKF.alt_gnd;
 8003dee:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8003df0:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8003df4:	e01a      	b.n	8003e2c <HAL_TIM_PeriodElapsedCallback+0x99c>
 8003df6:	bf00      	nop
 8003df8:	200008d8 	.word	0x200008d8
 8003dfc:	200008dc 	.word	0x200008dc
 8003e00:	200008e0 	.word	0x200008e0
 8003e04:	200008e4 	.word	0x200008e4
 8003e08:	200008e8 	.word	0x200008e8
 8003e0c:	200008ec 	.word	0x200008ec
 8003e10:	20000c68 	.word	0x20000c68
 8003e14:	20001680 	.word	0x20001680
 8003e18:	2000167c 	.word	0x2000167c
 8003e1c:	20001704 	.word	0x20001704
 8003e20:	2000092c 	.word	0x2000092c
 8003e24:	20001610 	.word	0x20001610
 8003e28:	20000fb0 	.word	0x20000fb0
 8003e2c:	4a53      	ldr	r2, [pc, #332]	; (8003f7c <HAL_TIM_PeriodElapsedCallback+0xaec>)
 8003e2e:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
//		   controller.x     = EKF.x;
//
//		   controller.vy	 = EKF.vy;
//		   controller.y     = EKF.y;

		  controller.state = state;
 8003e32:	4b52      	ldr	r3, [pc, #328]	; (8003f7c <HAL_TIM_PeriodElapsedCallback+0xaec>)
 8003e34:	4a52      	ldr	r2, [pc, #328]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0xaf0>)
 8003e36:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8003e3a:	4615      	mov	r5, r2
 8003e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e44:	682b      	ldr	r3, [r5, #0]
 8003e46:	6023      	str	r3, [r4, #0]
		  controller.state_des = state_des;
 8003e48:	4b4c      	ldr	r3, [pc, #304]	; (8003f7c <HAL_TIM_PeriodElapsedCallback+0xaec>)
 8003e4a:	4a4e      	ldr	r2, [pc, #312]	; (8003f84 <HAL_TIM_PeriodElapsedCallback+0xaf4>)
 8003e4c:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 8003e50:	4615      	mov	r5, r2
 8003e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e5a:	682b      	ldr	r3, [r5, #0]
 8003e5c:	6023      	str	r3, [r4, #0]
		  controller.ch3 = ch[2];
 8003e5e:	4b4a      	ldr	r3, [pc, #296]	; (8003f88 <HAL_TIM_PeriodElapsedCallback+0xaf8>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fc ff12 	bl	8000c8c <__aeabi_i2f>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	4a44      	ldr	r2, [pc, #272]	; (8003f7c <HAL_TIM_PeriodElapsedCallback+0xaec>)
 8003e6c:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		  controller.ch2 = ch[1];
 8003e70:	4b45      	ldr	r3, [pc, #276]	; (8003f88 <HAL_TIM_PeriodElapsedCallback+0xaf8>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fc ff09 	bl	8000c8c <__aeabi_i2f>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	4a3f      	ldr	r2, [pc, #252]	; (8003f7c <HAL_TIM_PeriodElapsedCallback+0xaec>)
 8003e7e:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
		  controller.ch1 = ch[0];
 8003e82:	4b41      	ldr	r3, [pc, #260]	; (8003f88 <HAL_TIM_PeriodElapsedCallback+0xaf8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fc ff00 	bl	8000c8c <__aeabi_i2f>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	4a3b      	ldr	r2, [pc, #236]	; (8003f7c <HAL_TIM_PeriodElapsedCallback+0xaec>)
 8003e90:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
		  controller.Run();
 8003e94:	4839      	ldr	r0, [pc, #228]	; (8003f7c <HAL_TIM_PeriodElapsedCallback+0xaec>)
 8003e96:	f007 fbff 	bl	800b698 <_ZN10Controller3RunEv>

		  controller_output[0] = controller.controller_output_pwm[0];
 8003e9a:	4b38      	ldr	r3, [pc, #224]	; (8003f7c <HAL_TIM_PeriodElapsedCallback+0xaec>)
 8003e9c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003ea0:	4a3a      	ldr	r2, [pc, #232]	; (8003f8c <HAL_TIM_PeriodElapsedCallback+0xafc>)
 8003ea2:	6013      	str	r3, [r2, #0]
		  controller_output[1] = controller.controller_output_pwm[1];
 8003ea4:	4b35      	ldr	r3, [pc, #212]	; (8003f7c <HAL_TIM_PeriodElapsedCallback+0xaec>)
 8003ea6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8003eaa:	4a38      	ldr	r2, [pc, #224]	; (8003f8c <HAL_TIM_PeriodElapsedCallback+0xafc>)
 8003eac:	6053      	str	r3, [r2, #4]
		  controller_output[2] = controller.controller_output_pwm[2];
 8003eae:	4b33      	ldr	r3, [pc, #204]	; (8003f7c <HAL_TIM_PeriodElapsedCallback+0xaec>)
 8003eb0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003eb4:	4a35      	ldr	r2, [pc, #212]	; (8003f8c <HAL_TIM_PeriodElapsedCallback+0xafc>)
 8003eb6:	6093      	str	r3, [r2, #8]
		  controller_output[3] = controller.controller_output_pwm[3];
 8003eb8:	4b30      	ldr	r3, [pc, #192]	; (8003f7c <HAL_TIM_PeriodElapsedCallback+0xaec>)
 8003eba:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003ebe:	4a33      	ldr	r2, [pc, #204]	; (8003f8c <HAL_TIM_PeriodElapsedCallback+0xafc>)
 8003ec0:	60d3      	str	r3, [r2, #12]
#endif
		#ifdef UAV1

		  if(armed) {
 8003ec2:	4b33      	ldr	r3, [pc, #204]	; (8003f90 <HAL_TIM_PeriodElapsedCallback+0xb00>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d031      	beq.n	8003f2e <HAL_TIM_PeriodElapsedCallback+0xa9e>



			  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > CH3_MIN + 100) {
 8003eca:	4b2f      	ldr	r3, [pc, #188]	; (8003f88 <HAL_TIM_PeriodElapsedCallback+0xaf8>)
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f240 52db 	movw	r2, #1499	; 0x5db
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	dc1a      	bgt.n	8003f0c <HAL_TIM_PeriodElapsedCallback+0xa7c>
 8003ed6:	4b2c      	ldr	r3, [pc, #176]	; (8003f88 <HAL_TIM_PeriodElapsedCallback+0xaf8>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f240 424c 	movw	r2, #1100	; 0x44c
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	dd14      	ble.n	8003f0c <HAL_TIM_PeriodElapsedCallback+0xa7c>

				  controller_output_2[0] = controller.controller_output_pwm2[0];
 8003ee2:	4b26      	ldr	r3, [pc, #152]	; (8003f7c <HAL_TIM_PeriodElapsedCallback+0xaec>)
 8003ee4:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8003ee8:	4a2a      	ldr	r2, [pc, #168]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8003eea:	6013      	str	r3, [r2, #0]
				  controller_output_2[1] = controller.controller_output_pwm2[1];
 8003eec:	4b23      	ldr	r3, [pc, #140]	; (8003f7c <HAL_TIM_PeriodElapsedCallback+0xaec>)
 8003eee:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8003ef2:	4a28      	ldr	r2, [pc, #160]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8003ef4:	6053      	str	r3, [r2, #4]
				  controller_output_2[2] = controller.controller_output_pwm2[2];
 8003ef6:	4b21      	ldr	r3, [pc, #132]	; (8003f7c <HAL_TIM_PeriodElapsedCallback+0xaec>)
 8003ef8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8003efc:	4a25      	ldr	r2, [pc, #148]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8003efe:	6093      	str	r3, [r2, #8]
				  controller_output_2[3] = controller.controller_output_pwm2[3];
 8003f00:	4b1e      	ldr	r3, [pc, #120]	; (8003f7c <HAL_TIM_PeriodElapsedCallback+0xaec>)
 8003f02:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003f06:	4a23      	ldr	r2, [pc, #140]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8003f08:	60d3      	str	r3, [r2, #12]
 8003f0a:	e020      	b.n	8003f4e <HAL_TIM_PeriodElapsedCallback+0xabe>

			  }

			  else {
				  controller_output_2[0] = 1000;
 8003f0c:	4b21      	ldr	r3, [pc, #132]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8003f0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f12:	601a      	str	r2, [r3, #0]
				  controller_output_2[1] = 1000;
 8003f14:	4b1f      	ldr	r3, [pc, #124]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8003f16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f1a:	605a      	str	r2, [r3, #4]
				  controller_output_2[2] = 1000;
 8003f1c:	4b1d      	ldr	r3, [pc, #116]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8003f1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f22:	609a      	str	r2, [r3, #8]
				  controller_output_2[3] = 1000;
 8003f24:	4b1b      	ldr	r3, [pc, #108]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8003f26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f2a:	60da      	str	r2, [r3, #12]
 8003f2c:	e00f      	b.n	8003f4e <HAL_TIM_PeriodElapsedCallback+0xabe>
			  }

		  }

		  else {
			  controller_output_2[0] = 1000;
 8003f2e:	4b19      	ldr	r3, [pc, #100]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8003f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f34:	601a      	str	r2, [r3, #0]
			  controller_output_2[1] = 1000;
 8003f36:	4b17      	ldr	r3, [pc, #92]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8003f38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f3c:	605a      	str	r2, [r3, #4]
			  controller_output_2[2] = 1000;
 8003f3e:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8003f40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f44:	609a      	str	r2, [r3, #8]
			  controller_output_2[3] = 1000;
 8003f46:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8003f48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f4c:	60da      	str	r2, [r3, #12]
		  }
		#endif

		  state_des.rates[0] = controller.roll_rate_des;
 8003f4e:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_TIM_PeriodElapsedCallback+0xaec>)
 8003f50:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8003f54:	4a0b      	ldr	r2, [pc, #44]	; (8003f84 <HAL_TIM_PeriodElapsedCallback+0xaf4>)
 8003f56:	60d3      	str	r3, [r2, #12]
		  state_des.rates[1] = controller.pitch_rate_des;
 8003f58:	4b08      	ldr	r3, [pc, #32]	; (8003f7c <HAL_TIM_PeriodElapsedCallback+0xaec>)
 8003f5a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003f5e:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <HAL_TIM_PeriodElapsedCallback+0xaf4>)
 8003f60:	6113      	str	r3, [r2, #16]


		  TelemPack();
 8003f62:	f7fe fc27 	bl	80027b4 <_Z9TelemPackv>
		  CheckFailsafe();
 8003f66:	f7fe fb11 	bl	800258c <_Z13CheckFailsafev>
		  CheckSwarm();
 8003f6a:	f7fe facf 	bl	800250c <_Z10CheckSwarmv>
		  PWMYaz();
 8003f6e:	f7ff f99d 	bl	80032ac <_Z6PWMYazv>
		  //SwitchMag();

		  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
		}
		}
	}
 8003f72:	bf00      	nop
 8003f74:	3754      	adds	r7, #84	; 0x54
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000fb0 	.word	0x20000fb0
 8003f80:	2000092c 	.word	0x2000092c
 8003f84:	20000908 	.word	0x20000908
 8003f88:	20001610 	.word	0x20001610
 8003f8c:	200015e0 	.word	0x200015e0
 8003f90:	20001679 	.word	0x20001679
 8003f94:	200015f0 	.word	0x200015f0

08003f98 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a55      	ldr	r2, [pc, #340]	; (80040f8 <HAL_TIM_IC_CaptureCallback+0x160>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	f040 80a2 	bne.w	80040ee <HAL_TIM_IC_CaptureCallback+0x156>


	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	7f1b      	ldrb	r3, [r3, #28]
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	f040 809d 	bne.w	80040ee <HAL_TIM_IC_CaptureCallback+0x156>
	{
				IC_Val1 = IC_Val2;
 8003fb4:	4b51      	ldr	r3, [pc, #324]	; (80040fc <HAL_TIM_IC_CaptureCallback+0x164>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a51      	ldr	r2, [pc, #324]	; (8004100 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003fba:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8003fbc:	2108      	movs	r1, #8
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f005 ff28 	bl	8009e14 <HAL_TIM_ReadCapturedValue>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4b4c      	ldr	r3, [pc, #304]	; (80040fc <HAL_TIM_IC_CaptureCallback+0x164>)
 8003fca:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 8003fcc:	4b4b      	ldr	r3, [pc, #300]	; (80040fc <HAL_TIM_IC_CaptureCallback+0x164>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4b4b      	ldr	r3, [pc, #300]	; (8004100 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	4a4b      	ldr	r2, [pc, #300]	; (8004104 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003fd8:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 8003fda:	4b4a      	ldr	r3, [pc, #296]	; (8004104 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	0fdb      	lsrs	r3, r3, #31
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d006      	beq.n	8003ff4 <HAL_TIM_IC_CaptureCallback+0x5c>
					Diff+=65535;
 8003fe6:	4b47      	ldr	r3, [pc, #284]	; (8004104 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003fee:	33ff      	adds	r3, #255	; 0xff
 8003ff0:	4a44      	ldr	r2, [pc, #272]	; (8004104 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003ff2:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
					if(Diff >= 800 && Diff <= 2000) {
 8003ff4:	4b43      	ldr	r3, [pc, #268]	; (8004104 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003ffc:	db06      	blt.n	800400c <HAL_TIM_IC_CaptureCallback+0x74>
 8003ffe:	4b41      	ldr	r3, [pc, #260]	; (8004104 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004006:	dc01      	bgt.n	800400c <HAL_TIM_IC_CaptureCallback+0x74>
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <HAL_TIM_IC_CaptureCallback+0x76>
 800400c:	2300      	movs	r3, #0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d01c      	beq.n	800404c <HAL_TIM_IC_CaptureCallback+0xb4>
					#ifdef UAV1
						ch_[i] = ch[i];
 8004012:	4b3d      	ldr	r3, [pc, #244]	; (8004108 <HAL_TIM_IC_CaptureCallback+0x170>)
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	b21b      	sxth	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	4b3b      	ldr	r3, [pc, #236]	; (8004108 <HAL_TIM_IC_CaptureCallback+0x170>)
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	b21b      	sxth	r3, r3
 8004020:	4619      	mov	r1, r3
 8004022:	4b3a      	ldr	r3, [pc, #232]	; (800410c <HAL_TIM_IC_CaptureCallback+0x174>)
 8004024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004028:	4a39      	ldr	r2, [pc, #228]	; (8004110 <HAL_TIM_IC_CaptureCallback+0x178>)
 800402a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
						ch[i] = Diff;
 800402e:	4b36      	ldr	r3, [pc, #216]	; (8004108 <HAL_TIM_IC_CaptureCallback+0x170>)
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	b21b      	sxth	r3, r3
 8004034:	4619      	mov	r1, r3
 8004036:	4b33      	ldr	r3, [pc, #204]	; (8004104 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a34      	ldr	r2, [pc, #208]	; (800410c <HAL_TIM_IC_CaptureCallback+0x174>)
 800403c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
						ch_count++;
 8004040:	4b34      	ldr	r3, [pc, #208]	; (8004114 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3301      	adds	r3, #1
 8004046:	4a33      	ldr	r2, [pc, #204]	; (8004114 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	e015      	b.n	8004078 <HAL_TIM_IC_CaptureCallback+0xe0>
						ch_count++;
					#endif

					}

					else if(Diff > CH0) {
 800404c:	4b2d      	ldr	r3, [pc, #180]	; (8004104 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f241 3288 	movw	r2, #5000	; 0x1388
 8004054:	4293      	cmp	r3, r2
 8004056:	bfcc      	ite	gt
 8004058:	2301      	movgt	r3, #1
 800405a:	2300      	movle	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <HAL_TIM_IC_CaptureCallback+0xe0>
						//ch[CH_NUM] = ch[i];
						i = -1;
 8004062:	4b29      	ldr	r3, [pc, #164]	; (8004108 <HAL_TIM_IC_CaptureCallback+0x170>)
 8004064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004068:	801a      	strh	r2, [r3, #0]
						ch[CH_NUM] = Diff;
 800406a:	4b26      	ldr	r3, [pc, #152]	; (8004104 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a27      	ldr	r2, [pc, #156]	; (800410c <HAL_TIM_IC_CaptureCallback+0x174>)
 8004070:	6293      	str	r3, [r2, #40]	; 0x28
						sync = 1;
 8004072:	4b29      	ldr	r3, [pc, #164]	; (8004118 <HAL_TIM_IC_CaptureCallback+0x180>)
 8004074:	2201      	movs	r2, #1
 8004076:	801a      	strh	r2, [r3, #0]
					}




				state_des.angles[0] =  pwm2ang(ch[0]);
 8004078:	4b24      	ldr	r3, [pc, #144]	; (800410c <HAL_TIM_IC_CaptureCallback+0x174>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	b29b      	uxth	r3, r3
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe fe00 	bl	8002c84 <_Z7pwm2angt>
 8004084:	4603      	mov	r3, r0
 8004086:	4a25      	ldr	r2, [pc, #148]	; (800411c <HAL_TIM_IC_CaptureCallback+0x184>)
 8004088:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pwm2ang(ch[1]);
 800408a:	4b20      	ldr	r3, [pc, #128]	; (800410c <HAL_TIM_IC_CaptureCallback+0x174>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	b29b      	uxth	r3, r3
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe fdf7 	bl	8002c84 <_Z7pwm2angt>
 8004096:	4603      	mov	r3, r0
 8004098:	4a20      	ldr	r2, [pc, #128]	; (800411c <HAL_TIM_IC_CaptureCallback+0x184>)
 800409a:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 800409c:	4b1f      	ldr	r3, [pc, #124]	; (800411c <HAL_TIM_IC_CaptureCallback+0x184>)
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pwm2rate(ch[3]);
 80040a4:	4b19      	ldr	r3, [pc, #100]	; (800410c <HAL_TIM_IC_CaptureCallback+0x174>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fe fe26 	bl	8002cfc <_Z8pwm2ratet>
 80040b0:	4603      	mov	r3, r0
 80040b2:	4a1a      	ldr	r2, [pc, #104]	; (800411c <HAL_TIM_IC_CaptureCallback+0x184>)
 80040b4:	6153      	str	r3, [r2, #20]

				i++;
 80040b6:	4b14      	ldr	r3, [pc, #80]	; (8004108 <HAL_TIM_IC_CaptureCallback+0x170>)
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	b21b      	sxth	r3, r3
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3301      	adds	r3, #1
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	b21a      	sxth	r2, r3
 80040c4:	4b10      	ldr	r3, [pc, #64]	; (8004108 <HAL_TIM_IC_CaptureCallback+0x170>)
 80040c6:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 80040c8:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <HAL_TIM_IC_CaptureCallback+0x170>)
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	b21b      	sxth	r3, r3
 80040ce:	4619      	mov	r1, r3
 80040d0:	4b13      	ldr	r3, [pc, #76]	; (8004120 <HAL_TIM_IC_CaptureCallback+0x188>)
 80040d2:	fb83 2301 	smull	r2, r3, r3, r1
 80040d6:	105a      	asrs	r2, r3, #1
 80040d8:	17cb      	asrs	r3, r1, #31
 80040da:	1ad2      	subs	r2, r2, r3
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	4413      	add	r3, r2
 80040e6:	1aca      	subs	r2, r1, r3
 80040e8:	b212      	sxth	r2, r2
 80040ea:	4b07      	ldr	r3, [pc, #28]	; (8004108 <HAL_TIM_IC_CaptureCallback+0x170>)
 80040ec:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 80040ee:	bf00      	nop
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	200018dc 	.word	0x200018dc
 80040fc:	20001600 	.word	0x20001600
 8004100:	20001604 	.word	0x20001604
 8004104:	20001608 	.word	0x20001608
 8004108:	2000160c 	.word	0x2000160c
 800410c:	20001610 	.word	0x20001610
 8004110:	2000163c 	.word	0x2000163c
 8004114:	200016dc 	.word	0x200016dc
 8004118:	20001668 	.word	0x20001668
 800411c:	20000908 	.word	0x20000908
 8004120:	2e8ba2e9 	.word	0x2e8ba2e9

08004124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004128:	b672      	cpsid	i
}
 800412a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800412c:	e7fe      	b.n	800412c <Error_Handler+0x8>
	...

08004130 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d10a      	bne.n	8004156 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004146:	4293      	cmp	r3, r2
 8004148:	d105      	bne.n	8004156 <_Z41__static_initialization_and_destruction_0ii+0x26>
Kalman_Filtresi EKF;
 800414a:	480c      	ldr	r0, [pc, #48]	; (800417c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800414c:	f007 ffb0 	bl	800c0b0 <_ZN15Kalman_FiltresiC1Ev>
Controller controller;
 8004150:	480b      	ldr	r0, [pc, #44]	; (8004180 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004152:	f007 f9ad 	bl	800b4b0 <_ZN10ControllerC1Ev>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10a      	bne.n	8004172 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004162:	4293      	cmp	r3, r2
 8004164:	d105      	bne.n	8004172 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8004166:	4806      	ldr	r0, [pc, #24]	; (8004180 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004168:	f007 ff66 	bl	800c038 <_ZN10ControllerD1Ev>
Kalman_Filtresi EKF;
 800416c:	4803      	ldr	r0, [pc, #12]	; (800417c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800416e:	f009 f890 	bl	800d292 <_ZN15Kalman_FiltresiD1Ev>
}
 8004172:	bf00      	nop
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000c68 	.word	0x20000c68
 8004180:	20000fb0 	.word	0x20000fb0

08004184 <_GLOBAL__sub_I_gyroX>:
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
 8004188:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800418c:	2001      	movs	r0, #1
 800418e:	f7ff ffcf 	bl	8004130 <_Z41__static_initialization_and_destruction_0ii>
 8004192:	bd80      	pop	{r7, pc}

08004194 <_GLOBAL__sub_D_gyroX>:
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
 8004198:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800419c:	2000      	movs	r0, #0
 800419e:	f7ff ffc7 	bl	8004130 <_Z41__static_initialization_and_destruction_0ii>
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <NRF24_csn>:
	while(uSecVar--);
}

//1. Chip Select function
void NRF24_csn(int state)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d008      	beq.n	80041c4 <NRF24_csn+0x20>
 80041b2:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <NRF24_csn+0x38>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a0a      	ldr	r2, [pc, #40]	; (80041e0 <NRF24_csn+0x3c>)
 80041b8:	8811      	ldrh	r1, [r2, #0]
 80041ba:	2201      	movs	r2, #1
 80041bc:	4618      	mov	r0, r3
 80041be:	f002 f983 	bl	80064c8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80041c2:	e007      	b.n	80041d4 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <NRF24_csn+0x38>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a05      	ldr	r2, [pc, #20]	; (80041e0 <NRF24_csn+0x3c>)
 80041ca:	8811      	ldrh	r1, [r2, #0]
 80041cc:	2200      	movs	r2, #0
 80041ce:	4618      	mov	r0, r3
 80041d0:	f002 f97a 	bl	80064c8 <HAL_GPIO_WritePin>
}
 80041d4:	bf00      	nop
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20001730 	.word	0x20001730
 80041e0:	20001734 	.word	0x20001734

080041e4 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d008      	beq.n	8004204 <NRF24_ce+0x20>
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <NRF24_ce+0x38>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a0a      	ldr	r2, [pc, #40]	; (8004220 <NRF24_ce+0x3c>)
 80041f8:	8811      	ldrh	r1, [r2, #0]
 80041fa:	2201      	movs	r2, #1
 80041fc:	4618      	mov	r0, r3
 80041fe:	f002 f963 	bl	80064c8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8004202:	e007      	b.n	8004214 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8004204:	4b05      	ldr	r3, [pc, #20]	; (800421c <NRF24_ce+0x38>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a05      	ldr	r2, [pc, #20]	; (8004220 <NRF24_ce+0x3c>)
 800420a:	8811      	ldrh	r1, [r2, #0]
 800420c:	2200      	movs	r2, #0
 800420e:	4618      	mov	r0, r3
 8004210:	f002 f95a 	bl	80064c8 <HAL_GPIO_WritePin>
}
 8004214:	bf00      	nop
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20001730 	.word	0x20001730
 8004220:	20001736 	.word	0x20001736

08004224 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800422e:	2000      	movs	r0, #0
 8004230:	f7ff ffb8 	bl	80041a4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	f003 031f 	and.w	r3, r3, #31
 800423a:	b2db      	uxtb	r3, r3
 800423c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800423e:	f107 010c 	add.w	r1, r7, #12
 8004242:	2364      	movs	r3, #100	; 0x64
 8004244:	2201      	movs	r2, #1
 8004246:	480a      	ldr	r0, [pc, #40]	; (8004270 <NRF24_read_register+0x4c>)
 8004248:	f004 faa2 	bl	8008790 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800424c:	f107 030c 	add.w	r3, r7, #12
 8004250:	1c59      	adds	r1, r3, #1
 8004252:	2364      	movs	r3, #100	; 0x64
 8004254:	2201      	movs	r2, #1
 8004256:	4806      	ldr	r0, [pc, #24]	; (8004270 <NRF24_read_register+0x4c>)
 8004258:	f004 fbd6 	bl	8008a08 <HAL_SPI_Receive>
	retData = spiBuf[1];
 800425c:	7b7b      	ldrb	r3, [r7, #13]
 800425e:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8004260:	2001      	movs	r0, #1
 8004262:	f7ff ff9f 	bl	80041a4 <NRF24_csn>
	return retData;
 8004266:	7bfb      	ldrb	r3, [r7, #15]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20001738 	.word	0x20001738

08004274 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	6039      	str	r1, [r7, #0]
 800427e:	71fb      	strb	r3, [r7, #7]
 8004280:	4613      	mov	r3, r2
 8004282:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8004284:	2000      	movs	r0, #0
 8004286:	f7ff ff8d 	bl	80041a4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	b2db      	uxtb	r3, r3
 8004292:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8004294:	f107 010c 	add.w	r1, r7, #12
 8004298:	2364      	movs	r3, #100	; 0x64
 800429a:	2201      	movs	r2, #1
 800429c:	4808      	ldr	r0, [pc, #32]	; (80042c0 <NRF24_read_registerN+0x4c>)
 800429e:	f004 fa77 	bl	8008790 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80042a2:	79bb      	ldrb	r3, [r7, #6]
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	2364      	movs	r3, #100	; 0x64
 80042a8:	6839      	ldr	r1, [r7, #0]
 80042aa:	4805      	ldr	r0, [pc, #20]	; (80042c0 <NRF24_read_registerN+0x4c>)
 80042ac:	f004 fbac 	bl	8008a08 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80042b0:	2001      	movs	r0, #1
 80042b2:	f7ff ff77 	bl	80041a4 <NRF24_csn>
}
 80042b6:	bf00      	nop
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20001738 	.word	0x20001738

080042c4 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	460a      	mov	r2, r1
 80042ce:	71fb      	strb	r3, [r7, #7]
 80042d0:	4613      	mov	r3, r2
 80042d2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80042d4:	2000      	movs	r0, #0
 80042d6:	f7ff ff65 	bl	80041a4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	f043 0320 	orr.w	r3, r3, #32
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80042e4:	79bb      	ldrb	r3, [r7, #6]
 80042e6:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80042e8:	f107 010c 	add.w	r1, r7, #12
 80042ec:	2364      	movs	r3, #100	; 0x64
 80042ee:	2202      	movs	r2, #2
 80042f0:	4804      	ldr	r0, [pc, #16]	; (8004304 <NRF24_write_register+0x40>)
 80042f2:	f004 fa4d 	bl	8008790 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80042f6:	2001      	movs	r0, #1
 80042f8:	f7ff ff54 	bl	80041a4 <NRF24_csn>
}
 80042fc:	bf00      	nop
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	20001738 	.word	0x20001738

08004308 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	6039      	str	r1, [r7, #0]
 8004312:	71fb      	strb	r3, [r7, #7]
 8004314:	4613      	mov	r3, r2
 8004316:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8004318:	2000      	movs	r0, #0
 800431a:	f7ff ff43 	bl	80041a4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800431e:	79fb      	ldrb	r3, [r7, #7]
 8004320:	f043 0320 	orr.w	r3, r3, #32
 8004324:	b2db      	uxtb	r3, r3
 8004326:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8004328:	f107 010c 	add.w	r1, r7, #12
 800432c:	2364      	movs	r3, #100	; 0x64
 800432e:	2201      	movs	r2, #1
 8004330:	4808      	ldr	r0, [pc, #32]	; (8004354 <NRF24_write_registerN+0x4c>)
 8004332:	f004 fa2d 	bl	8008790 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8004336:	79bb      	ldrb	r3, [r7, #6]
 8004338:	b29a      	uxth	r2, r3
 800433a:	2364      	movs	r3, #100	; 0x64
 800433c:	6839      	ldr	r1, [r7, #0]
 800433e:	4805      	ldr	r0, [pc, #20]	; (8004354 <NRF24_write_registerN+0x4c>)
 8004340:	f004 fa26 	bl	8008790 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8004344:	2001      	movs	r0, #1
 8004346:	f7ff ff2d 	bl	80041a4 <NRF24_csn>
}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20001738 	.word	0x20001738

08004358 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 800435c:	21ff      	movs	r1, #255	; 0xff
 800435e:	20e1      	movs	r0, #225	; 0xe1
 8004360:	f7ff ffb0 	bl	80042c4 <NRF24_write_register>
}
 8004364:	bf00      	nop
 8004366:	bd80      	pop	{r7, pc}

08004368 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 800436c:	21ff      	movs	r1, #255	; 0xff
 800436e:	20e2      	movs	r0, #226	; 0xe2
 8004370:	f7ff ffa8 	bl	80042c4 <NRF24_write_register>
}
 8004374:	bf00      	nop
 8004376:	bd80      	pop	{r7, pc}

08004378 <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8004378:	b082      	sub	sp, #8
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	61fb      	str	r3, [r7, #28]
 8004384:	460b      	mov	r3, r1
 8004386:	807b      	strh	r3, [r7, #2]
 8004388:	4613      	mov	r3, r2
 800438a:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800438c:	4b66      	ldr	r3, [pc, #408]	; (8004528 <NRF24_begin+0x1b0>)
 800438e:	4618      	mov	r0, r3
 8004390:	f107 031c 	add.w	r3, r7, #28
 8004394:	2258      	movs	r2, #88	; 0x58
 8004396:	4619      	mov	r1, r3
 8004398:	f00b fd7c 	bl	800fe94 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800439c:	4a63      	ldr	r2, [pc, #396]	; (800452c <NRF24_begin+0x1b4>)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80043a2:	4a63      	ldr	r2, [pc, #396]	; (8004530 <NRF24_begin+0x1b8>)
 80043a4:	887b      	ldrh	r3, [r7, #2]
 80043a6:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80043a8:	4a62      	ldr	r2, [pc, #392]	; (8004534 <NRF24_begin+0x1bc>)
 80043aa:	883b      	ldrh	r3, [r7, #0]
 80043ac:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 80043ae:	2001      	movs	r0, #1
 80043b0:	f7ff fef8 	bl	80041a4 <NRF24_csn>
	NRF24_ce(0);
 80043b4:	2000      	movs	r0, #0
 80043b6:	f7ff ff15 	bl	80041e4 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80043ba:	2005      	movs	r0, #5
 80043bc:	f001 fb6a 	bl	8005a94 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80043c0:	2108      	movs	r1, #8
 80043c2:	2000      	movs	r0, #0
 80043c4:	f7ff ff7e 	bl	80042c4 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80043c8:	213f      	movs	r1, #63	; 0x3f
 80043ca:	2001      	movs	r0, #1
 80043cc:	f7ff ff7a 	bl	80042c4 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80043d0:	2103      	movs	r1, #3
 80043d2:	2002      	movs	r0, #2
 80043d4:	f7ff ff76 	bl	80042c4 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80043d8:	2103      	movs	r1, #3
 80043da:	2003      	movs	r0, #3
 80043dc:	f7ff ff72 	bl	80042c4 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80043e0:	2103      	movs	r1, #3
 80043e2:	2004      	movs	r0, #4
 80043e4:	f7ff ff6e 	bl	80042c4 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80043e8:	2102      	movs	r1, #2
 80043ea:	2005      	movs	r0, #5
 80043ec:	f7ff ff6a 	bl	80042c4 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80043f0:	210f      	movs	r1, #15
 80043f2:	2006      	movs	r0, #6
 80043f4:	f7ff ff66 	bl	80042c4 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80043f8:	210e      	movs	r1, #14
 80043fa:	2007      	movs	r0, #7
 80043fc:	f7ff ff62 	bl	80042c4 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8004400:	2100      	movs	r1, #0
 8004402:	2008      	movs	r0, #8
 8004404:	f7ff ff5e 	bl	80042c4 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8004408:	2100      	movs	r1, #0
 800440a:	2009      	movs	r0, #9
 800440c:	f7ff ff5a 	bl	80042c4 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8004410:	23e7      	movs	r3, #231	; 0xe7
 8004412:	733b      	strb	r3, [r7, #12]
 8004414:	23e7      	movs	r3, #231	; 0xe7
 8004416:	72fb      	strb	r3, [r7, #11]
 8004418:	23e7      	movs	r3, #231	; 0xe7
 800441a:	72bb      	strb	r3, [r7, #10]
 800441c:	23e7      	movs	r3, #231	; 0xe7
 800441e:	727b      	strb	r3, [r7, #9]
 8004420:	23e7      	movs	r3, #231	; 0xe7
 8004422:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8004424:	f107 0308 	add.w	r3, r7, #8
 8004428:	2205      	movs	r2, #5
 800442a:	4619      	mov	r1, r3
 800442c:	200a      	movs	r0, #10
 800442e:	f7ff ff6b 	bl	8004308 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8004432:	23c2      	movs	r3, #194	; 0xc2
 8004434:	733b      	strb	r3, [r7, #12]
 8004436:	23c2      	movs	r3, #194	; 0xc2
 8004438:	72fb      	strb	r3, [r7, #11]
 800443a:	23c2      	movs	r3, #194	; 0xc2
 800443c:	72bb      	strb	r3, [r7, #10]
 800443e:	23c2      	movs	r3, #194	; 0xc2
 8004440:	727b      	strb	r3, [r7, #9]
 8004442:	23c2      	movs	r3, #194	; 0xc2
 8004444:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8004446:	f107 0308 	add.w	r3, r7, #8
 800444a:	2205      	movs	r2, #5
 800444c:	4619      	mov	r1, r3
 800444e:	200b      	movs	r0, #11
 8004450:	f7ff ff5a 	bl	8004308 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8004454:	21c3      	movs	r1, #195	; 0xc3
 8004456:	200c      	movs	r0, #12
 8004458:	f7ff ff34 	bl	80042c4 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 800445c:	21c4      	movs	r1, #196	; 0xc4
 800445e:	200d      	movs	r0, #13
 8004460:	f7ff ff30 	bl	80042c4 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8004464:	21c5      	movs	r1, #197	; 0xc5
 8004466:	200e      	movs	r0, #14
 8004468:	f7ff ff2c 	bl	80042c4 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 800446c:	21c6      	movs	r1, #198	; 0xc6
 800446e:	200f      	movs	r0, #15
 8004470:	f7ff ff28 	bl	80042c4 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8004474:	23e7      	movs	r3, #231	; 0xe7
 8004476:	733b      	strb	r3, [r7, #12]
 8004478:	23e7      	movs	r3, #231	; 0xe7
 800447a:	72fb      	strb	r3, [r7, #11]
 800447c:	23e7      	movs	r3, #231	; 0xe7
 800447e:	72bb      	strb	r3, [r7, #10]
 8004480:	23e7      	movs	r3, #231	; 0xe7
 8004482:	727b      	strb	r3, [r7, #9]
 8004484:	23e7      	movs	r3, #231	; 0xe7
 8004486:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8004488:	f107 0308 	add.w	r3, r7, #8
 800448c:	2205      	movs	r2, #5
 800448e:	4619      	mov	r1, r3
 8004490:	2010      	movs	r0, #16
 8004492:	f7ff ff39 	bl	8004308 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8004496:	2100      	movs	r1, #0
 8004498:	2011      	movs	r0, #17
 800449a:	f7ff ff13 	bl	80042c4 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800449e:	2100      	movs	r1, #0
 80044a0:	2012      	movs	r0, #18
 80044a2:	f7ff ff0f 	bl	80042c4 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80044a6:	2100      	movs	r1, #0
 80044a8:	2013      	movs	r0, #19
 80044aa:	f7ff ff0b 	bl	80042c4 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80044ae:	2100      	movs	r1, #0
 80044b0:	2014      	movs	r0, #20
 80044b2:	f7ff ff07 	bl	80042c4 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80044b6:	2100      	movs	r1, #0
 80044b8:	2015      	movs	r0, #21
 80044ba:	f7ff ff03 	bl	80042c4 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80044be:	2100      	movs	r1, #0
 80044c0:	2016      	movs	r0, #22
 80044c2:	f7ff feff 	bl	80042c4 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 80044c6:	f000 f999 	bl	80047fc <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80044ca:	2100      	movs	r1, #0
 80044cc:	201c      	movs	r0, #28
 80044ce:	f7ff fef9 	bl	80042c4 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80044d2:	2100      	movs	r1, #0
 80044d4:	201d      	movs	r0, #29
 80044d6:	f7ff fef5 	bl	80042c4 <NRF24_write_register>
	printRadioSettings();
 80044da:	f000 f9a9 	bl	8004830 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80044de:	210f      	movs	r1, #15
 80044e0:	200f      	movs	r0, #15
 80044e2:	f000 f859 	bl	8004598 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80044e6:	2003      	movs	r0, #3
 80044e8:	f000 f8c9 	bl	800467e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80044ec:	2001      	movs	r0, #1
 80044ee:	f000 f8ff 	bl	80046f0 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80044f2:	2002      	movs	r0, #2
 80044f4:	f000 f942 	bl	800477c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80044f8:	f000 f894 	bl	8004624 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80044fc:	2020      	movs	r0, #32
 80044fe:	f000 f87b 	bl	80045f8 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8004502:	f000 f972 	bl	80047ea <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8004506:	204c      	movs	r0, #76	; 0x4c
 8004508:	f000 f861 	bl	80045ce <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 800450c:	f7ff ff24 	bl	8004358 <NRF24_flush_tx>
	NRF24_flush_rx();
 8004510:	f7ff ff2a 	bl	8004368 <NRF24_flush_rx>

	NRF24_powerDown();
 8004514:	f000 f95a 	bl	80047cc <NRF24_powerDown>

}
 8004518:	bf00      	nop
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004522:	b002      	add	sp, #8
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	20001738 	.word	0x20001738
 800452c:	20001730 	.word	0x20001730
 8004530:	20001734 	.word	0x20001734
 8004534:	20001736 	.word	0x20001736

08004538 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 800453c:	2000      	movs	r0, #0
 800453e:	f7ff fe51 	bl	80041e4 <NRF24_ce>
	NRF24_flush_tx();
 8004542:	f7ff ff09 	bl	8004358 <NRF24_flush_tx>
	NRF24_flush_rx();
 8004546:	f7ff ff0f 	bl	8004368 <NRF24_flush_rx>
}
 800454a:	bf00      	nop
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 800455a:	463b      	mov	r3, r7
 800455c:	2205      	movs	r2, #5
 800455e:	4619      	mov	r1, r3
 8004560:	200a      	movs	r0, #10
 8004562:	f7ff fed1 	bl	8004308 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8004566:	463b      	mov	r3, r7
 8004568:	2205      	movs	r2, #5
 800456a:	4619      	mov	r1, r3
 800456c:	2010      	movs	r0, #16
 800456e:	f7ff fecb 	bl	8004308 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 8004572:	2320      	movs	r3, #32
 8004574:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8004576:	4b07      	ldr	r3, [pc, #28]	; (8004594 <NRF24_openWritingPipe+0x44>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	7bfa      	ldrb	r2, [r7, #15]
 800457c:	4293      	cmp	r3, r2
 800457e:	bf28      	it	cs
 8004580:	4613      	movcs	r3, r2
 8004582:	b2db      	uxtb	r3, r3
 8004584:	4619      	mov	r1, r3
 8004586:	2011      	movs	r0, #17
 8004588:	f7ff fe9c 	bl	80042c4 <NRF24_write_register>
}
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	2000172a 	.word	0x2000172a

08004598 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	4603      	mov	r3, r0
 80045a0:	460a      	mov	r2, r1
 80045a2:	71fb      	strb	r3, [r7, #7]
 80045a4:	4613      	mov	r3, r2
 80045a6:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80045a8:	79fb      	ldrb	r3, [r7, #7]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	b25a      	sxtb	r2, r3
 80045ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	b25b      	sxtb	r3, r3
 80045b8:	4313      	orrs	r3, r2
 80045ba:	b25b      	sxtb	r3, r3
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	4619      	mov	r1, r3
 80045c0:	2004      	movs	r0, #4
 80045c2:	f7ff fe7f 	bl	80042c4 <NRF24_write_register>
}
 80045c6:	bf00      	nop
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	4603      	mov	r3, r0
 80045d6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80045d8:	237f      	movs	r3, #127	; 0x7f
 80045da:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80045dc:	7bfa      	ldrb	r2, [r7, #15]
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	4293      	cmp	r3, r2
 80045e2:	bf28      	it	cs
 80045e4:	4613      	movcs	r3, r2
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	4619      	mov	r1, r3
 80045ea:	2005      	movs	r0, #5
 80045ec:	f7ff fe6a 	bl	80042c4 <NRF24_write_register>
}
 80045f0:	bf00      	nop
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8004602:	2320      	movs	r3, #32
 8004604:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8004606:	7bfa      	ldrb	r2, [r7, #15]
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	4293      	cmp	r3, r2
 800460c:	bf28      	it	cs
 800460e:	4613      	movcs	r3, r2
 8004610:	b2da      	uxtb	r2, r3
 8004612:	4b03      	ldr	r3, [pc, #12]	; (8004620 <NRF24_setPayloadSize+0x28>)
 8004614:	701a      	strb	r2, [r3, #0]
}
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr
 8004620:	2000172a 	.word	0x2000172a

08004624 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8004628:	201d      	movs	r0, #29
 800462a:	f7ff fdfb 	bl	8004224 <NRF24_read_register>
 800462e:	4603      	mov	r3, r0
 8004630:	f023 0304 	bic.w	r3, r3, #4
 8004634:	b2db      	uxtb	r3, r3
 8004636:	4619      	mov	r1, r3
 8004638:	201d      	movs	r0, #29
 800463a:	f7ff fe43 	bl	80042c4 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 800463e:	2100      	movs	r1, #0
 8004640:	201c      	movs	r0, #28
 8004642:	f7ff fe3f 	bl	80042c4 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8004646:	4b02      	ldr	r3, [pc, #8]	; (8004650 <NRF24_disableDynamicPayloads+0x2c>)
 8004648:	2200      	movs	r2, #0
 800464a:	701a      	strb	r2, [r3, #0]
}
 800464c:	bf00      	nop
 800464e:	bd80      	pop	{r7, pc}
 8004650:	2000172b 	.word	0x2000172b

08004654 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d004      	beq.n	800466e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8004664:	213f      	movs	r1, #63	; 0x3f
 8004666:	2001      	movs	r0, #1
 8004668:	f7ff fe2c 	bl	80042c4 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 800466c:	e003      	b.n	8004676 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800466e:	2100      	movs	r1, #0
 8004670:	2001      	movs	r0, #1
 8004672:	f7ff fe27 	bl	80042c4 <NRF24_write_register>
}
 8004676:	bf00      	nop
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	4603      	mov	r3, r0
 8004686:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8004688:	2006      	movs	r0, #6
 800468a:	f7ff fdcb 	bl	8004224 <NRF24_read_register>
 800468e:	4603      	mov	r3, r0
 8004690:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8004692:	7bfb      	ldrb	r3, [r7, #15]
 8004694:	f023 0306 	bic.w	r3, r3, #6
 8004698:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800469a:	79fb      	ldrb	r3, [r7, #7]
 800469c:	2b03      	cmp	r3, #3
 800469e:	d104      	bne.n	80046aa <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	f043 0306 	orr.w	r3, r3, #6
 80046a6:	73fb      	strb	r3, [r7, #15]
 80046a8:	e019      	b.n	80046de <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d104      	bne.n	80046ba <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	f043 0304 	orr.w	r3, r3, #4
 80046b6:	73fb      	strb	r3, [r7, #15]
 80046b8:	e011      	b.n	80046de <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d104      	bne.n	80046ca <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	f043 0302 	orr.w	r3, r3, #2
 80046c6:	73fb      	strb	r3, [r7, #15]
 80046c8:	e009      	b.n	80046de <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d006      	beq.n	80046de <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d103      	bne.n	80046de <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	f043 0306 	orr.w	r3, r3, #6
 80046dc:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	4619      	mov	r1, r3
 80046e2:	2006      	movs	r0, #6
 80046e4:	f7ff fdee 	bl	80042c4 <NRF24_write_register>
}
 80046e8:	bf00      	nop
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80046fa:	2300      	movs	r3, #0
 80046fc:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80046fe:	2006      	movs	r0, #6
 8004700:	f7ff fd90 	bl	8004224 <NRF24_read_register>
 8004704:	4603      	mov	r3, r0
 8004706:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8004708:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <NRF24_setDataRate+0x88>)
 800470a:	2200      	movs	r2, #0
 800470c:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800470e:	7bbb      	ldrb	r3, [r7, #14]
 8004710:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004714:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8004716:	79fb      	ldrb	r3, [r7, #7]
 8004718:	2b02      	cmp	r3, #2
 800471a:	d107      	bne.n	800472c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 800471c:	4b16      	ldr	r3, [pc, #88]	; (8004778 <NRF24_setDataRate+0x88>)
 800471e:	2200      	movs	r2, #0
 8004720:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8004722:	7bbb      	ldrb	r3, [r7, #14]
 8004724:	f043 0320 	orr.w	r3, r3, #32
 8004728:	73bb      	strb	r3, [r7, #14]
 800472a:	e00d      	b.n	8004748 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d107      	bne.n	8004742 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8004732:	4b11      	ldr	r3, [pc, #68]	; (8004778 <NRF24_setDataRate+0x88>)
 8004734:	2201      	movs	r2, #1
 8004736:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8004738:	7bbb      	ldrb	r3, [r7, #14]
 800473a:	f043 0308 	orr.w	r3, r3, #8
 800473e:	73bb      	strb	r3, [r7, #14]
 8004740:	e002      	b.n	8004748 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8004742:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <NRF24_setDataRate+0x88>)
 8004744:	2200      	movs	r2, #0
 8004746:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8004748:	7bbb      	ldrb	r3, [r7, #14]
 800474a:	4619      	mov	r1, r3
 800474c:	2006      	movs	r0, #6
 800474e:	f7ff fdb9 	bl	80042c4 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8004752:	2006      	movs	r0, #6
 8004754:	f7ff fd66 	bl	8004224 <NRF24_read_register>
 8004758:	4603      	mov	r3, r0
 800475a:	461a      	mov	r2, r3
 800475c:	7bbb      	ldrb	r3, [r7, #14]
 800475e:	4293      	cmp	r3, r2
 8004760:	d102      	bne.n	8004768 <NRF24_setDataRate+0x78>
  {
    result = true;
 8004762:	2301      	movs	r3, #1
 8004764:	73fb      	strb	r3, [r7, #15]
 8004766:	e002      	b.n	800476e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8004768:	4b03      	ldr	r3, [pc, #12]	; (8004778 <NRF24_setDataRate+0x88>)
 800476a:	2200      	movs	r2, #0
 800476c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800476e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	2000172c 	.word	0x2000172c

0800477c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8004786:	2000      	movs	r0, #0
 8004788:	f7ff fd4c 	bl	8004224 <NRF24_read_register>
 800478c:	4603      	mov	r3, r0
 800478e:	f023 030c 	bic.w	r3, r3, #12
 8004792:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8004794:	79fb      	ldrb	r3, [r7, #7]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00f      	beq.n	80047ba <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d104      	bne.n	80047aa <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
 80047a2:	f043 0308 	orr.w	r3, r3, #8
 80047a6:	73fb      	strb	r3, [r7, #15]
 80047a8:	e007      	b.n	80047ba <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	f043 0308 	orr.w	r3, r3, #8
 80047b0:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
 80047b4:	f043 0304 	orr.w	r3, r3, #4
 80047b8:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	4619      	mov	r1, r3
 80047be:	2000      	movs	r0, #0
 80047c0:	f7ff fd80 	bl	80042c4 <NRF24_write_register>
}
 80047c4:	bf00      	nop
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80047d0:	2000      	movs	r0, #0
 80047d2:	f7ff fd27 	bl	8004224 <NRF24_read_register>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f023 0302 	bic.w	r3, r3, #2
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	4619      	mov	r1, r3
 80047e0:	2000      	movs	r0, #0
 80047e2:	f7ff fd6f 	bl	80042c4 <NRF24_write_register>
}
 80047e6:	bf00      	nop
 80047e8:	bd80      	pop	{r7, pc}

080047ea <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80047ee:	2170      	movs	r1, #112	; 0x70
 80047f0:	2007      	movs	r0, #7
 80047f2:	f7ff fd67 	bl	80042c4 <NRF24_write_register>
}
 80047f6:	bf00      	nop
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8004802:	2000      	movs	r0, #0
 8004804:	f7ff fcce 	bl	80041a4 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8004808:	2350      	movs	r3, #80	; 0x50
 800480a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 800480c:	2373      	movs	r3, #115	; 0x73
 800480e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8004810:	1d39      	adds	r1, r7, #4
 8004812:	2364      	movs	r3, #100	; 0x64
 8004814:	2202      	movs	r2, #2
 8004816:	4805      	ldr	r0, [pc, #20]	; (800482c <NRF24_ACTIVATE_cmd+0x30>)
 8004818:	f003 ffba 	bl	8008790 <HAL_SPI_Transmit>
	NRF24_csn(1);
 800481c:	2001      	movs	r0, #1
 800481e:	f7ff fcc1 	bl	80041a4 <NRF24_csn>
}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20001738 	.word	0x20001738

08004830 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8004830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004832:	b0a1      	sub	sp, #132	; 0x84
 8004834:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8004836:	f107 0308 	add.w	r3, r7, #8
 800483a:	4996      	ldr	r1, [pc, #600]	; (8004a94 <printRadioSettings+0x264>)
 800483c:	4618      	mov	r0, r3
 800483e:	f00b fbf5 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8004842:	2000      	movs	r0, #0
 8004844:	f7ff fcee 	bl	8004224 <NRF24_read_register>
 8004848:	4603      	mov	r3, r0
 800484a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800484e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b00      	cmp	r3, #0
 8004858:	d013      	beq.n	8004882 <printRadioSettings+0x52>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800485a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	2b00      	cmp	r3, #0
 8004864:	d006      	beq.n	8004874 <printRadioSettings+0x44>
 8004866:	f107 0308 	add.w	r3, r7, #8
 800486a:	498b      	ldr	r1, [pc, #556]	; (8004a98 <printRadioSettings+0x268>)
 800486c:	4618      	mov	r0, r3
 800486e:	f00b fbdd 	bl	801002c <siprintf>
 8004872:	e00c      	b.n	800488e <printRadioSettings+0x5e>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8004874:	f107 0308 	add.w	r3, r7, #8
 8004878:	4988      	ldr	r1, [pc, #544]	; (8004a9c <printRadioSettings+0x26c>)
 800487a:	4618      	mov	r0, r3
 800487c:	f00b fbd6 	bl	801002c <siprintf>
 8004880:	e005      	b.n	800488e <printRadioSettings+0x5e>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8004882:	f107 0308 	add.w	r3, r7, #8
 8004886:	4986      	ldr	r1, [pc, #536]	; (8004aa0 <printRadioSettings+0x270>)
 8004888:	4618      	mov	r0, r3
 800488a:	f00b fbcf 	bl	801002c <siprintf>
	}
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800488e:	2001      	movs	r0, #1
 8004890:	f7ff fcc8 	bl	8004224 <NRF24_read_register>
 8004894:	4603      	mov	r3, r0
 8004896:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800489a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800489e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	bfcc      	ite	gt
 80048a6:	2301      	movgt	r3, #1
 80048a8:	2300      	movle	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80048ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80048b2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	bfcc      	ite	gt
 80048ba:	2301      	movgt	r3, #1
 80048bc:	2300      	movle	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80048c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80048c6:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	bfcc      	ite	gt
 80048ce:	2301      	movgt	r3, #1
 80048d0:	2300      	movle	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80048d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80048da:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80048de:	2b00      	cmp	r3, #0
 80048e0:	bfcc      	ite	gt
 80048e2:	2301      	movgt	r3, #1
 80048e4:	2300      	movle	r3, #0
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80048ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80048ee:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	bfcc      	ite	gt
 80048f6:	2301      	movgt	r3, #1
 80048f8:	2300      	movle	r3, #0
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80048fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004902:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004906:	2b00      	cmp	r3, #0
 8004908:	bfcc      	ite	gt
 800490a:	2301      	movgt	r3, #1
 800490c:	2300      	movle	r3, #0
 800490e:	b2db      	uxtb	r3, r3
 8004910:	f107 0008 	add.w	r0, r7, #8
 8004914:	9303      	str	r3, [sp, #12]
 8004916:	9402      	str	r4, [sp, #8]
 8004918:	9101      	str	r1, [sp, #4]
 800491a:	9200      	str	r2, [sp, #0]
 800491c:	4633      	mov	r3, r6
 800491e:	462a      	mov	r2, r5
 8004920:	4960      	ldr	r1, [pc, #384]	; (8004aa4 <printRadioSettings+0x274>)
 8004922:	f00b fb83 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8004926:	2002      	movs	r0, #2
 8004928:	f7ff fc7c 	bl	8004224 <NRF24_read_register>
 800492c:	4603      	mov	r3, r0
 800492e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004932:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004936:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800493a:	2b00      	cmp	r3, #0
 800493c:	bfcc      	ite	gt
 800493e:	2301      	movgt	r3, #1
 8004940:	2300      	movle	r3, #0
 8004942:	b2db      	uxtb	r3, r3
 8004944:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004946:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800494a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800494e:	2b00      	cmp	r3, #0
 8004950:	bfcc      	ite	gt
 8004952:	2301      	movgt	r3, #1
 8004954:	2300      	movle	r3, #0
 8004956:	b2db      	uxtb	r3, r3
 8004958:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800495a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800495e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004962:	2b00      	cmp	r3, #0
 8004964:	bfcc      	ite	gt
 8004966:	2301      	movgt	r3, #1
 8004968:	2300      	movle	r3, #0
 800496a:	b2db      	uxtb	r3, r3
 800496c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800496e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004972:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004976:	2b00      	cmp	r3, #0
 8004978:	bfcc      	ite	gt
 800497a:	2301      	movgt	r3, #1
 800497c:	2300      	movle	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004982:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004986:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800498a:	2b00      	cmp	r3, #0
 800498c:	bfcc      	ite	gt
 800498e:	2301      	movgt	r3, #1
 8004990:	2300      	movle	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004996:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800499a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800499e:	2b00      	cmp	r3, #0
 80049a0:	bfcc      	ite	gt
 80049a2:	2301      	movgt	r3, #1
 80049a4:	2300      	movle	r3, #0
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	f107 0008 	add.w	r0, r7, #8
 80049ac:	9303      	str	r3, [sp, #12]
 80049ae:	9402      	str	r4, [sp, #8]
 80049b0:	9101      	str	r1, [sp, #4]
 80049b2:	9200      	str	r2, [sp, #0]
 80049b4:	4633      	mov	r3, r6
 80049b6:	462a      	mov	r2, r5
 80049b8:	493b      	ldr	r1, [pc, #236]	; (8004aa8 <printRadioSettings+0x278>)
 80049ba:	f00b fb37 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80049be:	2003      	movs	r0, #3
 80049c0:	f7ff fc30 	bl	8004224 <NRF24_read_register>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80049ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80049d2:	3302      	adds	r3, #2
 80049d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80049d8:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80049dc:	f107 0308 	add.w	r3, r7, #8
 80049e0:	4932      	ldr	r1, [pc, #200]	; (8004aac <printRadioSettings+0x27c>)
 80049e2:	4618      	mov	r0, r3
 80049e4:	f00b fb22 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80049e8:	2005      	movs	r0, #5
 80049ea:	f7ff fc1b 	bl	8004224 <NRF24_read_register>
 80049ee:	4603      	mov	r3, r0
 80049f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80049f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80049f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049fc:	f107 0308 	add.w	r3, r7, #8
 8004a00:	492b      	ldr	r1, [pc, #172]	; (8004ab0 <printRadioSettings+0x280>)
 8004a02:	4618      	mov	r0, r3
 8004a04:	f00b fb12 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8004a08:	2006      	movs	r0, #6
 8004a0a:	f7ff fc0b 	bl	8004224 <NRF24_read_register>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8004a14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d006      	beq.n	8004a2e <printRadioSettings+0x1fe>
 8004a20:	f107 0308 	add.w	r3, r7, #8
 8004a24:	4923      	ldr	r1, [pc, #140]	; (8004ab4 <printRadioSettings+0x284>)
 8004a26:	4618      	mov	r0, r3
 8004a28:	f00b fb00 	bl	801002c <siprintf>
 8004a2c:	e005      	b.n	8004a3a <printRadioSettings+0x20a>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8004a2e:	f107 0308 	add.w	r3, r7, #8
 8004a32:	4921      	ldr	r1, [pc, #132]	; (8004ab8 <printRadioSettings+0x288>)
 8004a34:	4618      	mov	r0, r3
 8004a36:	f00b faf9 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	reg8Val &= (3 << 1);
 8004a3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a3e:	f003 0306 	and.w	r3, r3, #6
 8004a42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8004a46:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a4a:	085b      	lsrs	r3, r3, #1
 8004a4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8004a50:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d106      	bne.n	8004a66 <printRadioSettings+0x236>
 8004a58:	f107 0308 	add.w	r3, r7, #8
 8004a5c:	4917      	ldr	r1, [pc, #92]	; (8004abc <printRadioSettings+0x28c>)
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f00b fae4 	bl	801002c <siprintf>
 8004a64:	e03a      	b.n	8004adc <printRadioSettings+0x2ac>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8004a66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d106      	bne.n	8004a7c <printRadioSettings+0x24c>
 8004a6e:	f107 0308 	add.w	r3, r7, #8
 8004a72:	4913      	ldr	r1, [pc, #76]	; (8004ac0 <printRadioSettings+0x290>)
 8004a74:	4618      	mov	r0, r3
 8004a76:	f00b fad9 	bl	801002c <siprintf>
 8004a7a:	e02f      	b.n	8004adc <printRadioSettings+0x2ac>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8004a7c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d121      	bne.n	8004ac8 <printRadioSettings+0x298>
 8004a84:	f107 0308 	add.w	r3, r7, #8
 8004a88:	490e      	ldr	r1, [pc, #56]	; (8004ac4 <printRadioSettings+0x294>)
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f00b face 	bl	801002c <siprintf>
 8004a90:	e024      	b.n	8004adc <printRadioSettings+0x2ac>
 8004a92:	bf00      	nop
 8004a94:	08010788 	.word	0x08010788
 8004a98:	080107bc 	.word	0x080107bc
 8004a9c:	080107d8 	.word	0x080107d8
 8004aa0:	080107f4 	.word	0x080107f4
 8004aa4:	08010808 	.word	0x08010808
 8004aa8:	0801084c 	.word	0x0801084c
 8004aac:	08010898 	.word	0x08010898
 8004ab0:	080108b4 	.word	0x080108b4
 8004ab4:	080108c8 	.word	0x080108c8
 8004ab8:	080108e0 	.word	0x080108e0
 8004abc:	080108f8 	.word	0x080108f8
 8004ac0:	0801090c 	.word	0x0801090c
 8004ac4:	08010920 	.word	0x08010920
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8004ac8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d105      	bne.n	8004adc <printRadioSettings+0x2ac>
 8004ad0:	f107 0308 	add.w	r3, r7, #8
 8004ad4:	49b1      	ldr	r1, [pc, #708]	; (8004d9c <printRadioSettings+0x56c>)
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f00b faa8 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8004adc:	463b      	mov	r3, r7
 8004ade:	2205      	movs	r2, #5
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	200a      	movs	r0, #10
 8004ae4:	f7ff fbc6 	bl	8004274 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8004ae8:	793b      	ldrb	r3, [r7, #4]
 8004aea:	461c      	mov	r4, r3
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	461d      	mov	r5, r3
 8004af0:	78bb      	ldrb	r3, [r7, #2]
 8004af2:	787a      	ldrb	r2, [r7, #1]
 8004af4:	7839      	ldrb	r1, [r7, #0]
 8004af6:	f107 0008 	add.w	r0, r7, #8
 8004afa:	9102      	str	r1, [sp, #8]
 8004afc:	9201      	str	r2, [sp, #4]
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	462b      	mov	r3, r5
 8004b02:	4622      	mov	r2, r4
 8004b04:	49a6      	ldr	r1, [pc, #664]	; (8004da0 <printRadioSettings+0x570>)
 8004b06:	f00b fa91 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8004b0a:	463b      	mov	r3, r7
 8004b0c:	2205      	movs	r2, #5
 8004b0e:	4619      	mov	r1, r3
 8004b10:	200b      	movs	r0, #11
 8004b12:	f7ff fbaf 	bl	8004274 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8004b16:	793b      	ldrb	r3, [r7, #4]
 8004b18:	461c      	mov	r4, r3
 8004b1a:	78fb      	ldrb	r3, [r7, #3]
 8004b1c:	461d      	mov	r5, r3
 8004b1e:	78bb      	ldrb	r3, [r7, #2]
 8004b20:	787a      	ldrb	r2, [r7, #1]
 8004b22:	7839      	ldrb	r1, [r7, #0]
 8004b24:	f107 0008 	add.w	r0, r7, #8
 8004b28:	9102      	str	r1, [sp, #8]
 8004b2a:	9201      	str	r2, [sp, #4]
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	462b      	mov	r3, r5
 8004b30:	4622      	mov	r2, r4
 8004b32:	499c      	ldr	r1, [pc, #624]	; (8004da4 <printRadioSettings+0x574>)
 8004b34:	f00b fa7a 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8004b38:	463b      	mov	r3, r7
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	200c      	movs	r0, #12
 8004b40:	f7ff fb98 	bl	8004274 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004b44:	783b      	ldrb	r3, [r7, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	f107 0308 	add.w	r3, r7, #8
 8004b4c:	4996      	ldr	r1, [pc, #600]	; (8004da8 <printRadioSettings+0x578>)
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f00b fa6c 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8004b54:	463b      	mov	r3, r7
 8004b56:	2201      	movs	r2, #1
 8004b58:	4619      	mov	r1, r3
 8004b5a:	200d      	movs	r0, #13
 8004b5c:	f7ff fb8a 	bl	8004274 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004b60:	783b      	ldrb	r3, [r7, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	f107 0308 	add.w	r3, r7, #8
 8004b68:	4990      	ldr	r1, [pc, #576]	; (8004dac <printRadioSettings+0x57c>)
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f00b fa5e 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8004b70:	463b      	mov	r3, r7
 8004b72:	2201      	movs	r2, #1
 8004b74:	4619      	mov	r1, r3
 8004b76:	200e      	movs	r0, #14
 8004b78:	f7ff fb7c 	bl	8004274 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004b7c:	783b      	ldrb	r3, [r7, #0]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f107 0308 	add.w	r3, r7, #8
 8004b84:	498a      	ldr	r1, [pc, #552]	; (8004db0 <printRadioSettings+0x580>)
 8004b86:	4618      	mov	r0, r3
 8004b88:	f00b fa50 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8004b8c:	463b      	mov	r3, r7
 8004b8e:	2201      	movs	r2, #1
 8004b90:	4619      	mov	r1, r3
 8004b92:	200f      	movs	r0, #15
 8004b94:	f7ff fb6e 	bl	8004274 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004b98:	783b      	ldrb	r3, [r7, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f107 0308 	add.w	r3, r7, #8
 8004ba0:	4984      	ldr	r1, [pc, #528]	; (8004db4 <printRadioSettings+0x584>)
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f00b fa42 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8004ba8:	463b      	mov	r3, r7
 8004baa:	2205      	movs	r2, #5
 8004bac:	4619      	mov	r1, r3
 8004bae:	2010      	movs	r0, #16
 8004bb0:	f7ff fb60 	bl	8004274 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8004bb4:	793b      	ldrb	r3, [r7, #4]
 8004bb6:	461c      	mov	r4, r3
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	461d      	mov	r5, r3
 8004bbc:	78bb      	ldrb	r3, [r7, #2]
 8004bbe:	787a      	ldrb	r2, [r7, #1]
 8004bc0:	7839      	ldrb	r1, [r7, #0]
 8004bc2:	f107 0008 	add.w	r0, r7, #8
 8004bc6:	9102      	str	r1, [sp, #8]
 8004bc8:	9201      	str	r2, [sp, #4]
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	462b      	mov	r3, r5
 8004bce:	4622      	mov	r2, r4
 8004bd0:	4979      	ldr	r1, [pc, #484]	; (8004db8 <printRadioSettings+0x588>)
 8004bd2:	f00b fa2b 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8004bd6:	2011      	movs	r0, #17
 8004bd8:	f7ff fb24 	bl	8004224 <NRF24_read_register>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004be2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004be6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bea:	f107 0308 	add.w	r3, r7, #8
 8004bee:	4973      	ldr	r1, [pc, #460]	; (8004dbc <printRadioSettings+0x58c>)
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f00b fa1b 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	reg8Val = NRF24_read_register(0x11+1);
 8004bf6:	2012      	movs	r0, #18
 8004bf8:	f7ff fb14 	bl	8004224 <NRF24_read_register>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004c02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c0a:	f107 0308 	add.w	r3, r7, #8
 8004c0e:	496c      	ldr	r1, [pc, #432]	; (8004dc0 <printRadioSettings+0x590>)
 8004c10:	4618      	mov	r0, r3
 8004c12:	f00b fa0b 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	reg8Val = NRF24_read_register(0x11+2);
 8004c16:	2013      	movs	r0, #19
 8004c18:	f7ff fb04 	bl	8004224 <NRF24_read_register>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004c22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c2a:	f107 0308 	add.w	r3, r7, #8
 8004c2e:	4965      	ldr	r1, [pc, #404]	; (8004dc4 <printRadioSettings+0x594>)
 8004c30:	4618      	mov	r0, r3
 8004c32:	f00b f9fb 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	reg8Val = NRF24_read_register(0x11+3);
 8004c36:	2014      	movs	r0, #20
 8004c38:	f7ff faf4 	bl	8004224 <NRF24_read_register>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004c42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c4a:	f107 0308 	add.w	r3, r7, #8
 8004c4e:	495e      	ldr	r1, [pc, #376]	; (8004dc8 <printRadioSettings+0x598>)
 8004c50:	4618      	mov	r0, r3
 8004c52:	f00b f9eb 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	reg8Val = NRF24_read_register(0x11+4);
 8004c56:	2015      	movs	r0, #21
 8004c58:	f7ff fae4 	bl	8004224 <NRF24_read_register>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004c62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c6a:	f107 0308 	add.w	r3, r7, #8
 8004c6e:	4957      	ldr	r1, [pc, #348]	; (8004dcc <printRadioSettings+0x59c>)
 8004c70:	4618      	mov	r0, r3
 8004c72:	f00b f9db 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	reg8Val = NRF24_read_register(0x11+5);
 8004c76:	2016      	movs	r0, #22
 8004c78:	f7ff fad4 	bl	8004224 <NRF24_read_register>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004c82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c8a:	f107 0308 	add.w	r3, r7, #8
 8004c8e:	4950      	ldr	r1, [pc, #320]	; (8004dd0 <printRadioSettings+0x5a0>)
 8004c90:	4618      	mov	r0, r3
 8004c92:	f00b f9cb 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8004c96:	201c      	movs	r0, #28
 8004c98:	f7ff fac4 	bl	8004224 <NRF24_read_register>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004ca2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ca6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	bfcc      	ite	gt
 8004cae:	2301      	movgt	r3, #1
 8004cb0:	2300      	movle	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004cb6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004cba:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	bfcc      	ite	gt
 8004cc2:	2301      	movgt	r3, #1
 8004cc4:	2300      	movle	r3, #0
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004cca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004cce:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	bfcc      	ite	gt
 8004cd6:	2301      	movgt	r3, #1
 8004cd8:	2300      	movle	r3, #0
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004cde:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ce2:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	bfcc      	ite	gt
 8004cea:	2301      	movgt	r3, #1
 8004cec:	2300      	movle	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004cf2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004cf6:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	bfcc      	ite	gt
 8004cfe:	2301      	movgt	r3, #1
 8004d00:	2300      	movle	r3, #0
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004d06:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d0a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	bfcc      	ite	gt
 8004d12:	2301      	movgt	r3, #1
 8004d14:	2300      	movle	r3, #0
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	f107 0008 	add.w	r0, r7, #8
 8004d1c:	9303      	str	r3, [sp, #12]
 8004d1e:	9402      	str	r4, [sp, #8]
 8004d20:	9101      	str	r1, [sp, #4]
 8004d22:	9200      	str	r2, [sp, #0]
 8004d24:	4633      	mov	r3, r6
 8004d26:	462a      	mov	r2, r5
 8004d28:	492a      	ldr	r1, [pc, #168]	; (8004dd4 <printRadioSettings+0x5a4>)
 8004d2a:	f00b f97f 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8004d2e:	201d      	movs	r0, #29
 8004d30:	f7ff fa78 	bl	8004224 <NRF24_read_register>
 8004d34:	4603      	mov	r3, r0
 8004d36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8004d3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d006      	beq.n	8004d54 <printRadioSettings+0x524>
 8004d46:	f107 0308 	add.w	r3, r7, #8
 8004d4a:	4923      	ldr	r1, [pc, #140]	; (8004dd8 <printRadioSettings+0x5a8>)
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f00b f96d 	bl	801002c <siprintf>
 8004d52:	e005      	b.n	8004d60 <printRadioSettings+0x530>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8004d54:	f107 0308 	add.w	r3, r7, #8
 8004d58:	4920      	ldr	r1, [pc, #128]	; (8004ddc <printRadioSettings+0x5ac>)
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f00b f966 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8004d60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d006      	beq.n	8004d7a <printRadioSettings+0x54a>
 8004d6c:	f107 0308 	add.w	r3, r7, #8
 8004d70:	491b      	ldr	r1, [pc, #108]	; (8004de0 <printRadioSettings+0x5b0>)
 8004d72:	4618      	mov	r0, r3
 8004d74:	f00b f95a 	bl	801002c <siprintf>
 8004d78:	e005      	b.n	8004d86 <printRadioSettings+0x556>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8004d7a:	f107 0308 	add.w	r3, r7, #8
 8004d7e:	4919      	ldr	r1, [pc, #100]	; (8004de4 <printRadioSettings+0x5b4>)
 8004d80:	4618      	mov	r0, r3
 8004d82:	f00b f953 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8004d86:	f107 0308 	add.w	r3, r7, #8
 8004d8a:	4917      	ldr	r1, [pc, #92]	; (8004de8 <printRadioSettings+0x5b8>)
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f00b f94d 	bl	801002c <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}
 8004d92:	bf00      	nop
 8004d94:	3774      	adds	r7, #116	; 0x74
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	08010934 	.word	0x08010934
 8004da0:	08010948 	.word	0x08010948
 8004da4:	08010978 	.word	0x08010978
 8004da8:	080109a8 	.word	0x080109a8
 8004dac:	080109d0 	.word	0x080109d0
 8004db0:	080109f8 	.word	0x080109f8
 8004db4:	08010a20 	.word	0x08010a20
 8004db8:	08010a48 	.word	0x08010a48
 8004dbc:	08010a74 	.word	0x08010a74
 8004dc0:	08010a90 	.word	0x08010a90
 8004dc4:	08010aac 	.word	0x08010aac
 8004dc8:	08010ac8 	.word	0x08010ac8
 8004dcc:	08010ae4 	.word	0x08010ae4
 8004dd0:	08010b00 	.word	0x08010b00
 8004dd4:	08010b1c 	.word	0x08010b1c
 8004dd8:	08010b68 	.word	0x08010b68
 8004ddc:	08010b80 	.word	0x08010b80
 8004de0:	08010b98 	.word	0x08010b98
 8004de4:	08010bb4 	.word	0x08010bb4
 8004de8:	08010788 	.word	0x08010788

08004dec <nrf24_DebugUART_Init>:
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8004dec:	b084      	sub	sp, #16
 8004dee:	b4b0      	push	{r4, r5, r7}
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	f107 040c 	add.w	r4, r7, #12
 8004df6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8004dfa:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <nrf24_DebugUART_Init+0x34>)
 8004dfc:	461d      	mov	r5, r3
 8004dfe:	f107 040c 	add.w	r4, r7, #12
 8004e02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004e12:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8004e16:	bf00      	nop
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bcb0      	pop	{r4, r5, r7}
 8004e1c:	b004      	add	sp, #16
 8004e1e:	4770      	bx	lr
 8004e20:	20001790 	.word	0x20001790

08004e24 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004e28:	4b17      	ldr	r3, [pc, #92]	; (8004e88 <MX_SPI1_Init+0x64>)
 8004e2a:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <MX_SPI1_Init+0x68>)
 8004e2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004e2e:	4b16      	ldr	r3, [pc, #88]	; (8004e88 <MX_SPI1_Init+0x64>)
 8004e30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004e34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004e36:	4b14      	ldr	r3, [pc, #80]	; (8004e88 <MX_SPI1_Init+0x64>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e3c:	4b12      	ldr	r3, [pc, #72]	; (8004e88 <MX_SPI1_Init+0x64>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e42:	4b11      	ldr	r3, [pc, #68]	; (8004e88 <MX_SPI1_Init+0x64>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004e48:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <MX_SPI1_Init+0x64>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004e4e:	4b0e      	ldr	r3, [pc, #56]	; (8004e88 <MX_SPI1_Init+0x64>)
 8004e50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004e56:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <MX_SPI1_Init+0x64>)
 8004e58:	2220      	movs	r2, #32
 8004e5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <MX_SPI1_Init+0x64>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004e62:	4b09      	ldr	r3, [pc, #36]	; (8004e88 <MX_SPI1_Init+0x64>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e68:	4b07      	ldr	r3, [pc, #28]	; (8004e88 <MX_SPI1_Init+0x64>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004e6e:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <MX_SPI1_Init+0x64>)
 8004e70:	220a      	movs	r2, #10
 8004e72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004e74:	4804      	ldr	r0, [pc, #16]	; (8004e88 <MX_SPI1_Init+0x64>)
 8004e76:	f003 fc07 	bl	8008688 <HAL_SPI_Init>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004e80:	f7ff f950 	bl	8004124 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004e84:	bf00      	nop
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	2000183c 	.word	0x2000183c
 8004e8c:	40013000 	.word	0x40013000

08004e90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e98:	f107 0310 	add.w	r3, r7, #16
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	605a      	str	r2, [r3, #4]
 8004ea2:	609a      	str	r2, [r3, #8]
 8004ea4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1b      	ldr	r2, [pc, #108]	; (8004f18 <HAL_SPI_MspInit+0x88>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d12f      	bne.n	8004f10 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004eb0:	4b1a      	ldr	r3, [pc, #104]	; (8004f1c <HAL_SPI_MspInit+0x8c>)
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	4a19      	ldr	r2, [pc, #100]	; (8004f1c <HAL_SPI_MspInit+0x8c>)
 8004eb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004eba:	6193      	str	r3, [r2, #24]
 8004ebc:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <HAL_SPI_MspInit+0x8c>)
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ec4:	60fb      	str	r3, [r7, #12]
 8004ec6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ec8:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <HAL_SPI_MspInit+0x8c>)
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	4a13      	ldr	r2, [pc, #76]	; (8004f1c <HAL_SPI_MspInit+0x8c>)
 8004ece:	f043 0304 	orr.w	r3, r3, #4
 8004ed2:	6193      	str	r3, [r2, #24]
 8004ed4:	4b11      	ldr	r3, [pc, #68]	; (8004f1c <HAL_SPI_MspInit+0x8c>)
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	60bb      	str	r3, [r7, #8]
 8004ede:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004ee0:	23a0      	movs	r3, #160	; 0xa0
 8004ee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eec:	f107 0310 	add.w	r3, r7, #16
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	480b      	ldr	r0, [pc, #44]	; (8004f20 <HAL_SPI_MspInit+0x90>)
 8004ef4:	f001 f964 	bl	80061c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004ef8:	2340      	movs	r3, #64	; 0x40
 8004efa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f04:	f107 0310 	add.w	r3, r7, #16
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4805      	ldr	r0, [pc, #20]	; (8004f20 <HAL_SPI_MspInit+0x90>)
 8004f0c:	f001 f958 	bl	80061c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004f10:	bf00      	nop
 8004f12:	3720      	adds	r7, #32
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40013000 	.word	0x40013000
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	40010800 	.word	0x40010800

08004f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004f2a:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <HAL_MspInit+0x5c>)
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	4a14      	ldr	r2, [pc, #80]	; (8004f80 <HAL_MspInit+0x5c>)
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	6193      	str	r3, [r2, #24]
 8004f36:	4b12      	ldr	r3, [pc, #72]	; (8004f80 <HAL_MspInit+0x5c>)
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	60bb      	str	r3, [r7, #8]
 8004f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f42:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <HAL_MspInit+0x5c>)
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	4a0e      	ldr	r2, [pc, #56]	; (8004f80 <HAL_MspInit+0x5c>)
 8004f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f4c:	61d3      	str	r3, [r2, #28]
 8004f4e:	4b0c      	ldr	r3, [pc, #48]	; (8004f80 <HAL_MspInit+0x5c>)
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f56:	607b      	str	r3, [r7, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004f5a:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <HAL_MspInit+0x60>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	4a04      	ldr	r2, [pc, #16]	; (8004f84 <HAL_MspInit+0x60>)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f76:	bf00      	nop
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr
 8004f80:	40021000 	.word	0x40021000
 8004f84:	40010000 	.word	0x40010000

08004f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f8c:	e7fe      	b.n	8004f8c <NMI_Handler+0x4>
	...

08004f90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8004f94:	4b0a      	ldr	r3, [pc, #40]	; (8004fc0 <HardFault_Handler+0x30>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f9c:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8004f9e:	4b08      	ldr	r3, [pc, #32]	; (8004fc0 <HardFault_Handler+0x30>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fa6:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8004fa8:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <HardFault_Handler+0x30>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fb0:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8004fb2:	4b03      	ldr	r3, [pc, #12]	; (8004fc0 <HardFault_Handler+0x30>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fba:	641a      	str	r2, [r3, #64]	; 0x40

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fbc:	e7fe      	b.n	8004fbc <HardFault_Handler+0x2c>
 8004fbe:	bf00      	nop
 8004fc0:	20001924 	.word	0x20001924

08004fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fc8:	e7fe      	b.n	8004fc8 <MemManage_Handler+0x4>

08004fca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fce:	e7fe      	b.n	8004fce <BusFault_Handler+0x4>

08004fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fd4:	e7fe      	b.n	8004fd4 <UsageFault_Handler+0x4>

08004fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004fda:	bf00      	nop
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bc80      	pop	{r7}
 8004fe0:	4770      	bx	lr

08004fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fe6:	bf00      	nop
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc80      	pop	{r7}
 8004fec:	4770      	bx	lr

08004fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ff2:	bf00      	nop
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bc80      	pop	{r7}
 8004ff8:	4770      	bx	lr
	...

08004ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(timeout >0)  timeout--;
 8005000:	4b07      	ldr	r3, [pc, #28]	; (8005020 <SysTick_Handler+0x24>)
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d006      	beq.n	8005018 <SysTick_Handler+0x1c>
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <SysTick_Handler+0x24>)
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	4b02      	ldr	r3, [pc, #8]	; (8005020 <SysTick_Handler+0x24>)
 8005016:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005018:	f000 fd20 	bl	8005a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800501c:	bf00      	nop
 800501e:	bd80      	pop	{r7, pc}
 8005020:	200017e4 	.word	0x200017e4

08005024 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005028:	4802      	ldr	r0, [pc, #8]	; (8005034 <DMA1_Channel5_IRQHandler+0x10>)
 800502a:	f000 ff95 	bl	8005f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800502e:	bf00      	nop
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	200019f4 	.word	0x200019f4

08005038 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800503c:	4802      	ldr	r0, [pc, #8]	; (8005048 <DMA1_Channel7_IRQHandler+0x10>)
 800503e:	f000 ff8b 	bl	8005f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005042:	bf00      	nop
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20001a38 	.word	0x20001a38

0800504c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005050:	4802      	ldr	r0, [pc, #8]	; (800505c <TIM2_IRQHandler+0x10>)
 8005052:	f004 fbc1 	bl	80097d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005056:	bf00      	nop
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	2000196c 	.word	0x2000196c

08005060 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005064:	4802      	ldr	r0, [pc, #8]	; (8005070 <TIM3_IRQHandler+0x10>)
 8005066:	f004 fbb7 	bl	80097d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800506a:	bf00      	nop
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	200018dc 	.word	0x200018dc

08005074 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005078:	4802      	ldr	r0, [pc, #8]	; (8005084 <USART2_IRQHandler+0x10>)
 800507a:	f005 fe2b 	bl	800acd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800507e:	bf00      	nop
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20001abc 	.word	0x20001abc

08005088 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	  Uart_isr (&huart3);
 800508c:	4803      	ldr	r0, [pc, #12]	; (800509c <USART3_IRQHandler+0x14>)
 800508e:	f7fc f96f 	bl	8001370 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005092:	4802      	ldr	r0, [pc, #8]	; (800509c <USART3_IRQHandler+0x14>)
 8005094:	f005 fe1e 	bl	800acd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005098:	bf00      	nop
 800509a:	bd80      	pop	{r7, pc}
 800509c:	200019b4 	.word	0x200019b4

080050a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050a8:	4a14      	ldr	r2, [pc, #80]	; (80050fc <_sbrk+0x5c>)
 80050aa:	4b15      	ldr	r3, [pc, #84]	; (8005100 <_sbrk+0x60>)
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050b4:	4b13      	ldr	r3, [pc, #76]	; (8005104 <_sbrk+0x64>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d102      	bne.n	80050c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050bc:	4b11      	ldr	r3, [pc, #68]	; (8005104 <_sbrk+0x64>)
 80050be:	4a12      	ldr	r2, [pc, #72]	; (8005108 <_sbrk+0x68>)
 80050c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050c2:	4b10      	ldr	r3, [pc, #64]	; (8005104 <_sbrk+0x64>)
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4413      	add	r3, r2
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d207      	bcs.n	80050e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050d0:	f00a feb6 	bl	800fe40 <__errno>
 80050d4:	4603      	mov	r3, r0
 80050d6:	220c      	movs	r2, #12
 80050d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050da:	f04f 33ff 	mov.w	r3, #4294967295
 80050de:	e009      	b.n	80050f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050e0:	4b08      	ldr	r3, [pc, #32]	; (8005104 <_sbrk+0x64>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050e6:	4b07      	ldr	r3, [pc, #28]	; (8005104 <_sbrk+0x64>)
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4413      	add	r3, r2
 80050ee:	4a05      	ldr	r2, [pc, #20]	; (8005104 <_sbrk+0x64>)
 80050f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050f2:	68fb      	ldr	r3, [r7, #12]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	20005000 	.word	0x20005000
 8005100:	00000400 	.word	0x00000400
 8005104:	200017d0 	.word	0x200017d0
 8005108:	20001b10 	.word	0x20001b10

0800510c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005110:	bf00      	nop
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr

08005118 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b092      	sub	sp, #72	; 0x48
 800511c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800511e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	605a      	str	r2, [r3, #4]
 8005132:	609a      	str	r2, [r3, #8]
 8005134:	60da      	str	r2, [r3, #12]
 8005136:	611a      	str	r2, [r3, #16]
 8005138:	615a      	str	r2, [r3, #20]
 800513a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800513c:	1d3b      	adds	r3, r7, #4
 800513e:	2220      	movs	r2, #32
 8005140:	2100      	movs	r1, #0
 8005142:	4618      	mov	r0, r3
 8005144:	f00a feb4 	bl	800feb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005148:	4b45      	ldr	r3, [pc, #276]	; (8005260 <MX_TIM1_Init+0x148>)
 800514a:	4a46      	ldr	r2, [pc, #280]	; (8005264 <MX_TIM1_Init+0x14c>)
 800514c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800514e:	4b44      	ldr	r3, [pc, #272]	; (8005260 <MX_TIM1_Init+0x148>)
 8005150:	2247      	movs	r2, #71	; 0x47
 8005152:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005154:	4b42      	ldr	r3, [pc, #264]	; (8005260 <MX_TIM1_Init+0x148>)
 8005156:	2200      	movs	r2, #0
 8005158:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800515a:	4b41      	ldr	r3, [pc, #260]	; (8005260 <MX_TIM1_Init+0x148>)
 800515c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005160:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005162:	4b3f      	ldr	r3, [pc, #252]	; (8005260 <MX_TIM1_Init+0x148>)
 8005164:	2200      	movs	r2, #0
 8005166:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005168:	4b3d      	ldr	r3, [pc, #244]	; (8005260 <MX_TIM1_Init+0x148>)
 800516a:	2200      	movs	r2, #0
 800516c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800516e:	4b3c      	ldr	r3, [pc, #240]	; (8005260 <MX_TIM1_Init+0x148>)
 8005170:	2200      	movs	r2, #0
 8005172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005174:	483a      	ldr	r0, [pc, #232]	; (8005260 <MX_TIM1_Init+0x148>)
 8005176:	f004 f8df 	bl	8009338 <HAL_TIM_PWM_Init>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8005180:	f7fe ffd0 	bl	8004124 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005184:	2300      	movs	r3, #0
 8005186:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005188:	2300      	movs	r3, #0
 800518a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800518c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005190:	4619      	mov	r1, r3
 8005192:	4833      	ldr	r0, [pc, #204]	; (8005260 <MX_TIM1_Init+0x148>)
 8005194:	f005 faee 	bl	800a774 <HAL_TIMEx_MasterConfigSynchronization>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800519e:	f7fe ffc1 	bl	8004124 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80051a2:	2360      	movs	r3, #96	; 0x60
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80051aa:	2300      	movs	r3, #0
 80051ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80051ae:	2300      	movs	r3, #0
 80051b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80051b2:	2300      	movs	r3, #0
 80051b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80051b6:	2300      	movs	r3, #0
 80051b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80051ba:	2300      	movs	r3, #0
 80051bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80051be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051c2:	2200      	movs	r2, #0
 80051c4:	4619      	mov	r1, r3
 80051c6:	4826      	ldr	r0, [pc, #152]	; (8005260 <MX_TIM1_Init+0x148>)
 80051c8:	f004 fca2 	bl	8009b10 <HAL_TIM_PWM_ConfigChannel>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80051d2:	f7fe ffa7 	bl	8004124 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80051d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051da:	2204      	movs	r2, #4
 80051dc:	4619      	mov	r1, r3
 80051de:	4820      	ldr	r0, [pc, #128]	; (8005260 <MX_TIM1_Init+0x148>)
 80051e0:	f004 fc96 	bl	8009b10 <HAL_TIM_PWM_ConfigChannel>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80051ea:	f7fe ff9b 	bl	8004124 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80051ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051f2:	2208      	movs	r2, #8
 80051f4:	4619      	mov	r1, r3
 80051f6:	481a      	ldr	r0, [pc, #104]	; (8005260 <MX_TIM1_Init+0x148>)
 80051f8:	f004 fc8a 	bl	8009b10 <HAL_TIM_PWM_ConfigChannel>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8005202:	f7fe ff8f 	bl	8004124 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800520a:	220c      	movs	r2, #12
 800520c:	4619      	mov	r1, r3
 800520e:	4814      	ldr	r0, [pc, #80]	; (8005260 <MX_TIM1_Init+0x148>)
 8005210:	f004 fc7e 	bl	8009b10 <HAL_TIM_PWM_ConfigChannel>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800521a:	f7fe ff83 	bl	8004124 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800521e:	2300      	movs	r3, #0
 8005220:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005222:	2300      	movs	r3, #0
 8005224:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005232:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005236:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005238:	2300      	movs	r3, #0
 800523a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800523c:	1d3b      	adds	r3, r7, #4
 800523e:	4619      	mov	r1, r3
 8005240:	4807      	ldr	r0, [pc, #28]	; (8005260 <MX_TIM1_Init+0x148>)
 8005242:	f005 faf5 	bl	800a830 <HAL_TIMEx_ConfigBreakDeadTime>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800524c:	f7fe ff6a 	bl	8004124 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005250:	4803      	ldr	r0, [pc, #12]	; (8005260 <MX_TIM1_Init+0x148>)
 8005252:	f000 f9a5 	bl	80055a0 <HAL_TIM_MspPostInit>

}
 8005256:	bf00      	nop
 8005258:	3748      	adds	r7, #72	; 0x48
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20001924 	.word	0x20001924
 8005264:	40012c00 	.word	0x40012c00

08005268 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800526e:	f107 0308 	add.w	r3, r7, #8
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	605a      	str	r2, [r3, #4]
 8005278:	609a      	str	r2, [r3, #8]
 800527a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800527c:	463b      	mov	r3, r7
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005284:	4b1d      	ldr	r3, [pc, #116]	; (80052fc <MX_TIM2_Init+0x94>)
 8005286:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800528a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800528c:	4b1b      	ldr	r3, [pc, #108]	; (80052fc <MX_TIM2_Init+0x94>)
 800528e:	2247      	movs	r2, #71	; 0x47
 8005290:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005292:	4b1a      	ldr	r3, [pc, #104]	; (80052fc <MX_TIM2_Init+0x94>)
 8005294:	2200      	movs	r2, #0
 8005296:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8005298:	4b18      	ldr	r3, [pc, #96]	; (80052fc <MX_TIM2_Init+0x94>)
 800529a:	f241 3288 	movw	r2, #5000	; 0x1388
 800529e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052a0:	4b16      	ldr	r3, [pc, #88]	; (80052fc <MX_TIM2_Init+0x94>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052a6:	4b15      	ldr	r3, [pc, #84]	; (80052fc <MX_TIM2_Init+0x94>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80052ac:	4813      	ldr	r0, [pc, #76]	; (80052fc <MX_TIM2_Init+0x94>)
 80052ae:	f003 ff57 	bl	8009160 <HAL_TIM_Base_Init>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80052b8:	f7fe ff34 	bl	8004124 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80052c2:	f107 0308 	add.w	r3, r7, #8
 80052c6:	4619      	mov	r1, r3
 80052c8:	480c      	ldr	r0, [pc, #48]	; (80052fc <MX_TIM2_Init+0x94>)
 80052ca:	f004 fcdf 	bl	8009c8c <HAL_TIM_ConfigClockSource>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80052d4:	f7fe ff26 	bl	8004124 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052d8:	2300      	movs	r3, #0
 80052da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052dc:	2300      	movs	r3, #0
 80052de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80052e0:	463b      	mov	r3, r7
 80052e2:	4619      	mov	r1, r3
 80052e4:	4805      	ldr	r0, [pc, #20]	; (80052fc <MX_TIM2_Init+0x94>)
 80052e6:	f005 fa45 	bl	800a774 <HAL_TIMEx_MasterConfigSynchronization>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80052f0:	f7fe ff18 	bl	8004124 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80052f4:	bf00      	nop
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	2000196c 	.word	0x2000196c

08005300 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b08a      	sub	sp, #40	; 0x28
 8005304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005306:	f107 0318 	add.w	r3, r7, #24
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	605a      	str	r2, [r3, #4]
 8005310:	609a      	str	r2, [r3, #8]
 8005312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005314:	f107 0310 	add.w	r3, r7, #16
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800531e:	463b      	mov	r3, r7
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	605a      	str	r2, [r3, #4]
 8005326:	609a      	str	r2, [r3, #8]
 8005328:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800532a:	4b2b      	ldr	r3, [pc, #172]	; (80053d8 <MX_TIM3_Init+0xd8>)
 800532c:	4a2b      	ldr	r2, [pc, #172]	; (80053dc <MX_TIM3_Init+0xdc>)
 800532e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8005330:	4b29      	ldr	r3, [pc, #164]	; (80053d8 <MX_TIM3_Init+0xd8>)
 8005332:	2247      	movs	r2, #71	; 0x47
 8005334:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005336:	4b28      	ldr	r3, [pc, #160]	; (80053d8 <MX_TIM3_Init+0xd8>)
 8005338:	2200      	movs	r2, #0
 800533a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800533c:	4b26      	ldr	r3, [pc, #152]	; (80053d8 <MX_TIM3_Init+0xd8>)
 800533e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005342:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005344:	4b24      	ldr	r3, [pc, #144]	; (80053d8 <MX_TIM3_Init+0xd8>)
 8005346:	2200      	movs	r2, #0
 8005348:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800534a:	4b23      	ldr	r3, [pc, #140]	; (80053d8 <MX_TIM3_Init+0xd8>)
 800534c:	2200      	movs	r2, #0
 800534e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005350:	4821      	ldr	r0, [pc, #132]	; (80053d8 <MX_TIM3_Init+0xd8>)
 8005352:	f003 ff05 	bl	8009160 <HAL_TIM_Base_Init>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800535c:	f7fe fee2 	bl	8004124 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005364:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005366:	f107 0318 	add.w	r3, r7, #24
 800536a:	4619      	mov	r1, r3
 800536c:	481a      	ldr	r0, [pc, #104]	; (80053d8 <MX_TIM3_Init+0xd8>)
 800536e:	f004 fc8d 	bl	8009c8c <HAL_TIM_ConfigClockSource>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8005378:	f7fe fed4 	bl	8004124 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800537c:	4816      	ldr	r0, [pc, #88]	; (80053d8 <MX_TIM3_Init+0xd8>)
 800537e:	f004 f8cd 	bl	800951c <HAL_TIM_IC_Init>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8005388:	f7fe fecc 	bl	8004124 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800538c:	2300      	movs	r3, #0
 800538e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005390:	2300      	movs	r3, #0
 8005392:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005394:	f107 0310 	add.w	r3, r7, #16
 8005398:	4619      	mov	r1, r3
 800539a:	480f      	ldr	r0, [pc, #60]	; (80053d8 <MX_TIM3_Init+0xd8>)
 800539c:	f005 f9ea 	bl	800a774 <HAL_TIMEx_MasterConfigSynchronization>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80053a6:	f7fe febd 	bl	8004124 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80053aa:	2300      	movs	r3, #0
 80053ac:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80053ae:	2301      	movs	r3, #1
 80053b0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80053ba:	463b      	mov	r3, r7
 80053bc:	2208      	movs	r2, #8
 80053be:	4619      	mov	r1, r3
 80053c0:	4805      	ldr	r0, [pc, #20]	; (80053d8 <MX_TIM3_Init+0xd8>)
 80053c2:	f004 fb11 	bl	80099e8 <HAL_TIM_IC_ConfigChannel>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80053cc:	f7fe feaa 	bl	8004124 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80053d0:	bf00      	nop
 80053d2:	3728      	adds	r7, #40	; 0x28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	200018dc 	.word	0x200018dc
 80053dc:	40000400 	.word	0x40000400

080053e0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053e6:	f107 0308 	add.w	r3, r7, #8
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	605a      	str	r2, [r3, #4]
 80053f0:	609a      	str	r2, [r3, #8]
 80053f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053f4:	463b      	mov	r3, r7
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80053fc:	4b1d      	ldr	r3, [pc, #116]	; (8005474 <MX_TIM4_Init+0x94>)
 80053fe:	4a1e      	ldr	r2, [pc, #120]	; (8005478 <MX_TIM4_Init+0x98>)
 8005400:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 8005402:	4b1c      	ldr	r3, [pc, #112]	; (8005474 <MX_TIM4_Init+0x94>)
 8005404:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8005408:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800540a:	4b1a      	ldr	r3, [pc, #104]	; (8005474 <MX_TIM4_Init+0x94>)
 800540c:	2200      	movs	r2, #0
 800540e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8005410:	4b18      	ldr	r3, [pc, #96]	; (8005474 <MX_TIM4_Init+0x94>)
 8005412:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005416:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005418:	4b16      	ldr	r3, [pc, #88]	; (8005474 <MX_TIM4_Init+0x94>)
 800541a:	2200      	movs	r2, #0
 800541c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800541e:	4b15      	ldr	r3, [pc, #84]	; (8005474 <MX_TIM4_Init+0x94>)
 8005420:	2200      	movs	r2, #0
 8005422:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005424:	4813      	ldr	r0, [pc, #76]	; (8005474 <MX_TIM4_Init+0x94>)
 8005426:	f003 fe9b 	bl	8009160 <HAL_TIM_Base_Init>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8005430:	f7fe fe78 	bl	8004124 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005438:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800543a:	f107 0308 	add.w	r3, r7, #8
 800543e:	4619      	mov	r1, r3
 8005440:	480c      	ldr	r0, [pc, #48]	; (8005474 <MX_TIM4_Init+0x94>)
 8005442:	f004 fc23 	bl	8009c8c <HAL_TIM_ConfigClockSource>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800544c:	f7fe fe6a 	bl	8004124 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005450:	2300      	movs	r3, #0
 8005452:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005454:	2300      	movs	r3, #0
 8005456:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005458:	463b      	mov	r3, r7
 800545a:	4619      	mov	r1, r3
 800545c:	4805      	ldr	r0, [pc, #20]	; (8005474 <MX_TIM4_Init+0x94>)
 800545e:	f005 f989 	bl	800a774 <HAL_TIMEx_MasterConfigSynchronization>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8005468:	f7fe fe5c 	bl	8004124 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800546c:	bf00      	nop
 800546e:	3718      	adds	r7, #24
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	20001894 	.word	0x20001894
 8005478:	40000800 	.word	0x40000800

0800547c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a09      	ldr	r2, [pc, #36]	; (80054b0 <HAL_TIM_PWM_MspInit+0x34>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d10b      	bne.n	80054a6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800548e:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <HAL_TIM_PWM_MspInit+0x38>)
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	4a08      	ldr	r2, [pc, #32]	; (80054b4 <HAL_TIM_PWM_MspInit+0x38>)
 8005494:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005498:	6193      	str	r3, [r2, #24]
 800549a:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <HAL_TIM_PWM_MspInit+0x38>)
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80054a6:	bf00      	nop
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bc80      	pop	{r7}
 80054ae:	4770      	bx	lr
 80054b0:	40012c00 	.word	0x40012c00
 80054b4:	40021000 	.word	0x40021000

080054b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08a      	sub	sp, #40	; 0x28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054c0:	f107 0318 	add.w	r3, r7, #24
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	605a      	str	r2, [r3, #4]
 80054ca:	609a      	str	r2, [r3, #8]
 80054cc:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d6:	d114      	bne.n	8005502 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80054d8:	4b2d      	ldr	r3, [pc, #180]	; (8005590 <HAL_TIM_Base_MspInit+0xd8>)
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	4a2c      	ldr	r2, [pc, #176]	; (8005590 <HAL_TIM_Base_MspInit+0xd8>)
 80054de:	f043 0301 	orr.w	r3, r3, #1
 80054e2:	61d3      	str	r3, [r2, #28]
 80054e4:	4b2a      	ldr	r3, [pc, #168]	; (8005590 <HAL_TIM_Base_MspInit+0xd8>)
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	617b      	str	r3, [r7, #20]
 80054ee:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80054f0:	2200      	movs	r2, #0
 80054f2:	2101      	movs	r1, #1
 80054f4:	201c      	movs	r0, #28
 80054f6:	f000 fbc8 	bl	8005c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80054fa:	201c      	movs	r0, #28
 80054fc:	f000 fbe1 	bl	8005cc2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005500:	e042      	b.n	8005588 <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM3)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a23      	ldr	r2, [pc, #140]	; (8005594 <HAL_TIM_Base_MspInit+0xdc>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d12c      	bne.n	8005566 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800550c:	4b20      	ldr	r3, [pc, #128]	; (8005590 <HAL_TIM_Base_MspInit+0xd8>)
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	4a1f      	ldr	r2, [pc, #124]	; (8005590 <HAL_TIM_Base_MspInit+0xd8>)
 8005512:	f043 0302 	orr.w	r3, r3, #2
 8005516:	61d3      	str	r3, [r2, #28]
 8005518:	4b1d      	ldr	r3, [pc, #116]	; (8005590 <HAL_TIM_Base_MspInit+0xd8>)
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005524:	4b1a      	ldr	r3, [pc, #104]	; (8005590 <HAL_TIM_Base_MspInit+0xd8>)
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	4a19      	ldr	r2, [pc, #100]	; (8005590 <HAL_TIM_Base_MspInit+0xd8>)
 800552a:	f043 0308 	orr.w	r3, r3, #8
 800552e:	6193      	str	r3, [r2, #24]
 8005530:	4b17      	ldr	r3, [pc, #92]	; (8005590 <HAL_TIM_Base_MspInit+0xd8>)
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	f003 0308 	and.w	r3, r3, #8
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800553c:	2301      	movs	r3, #1
 800553e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005540:	2300      	movs	r3, #0
 8005542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005544:	2300      	movs	r3, #0
 8005546:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005548:	f107 0318 	add.w	r3, r7, #24
 800554c:	4619      	mov	r1, r3
 800554e:	4812      	ldr	r0, [pc, #72]	; (8005598 <HAL_TIM_Base_MspInit+0xe0>)
 8005550:	f000 fe36 	bl	80061c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005554:	2200      	movs	r2, #0
 8005556:	2100      	movs	r1, #0
 8005558:	201d      	movs	r0, #29
 800555a:	f000 fb96 	bl	8005c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800555e:	201d      	movs	r0, #29
 8005560:	f000 fbaf 	bl	8005cc2 <HAL_NVIC_EnableIRQ>
}
 8005564:	e010      	b.n	8005588 <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM4)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a0c      	ldr	r2, [pc, #48]	; (800559c <HAL_TIM_Base_MspInit+0xe4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d10b      	bne.n	8005588 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005570:	4b07      	ldr	r3, [pc, #28]	; (8005590 <HAL_TIM_Base_MspInit+0xd8>)
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	4a06      	ldr	r2, [pc, #24]	; (8005590 <HAL_TIM_Base_MspInit+0xd8>)
 8005576:	f043 0304 	orr.w	r3, r3, #4
 800557a:	61d3      	str	r3, [r2, #28]
 800557c:	4b04      	ldr	r3, [pc, #16]	; (8005590 <HAL_TIM_Base_MspInit+0xd8>)
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	60bb      	str	r3, [r7, #8]
 8005586:	68bb      	ldr	r3, [r7, #8]
}
 8005588:	bf00      	nop
 800558a:	3728      	adds	r7, #40	; 0x28
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40021000 	.word	0x40021000
 8005594:	40000400 	.word	0x40000400
 8005598:	40010c00 	.word	0x40010c00
 800559c:	40000800 	.word	0x40000800

080055a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055a8:	f107 0310 	add.w	r3, r7, #16
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	605a      	str	r2, [r3, #4]
 80055b2:	609a      	str	r2, [r3, #8]
 80055b4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1c      	ldr	r2, [pc, #112]	; (800562c <HAL_TIM_MspPostInit+0x8c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d131      	bne.n	8005624 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055c0:	4b1b      	ldr	r3, [pc, #108]	; (8005630 <HAL_TIM_MspPostInit+0x90>)
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	4a1a      	ldr	r2, [pc, #104]	; (8005630 <HAL_TIM_MspPostInit+0x90>)
 80055c6:	f043 0308 	orr.w	r3, r3, #8
 80055ca:	6193      	str	r3, [r2, #24]
 80055cc:	4b18      	ldr	r3, [pc, #96]	; (8005630 <HAL_TIM_MspPostInit+0x90>)
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	f003 0308 	and.w	r3, r3, #8
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055d8:	4b15      	ldr	r3, [pc, #84]	; (8005630 <HAL_TIM_MspPostInit+0x90>)
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	4a14      	ldr	r2, [pc, #80]	; (8005630 <HAL_TIM_MspPostInit+0x90>)
 80055de:	f043 0304 	orr.w	r3, r3, #4
 80055e2:	6193      	str	r3, [r2, #24]
 80055e4:	4b12      	ldr	r3, [pc, #72]	; (8005630 <HAL_TIM_MspPostInit+0x90>)
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	60bb      	str	r3, [r7, #8]
 80055ee:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80055f0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80055f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f6:	2302      	movs	r3, #2
 80055f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055fa:	2302      	movs	r3, #2
 80055fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055fe:	f107 0310 	add.w	r3, r7, #16
 8005602:	4619      	mov	r1, r3
 8005604:	480b      	ldr	r0, [pc, #44]	; (8005634 <HAL_TIM_MspPostInit+0x94>)
 8005606:	f000 fddb 	bl	80061c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800560a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800560e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005610:	2302      	movs	r3, #2
 8005612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005614:	2302      	movs	r3, #2
 8005616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005618:	f107 0310 	add.w	r3, r7, #16
 800561c:	4619      	mov	r1, r3
 800561e:	4806      	ldr	r0, [pc, #24]	; (8005638 <HAL_TIM_MspPostInit+0x98>)
 8005620:	f000 fdce 	bl	80061c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005624:	bf00      	nop
 8005626:	3720      	adds	r7, #32
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40012c00 	.word	0x40012c00
 8005630:	40021000 	.word	0x40021000
 8005634:	40010c00 	.word	0x40010c00
 8005638:	40010800 	.word	0x40010800

0800563c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005640:	4b11      	ldr	r3, [pc, #68]	; (8005688 <MX_USART1_UART_Init+0x4c>)
 8005642:	4a12      	ldr	r2, [pc, #72]	; (800568c <MX_USART1_UART_Init+0x50>)
 8005644:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8005646:	4b10      	ldr	r3, [pc, #64]	; (8005688 <MX_USART1_UART_Init+0x4c>)
 8005648:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800564c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800564e:	4b0e      	ldr	r3, [pc, #56]	; (8005688 <MX_USART1_UART_Init+0x4c>)
 8005650:	2200      	movs	r2, #0
 8005652:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005654:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <MX_USART1_UART_Init+0x4c>)
 8005656:	2200      	movs	r2, #0
 8005658:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800565a:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <MX_USART1_UART_Init+0x4c>)
 800565c:	2200      	movs	r2, #0
 800565e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005660:	4b09      	ldr	r3, [pc, #36]	; (8005688 <MX_USART1_UART_Init+0x4c>)
 8005662:	220c      	movs	r2, #12
 8005664:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005666:	4b08      	ldr	r3, [pc, #32]	; (8005688 <MX_USART1_UART_Init+0x4c>)
 8005668:	2200      	movs	r2, #0
 800566a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800566c:	4b06      	ldr	r3, [pc, #24]	; (8005688 <MX_USART1_UART_Init+0x4c>)
 800566e:	2200      	movs	r2, #0
 8005670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005672:	4805      	ldr	r0, [pc, #20]	; (8005688 <MX_USART1_UART_Init+0x4c>)
 8005674:	f005 f963 	bl	800a93e <HAL_UART_Init>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800567e:	f7fe fd51 	bl	8004124 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005682:	bf00      	nop
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20001a7c 	.word	0x20001a7c
 800568c:	40013800 	.word	0x40013800

08005690 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005694:	4b11      	ldr	r3, [pc, #68]	; (80056dc <MX_USART2_UART_Init+0x4c>)
 8005696:	4a12      	ldr	r2, [pc, #72]	; (80056e0 <MX_USART2_UART_Init+0x50>)
 8005698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800569a:	4b10      	ldr	r3, [pc, #64]	; (80056dc <MX_USART2_UART_Init+0x4c>)
 800569c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80056a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80056a2:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <MX_USART2_UART_Init+0x4c>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80056a8:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <MX_USART2_UART_Init+0x4c>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80056ae:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <MX_USART2_UART_Init+0x4c>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80056b4:	4b09      	ldr	r3, [pc, #36]	; (80056dc <MX_USART2_UART_Init+0x4c>)
 80056b6:	220c      	movs	r2, #12
 80056b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056ba:	4b08      	ldr	r3, [pc, #32]	; (80056dc <MX_USART2_UART_Init+0x4c>)
 80056bc:	2200      	movs	r2, #0
 80056be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80056c0:	4b06      	ldr	r3, [pc, #24]	; (80056dc <MX_USART2_UART_Init+0x4c>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80056c6:	4805      	ldr	r0, [pc, #20]	; (80056dc <MX_USART2_UART_Init+0x4c>)
 80056c8:	f005 f939 	bl	800a93e <HAL_UART_Init>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80056d2:	f7fe fd27 	bl	8004124 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80056d6:	bf00      	nop
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	20001abc 	.word	0x20001abc
 80056e0:	40004400 	.word	0x40004400

080056e4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80056e8:	4b11      	ldr	r3, [pc, #68]	; (8005730 <MX_USART3_UART_Init+0x4c>)
 80056ea:	4a12      	ldr	r2, [pc, #72]	; (8005734 <MX_USART3_UART_Init+0x50>)
 80056ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80056ee:	4b10      	ldr	r3, [pc, #64]	; (8005730 <MX_USART3_UART_Init+0x4c>)
 80056f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80056f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80056f6:	4b0e      	ldr	r3, [pc, #56]	; (8005730 <MX_USART3_UART_Init+0x4c>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80056fc:	4b0c      	ldr	r3, [pc, #48]	; (8005730 <MX_USART3_UART_Init+0x4c>)
 80056fe:	2200      	movs	r2, #0
 8005700:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005702:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <MX_USART3_UART_Init+0x4c>)
 8005704:	2200      	movs	r2, #0
 8005706:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005708:	4b09      	ldr	r3, [pc, #36]	; (8005730 <MX_USART3_UART_Init+0x4c>)
 800570a:	220c      	movs	r2, #12
 800570c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800570e:	4b08      	ldr	r3, [pc, #32]	; (8005730 <MX_USART3_UART_Init+0x4c>)
 8005710:	2200      	movs	r2, #0
 8005712:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <MX_USART3_UART_Init+0x4c>)
 8005716:	2200      	movs	r2, #0
 8005718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800571a:	4805      	ldr	r0, [pc, #20]	; (8005730 <MX_USART3_UART_Init+0x4c>)
 800571c:	f005 f90f 	bl	800a93e <HAL_UART_Init>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005726:	f7fe fcfd 	bl	8004124 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800572a:	bf00      	nop
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	200019b4 	.word	0x200019b4
 8005734:	40004800 	.word	0x40004800

08005738 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08c      	sub	sp, #48	; 0x30
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005740:	f107 0320 	add.w	r3, r7, #32
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	605a      	str	r2, [r3, #4]
 800574a:	609a      	str	r2, [r3, #8]
 800574c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a82      	ldr	r2, [pc, #520]	; (800595c <HAL_UART_MspInit+0x224>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d159      	bne.n	800580c <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005758:	4b81      	ldr	r3, [pc, #516]	; (8005960 <HAL_UART_MspInit+0x228>)
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	4a80      	ldr	r2, [pc, #512]	; (8005960 <HAL_UART_MspInit+0x228>)
 800575e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005762:	6193      	str	r3, [r2, #24]
 8005764:	4b7e      	ldr	r3, [pc, #504]	; (8005960 <HAL_UART_MspInit+0x228>)
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800576c:	61fb      	str	r3, [r7, #28]
 800576e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005770:	4b7b      	ldr	r3, [pc, #492]	; (8005960 <HAL_UART_MspInit+0x228>)
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	4a7a      	ldr	r2, [pc, #488]	; (8005960 <HAL_UART_MspInit+0x228>)
 8005776:	f043 0304 	orr.w	r3, r3, #4
 800577a:	6193      	str	r3, [r2, #24]
 800577c:	4b78      	ldr	r3, [pc, #480]	; (8005960 <HAL_UART_MspInit+0x228>)
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800578c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800578e:	2302      	movs	r3, #2
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005792:	2303      	movs	r3, #3
 8005794:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005796:	f107 0320 	add.w	r3, r7, #32
 800579a:	4619      	mov	r1, r3
 800579c:	4871      	ldr	r0, [pc, #452]	; (8005964 <HAL_UART_MspInit+0x22c>)
 800579e:	f000 fd0f 	bl	80061c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80057a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057a8:	2300      	movs	r3, #0
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ac:	2300      	movs	r3, #0
 80057ae:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057b0:	f107 0320 	add.w	r3, r7, #32
 80057b4:	4619      	mov	r1, r3
 80057b6:	486b      	ldr	r0, [pc, #428]	; (8005964 <HAL_UART_MspInit+0x22c>)
 80057b8:	f000 fd02 	bl	80061c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80057bc:	4b6a      	ldr	r3, [pc, #424]	; (8005968 <HAL_UART_MspInit+0x230>)
 80057be:	4a6b      	ldr	r2, [pc, #428]	; (800596c <HAL_UART_MspInit+0x234>)
 80057c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057c2:	4b69      	ldr	r3, [pc, #420]	; (8005968 <HAL_UART_MspInit+0x230>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057c8:	4b67      	ldr	r3, [pc, #412]	; (8005968 <HAL_UART_MspInit+0x230>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80057ce:	4b66      	ldr	r3, [pc, #408]	; (8005968 <HAL_UART_MspInit+0x230>)
 80057d0:	2280      	movs	r2, #128	; 0x80
 80057d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057d4:	4b64      	ldr	r3, [pc, #400]	; (8005968 <HAL_UART_MspInit+0x230>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057da:	4b63      	ldr	r3, [pc, #396]	; (8005968 <HAL_UART_MspInit+0x230>)
 80057dc:	2200      	movs	r2, #0
 80057de:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80057e0:	4b61      	ldr	r3, [pc, #388]	; (8005968 <HAL_UART_MspInit+0x230>)
 80057e2:	2220      	movs	r2, #32
 80057e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80057e6:	4b60      	ldr	r3, [pc, #384]	; (8005968 <HAL_UART_MspInit+0x230>)
 80057e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80057ee:	485e      	ldr	r0, [pc, #376]	; (8005968 <HAL_UART_MspInit+0x230>)
 80057f0:	f000 fa82 	bl	8005cf8 <HAL_DMA_Init>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80057fa:	f7fe fc93 	bl	8004124 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a59      	ldr	r2, [pc, #356]	; (8005968 <HAL_UART_MspInit+0x230>)
 8005802:	635a      	str	r2, [r3, #52]	; 0x34
 8005804:	4a58      	ldr	r2, [pc, #352]	; (8005968 <HAL_UART_MspInit+0x230>)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800580a:	e0a3      	b.n	8005954 <HAL_UART_MspInit+0x21c>
  else if(uartHandle->Instance==USART2)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a57      	ldr	r2, [pc, #348]	; (8005970 <HAL_UART_MspInit+0x238>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d15f      	bne.n	80058d6 <HAL_UART_MspInit+0x19e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005816:	4b52      	ldr	r3, [pc, #328]	; (8005960 <HAL_UART_MspInit+0x228>)
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	4a51      	ldr	r2, [pc, #324]	; (8005960 <HAL_UART_MspInit+0x228>)
 800581c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005820:	61d3      	str	r3, [r2, #28]
 8005822:	4b4f      	ldr	r3, [pc, #316]	; (8005960 <HAL_UART_MspInit+0x228>)
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800582e:	4b4c      	ldr	r3, [pc, #304]	; (8005960 <HAL_UART_MspInit+0x228>)
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	4a4b      	ldr	r2, [pc, #300]	; (8005960 <HAL_UART_MspInit+0x228>)
 8005834:	f043 0304 	orr.w	r3, r3, #4
 8005838:	6193      	str	r3, [r2, #24]
 800583a:	4b49      	ldr	r3, [pc, #292]	; (8005960 <HAL_UART_MspInit+0x228>)
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	613b      	str	r3, [r7, #16]
 8005844:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005846:	2304      	movs	r3, #4
 8005848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800584a:	2302      	movs	r3, #2
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800584e:	2303      	movs	r3, #3
 8005850:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005852:	f107 0320 	add.w	r3, r7, #32
 8005856:	4619      	mov	r1, r3
 8005858:	4842      	ldr	r0, [pc, #264]	; (8005964 <HAL_UART_MspInit+0x22c>)
 800585a:	f000 fcb1 	bl	80061c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800585e:	2308      	movs	r3, #8
 8005860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005862:	2300      	movs	r3, #0
 8005864:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005866:	2300      	movs	r3, #0
 8005868:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800586a:	f107 0320 	add.w	r3, r7, #32
 800586e:	4619      	mov	r1, r3
 8005870:	483c      	ldr	r0, [pc, #240]	; (8005964 <HAL_UART_MspInit+0x22c>)
 8005872:	f000 fca5 	bl	80061c0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005876:	4b3f      	ldr	r3, [pc, #252]	; (8005974 <HAL_UART_MspInit+0x23c>)
 8005878:	4a3f      	ldr	r2, [pc, #252]	; (8005978 <HAL_UART_MspInit+0x240>)
 800587a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800587c:	4b3d      	ldr	r3, [pc, #244]	; (8005974 <HAL_UART_MspInit+0x23c>)
 800587e:	2210      	movs	r2, #16
 8005880:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005882:	4b3c      	ldr	r3, [pc, #240]	; (8005974 <HAL_UART_MspInit+0x23c>)
 8005884:	2200      	movs	r2, #0
 8005886:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005888:	4b3a      	ldr	r3, [pc, #232]	; (8005974 <HAL_UART_MspInit+0x23c>)
 800588a:	2280      	movs	r2, #128	; 0x80
 800588c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800588e:	4b39      	ldr	r3, [pc, #228]	; (8005974 <HAL_UART_MspInit+0x23c>)
 8005890:	2200      	movs	r2, #0
 8005892:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005894:	4b37      	ldr	r3, [pc, #220]	; (8005974 <HAL_UART_MspInit+0x23c>)
 8005896:	2200      	movs	r2, #0
 8005898:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800589a:	4b36      	ldr	r3, [pc, #216]	; (8005974 <HAL_UART_MspInit+0x23c>)
 800589c:	2200      	movs	r2, #0
 800589e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80058a0:	4b34      	ldr	r3, [pc, #208]	; (8005974 <HAL_UART_MspInit+0x23c>)
 80058a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80058a8:	4832      	ldr	r0, [pc, #200]	; (8005974 <HAL_UART_MspInit+0x23c>)
 80058aa:	f000 fa25 	bl	8005cf8 <HAL_DMA_Init>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <HAL_UART_MspInit+0x180>
      Error_Handler();
 80058b4:	f7fe fc36 	bl	8004124 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a2e      	ldr	r2, [pc, #184]	; (8005974 <HAL_UART_MspInit+0x23c>)
 80058bc:	631a      	str	r2, [r3, #48]	; 0x30
 80058be:	4a2d      	ldr	r2, [pc, #180]	; (8005974 <HAL_UART_MspInit+0x23c>)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80058c4:	2200      	movs	r2, #0
 80058c6:	2100      	movs	r1, #0
 80058c8:	2026      	movs	r0, #38	; 0x26
 80058ca:	f000 f9de 	bl	8005c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80058ce:	2026      	movs	r0, #38	; 0x26
 80058d0:	f000 f9f7 	bl	8005cc2 <HAL_NVIC_EnableIRQ>
}
 80058d4:	e03e      	b.n	8005954 <HAL_UART_MspInit+0x21c>
  else if(uartHandle->Instance==USART3)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a28      	ldr	r2, [pc, #160]	; (800597c <HAL_UART_MspInit+0x244>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d139      	bne.n	8005954 <HAL_UART_MspInit+0x21c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80058e0:	4b1f      	ldr	r3, [pc, #124]	; (8005960 <HAL_UART_MspInit+0x228>)
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	4a1e      	ldr	r2, [pc, #120]	; (8005960 <HAL_UART_MspInit+0x228>)
 80058e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058ea:	61d3      	str	r3, [r2, #28]
 80058ec:	4b1c      	ldr	r3, [pc, #112]	; (8005960 <HAL_UART_MspInit+0x228>)
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058f8:	4b19      	ldr	r3, [pc, #100]	; (8005960 <HAL_UART_MspInit+0x228>)
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	4a18      	ldr	r2, [pc, #96]	; (8005960 <HAL_UART_MspInit+0x228>)
 80058fe:	f043 0308 	orr.w	r3, r3, #8
 8005902:	6193      	str	r3, [r2, #24]
 8005904:	4b16      	ldr	r3, [pc, #88]	; (8005960 <HAL_UART_MspInit+0x228>)
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	60bb      	str	r3, [r7, #8]
 800590e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005916:	2302      	movs	r3, #2
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800591a:	2303      	movs	r3, #3
 800591c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800591e:	f107 0320 	add.w	r3, r7, #32
 8005922:	4619      	mov	r1, r3
 8005924:	4816      	ldr	r0, [pc, #88]	; (8005980 <HAL_UART_MspInit+0x248>)
 8005926:	f000 fc4b 	bl	80061c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800592a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800592e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005930:	2300      	movs	r3, #0
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005934:	2300      	movs	r3, #0
 8005936:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005938:	f107 0320 	add.w	r3, r7, #32
 800593c:	4619      	mov	r1, r3
 800593e:	4810      	ldr	r0, [pc, #64]	; (8005980 <HAL_UART_MspInit+0x248>)
 8005940:	f000 fc3e 	bl	80061c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005944:	2200      	movs	r2, #0
 8005946:	2100      	movs	r1, #0
 8005948:	2027      	movs	r0, #39	; 0x27
 800594a:	f000 f99e 	bl	8005c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800594e:	2027      	movs	r0, #39	; 0x27
 8005950:	f000 f9b7 	bl	8005cc2 <HAL_NVIC_EnableIRQ>
}
 8005954:	bf00      	nop
 8005956:	3730      	adds	r7, #48	; 0x30
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	40013800 	.word	0x40013800
 8005960:	40021000 	.word	0x40021000
 8005964:	40010800 	.word	0x40010800
 8005968:	200019f4 	.word	0x200019f4
 800596c:	40020058 	.word	0x40020058
 8005970:	40004400 	.word	0x40004400
 8005974:	20001a38 	.word	0x20001a38
 8005978:	40020080 	.word	0x40020080
 800597c:	40004800 	.word	0x40004800
 8005980:	40010c00 	.word	0x40010c00

08005984 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005984:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005986:	e003      	b.n	8005990 <LoopCopyDataInit>

08005988 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005988:	4b0b      	ldr	r3, [pc, #44]	; (80059b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800598a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800598c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800598e:	3104      	adds	r1, #4

08005990 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005990:	480a      	ldr	r0, [pc, #40]	; (80059bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005992:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005994:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005996:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005998:	d3f6      	bcc.n	8005988 <CopyDataInit>
  ldr r2, =_sbss
 800599a:	4a0a      	ldr	r2, [pc, #40]	; (80059c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800599c:	e002      	b.n	80059a4 <LoopFillZerobss>

0800599e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800599e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80059a0:	f842 3b04 	str.w	r3, [r2], #4

080059a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80059a4:	4b08      	ldr	r3, [pc, #32]	; (80059c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80059a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80059a8:	d3f9      	bcc.n	800599e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80059aa:	f7ff fbaf 	bl	800510c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80059ae:	f00a fa4d 	bl	800fe4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80059b2:	f7fc fa85 	bl	8001ec0 <main>
  bx lr
 80059b6:	4770      	bx	lr
  ldr r3, =_sidata
 80059b8:	080111e4 	.word	0x080111e4
  ldr r0, =_sdata
 80059bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80059c0:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 80059c4:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 80059c8:	20001b10 	.word	0x20001b10

080059cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80059cc:	e7fe      	b.n	80059cc <ADC1_2_IRQHandler>
	...

080059d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80059d4:	4b08      	ldr	r3, [pc, #32]	; (80059f8 <HAL_Init+0x28>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a07      	ldr	r2, [pc, #28]	; (80059f8 <HAL_Init+0x28>)
 80059da:	f043 0310 	orr.w	r3, r3, #16
 80059de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059e0:	2003      	movs	r0, #3
 80059e2:	f000 f947 	bl	8005c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80059e6:	2000      	movs	r0, #0
 80059e8:	f000 f808 	bl	80059fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80059ec:	f7ff fa9a 	bl	8004f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	40022000 	.word	0x40022000

080059fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005a04:	4b12      	ldr	r3, [pc, #72]	; (8005a50 <HAL_InitTick+0x54>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	4b12      	ldr	r3, [pc, #72]	; (8005a54 <HAL_InitTick+0x58>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 f95f 	bl	8005cde <HAL_SYSTICK_Config>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e00e      	b.n	8005a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b0f      	cmp	r3, #15
 8005a2e:	d80a      	bhi.n	8005a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a30:	2200      	movs	r2, #0
 8005a32:	6879      	ldr	r1, [r7, #4]
 8005a34:	f04f 30ff 	mov.w	r0, #4294967295
 8005a38:	f000 f927 	bl	8005c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005a3c:	4a06      	ldr	r2, [pc, #24]	; (8005a58 <HAL_InitTick+0x5c>)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	e000      	b.n	8005a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20000010 	.word	0x20000010
 8005a54:	20000018 	.word	0x20000018
 8005a58:	20000014 	.word	0x20000014

08005a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a60:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <HAL_IncTick+0x1c>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	461a      	mov	r2, r3
 8005a66:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <HAL_IncTick+0x20>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	4a03      	ldr	r2, [pc, #12]	; (8005a7c <HAL_IncTick+0x20>)
 8005a6e:	6013      	str	r3, [r2, #0]
}
 8005a70:	bf00      	nop
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bc80      	pop	{r7}
 8005a76:	4770      	bx	lr
 8005a78:	20000018 	.word	0x20000018
 8005a7c:	20001afc 	.word	0x20001afc

08005a80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a80:	b480      	push	{r7}
 8005a82:	af00      	add	r7, sp, #0
  return uwTick;
 8005a84:	4b02      	ldr	r3, [pc, #8]	; (8005a90 <HAL_GetTick+0x10>)
 8005a86:	681b      	ldr	r3, [r3, #0]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr
 8005a90:	20001afc 	.word	0x20001afc

08005a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a9c:	f7ff fff0 	bl	8005a80 <HAL_GetTick>
 8005aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aac:	d005      	beq.n	8005aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005aae:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <HAL_Delay+0x44>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005aba:	bf00      	nop
 8005abc:	f7ff ffe0 	bl	8005a80 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d8f7      	bhi.n	8005abc <HAL_Delay+0x28>
  {
  }
}
 8005acc:	bf00      	nop
 8005ace:	bf00      	nop
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20000018 	.word	0x20000018

08005adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005aec:	4b0c      	ldr	r3, [pc, #48]	; (8005b20 <__NVIC_SetPriorityGrouping+0x44>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005af8:	4013      	ands	r3, r2
 8005afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b0e:	4a04      	ldr	r2, [pc, #16]	; (8005b20 <__NVIC_SetPriorityGrouping+0x44>)
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	60d3      	str	r3, [r2, #12]
}
 8005b14:	bf00      	nop
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bc80      	pop	{r7}
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	e000ed00 	.word	0xe000ed00

08005b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b28:	4b04      	ldr	r3, [pc, #16]	; (8005b3c <__NVIC_GetPriorityGrouping+0x18>)
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	0a1b      	lsrs	r3, r3, #8
 8005b2e:	f003 0307 	and.w	r3, r3, #7
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bc80      	pop	{r7}
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	e000ed00 	.word	0xe000ed00

08005b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	4603      	mov	r3, r0
 8005b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	db0b      	blt.n	8005b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b52:	79fb      	ldrb	r3, [r7, #7]
 8005b54:	f003 021f 	and.w	r2, r3, #31
 8005b58:	4906      	ldr	r1, [pc, #24]	; (8005b74 <__NVIC_EnableIRQ+0x34>)
 8005b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	2001      	movs	r0, #1
 8005b62:	fa00 f202 	lsl.w	r2, r0, r2
 8005b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bc80      	pop	{r7}
 8005b72:	4770      	bx	lr
 8005b74:	e000e100 	.word	0xe000e100

08005b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	6039      	str	r1, [r7, #0]
 8005b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	db0a      	blt.n	8005ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	490c      	ldr	r1, [pc, #48]	; (8005bc4 <__NVIC_SetPriority+0x4c>)
 8005b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b96:	0112      	lsls	r2, r2, #4
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	440b      	add	r3, r1
 8005b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ba0:	e00a      	b.n	8005bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	4908      	ldr	r1, [pc, #32]	; (8005bc8 <__NVIC_SetPriority+0x50>)
 8005ba8:	79fb      	ldrb	r3, [r7, #7]
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	3b04      	subs	r3, #4
 8005bb0:	0112      	lsls	r2, r2, #4
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	440b      	add	r3, r1
 8005bb6:	761a      	strb	r2, [r3, #24]
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bc80      	pop	{r7}
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	e000e100 	.word	0xe000e100
 8005bc8:	e000ed00 	.word	0xe000ed00

08005bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b089      	sub	sp, #36	; 0x24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	f1c3 0307 	rsb	r3, r3, #7
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	bf28      	it	cs
 8005bea:	2304      	movcs	r3, #4
 8005bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	2b06      	cmp	r3, #6
 8005bf4:	d902      	bls.n	8005bfc <NVIC_EncodePriority+0x30>
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	3b03      	subs	r3, #3
 8005bfa:	e000      	b.n	8005bfe <NVIC_EncodePriority+0x32>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c00:	f04f 32ff 	mov.w	r2, #4294967295
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0a:	43da      	mvns	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	401a      	ands	r2, r3
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c14:	f04f 31ff 	mov.w	r1, #4294967295
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1e:	43d9      	mvns	r1, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c24:	4313      	orrs	r3, r2
         );
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3724      	adds	r7, #36	; 0x24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bc80      	pop	{r7}
 8005c2e:	4770      	bx	lr

08005c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c40:	d301      	bcc.n	8005c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c42:	2301      	movs	r3, #1
 8005c44:	e00f      	b.n	8005c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c46:	4a0a      	ldr	r2, [pc, #40]	; (8005c70 <SysTick_Config+0x40>)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c4e:	210f      	movs	r1, #15
 8005c50:	f04f 30ff 	mov.w	r0, #4294967295
 8005c54:	f7ff ff90 	bl	8005b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <SysTick_Config+0x40>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c5e:	4b04      	ldr	r3, [pc, #16]	; (8005c70 <SysTick_Config+0x40>)
 8005c60:	2207      	movs	r2, #7
 8005c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	e000e010 	.word	0xe000e010

08005c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7ff ff2d 	bl	8005adc <__NVIC_SetPriorityGrouping>
}
 8005c82:	bf00      	nop
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b086      	sub	sp, #24
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	4603      	mov	r3, r0
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	607a      	str	r2, [r7, #4]
 8005c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c9c:	f7ff ff42 	bl	8005b24 <__NVIC_GetPriorityGrouping>
 8005ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	6978      	ldr	r0, [r7, #20]
 8005ca8:	f7ff ff90 	bl	8005bcc <NVIC_EncodePriority>
 8005cac:	4602      	mov	r2, r0
 8005cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff ff5f 	bl	8005b78 <__NVIC_SetPriority>
}
 8005cba:	bf00      	nop
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	4603      	mov	r3, r0
 8005cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff ff35 	bl	8005b40 <__NVIC_EnableIRQ>
}
 8005cd6:	bf00      	nop
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b082      	sub	sp, #8
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7ff ffa2 	bl	8005c30 <SysTick_Config>
 8005cec:	4603      	mov	r3, r0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
	...

08005cf8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e043      	b.n	8005d96 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	4b22      	ldr	r3, [pc, #136]	; (8005da0 <HAL_DMA_Init+0xa8>)
 8005d16:	4413      	add	r3, r2
 8005d18:	4a22      	ldr	r2, [pc, #136]	; (8005da4 <HAL_DMA_Init+0xac>)
 8005d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1e:	091b      	lsrs	r3, r3, #4
 8005d20:	009a      	lsls	r2, r3, #2
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a1f      	ldr	r2, [pc, #124]	; (8005da8 <HAL_DMA_Init+0xb0>)
 8005d2a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005d42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005d46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bc80      	pop	{r7}
 8005d9e:	4770      	bx	lr
 8005da0:	bffdfff8 	.word	0xbffdfff8
 8005da4:	cccccccd 	.word	0xcccccccd
 8005da8:	40020000 	.word	0x40020000

08005dac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_DMA_Start_IT+0x20>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e04a      	b.n	8005e62 <HAL_DMA_Start_IT+0xb6>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d13a      	bne.n	8005e54 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2202      	movs	r2, #2
 8005de2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0201 	bic.w	r2, r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	68b9      	ldr	r1, [r7, #8]
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 f9ae 	bl	8006164 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d008      	beq.n	8005e22 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 020e 	orr.w	r2, r2, #14
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	e00f      	b.n	8005e42 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0204 	bic.w	r2, r2, #4
 8005e30:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f042 020a 	orr.w	r2, r2, #10
 8005e40:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0201 	orr.w	r2, r2, #1
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	e005      	b.n	8005e60 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3718      	adds	r7, #24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
	...

08005e6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d005      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2204      	movs	r2, #4
 8005e86:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	73fb      	strb	r3, [r7, #15]
 8005e8c:	e051      	b.n	8005f32 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 020e 	bic.w	r2, r2, #14
 8005e9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0201 	bic.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a22      	ldr	r2, [pc, #136]	; (8005f3c <HAL_DMA_Abort_IT+0xd0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d029      	beq.n	8005f0c <HAL_DMA_Abort_IT+0xa0>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a20      	ldr	r2, [pc, #128]	; (8005f40 <HAL_DMA_Abort_IT+0xd4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d022      	beq.n	8005f08 <HAL_DMA_Abort_IT+0x9c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1f      	ldr	r2, [pc, #124]	; (8005f44 <HAL_DMA_Abort_IT+0xd8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d01a      	beq.n	8005f02 <HAL_DMA_Abort_IT+0x96>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a1d      	ldr	r2, [pc, #116]	; (8005f48 <HAL_DMA_Abort_IT+0xdc>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d012      	beq.n	8005efc <HAL_DMA_Abort_IT+0x90>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1c      	ldr	r2, [pc, #112]	; (8005f4c <HAL_DMA_Abort_IT+0xe0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d00a      	beq.n	8005ef6 <HAL_DMA_Abort_IT+0x8a>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a1a      	ldr	r2, [pc, #104]	; (8005f50 <HAL_DMA_Abort_IT+0xe4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d102      	bne.n	8005ef0 <HAL_DMA_Abort_IT+0x84>
 8005eea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005eee:	e00e      	b.n	8005f0e <HAL_DMA_Abort_IT+0xa2>
 8005ef0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ef4:	e00b      	b.n	8005f0e <HAL_DMA_Abort_IT+0xa2>
 8005ef6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005efa:	e008      	b.n	8005f0e <HAL_DMA_Abort_IT+0xa2>
 8005efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f00:	e005      	b.n	8005f0e <HAL_DMA_Abort_IT+0xa2>
 8005f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f06:	e002      	b.n	8005f0e <HAL_DMA_Abort_IT+0xa2>
 8005f08:	2310      	movs	r3, #16
 8005f0a:	e000      	b.n	8005f0e <HAL_DMA_Abort_IT+0xa2>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	4a11      	ldr	r2, [pc, #68]	; (8005f54 <HAL_DMA_Abort_IT+0xe8>)
 8005f10:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	4798      	blx	r3
    } 
  }
  return status;
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40020008 	.word	0x40020008
 8005f40:	4002001c 	.word	0x4002001c
 8005f44:	40020030 	.word	0x40020030
 8005f48:	40020044 	.word	0x40020044
 8005f4c:	40020058 	.word	0x40020058
 8005f50:	4002006c 	.word	0x4002006c
 8005f54:	40020000 	.word	0x40020000

08005f58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f74:	2204      	movs	r2, #4
 8005f76:	409a      	lsls	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d04f      	beq.n	8006020 <HAL_DMA_IRQHandler+0xc8>
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d04a      	beq.n	8006020 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0320 	and.w	r3, r3, #32
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d107      	bne.n	8005fa8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0204 	bic.w	r2, r2, #4
 8005fa6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a66      	ldr	r2, [pc, #408]	; (8006148 <HAL_DMA_IRQHandler+0x1f0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d029      	beq.n	8006006 <HAL_DMA_IRQHandler+0xae>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a65      	ldr	r2, [pc, #404]	; (800614c <HAL_DMA_IRQHandler+0x1f4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d022      	beq.n	8006002 <HAL_DMA_IRQHandler+0xaa>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a63      	ldr	r2, [pc, #396]	; (8006150 <HAL_DMA_IRQHandler+0x1f8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d01a      	beq.n	8005ffc <HAL_DMA_IRQHandler+0xa4>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a62      	ldr	r2, [pc, #392]	; (8006154 <HAL_DMA_IRQHandler+0x1fc>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d012      	beq.n	8005ff6 <HAL_DMA_IRQHandler+0x9e>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a60      	ldr	r2, [pc, #384]	; (8006158 <HAL_DMA_IRQHandler+0x200>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00a      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x98>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a5f      	ldr	r2, [pc, #380]	; (800615c <HAL_DMA_IRQHandler+0x204>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d102      	bne.n	8005fea <HAL_DMA_IRQHandler+0x92>
 8005fe4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005fe8:	e00e      	b.n	8006008 <HAL_DMA_IRQHandler+0xb0>
 8005fea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005fee:	e00b      	b.n	8006008 <HAL_DMA_IRQHandler+0xb0>
 8005ff0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005ff4:	e008      	b.n	8006008 <HAL_DMA_IRQHandler+0xb0>
 8005ff6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ffa:	e005      	b.n	8006008 <HAL_DMA_IRQHandler+0xb0>
 8005ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006000:	e002      	b.n	8006008 <HAL_DMA_IRQHandler+0xb0>
 8006002:	2340      	movs	r3, #64	; 0x40
 8006004:	e000      	b.n	8006008 <HAL_DMA_IRQHandler+0xb0>
 8006006:	2304      	movs	r3, #4
 8006008:	4a55      	ldr	r2, [pc, #340]	; (8006160 <HAL_DMA_IRQHandler+0x208>)
 800600a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 8094 	beq.w	800613e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800601e:	e08e      	b.n	800613e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006024:	2202      	movs	r2, #2
 8006026:	409a      	lsls	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4013      	ands	r3, r2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d056      	beq.n	80060de <HAL_DMA_IRQHandler+0x186>
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d051      	beq.n	80060de <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0320 	and.w	r3, r3, #32
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10b      	bne.n	8006060 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 020a 	bic.w	r2, r2, #10
 8006056:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a38      	ldr	r2, [pc, #224]	; (8006148 <HAL_DMA_IRQHandler+0x1f0>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d029      	beq.n	80060be <HAL_DMA_IRQHandler+0x166>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a37      	ldr	r2, [pc, #220]	; (800614c <HAL_DMA_IRQHandler+0x1f4>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d022      	beq.n	80060ba <HAL_DMA_IRQHandler+0x162>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a35      	ldr	r2, [pc, #212]	; (8006150 <HAL_DMA_IRQHandler+0x1f8>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d01a      	beq.n	80060b4 <HAL_DMA_IRQHandler+0x15c>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a34      	ldr	r2, [pc, #208]	; (8006154 <HAL_DMA_IRQHandler+0x1fc>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d012      	beq.n	80060ae <HAL_DMA_IRQHandler+0x156>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a32      	ldr	r2, [pc, #200]	; (8006158 <HAL_DMA_IRQHandler+0x200>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d00a      	beq.n	80060a8 <HAL_DMA_IRQHandler+0x150>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a31      	ldr	r2, [pc, #196]	; (800615c <HAL_DMA_IRQHandler+0x204>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d102      	bne.n	80060a2 <HAL_DMA_IRQHandler+0x14a>
 800609c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80060a0:	e00e      	b.n	80060c0 <HAL_DMA_IRQHandler+0x168>
 80060a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060a6:	e00b      	b.n	80060c0 <HAL_DMA_IRQHandler+0x168>
 80060a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060ac:	e008      	b.n	80060c0 <HAL_DMA_IRQHandler+0x168>
 80060ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060b2:	e005      	b.n	80060c0 <HAL_DMA_IRQHandler+0x168>
 80060b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060b8:	e002      	b.n	80060c0 <HAL_DMA_IRQHandler+0x168>
 80060ba:	2320      	movs	r3, #32
 80060bc:	e000      	b.n	80060c0 <HAL_DMA_IRQHandler+0x168>
 80060be:	2302      	movs	r3, #2
 80060c0:	4a27      	ldr	r2, [pc, #156]	; (8006160 <HAL_DMA_IRQHandler+0x208>)
 80060c2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d034      	beq.n	800613e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80060dc:	e02f      	b.n	800613e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	2208      	movs	r2, #8
 80060e4:	409a      	lsls	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4013      	ands	r3, r2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d028      	beq.n	8006140 <HAL_DMA_IRQHandler+0x1e8>
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d023      	beq.n	8006140 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 020e 	bic.w	r2, r2, #14
 8006106:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006110:	2101      	movs	r1, #1
 8006112:	fa01 f202 	lsl.w	r2, r1, r2
 8006116:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006132:	2b00      	cmp	r3, #0
 8006134:	d004      	beq.n	8006140 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	4798      	blx	r3
    }
  }
  return;
 800613e:	bf00      	nop
 8006140:	bf00      	nop
}
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40020008 	.word	0x40020008
 800614c:	4002001c 	.word	0x4002001c
 8006150:	40020030 	.word	0x40020030
 8006154:	40020044 	.word	0x40020044
 8006158:	40020058 	.word	0x40020058
 800615c:	4002006c 	.word	0x4002006c
 8006160:	40020000 	.word	0x40020000

08006164 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617a:	2101      	movs	r1, #1
 800617c:	fa01 f202 	lsl.w	r2, r1, r2
 8006180:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2b10      	cmp	r3, #16
 8006190:	d108      	bne.n	80061a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80061a2:	e007      	b.n	80061b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	60da      	str	r2, [r3, #12]
}
 80061b4:	bf00      	nop
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bc80      	pop	{r7}
 80061bc:	4770      	bx	lr
	...

080061c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b08b      	sub	sp, #44	; 0x2c
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80061ca:	2300      	movs	r3, #0
 80061cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80061ce:	2300      	movs	r3, #0
 80061d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061d2:	e169      	b.n	80064a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80061d4:	2201      	movs	r2, #1
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	fa02 f303 	lsl.w	r3, r2, r3
 80061dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69fa      	ldr	r2, [r7, #28]
 80061e4:	4013      	ands	r3, r2
 80061e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	f040 8158 	bne.w	80064a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	4a9a      	ldr	r2, [pc, #616]	; (8006460 <HAL_GPIO_Init+0x2a0>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d05e      	beq.n	80062ba <HAL_GPIO_Init+0xfa>
 80061fc:	4a98      	ldr	r2, [pc, #608]	; (8006460 <HAL_GPIO_Init+0x2a0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d875      	bhi.n	80062ee <HAL_GPIO_Init+0x12e>
 8006202:	4a98      	ldr	r2, [pc, #608]	; (8006464 <HAL_GPIO_Init+0x2a4>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d058      	beq.n	80062ba <HAL_GPIO_Init+0xfa>
 8006208:	4a96      	ldr	r2, [pc, #600]	; (8006464 <HAL_GPIO_Init+0x2a4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d86f      	bhi.n	80062ee <HAL_GPIO_Init+0x12e>
 800620e:	4a96      	ldr	r2, [pc, #600]	; (8006468 <HAL_GPIO_Init+0x2a8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d052      	beq.n	80062ba <HAL_GPIO_Init+0xfa>
 8006214:	4a94      	ldr	r2, [pc, #592]	; (8006468 <HAL_GPIO_Init+0x2a8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d869      	bhi.n	80062ee <HAL_GPIO_Init+0x12e>
 800621a:	4a94      	ldr	r2, [pc, #592]	; (800646c <HAL_GPIO_Init+0x2ac>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d04c      	beq.n	80062ba <HAL_GPIO_Init+0xfa>
 8006220:	4a92      	ldr	r2, [pc, #584]	; (800646c <HAL_GPIO_Init+0x2ac>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d863      	bhi.n	80062ee <HAL_GPIO_Init+0x12e>
 8006226:	4a92      	ldr	r2, [pc, #584]	; (8006470 <HAL_GPIO_Init+0x2b0>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d046      	beq.n	80062ba <HAL_GPIO_Init+0xfa>
 800622c:	4a90      	ldr	r2, [pc, #576]	; (8006470 <HAL_GPIO_Init+0x2b0>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d85d      	bhi.n	80062ee <HAL_GPIO_Init+0x12e>
 8006232:	2b12      	cmp	r3, #18
 8006234:	d82a      	bhi.n	800628c <HAL_GPIO_Init+0xcc>
 8006236:	2b12      	cmp	r3, #18
 8006238:	d859      	bhi.n	80062ee <HAL_GPIO_Init+0x12e>
 800623a:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <HAL_GPIO_Init+0x80>)
 800623c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006240:	080062bb 	.word	0x080062bb
 8006244:	08006295 	.word	0x08006295
 8006248:	080062a7 	.word	0x080062a7
 800624c:	080062e9 	.word	0x080062e9
 8006250:	080062ef 	.word	0x080062ef
 8006254:	080062ef 	.word	0x080062ef
 8006258:	080062ef 	.word	0x080062ef
 800625c:	080062ef 	.word	0x080062ef
 8006260:	080062ef 	.word	0x080062ef
 8006264:	080062ef 	.word	0x080062ef
 8006268:	080062ef 	.word	0x080062ef
 800626c:	080062ef 	.word	0x080062ef
 8006270:	080062ef 	.word	0x080062ef
 8006274:	080062ef 	.word	0x080062ef
 8006278:	080062ef 	.word	0x080062ef
 800627c:	080062ef 	.word	0x080062ef
 8006280:	080062ef 	.word	0x080062ef
 8006284:	0800629d 	.word	0x0800629d
 8006288:	080062b1 	.word	0x080062b1
 800628c:	4a79      	ldr	r2, [pc, #484]	; (8006474 <HAL_GPIO_Init+0x2b4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d013      	beq.n	80062ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006292:	e02c      	b.n	80062ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	623b      	str	r3, [r7, #32]
          break;
 800629a:	e029      	b.n	80062f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	3304      	adds	r3, #4
 80062a2:	623b      	str	r3, [r7, #32]
          break;
 80062a4:	e024      	b.n	80062f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	3308      	adds	r3, #8
 80062ac:	623b      	str	r3, [r7, #32]
          break;
 80062ae:	e01f      	b.n	80062f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	330c      	adds	r3, #12
 80062b6:	623b      	str	r3, [r7, #32]
          break;
 80062b8:	e01a      	b.n	80062f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d102      	bne.n	80062c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80062c2:	2304      	movs	r3, #4
 80062c4:	623b      	str	r3, [r7, #32]
          break;
 80062c6:	e013      	b.n	80062f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d105      	bne.n	80062dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80062d0:	2308      	movs	r3, #8
 80062d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	611a      	str	r2, [r3, #16]
          break;
 80062da:	e009      	b.n	80062f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80062dc:	2308      	movs	r3, #8
 80062de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	615a      	str	r2, [r3, #20]
          break;
 80062e6:	e003      	b.n	80062f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80062e8:	2300      	movs	r3, #0
 80062ea:	623b      	str	r3, [r7, #32]
          break;
 80062ec:	e000      	b.n	80062f0 <HAL_GPIO_Init+0x130>
          break;
 80062ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	2bff      	cmp	r3, #255	; 0xff
 80062f4:	d801      	bhi.n	80062fa <HAL_GPIO_Init+0x13a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	e001      	b.n	80062fe <HAL_GPIO_Init+0x13e>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	3304      	adds	r3, #4
 80062fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	2bff      	cmp	r3, #255	; 0xff
 8006304:	d802      	bhi.n	800630c <HAL_GPIO_Init+0x14c>
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	e002      	b.n	8006312 <HAL_GPIO_Init+0x152>
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	3b08      	subs	r3, #8
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	210f      	movs	r1, #15
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	fa01 f303 	lsl.w	r3, r1, r3
 8006320:	43db      	mvns	r3, r3
 8006322:	401a      	ands	r2, r3
 8006324:	6a39      	ldr	r1, [r7, #32]
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	fa01 f303 	lsl.w	r3, r1, r3
 800632c:	431a      	orrs	r2, r3
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800633a:	2b00      	cmp	r3, #0
 800633c:	f000 80b1 	beq.w	80064a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006340:	4b4d      	ldr	r3, [pc, #308]	; (8006478 <HAL_GPIO_Init+0x2b8>)
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	4a4c      	ldr	r2, [pc, #304]	; (8006478 <HAL_GPIO_Init+0x2b8>)
 8006346:	f043 0301 	orr.w	r3, r3, #1
 800634a:	6193      	str	r3, [r2, #24]
 800634c:	4b4a      	ldr	r3, [pc, #296]	; (8006478 <HAL_GPIO_Init+0x2b8>)
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	60bb      	str	r3, [r7, #8]
 8006356:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006358:	4a48      	ldr	r2, [pc, #288]	; (800647c <HAL_GPIO_Init+0x2bc>)
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	089b      	lsrs	r3, r3, #2
 800635e:	3302      	adds	r3, #2
 8006360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006364:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	f003 0303 	and.w	r3, r3, #3
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	220f      	movs	r2, #15
 8006370:	fa02 f303 	lsl.w	r3, r2, r3
 8006374:	43db      	mvns	r3, r3
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4013      	ands	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a40      	ldr	r2, [pc, #256]	; (8006480 <HAL_GPIO_Init+0x2c0>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d013      	beq.n	80063ac <HAL_GPIO_Init+0x1ec>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a3f      	ldr	r2, [pc, #252]	; (8006484 <HAL_GPIO_Init+0x2c4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d00d      	beq.n	80063a8 <HAL_GPIO_Init+0x1e8>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a3e      	ldr	r2, [pc, #248]	; (8006488 <HAL_GPIO_Init+0x2c8>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d007      	beq.n	80063a4 <HAL_GPIO_Init+0x1e4>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a3d      	ldr	r2, [pc, #244]	; (800648c <HAL_GPIO_Init+0x2cc>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d101      	bne.n	80063a0 <HAL_GPIO_Init+0x1e0>
 800639c:	2303      	movs	r3, #3
 800639e:	e006      	b.n	80063ae <HAL_GPIO_Init+0x1ee>
 80063a0:	2304      	movs	r3, #4
 80063a2:	e004      	b.n	80063ae <HAL_GPIO_Init+0x1ee>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e002      	b.n	80063ae <HAL_GPIO_Init+0x1ee>
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <HAL_GPIO_Init+0x1ee>
 80063ac:	2300      	movs	r3, #0
 80063ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b0:	f002 0203 	and.w	r2, r2, #3
 80063b4:	0092      	lsls	r2, r2, #2
 80063b6:	4093      	lsls	r3, r2
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80063be:	492f      	ldr	r1, [pc, #188]	; (800647c <HAL_GPIO_Init+0x2bc>)
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	089b      	lsrs	r3, r3, #2
 80063c4:	3302      	adds	r3, #2
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d006      	beq.n	80063e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80063d8:	4b2d      	ldr	r3, [pc, #180]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	492c      	ldr	r1, [pc, #176]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	600b      	str	r3, [r1, #0]
 80063e4:	e006      	b.n	80063f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80063e6:	4b2a      	ldr	r3, [pc, #168]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	43db      	mvns	r3, r3
 80063ee:	4928      	ldr	r1, [pc, #160]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d006      	beq.n	800640e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006400:	4b23      	ldr	r3, [pc, #140]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	4922      	ldr	r1, [pc, #136]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	4313      	orrs	r3, r2
 800640a:	604b      	str	r3, [r1, #4]
 800640c:	e006      	b.n	800641c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800640e:	4b20      	ldr	r3, [pc, #128]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	43db      	mvns	r3, r3
 8006416:	491e      	ldr	r1, [pc, #120]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 8006418:	4013      	ands	r3, r2
 800641a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d006      	beq.n	8006436 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006428:	4b19      	ldr	r3, [pc, #100]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	4918      	ldr	r1, [pc, #96]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	4313      	orrs	r3, r2
 8006432:	608b      	str	r3, [r1, #8]
 8006434:	e006      	b.n	8006444 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006436:	4b16      	ldr	r3, [pc, #88]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	43db      	mvns	r3, r3
 800643e:	4914      	ldr	r1, [pc, #80]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 8006440:	4013      	ands	r3, r2
 8006442:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d021      	beq.n	8006494 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006450:	4b0f      	ldr	r3, [pc, #60]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	490e      	ldr	r1, [pc, #56]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	4313      	orrs	r3, r2
 800645a:	60cb      	str	r3, [r1, #12]
 800645c:	e021      	b.n	80064a2 <HAL_GPIO_Init+0x2e2>
 800645e:	bf00      	nop
 8006460:	10320000 	.word	0x10320000
 8006464:	10310000 	.word	0x10310000
 8006468:	10220000 	.word	0x10220000
 800646c:	10210000 	.word	0x10210000
 8006470:	10120000 	.word	0x10120000
 8006474:	10110000 	.word	0x10110000
 8006478:	40021000 	.word	0x40021000
 800647c:	40010000 	.word	0x40010000
 8006480:	40010800 	.word	0x40010800
 8006484:	40010c00 	.word	0x40010c00
 8006488:	40011000 	.word	0x40011000
 800648c:	40011400 	.word	0x40011400
 8006490:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006494:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <HAL_GPIO_Init+0x304>)
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	43db      	mvns	r3, r3
 800649c:	4909      	ldr	r1, [pc, #36]	; (80064c4 <HAL_GPIO_Init+0x304>)
 800649e:	4013      	ands	r3, r2
 80064a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	3301      	adds	r3, #1
 80064a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	fa22 f303 	lsr.w	r3, r2, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f47f ae8e 	bne.w	80061d4 <HAL_GPIO_Init+0x14>
  }
}
 80064b8:	bf00      	nop
 80064ba:	bf00      	nop
 80064bc:	372c      	adds	r7, #44	; 0x2c
 80064be:	46bd      	mov	sp, r7
 80064c0:	bc80      	pop	{r7}
 80064c2:	4770      	bx	lr
 80064c4:	40010400 	.word	0x40010400

080064c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	460b      	mov	r3, r1
 80064d2:	807b      	strh	r3, [r7, #2]
 80064d4:	4613      	mov	r3, r2
 80064d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064d8:	787b      	ldrb	r3, [r7, #1]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064de:	887a      	ldrh	r2, [r7, #2]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80064e4:	e003      	b.n	80064ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80064e6:	887b      	ldrh	r3, [r7, #2]
 80064e8:	041a      	lsls	r2, r3, #16
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	611a      	str	r2, [r3, #16]
}
 80064ee:	bf00      	nop
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bc80      	pop	{r7}
 80064f6:	4770      	bx	lr

080064f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e12b      	b.n	8006762 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d106      	bne.n	8006524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7fb fbf6 	bl	8001d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2224      	movs	r2, #36	; 0x24
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 0201 	bic.w	r2, r2, #1
 800653a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800654a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800655a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800655c:	f002 f84e 	bl	80085fc <HAL_RCC_GetPCLK1Freq>
 8006560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	4a81      	ldr	r2, [pc, #516]	; (800676c <HAL_I2C_Init+0x274>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d807      	bhi.n	800657c <HAL_I2C_Init+0x84>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4a80      	ldr	r2, [pc, #512]	; (8006770 <HAL_I2C_Init+0x278>)
 8006570:	4293      	cmp	r3, r2
 8006572:	bf94      	ite	ls
 8006574:	2301      	movls	r3, #1
 8006576:	2300      	movhi	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	e006      	b.n	800658a <HAL_I2C_Init+0x92>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4a7d      	ldr	r2, [pc, #500]	; (8006774 <HAL_I2C_Init+0x27c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	bf94      	ite	ls
 8006584:	2301      	movls	r3, #1
 8006586:	2300      	movhi	r3, #0
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e0e7      	b.n	8006762 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4a78      	ldr	r2, [pc, #480]	; (8006778 <HAL_I2C_Init+0x280>)
 8006596:	fba2 2303 	umull	r2, r3, r2, r3
 800659a:	0c9b      	lsrs	r3, r3, #18
 800659c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	4a6a      	ldr	r2, [pc, #424]	; (800676c <HAL_I2C_Init+0x274>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d802      	bhi.n	80065cc <HAL_I2C_Init+0xd4>
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	3301      	adds	r3, #1
 80065ca:	e009      	b.n	80065e0 <HAL_I2C_Init+0xe8>
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80065d2:	fb02 f303 	mul.w	r3, r2, r3
 80065d6:	4a69      	ldr	r2, [pc, #420]	; (800677c <HAL_I2C_Init+0x284>)
 80065d8:	fba2 2303 	umull	r2, r3, r2, r3
 80065dc:	099b      	lsrs	r3, r3, #6
 80065de:	3301      	adds	r3, #1
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	6812      	ldr	r2, [r2, #0]
 80065e4:	430b      	orrs	r3, r1
 80065e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80065f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	495c      	ldr	r1, [pc, #368]	; (800676c <HAL_I2C_Init+0x274>)
 80065fc:	428b      	cmp	r3, r1
 80065fe:	d819      	bhi.n	8006634 <HAL_I2C_Init+0x13c>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	1e59      	subs	r1, r3, #1
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	fbb1 f3f3 	udiv	r3, r1, r3
 800660e:	1c59      	adds	r1, r3, #1
 8006610:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006614:	400b      	ands	r3, r1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <HAL_I2C_Init+0x138>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	1e59      	subs	r1, r3, #1
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	fbb1 f3f3 	udiv	r3, r1, r3
 8006628:	3301      	adds	r3, #1
 800662a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800662e:	e051      	b.n	80066d4 <HAL_I2C_Init+0x1dc>
 8006630:	2304      	movs	r3, #4
 8006632:	e04f      	b.n	80066d4 <HAL_I2C_Init+0x1dc>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d111      	bne.n	8006660 <HAL_I2C_Init+0x168>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	1e58      	subs	r0, r3, #1
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6859      	ldr	r1, [r3, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	440b      	add	r3, r1
 800664a:	fbb0 f3f3 	udiv	r3, r0, r3
 800664e:	3301      	adds	r3, #1
 8006650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006654:	2b00      	cmp	r3, #0
 8006656:	bf0c      	ite	eq
 8006658:	2301      	moveq	r3, #1
 800665a:	2300      	movne	r3, #0
 800665c:	b2db      	uxtb	r3, r3
 800665e:	e012      	b.n	8006686 <HAL_I2C_Init+0x18e>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	1e58      	subs	r0, r3, #1
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6859      	ldr	r1, [r3, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	440b      	add	r3, r1
 800666e:	0099      	lsls	r1, r3, #2
 8006670:	440b      	add	r3, r1
 8006672:	fbb0 f3f3 	udiv	r3, r0, r3
 8006676:	3301      	adds	r3, #1
 8006678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800667c:	2b00      	cmp	r3, #0
 800667e:	bf0c      	ite	eq
 8006680:	2301      	moveq	r3, #1
 8006682:	2300      	movne	r3, #0
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <HAL_I2C_Init+0x196>
 800668a:	2301      	movs	r3, #1
 800668c:	e022      	b.n	80066d4 <HAL_I2C_Init+0x1dc>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10e      	bne.n	80066b4 <HAL_I2C_Init+0x1bc>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	1e58      	subs	r0, r3, #1
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6859      	ldr	r1, [r3, #4]
 800669e:	460b      	mov	r3, r1
 80066a0:	005b      	lsls	r3, r3, #1
 80066a2:	440b      	add	r3, r1
 80066a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80066a8:	3301      	adds	r3, #1
 80066aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b2:	e00f      	b.n	80066d4 <HAL_I2C_Init+0x1dc>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	1e58      	subs	r0, r3, #1
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6859      	ldr	r1, [r3, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	440b      	add	r3, r1
 80066c2:	0099      	lsls	r1, r3, #2
 80066c4:	440b      	add	r3, r1
 80066c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80066ca:	3301      	adds	r3, #1
 80066cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066d4:	6879      	ldr	r1, [r7, #4]
 80066d6:	6809      	ldr	r1, [r1, #0]
 80066d8:	4313      	orrs	r3, r2
 80066da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	69da      	ldr	r2, [r3, #28]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	431a      	orrs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006702:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	6911      	ldr	r1, [r2, #16]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	68d2      	ldr	r2, [r2, #12]
 800670e:	4311      	orrs	r1, r2
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6812      	ldr	r2, [r2, #0]
 8006714:	430b      	orrs	r3, r1
 8006716:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	695a      	ldr	r2, [r3, #20]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	431a      	orrs	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f042 0201 	orr.w	r2, r2, #1
 8006742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2220      	movs	r2, #32
 800674e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	000186a0 	.word	0x000186a0
 8006770:	001e847f 	.word	0x001e847f
 8006774:	003d08ff 	.word	0x003d08ff
 8006778:	431bde83 	.word	0x431bde83
 800677c:	10624dd3 	.word	0x10624dd3

08006780 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af02      	add	r7, sp, #8
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	607a      	str	r2, [r7, #4]
 800678a:	461a      	mov	r2, r3
 800678c:	460b      	mov	r3, r1
 800678e:	817b      	strh	r3, [r7, #10]
 8006790:	4613      	mov	r3, r2
 8006792:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006794:	f7ff f974 	bl	8005a80 <HAL_GetTick>
 8006798:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b20      	cmp	r3, #32
 80067a4:	f040 80e0 	bne.w	8006968 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	2319      	movs	r3, #25
 80067ae:	2201      	movs	r2, #1
 80067b0:	4970      	ldr	r1, [pc, #448]	; (8006974 <HAL_I2C_Master_Transmit+0x1f4>)
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f001 f972 	bl	8007a9c <I2C_WaitOnFlagUntilTimeout>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80067be:	2302      	movs	r3, #2
 80067c0:	e0d3      	b.n	800696a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d101      	bne.n	80067d0 <HAL_I2C_Master_Transmit+0x50>
 80067cc:	2302      	movs	r3, #2
 80067ce:	e0cc      	b.n	800696a <HAL_I2C_Master_Transmit+0x1ea>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d007      	beq.n	80067f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f042 0201 	orr.w	r2, r2, #1
 80067f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006804:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2221      	movs	r2, #33	; 0x21
 800680a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2210      	movs	r2, #16
 8006812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	893a      	ldrh	r2, [r7, #8]
 8006826:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682c:	b29a      	uxth	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4a50      	ldr	r2, [pc, #320]	; (8006978 <HAL_I2C_Master_Transmit+0x1f8>)
 8006836:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006838:	8979      	ldrh	r1, [r7, #10]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	6a3a      	ldr	r2, [r7, #32]
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f000 fe5e 	bl	8007500 <I2C_MasterRequestWrite>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e08d      	b.n	800696a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800684e:	2300      	movs	r3, #0
 8006850:	613b      	str	r3, [r7, #16]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	613b      	str	r3, [r7, #16]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	613b      	str	r3, [r7, #16]
 8006862:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006864:	e066      	b.n	8006934 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	6a39      	ldr	r1, [r7, #32]
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f001 f9ec 	bl	8007c48 <I2C_WaitOnTXEFlagUntilTimeout>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00d      	beq.n	8006892 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	2b04      	cmp	r3, #4
 800687c:	d107      	bne.n	800688e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800688c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e06b      	b.n	800696a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006896:	781a      	ldrb	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	3b01      	subs	r3, #1
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ba:	3b01      	subs	r3, #1
 80068bc:	b29a      	uxth	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b04      	cmp	r3, #4
 80068ce:	d11b      	bne.n	8006908 <HAL_I2C_Master_Transmit+0x188>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d017      	beq.n	8006908 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068dc:	781a      	ldrb	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006900:	3b01      	subs	r3, #1
 8006902:	b29a      	uxth	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	6a39      	ldr	r1, [r7, #32]
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f001 f9dc 	bl	8007cca <I2C_WaitOnBTFFlagUntilTimeout>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00d      	beq.n	8006934 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691c:	2b04      	cmp	r3, #4
 800691e:	d107      	bne.n	8006930 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800692e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e01a      	b.n	800696a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006938:	2b00      	cmp	r3, #0
 800693a:	d194      	bne.n	8006866 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800694a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2220      	movs	r2, #32
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	e000      	b.n	800696a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006968:	2302      	movs	r3, #2
  }
}
 800696a:	4618      	mov	r0, r3
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	00100002 	.word	0x00100002
 8006978:	ffff0000 	.word	0xffff0000

0800697c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08c      	sub	sp, #48	; 0x30
 8006980:	af02      	add	r7, sp, #8
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	607a      	str	r2, [r7, #4]
 8006986:	461a      	mov	r2, r3
 8006988:	460b      	mov	r3, r1
 800698a:	817b      	strh	r3, [r7, #10]
 800698c:	4613      	mov	r3, r2
 800698e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006994:	f7ff f874 	bl	8005a80 <HAL_GetTick>
 8006998:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	f040 823f 	bne.w	8006e26 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	2319      	movs	r3, #25
 80069ae:	2201      	movs	r2, #1
 80069b0:	497f      	ldr	r1, [pc, #508]	; (8006bb0 <HAL_I2C_Master_Receive+0x234>)
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f001 f872 	bl	8007a9c <I2C_WaitOnFlagUntilTimeout>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80069be:	2302      	movs	r3, #2
 80069c0:	e232      	b.n	8006e28 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d101      	bne.n	80069d0 <HAL_I2C_Master_Receive+0x54>
 80069cc:	2302      	movs	r3, #2
 80069ce:	e22b      	b.n	8006e28 <HAL_I2C_Master_Receive+0x4ac>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d007      	beq.n	80069f6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f042 0201 	orr.w	r2, r2, #1
 80069f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2222      	movs	r2, #34	; 0x22
 8006a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2210      	movs	r2, #16
 8006a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	893a      	ldrh	r2, [r7, #8]
 8006a26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4a5f      	ldr	r2, [pc, #380]	; (8006bb4 <HAL_I2C_Master_Receive+0x238>)
 8006a36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006a38:	8979      	ldrh	r1, [r7, #10]
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f000 fde0 	bl	8007604 <I2C_MasterRequestRead>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e1ec      	b.n	8006e28 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d113      	bne.n	8006a7e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a56:	2300      	movs	r3, #0
 8006a58:	61fb      	str	r3, [r7, #28]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	61fb      	str	r3, [r7, #28]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	61fb      	str	r3, [r7, #28]
 8006a6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	e1c0      	b.n	8006e00 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d11e      	bne.n	8006ac4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a96:	b672      	cpsid	i
}
 8006a98:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	61bb      	str	r3, [r7, #24]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	61bb      	str	r3, [r7, #24]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	61bb      	str	r3, [r7, #24]
 8006aae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006abe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006ac0:	b662      	cpsie	i
}
 8006ac2:	e035      	b.n	8006b30 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d11e      	bne.n	8006b0a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ada:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006adc:	b672      	cpsid	i
}
 8006ade:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	617b      	str	r3, [r7, #20]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	617b      	str	r3, [r7, #20]
 8006af4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006b06:	b662      	cpsie	i
}
 8006b08:	e012      	b.n	8006b30 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	613b      	str	r3, [r7, #16]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	613b      	str	r3, [r7, #16]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	613b      	str	r3, [r7, #16]
 8006b2e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006b30:	e166      	b.n	8006e00 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	f200 811f 	bhi.w	8006d7a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d123      	bne.n	8006b8c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f001 f8ff 	bl	8007d4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e167      	b.n	8006e28 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	691a      	ldr	r2, [r3, #16]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b62:	b2d2      	uxtb	r2, r2
 8006b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b74:	3b01      	subs	r3, #1
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b8a:	e139      	b.n	8006e00 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d152      	bne.n	8006c3a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	4906      	ldr	r1, [pc, #24]	; (8006bb8 <HAL_I2C_Master_Receive+0x23c>)
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 ff7c 	bl	8007a9c <I2C_WaitOnFlagUntilTimeout>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d008      	beq.n	8006bbc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e13c      	b.n	8006e28 <HAL_I2C_Master_Receive+0x4ac>
 8006bae:	bf00      	nop
 8006bb0:	00100002 	.word	0x00100002
 8006bb4:	ffff0000 	.word	0xffff0000
 8006bb8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006bbc:	b672      	cpsid	i
}
 8006bbe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	691a      	ldr	r2, [r3, #16]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	b2d2      	uxtb	r2, r2
 8006bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	1c5a      	adds	r2, r3, #1
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bec:	3b01      	subs	r3, #1
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006c02:	b662      	cpsie	i
}
 8006c04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	691a      	ldr	r2, [r3, #16]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c10:	b2d2      	uxtb	r2, r2
 8006c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c22:	3b01      	subs	r3, #1
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c38:	e0e2      	b.n	8006e00 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c40:	2200      	movs	r2, #0
 8006c42:	497b      	ldr	r1, [pc, #492]	; (8006e30 <HAL_I2C_Master_Receive+0x4b4>)
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 ff29 	bl	8007a9c <I2C_WaitOnFlagUntilTimeout>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e0e9      	b.n	8006e28 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c64:	b672      	cpsid	i
}
 8006c66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691a      	ldr	r2, [r3, #16]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c72:	b2d2      	uxtb	r2, r2
 8006c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c84:	3b01      	subs	r3, #1
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	3b01      	subs	r3, #1
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006c9a:	4b66      	ldr	r3, [pc, #408]	; (8006e34 <HAL_I2C_Master_Receive+0x4b8>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	08db      	lsrs	r3, r3, #3
 8006ca0:	4a65      	ldr	r2, [pc, #404]	; (8006e38 <HAL_I2C_Master_Receive+0x4bc>)
 8006ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca6:	0a1a      	lsrs	r2, r3, #8
 8006ca8:	4613      	mov	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	00da      	lsls	r2, r3, #3
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d118      	bne.n	8006cf2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	f043 0220 	orr.w	r2, r3, #32
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006ce2:	b662      	cpsie	i
}
 8006ce4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e09a      	b.n	8006e28 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d1d9      	bne.n	8006cb4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	691a      	ldr	r2, [r3, #16]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	b2d2      	uxtb	r2, r2
 8006d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006d42:	b662      	cpsie	i
}
 8006d44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	691a      	ldr	r2, [r3, #16]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d62:	3b01      	subs	r3, #1
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	3b01      	subs	r3, #1
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d78:	e042      	b.n	8006e00 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f000 ffe4 	bl	8007d4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e04c      	b.n	8006e28 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	691a      	ldr	r2, [r3, #16]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d98:	b2d2      	uxtb	r2, r2
 8006d9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006daa:	3b01      	subs	r3, #1
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	f003 0304 	and.w	r3, r3, #4
 8006dca:	2b04      	cmp	r3, #4
 8006dcc:	d118      	bne.n	8006e00 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	691a      	ldr	r2, [r3, #16]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd8:	b2d2      	uxtb	r2, r2
 8006dda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de0:	1c5a      	adds	r2, r3, #1
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dea:	3b01      	subs	r3, #1
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f47f ae94 	bne.w	8006b32 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	e000      	b.n	8006e28 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8006e26:	2302      	movs	r3, #2
  }
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3728      	adds	r7, #40	; 0x28
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	00010004 	.word	0x00010004
 8006e34:	20000010 	.word	0x20000010
 8006e38:	14f8b589 	.word	0x14f8b589

08006e3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af02      	add	r7, sp, #8
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	4608      	mov	r0, r1
 8006e46:	4611      	mov	r1, r2
 8006e48:	461a      	mov	r2, r3
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	817b      	strh	r3, [r7, #10]
 8006e4e:	460b      	mov	r3, r1
 8006e50:	813b      	strh	r3, [r7, #8]
 8006e52:	4613      	mov	r3, r2
 8006e54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e56:	f7fe fe13 	bl	8005a80 <HAL_GetTick>
 8006e5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b20      	cmp	r3, #32
 8006e66:	f040 80d9 	bne.w	800701c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	2319      	movs	r3, #25
 8006e70:	2201      	movs	r2, #1
 8006e72:	496d      	ldr	r1, [pc, #436]	; (8007028 <HAL_I2C_Mem_Write+0x1ec>)
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f000 fe11 	bl	8007a9c <I2C_WaitOnFlagUntilTimeout>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d001      	beq.n	8006e84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006e80:	2302      	movs	r3, #2
 8006e82:	e0cc      	b.n	800701e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d101      	bne.n	8006e92 <HAL_I2C_Mem_Write+0x56>
 8006e8e:	2302      	movs	r3, #2
 8006e90:	e0c5      	b.n	800701e <HAL_I2C_Mem_Write+0x1e2>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d007      	beq.n	8006eb8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f042 0201 	orr.w	r2, r2, #1
 8006eb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ec6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2221      	movs	r2, #33	; 0x21
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2240      	movs	r2, #64	; 0x40
 8006ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6a3a      	ldr	r2, [r7, #32]
 8006ee2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4a4d      	ldr	r2, [pc, #308]	; (800702c <HAL_I2C_Mem_Write+0x1f0>)
 8006ef8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006efa:	88f8      	ldrh	r0, [r7, #6]
 8006efc:	893a      	ldrh	r2, [r7, #8]
 8006efe:	8979      	ldrh	r1, [r7, #10]
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	9301      	str	r3, [sp, #4]
 8006f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	4603      	mov	r3, r0
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f000 fc48 	bl	80077a0 <I2C_RequestMemoryWrite>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d052      	beq.n	8006fbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e081      	b.n	800701e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f000 fe92 	bl	8007c48 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00d      	beq.n	8006f46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	2b04      	cmp	r3, #4
 8006f30:	d107      	bne.n	8006f42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e06b      	b.n	800701e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4a:	781a      	ldrb	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	1c5a      	adds	r2, r3, #1
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f60:	3b01      	subs	r3, #1
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	f003 0304 	and.w	r3, r3, #4
 8006f80:	2b04      	cmp	r3, #4
 8006f82:	d11b      	bne.n	8006fbc <HAL_I2C_Mem_Write+0x180>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d017      	beq.n	8006fbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	781a      	ldrb	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1aa      	bne.n	8006f1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f000 fe7e 	bl	8007cca <I2C_WaitOnBTFFlagUntilTimeout>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00d      	beq.n	8006ff0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd8:	2b04      	cmp	r3, #4
 8006fda:	d107      	bne.n	8006fec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e016      	b.n	800701e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2220      	movs	r2, #32
 8007004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	e000      	b.n	800701e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800701c:	2302      	movs	r3, #2
  }
}
 800701e:	4618      	mov	r0, r3
 8007020:	3718      	adds	r7, #24
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	00100002 	.word	0x00100002
 800702c:	ffff0000 	.word	0xffff0000

08007030 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b08c      	sub	sp, #48	; 0x30
 8007034:	af02      	add	r7, sp, #8
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	4608      	mov	r0, r1
 800703a:	4611      	mov	r1, r2
 800703c:	461a      	mov	r2, r3
 800703e:	4603      	mov	r3, r0
 8007040:	817b      	strh	r3, [r7, #10]
 8007042:	460b      	mov	r3, r1
 8007044:	813b      	strh	r3, [r7, #8]
 8007046:	4613      	mov	r3, r2
 8007048:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800704e:	f7fe fd17 	bl	8005a80 <HAL_GetTick>
 8007052:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b20      	cmp	r3, #32
 800705e:	f040 8244 	bne.w	80074ea <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	2319      	movs	r3, #25
 8007068:	2201      	movs	r2, #1
 800706a:	4982      	ldr	r1, [pc, #520]	; (8007274 <HAL_I2C_Mem_Read+0x244>)
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f000 fd15 	bl	8007a9c <I2C_WaitOnFlagUntilTimeout>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8007078:	2302      	movs	r3, #2
 800707a:	e237      	b.n	80074ec <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007082:	2b01      	cmp	r3, #1
 8007084:	d101      	bne.n	800708a <HAL_I2C_Mem_Read+0x5a>
 8007086:	2302      	movs	r3, #2
 8007088:	e230      	b.n	80074ec <HAL_I2C_Mem_Read+0x4bc>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b01      	cmp	r3, #1
 800709e:	d007      	beq.n	80070b0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f042 0201 	orr.w	r2, r2, #1
 80070ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2222      	movs	r2, #34	; 0x22
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2240      	movs	r2, #64	; 0x40
 80070cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80070e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4a62      	ldr	r2, [pc, #392]	; (8007278 <HAL_I2C_Mem_Read+0x248>)
 80070f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070f2:	88f8      	ldrh	r0, [r7, #6]
 80070f4:	893a      	ldrh	r2, [r7, #8]
 80070f6:	8979      	ldrh	r1, [r7, #10]
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	9301      	str	r3, [sp, #4]
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	4603      	mov	r3, r0
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 fbe2 	bl	80078cc <I2C_RequestMemoryRead>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e1ec      	b.n	80074ec <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007116:	2b00      	cmp	r3, #0
 8007118:	d113      	bne.n	8007142 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800711a:	2300      	movs	r3, #0
 800711c:	61fb      	str	r3, [r7, #28]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	61fb      	str	r3, [r7, #28]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	61fb      	str	r3, [r7, #28]
 800712e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	e1c0      	b.n	80074c4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007146:	2b01      	cmp	r3, #1
 8007148:	d11e      	bne.n	8007188 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007158:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800715a:	b672      	cpsid	i
}
 800715c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800715e:	2300      	movs	r3, #0
 8007160:	61bb      	str	r3, [r7, #24]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	61bb      	str	r3, [r7, #24]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	61bb      	str	r3, [r7, #24]
 8007172:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007182:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007184:	b662      	cpsie	i
}
 8007186:	e035      	b.n	80071f4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800718c:	2b02      	cmp	r3, #2
 800718e:	d11e      	bne.n	80071ce <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800719e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80071a0:	b672      	cpsid	i
}
 80071a2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071a4:	2300      	movs	r3, #0
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80071ca:	b662      	cpsie	i
}
 80071cc:	e012      	b.n	80071f4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071dc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071de:	2300      	movs	r3, #0
 80071e0:	613b      	str	r3, [r7, #16]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	613b      	str	r3, [r7, #16]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	613b      	str	r3, [r7, #16]
 80071f2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80071f4:	e166      	b.n	80074c4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	f200 811f 	bhi.w	800743e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007204:	2b01      	cmp	r3, #1
 8007206:	d123      	bne.n	8007250 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800720a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f000 fd9d 	bl	8007d4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d001      	beq.n	800721c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e167      	b.n	80074ec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	691a      	ldr	r2, [r3, #16]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	b2d2      	uxtb	r2, r2
 8007228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007238:	3b01      	subs	r3, #1
 800723a:	b29a      	uxth	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007244:	b29b      	uxth	r3, r3
 8007246:	3b01      	subs	r3, #1
 8007248:	b29a      	uxth	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800724e:	e139      	b.n	80074c4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007254:	2b02      	cmp	r3, #2
 8007256:	d152      	bne.n	80072fe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725e:	2200      	movs	r2, #0
 8007260:	4906      	ldr	r1, [pc, #24]	; (800727c <HAL_I2C_Mem_Read+0x24c>)
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f000 fc1a 	bl	8007a9c <I2C_WaitOnFlagUntilTimeout>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d008      	beq.n	8007280 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e13c      	b.n	80074ec <HAL_I2C_Mem_Read+0x4bc>
 8007272:	bf00      	nop
 8007274:	00100002 	.word	0x00100002
 8007278:	ffff0000 	.word	0xffff0000
 800727c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007280:	b672      	cpsid	i
}
 8007282:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007292:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	691a      	ldr	r2, [r3, #16]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729e:	b2d2      	uxtb	r2, r2
 80072a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072b0:	3b01      	subs	r3, #1
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072bc:	b29b      	uxth	r3, r3
 80072be:	3b01      	subs	r3, #1
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80072c6:	b662      	cpsie	i
}
 80072c8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	691a      	ldr	r2, [r3, #16]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	b2d2      	uxtb	r2, r2
 80072d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072dc:	1c5a      	adds	r2, r3, #1
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072e6:	3b01      	subs	r3, #1
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	3b01      	subs	r3, #1
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80072fc:	e0e2      	b.n	80074c4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007304:	2200      	movs	r2, #0
 8007306:	497b      	ldr	r1, [pc, #492]	; (80074f4 <HAL_I2C_Mem_Read+0x4c4>)
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 fbc7 	bl	8007a9c <I2C_WaitOnFlagUntilTimeout>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e0e9      	b.n	80074ec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007326:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007328:	b672      	cpsid	i
}
 800732a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	691a      	ldr	r2, [r3, #16]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007336:	b2d2      	uxtb	r2, r2
 8007338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	1c5a      	adds	r2, r3, #1
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007348:	3b01      	subs	r3, #1
 800734a:	b29a      	uxth	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007354:	b29b      	uxth	r3, r3
 8007356:	3b01      	subs	r3, #1
 8007358:	b29a      	uxth	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800735e:	4b66      	ldr	r3, [pc, #408]	; (80074f8 <HAL_I2C_Mem_Read+0x4c8>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	08db      	lsrs	r3, r3, #3
 8007364:	4a65      	ldr	r2, [pc, #404]	; (80074fc <HAL_I2C_Mem_Read+0x4cc>)
 8007366:	fba2 2303 	umull	r2, r3, r2, r3
 800736a:	0a1a      	lsrs	r2, r3, #8
 800736c:	4613      	mov	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	00da      	lsls	r2, r3, #3
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	3b01      	subs	r3, #1
 800737c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d118      	bne.n	80073b6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2220      	movs	r2, #32
 800738e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	f043 0220 	orr.w	r2, r3, #32
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80073a6:	b662      	cpsie	i
}
 80073a8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e09a      	b.n	80074ec <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	f003 0304 	and.w	r3, r3, #4
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	d1d9      	bne.n	8007378 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	691a      	ldr	r2, [r3, #16]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	b2d2      	uxtb	r2, r2
 80073e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e6:	1c5a      	adds	r2, r3, #1
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	3b01      	subs	r3, #1
 8007400:	b29a      	uxth	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007406:	b662      	cpsie	i
}
 8007408:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	691a      	ldr	r2, [r3, #16]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007414:	b2d2      	uxtb	r2, r2
 8007416:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007426:	3b01      	subs	r3, #1
 8007428:	b29a      	uxth	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007432:	b29b      	uxth	r3, r3
 8007434:	3b01      	subs	r3, #1
 8007436:	b29a      	uxth	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800743c:	e042      	b.n	80074c4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800743e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007440:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f000 fc82 	bl	8007d4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e04c      	b.n	80074ec <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	691a      	ldr	r2, [r3, #16]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745c:	b2d2      	uxtb	r2, r2
 800745e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	1c5a      	adds	r2, r3, #1
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800746e:	3b01      	subs	r3, #1
 8007470:	b29a      	uxth	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800747a:	b29b      	uxth	r3, r3
 800747c:	3b01      	subs	r3, #1
 800747e:	b29a      	uxth	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	f003 0304 	and.w	r3, r3, #4
 800748e:	2b04      	cmp	r3, #4
 8007490:	d118      	bne.n	80074c4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	691a      	ldr	r2, [r3, #16]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	b2d2      	uxtb	r2, r2
 800749e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	1c5a      	adds	r2, r3, #1
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ae:	3b01      	subs	r3, #1
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	3b01      	subs	r3, #1
 80074be:	b29a      	uxth	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f47f ae94 	bne.w	80071f6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2220      	movs	r2, #32
 80074d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	e000      	b.n	80074ec <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80074ea:	2302      	movs	r3, #2
  }
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3728      	adds	r7, #40	; 0x28
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	00010004 	.word	0x00010004
 80074f8:	20000010 	.word	0x20000010
 80074fc:	14f8b589 	.word	0x14f8b589

08007500 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b088      	sub	sp, #32
 8007504:	af02      	add	r7, sp, #8
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	607a      	str	r2, [r7, #4]
 800750a:	603b      	str	r3, [r7, #0]
 800750c:	460b      	mov	r3, r1
 800750e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007514:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2b08      	cmp	r3, #8
 800751a:	d006      	beq.n	800752a <I2C_MasterRequestWrite+0x2a>
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d003      	beq.n	800752a <I2C_MasterRequestWrite+0x2a>
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007528:	d108      	bne.n	800753c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007538:	601a      	str	r2, [r3, #0]
 800753a:	e00b      	b.n	8007554 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007540:	2b12      	cmp	r3, #18
 8007542:	d107      	bne.n	8007554 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007552:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 fa9b 	bl	8007a9c <I2C_WaitOnFlagUntilTimeout>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00d      	beq.n	8007588 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800757a:	d103      	bne.n	8007584 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007582:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e035      	b.n	80075f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007590:	d108      	bne.n	80075a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007592:	897b      	ldrh	r3, [r7, #10]
 8007594:	b2db      	uxtb	r3, r3
 8007596:	461a      	mov	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80075a0:	611a      	str	r2, [r3, #16]
 80075a2:	e01b      	b.n	80075dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80075a4:	897b      	ldrh	r3, [r7, #10]
 80075a6:	11db      	asrs	r3, r3, #7
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	f003 0306 	and.w	r3, r3, #6
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	f063 030f 	orn	r3, r3, #15
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	490e      	ldr	r1, [pc, #56]	; (80075fc <I2C_MasterRequestWrite+0xfc>)
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 fac1 	bl	8007b4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e010      	b.n	80075f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80075d2:	897b      	ldrh	r3, [r7, #10]
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	4907      	ldr	r1, [pc, #28]	; (8007600 <I2C_MasterRequestWrite+0x100>)
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 fab1 	bl	8007b4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e000      	b.n	80075f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3718      	adds	r7, #24
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	00010008 	.word	0x00010008
 8007600:	00010002 	.word	0x00010002

08007604 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b088      	sub	sp, #32
 8007608:	af02      	add	r7, sp, #8
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	607a      	str	r2, [r7, #4]
 800760e:	603b      	str	r3, [r7, #0]
 8007610:	460b      	mov	r3, r1
 8007612:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007618:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007628:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2b08      	cmp	r3, #8
 800762e:	d006      	beq.n	800763e <I2C_MasterRequestRead+0x3a>
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d003      	beq.n	800763e <I2C_MasterRequestRead+0x3a>
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800763c:	d108      	bne.n	8007650 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	e00b      	b.n	8007668 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007654:	2b11      	cmp	r3, #17
 8007656:	d107      	bne.n	8007668 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007666:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 fa11 	bl	8007a9c <I2C_WaitOnFlagUntilTimeout>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00d      	beq.n	800769c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800768a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800768e:	d103      	bne.n	8007698 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007696:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e079      	b.n	8007790 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076a4:	d108      	bne.n	80076b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80076a6:	897b      	ldrh	r3, [r7, #10]
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	f043 0301 	orr.w	r3, r3, #1
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	611a      	str	r2, [r3, #16]
 80076b6:	e05f      	b.n	8007778 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80076b8:	897b      	ldrh	r3, [r7, #10]
 80076ba:	11db      	asrs	r3, r3, #7
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	f003 0306 	and.w	r3, r3, #6
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	f063 030f 	orn	r3, r3, #15
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	4930      	ldr	r1, [pc, #192]	; (8007798 <I2C_MasterRequestRead+0x194>)
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 fa37 	bl	8007b4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e054      	b.n	8007790 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80076e6:	897b      	ldrh	r3, [r7, #10]
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	4929      	ldr	r1, [pc, #164]	; (800779c <I2C_MasterRequestRead+0x198>)
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 fa27 	bl	8007b4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e044      	b.n	8007790 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007706:	2300      	movs	r3, #0
 8007708:	613b      	str	r3, [r7, #16]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	613b      	str	r3, [r7, #16]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	613b      	str	r3, [r7, #16]
 800771a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800772a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	9300      	str	r3, [sp, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 f9af 	bl	8007a9c <I2C_WaitOnFlagUntilTimeout>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00d      	beq.n	8007760 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800774e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007752:	d103      	bne.n	800775c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800775a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e017      	b.n	8007790 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007760:	897b      	ldrh	r3, [r7, #10]
 8007762:	11db      	asrs	r3, r3, #7
 8007764:	b2db      	uxtb	r3, r3
 8007766:	f003 0306 	and.w	r3, r3, #6
 800776a:	b2db      	uxtb	r3, r3
 800776c:	f063 030e 	orn	r3, r3, #14
 8007770:	b2da      	uxtb	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	4907      	ldr	r1, [pc, #28]	; (800779c <I2C_MasterRequestRead+0x198>)
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f000 f9e3 	bl	8007b4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e000      	b.n	8007790 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3718      	adds	r7, #24
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	00010008 	.word	0x00010008
 800779c:	00010002 	.word	0x00010002

080077a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af02      	add	r7, sp, #8
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	4608      	mov	r0, r1
 80077aa:	4611      	mov	r1, r2
 80077ac:	461a      	mov	r2, r3
 80077ae:	4603      	mov	r3, r0
 80077b0:	817b      	strh	r3, [r7, #10]
 80077b2:	460b      	mov	r3, r1
 80077b4:	813b      	strh	r3, [r7, #8]
 80077b6:	4613      	mov	r3, r2
 80077b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 f960 	bl	8007a9c <I2C_WaitOnFlagUntilTimeout>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00d      	beq.n	80077fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077f0:	d103      	bne.n	80077fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e05f      	b.n	80078be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80077fe:	897b      	ldrh	r3, [r7, #10]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	461a      	mov	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800780c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	6a3a      	ldr	r2, [r7, #32]
 8007812:	492d      	ldr	r1, [pc, #180]	; (80078c8 <I2C_RequestMemoryWrite+0x128>)
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f000 f998 	bl	8007b4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d001      	beq.n	8007824 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e04c      	b.n	80078be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007824:	2300      	movs	r3, #0
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	617b      	str	r3, [r7, #20]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	617b      	str	r3, [r7, #20]
 8007838:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800783a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800783c:	6a39      	ldr	r1, [r7, #32]
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 fa02 	bl	8007c48 <I2C_WaitOnTXEFlagUntilTimeout>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00d      	beq.n	8007866 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784e:	2b04      	cmp	r3, #4
 8007850:	d107      	bne.n	8007862 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007860:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e02b      	b.n	80078be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007866:	88fb      	ldrh	r3, [r7, #6]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d105      	bne.n	8007878 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800786c:	893b      	ldrh	r3, [r7, #8]
 800786e:	b2da      	uxtb	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	611a      	str	r2, [r3, #16]
 8007876:	e021      	b.n	80078bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007878:	893b      	ldrh	r3, [r7, #8]
 800787a:	0a1b      	lsrs	r3, r3, #8
 800787c:	b29b      	uxth	r3, r3
 800787e:	b2da      	uxtb	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007888:	6a39      	ldr	r1, [r7, #32]
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 f9dc 	bl	8007c48 <I2C_WaitOnTXEFlagUntilTimeout>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00d      	beq.n	80078b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789a:	2b04      	cmp	r3, #4
 800789c:	d107      	bne.n	80078ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e005      	b.n	80078be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078b2:	893b      	ldrh	r3, [r7, #8]
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	00010002 	.word	0x00010002

080078cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b088      	sub	sp, #32
 80078d0:	af02      	add	r7, sp, #8
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	4608      	mov	r0, r1
 80078d6:	4611      	mov	r1, r2
 80078d8:	461a      	mov	r2, r3
 80078da:	4603      	mov	r3, r0
 80078dc:	817b      	strh	r3, [r7, #10]
 80078de:	460b      	mov	r3, r1
 80078e0:	813b      	strh	r3, [r7, #8]
 80078e2:	4613      	mov	r3, r2
 80078e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007904:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	2200      	movs	r2, #0
 800790e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 f8c2 	bl	8007a9c <I2C_WaitOnFlagUntilTimeout>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00d      	beq.n	800793a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800792c:	d103      	bne.n	8007936 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007934:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e0aa      	b.n	8007a90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800793a:	897b      	ldrh	r3, [r7, #10]
 800793c:	b2db      	uxtb	r3, r3
 800793e:	461a      	mov	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007948:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	6a3a      	ldr	r2, [r7, #32]
 800794e:	4952      	ldr	r1, [pc, #328]	; (8007a98 <I2C_RequestMemoryRead+0x1cc>)
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 f8fa 	bl	8007b4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e097      	b.n	8007a90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007960:	2300      	movs	r3, #0
 8007962:	617b      	str	r3, [r7, #20]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	617b      	str	r3, [r7, #20]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	617b      	str	r3, [r7, #20]
 8007974:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007978:	6a39      	ldr	r1, [r7, #32]
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 f964 	bl	8007c48 <I2C_WaitOnTXEFlagUntilTimeout>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00d      	beq.n	80079a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798a:	2b04      	cmp	r3, #4
 800798c:	d107      	bne.n	800799e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800799c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e076      	b.n	8007a90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80079a2:	88fb      	ldrh	r3, [r7, #6]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d105      	bne.n	80079b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079a8:	893b      	ldrh	r3, [r7, #8]
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	611a      	str	r2, [r3, #16]
 80079b2:	e021      	b.n	80079f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80079b4:	893b      	ldrh	r3, [r7, #8]
 80079b6:	0a1b      	lsrs	r3, r3, #8
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c4:	6a39      	ldr	r1, [r7, #32]
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 f93e 	bl	8007c48 <I2C_WaitOnTXEFlagUntilTimeout>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00d      	beq.n	80079ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d107      	bne.n	80079ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e050      	b.n	8007a90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079ee:	893b      	ldrh	r3, [r7, #8]
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079fa:	6a39      	ldr	r1, [r7, #32]
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 f923 	bl	8007c48 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00d      	beq.n	8007a24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0c:	2b04      	cmp	r3, #4
 8007a0e:	d107      	bne.n	8007a20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e035      	b.n	8007a90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	6a3b      	ldr	r3, [r7, #32]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f000 f82b 	bl	8007a9c <I2C_WaitOnFlagUntilTimeout>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00d      	beq.n	8007a68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a5a:	d103      	bne.n	8007a64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e013      	b.n	8007a90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007a68:	897b      	ldrh	r3, [r7, #10]
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	f043 0301 	orr.w	r3, r3, #1
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7a:	6a3a      	ldr	r2, [r7, #32]
 8007a7c:	4906      	ldr	r1, [pc, #24]	; (8007a98 <I2C_RequestMemoryRead+0x1cc>)
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f000 f863 	bl	8007b4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e000      	b.n	8007a90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3718      	adds	r7, #24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	00010002 	.word	0x00010002

08007a9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	603b      	str	r3, [r7, #0]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007aac:	e025      	b.n	8007afa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab4:	d021      	beq.n	8007afa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ab6:	f7fd ffe3 	bl	8005a80 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d302      	bcc.n	8007acc <I2C_WaitOnFlagUntilTimeout+0x30>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d116      	bne.n	8007afa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae6:	f043 0220 	orr.w	r2, r3, #32
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e023      	b.n	8007b42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	0c1b      	lsrs	r3, r3, #16
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d10d      	bne.n	8007b20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	43da      	mvns	r2, r3
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4013      	ands	r3, r2
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	bf0c      	ite	eq
 8007b16:	2301      	moveq	r3, #1
 8007b18:	2300      	movne	r3, #0
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	e00c      	b.n	8007b3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	43da      	mvns	r2, r3
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	bf0c      	ite	eq
 8007b32:	2301      	moveq	r3, #1
 8007b34:	2300      	movne	r3, #0
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	461a      	mov	r2, r3
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d0b6      	beq.n	8007aae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	60f8      	str	r0, [r7, #12]
 8007b52:	60b9      	str	r1, [r7, #8]
 8007b54:	607a      	str	r2, [r7, #4]
 8007b56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b58:	e051      	b.n	8007bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b68:	d123      	bne.n	8007bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9e:	f043 0204 	orr.w	r2, r3, #4
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e046      	b.n	8007c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb8:	d021      	beq.n	8007bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bba:	f7fd ff61 	bl	8005a80 <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d302      	bcc.n	8007bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d116      	bne.n	8007bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	f043 0220 	orr.w	r2, r3, #32
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e020      	b.n	8007c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	0c1b      	lsrs	r3, r3, #16
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d10c      	bne.n	8007c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	43da      	mvns	r2, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	4013      	ands	r3, r2
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	bf14      	ite	ne
 8007c1a:	2301      	movne	r3, #1
 8007c1c:	2300      	moveq	r3, #0
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	e00b      	b.n	8007c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	43da      	mvns	r2, r3
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	bf14      	ite	ne
 8007c34:	2301      	movne	r3, #1
 8007c36:	2300      	moveq	r3, #0
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d18d      	bne.n	8007b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c54:	e02d      	b.n	8007cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f000 f8ce 	bl	8007df8 <I2C_IsAcknowledgeFailed>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d001      	beq.n	8007c66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e02d      	b.n	8007cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6c:	d021      	beq.n	8007cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c6e:	f7fd ff07 	bl	8005a80 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d302      	bcc.n	8007c84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d116      	bne.n	8007cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9e:	f043 0220 	orr.w	r2, r3, #32
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e007      	b.n	8007cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cbc:	2b80      	cmp	r3, #128	; 0x80
 8007cbe:	d1ca      	bne.n	8007c56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007cd6:	e02d      	b.n	8007d34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 f88d 	bl	8007df8 <I2C_IsAcknowledgeFailed>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e02d      	b.n	8007d44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cee:	d021      	beq.n	8007d34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cf0:	f7fd fec6 	bl	8005a80 <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d302      	bcc.n	8007d06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d116      	bne.n	8007d34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d20:	f043 0220 	orr.w	r2, r3, #32
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e007      	b.n	8007d44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	f003 0304 	and.w	r3, r3, #4
 8007d3e:	2b04      	cmp	r3, #4
 8007d40:	d1ca      	bne.n	8007cd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d58:	e042      	b.n	8007de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	695b      	ldr	r3, [r3, #20]
 8007d60:	f003 0310 	and.w	r3, r3, #16
 8007d64:	2b10      	cmp	r3, #16
 8007d66:	d119      	bne.n	8007d9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f06f 0210 	mvn.w	r2, #16
 8007d70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e029      	b.n	8007df0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d9c:	f7fd fe70 	bl	8005a80 <HAL_GetTick>
 8007da0:	4602      	mov	r2, r0
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d302      	bcc.n	8007db2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d116      	bne.n	8007de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dcc:	f043 0220 	orr.w	r2, r3, #32
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e007      	b.n	8007df0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dea:	2b40      	cmp	r3, #64	; 0x40
 8007dec:	d1b5      	bne.n	8007d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e0e:	d11b      	bne.n	8007e48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2220      	movs	r2, #32
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e34:	f043 0204 	orr.w	r2, r3, #4
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	e000      	b.n	8007e4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bc80      	pop	{r7}
 8007e52:	4770      	bx	lr

08007e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d101      	bne.n	8007e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e26c      	b.n	8008340 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f000 8087 	beq.w	8007f82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007e74:	4b92      	ldr	r3, [pc, #584]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f003 030c 	and.w	r3, r3, #12
 8007e7c:	2b04      	cmp	r3, #4
 8007e7e:	d00c      	beq.n	8007e9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007e80:	4b8f      	ldr	r3, [pc, #572]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	f003 030c 	and.w	r3, r3, #12
 8007e88:	2b08      	cmp	r3, #8
 8007e8a:	d112      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x5e>
 8007e8c:	4b8c      	ldr	r3, [pc, #560]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e98:	d10b      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e9a:	4b89      	ldr	r3, [pc, #548]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d06c      	beq.n	8007f80 <HAL_RCC_OscConfig+0x12c>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d168      	bne.n	8007f80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e246      	b.n	8008340 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eba:	d106      	bne.n	8007eca <HAL_RCC_OscConfig+0x76>
 8007ebc:	4b80      	ldr	r3, [pc, #512]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a7f      	ldr	r2, [pc, #508]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ec6:	6013      	str	r3, [r2, #0]
 8007ec8:	e02e      	b.n	8007f28 <HAL_RCC_OscConfig+0xd4>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10c      	bne.n	8007eec <HAL_RCC_OscConfig+0x98>
 8007ed2:	4b7b      	ldr	r3, [pc, #492]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a7a      	ldr	r2, [pc, #488]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007edc:	6013      	str	r3, [r2, #0]
 8007ede:	4b78      	ldr	r3, [pc, #480]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a77      	ldr	r2, [pc, #476]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ee8:	6013      	str	r3, [r2, #0]
 8007eea:	e01d      	b.n	8007f28 <HAL_RCC_OscConfig+0xd4>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ef4:	d10c      	bne.n	8007f10 <HAL_RCC_OscConfig+0xbc>
 8007ef6:	4b72      	ldr	r3, [pc, #456]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a71      	ldr	r2, [pc, #452]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f00:	6013      	str	r3, [r2, #0]
 8007f02:	4b6f      	ldr	r3, [pc, #444]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a6e      	ldr	r2, [pc, #440]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f0c:	6013      	str	r3, [r2, #0]
 8007f0e:	e00b      	b.n	8007f28 <HAL_RCC_OscConfig+0xd4>
 8007f10:	4b6b      	ldr	r3, [pc, #428]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a6a      	ldr	r2, [pc, #424]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f1a:	6013      	str	r3, [r2, #0]
 8007f1c:	4b68      	ldr	r3, [pc, #416]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a67      	ldr	r2, [pc, #412]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d013      	beq.n	8007f58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f30:	f7fd fda6 	bl	8005a80 <HAL_GetTick>
 8007f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f36:	e008      	b.n	8007f4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f38:	f7fd fda2 	bl	8005a80 <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	2b64      	cmp	r3, #100	; 0x64
 8007f44:	d901      	bls.n	8007f4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e1fa      	b.n	8008340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f4a:	4b5d      	ldr	r3, [pc, #372]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d0f0      	beq.n	8007f38 <HAL_RCC_OscConfig+0xe4>
 8007f56:	e014      	b.n	8007f82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f58:	f7fd fd92 	bl	8005a80 <HAL_GetTick>
 8007f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f5e:	e008      	b.n	8007f72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f60:	f7fd fd8e 	bl	8005a80 <HAL_GetTick>
 8007f64:	4602      	mov	r2, r0
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	2b64      	cmp	r3, #100	; 0x64
 8007f6c:	d901      	bls.n	8007f72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e1e6      	b.n	8008340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f72:	4b53      	ldr	r3, [pc, #332]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1f0      	bne.n	8007f60 <HAL_RCC_OscConfig+0x10c>
 8007f7e:	e000      	b.n	8007f82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 0302 	and.w	r3, r3, #2
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d063      	beq.n	8008056 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007f8e:	4b4c      	ldr	r3, [pc, #304]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f003 030c 	and.w	r3, r3, #12
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00b      	beq.n	8007fb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007f9a:	4b49      	ldr	r3, [pc, #292]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f003 030c 	and.w	r3, r3, #12
 8007fa2:	2b08      	cmp	r3, #8
 8007fa4:	d11c      	bne.n	8007fe0 <HAL_RCC_OscConfig+0x18c>
 8007fa6:	4b46      	ldr	r3, [pc, #280]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d116      	bne.n	8007fe0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fb2:	4b43      	ldr	r3, [pc, #268]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0302 	and.w	r3, r3, #2
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d005      	beq.n	8007fca <HAL_RCC_OscConfig+0x176>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d001      	beq.n	8007fca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e1ba      	b.n	8008340 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fca:	4b3d      	ldr	r3, [pc, #244]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	00db      	lsls	r3, r3, #3
 8007fd8:	4939      	ldr	r1, [pc, #228]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fde:	e03a      	b.n	8008056 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d020      	beq.n	800802a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fe8:	4b36      	ldr	r3, [pc, #216]	; (80080c4 <HAL_RCC_OscConfig+0x270>)
 8007fea:	2201      	movs	r2, #1
 8007fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fee:	f7fd fd47 	bl	8005a80 <HAL_GetTick>
 8007ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ff4:	e008      	b.n	8008008 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ff6:	f7fd fd43 	bl	8005a80 <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	2b02      	cmp	r3, #2
 8008002:	d901      	bls.n	8008008 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	e19b      	b.n	8008340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008008:	4b2d      	ldr	r3, [pc, #180]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0302 	and.w	r3, r3, #2
 8008010:	2b00      	cmp	r3, #0
 8008012:	d0f0      	beq.n	8007ff6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008014:	4b2a      	ldr	r3, [pc, #168]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	00db      	lsls	r3, r3, #3
 8008022:	4927      	ldr	r1, [pc, #156]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 8008024:	4313      	orrs	r3, r2
 8008026:	600b      	str	r3, [r1, #0]
 8008028:	e015      	b.n	8008056 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800802a:	4b26      	ldr	r3, [pc, #152]	; (80080c4 <HAL_RCC_OscConfig+0x270>)
 800802c:	2200      	movs	r2, #0
 800802e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008030:	f7fd fd26 	bl	8005a80 <HAL_GetTick>
 8008034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008036:	e008      	b.n	800804a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008038:	f7fd fd22 	bl	8005a80 <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	2b02      	cmp	r3, #2
 8008044:	d901      	bls.n	800804a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e17a      	b.n	8008340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800804a:	4b1d      	ldr	r3, [pc, #116]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0302 	and.w	r3, r3, #2
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1f0      	bne.n	8008038 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0308 	and.w	r3, r3, #8
 800805e:	2b00      	cmp	r3, #0
 8008060:	d03a      	beq.n	80080d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d019      	beq.n	800809e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800806a:	4b17      	ldr	r3, [pc, #92]	; (80080c8 <HAL_RCC_OscConfig+0x274>)
 800806c:	2201      	movs	r2, #1
 800806e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008070:	f7fd fd06 	bl	8005a80 <HAL_GetTick>
 8008074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008076:	e008      	b.n	800808a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008078:	f7fd fd02 	bl	8005a80 <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b02      	cmp	r3, #2
 8008084:	d901      	bls.n	800808a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e15a      	b.n	8008340 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800808a:	4b0d      	ldr	r3, [pc, #52]	; (80080c0 <HAL_RCC_OscConfig+0x26c>)
 800808c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b00      	cmp	r3, #0
 8008094:	d0f0      	beq.n	8008078 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008096:	2001      	movs	r0, #1
 8008098:	f000 fad8 	bl	800864c <RCC_Delay>
 800809c:	e01c      	b.n	80080d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800809e:	4b0a      	ldr	r3, [pc, #40]	; (80080c8 <HAL_RCC_OscConfig+0x274>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080a4:	f7fd fcec 	bl	8005a80 <HAL_GetTick>
 80080a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080aa:	e00f      	b.n	80080cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080ac:	f7fd fce8 	bl	8005a80 <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d908      	bls.n	80080cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e140      	b.n	8008340 <HAL_RCC_OscConfig+0x4ec>
 80080be:	bf00      	nop
 80080c0:	40021000 	.word	0x40021000
 80080c4:	42420000 	.word	0x42420000
 80080c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080cc:	4b9e      	ldr	r3, [pc, #632]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	f003 0302 	and.w	r3, r3, #2
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1e9      	bne.n	80080ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0304 	and.w	r3, r3, #4
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 80a6 	beq.w	8008232 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080e6:	2300      	movs	r3, #0
 80080e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080ea:	4b97      	ldr	r3, [pc, #604]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10d      	bne.n	8008112 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080f6:	4b94      	ldr	r3, [pc, #592]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	4a93      	ldr	r2, [pc, #588]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 80080fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008100:	61d3      	str	r3, [r2, #28]
 8008102:	4b91      	ldr	r3, [pc, #580]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800810a:	60bb      	str	r3, [r7, #8]
 800810c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800810e:	2301      	movs	r3, #1
 8008110:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008112:	4b8e      	ldr	r3, [pc, #568]	; (800834c <HAL_RCC_OscConfig+0x4f8>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800811a:	2b00      	cmp	r3, #0
 800811c:	d118      	bne.n	8008150 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800811e:	4b8b      	ldr	r3, [pc, #556]	; (800834c <HAL_RCC_OscConfig+0x4f8>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a8a      	ldr	r2, [pc, #552]	; (800834c <HAL_RCC_OscConfig+0x4f8>)
 8008124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800812a:	f7fd fca9 	bl	8005a80 <HAL_GetTick>
 800812e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008130:	e008      	b.n	8008144 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008132:	f7fd fca5 	bl	8005a80 <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	2b64      	cmp	r3, #100	; 0x64
 800813e:	d901      	bls.n	8008144 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e0fd      	b.n	8008340 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008144:	4b81      	ldr	r3, [pc, #516]	; (800834c <HAL_RCC_OscConfig+0x4f8>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0f0      	beq.n	8008132 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d106      	bne.n	8008166 <HAL_RCC_OscConfig+0x312>
 8008158:	4b7b      	ldr	r3, [pc, #492]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 800815a:	6a1b      	ldr	r3, [r3, #32]
 800815c:	4a7a      	ldr	r2, [pc, #488]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 800815e:	f043 0301 	orr.w	r3, r3, #1
 8008162:	6213      	str	r3, [r2, #32]
 8008164:	e02d      	b.n	80081c2 <HAL_RCC_OscConfig+0x36e>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10c      	bne.n	8008188 <HAL_RCC_OscConfig+0x334>
 800816e:	4b76      	ldr	r3, [pc, #472]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	4a75      	ldr	r2, [pc, #468]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 8008174:	f023 0301 	bic.w	r3, r3, #1
 8008178:	6213      	str	r3, [r2, #32]
 800817a:	4b73      	ldr	r3, [pc, #460]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	4a72      	ldr	r2, [pc, #456]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 8008180:	f023 0304 	bic.w	r3, r3, #4
 8008184:	6213      	str	r3, [r2, #32]
 8008186:	e01c      	b.n	80081c2 <HAL_RCC_OscConfig+0x36e>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	2b05      	cmp	r3, #5
 800818e:	d10c      	bne.n	80081aa <HAL_RCC_OscConfig+0x356>
 8008190:	4b6d      	ldr	r3, [pc, #436]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 8008192:	6a1b      	ldr	r3, [r3, #32]
 8008194:	4a6c      	ldr	r2, [pc, #432]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 8008196:	f043 0304 	orr.w	r3, r3, #4
 800819a:	6213      	str	r3, [r2, #32]
 800819c:	4b6a      	ldr	r3, [pc, #424]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	4a69      	ldr	r2, [pc, #420]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 80081a2:	f043 0301 	orr.w	r3, r3, #1
 80081a6:	6213      	str	r3, [r2, #32]
 80081a8:	e00b      	b.n	80081c2 <HAL_RCC_OscConfig+0x36e>
 80081aa:	4b67      	ldr	r3, [pc, #412]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	4a66      	ldr	r2, [pc, #408]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 80081b0:	f023 0301 	bic.w	r3, r3, #1
 80081b4:	6213      	str	r3, [r2, #32]
 80081b6:	4b64      	ldr	r3, [pc, #400]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	4a63      	ldr	r2, [pc, #396]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 80081bc:	f023 0304 	bic.w	r3, r3, #4
 80081c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d015      	beq.n	80081f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081ca:	f7fd fc59 	bl	8005a80 <HAL_GetTick>
 80081ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081d0:	e00a      	b.n	80081e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081d2:	f7fd fc55 	bl	8005a80 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d901      	bls.n	80081e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e0ab      	b.n	8008340 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081e8:	4b57      	ldr	r3, [pc, #348]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 80081ea:	6a1b      	ldr	r3, [r3, #32]
 80081ec:	f003 0302 	and.w	r3, r3, #2
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d0ee      	beq.n	80081d2 <HAL_RCC_OscConfig+0x37e>
 80081f4:	e014      	b.n	8008220 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081f6:	f7fd fc43 	bl	8005a80 <HAL_GetTick>
 80081fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081fc:	e00a      	b.n	8008214 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081fe:	f7fd fc3f 	bl	8005a80 <HAL_GetTick>
 8008202:	4602      	mov	r2, r0
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	f241 3288 	movw	r2, #5000	; 0x1388
 800820c:	4293      	cmp	r3, r2
 800820e:	d901      	bls.n	8008214 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e095      	b.n	8008340 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008214:	4b4c      	ldr	r3, [pc, #304]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 8008216:	6a1b      	ldr	r3, [r3, #32]
 8008218:	f003 0302 	and.w	r3, r3, #2
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1ee      	bne.n	80081fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d105      	bne.n	8008232 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008226:	4b48      	ldr	r3, [pc, #288]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	4a47      	ldr	r2, [pc, #284]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 800822c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008230:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	69db      	ldr	r3, [r3, #28]
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 8081 	beq.w	800833e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800823c:	4b42      	ldr	r3, [pc, #264]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f003 030c 	and.w	r3, r3, #12
 8008244:	2b08      	cmp	r3, #8
 8008246:	d061      	beq.n	800830c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	2b02      	cmp	r3, #2
 800824e:	d146      	bne.n	80082de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008250:	4b3f      	ldr	r3, [pc, #252]	; (8008350 <HAL_RCC_OscConfig+0x4fc>)
 8008252:	2200      	movs	r2, #0
 8008254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008256:	f7fd fc13 	bl	8005a80 <HAL_GetTick>
 800825a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800825c:	e008      	b.n	8008270 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800825e:	f7fd fc0f 	bl	8005a80 <HAL_GetTick>
 8008262:	4602      	mov	r2, r0
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	2b02      	cmp	r3, #2
 800826a:	d901      	bls.n	8008270 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e067      	b.n	8008340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008270:	4b35      	ldr	r3, [pc, #212]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1f0      	bne.n	800825e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a1b      	ldr	r3, [r3, #32]
 8008280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008284:	d108      	bne.n	8008298 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008286:	4b30      	ldr	r3, [pc, #192]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	492d      	ldr	r1, [pc, #180]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 8008294:	4313      	orrs	r3, r2
 8008296:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008298:	4b2b      	ldr	r3, [pc, #172]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a19      	ldr	r1, [r3, #32]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	430b      	orrs	r3, r1
 80082aa:	4927      	ldr	r1, [pc, #156]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 80082ac:	4313      	orrs	r3, r2
 80082ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082b0:	4b27      	ldr	r3, [pc, #156]	; (8008350 <HAL_RCC_OscConfig+0x4fc>)
 80082b2:	2201      	movs	r2, #1
 80082b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082b6:	f7fd fbe3 	bl	8005a80 <HAL_GetTick>
 80082ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80082bc:	e008      	b.n	80082d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082be:	f7fd fbdf 	bl	8005a80 <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d901      	bls.n	80082d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e037      	b.n	8008340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80082d0:	4b1d      	ldr	r3, [pc, #116]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d0f0      	beq.n	80082be <HAL_RCC_OscConfig+0x46a>
 80082dc:	e02f      	b.n	800833e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082de:	4b1c      	ldr	r3, [pc, #112]	; (8008350 <HAL_RCC_OscConfig+0x4fc>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082e4:	f7fd fbcc 	bl	8005a80 <HAL_GetTick>
 80082e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80082ea:	e008      	b.n	80082fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082ec:	f7fd fbc8 	bl	8005a80 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d901      	bls.n	80082fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e020      	b.n	8008340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80082fe:	4b12      	ldr	r3, [pc, #72]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1f0      	bne.n	80082ec <HAL_RCC_OscConfig+0x498>
 800830a:	e018      	b.n	800833e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	69db      	ldr	r3, [r3, #28]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d101      	bne.n	8008318 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e013      	b.n	8008340 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008318:	4b0b      	ldr	r3, [pc, #44]	; (8008348 <HAL_RCC_OscConfig+0x4f4>)
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	429a      	cmp	r2, r3
 800832a:	d106      	bne.n	800833a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008336:	429a      	cmp	r2, r3
 8008338:	d001      	beq.n	800833e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e000      	b.n	8008340 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	40021000 	.word	0x40021000
 800834c:	40007000 	.word	0x40007000
 8008350:	42420060 	.word	0x42420060

08008354 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e0d0      	b.n	800850a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008368:	4b6a      	ldr	r3, [pc, #424]	; (8008514 <HAL_RCC_ClockConfig+0x1c0>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0307 	and.w	r3, r3, #7
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	429a      	cmp	r2, r3
 8008374:	d910      	bls.n	8008398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008376:	4b67      	ldr	r3, [pc, #412]	; (8008514 <HAL_RCC_ClockConfig+0x1c0>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f023 0207 	bic.w	r2, r3, #7
 800837e:	4965      	ldr	r1, [pc, #404]	; (8008514 <HAL_RCC_ClockConfig+0x1c0>)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	4313      	orrs	r3, r2
 8008384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008386:	4b63      	ldr	r3, [pc, #396]	; (8008514 <HAL_RCC_ClockConfig+0x1c0>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0307 	and.w	r3, r3, #7
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	429a      	cmp	r2, r3
 8008392:	d001      	beq.n	8008398 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e0b8      	b.n	800850a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0302 	and.w	r3, r3, #2
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d020      	beq.n	80083e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0304 	and.w	r3, r3, #4
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d005      	beq.n	80083bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80083b0:	4b59      	ldr	r3, [pc, #356]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	4a58      	ldr	r2, [pc, #352]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80083b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80083ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0308 	and.w	r3, r3, #8
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d005      	beq.n	80083d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80083c8:	4b53      	ldr	r3, [pc, #332]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	4a52      	ldr	r2, [pc, #328]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80083ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80083d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083d4:	4b50      	ldr	r3, [pc, #320]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	494d      	ldr	r1, [pc, #308]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d040      	beq.n	8008474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d107      	bne.n	800840a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083fa:	4b47      	ldr	r3, [pc, #284]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d115      	bne.n	8008432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e07f      	b.n	800850a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	2b02      	cmp	r3, #2
 8008410:	d107      	bne.n	8008422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008412:	4b41      	ldr	r3, [pc, #260]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d109      	bne.n	8008432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e073      	b.n	800850a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008422:	4b3d      	ldr	r3, [pc, #244]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0302 	and.w	r3, r3, #2
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e06b      	b.n	800850a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008432:	4b39      	ldr	r3, [pc, #228]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f023 0203 	bic.w	r2, r3, #3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	4936      	ldr	r1, [pc, #216]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 8008440:	4313      	orrs	r3, r2
 8008442:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008444:	f7fd fb1c 	bl	8005a80 <HAL_GetTick>
 8008448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800844a:	e00a      	b.n	8008462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800844c:	f7fd fb18 	bl	8005a80 <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	f241 3288 	movw	r2, #5000	; 0x1388
 800845a:	4293      	cmp	r3, r2
 800845c:	d901      	bls.n	8008462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e053      	b.n	800850a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008462:	4b2d      	ldr	r3, [pc, #180]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	f003 020c 	and.w	r2, r3, #12
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	429a      	cmp	r2, r3
 8008472:	d1eb      	bne.n	800844c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008474:	4b27      	ldr	r3, [pc, #156]	; (8008514 <HAL_RCC_ClockConfig+0x1c0>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0307 	and.w	r3, r3, #7
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	429a      	cmp	r2, r3
 8008480:	d210      	bcs.n	80084a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008482:	4b24      	ldr	r3, [pc, #144]	; (8008514 <HAL_RCC_ClockConfig+0x1c0>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f023 0207 	bic.w	r2, r3, #7
 800848a:	4922      	ldr	r1, [pc, #136]	; (8008514 <HAL_RCC_ClockConfig+0x1c0>)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	4313      	orrs	r3, r2
 8008490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008492:	4b20      	ldr	r3, [pc, #128]	; (8008514 <HAL_RCC_ClockConfig+0x1c0>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0307 	and.w	r3, r3, #7
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	429a      	cmp	r2, r3
 800849e:	d001      	beq.n	80084a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e032      	b.n	800850a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0304 	and.w	r3, r3, #4
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d008      	beq.n	80084c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084b0:	4b19      	ldr	r3, [pc, #100]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	4916      	ldr	r1, [pc, #88]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0308 	and.w	r3, r3, #8
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d009      	beq.n	80084e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80084ce:	4b12      	ldr	r3, [pc, #72]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	00db      	lsls	r3, r3, #3
 80084dc:	490e      	ldr	r1, [pc, #56]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80084e2:	f000 f821 	bl	8008528 <HAL_RCC_GetSysClockFreq>
 80084e6:	4602      	mov	r2, r0
 80084e8:	4b0b      	ldr	r3, [pc, #44]	; (8008518 <HAL_RCC_ClockConfig+0x1c4>)
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	091b      	lsrs	r3, r3, #4
 80084ee:	f003 030f 	and.w	r3, r3, #15
 80084f2:	490a      	ldr	r1, [pc, #40]	; (800851c <HAL_RCC_ClockConfig+0x1c8>)
 80084f4:	5ccb      	ldrb	r3, [r1, r3]
 80084f6:	fa22 f303 	lsr.w	r3, r2, r3
 80084fa:	4a09      	ldr	r2, [pc, #36]	; (8008520 <HAL_RCC_ClockConfig+0x1cc>)
 80084fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80084fe:	4b09      	ldr	r3, [pc, #36]	; (8008524 <HAL_RCC_ClockConfig+0x1d0>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4618      	mov	r0, r3
 8008504:	f7fd fa7a 	bl	80059fc <HAL_InitTick>

  return HAL_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	40022000 	.word	0x40022000
 8008518:	40021000 	.word	0x40021000
 800851c:	08010cdc 	.word	0x08010cdc
 8008520:	20000010 	.word	0x20000010
 8008524:	20000014 	.word	0x20000014

08008528 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008528:	b490      	push	{r4, r7}
 800852a:	b08a      	sub	sp, #40	; 0x28
 800852c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800852e:	4b2a      	ldr	r3, [pc, #168]	; (80085d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008530:	1d3c      	adds	r4, r7, #4
 8008532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008538:	f240 2301 	movw	r3, #513	; 0x201
 800853c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800853e:	2300      	movs	r3, #0
 8008540:	61fb      	str	r3, [r7, #28]
 8008542:	2300      	movs	r3, #0
 8008544:	61bb      	str	r3, [r7, #24]
 8008546:	2300      	movs	r3, #0
 8008548:	627b      	str	r3, [r7, #36]	; 0x24
 800854a:	2300      	movs	r3, #0
 800854c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800854e:	2300      	movs	r3, #0
 8008550:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008552:	4b22      	ldr	r3, [pc, #136]	; (80085dc <HAL_RCC_GetSysClockFreq+0xb4>)
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	f003 030c 	and.w	r3, r3, #12
 800855e:	2b04      	cmp	r3, #4
 8008560:	d002      	beq.n	8008568 <HAL_RCC_GetSysClockFreq+0x40>
 8008562:	2b08      	cmp	r3, #8
 8008564:	d003      	beq.n	800856e <HAL_RCC_GetSysClockFreq+0x46>
 8008566:	e02d      	b.n	80085c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008568:	4b1d      	ldr	r3, [pc, #116]	; (80085e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800856a:	623b      	str	r3, [r7, #32]
      break;
 800856c:	e02d      	b.n	80085ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	0c9b      	lsrs	r3, r3, #18
 8008572:	f003 030f 	and.w	r3, r3, #15
 8008576:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800857a:	4413      	add	r3, r2
 800857c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008580:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d013      	beq.n	80085b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800858c:	4b13      	ldr	r3, [pc, #76]	; (80085dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	0c5b      	lsrs	r3, r3, #17
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800859a:	4413      	add	r3, r2
 800859c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80085a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	4a0e      	ldr	r2, [pc, #56]	; (80085e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085a6:	fb02 f203 	mul.w	r2, r2, r3
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80085b0:	627b      	str	r3, [r7, #36]	; 0x24
 80085b2:	e004      	b.n	80085be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	4a0b      	ldr	r2, [pc, #44]	; (80085e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80085b8:	fb02 f303 	mul.w	r3, r2, r3
 80085bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	623b      	str	r3, [r7, #32]
      break;
 80085c2:	e002      	b.n	80085ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80085c4:	4b06      	ldr	r3, [pc, #24]	; (80085e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80085c6:	623b      	str	r3, [r7, #32]
      break;
 80085c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80085ca:	6a3b      	ldr	r3, [r7, #32]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3728      	adds	r7, #40	; 0x28
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bc90      	pop	{r4, r7}
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	08010ccc 	.word	0x08010ccc
 80085dc:	40021000 	.word	0x40021000
 80085e0:	007a1200 	.word	0x007a1200
 80085e4:	003d0900 	.word	0x003d0900

080085e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085e8:	b480      	push	{r7}
 80085ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085ec:	4b02      	ldr	r3, [pc, #8]	; (80085f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80085ee:	681b      	ldr	r3, [r3, #0]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bc80      	pop	{r7}
 80085f6:	4770      	bx	lr
 80085f8:	20000010 	.word	0x20000010

080085fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008600:	f7ff fff2 	bl	80085e8 <HAL_RCC_GetHCLKFreq>
 8008604:	4602      	mov	r2, r0
 8008606:	4b05      	ldr	r3, [pc, #20]	; (800861c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	0a1b      	lsrs	r3, r3, #8
 800860c:	f003 0307 	and.w	r3, r3, #7
 8008610:	4903      	ldr	r1, [pc, #12]	; (8008620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008612:	5ccb      	ldrb	r3, [r1, r3]
 8008614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008618:	4618      	mov	r0, r3
 800861a:	bd80      	pop	{r7, pc}
 800861c:	40021000 	.word	0x40021000
 8008620:	08010cec 	.word	0x08010cec

08008624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008628:	f7ff ffde 	bl	80085e8 <HAL_RCC_GetHCLKFreq>
 800862c:	4602      	mov	r2, r0
 800862e:	4b05      	ldr	r3, [pc, #20]	; (8008644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	0adb      	lsrs	r3, r3, #11
 8008634:	f003 0307 	and.w	r3, r3, #7
 8008638:	4903      	ldr	r1, [pc, #12]	; (8008648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800863a:	5ccb      	ldrb	r3, [r1, r3]
 800863c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008640:	4618      	mov	r0, r3
 8008642:	bd80      	pop	{r7, pc}
 8008644:	40021000 	.word	0x40021000
 8008648:	08010cec 	.word	0x08010cec

0800864c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008654:	4b0a      	ldr	r3, [pc, #40]	; (8008680 <RCC_Delay+0x34>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a0a      	ldr	r2, [pc, #40]	; (8008684 <RCC_Delay+0x38>)
 800865a:	fba2 2303 	umull	r2, r3, r2, r3
 800865e:	0a5b      	lsrs	r3, r3, #9
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	fb02 f303 	mul.w	r3, r2, r3
 8008666:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008668:	bf00      	nop
  }
  while (Delay --);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	1e5a      	subs	r2, r3, #1
 800866e:	60fa      	str	r2, [r7, #12]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1f9      	bne.n	8008668 <RCC_Delay+0x1c>
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	bc80      	pop	{r7}
 800867e:	4770      	bx	lr
 8008680:	20000010 	.word	0x20000010
 8008684:	10624dd3 	.word	0x10624dd3

08008688 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e076      	b.n	8008788 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d108      	bne.n	80086b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086aa:	d009      	beq.n	80086c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	61da      	str	r2, [r3, #28]
 80086b2:	e005      	b.n	80086c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d106      	bne.n	80086e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7fc fbd8 	bl	8004e90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2202      	movs	r2, #2
 80086e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008708:	431a      	orrs	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008712:	431a      	orrs	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	f003 0302 	and.w	r3, r3, #2
 800871c:	431a      	orrs	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	431a      	orrs	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008730:	431a      	orrs	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800873a:	431a      	orrs	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a1b      	ldr	r3, [r3, #32]
 8008740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008744:	ea42 0103 	orr.w	r1, r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800874c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	430a      	orrs	r2, r1
 8008756:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	0c1a      	lsrs	r2, r3, #16
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f002 0204 	and.w	r2, r2, #4
 8008766:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	69da      	ldr	r2, [r3, #28]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008776:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b088      	sub	sp, #32
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	603b      	str	r3, [r7, #0]
 800879c:	4613      	mov	r3, r2
 800879e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d101      	bne.n	80087b2 <HAL_SPI_Transmit+0x22>
 80087ae:	2302      	movs	r3, #2
 80087b0:	e126      	b.n	8008a00 <HAL_SPI_Transmit+0x270>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087ba:	f7fd f961 	bl	8005a80 <HAL_GetTick>
 80087be:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80087c0:	88fb      	ldrh	r3, [r7, #6]
 80087c2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d002      	beq.n	80087d6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80087d0:	2302      	movs	r3, #2
 80087d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80087d4:	e10b      	b.n	80089ee <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d002      	beq.n	80087e2 <HAL_SPI_Transmit+0x52>
 80087dc:	88fb      	ldrh	r3, [r7, #6]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d102      	bne.n	80087e8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80087e6:	e102      	b.n	80089ee <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2203      	movs	r2, #3
 80087ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	88fa      	ldrh	r2, [r7, #6]
 8008800:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	88fa      	ldrh	r2, [r7, #6]
 8008806:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800882e:	d10f      	bne.n	8008850 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800883e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800884e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800885a:	2b40      	cmp	r3, #64	; 0x40
 800885c:	d007      	beq.n	800886e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800886c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008876:	d14b      	bne.n	8008910 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d002      	beq.n	8008886 <HAL_SPI_Transmit+0xf6>
 8008880:	8afb      	ldrh	r3, [r7, #22]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d13e      	bne.n	8008904 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888a:	881a      	ldrh	r2, [r3, #0]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008896:	1c9a      	adds	r2, r3, #2
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	3b01      	subs	r3, #1
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80088aa:	e02b      	b.n	8008904 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	f003 0302 	and.w	r3, r3, #2
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d112      	bne.n	80088e0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088be:	881a      	ldrh	r2, [r3, #0]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ca:	1c9a      	adds	r2, r3, #2
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	3b01      	subs	r3, #1
 80088d8:	b29a      	uxth	r2, r3
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80088de:	e011      	b.n	8008904 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088e0:	f7fd f8ce 	bl	8005a80 <HAL_GetTick>
 80088e4:	4602      	mov	r2, r0
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d803      	bhi.n	80088f8 <HAL_SPI_Transmit+0x168>
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f6:	d102      	bne.n	80088fe <HAL_SPI_Transmit+0x16e>
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d102      	bne.n	8008904 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008902:	e074      	b.n	80089ee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008908:	b29b      	uxth	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1ce      	bne.n	80088ac <HAL_SPI_Transmit+0x11c>
 800890e:	e04c      	b.n	80089aa <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <HAL_SPI_Transmit+0x18e>
 8008918:	8afb      	ldrh	r3, [r7, #22]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d140      	bne.n	80089a0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	330c      	adds	r3, #12
 8008928:	7812      	ldrb	r2, [r2, #0]
 800892a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008930:	1c5a      	adds	r2, r3, #1
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800893a:	b29b      	uxth	r3, r3
 800893c:	3b01      	subs	r3, #1
 800893e:	b29a      	uxth	r2, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008944:	e02c      	b.n	80089a0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f003 0302 	and.w	r3, r3, #2
 8008950:	2b02      	cmp	r3, #2
 8008952:	d113      	bne.n	800897c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	330c      	adds	r3, #12
 800895e:	7812      	ldrb	r2, [r2, #0]
 8008960:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008966:	1c5a      	adds	r2, r3, #1
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008970:	b29b      	uxth	r3, r3
 8008972:	3b01      	subs	r3, #1
 8008974:	b29a      	uxth	r2, r3
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	86da      	strh	r2, [r3, #54]	; 0x36
 800897a:	e011      	b.n	80089a0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800897c:	f7fd f880 	bl	8005a80 <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	683a      	ldr	r2, [r7, #0]
 8008988:	429a      	cmp	r2, r3
 800898a:	d803      	bhi.n	8008994 <HAL_SPI_Transmit+0x204>
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008992:	d102      	bne.n	800899a <HAL_SPI_Transmit+0x20a>
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d102      	bne.n	80089a0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800899e:	e026      	b.n	80089ee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1cd      	bne.n	8008946 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089aa:	69ba      	ldr	r2, [r7, #24]
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f000 fbb8 	bl	8009124 <SPI_EndRxTxTransaction>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d002      	beq.n	80089c0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2220      	movs	r2, #32
 80089be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10a      	bne.n	80089de <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089c8:	2300      	movs	r3, #0
 80089ca:	613b      	str	r3, [r7, #16]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	613b      	str	r3, [r7, #16]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	613b      	str	r3, [r7, #16]
 80089dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d002      	beq.n	80089ec <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	77fb      	strb	r3, [r7, #31]
 80089ea:	e000      	b.n	80089ee <HAL_SPI_Transmit+0x25e>
  }

error:
 80089ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80089fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3720      	adds	r7, #32
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af02      	add	r7, sp, #8
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	603b      	str	r3, [r7, #0]
 8008a14:	4613      	mov	r3, r2
 8008a16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a24:	d112      	bne.n	8008a4c <HAL_SPI_Receive+0x44>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10e      	bne.n	8008a4c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2204      	movs	r2, #4
 8008a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008a36:	88fa      	ldrh	r2, [r7, #6]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	68b9      	ldr	r1, [r7, #8]
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f000 f8f1 	bl	8008c2a <HAL_SPI_TransmitReceive>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	e0ea      	b.n	8008c22 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d101      	bne.n	8008a5a <HAL_SPI_Receive+0x52>
 8008a56:	2302      	movs	r3, #2
 8008a58:	e0e3      	b.n	8008c22 <HAL_SPI_Receive+0x21a>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a62:	f7fd f80d 	bl	8005a80 <HAL_GetTick>
 8008a66:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d002      	beq.n	8008a7a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008a74:	2302      	movs	r3, #2
 8008a76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a78:	e0ca      	b.n	8008c10 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d002      	beq.n	8008a86 <HAL_SPI_Receive+0x7e>
 8008a80:	88fb      	ldrh	r3, [r7, #6]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d102      	bne.n	8008a8c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a8a:	e0c1      	b.n	8008c10 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2204      	movs	r2, #4
 8008a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	88fa      	ldrh	r2, [r7, #6]
 8008aa4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	88fa      	ldrh	r2, [r7, #6]
 8008aaa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ad2:	d10f      	bne.n	8008af4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ae2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008af2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008afe:	2b40      	cmp	r3, #64	; 0x40
 8008b00:	d007      	beq.n	8008b12 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b10:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d162      	bne.n	8008be0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008b1a:	e02e      	b.n	8008b7a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d115      	bne.n	8008b56 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f103 020c 	add.w	r2, r3, #12
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b36:	7812      	ldrb	r2, [r2, #0]
 8008b38:	b2d2      	uxtb	r2, r2
 8008b3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b40:	1c5a      	adds	r2, r3, #1
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b54:	e011      	b.n	8008b7a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b56:	f7fc ff93 	bl	8005a80 <HAL_GetTick>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d803      	bhi.n	8008b6e <HAL_SPI_Receive+0x166>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6c:	d102      	bne.n	8008b74 <HAL_SPI_Receive+0x16c>
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d102      	bne.n	8008b7a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008b74:	2303      	movs	r3, #3
 8008b76:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008b78:	e04a      	b.n	8008c10 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1cb      	bne.n	8008b1c <HAL_SPI_Receive+0x114>
 8008b84:	e031      	b.n	8008bea <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f003 0301 	and.w	r3, r3, #1
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d113      	bne.n	8008bbc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68da      	ldr	r2, [r3, #12]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9e:	b292      	uxth	r2, r2
 8008ba0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba6:	1c9a      	adds	r2, r3, #2
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008bba:	e011      	b.n	8008be0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bbc:	f7fc ff60 	bl	8005a80 <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d803      	bhi.n	8008bd4 <HAL_SPI_Receive+0x1cc>
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd2:	d102      	bne.n	8008bda <HAL_SPI_Receive+0x1d2>
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d102      	bne.n	8008be0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008bde:	e017      	b.n	8008c10 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1cd      	bne.n	8008b86 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	6839      	ldr	r1, [r7, #0]
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f000 fa46 	bl	8009080 <SPI_EndRxTransaction>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d002      	beq.n	8008c00 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d002      	beq.n	8008c0e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	75fb      	strb	r3, [r7, #23]
 8008c0c:	e000      	b.n	8008c10 <HAL_SPI_Receive+0x208>
  }

error :
 8008c0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3718      	adds	r7, #24
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b08c      	sub	sp, #48	; 0x30
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	60f8      	str	r0, [r7, #12]
 8008c32:	60b9      	str	r1, [r7, #8]
 8008c34:	607a      	str	r2, [r7, #4]
 8008c36:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d101      	bne.n	8008c50 <HAL_SPI_TransmitReceive+0x26>
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	e18a      	b.n	8008f66 <HAL_SPI_TransmitReceive+0x33c>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c58:	f7fc ff12 	bl	8005a80 <HAL_GetTick>
 8008c5c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008c6e:	887b      	ldrh	r3, [r7, #2]
 8008c70:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d00f      	beq.n	8008c9a <HAL_SPI_TransmitReceive+0x70>
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c80:	d107      	bne.n	8008c92 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d103      	bne.n	8008c92 <HAL_SPI_TransmitReceive+0x68>
 8008c8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c8e:	2b04      	cmp	r3, #4
 8008c90:	d003      	beq.n	8008c9a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008c92:	2302      	movs	r3, #2
 8008c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008c98:	e15b      	b.n	8008f52 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d005      	beq.n	8008cac <HAL_SPI_TransmitReceive+0x82>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d002      	beq.n	8008cac <HAL_SPI_TransmitReceive+0x82>
 8008ca6:	887b      	ldrh	r3, [r7, #2]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d103      	bne.n	8008cb4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008cb2:	e14e      	b.n	8008f52 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	d003      	beq.n	8008cc8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2205      	movs	r2, #5
 8008cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	887a      	ldrh	r2, [r7, #2]
 8008cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	887a      	ldrh	r2, [r7, #2]
 8008cde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	887a      	ldrh	r2, [r7, #2]
 8008cea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	887a      	ldrh	r2, [r7, #2]
 8008cf0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d08:	2b40      	cmp	r3, #64	; 0x40
 8008d0a:	d007      	beq.n	8008d1c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d24:	d178      	bne.n	8008e18 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d002      	beq.n	8008d34 <HAL_SPI_TransmitReceive+0x10a>
 8008d2e:	8b7b      	ldrh	r3, [r7, #26]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d166      	bne.n	8008e02 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d38:	881a      	ldrh	r2, [r3, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d44:	1c9a      	adds	r2, r3, #2
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	3b01      	subs	r3, #1
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d58:	e053      	b.n	8008e02 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f003 0302 	and.w	r3, r3, #2
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d11b      	bne.n	8008da0 <HAL_SPI_TransmitReceive+0x176>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d016      	beq.n	8008da0 <HAL_SPI_TransmitReceive+0x176>
 8008d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d113      	bne.n	8008da0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7c:	881a      	ldrh	r2, [r3, #0]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d88:	1c9a      	adds	r2, r3, #2
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	3b01      	subs	r3, #1
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	f003 0301 	and.w	r3, r3, #1
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d119      	bne.n	8008de2 <HAL_SPI_TransmitReceive+0x1b8>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d014      	beq.n	8008de2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68da      	ldr	r2, [r3, #12]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc2:	b292      	uxth	r2, r2
 8008dc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dca:	1c9a      	adds	r2, r3, #2
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008dde:	2301      	movs	r3, #1
 8008de0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008de2:	f7fc fe4d 	bl	8005a80 <HAL_GetTick>
 8008de6:	4602      	mov	r2, r0
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d807      	bhi.n	8008e02 <HAL_SPI_TransmitReceive+0x1d8>
 8008df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df8:	d003      	beq.n	8008e02 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008e00:	e0a7      	b.n	8008f52 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1a6      	bne.n	8008d5a <HAL_SPI_TransmitReceive+0x130>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1a1      	bne.n	8008d5a <HAL_SPI_TransmitReceive+0x130>
 8008e16:	e07c      	b.n	8008f12 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d002      	beq.n	8008e26 <HAL_SPI_TransmitReceive+0x1fc>
 8008e20:	8b7b      	ldrh	r3, [r7, #26]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d16b      	bne.n	8008efe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	330c      	adds	r3, #12
 8008e30:	7812      	ldrb	r2, [r2, #0]
 8008e32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e38:	1c5a      	adds	r2, r3, #1
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	3b01      	subs	r3, #1
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e4c:	e057      	b.n	8008efe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	f003 0302 	and.w	r3, r3, #2
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d11c      	bne.n	8008e96 <HAL_SPI_TransmitReceive+0x26c>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d017      	beq.n	8008e96 <HAL_SPI_TransmitReceive+0x26c>
 8008e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d114      	bne.n	8008e96 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	330c      	adds	r3, #12
 8008e76:	7812      	ldrb	r2, [r2, #0]
 8008e78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e7e:	1c5a      	adds	r2, r3, #1
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e92:	2300      	movs	r3, #0
 8008e94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	f003 0301 	and.w	r3, r3, #1
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d119      	bne.n	8008ed8 <HAL_SPI_TransmitReceive+0x2ae>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d014      	beq.n	8008ed8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68da      	ldr	r2, [r3, #12]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb8:	b2d2      	uxtb	r2, r2
 8008eba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ed8:	f7fc fdd2 	bl	8005a80 <HAL_GetTick>
 8008edc:	4602      	mov	r2, r0
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d803      	bhi.n	8008ef0 <HAL_SPI_TransmitReceive+0x2c6>
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eee:	d102      	bne.n	8008ef6 <HAL_SPI_TransmitReceive+0x2cc>
 8008ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d103      	bne.n	8008efe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008efc:	e029      	b.n	8008f52 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1a2      	bne.n	8008e4e <HAL_SPI_TransmitReceive+0x224>
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d19d      	bne.n	8008e4e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f000 f904 	bl	8009124 <SPI_EndRxTxTransaction>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d006      	beq.n	8008f30 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2220      	movs	r2, #32
 8008f2c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008f2e:	e010      	b.n	8008f52 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10b      	bne.n	8008f50 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f38:	2300      	movs	r3, #0
 8008f3a:	617b      	str	r3, [r7, #20]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	617b      	str	r3, [r7, #20]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	617b      	str	r3, [r7, #20]
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	e000      	b.n	8008f52 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008f50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2201      	movs	r2, #1
 8008f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3730      	adds	r7, #48	; 0x30
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
	...

08008f70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b088      	sub	sp, #32
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	603b      	str	r3, [r7, #0]
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008f80:	f7fc fd7e 	bl	8005a80 <HAL_GetTick>
 8008f84:	4602      	mov	r2, r0
 8008f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f88:	1a9b      	subs	r3, r3, r2
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008f90:	f7fc fd76 	bl	8005a80 <HAL_GetTick>
 8008f94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008f96:	4b39      	ldr	r3, [pc, #228]	; (800907c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	015b      	lsls	r3, r3, #5
 8008f9c:	0d1b      	lsrs	r3, r3, #20
 8008f9e:	69fa      	ldr	r2, [r7, #28]
 8008fa0:	fb02 f303 	mul.w	r3, r2, r3
 8008fa4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008fa6:	e054      	b.n	8009052 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fae:	d050      	beq.n	8009052 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008fb0:	f7fc fd66 	bl	8005a80 <HAL_GetTick>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	69fa      	ldr	r2, [r7, #28]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d902      	bls.n	8008fc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d13d      	bne.n	8009042 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008fd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fde:	d111      	bne.n	8009004 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fe8:	d004      	beq.n	8008ff4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ff2:	d107      	bne.n	8009004 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009002:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800900c:	d10f      	bne.n	800902e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800901c:	601a      	str	r2, [r3, #0]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800902c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800903e:	2303      	movs	r3, #3
 8009040:	e017      	b.n	8009072 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d101      	bne.n	800904c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009048:	2300      	movs	r3, #0
 800904a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	3b01      	subs	r3, #1
 8009050:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	689a      	ldr	r2, [r3, #8]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	4013      	ands	r3, r2
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	429a      	cmp	r2, r3
 8009060:	bf0c      	ite	eq
 8009062:	2301      	moveq	r3, #1
 8009064:	2300      	movne	r3, #0
 8009066:	b2db      	uxtb	r3, r3
 8009068:	461a      	mov	r2, r3
 800906a:	79fb      	ldrb	r3, [r7, #7]
 800906c:	429a      	cmp	r2, r3
 800906e:	d19b      	bne.n	8008fa8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3720      	adds	r7, #32
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	20000010 	.word	0x20000010

08009080 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af02      	add	r7, sp, #8
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009094:	d111      	bne.n	80090ba <SPI_EndRxTransaction+0x3a>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800909e:	d004      	beq.n	80090aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090a8:	d107      	bne.n	80090ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090b8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090c2:	d117      	bne.n	80090f4 <SPI_EndRxTransaction+0x74>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090cc:	d112      	bne.n	80090f4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	2200      	movs	r2, #0
 80090d6:	2101      	movs	r1, #1
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f7ff ff49 	bl	8008f70 <SPI_WaitFlagStateUntilTimeout>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d01a      	beq.n	800911a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e8:	f043 0220 	orr.w	r2, r3, #32
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e013      	b.n	800911c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	2200      	movs	r2, #0
 80090fc:	2180      	movs	r1, #128	; 0x80
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f7ff ff36 	bl	8008f70 <SPI_WaitFlagStateUntilTimeout>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d007      	beq.n	800911a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800910e:	f043 0220 	orr.w	r2, r3, #32
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009116:	2303      	movs	r3, #3
 8009118:	e000      	b.n	800911c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b086      	sub	sp, #24
 8009128:	af02      	add	r7, sp, #8
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2200      	movs	r2, #0
 8009138:	2180      	movs	r1, #128	; 0x80
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f7ff ff18 	bl	8008f70 <SPI_WaitFlagStateUntilTimeout>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d007      	beq.n	8009156 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800914a:	f043 0220 	orr.w	r2, r3, #32
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8009152:	2303      	movs	r3, #3
 8009154:	e000      	b.n	8009158 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d101      	bne.n	8009172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e041      	b.n	80091f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009178:	b2db      	uxtb	r3, r3
 800917a:	2b00      	cmp	r3, #0
 800917c:	d106      	bne.n	800918c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7fc f996 	bl	80054b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2202      	movs	r2, #2
 8009190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	3304      	adds	r3, #4
 800919c:	4619      	mov	r1, r3
 800919e:	4610      	mov	r0, r2
 80091a0:	f000 fe98 	bl	8009ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3708      	adds	r7, #8
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
	...

08009200 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b01      	cmp	r3, #1
 8009212:	d001      	beq.n	8009218 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e032      	b.n	800927e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2202      	movs	r2, #2
 800921c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a18      	ldr	r2, [pc, #96]	; (8009288 <HAL_TIM_Base_Start+0x88>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d00e      	beq.n	8009248 <HAL_TIM_Base_Start+0x48>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009232:	d009      	beq.n	8009248 <HAL_TIM_Base_Start+0x48>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a14      	ldr	r2, [pc, #80]	; (800928c <HAL_TIM_Base_Start+0x8c>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d004      	beq.n	8009248 <HAL_TIM_Base_Start+0x48>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a13      	ldr	r2, [pc, #76]	; (8009290 <HAL_TIM_Base_Start+0x90>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d111      	bne.n	800926c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	f003 0307 	and.w	r3, r3, #7
 8009252:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2b06      	cmp	r3, #6
 8009258:	d010      	beq.n	800927c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f042 0201 	orr.w	r2, r2, #1
 8009268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800926a:	e007      	b.n	800927c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f042 0201 	orr.w	r2, r2, #1
 800927a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3714      	adds	r7, #20
 8009282:	46bd      	mov	sp, r7
 8009284:	bc80      	pop	{r7}
 8009286:	4770      	bx	lr
 8009288:	40012c00 	.word	0x40012c00
 800928c:	40000400 	.word	0x40000400
 8009290:	40000800 	.word	0x40000800

08009294 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d001      	beq.n	80092ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e03a      	b.n	8009322 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2202      	movs	r2, #2
 80092b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68da      	ldr	r2, [r3, #12]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f042 0201 	orr.w	r2, r2, #1
 80092c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a18      	ldr	r2, [pc, #96]	; (800932c <HAL_TIM_Base_Start_IT+0x98>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d00e      	beq.n	80092ec <HAL_TIM_Base_Start_IT+0x58>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092d6:	d009      	beq.n	80092ec <HAL_TIM_Base_Start_IT+0x58>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a14      	ldr	r2, [pc, #80]	; (8009330 <HAL_TIM_Base_Start_IT+0x9c>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d004      	beq.n	80092ec <HAL_TIM_Base_Start_IT+0x58>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a13      	ldr	r2, [pc, #76]	; (8009334 <HAL_TIM_Base_Start_IT+0xa0>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d111      	bne.n	8009310 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	f003 0307 	and.w	r3, r3, #7
 80092f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2b06      	cmp	r3, #6
 80092fc:	d010      	beq.n	8009320 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f042 0201 	orr.w	r2, r2, #1
 800930c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800930e:	e007      	b.n	8009320 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f042 0201 	orr.w	r2, r2, #1
 800931e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	bc80      	pop	{r7}
 800932a:	4770      	bx	lr
 800932c:	40012c00 	.word	0x40012c00
 8009330:	40000400 	.word	0x40000400
 8009334:	40000800 	.word	0x40000800

08009338 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d101      	bne.n	800934a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e041      	b.n	80093ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d106      	bne.n	8009364 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7fc f88c 	bl	800547c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2202      	movs	r2, #2
 8009368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	3304      	adds	r3, #4
 8009374:	4619      	mov	r1, r3
 8009376:	4610      	mov	r0, r2
 8009378:	f000 fdac 	bl	8009ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3708      	adds	r7, #8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
	...

080093d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d109      	bne.n	80093fc <HAL_TIM_PWM_Start+0x24>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	bf14      	ite	ne
 80093f4:	2301      	movne	r3, #1
 80093f6:	2300      	moveq	r3, #0
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	e022      	b.n	8009442 <HAL_TIM_PWM_Start+0x6a>
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	2b04      	cmp	r3, #4
 8009400:	d109      	bne.n	8009416 <HAL_TIM_PWM_Start+0x3e>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009408:	b2db      	uxtb	r3, r3
 800940a:	2b01      	cmp	r3, #1
 800940c:	bf14      	ite	ne
 800940e:	2301      	movne	r3, #1
 8009410:	2300      	moveq	r3, #0
 8009412:	b2db      	uxtb	r3, r3
 8009414:	e015      	b.n	8009442 <HAL_TIM_PWM_Start+0x6a>
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2b08      	cmp	r3, #8
 800941a:	d109      	bne.n	8009430 <HAL_TIM_PWM_Start+0x58>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009422:	b2db      	uxtb	r3, r3
 8009424:	2b01      	cmp	r3, #1
 8009426:	bf14      	ite	ne
 8009428:	2301      	movne	r3, #1
 800942a:	2300      	moveq	r3, #0
 800942c:	b2db      	uxtb	r3, r3
 800942e:	e008      	b.n	8009442 <HAL_TIM_PWM_Start+0x6a>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b01      	cmp	r3, #1
 800943a:	bf14      	ite	ne
 800943c:	2301      	movne	r3, #1
 800943e:	2300      	moveq	r3, #0
 8009440:	b2db      	uxtb	r3, r3
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e05e      	b.n	8009508 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d104      	bne.n	800945a <HAL_TIM_PWM_Start+0x82>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2202      	movs	r2, #2
 8009454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009458:	e013      	b.n	8009482 <HAL_TIM_PWM_Start+0xaa>
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	2b04      	cmp	r3, #4
 800945e:	d104      	bne.n	800946a <HAL_TIM_PWM_Start+0x92>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2202      	movs	r2, #2
 8009464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009468:	e00b      	b.n	8009482 <HAL_TIM_PWM_Start+0xaa>
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2b08      	cmp	r3, #8
 800946e:	d104      	bne.n	800947a <HAL_TIM_PWM_Start+0xa2>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2202      	movs	r2, #2
 8009474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009478:	e003      	b.n	8009482 <HAL_TIM_PWM_Start+0xaa>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2202      	movs	r2, #2
 800947e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2201      	movs	r2, #1
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	4618      	mov	r0, r3
 800948c:	f001 f8af 	bl	800a5ee <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a1e      	ldr	r2, [pc, #120]	; (8009510 <HAL_TIM_PWM_Start+0x138>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d107      	bne.n	80094aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a18      	ldr	r2, [pc, #96]	; (8009510 <HAL_TIM_PWM_Start+0x138>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d00e      	beq.n	80094d2 <HAL_TIM_PWM_Start+0xfa>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094bc:	d009      	beq.n	80094d2 <HAL_TIM_PWM_Start+0xfa>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a14      	ldr	r2, [pc, #80]	; (8009514 <HAL_TIM_PWM_Start+0x13c>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d004      	beq.n	80094d2 <HAL_TIM_PWM_Start+0xfa>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a12      	ldr	r2, [pc, #72]	; (8009518 <HAL_TIM_PWM_Start+0x140>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d111      	bne.n	80094f6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	f003 0307 	and.w	r3, r3, #7
 80094dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2b06      	cmp	r3, #6
 80094e2:	d010      	beq.n	8009506 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f042 0201 	orr.w	r2, r2, #1
 80094f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094f4:	e007      	b.n	8009506 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f042 0201 	orr.w	r2, r2, #1
 8009504:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	40012c00 	.word	0x40012c00
 8009514:	40000400 	.word	0x40000400
 8009518:	40000800 	.word	0x40000800

0800951c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e041      	b.n	80095b2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b00      	cmp	r3, #0
 8009538:	d106      	bne.n	8009548 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f839 	bl	80095ba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2202      	movs	r2, #2
 800954c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	3304      	adds	r3, #4
 8009558:	4619      	mov	r1, r3
 800955a:	4610      	mov	r0, r2
 800955c:	f000 fcba 	bl	8009ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80095ba:	b480      	push	{r7}
 80095bc:	b083      	sub	sp, #12
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80095c2:	bf00      	nop
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bc80      	pop	{r7}
 80095ca:	4770      	bx	lr

080095cc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d104      	bne.n	80095e6 <HAL_TIM_IC_Start_IT+0x1a>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	e013      	b.n	800960e <HAL_TIM_IC_Start_IT+0x42>
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	2b04      	cmp	r3, #4
 80095ea:	d104      	bne.n	80095f6 <HAL_TIM_IC_Start_IT+0x2a>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	e00b      	b.n	800960e <HAL_TIM_IC_Start_IT+0x42>
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	2b08      	cmp	r3, #8
 80095fa:	d104      	bne.n	8009606 <HAL_TIM_IC_Start_IT+0x3a>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009602:	b2db      	uxtb	r3, r3
 8009604:	e003      	b.n	800960e <HAL_TIM_IC_Start_IT+0x42>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800960c:	b2db      	uxtb	r3, r3
 800960e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d104      	bne.n	8009620 <HAL_TIM_IC_Start_IT+0x54>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800961c:	b2db      	uxtb	r3, r3
 800961e:	e013      	b.n	8009648 <HAL_TIM_IC_Start_IT+0x7c>
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	2b04      	cmp	r3, #4
 8009624:	d104      	bne.n	8009630 <HAL_TIM_IC_Start_IT+0x64>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800962c:	b2db      	uxtb	r3, r3
 800962e:	e00b      	b.n	8009648 <HAL_TIM_IC_Start_IT+0x7c>
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	2b08      	cmp	r3, #8
 8009634:	d104      	bne.n	8009640 <HAL_TIM_IC_Start_IT+0x74>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800963c:	b2db      	uxtb	r3, r3
 800963e:	e003      	b.n	8009648 <HAL_TIM_IC_Start_IT+0x7c>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009646:	b2db      	uxtb	r3, r3
 8009648:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800964a:	7bfb      	ldrb	r3, [r7, #15]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d102      	bne.n	8009656 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009650:	7bbb      	ldrb	r3, [r7, #14]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d001      	beq.n	800965a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e0b3      	b.n	80097c2 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d104      	bne.n	800966a <HAL_TIM_IC_Start_IT+0x9e>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2202      	movs	r2, #2
 8009664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009668:	e013      	b.n	8009692 <HAL_TIM_IC_Start_IT+0xc6>
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	2b04      	cmp	r3, #4
 800966e:	d104      	bne.n	800967a <HAL_TIM_IC_Start_IT+0xae>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2202      	movs	r2, #2
 8009674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009678:	e00b      	b.n	8009692 <HAL_TIM_IC_Start_IT+0xc6>
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	2b08      	cmp	r3, #8
 800967e:	d104      	bne.n	800968a <HAL_TIM_IC_Start_IT+0xbe>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2202      	movs	r2, #2
 8009684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009688:	e003      	b.n	8009692 <HAL_TIM_IC_Start_IT+0xc6>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2202      	movs	r2, #2
 800968e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d104      	bne.n	80096a2 <HAL_TIM_IC_Start_IT+0xd6>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2202      	movs	r2, #2
 800969c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096a0:	e013      	b.n	80096ca <HAL_TIM_IC_Start_IT+0xfe>
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2b04      	cmp	r3, #4
 80096a6:	d104      	bne.n	80096b2 <HAL_TIM_IC_Start_IT+0xe6>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2202      	movs	r2, #2
 80096ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096b0:	e00b      	b.n	80096ca <HAL_TIM_IC_Start_IT+0xfe>
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	2b08      	cmp	r3, #8
 80096b6:	d104      	bne.n	80096c2 <HAL_TIM_IC_Start_IT+0xf6>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2202      	movs	r2, #2
 80096bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096c0:	e003      	b.n	80096ca <HAL_TIM_IC_Start_IT+0xfe>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2202      	movs	r2, #2
 80096c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2b0c      	cmp	r3, #12
 80096ce:	d841      	bhi.n	8009754 <HAL_TIM_IC_Start_IT+0x188>
 80096d0:	a201      	add	r2, pc, #4	; (adr r2, 80096d8 <HAL_TIM_IC_Start_IT+0x10c>)
 80096d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d6:	bf00      	nop
 80096d8:	0800970d 	.word	0x0800970d
 80096dc:	08009755 	.word	0x08009755
 80096e0:	08009755 	.word	0x08009755
 80096e4:	08009755 	.word	0x08009755
 80096e8:	0800971f 	.word	0x0800971f
 80096ec:	08009755 	.word	0x08009755
 80096f0:	08009755 	.word	0x08009755
 80096f4:	08009755 	.word	0x08009755
 80096f8:	08009731 	.word	0x08009731
 80096fc:	08009755 	.word	0x08009755
 8009700:	08009755 	.word	0x08009755
 8009704:	08009755 	.word	0x08009755
 8009708:	08009743 	.word	0x08009743
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68da      	ldr	r2, [r3, #12]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f042 0202 	orr.w	r2, r2, #2
 800971a:	60da      	str	r2, [r3, #12]
      break;
 800971c:	e01b      	b.n	8009756 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68da      	ldr	r2, [r3, #12]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f042 0204 	orr.w	r2, r2, #4
 800972c:	60da      	str	r2, [r3, #12]
      break;
 800972e:	e012      	b.n	8009756 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	68da      	ldr	r2, [r3, #12]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f042 0208 	orr.w	r2, r2, #8
 800973e:	60da      	str	r2, [r3, #12]
      break;
 8009740:	e009      	b.n	8009756 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68da      	ldr	r2, [r3, #12]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f042 0210 	orr.w	r2, r2, #16
 8009750:	60da      	str	r2, [r3, #12]
      break;
 8009752:	e000      	b.n	8009756 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8009754:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2201      	movs	r2, #1
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	4618      	mov	r0, r3
 8009760:	f000 ff45 	bl	800a5ee <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a18      	ldr	r2, [pc, #96]	; (80097cc <HAL_TIM_IC_Start_IT+0x200>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d00e      	beq.n	800978c <HAL_TIM_IC_Start_IT+0x1c0>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009776:	d009      	beq.n	800978c <HAL_TIM_IC_Start_IT+0x1c0>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a14      	ldr	r2, [pc, #80]	; (80097d0 <HAL_TIM_IC_Start_IT+0x204>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d004      	beq.n	800978c <HAL_TIM_IC_Start_IT+0x1c0>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a13      	ldr	r2, [pc, #76]	; (80097d4 <HAL_TIM_IC_Start_IT+0x208>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d111      	bne.n	80097b0 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f003 0307 	and.w	r3, r3, #7
 8009796:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	2b06      	cmp	r3, #6
 800979c:	d010      	beq.n	80097c0 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f042 0201 	orr.w	r2, r2, #1
 80097ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097ae:	e007      	b.n	80097c0 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f042 0201 	orr.w	r2, r2, #1
 80097be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	40012c00 	.word	0x40012c00
 80097d0:	40000400 	.word	0x40000400
 80097d4:	40000800 	.word	0x40000800

080097d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	f003 0302 	and.w	r3, r3, #2
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d122      	bne.n	8009834 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	f003 0302 	and.w	r3, r3, #2
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d11b      	bne.n	8009834 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f06f 0202 	mvn.w	r2, #2
 8009804:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2201      	movs	r2, #1
 800980a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	699b      	ldr	r3, [r3, #24]
 8009812:	f003 0303 	and.w	r3, r3, #3
 8009816:	2b00      	cmp	r3, #0
 8009818:	d003      	beq.n	8009822 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f7fa fbbc 	bl	8003f98 <HAL_TIM_IC_CaptureCallback>
 8009820:	e005      	b.n	800982e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fb3a 	bl	8009e9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 fb40 	bl	8009eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	f003 0304 	and.w	r3, r3, #4
 800983e:	2b04      	cmp	r3, #4
 8009840:	d122      	bne.n	8009888 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	f003 0304 	and.w	r3, r3, #4
 800984c:	2b04      	cmp	r3, #4
 800984e:	d11b      	bne.n	8009888 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f06f 0204 	mvn.w	r2, #4
 8009858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2202      	movs	r2, #2
 800985e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800986a:	2b00      	cmp	r3, #0
 800986c:	d003      	beq.n	8009876 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7fa fb92 	bl	8003f98 <HAL_TIM_IC_CaptureCallback>
 8009874:	e005      	b.n	8009882 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 fb10 	bl	8009e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 fb16 	bl	8009eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	f003 0308 	and.w	r3, r3, #8
 8009892:	2b08      	cmp	r3, #8
 8009894:	d122      	bne.n	80098dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	f003 0308 	and.w	r3, r3, #8
 80098a0:	2b08      	cmp	r3, #8
 80098a2:	d11b      	bne.n	80098dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f06f 0208 	mvn.w	r2, #8
 80098ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2204      	movs	r2, #4
 80098b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	69db      	ldr	r3, [r3, #28]
 80098ba:	f003 0303 	and.w	r3, r3, #3
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d003      	beq.n	80098ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f7fa fb68 	bl	8003f98 <HAL_TIM_IC_CaptureCallback>
 80098c8:	e005      	b.n	80098d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fae6 	bl	8009e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 faec 	bl	8009eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	f003 0310 	and.w	r3, r3, #16
 80098e6:	2b10      	cmp	r3, #16
 80098e8:	d122      	bne.n	8009930 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	f003 0310 	and.w	r3, r3, #16
 80098f4:	2b10      	cmp	r3, #16
 80098f6:	d11b      	bne.n	8009930 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f06f 0210 	mvn.w	r2, #16
 8009900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2208      	movs	r2, #8
 8009906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	69db      	ldr	r3, [r3, #28]
 800990e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009912:	2b00      	cmp	r3, #0
 8009914:	d003      	beq.n	800991e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f7fa fb3e 	bl	8003f98 <HAL_TIM_IC_CaptureCallback>
 800991c:	e005      	b.n	800992a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fabc 	bl	8009e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fac2 	bl	8009eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	f003 0301 	and.w	r3, r3, #1
 800993a:	2b01      	cmp	r3, #1
 800993c:	d10e      	bne.n	800995c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	f003 0301 	and.w	r3, r3, #1
 8009948:	2b01      	cmp	r3, #1
 800994a:	d107      	bne.n	800995c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f06f 0201 	mvn.w	r2, #1
 8009954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7f9 fd9a 	bl	8003490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009966:	2b80      	cmp	r3, #128	; 0x80
 8009968:	d10e      	bne.n	8009988 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009974:	2b80      	cmp	r3, #128	; 0x80
 8009976:	d107      	bne.n	8009988 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 ffae 	bl	800a8e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009992:	2b40      	cmp	r3, #64	; 0x40
 8009994:	d10e      	bne.n	80099b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a0:	2b40      	cmp	r3, #64	; 0x40
 80099a2:	d107      	bne.n	80099b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80099ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fa86 	bl	8009ec0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	f003 0320 	and.w	r3, r3, #32
 80099be:	2b20      	cmp	r3, #32
 80099c0:	d10e      	bne.n	80099e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	f003 0320 	and.w	r3, r3, #32
 80099cc:	2b20      	cmp	r3, #32
 80099ce:	d107      	bne.n	80099e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f06f 0220 	mvn.w	r2, #32
 80099d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 ff79 	bl	800a8d2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099e0:	bf00      	nop
 80099e2:	3708      	adds	r7, #8
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d101      	bne.n	8009a02 <HAL_TIM_IC_ConfigChannel+0x1a>
 80099fe:	2302      	movs	r3, #2
 8009a00:	e082      	b.n	8009b08 <HAL_TIM_IC_ConfigChannel+0x120>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d11b      	bne.n	8009a48 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6818      	ldr	r0, [r3, #0]
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	6819      	ldr	r1, [r3, #0]
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	f000 fc42 	bl	800a2a8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	699a      	ldr	r2, [r3, #24]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f022 020c 	bic.w	r2, r2, #12
 8009a32:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	6999      	ldr	r1, [r3, #24]
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	689a      	ldr	r2, [r3, #8]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	430a      	orrs	r2, r1
 8009a44:	619a      	str	r2, [r3, #24]
 8009a46:	e05a      	b.n	8009afe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2b04      	cmp	r3, #4
 8009a4c:	d11c      	bne.n	8009a88 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6818      	ldr	r0, [r3, #0]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	6819      	ldr	r1, [r3, #0]
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	685a      	ldr	r2, [r3, #4]
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	f000 fcab 	bl	800a3b8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	699a      	ldr	r2, [r3, #24]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009a70:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6999      	ldr	r1, [r3, #24]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	021a      	lsls	r2, r3, #8
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	430a      	orrs	r2, r1
 8009a84:	619a      	str	r2, [r3, #24]
 8009a86:	e03a      	b.n	8009afe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2b08      	cmp	r3, #8
 8009a8c:	d11b      	bne.n	8009ac6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6818      	ldr	r0, [r3, #0]
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	6819      	ldr	r1, [r3, #0]
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	685a      	ldr	r2, [r3, #4]
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	f000 fcf6 	bl	800a48e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	69da      	ldr	r2, [r3, #28]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f022 020c 	bic.w	r2, r2, #12
 8009ab0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	69d9      	ldr	r1, [r3, #28]
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	689a      	ldr	r2, [r3, #8]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	430a      	orrs	r2, r1
 8009ac2:	61da      	str	r2, [r3, #28]
 8009ac4:	e01b      	b.n	8009afe <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6818      	ldr	r0, [r3, #0]
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	6819      	ldr	r1, [r3, #0]
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	685a      	ldr	r2, [r3, #4]
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	f000 fd15 	bl	800a504 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	69da      	ldr	r2, [r3, #28]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009ae8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	69d9      	ldr	r1, [r3, #28]
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	021a      	lsls	r2, r3, #8
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	430a      	orrs	r2, r1
 8009afc:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d101      	bne.n	8009b2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009b26:	2302      	movs	r3, #2
 8009b28:	e0ac      	b.n	8009c84 <HAL_TIM_PWM_ConfigChannel+0x174>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2b0c      	cmp	r3, #12
 8009b36:	f200 809f 	bhi.w	8009c78 <HAL_TIM_PWM_ConfigChannel+0x168>
 8009b3a:	a201      	add	r2, pc, #4	; (adr r2, 8009b40 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b40:	08009b75 	.word	0x08009b75
 8009b44:	08009c79 	.word	0x08009c79
 8009b48:	08009c79 	.word	0x08009c79
 8009b4c:	08009c79 	.word	0x08009c79
 8009b50:	08009bb5 	.word	0x08009bb5
 8009b54:	08009c79 	.word	0x08009c79
 8009b58:	08009c79 	.word	0x08009c79
 8009b5c:	08009c79 	.word	0x08009c79
 8009b60:	08009bf7 	.word	0x08009bf7
 8009b64:	08009c79 	.word	0x08009c79
 8009b68:	08009c79 	.word	0x08009c79
 8009b6c:	08009c79 	.word	0x08009c79
 8009b70:	08009c37 	.word	0x08009c37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68b9      	ldr	r1, [r7, #8]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f000 fa0c 	bl	8009f98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	699a      	ldr	r2, [r3, #24]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f042 0208 	orr.w	r2, r2, #8
 8009b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	699a      	ldr	r2, [r3, #24]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f022 0204 	bic.w	r2, r2, #4
 8009b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6999      	ldr	r1, [r3, #24]
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	691a      	ldr	r2, [r3, #16]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	430a      	orrs	r2, r1
 8009bb0:	619a      	str	r2, [r3, #24]
      break;
 8009bb2:	e062      	b.n	8009c7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	68b9      	ldr	r1, [r7, #8]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f000 fa52 	bl	800a064 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	699a      	ldr	r2, [r3, #24]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	699a      	ldr	r2, [r3, #24]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	6999      	ldr	r1, [r3, #24]
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	021a      	lsls	r2, r3, #8
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	430a      	orrs	r2, r1
 8009bf2:	619a      	str	r2, [r3, #24]
      break;
 8009bf4:	e041      	b.n	8009c7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68b9      	ldr	r1, [r7, #8]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f000 fa9b 	bl	800a138 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	69da      	ldr	r2, [r3, #28]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f042 0208 	orr.w	r2, r2, #8
 8009c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	69da      	ldr	r2, [r3, #28]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f022 0204 	bic.w	r2, r2, #4
 8009c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	69d9      	ldr	r1, [r3, #28]
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	691a      	ldr	r2, [r3, #16]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	430a      	orrs	r2, r1
 8009c32:	61da      	str	r2, [r3, #28]
      break;
 8009c34:	e021      	b.n	8009c7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68b9      	ldr	r1, [r7, #8]
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f000 fae5 	bl	800a20c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	69da      	ldr	r2, [r3, #28]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	69da      	ldr	r2, [r3, #28]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	69d9      	ldr	r1, [r3, #28]
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	021a      	lsls	r2, r3, #8
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	430a      	orrs	r2, r1
 8009c74:	61da      	str	r2, [r3, #28]
      break;
 8009c76:	e000      	b.n	8009c7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8009c78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d101      	bne.n	8009ca4 <HAL_TIM_ConfigClockSource+0x18>
 8009ca0:	2302      	movs	r3, #2
 8009ca2:	e0b3      	b.n	8009e0c <HAL_TIM_ConfigClockSource+0x180>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2202      	movs	r2, #2
 8009cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009cc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009cca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cdc:	d03e      	beq.n	8009d5c <HAL_TIM_ConfigClockSource+0xd0>
 8009cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ce2:	f200 8087 	bhi.w	8009df4 <HAL_TIM_ConfigClockSource+0x168>
 8009ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cea:	f000 8085 	beq.w	8009df8 <HAL_TIM_ConfigClockSource+0x16c>
 8009cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cf2:	d87f      	bhi.n	8009df4 <HAL_TIM_ConfigClockSource+0x168>
 8009cf4:	2b70      	cmp	r3, #112	; 0x70
 8009cf6:	d01a      	beq.n	8009d2e <HAL_TIM_ConfigClockSource+0xa2>
 8009cf8:	2b70      	cmp	r3, #112	; 0x70
 8009cfa:	d87b      	bhi.n	8009df4 <HAL_TIM_ConfigClockSource+0x168>
 8009cfc:	2b60      	cmp	r3, #96	; 0x60
 8009cfe:	d050      	beq.n	8009da2 <HAL_TIM_ConfigClockSource+0x116>
 8009d00:	2b60      	cmp	r3, #96	; 0x60
 8009d02:	d877      	bhi.n	8009df4 <HAL_TIM_ConfigClockSource+0x168>
 8009d04:	2b50      	cmp	r3, #80	; 0x50
 8009d06:	d03c      	beq.n	8009d82 <HAL_TIM_ConfigClockSource+0xf6>
 8009d08:	2b50      	cmp	r3, #80	; 0x50
 8009d0a:	d873      	bhi.n	8009df4 <HAL_TIM_ConfigClockSource+0x168>
 8009d0c:	2b40      	cmp	r3, #64	; 0x40
 8009d0e:	d058      	beq.n	8009dc2 <HAL_TIM_ConfigClockSource+0x136>
 8009d10:	2b40      	cmp	r3, #64	; 0x40
 8009d12:	d86f      	bhi.n	8009df4 <HAL_TIM_ConfigClockSource+0x168>
 8009d14:	2b30      	cmp	r3, #48	; 0x30
 8009d16:	d064      	beq.n	8009de2 <HAL_TIM_ConfigClockSource+0x156>
 8009d18:	2b30      	cmp	r3, #48	; 0x30
 8009d1a:	d86b      	bhi.n	8009df4 <HAL_TIM_ConfigClockSource+0x168>
 8009d1c:	2b20      	cmp	r3, #32
 8009d1e:	d060      	beq.n	8009de2 <HAL_TIM_ConfigClockSource+0x156>
 8009d20:	2b20      	cmp	r3, #32
 8009d22:	d867      	bhi.n	8009df4 <HAL_TIM_ConfigClockSource+0x168>
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d05c      	beq.n	8009de2 <HAL_TIM_ConfigClockSource+0x156>
 8009d28:	2b10      	cmp	r3, #16
 8009d2a:	d05a      	beq.n	8009de2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009d2c:	e062      	b.n	8009df4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6818      	ldr	r0, [r3, #0]
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	6899      	ldr	r1, [r3, #8]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	685a      	ldr	r2, [r3, #4]
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	f000 fc37 	bl	800a5b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009d50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68fa      	ldr	r2, [r7, #12]
 8009d58:	609a      	str	r2, [r3, #8]
      break;
 8009d5a:	e04e      	b.n	8009dfa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6818      	ldr	r0, [r3, #0]
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	6899      	ldr	r1, [r3, #8]
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	f000 fc20 	bl	800a5b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	689a      	ldr	r2, [r3, #8]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d7e:	609a      	str	r2, [r3, #8]
      break;
 8009d80:	e03b      	b.n	8009dfa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6818      	ldr	r0, [r3, #0]
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	6859      	ldr	r1, [r3, #4]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	f000 fae4 	bl	800a35c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2150      	movs	r1, #80	; 0x50
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f000 fbee 	bl	800a57c <TIM_ITRx_SetConfig>
      break;
 8009da0:	e02b      	b.n	8009dfa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	6859      	ldr	r1, [r3, #4]
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	461a      	mov	r2, r3
 8009db0:	f000 fb3e 	bl	800a430 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2160      	movs	r1, #96	; 0x60
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f000 fbde 	bl	800a57c <TIM_ITRx_SetConfig>
      break;
 8009dc0:	e01b      	b.n	8009dfa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6818      	ldr	r0, [r3, #0]
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	6859      	ldr	r1, [r3, #4]
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	f000 fac4 	bl	800a35c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2140      	movs	r1, #64	; 0x40
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f000 fbce 	bl	800a57c <TIM_ITRx_SetConfig>
      break;
 8009de0:	e00b      	b.n	8009dfa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4619      	mov	r1, r3
 8009dec:	4610      	mov	r0, r2
 8009dee:	f000 fbc5 	bl	800a57c <TIM_ITRx_SetConfig>
        break;
 8009df2:	e002      	b.n	8009dfa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009df4:	bf00      	nop
 8009df6:	e000      	b.n	8009dfa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009df8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60fb      	str	r3, [r7, #12]
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	2b0c      	cmp	r3, #12
 8009e26:	d831      	bhi.n	8009e8c <HAL_TIM_ReadCapturedValue+0x78>
 8009e28:	a201      	add	r2, pc, #4	; (adr r2, 8009e30 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2e:	bf00      	nop
 8009e30:	08009e65 	.word	0x08009e65
 8009e34:	08009e8d 	.word	0x08009e8d
 8009e38:	08009e8d 	.word	0x08009e8d
 8009e3c:	08009e8d 	.word	0x08009e8d
 8009e40:	08009e6f 	.word	0x08009e6f
 8009e44:	08009e8d 	.word	0x08009e8d
 8009e48:	08009e8d 	.word	0x08009e8d
 8009e4c:	08009e8d 	.word	0x08009e8d
 8009e50:	08009e79 	.word	0x08009e79
 8009e54:	08009e8d 	.word	0x08009e8d
 8009e58:	08009e8d 	.word	0x08009e8d
 8009e5c:	08009e8d 	.word	0x08009e8d
 8009e60:	08009e83 	.word	0x08009e83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e6a:	60fb      	str	r3, [r7, #12]

      break;
 8009e6c:	e00f      	b.n	8009e8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e74:	60fb      	str	r3, [r7, #12]

      break;
 8009e76:	e00a      	b.n	8009e8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e7e:	60fb      	str	r3, [r7, #12]

      break;
 8009e80:	e005      	b.n	8009e8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e88:	60fb      	str	r3, [r7, #12]

      break;
 8009e8a:	e000      	b.n	8009e8e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009e8c:	bf00      	nop
  }

  return tmpreg;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3714      	adds	r7, #20
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bc80      	pop	{r7}
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop

08009e9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ea4:	bf00      	nop
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bc80      	pop	{r7}
 8009eac:	4770      	bx	lr

08009eae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b083      	sub	sp, #12
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009eb6:	bf00      	nop
 8009eb8:	370c      	adds	r7, #12
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bc80      	pop	{r7}
 8009ebe:	4770      	bx	lr

08009ec0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bc80      	pop	{r7}
 8009ed0:	4770      	bx	lr
	...

08009ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a29      	ldr	r2, [pc, #164]	; (8009f8c <TIM_Base_SetConfig+0xb8>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d00b      	beq.n	8009f04 <TIM_Base_SetConfig+0x30>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ef2:	d007      	beq.n	8009f04 <TIM_Base_SetConfig+0x30>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a26      	ldr	r2, [pc, #152]	; (8009f90 <TIM_Base_SetConfig+0xbc>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d003      	beq.n	8009f04 <TIM_Base_SetConfig+0x30>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a25      	ldr	r2, [pc, #148]	; (8009f94 <TIM_Base_SetConfig+0xc0>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d108      	bne.n	8009f16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	4313      	orrs	r3, r2
 8009f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a1c      	ldr	r2, [pc, #112]	; (8009f8c <TIM_Base_SetConfig+0xb8>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d00b      	beq.n	8009f36 <TIM_Base_SetConfig+0x62>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f24:	d007      	beq.n	8009f36 <TIM_Base_SetConfig+0x62>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a19      	ldr	r2, [pc, #100]	; (8009f90 <TIM_Base_SetConfig+0xbc>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d003      	beq.n	8009f36 <TIM_Base_SetConfig+0x62>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a18      	ldr	r2, [pc, #96]	; (8009f94 <TIM_Base_SetConfig+0xc0>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d108      	bne.n	8009f48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	695b      	ldr	r3, [r3, #20]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	689a      	ldr	r2, [r3, #8]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a07      	ldr	r2, [pc, #28]	; (8009f8c <TIM_Base_SetConfig+0xb8>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d103      	bne.n	8009f7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	691a      	ldr	r2, [r3, #16]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	615a      	str	r2, [r3, #20]
}
 8009f82:	bf00      	nop
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bc80      	pop	{r7}
 8009f8a:	4770      	bx	lr
 8009f8c:	40012c00 	.word	0x40012c00
 8009f90:	40000400 	.word	0x40000400
 8009f94:	40000800 	.word	0x40000800

08009f98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b087      	sub	sp, #28
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	f023 0201 	bic.w	r2, r3, #1
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a1b      	ldr	r3, [r3, #32]
 8009fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	699b      	ldr	r3, [r3, #24]
 8009fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f023 0303 	bic.w	r3, r3, #3
 8009fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	f023 0302 	bic.w	r3, r3, #2
 8009fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	697a      	ldr	r2, [r7, #20]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a1c      	ldr	r2, [pc, #112]	; (800a060 <TIM_OC1_SetConfig+0xc8>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d10c      	bne.n	800a00e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	f023 0308 	bic.w	r3, r3, #8
 8009ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	697a      	ldr	r2, [r7, #20]
 800a002:	4313      	orrs	r3, r2
 800a004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	f023 0304 	bic.w	r3, r3, #4
 800a00c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4a13      	ldr	r2, [pc, #76]	; (800a060 <TIM_OC1_SetConfig+0xc8>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d111      	bne.n	800a03a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a01c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	695b      	ldr	r3, [r3, #20]
 800a02a:	693a      	ldr	r2, [r7, #16]
 800a02c:	4313      	orrs	r3, r2
 800a02e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	699b      	ldr	r3, [r3, #24]
 800a034:	693a      	ldr	r2, [r7, #16]
 800a036:	4313      	orrs	r3, r2
 800a038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	68fa      	ldr	r2, [r7, #12]
 800a044:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	685a      	ldr	r2, [r3, #4]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	621a      	str	r2, [r3, #32]
}
 800a054:	bf00      	nop
 800a056:	371c      	adds	r7, #28
 800a058:	46bd      	mov	sp, r7
 800a05a:	bc80      	pop	{r7}
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	40012c00 	.word	0x40012c00

0800a064 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a064:	b480      	push	{r7}
 800a066:	b087      	sub	sp, #28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a1b      	ldr	r3, [r3, #32]
 800a072:	f023 0210 	bic.w	r2, r3, #16
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	699b      	ldr	r3, [r3, #24]
 800a08a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a09a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	021b      	lsls	r3, r3, #8
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	f023 0320 	bic.w	r3, r3, #32
 800a0ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	011b      	lsls	r3, r3, #4
 800a0b6:	697a      	ldr	r2, [r7, #20]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a1d      	ldr	r2, [pc, #116]	; (800a134 <TIM_OC2_SetConfig+0xd0>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d10d      	bne.n	800a0e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	011b      	lsls	r3, r3, #4
 800a0d2:	697a      	ldr	r2, [r7, #20]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a14      	ldr	r2, [pc, #80]	; (800a134 <TIM_OC2_SetConfig+0xd0>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d113      	bne.n	800a110 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	695b      	ldr	r3, [r3, #20]
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	693a      	ldr	r2, [r7, #16]
 800a100:	4313      	orrs	r3, r2
 800a102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	693a      	ldr	r2, [r7, #16]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	693a      	ldr	r2, [r7, #16]
 800a114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	685a      	ldr	r2, [r3, #4]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	697a      	ldr	r2, [r7, #20]
 800a128:	621a      	str	r2, [r3, #32]
}
 800a12a:	bf00      	nop
 800a12c:	371c      	adds	r7, #28
 800a12e:	46bd      	mov	sp, r7
 800a130:	bc80      	pop	{r7}
 800a132:	4770      	bx	lr
 800a134:	40012c00 	.word	0x40012c00

0800a138 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a138:	b480      	push	{r7}
 800a13a:	b087      	sub	sp, #28
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a1b      	ldr	r3, [r3, #32]
 800a146:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6a1b      	ldr	r3, [r3, #32]
 800a152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	69db      	ldr	r3, [r3, #28]
 800a15e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f023 0303 	bic.w	r3, r3, #3
 800a16e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	4313      	orrs	r3, r2
 800a178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	021b      	lsls	r3, r3, #8
 800a188:	697a      	ldr	r2, [r7, #20]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a1d      	ldr	r2, [pc, #116]	; (800a208 <TIM_OC3_SetConfig+0xd0>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d10d      	bne.n	800a1b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a19c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	021b      	lsls	r3, r3, #8
 800a1a4:	697a      	ldr	r2, [r7, #20]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a14      	ldr	r2, [pc, #80]	; (800a208 <TIM_OC3_SetConfig+0xd0>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d113      	bne.n	800a1e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	695b      	ldr	r3, [r3, #20]
 800a1ce:	011b      	lsls	r3, r3, #4
 800a1d0:	693a      	ldr	r2, [r7, #16]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	011b      	lsls	r3, r3, #4
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	693a      	ldr	r2, [r7, #16]
 800a1e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	685a      	ldr	r2, [r3, #4]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	697a      	ldr	r2, [r7, #20]
 800a1fa:	621a      	str	r2, [r3, #32]
}
 800a1fc:	bf00      	nop
 800a1fe:	371c      	adds	r7, #28
 800a200:	46bd      	mov	sp, r7
 800a202:	bc80      	pop	{r7}
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	40012c00 	.word	0x40012c00

0800a20c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b087      	sub	sp, #28
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a1b      	ldr	r3, [r3, #32]
 800a21a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	69db      	ldr	r3, [r3, #28]
 800a232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a23a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	021b      	lsls	r3, r3, #8
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	4313      	orrs	r3, r2
 800a24e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a256:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	031b      	lsls	r3, r3, #12
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	4313      	orrs	r3, r2
 800a262:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4a0f      	ldr	r2, [pc, #60]	; (800a2a4 <TIM_OC4_SetConfig+0x98>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d109      	bne.n	800a280 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a272:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	695b      	ldr	r3, [r3, #20]
 800a278:	019b      	lsls	r3, r3, #6
 800a27a:	697a      	ldr	r2, [r7, #20]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	685a      	ldr	r2, [r3, #4]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	693a      	ldr	r2, [r7, #16]
 800a298:	621a      	str	r2, [r3, #32]
}
 800a29a:	bf00      	nop
 800a29c:	371c      	adds	r7, #28
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bc80      	pop	{r7}
 800a2a2:	4770      	bx	lr
 800a2a4:	40012c00 	.word	0x40012c00

0800a2a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b087      	sub	sp, #28
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	607a      	str	r2, [r7, #4]
 800a2b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	f023 0201 	bic.w	r2, r3, #1
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6a1b      	ldr	r3, [r3, #32]
 800a2cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	4a1f      	ldr	r2, [pc, #124]	; (800a350 <TIM_TI1_SetConfig+0xa8>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d00b      	beq.n	800a2ee <TIM_TI1_SetConfig+0x46>
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2dc:	d007      	beq.n	800a2ee <TIM_TI1_SetConfig+0x46>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	4a1c      	ldr	r2, [pc, #112]	; (800a354 <TIM_TI1_SetConfig+0xac>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d003      	beq.n	800a2ee <TIM_TI1_SetConfig+0x46>
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	4a1b      	ldr	r2, [pc, #108]	; (800a358 <TIM_TI1_SetConfig+0xb0>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d101      	bne.n	800a2f2 <TIM_TI1_SetConfig+0x4a>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e000      	b.n	800a2f4 <TIM_TI1_SetConfig+0x4c>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d008      	beq.n	800a30a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	f023 0303 	bic.w	r3, r3, #3
 800a2fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a300:	697a      	ldr	r2, [r7, #20]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4313      	orrs	r3, r2
 800a306:	617b      	str	r3, [r7, #20]
 800a308:	e003      	b.n	800a312 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	f043 0301 	orr.w	r3, r3, #1
 800a310:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a318:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	011b      	lsls	r3, r3, #4
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	697a      	ldr	r2, [r7, #20]
 800a322:	4313      	orrs	r3, r2
 800a324:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	f023 030a 	bic.w	r3, r3, #10
 800a32c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	f003 030a 	and.w	r3, r3, #10
 800a334:	693a      	ldr	r2, [r7, #16]
 800a336:	4313      	orrs	r3, r2
 800a338:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	697a      	ldr	r2, [r7, #20]
 800a33e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	693a      	ldr	r2, [r7, #16]
 800a344:	621a      	str	r2, [r3, #32]
}
 800a346:	bf00      	nop
 800a348:	371c      	adds	r7, #28
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bc80      	pop	{r7}
 800a34e:	4770      	bx	lr
 800a350:	40012c00 	.word	0x40012c00
 800a354:	40000400 	.word	0x40000400
 800a358:	40000800 	.word	0x40000800

0800a35c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b087      	sub	sp, #28
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6a1b      	ldr	r3, [r3, #32]
 800a36c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	f023 0201 	bic.w	r2, r3, #1
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	011b      	lsls	r3, r3, #4
 800a38c:	693a      	ldr	r2, [r7, #16]
 800a38e:	4313      	orrs	r3, r2
 800a390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	f023 030a 	bic.w	r3, r3, #10
 800a398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a39a:	697a      	ldr	r2, [r7, #20]
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	693a      	ldr	r2, [r7, #16]
 800a3a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	697a      	ldr	r2, [r7, #20]
 800a3ac:	621a      	str	r2, [r3, #32]
}
 800a3ae:	bf00      	nop
 800a3b0:	371c      	adds	r7, #28
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bc80      	pop	{r7}
 800a3b6:	4770      	bx	lr

0800a3b8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
 800a3c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6a1b      	ldr	r3, [r3, #32]
 800a3ca:	f023 0210 	bic.w	r2, r3, #16
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6a1b      	ldr	r3, [r3, #32]
 800a3dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	021b      	lsls	r3, r3, #8
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	031b      	lsls	r3, r3, #12
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	4313      	orrs	r3, r2
 800a402:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a40a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	011b      	lsls	r3, r3, #4
 800a410:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	4313      	orrs	r3, r2
 800a418:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	697a      	ldr	r2, [r7, #20]
 800a41e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	693a      	ldr	r2, [r7, #16]
 800a424:	621a      	str	r2, [r3, #32]
}
 800a426:	bf00      	nop
 800a428:	371c      	adds	r7, #28
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bc80      	pop	{r7}
 800a42e:	4770      	bx	lr

0800a430 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a430:	b480      	push	{r7}
 800a432:	b087      	sub	sp, #28
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6a1b      	ldr	r3, [r3, #32]
 800a440:	f023 0210 	bic.w	r2, r3, #16
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	699b      	ldr	r3, [r3, #24]
 800a44c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a45a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	031b      	lsls	r3, r3, #12
 800a460:	697a      	ldr	r2, [r7, #20]
 800a462:	4313      	orrs	r3, r2
 800a464:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a46c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	011b      	lsls	r3, r3, #4
 800a472:	693a      	ldr	r2, [r7, #16]
 800a474:	4313      	orrs	r3, r2
 800a476:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	697a      	ldr	r2, [r7, #20]
 800a47c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	693a      	ldr	r2, [r7, #16]
 800a482:	621a      	str	r2, [r3, #32]
}
 800a484:	bf00      	nop
 800a486:	371c      	adds	r7, #28
 800a488:	46bd      	mov	sp, r7
 800a48a:	bc80      	pop	{r7}
 800a48c:	4770      	bx	lr

0800a48e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a48e:	b480      	push	{r7}
 800a490:	b087      	sub	sp, #28
 800a492:	af00      	add	r7, sp, #0
 800a494:	60f8      	str	r0, [r7, #12]
 800a496:	60b9      	str	r1, [r7, #8]
 800a498:	607a      	str	r2, [r7, #4]
 800a49a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6a1b      	ldr	r3, [r3, #32]
 800a4a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	69db      	ldr	r3, [r3, #28]
 800a4ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
 800a4b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	f023 0303 	bic.w	r3, r3, #3
 800a4ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a4bc:	697a      	ldr	r2, [r7, #20]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	011b      	lsls	r3, r3, #4
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	697a      	ldr	r2, [r7, #20]
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a4de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	021b      	lsls	r3, r3, #8
 800a4e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4e8:	693a      	ldr	r2, [r7, #16]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	697a      	ldr	r2, [r7, #20]
 800a4f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	693a      	ldr	r2, [r7, #16]
 800a4f8:	621a      	str	r2, [r3, #32]
}
 800a4fa:	bf00      	nop
 800a4fc:	371c      	adds	r7, #28
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bc80      	pop	{r7}
 800a502:	4770      	bx	lr

0800a504 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a504:	b480      	push	{r7}
 800a506:	b087      	sub	sp, #28
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	607a      	str	r2, [r7, #4]
 800a510:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6a1b      	ldr	r3, [r3, #32]
 800a516:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	69db      	ldr	r3, [r3, #28]
 800a522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6a1b      	ldr	r3, [r3, #32]
 800a528:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a530:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	021b      	lsls	r3, r3, #8
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	4313      	orrs	r3, r2
 800a53a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a542:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	031b      	lsls	r3, r3, #12
 800a548:	b29b      	uxth	r3, r3
 800a54a:	697a      	ldr	r2, [r7, #20]
 800a54c:	4313      	orrs	r3, r2
 800a54e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a556:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	031b      	lsls	r3, r3, #12
 800a55c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a560:	693a      	ldr	r2, [r7, #16]
 800a562:	4313      	orrs	r3, r2
 800a564:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	697a      	ldr	r2, [r7, #20]
 800a56a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	621a      	str	r2, [r3, #32]
}
 800a572:	bf00      	nop
 800a574:	371c      	adds	r7, #28
 800a576:	46bd      	mov	sp, r7
 800a578:	bc80      	pop	{r7}
 800a57a:	4770      	bx	lr

0800a57c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a592:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a594:	683a      	ldr	r2, [r7, #0]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	4313      	orrs	r3, r2
 800a59a:	f043 0307 	orr.w	r3, r3, #7
 800a59e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	609a      	str	r2, [r3, #8]
}
 800a5a6:	bf00      	nop
 800a5a8:	3714      	adds	r7, #20
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bc80      	pop	{r7}
 800a5ae:	4770      	bx	lr

0800a5b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b087      	sub	sp, #28
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	607a      	str	r2, [r7, #4]
 800a5bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	021a      	lsls	r2, r3, #8
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	431a      	orrs	r2, r3
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	697a      	ldr	r2, [r7, #20]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	697a      	ldr	r2, [r7, #20]
 800a5e2:	609a      	str	r2, [r3, #8]
}
 800a5e4:	bf00      	nop
 800a5e6:	371c      	adds	r7, #28
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bc80      	pop	{r7}
 800a5ec:	4770      	bx	lr

0800a5ee <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a5ee:	b480      	push	{r7}
 800a5f0:	b087      	sub	sp, #28
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	60f8      	str	r0, [r7, #12]
 800a5f6:	60b9      	str	r1, [r7, #8]
 800a5f8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	f003 031f 	and.w	r3, r3, #31
 800a600:	2201      	movs	r2, #1
 800a602:	fa02 f303 	lsl.w	r3, r2, r3
 800a606:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6a1a      	ldr	r2, [r3, #32]
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	43db      	mvns	r3, r3
 800a610:	401a      	ands	r2, r3
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	6a1a      	ldr	r2, [r3, #32]
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	f003 031f 	and.w	r3, r3, #31
 800a620:	6879      	ldr	r1, [r7, #4]
 800a622:	fa01 f303 	lsl.w	r3, r1, r3
 800a626:	431a      	orrs	r2, r3
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	621a      	str	r2, [r3, #32]
}
 800a62c:	bf00      	nop
 800a62e:	371c      	adds	r7, #28
 800a630:	46bd      	mov	sp, r7
 800a632:	bc80      	pop	{r7}
 800a634:	4770      	bx	lr
	...

0800a638 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d109      	bne.n	800a65c <HAL_TIMEx_PWMN_Start+0x24>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	2b01      	cmp	r3, #1
 800a652:	bf14      	ite	ne
 800a654:	2301      	movne	r3, #1
 800a656:	2300      	moveq	r3, #0
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	e022      	b.n	800a6a2 <HAL_TIMEx_PWMN_Start+0x6a>
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	2b04      	cmp	r3, #4
 800a660:	d109      	bne.n	800a676 <HAL_TIMEx_PWMN_Start+0x3e>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	bf14      	ite	ne
 800a66e:	2301      	movne	r3, #1
 800a670:	2300      	moveq	r3, #0
 800a672:	b2db      	uxtb	r3, r3
 800a674:	e015      	b.n	800a6a2 <HAL_TIMEx_PWMN_Start+0x6a>
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	2b08      	cmp	r3, #8
 800a67a:	d109      	bne.n	800a690 <HAL_TIMEx_PWMN_Start+0x58>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a682:	b2db      	uxtb	r3, r3
 800a684:	2b01      	cmp	r3, #1
 800a686:	bf14      	ite	ne
 800a688:	2301      	movne	r3, #1
 800a68a:	2300      	moveq	r3, #0
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	e008      	b.n	800a6a2 <HAL_TIMEx_PWMN_Start+0x6a>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a696:	b2db      	uxtb	r3, r3
 800a698:	2b01      	cmp	r3, #1
 800a69a:	bf14      	ite	ne
 800a69c:	2301      	movne	r3, #1
 800a69e:	2300      	moveq	r3, #0
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e059      	b.n	800a75e <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d104      	bne.n	800a6ba <HAL_TIMEx_PWMN_Start+0x82>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2202      	movs	r2, #2
 800a6b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6b8:	e013      	b.n	800a6e2 <HAL_TIMEx_PWMN_Start+0xaa>
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	2b04      	cmp	r3, #4
 800a6be:	d104      	bne.n	800a6ca <HAL_TIMEx_PWMN_Start+0x92>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2202      	movs	r2, #2
 800a6c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a6c8:	e00b      	b.n	800a6e2 <HAL_TIMEx_PWMN_Start+0xaa>
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	2b08      	cmp	r3, #8
 800a6ce:	d104      	bne.n	800a6da <HAL_TIMEx_PWMN_Start+0xa2>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2202      	movs	r2, #2
 800a6d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6d8:	e003      	b.n	800a6e2 <HAL_TIMEx_PWMN_Start+0xaa>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2202      	movs	r2, #2
 800a6de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2204      	movs	r2, #4
 800a6e8:	6839      	ldr	r1, [r7, #0]
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 f903 	bl	800a8f6 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a18      	ldr	r2, [pc, #96]	; (800a768 <HAL_TIMEx_PWMN_Start+0x130>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d00e      	beq.n	800a728 <HAL_TIMEx_PWMN_Start+0xf0>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a712:	d009      	beq.n	800a728 <HAL_TIMEx_PWMN_Start+0xf0>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a14      	ldr	r2, [pc, #80]	; (800a76c <HAL_TIMEx_PWMN_Start+0x134>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d004      	beq.n	800a728 <HAL_TIMEx_PWMN_Start+0xf0>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a13      	ldr	r2, [pc, #76]	; (800a770 <HAL_TIMEx_PWMN_Start+0x138>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d111      	bne.n	800a74c <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	f003 0307 	and.w	r3, r3, #7
 800a732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2b06      	cmp	r3, #6
 800a738:	d010      	beq.n	800a75c <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f042 0201 	orr.w	r2, r2, #1
 800a748:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a74a:	e007      	b.n	800a75c <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f042 0201 	orr.w	r2, r2, #1
 800a75a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	40012c00 	.word	0x40012c00
 800a76c:	40000400 	.word	0x40000400
 800a770:	40000800 	.word	0x40000800

0800a774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a774:	b480      	push	{r7}
 800a776:	b085      	sub	sp, #20
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a784:	2b01      	cmp	r3, #1
 800a786:	d101      	bne.n	800a78c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a788:	2302      	movs	r3, #2
 800a78a:	e046      	b.n	800a81a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2201      	movs	r2, #1
 800a790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2202      	movs	r2, #2
 800a798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a16      	ldr	r2, [pc, #88]	; (800a824 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d00e      	beq.n	800a7ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7d8:	d009      	beq.n	800a7ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a12      	ldr	r2, [pc, #72]	; (800a828 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d004      	beq.n	800a7ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a10      	ldr	r2, [pc, #64]	; (800a82c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d10c      	bne.n	800a808 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68ba      	ldr	r2, [r7, #8]
 800a806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	bc80      	pop	{r7}
 800a822:	4770      	bx	lr
 800a824:	40012c00 	.word	0x40012c00
 800a828:	40000400 	.word	0x40000400
 800a82c:	40000800 	.word	0x40000800

0800a830 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a83a:	2300      	movs	r3, #0
 800a83c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a844:	2b01      	cmp	r3, #1
 800a846:	d101      	bne.n	800a84c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a848:	2302      	movs	r3, #2
 800a84a:	e03d      	b.n	800a8c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2201      	movs	r2, #1
 800a850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	4313      	orrs	r3, r2
 800a860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	4313      	orrs	r3, r2
 800a87c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4313      	orrs	r3, r2
 800a88a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	4313      	orrs	r3, r2
 800a898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	695b      	ldr	r3, [r3, #20]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	69db      	ldr	r3, [r3, #28]
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3714      	adds	r7, #20
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bc80      	pop	{r7}
 800a8d0:	4770      	bx	lr

0800a8d2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8da:	bf00      	nop
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bc80      	pop	{r7}
 800a8e2:	4770      	bx	lr

0800a8e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8ec:	bf00      	nop
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bc80      	pop	{r7}
 800a8f4:	4770      	bx	lr

0800a8f6 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a8f6:	b480      	push	{r7}
 800a8f8:	b087      	sub	sp, #28
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	60f8      	str	r0, [r7, #12]
 800a8fe:	60b9      	str	r1, [r7, #8]
 800a900:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	f003 031f 	and.w	r3, r3, #31
 800a908:	2204      	movs	r2, #4
 800a90a:	fa02 f303 	lsl.w	r3, r2, r3
 800a90e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6a1a      	ldr	r2, [r3, #32]
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	43db      	mvns	r3, r3
 800a918:	401a      	ands	r2, r3
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6a1a      	ldr	r2, [r3, #32]
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	f003 031f 	and.w	r3, r3, #31
 800a928:	6879      	ldr	r1, [r7, #4]
 800a92a:	fa01 f303 	lsl.w	r3, r1, r3
 800a92e:	431a      	orrs	r2, r3
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	621a      	str	r2, [r3, #32]
}
 800a934:	bf00      	nop
 800a936:	371c      	adds	r7, #28
 800a938:	46bd      	mov	sp, r7
 800a93a:	bc80      	pop	{r7}
 800a93c:	4770      	bx	lr

0800a93e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b082      	sub	sp, #8
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d101      	bne.n	800a950 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	e03f      	b.n	800a9d0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a956:	b2db      	uxtb	r3, r3
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d106      	bne.n	800a96a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f7fa fee7 	bl	8005738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2224      	movs	r2, #36	; 0x24
 800a96e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	68da      	ldr	r2, [r3, #12]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a980:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fd04 	bl	800b390 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	691a      	ldr	r2, [r3, #16]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a996:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	695a      	ldr	r2, [r3, #20]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a9a6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	68da      	ldr	r2, [r3, #12]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a9b6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2220      	movs	r2, #32
 800a9c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2220      	movs	r2, #32
 800a9ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b08a      	sub	sp, #40	; 0x28
 800a9dc:	af02      	add	r7, sp, #8
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	603b      	str	r3, [r7, #0]
 800a9e4:	4613      	mov	r3, r2
 800a9e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	2b20      	cmp	r3, #32
 800a9f6:	d17c      	bne.n	800aaf2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d002      	beq.n	800aa04 <HAL_UART_Transmit+0x2c>
 800a9fe:	88fb      	ldrh	r3, [r7, #6]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d101      	bne.n	800aa08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	e075      	b.n	800aaf4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d101      	bne.n	800aa16 <HAL_UART_Transmit+0x3e>
 800aa12:	2302      	movs	r3, #2
 800aa14:	e06e      	b.n	800aaf4 <HAL_UART_Transmit+0x11c>
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2201      	movs	r2, #1
 800aa1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2221      	movs	r2, #33	; 0x21
 800aa28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800aa2c:	f7fb f828 	bl	8005a80 <HAL_GetTick>
 800aa30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	88fa      	ldrh	r2, [r7, #6]
 800aa36:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	88fa      	ldrh	r2, [r7, #6]
 800aa3c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa46:	d108      	bne.n	800aa5a <HAL_UART_Transmit+0x82>
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d104      	bne.n	800aa5a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800aa50:	2300      	movs	r3, #0
 800aa52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	61bb      	str	r3, [r7, #24]
 800aa58:	e003      	b.n	800aa62 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800aa6a:	e02a      	b.n	800aac2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	9300      	str	r3, [sp, #0]
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	2200      	movs	r2, #0
 800aa74:	2180      	movs	r1, #128	; 0x80
 800aa76:	68f8      	ldr	r0, [r7, #12]
 800aa78:	f000 fb13 	bl	800b0a2 <UART_WaitOnFlagUntilTimeout>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d001      	beq.n	800aa86 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800aa82:	2303      	movs	r3, #3
 800aa84:	e036      	b.n	800aaf4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800aa86:	69fb      	ldr	r3, [r7, #28]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10b      	bne.n	800aaa4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	881b      	ldrh	r3, [r3, #0]
 800aa90:	461a      	mov	r2, r3
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa9a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	3302      	adds	r3, #2
 800aaa0:	61bb      	str	r3, [r7, #24]
 800aaa2:	e007      	b.n	800aab4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	781a      	ldrb	r2, [r3, #0]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800aaae:	69fb      	ldr	r3, [r7, #28]
 800aab0:	3301      	adds	r3, #1
 800aab2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	3b01      	subs	r3, #1
 800aabc:	b29a      	uxth	r2, r3
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d1cf      	bne.n	800aa6c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	2200      	movs	r2, #0
 800aad4:	2140      	movs	r1, #64	; 0x40
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f000 fae3 	bl	800b0a2 <UART_WaitOnFlagUntilTimeout>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d001      	beq.n	800aae6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e006      	b.n	800aaf4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2220      	movs	r2, #32
 800aaea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	e000      	b.n	800aaf4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800aaf2:	2302      	movs	r3, #2
  }
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3720      	adds	r7, #32
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b086      	sub	sp, #24
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	4613      	mov	r3, r2
 800ab08:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	2b20      	cmp	r3, #32
 800ab14:	d153      	bne.n	800abbe <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d002      	beq.n	800ab22 <HAL_UART_Transmit_DMA+0x26>
 800ab1c:	88fb      	ldrh	r3, [r7, #6]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d101      	bne.n	800ab26 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ab22:	2301      	movs	r3, #1
 800ab24:	e04c      	b.n	800abc0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d101      	bne.n	800ab34 <HAL_UART_Transmit_DMA+0x38>
 800ab30:	2302      	movs	r3, #2
 800ab32:	e045      	b.n	800abc0 <HAL_UART_Transmit_DMA+0xc4>
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800ab3c:	68ba      	ldr	r2, [r7, #8]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	88fa      	ldrh	r2, [r7, #6]
 800ab46:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	88fa      	ldrh	r2, [r7, #6]
 800ab4c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2200      	movs	r2, #0
 800ab52:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2221      	movs	r2, #33	; 0x21
 800ab58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab60:	4a19      	ldr	r2, [pc, #100]	; (800abc8 <HAL_UART_Transmit_DMA+0xcc>)
 800ab62:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab68:	4a18      	ldr	r2, [pc, #96]	; (800abcc <HAL_UART_Transmit_DMA+0xd0>)
 800ab6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab70:	4a17      	ldr	r2, [pc, #92]	; (800abd0 <HAL_UART_Transmit_DMA+0xd4>)
 800ab72:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab78:	2200      	movs	r2, #0
 800ab7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 800ab7c:	f107 0308 	add.w	r3, r7, #8
 800ab80:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	6819      	ldr	r1, [r3, #0]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	3304      	adds	r3, #4
 800ab90:	461a      	mov	r2, r3
 800ab92:	88fb      	ldrh	r3, [r7, #6]
 800ab94:	f7fb f90a 	bl	8005dac <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aba0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2200      	movs	r2, #0
 800aba6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	695a      	ldr	r2, [r3, #20]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800abb8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800abba:	2300      	movs	r3, #0
 800abbc:	e000      	b.n	800abc0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800abbe:	2302      	movs	r3, #2
  }
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3718      	adds	r7, #24
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	0800af1d 	.word	0x0800af1d
 800abcc:	0800af6f 	.word	0x0800af6f
 800abd0:	0800b00f 	.word	0x0800b00f

0800abd4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b086      	sub	sp, #24
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	4613      	mov	r3, r2
 800abe0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	2b20      	cmp	r3, #32
 800abec:	d166      	bne.n	800acbc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d002      	beq.n	800abfa <HAL_UART_Receive_DMA+0x26>
 800abf4:	88fb      	ldrh	r3, [r7, #6]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d101      	bne.n	800abfe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	e05f      	b.n	800acbe <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d101      	bne.n	800ac0c <HAL_UART_Receive_DMA+0x38>
 800ac08:	2302      	movs	r3, #2
 800ac0a:	e058      	b.n	800acbe <HAL_UART_Receive_DMA+0xea>
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800ac14:	68ba      	ldr	r2, [r7, #8]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	88fa      	ldrh	r2, [r7, #6]
 800ac1e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2200      	movs	r2, #0
 800ac24:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2222      	movs	r2, #34	; 0x22
 800ac2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac32:	4a25      	ldr	r2, [pc, #148]	; (800acc8 <HAL_UART_Receive_DMA+0xf4>)
 800ac34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac3a:	4a24      	ldr	r2, [pc, #144]	; (800accc <HAL_UART_Receive_DMA+0xf8>)
 800ac3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac42:	4a23      	ldr	r2, [pc, #140]	; (800acd0 <HAL_UART_Receive_DMA+0xfc>)
 800ac44:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800ac4e:	f107 0308 	add.w	r3, r7, #8
 800ac52:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	3304      	adds	r3, #4
 800ac5e:	4619      	mov	r1, r3
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	88fb      	ldrh	r3, [r7, #6]
 800ac66:	f7fb f8a1 	bl	8005dac <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	613b      	str	r3, [r7, #16]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	613b      	str	r3, [r7, #16]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	613b      	str	r3, [r7, #16]
 800ac7e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2200      	movs	r2, #0
 800ac84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	68da      	ldr	r2, [r3, #12]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac96:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	695a      	ldr	r2, [r3, #20]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f042 0201 	orr.w	r2, r2, #1
 800aca6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	695a      	ldr	r2, [r3, #20]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800acb6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800acb8:	2300      	movs	r3, #0
 800acba:	e000      	b.n	800acbe <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800acbc:	2302      	movs	r3, #2
  }
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3718      	adds	r7, #24
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	0800af8b 	.word	0x0800af8b
 800accc:	0800aff3 	.word	0x0800aff3
 800acd0:	0800b00f 	.word	0x0800b00f

0800acd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b088      	sub	sp, #32
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	695b      	ldr	r3, [r3, #20]
 800acf2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800acf4:	2300      	movs	r3, #0
 800acf6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800acf8:	2300      	movs	r3, #0
 800acfa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	f003 030f 	and.w	r3, r3, #15
 800ad02:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d10d      	bne.n	800ad26 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	f003 0320 	and.w	r3, r3, #32
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d008      	beq.n	800ad26 <HAL_UART_IRQHandler+0x52>
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	f003 0320 	and.w	r3, r3, #32
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d003      	beq.n	800ad26 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fab6 	bl	800b290 <UART_Receive_IT>
      return;
 800ad24:	e0d0      	b.n	800aec8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	f000 80b0 	beq.w	800ae8e <HAL_UART_IRQHandler+0x1ba>
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	f003 0301 	and.w	r3, r3, #1
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d105      	bne.n	800ad44 <HAL_UART_IRQHandler+0x70>
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f000 80a5 	beq.w	800ae8e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00a      	beq.n	800ad64 <HAL_UART_IRQHandler+0x90>
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d005      	beq.n	800ad64 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad5c:	f043 0201 	orr.w	r2, r3, #1
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	f003 0304 	and.w	r3, r3, #4
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00a      	beq.n	800ad84 <HAL_UART_IRQHandler+0xb0>
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	f003 0301 	and.w	r3, r3, #1
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d005      	beq.n	800ad84 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad7c:	f043 0202 	orr.w	r2, r3, #2
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	f003 0302 	and.w	r3, r3, #2
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00a      	beq.n	800ada4 <HAL_UART_IRQHandler+0xd0>
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	f003 0301 	and.w	r3, r3, #1
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d005      	beq.n	800ada4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad9c:	f043 0204 	orr.w	r2, r3, #4
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	f003 0308 	and.w	r3, r3, #8
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00f      	beq.n	800adce <HAL_UART_IRQHandler+0xfa>
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	f003 0320 	and.w	r3, r3, #32
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d104      	bne.n	800adc2 <HAL_UART_IRQHandler+0xee>
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	f003 0301 	and.w	r3, r3, #1
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d005      	beq.n	800adce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc6:	f043 0208 	orr.w	r2, r3, #8
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800add2:	2b00      	cmp	r3, #0
 800add4:	d077      	beq.n	800aec6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800add6:	69fb      	ldr	r3, [r7, #28]
 800add8:	f003 0320 	and.w	r3, r3, #32
 800addc:	2b00      	cmp	r3, #0
 800adde:	d007      	beq.n	800adf0 <HAL_UART_IRQHandler+0x11c>
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	f003 0320 	and.w	r3, r3, #32
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d002      	beq.n	800adf0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 fa50 	bl	800b290 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	695b      	ldr	r3, [r3, #20]
 800adf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	bf14      	ite	ne
 800adfe:	2301      	movne	r3, #1
 800ae00:	2300      	moveq	r3, #0
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae0a:	f003 0308 	and.w	r3, r3, #8
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d102      	bne.n	800ae18 <HAL_UART_IRQHandler+0x144>
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d031      	beq.n	800ae7c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 f9a1 	bl	800b160 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	695b      	ldr	r3, [r3, #20]
 800ae24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d023      	beq.n	800ae74 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	695a      	ldr	r2, [r3, #20]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae3a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d013      	beq.n	800ae6c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae48:	4a21      	ldr	r2, [pc, #132]	; (800aed0 <HAL_UART_IRQHandler+0x1fc>)
 800ae4a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7fb f80b 	bl	8005e6c <HAL_DMA_Abort_IT>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d016      	beq.n	800ae8a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ae66:	4610      	mov	r0, r2
 800ae68:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae6a:	e00e      	b.n	800ae8a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 f84c 	bl	800af0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae72:	e00a      	b.n	800ae8a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 f848 	bl	800af0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae7a:	e006      	b.n	800ae8a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 f844 	bl	800af0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800ae88:	e01d      	b.n	800aec6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae8a:	bf00      	nop
    return;
 800ae8c:	e01b      	b.n	800aec6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d008      	beq.n	800aeaa <HAL_UART_IRQHandler+0x1d6>
 800ae98:	69bb      	ldr	r3, [r7, #24]
 800ae9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d003      	beq.n	800aeaa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 f98d 	bl	800b1c2 <UART_Transmit_IT>
    return;
 800aea8:	e00e      	b.n	800aec8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d009      	beq.n	800aec8 <HAL_UART_IRQHandler+0x1f4>
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d004      	beq.n	800aec8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 f9ce 	bl	800b260 <UART_EndTransmit_IT>
    return;
 800aec4:	e000      	b.n	800aec8 <HAL_UART_IRQHandler+0x1f4>
    return;
 800aec6:	bf00      	nop
  }
}
 800aec8:	3720      	adds	r7, #32
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	0800b19b 	.word	0x0800b19b

0800aed4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800aedc:	bf00      	nop
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bc80      	pop	{r7}
 800aee4:	4770      	bx	lr

0800aee6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aee6:	b480      	push	{r7}
 800aee8:	b083      	sub	sp, #12
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800aeee:	bf00      	nop
 800aef0:	370c      	adds	r7, #12
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bc80      	pop	{r7}
 800aef6:	4770      	bx	lr

0800aef8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800af00:	bf00      	nop
 800af02:	370c      	adds	r7, #12
 800af04:	46bd      	mov	sp, r7
 800af06:	bc80      	pop	{r7}
 800af08:	4770      	bx	lr

0800af0a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af0a:	b480      	push	{r7}
 800af0c:	b083      	sub	sp, #12
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800af12:	bf00      	nop
 800af14:	370c      	adds	r7, #12
 800af16:	46bd      	mov	sp, r7
 800af18:	bc80      	pop	{r7}
 800af1a:	4770      	bx	lr

0800af1c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af28:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f003 0320 	and.w	r3, r3, #32
 800af34:	2b00      	cmp	r3, #0
 800af36:	d113      	bne.n	800af60 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2200      	movs	r2, #0
 800af3c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	695a      	ldr	r2, [r3, #20]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af4c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68da      	ldr	r2, [r3, #12]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af5c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af5e:	e002      	b.n	800af66 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	f7f6 ff51 	bl	8001e08 <HAL_UART_TxCpltCallback>
}
 800af66:	bf00      	nop
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}

0800af6e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b084      	sub	sp, #16
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af7a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	f7ff ffa9 	bl	800aed4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af82:	bf00      	nop
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b084      	sub	sp, #16
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af96:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f003 0320 	and.w	r3, r3, #32
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d11e      	bne.n	800afe4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2200      	movs	r2, #0
 800afaa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	68da      	ldr	r2, [r3, #12]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800afba:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	695a      	ldr	r2, [r3, #20]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f022 0201 	bic.w	r2, r2, #1
 800afca:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	695a      	ldr	r2, [r3, #20]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afda:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2220      	movs	r2, #32
 800afe0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800afe4:	68f8      	ldr	r0, [r7, #12]
 800afe6:	f7ff ff7e 	bl	800aee6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afea:	bf00      	nop
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}

0800aff2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b084      	sub	sp, #16
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f7ff ff79 	bl	800aef8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b006:	bf00      	nop
 800b008:	3710      	adds	r7, #16
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b084      	sub	sp, #16
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b016:	2300      	movs	r3, #0
 800b018:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	695b      	ldr	r3, [r3, #20]
 800b026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	bf14      	ite	ne
 800b02e:	2301      	movne	r3, #1
 800b030:	2300      	moveq	r3, #0
 800b032:	b2db      	uxtb	r3, r3
 800b034:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	2b21      	cmp	r3, #33	; 0x21
 800b040:	d108      	bne.n	800b054 <UART_DMAError+0x46>
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d005      	beq.n	800b054 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	2200      	movs	r2, #0
 800b04c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b04e:	68b8      	ldr	r0, [r7, #8]
 800b050:	f000 f871 	bl	800b136 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	695b      	ldr	r3, [r3, #20]
 800b05a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b05e:	2b00      	cmp	r3, #0
 800b060:	bf14      	ite	ne
 800b062:	2301      	movne	r3, #1
 800b064:	2300      	moveq	r3, #0
 800b066:	b2db      	uxtb	r3, r3
 800b068:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b070:	b2db      	uxtb	r3, r3
 800b072:	2b22      	cmp	r3, #34	; 0x22
 800b074:	d108      	bne.n	800b088 <UART_DMAError+0x7a>
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d005      	beq.n	800b088 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	2200      	movs	r2, #0
 800b080:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b082:	68b8      	ldr	r0, [r7, #8]
 800b084:	f000 f86c 	bl	800b160 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b08c:	f043 0210 	orr.w	r2, r3, #16
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b094:	68b8      	ldr	r0, [r7, #8]
 800b096:	f7ff ff38 	bl	800af0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b09a:	bf00      	nop
 800b09c:	3710      	adds	r7, #16
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b084      	sub	sp, #16
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	60f8      	str	r0, [r7, #12]
 800b0aa:	60b9      	str	r1, [r7, #8]
 800b0ac:	603b      	str	r3, [r7, #0]
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0b2:	e02c      	b.n	800b10e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ba:	d028      	beq.n	800b10e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d007      	beq.n	800b0d2 <UART_WaitOnFlagUntilTimeout+0x30>
 800b0c2:	f7fa fcdd 	bl	8005a80 <HAL_GetTick>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	1ad3      	subs	r3, r2, r3
 800b0cc:	69ba      	ldr	r2, [r7, #24]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d21d      	bcs.n	800b10e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	68da      	ldr	r2, [r3, #12]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b0e0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	695a      	ldr	r2, [r3, #20]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f022 0201 	bic.w	r2, r2, #1
 800b0f0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2220      	movs	r2, #32
 800b0f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2220      	movs	r2, #32
 800b0fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2200      	movs	r2, #0
 800b106:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800b10a:	2303      	movs	r3, #3
 800b10c:	e00f      	b.n	800b12e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	4013      	ands	r3, r2
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	bf0c      	ite	eq
 800b11e:	2301      	moveq	r3, #1
 800b120:	2300      	movne	r3, #0
 800b122:	b2db      	uxtb	r3, r3
 800b124:	461a      	mov	r2, r3
 800b126:	79fb      	ldrb	r3, [r7, #7]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d0c3      	beq.n	800b0b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b136:	b480      	push	{r7}
 800b138:	b083      	sub	sp, #12
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	68da      	ldr	r2, [r3, #12]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b14c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2220      	movs	r2, #32
 800b152:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800b156:	bf00      	nop
 800b158:	370c      	adds	r7, #12
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bc80      	pop	{r7}
 800b15e:	4770      	bx	lr

0800b160 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68da      	ldr	r2, [r3, #12]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b176:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	695a      	ldr	r2, [r3, #20]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f022 0201 	bic.w	r2, r2, #1
 800b186:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2220      	movs	r2, #32
 800b18c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	bc80      	pop	{r7}
 800b198:	4770      	bx	lr

0800b19a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b084      	sub	sp, #16
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b1b4:	68f8      	ldr	r0, [r7, #12]
 800b1b6:	f7ff fea8 	bl	800af0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1ba:	bf00      	nop
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b1c2:	b480      	push	{r7}
 800b1c4:	b085      	sub	sp, #20
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	2b21      	cmp	r3, #33	; 0x21
 800b1d4:	d13e      	bne.n	800b254 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1de:	d114      	bne.n	800b20a <UART_Transmit_IT+0x48>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	691b      	ldr	r3, [r3, #16]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d110      	bne.n	800b20a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6a1b      	ldr	r3, [r3, #32]
 800b1ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	881b      	ldrh	r3, [r3, #0]
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a1b      	ldr	r3, [r3, #32]
 800b202:	1c9a      	adds	r2, r3, #2
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	621a      	str	r2, [r3, #32]
 800b208:	e008      	b.n	800b21c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	1c59      	adds	r1, r3, #1
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	6211      	str	r1, [r2, #32]
 800b214:	781a      	ldrb	r2, [r3, #0]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b220:	b29b      	uxth	r3, r3
 800b222:	3b01      	subs	r3, #1
 800b224:	b29b      	uxth	r3, r3
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	4619      	mov	r1, r3
 800b22a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d10f      	bne.n	800b250 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	68da      	ldr	r2, [r3, #12]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b23e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	68da      	ldr	r2, [r3, #12]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b24e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b250:	2300      	movs	r3, #0
 800b252:	e000      	b.n	800b256 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b254:	2302      	movs	r3, #2
  }
}
 800b256:	4618      	mov	r0, r3
 800b258:	3714      	adds	r7, #20
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bc80      	pop	{r7}
 800b25e:	4770      	bx	lr

0800b260 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	68da      	ldr	r2, [r3, #12]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b276:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2220      	movs	r2, #32
 800b27c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f7f6 fdc1 	bl	8001e08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3708      	adds	r7, #8
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	2b22      	cmp	r3, #34	; 0x22
 800b2a2:	d170      	bne.n	800b386 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2ac:	d117      	bne.n	800b2de <UART_Receive_IT+0x4e>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d113      	bne.n	800b2de <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2be:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d6:	1c9a      	adds	r2, r3, #2
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	629a      	str	r2, [r3, #40]	; 0x28
 800b2dc:	e026      	b.n	800b32c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2f0:	d007      	beq.n	800b302 <UART_Receive_IT+0x72>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d10a      	bne.n	800b310 <UART_Receive_IT+0x80>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d106      	bne.n	800b310 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	b2da      	uxtb	r2, r3
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	701a      	strb	r2, [r3, #0]
 800b30e:	e008      	b.n	800b322 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	b2db      	uxtb	r3, r3
 800b318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b31c:	b2da      	uxtb	r2, r3
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b326:	1c5a      	adds	r2, r3, #1
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b330:	b29b      	uxth	r3, r3
 800b332:	3b01      	subs	r3, #1
 800b334:	b29b      	uxth	r3, r3
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	4619      	mov	r1, r3
 800b33a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d120      	bne.n	800b382 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	68da      	ldr	r2, [r3, #12]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f022 0220 	bic.w	r2, r2, #32
 800b34e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68da      	ldr	r2, [r3, #12]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b35e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	695a      	ldr	r2, [r3, #20]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f022 0201 	bic.w	r2, r2, #1
 800b36e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2220      	movs	r2, #32
 800b374:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f7ff fdb4 	bl	800aee6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800b37e:	2300      	movs	r3, #0
 800b380:	e002      	b.n	800b388 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800b382:	2300      	movs	r3, #0
 800b384:	e000      	b.n	800b388 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800b386:	2302      	movs	r3, #2
  }
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3710      	adds	r7, #16
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	691b      	ldr	r3, [r3, #16]
 800b39e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	68da      	ldr	r2, [r3, #12]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	430a      	orrs	r2, r1
 800b3ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	689a      	ldr	r2, [r3, #8]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	691b      	ldr	r3, [r3, #16]
 800b3b6:	431a      	orrs	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	695b      	ldr	r3, [r3, #20]
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	68db      	ldr	r3, [r3, #12]
 800b3c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b3ca:	f023 030c 	bic.w	r3, r3, #12
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	6812      	ldr	r2, [r2, #0]
 800b3d2:	68b9      	ldr	r1, [r7, #8]
 800b3d4:	430b      	orrs	r3, r1
 800b3d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	695b      	ldr	r3, [r3, #20]
 800b3de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	699a      	ldr	r2, [r3, #24]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	430a      	orrs	r2, r1
 800b3ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a2c      	ldr	r2, [pc, #176]	; (800b4a4 <UART_SetConfig+0x114>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d103      	bne.n	800b400 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b3f8:	f7fd f914 	bl	8008624 <HAL_RCC_GetPCLK2Freq>
 800b3fc:	60f8      	str	r0, [r7, #12]
 800b3fe:	e002      	b.n	800b406 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b400:	f7fd f8fc 	bl	80085fc <HAL_RCC_GetPCLK1Freq>
 800b404:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	4613      	mov	r3, r2
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	4413      	add	r3, r2
 800b40e:	009a      	lsls	r2, r3, #2
 800b410:	441a      	add	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	fbb2 f3f3 	udiv	r3, r2, r3
 800b41c:	4a22      	ldr	r2, [pc, #136]	; (800b4a8 <UART_SetConfig+0x118>)
 800b41e:	fba2 2303 	umull	r2, r3, r2, r3
 800b422:	095b      	lsrs	r3, r3, #5
 800b424:	0119      	lsls	r1, r3, #4
 800b426:	68fa      	ldr	r2, [r7, #12]
 800b428:	4613      	mov	r3, r2
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	4413      	add	r3, r2
 800b42e:	009a      	lsls	r2, r3, #2
 800b430:	441a      	add	r2, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	fbb2 f2f3 	udiv	r2, r2, r3
 800b43c:	4b1a      	ldr	r3, [pc, #104]	; (800b4a8 <UART_SetConfig+0x118>)
 800b43e:	fba3 0302 	umull	r0, r3, r3, r2
 800b442:	095b      	lsrs	r3, r3, #5
 800b444:	2064      	movs	r0, #100	; 0x64
 800b446:	fb00 f303 	mul.w	r3, r0, r3
 800b44a:	1ad3      	subs	r3, r2, r3
 800b44c:	011b      	lsls	r3, r3, #4
 800b44e:	3332      	adds	r3, #50	; 0x32
 800b450:	4a15      	ldr	r2, [pc, #84]	; (800b4a8 <UART_SetConfig+0x118>)
 800b452:	fba2 2303 	umull	r2, r3, r2, r3
 800b456:	095b      	lsrs	r3, r3, #5
 800b458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b45c:	4419      	add	r1, r3
 800b45e:	68fa      	ldr	r2, [r7, #12]
 800b460:	4613      	mov	r3, r2
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	4413      	add	r3, r2
 800b466:	009a      	lsls	r2, r3, #2
 800b468:	441a      	add	r2, r3
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	fbb2 f2f3 	udiv	r2, r2, r3
 800b474:	4b0c      	ldr	r3, [pc, #48]	; (800b4a8 <UART_SetConfig+0x118>)
 800b476:	fba3 0302 	umull	r0, r3, r3, r2
 800b47a:	095b      	lsrs	r3, r3, #5
 800b47c:	2064      	movs	r0, #100	; 0x64
 800b47e:	fb00 f303 	mul.w	r3, r0, r3
 800b482:	1ad3      	subs	r3, r2, r3
 800b484:	011b      	lsls	r3, r3, #4
 800b486:	3332      	adds	r3, #50	; 0x32
 800b488:	4a07      	ldr	r2, [pc, #28]	; (800b4a8 <UART_SetConfig+0x118>)
 800b48a:	fba2 2303 	umull	r2, r3, r2, r3
 800b48e:	095b      	lsrs	r3, r3, #5
 800b490:	f003 020f 	and.w	r2, r3, #15
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	440a      	add	r2, r1
 800b49a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b49c:	bf00      	nop
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	40013800 	.word	0x40013800
 800b4a8:	51eb851f 	.word	0x51eb851f
 800b4ac:	00000000 	.word	0x00000000

0800b4b0 <_ZN10ControllerC1Ev>:
#include "Controller.hpp"



Controller::Controller() {}
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b086      	sub	sp, #24
 800b4b4:	af04      	add	r7, sp, #16
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a6b      	ldr	r2, [pc, #428]	; (800b668 <_ZN10ControllerC1Ev+0x1b8>)
 800b4bc:	639a      	str	r2, [r3, #56]	; 0x38
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4a6a      	ldr	r2, [pc, #424]	; (800b66c <_ZN10ControllerC1Ev+0x1bc>)
 800b4c2:	63da      	str	r2, [r3, #60]	; 0x3c
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	22c8      	movs	r2, #200	; 0xc8
 800b4c8:	641a      	str	r2, [r3, #64]	; 0x40
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7f5 fbdc 	bl	8000c8c <__aeabi_i2f>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b4dc:	f7f5 fcde 	bl	8000e9c <__aeabi_fdiv>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	645a      	str	r2, [r3, #68]	; 0x44
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	4a61      	ldr	r2, [pc, #388]	; (800b670 <_ZN10ControllerC1Ev+0x1c0>)
 800b4ec:	649a      	str	r2, [r3, #72]	; 0x48
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	4a60      	ldr	r2, [pc, #384]	; (800b674 <_ZN10ControllerC1Ev+0x1c4>)
 800b4f2:	64da      	str	r2, [r3, #76]	; 0x4c
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4a60      	ldr	r2, [pc, #384]	; (800b678 <_ZN10ControllerC1Ev+0x1c8>)
 800b4f8:	651a      	str	r2, [r3, #80]	; 0x50
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f04f 0200 	mov.w	r2, #0
 800b500:	655a      	str	r2, [r3, #84]	; 0x54
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4a5d      	ldr	r2, [pc, #372]	; (800b67c <_ZN10ControllerC1Ev+0x1cc>)
 800b506:	659a      	str	r2, [r3, #88]	; 0x58
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f04f 0200 	mov.w	r2, #0
 800b50e:	65da      	str	r2, [r3, #92]	; 0x5c
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f04f 0200 	mov.w	r2, #0
 800b516:	661a      	str	r2, [r3, #96]	; 0x60
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	665a      	str	r2, [r3, #100]	; 0x64
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	669a      	str	r2, [r3, #104]	; 0x68
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	66da      	str	r2, [r3, #108]	; 0x6c
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a53      	ldr	r2, [pc, #332]	; (800b680 <_ZN10ControllerC1Ev+0x1d0>)
 800b534:	671a      	str	r2, [r3, #112]	; 0x70
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4a52      	ldr	r2, [pc, #328]	; (800b684 <_ZN10ControllerC1Ev+0x1d4>)
 800b53a:	675a      	str	r2, [r3, #116]	; 0x74
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	4a52      	ldr	r2, [pc, #328]	; (800b688 <_ZN10ControllerC1Ev+0x1d8>)
 800b540:	679a      	str	r2, [r3, #120]	; 0x78
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f04f 0200 	mov.w	r2, #0
 800b548:	67da      	str	r2, [r3, #124]	; 0x7c
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	4a4f      	ldr	r2, [pc, #316]	; (800b68c <_ZN10ControllerC1Ev+0x1dc>)
 800b54e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	4a4e      	ldr	r2, [pc, #312]	; (800b690 <_ZN10ControllerC1Ev+0x1e0>)
 800b556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	4a4d      	ldr	r2, [pc, #308]	; (800b694 <_ZN10ControllerC1Ev+0x1e4>)
 800b55e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f04f 0200 	mov.w	r2, #0
 800b568:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f04f 0200 	mov.w	r2, #0
 800b572:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800b57c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f04f 0200 	mov.w	r2, #0
 800b586:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f04f 0200 	mov.w	r2, #0
 800b590:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800b59a:	a32f      	add	r3, pc, #188	; (adr r3, 800b658 <_ZN10ControllerC1Ev+0x1a8>)
 800b59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5a4:	a32c      	add	r3, pc, #176	; (adr r3, 800b658 <_ZN10ControllerC1Ev+0x1a8>)
 800b5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5aa:	e9cd 2300 	strd	r2, r3, [sp]
 800b5ae:	a32c      	add	r3, pc, #176	; (adr r3, 800b660 <_ZN10ControllerC1Ev+0x1b0>)
 800b5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b4:	4608      	mov	r0, r1
 800b5b6:	f002 fa8d 	bl	800dad4 <_ZN3lpfC1Eddd>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f103 01c8 	add.w	r1, r3, #200	; 0xc8
 800b5c0:	a325      	add	r3, pc, #148	; (adr r3, 800b658 <_ZN10ControllerC1Ev+0x1a8>)
 800b5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5ca:	a323      	add	r3, pc, #140	; (adr r3, 800b658 <_ZN10ControllerC1Ev+0x1a8>)
 800b5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d0:	e9cd 2300 	strd	r2, r3, [sp]
 800b5d4:	a322      	add	r3, pc, #136	; (adr r3, 800b660 <_ZN10ControllerC1Ev+0x1b0>)
 800b5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5da:	4608      	mov	r0, r1
 800b5dc:	f002 fa7a 	bl	800dad4 <_ZN3lpfC1Eddd>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b5e6:	a31c      	add	r3, pc, #112	; (adr r3, 800b658 <_ZN10ControllerC1Ev+0x1a8>)
 800b5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5f0:	a319      	add	r3, pc, #100	; (adr r3, 800b658 <_ZN10ControllerC1Ev+0x1a8>)
 800b5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f6:	e9cd 2300 	strd	r2, r3, [sp]
 800b5fa:	a319      	add	r3, pc, #100	; (adr r3, 800b660 <_ZN10ControllerC1Ev+0x1b0>)
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	4608      	mov	r0, r1
 800b602:	f002 fa67 	bl	800dad4 <_ZN3lpfC1Eddd>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800b60c:	4618      	mov	r0, r3
 800b60e:	f001 fe5b 	bl	800d2c8 <_ZN3PIDC1Ev>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800b618:	4618      	mov	r0, r3
 800b61a:	f001 fe55 	bl	800d2c8 <_ZN3PIDC1Ev>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800b624:	4618      	mov	r0, r3
 800b626:	f001 fe4f 	bl	800d2c8 <_ZN3PIDC1Ev>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b630:	4618      	mov	r0, r3
 800b632:	f001 fe49 	bl	800d2c8 <_ZN3PIDC1Ev>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800b63c:	4618      	mov	r0, r3
 800b63e:	f001 fe43 	bl	800d2c8 <_ZN3PIDC1Ev>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 800b648:	4618      	mov	r0, r3
 800b64a:	f001 fe3d 	bl	800d2c8 <_ZN3PIDC1Ev>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	4618      	mov	r0, r3
 800b652:	3708      	adds	r7, #8
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	fc3b4f61 	.word	0xfc3b4f61
 800b65c:	3fa35935 	.word	0x3fa35935
 800b660:	4f0d844d 	.word	0x4f0d844d
 800b664:	3fed94af 	.word	0x3fed94af
 800b668:	44c1c000 	.word	0x44c1c000
 800b66c:	42654ca3 	.word	0x42654ca3
 800b670:	3fb33333 	.word	0x3fb33333
 800b674:	411cf5c3 	.word	0x411cf5c3
 800b678:	41f9d70a 	.word	0x41f9d70a
 800b67c:	3e4ccccd 	.word	0x3e4ccccd
 800b680:	40a00000 	.word	0x40a00000
 800b684:	41100000 	.word	0x41100000
 800b688:	41400000 	.word	0x41400000
 800b68c:	41200000 	.word	0x41200000
 800b690:	41700000 	.word	0x41700000
 800b694:	c0800000 	.word	0xc0800000

0800b698 <_ZN10Controller3RunEv>:

void Controller::Run (void) {
 800b698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b69c:	b092      	sub	sp, #72	; 0x48
 800b69e:	af04      	add	r7, sp, #16
 800b6a0:	6078      	str	r0, [r7, #4]
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);
		vel_controller_counter++;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a6:	1c5a      	adds	r2, r3, #1
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	625a      	str	r2, [r3, #36]	; 0x24

        roll  = state.angles[0];
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	60da      	str	r2, [r3, #12]
        pitch = state.angles[1];
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	611a      	str	r2, [r3, #16]
        yaw    = state.angles[2];
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	615a      	str	r2, [r3, #20]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	619a      	str	r2, [r3, #24]
        pitch_rate = state.rates[1];
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	61da      	str	r2, [r3, #28]
        yaw_rate   = state.rates[2];
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	621a      	str	r2, [r3, #32]

        roll_bias = state.bias[0];
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	609a      	str	r2, [r3, #8]
        
    if(!swarm) {
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800b70c:	f083 0301 	eor.w	r3, r3, #1
 800b710:	b2db      	uxtb	r3, r3
 800b712:	2b00      	cmp	r3, #0
 800b714:	d01c      	beq.n	800b750 <_ZN10Controller3RunEv+0xb8>
    	  //bench settings
//        Kp_roll = 0.2; //0.3
//        Ki_roll = 0.1;  //0.008
//        Kd_roll = 0.05; //0.015

         Kp_roll = 0.26; //0.3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	4a53      	ldr	r2, [pc, #332]	; (800b868 <_ZN10Controller3RunEv+0x1d0>)
 800b71a:	659a      	str	r2, [r3, #88]	; 0x58
         Ki_roll = 0.05;  //0.008
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4a53      	ldr	r2, [pc, #332]	; (800b86c <_ZN10Controller3RunEv+0x1d4>)
 800b720:	65da      	str	r2, [r3, #92]	; 0x5c
         Kd_roll = 0.02; //0.015
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a52      	ldr	r2, [pc, #328]	; (800b870 <_ZN10Controller3RunEv+0x1d8>)
 800b726:	661a      	str	r2, [r3, #96]	; 0x60

         Kp_pitch = Kp_roll;	//0.8
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	665a      	str	r2, [r3, #100]	; 0x64
         Ki_pitch = Ki_roll;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	669a      	str	r2, [r3, #104]	; 0x68
         Kd_pitch = Kd_roll;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	66da      	str	r2, [r3, #108]	; 0x6c

         Kp_yaw = 10;// 1;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	4a4c      	ldr	r2, [pc, #304]	; (800b874 <_ZN10Controller3RunEv+0x1dc>)
 800b744:	671a      	str	r2, [r3, #112]	; 0x70
         Ki_yaw = 0.0;// 1;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f04f 0200 	mov.w	r2, #0
 800b74c:	675a      	str	r2, [r3, #116]	; 0x74
 800b74e:	e01b      	b.n	800b788 <_ZN10Controller3RunEv+0xf0>
    }

    else {


        Kp_roll = 0.9; //0.3
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4a49      	ldr	r2, [pc, #292]	; (800b878 <_ZN10Controller3RunEv+0x1e0>)
 800b754:	659a      	str	r2, [r3, #88]	; 0x58
        Ki_roll = 0.00;  //0.008
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f04f 0200 	mov.w	r2, #0
 800b75c:	65da      	str	r2, [r3, #92]	; 0x5c
        Kd_roll = 0.03; //0.007 0.01
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	4a46      	ldr	r2, [pc, #280]	; (800b87c <_ZN10Controller3RunEv+0x1e4>)
 800b762:	661a      	str	r2, [r3, #96]	; 0x60

        Kp_pitch = Kp_roll;	//0.8
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	665a      	str	r2, [r3, #100]	; 0x64
        Ki_pitch = Ki_roll;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	669a      	str	r2, [r3, #104]	; 0x68
        Kd_pitch = Kd_roll;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	66da      	str	r2, [r3, #108]	; 0x6c

        Kp_yaw = 5.0;// 1;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4a40      	ldr	r2, [pc, #256]	; (800b880 <_ZN10Controller3RunEv+0x1e8>)
 800b780:	671a      	str	r2, [r3, #112]	; 0x70
        Ki_yaw = 10;// 1;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	4a3b      	ldr	r2, [pc, #236]	; (800b874 <_ZN10Controller3RunEv+0x1dc>)
 800b786:	675a      	str	r2, [r3, #116]	; 0x74
    }

    int thr;
    int thr2 = pid_roll.Sat(ch3, 2000, 1000);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 800b794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b798:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b79c:	f002 f924 	bl	800d9e8 <_ZN3PID3SatEfii>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7f5 fca2 	bl	80010ec <__aeabi_f2iz>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	633b      	str	r3, [r7, #48]	; 0x30

    switch(mod) {
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800b7b2:	2b02      	cmp	r3, #2
 800b7b4:	f000 8156 	beq.w	800ba64 <_ZN10Controller3RunEv+0x3cc>
 800b7b8:	2b02      	cmp	r3, #2
 800b7ba:	f300 81d7 	bgt.w	800bb6c <_ZN10Controller3RunEv+0x4d4>
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d002      	beq.n	800b7c8 <_ZN10Controller3RunEv+0x130>
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d05e      	beq.n	800b884 <_ZN10Controller3RunEv+0x1ec>
 800b7c6:	e1d1      	b.n	800bb6c <_ZN10Controller3RunEv+0x4d4>
    	case STABILIZE:
    	{
    	    thr = pid_roll.Sat(ch3, 1800, 1000);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 800b7d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b7d8:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800b7dc:	f002 f904 	bl	800d9e8 <_ZN3PID3SatEfii>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7f5 fc82 	bl	80010ec <__aeabi_f2iz>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	637b      	str	r3, [r7, #52]	; 0x34
            roll_des     = state_des.angles[0];
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 	 = state_des.angles[1];
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des = state_des.rates[2];
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

            roll_des 	  	= roll_des_filt.Run(roll_des);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b81c:	4619      	mov	r1, r3
 800b81e:	4610      	mov	r0, r2
 800b820:	f002 f973 	bl	800db0a <_ZN3lpf3RunEf>
 800b824:	4602      	mov	r2, r0
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800b838:	4619      	mov	r1, r3
 800b83a:	4610      	mov	r0, r2
 800b83c:	f002 f965 	bl	800db0a <_ZN3lpf3RunEf>
 800b840:	4602      	mov	r2, r0
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800b854:	4619      	mov	r1, r3
 800b856:	4610      	mov	r0, r2
 800b858:	f002 f957 	bl	800db0a <_ZN3lpf3RunEf>
 800b85c:	4602      	mov	r2, r0
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    	    break;
 800b864:	e182      	b.n	800bb6c <_ZN10Controller3RunEv+0x4d4>
 800b866:	bf00      	nop
 800b868:	3e851eb8 	.word	0x3e851eb8
 800b86c:	3d4ccccd 	.word	0x3d4ccccd
 800b870:	3ca3d70a 	.word	0x3ca3d70a
 800b874:	41200000 	.word	0x41200000
 800b878:	3f666666 	.word	0x3f666666
 800b87c:	3cf5c28f 	.word	0x3cf5c28f
 800b880:	40a00000 	.word	0x40a00000
    	}

    	case ALT_HOLD:
    	{
    		F = p_alt.PI_Vel(z0, z, z_vel, Kp_alt, Ki_alt, ch3) + m*g;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f503 6680 	add.w	r6, r3, #1024	; 0x400
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8d3 819c 	ldr.w	r8, [r3, #412]	; 0x19c
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 91a0 	ldr.w	r9, [r3, #416]	; 0x1a0
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 a198 	ldr.w	sl, [r3, #408]	; 0x198
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7f5 fc42 	bl	8001138 <__aeabi_f2uiz>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	9302      	str	r3, [sp, #8]
 800b8b8:	9501      	str	r5, [sp, #4]
 800b8ba:	9400      	str	r4, [sp, #0]
 800b8bc:	4653      	mov	r3, sl
 800b8be:	464a      	mov	r2, r9
 800b8c0:	4641      	mov	r1, r8
 800b8c2:	4630      	mov	r0, r6
 800b8c4:	f001 fd9a 	bl	800d3fc <_ZN3PID6PI_VelEfffffj>
 800b8c8:	4604      	mov	r4, r0
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	4610      	mov	r0, r2
 800b8d6:	f7f5 fa2d 	bl	8000d34 <__aeabi_fmul>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	4619      	mov	r1, r3
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f7f5 f920 	bl	8000b24 <__addsf3>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			float deg2rad = 0.0175;
 800b8ee:	4b5c      	ldr	r3, [pc, #368]	; (800ba60 <_ZN10Controller3RunEv+0x3c8>)
 800b8f0:	62fb      	str	r3, [r7, #44]	; 0x2c
			float roll_r = roll * deg2rad;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8fa:	f7f5 fa1b 	bl	8000d34 <__aeabi_fmul>
 800b8fe:	4603      	mov	r3, r0
 800b900:	62bb      	str	r3, [r7, #40]	; 0x28
			float pitch_r = pitch * deg2rad;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	691b      	ldr	r3, [r3, #16]
 800b906:	4619      	mov	r1, r3
 800b908:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b90a:	f7f5 fa13 	bl	8000d34 <__aeabi_fmul>
 800b90e:	4603      	mov	r3, r0
 800b910:	627b      	str	r3, [r7, #36]	; 0x24
			float b2e = 1 / cos(roll_r) / cos(pitch_r);
 800b912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b914:	f7f6 f8ac 	bl	8001a70 <_ZSt3cosf>
 800b918:	4603      	mov	r3, r0
 800b91a:	4619      	mov	r1, r3
 800b91c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b920:	f7f5 fabc 	bl	8000e9c <__aeabi_fdiv>
 800b924:	4603      	mov	r3, r0
 800b926:	461c      	mov	r4, r3
 800b928:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b92a:	f7f6 f8a1 	bl	8001a70 <_ZSt3cosf>
 800b92e:	4603      	mov	r3, r0
 800b930:	4619      	mov	r1, r3
 800b932:	4620      	mov	r0, r4
 800b934:	f7f5 fab2 	bl	8000e9c <__aeabi_fdiv>
 800b938:	4603      	mov	r3, r0
 800b93a:	623b      	str	r3, [r7, #32]

			F = F * b2e ; // Body to Earth
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800b942:	6a39      	ldr	r1, [r7, #32]
 800b944:	4618      	mov	r0, r3
 800b946:	f7f5 f9f5 	bl	8000d34 <__aeabi_fmul>
 800b94a:	4603      	mov	r3, r0
 800b94c:	461a      	mov	r2, r3
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			F = p_alt.Sat(F, F_max, F_min);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 514c 	ldr.w	r5, [r3, #332]	; 0x14c
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b964:	4618      	mov	r0, r3
 800b966:	f7f5 fbc1 	bl	80010ec <__aeabi_f2iz>
 800b96a:	4606      	mov	r6, r0
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b970:	4618      	mov	r0, r3
 800b972:	f7f5 fbbb 	bl	80010ec <__aeabi_f2iz>
 800b976:	4603      	mov	r3, r0
 800b978:	4632      	mov	r2, r6
 800b97a:	4629      	mov	r1, r5
 800b97c:	4620      	mov	r0, r4
 800b97e:	f002 f833 	bl	800d9e8 <_ZN3PID3SatEfii>
 800b982:	4602      	mov	r2, r0
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			thr = p_alt.F2thr(F);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800b996:	4619      	mov	r1, r3
 800b998:	4610      	mov	r0, r2
 800b99a:	f002 f855 	bl	800da48 <_ZN3PID5F2thrEf>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	637b      	str	r3, [r7, #52]	; 0x34
			thr = p_alt.Sat(thr, 1800, 1100);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 800b9a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b9aa:	f7f5 f96f 	bl	8000c8c <__aeabi_i2f>
 800b9ae:	4601      	mov	r1, r0
 800b9b0:	f240 434c 	movw	r3, #1100	; 0x44c
 800b9b4:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f002 f815 	bl	800d9e8 <_ZN3PID3SatEfii>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7f5 fb93 	bl	80010ec <__aeabi_f2iz>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	637b      	str	r3, [r7, #52]	; 0x34
			alt_thr = thr;
 800b9ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b9cc:	f7f5 f95e 	bl	8000c8c <__aeabi_i2f>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
			z0 = p_alt.zi;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 24ac 	ldr.w	r2, [r3, #1196]	; 0x4ac
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

            roll_des     = state_des.angles[0];
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 	 = state_des.angles[1];
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des = state_des.rates[2];
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

            roll_des 	  	= roll_des_filt.Run(roll_des);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ba14:	4619      	mov	r1, r3
 800ba16:	4610      	mov	r0, r2
 800ba18:	f002 f877 	bl	800db0a <_ZN3lpf3RunEf>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800ba30:	4619      	mov	r1, r3
 800ba32:	4610      	mov	r0, r2
 800ba34:	f002 f869 	bl	800db0a <_ZN3lpf3RunEf>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	4610      	mov	r0, r2
 800ba50:	f002 f85b 	bl	800db0a <_ZN3lpf3RunEf>
 800ba54:	4602      	mov	r2, r0
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
			break;
 800ba5c:	e086      	b.n	800bb6c <_ZN10Controller3RunEv+0x4d4>
 800ba5e:	bf00      	nop
 800ba60:	3c8f5c29 	.word	0x3c8f5c29
    	}

    	case LOITER:
    	{
    	    thr = pid_roll.Sat(ch3, 1800, 1000);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 800ba70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba74:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800ba78:	f001 ffb6 	bl	800d9e8 <_ZN3PID3SatEfii>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7f5 fb34 	bl	80010ec <__aeabi_f2iz>
 800ba84:	4603      	mov	r3, r0
 800ba86:	637b      	str	r3, [r7, #52]	; 0x34

    		//roll_des  = p_velx.PI_Vel(0, y, vy, Kp_vel, Ki_vel, ch1);

    	    if(vel_controller_counter >= 10) {
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8c:	2b09      	cmp	r3, #9
 800ba8e:	d958      	bls.n	800bb42 <_ZN10Controller3RunEv+0x4aa>
    	    	//PID_Pos(float pos_des, float pos, float Kp, float Ki, float Kd)
    	    	vel_controller_counter = 0;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	625a      	str	r2, [r3, #36]	; 0x24
        		pitch_des = p_velx.PID_Pos(x0,x,Kp_velx,Ki_velx,Kd_velx);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f503 6097 	add.w	r0, r3, #1208	; 0x4b8
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800baba:	9201      	str	r2, [sp, #4]
 800babc:	9300      	str	r3, [sp, #0]
 800babe:	462b      	mov	r3, r5
 800bac0:	4622      	mov	r2, r4
 800bac2:	f001 fdf1 	bl	800d6a8 <_ZN3PID7PID_PosEfffff>
 800bac6:	4602      	mov	r2, r0
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        		roll_des  = p_vely.PID_Pos(y0,y,Kp_vely,Ki_vely,Kd_vely);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f503 60ae 	add.w	r0, r3, #1392	; 0x570
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 41c0 	ldr.w	r4, [r3, #448]	; 0x1c0
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 800baf2:	9201      	str	r2, [sp, #4]
 800baf4:	9300      	str	r3, [sp, #0]
 800baf6:	462b      	mov	r3, r5
 800baf8:	4622      	mov	r2, r4
 800bafa:	f001 fdd5 	bl	800d6a8 <_ZN3PID7PID_PosEfffff>
 800bafe:	4602      	mov	r2, r0
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc

        		pitch_des = p_velx.Sat(pitch_des, 20, -20);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f503 6097 	add.w	r0, r3, #1208	; 0x4b8
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 800bb12:	f06f 0313 	mvn.w	r3, #19
 800bb16:	2214      	movs	r2, #20
 800bb18:	f001 ff66 	bl	800d9e8 <_ZN3PID3SatEfii>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        		roll_des = p_vely.Sat(roll_des, 20, -20);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f503 60ae 	add.w	r0, r3, #1392	; 0x570
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
 800bb30:	f06f 0313 	mvn.w	r3, #19
 800bb34:	2214      	movs	r2, #20
 800bb36:	f001 ff57 	bl	800d9e8 <_ZN3PID3SatEfii>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc

    	    }

            yaw_rate_des = state_des.rates[2];
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	4610      	mov	r0, r2
 800bb5e:	f001 ffd4 	bl	800db0a <_ZN3lpf3RunEf>
 800bb62:	4602      	mov	r2, r0
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

    		break;
 800bb6a:	bf00      	nop
    	}

    }

	roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle,Ki_angle) + roll_des;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	68da      	ldr	r2, [r3, #12]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb84:	9300      	str	r3, [sp, #0]
 800bb86:	4623      	mov	r3, r4
 800bb88:	f001 fbfa 	bl	800d380 <_ZN3PID7P_AngleEffff>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bb94:	4619      	mov	r1, r3
 800bb96:	4610      	mov	r0, r2
 800bb98:	f7f4 ffc4 	bl	8000b24 <__addsf3>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	461a      	mov	r2, r3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle,Ki_angle) + pitch_des;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f503 7024 	add.w	r0, r3, #656	; 0x290
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	691a      	ldr	r2, [r3, #16]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbbe:	9300      	str	r3, [sp, #0]
 800bbc0:	4623      	mov	r3, r4
 800bbc2:	f001 fbdd 	bl	800d380 <_ZN3PID7P_AngleEffff>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800bbce:	4619      	mov	r1, r3
 800bbd0:	4610      	mov	r0, r2
 800bbd2:	f7f4 ffa7 	bl	8000b24 <__addsf3>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	461a      	mov	r2, r3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

	float pd_roll_ff  = pid_roll.RateFF(roll_rate_des);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800bbec:	4619      	mov	r1, r3
 800bbee:	4610      	mov	r0, r2
 800bbf0:	f001 fc62 	bl	800d4b8 <_ZN3PID6RateFFEf>
 800bbf4:	61f8      	str	r0, [r7, #28]
	float pd_pitch_ff = pid_roll.RateFF(pitch_rate_des);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800bc02:	4619      	mov	r1, r3
 800bc04:	4610      	mov	r0, r2
 800bc06:	f001 fc57 	bl	800d4b8 <_ZN3PID6RateFFEf>
 800bc0a:	61b8      	str	r0, [r7, #24]

	pd_roll  = pid_roll.PID_Rate2(roll_rate_des,roll_rate, roll, Kp_roll, Ki_roll, Kd_roll, Kp_angle);// + pd_roll_ff;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	699e      	ldr	r6, [r3, #24]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bc2a:	6879      	ldr	r1, [r7, #4]
 800bc2c:	6e09      	ldr	r1, [r1, #96]	; 0x60
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800bc32:	9003      	str	r0, [sp, #12]
 800bc34:	9102      	str	r1, [sp, #8]
 800bc36:	9201      	str	r2, [sp, #4]
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	4663      	mov	r3, ip
 800bc3c:	4632      	mov	r2, r6
 800bc3e:	4629      	mov	r1, r5
 800bc40:	4620      	mov	r0, r4
 800bc42:	f001 fc89 	bl	800d558 <_ZN3PID9PID_Rate2Efffffff>
 800bc46:	4602      	mov	r2, r0
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	pd_pitch = pid_pitch.PID_Rate2(pitch_rate_des,pitch_rate, pitch, Kp_pitch,Ki_pitch,Kd_pitch, Kp_angle);// + pd_pitch_ff;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f503 7424 	add.w	r4, r3, #656	; 0x290
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 5148 	ldr.w	r5, [r3, #328]	; 0x148
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	69de      	ldr	r6, [r3, #28]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800bc6c:	6879      	ldr	r1, [r7, #4]
 800bc6e:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800bc74:	9003      	str	r0, [sp, #12]
 800bc76:	9102      	str	r1, [sp, #8]
 800bc78:	9201      	str	r2, [sp, #4]
 800bc7a:	9300      	str	r3, [sp, #0]
 800bc7c:	4663      	mov	r3, ip
 800bc7e:	4632      	mov	r2, r6
 800bc80:	4629      	mov	r1, r5
 800bc82:	4620      	mov	r0, r4
 800bc84:	f001 fc68 	bl	800d558 <_ZN3PID9PID_Rate2Efffffff>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	p_yaw    = pid_yaw.PD_Rate(yaw_rate_des,yaw_rate,Kp_yaw,Ki_yaw,0);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f503 7052 	add.w	r0, r3, #840	; 0x348
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8d3 11d4 	ldr.w	r1, [r3, #468]	; 0x1d4
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a1a      	ldr	r2, [r3, #32]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bca8:	f04f 0500 	mov.w	r5, #0
 800bcac:	9501      	str	r5, [sp, #4]
 800bcae:	9300      	str	r3, [sp, #0]
 800bcb0:	4623      	mov	r3, r4
 800bcb2:	f001 fd37 	bl	800d724 <_ZN3PID7PD_RateEfffff>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140


#ifdef UAV1


    int pwm1 = thr + pd_pitch - pd_roll  - p_yaw + PITCH_TRIM - ROLL_TRIM;
 800bcbe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bcc0:	f7f4 ffe4 	bl	8000c8c <__aeabi_i2f>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800bccc:	4619      	mov	r1, r3
 800bcce:	4610      	mov	r0, r2
 800bcd0:	f7f4 ff28 	bl	8000b24 <__addsf3>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800bcde:	4619      	mov	r1, r3
 800bce0:	4610      	mov	r0, r2
 800bce2:	f7f4 ff1d 	bl	8000b20 <__aeabi_fsub>
 800bce6:	4603      	mov	r3, r0
 800bce8:	461a      	mov	r2, r3
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	4610      	mov	r0, r2
 800bcf4:	f7f4 ff14 	bl	8000b20 <__aeabi_fsub>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	4982      	ldr	r1, [pc, #520]	; (800bf04 <_ZN10Controller3RunEv+0x86c>)
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7f4 ff11 	bl	8000b24 <__addsf3>
 800bd02:	4603      	mov	r3, r0
 800bd04:	4980      	ldr	r1, [pc, #512]	; (800bf08 <_ZN10Controller3RunEv+0x870>)
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7f4 ff0a 	bl	8000b20 <__aeabi_fsub>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7f5 f9ec 	bl	80010ec <__aeabi_f2iz>
 800bd14:	4603      	mov	r3, r0
 800bd16:	617b      	str	r3, [r7, #20]
    int pwm2 = thr - pd_pitch + pd_roll  - p_yaw - PITCH_TRIM + ROLL_TRIM;
 800bd18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bd1a:	f7f4 ffb7 	bl	8000c8c <__aeabi_i2f>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800bd26:	4619      	mov	r1, r3
 800bd28:	4610      	mov	r0, r2
 800bd2a:	f7f4 fef9 	bl	8000b20 <__aeabi_fsub>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	461a      	mov	r2, r3
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800bd38:	4619      	mov	r1, r3
 800bd3a:	4610      	mov	r0, r2
 800bd3c:	f7f4 fef2 	bl	8000b24 <__addsf3>
 800bd40:	4603      	mov	r3, r0
 800bd42:	461a      	mov	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	4610      	mov	r0, r2
 800bd4e:	f7f4 fee7 	bl	8000b20 <__aeabi_fsub>
 800bd52:	4603      	mov	r3, r0
 800bd54:	496b      	ldr	r1, [pc, #428]	; (800bf04 <_ZN10Controller3RunEv+0x86c>)
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7f4 fee2 	bl	8000b20 <__aeabi_fsub>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	496a      	ldr	r1, [pc, #424]	; (800bf08 <_ZN10Controller3RunEv+0x870>)
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7f4 fedf 	bl	8000b24 <__addsf3>
 800bd66:	4603      	mov	r3, r0
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7f5 f9bf 	bl	80010ec <__aeabi_f2iz>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	613b      	str	r3, [r7, #16]
    int pwm3 = thr + pd_pitch + pd_roll  + p_yaw + PITCH_TRIM + ROLL_TRIM;
 800bd72:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bd74:	f7f4 ff8a 	bl	8000c8c <__aeabi_i2f>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800bd80:	4619      	mov	r1, r3
 800bd82:	4610      	mov	r0, r2
 800bd84:	f7f4 fece 	bl	8000b24 <__addsf3>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800bd92:	4619      	mov	r1, r3
 800bd94:	4610      	mov	r0, r2
 800bd96:	f7f4 fec5 	bl	8000b24 <__addsf3>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bda4:	4619      	mov	r1, r3
 800bda6:	4610      	mov	r0, r2
 800bda8:	f7f4 febc 	bl	8000b24 <__addsf3>
 800bdac:	4603      	mov	r3, r0
 800bdae:	4955      	ldr	r1, [pc, #340]	; (800bf04 <_ZN10Controller3RunEv+0x86c>)
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7f4 feb7 	bl	8000b24 <__addsf3>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	4953      	ldr	r1, [pc, #332]	; (800bf08 <_ZN10Controller3RunEv+0x870>)
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7f4 feb2 	bl	8000b24 <__addsf3>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7f5 f992 	bl	80010ec <__aeabi_f2iz>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	60fb      	str	r3, [r7, #12]
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw - PITCH_TRIM - ROLL_TRIM;
 800bdcc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bdce:	f7f4 ff5d 	bl	8000c8c <__aeabi_i2f>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800bdda:	4619      	mov	r1, r3
 800bddc:	4610      	mov	r0, r2
 800bdde:	f7f4 fe9f 	bl	8000b20 <__aeabi_fsub>
 800bde2:	4603      	mov	r3, r0
 800bde4:	461a      	mov	r2, r3
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800bdec:	4619      	mov	r1, r3
 800bdee:	4610      	mov	r0, r2
 800bdf0:	f7f4 fe96 	bl	8000b20 <__aeabi_fsub>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bdfe:	4619      	mov	r1, r3
 800be00:	4610      	mov	r0, r2
 800be02:	f7f4 fe8f 	bl	8000b24 <__addsf3>
 800be06:	4603      	mov	r3, r0
 800be08:	493e      	ldr	r1, [pc, #248]	; (800bf04 <_ZN10Controller3RunEv+0x86c>)
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7f4 fe88 	bl	8000b20 <__aeabi_fsub>
 800be10:	4603      	mov	r3, r0
 800be12:	493d      	ldr	r1, [pc, #244]	; (800bf08 <_ZN10Controller3RunEv+0x870>)
 800be14:	4618      	mov	r0, r3
 800be16:	f7f4 fe83 	bl	8000b20 <__aeabi_fsub>
 800be1a:	4603      	mov	r3, r0
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7f5 f965 	bl	80010ec <__aeabi_f2iz>
 800be22:	4603      	mov	r3, r0
 800be24:	60bb      	str	r3, [r7, #8]
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw - PITCH_TRIM - ROLL_TRIM;

#endif

    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800be2c:	6978      	ldr	r0, [r7, #20]
 800be2e:	f7f4 ff2d 	bl	8000c8c <__aeabi_i2f>
 800be32:	4601      	mov	r1, r0
 800be34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be36:	9300      	str	r3, [sp, #0]
 800be38:	f240 434c 	movw	r3, #1100	; 0x44c
 800be3c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800be40:	4620      	mov	r0, r4
 800be42:	f001 fd97 	bl	800d974 <_ZN3PID3SatEfiii>
 800be46:	4603      	mov	r3, r0
 800be48:	4618      	mov	r0, r3
 800be4a:	f7f5 f94f 	bl	80010ec <__aeabi_f2iz>
 800be4e:	4603      	mov	r3, r0
 800be50:	617b      	str	r3, [r7, #20]
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800be58:	6938      	ldr	r0, [r7, #16]
 800be5a:	f7f4 ff17 	bl	8000c8c <__aeabi_i2f>
 800be5e:	4601      	mov	r1, r0
 800be60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be62:	9300      	str	r3, [sp, #0]
 800be64:	f240 434c 	movw	r3, #1100	; 0x44c
 800be68:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800be6c:	4620      	mov	r0, r4
 800be6e:	f001 fd81 	bl	800d974 <_ZN3PID3SatEfiii>
 800be72:	4603      	mov	r3, r0
 800be74:	4618      	mov	r0, r3
 800be76:	f7f5 f939 	bl	80010ec <__aeabi_f2iz>
 800be7a:	4603      	mov	r3, r0
 800be7c:	613b      	str	r3, [r7, #16]
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800be84:	68f8      	ldr	r0, [r7, #12]
 800be86:	f7f4 ff01 	bl	8000c8c <__aeabi_i2f>
 800be8a:	4601      	mov	r1, r0
 800be8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be8e:	9300      	str	r3, [sp, #0]
 800be90:	f240 434c 	movw	r3, #1100	; 0x44c
 800be94:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800be98:	4620      	mov	r0, r4
 800be9a:	f001 fd6b 	bl	800d974 <_ZN3PID3SatEfiii>
 800be9e:	4603      	mov	r3, r0
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7f5 f923 	bl	80010ec <__aeabi_f2iz>
 800bea6:	4603      	mov	r3, r0
 800bea8:	60fb      	str	r3, [r7, #12]
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800beb0:	68b8      	ldr	r0, [r7, #8]
 800beb2:	f7f4 feeb 	bl	8000c8c <__aeabi_i2f>
 800beb6:	4601      	mov	r1, r0
 800beb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beba:	9300      	str	r3, [sp, #0]
 800bebc:	f240 434c 	movw	r3, #1100	; 0x44c
 800bec0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bec4:	4620      	mov	r0, r4
 800bec6:	f001 fd55 	bl	800d974 <_ZN3PID3SatEfiii>
 800beca:	4603      	mov	r3, r0
 800becc:	4618      	mov	r0, r3
 800bece:	f7f5 f90d 	bl	80010ec <__aeabi_f2iz>
 800bed2:	4603      	mov	r3, r0
 800bed4:	60bb      	str	r3, [r7, #8]
    controller_output_pwm2[1] = thr - pd_pitch + pd_roll  + p_yaw;
    controller_output_pwm2[2] = thr + pd_pitch + pd_roll  - p_yaw;
    controller_output_pwm2[3] = thr - pd_pitch - pd_roll  - p_yaw;
    */

    if(swarm) {
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d015      	beq.n	800bf0c <_ZN10Controller3RunEv+0x874>
        controller_output_pwm2[0] = pwm1;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	697a      	ldr	r2, [r7, #20]
 800bee4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        controller_output_pwm2[1] = pwm2;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	693a      	ldr	r2, [r7, #16]
 800beec:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
        controller_output_pwm2[2] = pwm3;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	68fa      	ldr	r2, [r7, #12]
 800bef4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        controller_output_pwm2[3] = pwm4;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 800bf00:	e018      	b.n	800bf34 <_ZN10Controller3RunEv+0x89c>
 800bf02:	bf00      	nop
 800bf04:	41f00000 	.word	0x41f00000
 800bf08:	41500000 	.word	0x41500000
    }

    else {
        controller_output_pwm2[0] = 1000;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf12:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        controller_output_pwm2[1] = 1000;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf1c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
        controller_output_pwm2[2] = 1000;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf26:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        controller_output_pwm2[3] = 1000;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf30:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    }



    //Saturate pwm values
    controller_output_pwm2[0] = (int)pid_roll.Sat(controller_output_pwm2[0],PWM_UPPER,1000,thr);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7f4 fea3 	bl	8000c8c <__aeabi_i2f>
 800bf46:	4601      	mov	r1, r0
 800bf48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf4a:	9300      	str	r3, [sp, #0]
 800bf4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bf50:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bf54:	4620      	mov	r0, r4
 800bf56:	f001 fd0d 	bl	800d974 <_ZN3PID3SatEfiii>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7f5 f8c5 	bl	80010ec <__aeabi_f2iz>
 800bf62:	4602      	mov	r2, r0
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    controller_output_pwm2[1] = (int)pid_roll.Sat(controller_output_pwm2[1],PWM_UPPER,1000,thr);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7f4 fe88 	bl	8000c8c <__aeabi_i2f>
 800bf7c:	4601      	mov	r1, r0
 800bf7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf80:	9300      	str	r3, [sp, #0]
 800bf82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bf86:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	f001 fcf2 	bl	800d974 <_ZN3PID3SatEfiii>
 800bf90:	4603      	mov	r3, r0
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7f5 f8aa 	bl	80010ec <__aeabi_f2iz>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    controller_output_pwm2[2] = (int)pid_roll.Sat(controller_output_pwm2[2],PWM_UPPER,1000,thr);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7f4 fe6d 	bl	8000c8c <__aeabi_i2f>
 800bfb2:	4601      	mov	r1, r0
 800bfb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfb6:	9300      	str	r3, [sp, #0]
 800bfb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bfbc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f001 fcd7 	bl	800d974 <_ZN3PID3SatEfiii>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7f5 f88f 	bl	80010ec <__aeabi_f2iz>
 800bfce:	4602      	mov	r2, r0
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    controller_output_pwm2[3] = (int)pid_roll.Sat(controller_output_pwm2[3],PWM_UPPER,1000,thr);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7f4 fe52 	bl	8000c8c <__aeabi_i2f>
 800bfe8:	4601      	mov	r1, r0
 800bfea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfec:	9300      	str	r3, [sp, #0]
 800bfee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bff2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bff6:	4620      	mov	r0, r4
 800bff8:	f001 fcbc 	bl	800d974 <_ZN3PID3SatEfiii>
 800bffc:	4603      	mov	r3, r0
 800bffe:	4618      	mov	r0, r3
 800c000:	f7f5 f874 	bl	80010ec <__aeabi_f2iz>
 800c004:	4602      	mov	r2, r0
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    w3 = pid_roll.pwm2mot(pwm3,-1);
    w4 = pid_roll.pwm2mot(pwm4,-1);
*/

   // std::vector<float> controller_output = 	{w1,w2,w3,w4};
    controller_output_pwm[0] = pwm1;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	697a      	ldr	r2, [r7, #20]
 800c010:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    controller_output_pwm[1] = pwm2;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	693a      	ldr	r2, [r7, #16]
 800c018:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    controller_output_pwm[2] = pwm3;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	68fa      	ldr	r2, [r7, #12]
 800c020:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    controller_output_pwm[3] = pwm4;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	68ba      	ldr	r2, [r7, #8]
 800c028:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

  //  return controller_output;
}
 800c02c:	bf00      	nop
 800c02e:	3738      	adds	r7, #56	; 0x38
 800c030:	46bd      	mov	sp, r7
 800c032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c036:	bf00      	nop

0800c038 <_ZN10ControllerD1Ev>:

Controller::~Controller() {}
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 800c046:	4618      	mov	r0, r3
 800c048:	f001 fd36 	bl	800dab8 <_ZN3PIDD1Ev>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800c052:	4618      	mov	r0, r3
 800c054:	f001 fd30 	bl	800dab8 <_ZN3PIDD1Ev>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c05e:	4618      	mov	r0, r3
 800c060:	f001 fd2a 	bl	800dab8 <_ZN3PIDD1Ev>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800c06a:	4618      	mov	r0, r3
 800c06c:	f001 fd24 	bl	800dab8 <_ZN3PIDD1Ev>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800c076:	4618      	mov	r0, r3
 800c078:	f001 fd1e 	bl	800dab8 <_ZN3PIDD1Ev>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800c082:	4618      	mov	r0, r3
 800c084:	f001 fd18 	bl	800dab8 <_ZN3PIDD1Ev>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	33f0      	adds	r3, #240	; 0xf0
 800c08c:	4618      	mov	r0, r3
 800c08e:	f001 fd92 	bl	800dbb6 <_ZN3lpfD1Ev>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	33c8      	adds	r3, #200	; 0xc8
 800c096:	4618      	mov	r0, r3
 800c098:	f001 fd8d 	bl	800dbb6 <_ZN3lpfD1Ev>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	33a0      	adds	r3, #160	; 0xa0
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f001 fd88 	bl	800dbb6 <_ZN3lpfD1Ev>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3708      	adds	r7, #8
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <_ZN15Kalman_FiltresiC1Ev>:
#include <Kalman.hpp>
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi()  {
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b086      	sub	sp, #24
 800c0b4:	af04      	add	r7, sp, #16
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f04f 0200 	mov.w	r2, #0
 800c0be:	611a      	str	r2, [r3, #16]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	4a8f      	ldr	r2, [pc, #572]	; (800c300 <_ZN15Kalman_FiltresiC1Ev+0x250>)
 800c0c4:	615a      	str	r2, [r3, #20]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4a8e      	ldr	r2, [pc, #568]	; (800c304 <_ZN15Kalman_FiltresiC1Ev+0x254>)
 800c0ca:	631a      	str	r2, [r3, #48]	; 0x30
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	4a8e      	ldr	r2, [pc, #568]	; (800c308 <_ZN15Kalman_FiltresiC1Ev+0x258>)
 800c0d0:	635a      	str	r2, [r3, #52]	; 0x34
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	4a8d      	ldr	r2, [pc, #564]	; (800c30c <_ZN15Kalman_FiltresiC1Ev+0x25c>)
 800c0d6:	639a      	str	r2, [r3, #56]	; 0x38
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	4a8d      	ldr	r2, [pc, #564]	; (800c310 <_ZN15Kalman_FiltresiC1Ev+0x260>)
 800c0dc:	65da      	str	r2, [r3, #92]	; 0x5c
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4a8c      	ldr	r2, [pc, #560]	; (800c314 <_ZN15Kalman_FiltresiC1Ev+0x264>)
 800c0e2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4a8a      	ldr	r2, [pc, #552]	; (800c314 <_ZN15Kalman_FiltresiC1Ev+0x264>)
 800c0ea:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4a89      	ldr	r2, [pc, #548]	; (800c318 <_ZN15Kalman_FiltresiC1Ev+0x268>)
 800c0f2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a88      	ldr	r2, [pc, #544]	; (800c31c <_ZN15Kalman_FiltresiC1Ev+0x26c>)
 800c0fa:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c104:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	4a85      	ldr	r2, [pc, #532]	; (800c320 <_ZN15Kalman_FiltresiC1Ev+0x270>)
 800c10c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	4a84      	ldr	r2, [pc, #528]	; (800c324 <_ZN15Kalman_FiltresiC1Ev+0x274>)
 800c114:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c11e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	4a80      	ldr	r2, [pc, #512]	; (800c328 <_ZN15Kalman_FiltresiC1Ev+0x278>)
 800c126:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	22c8      	movs	r2, #200	; 0xc8
 800c12e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c138:	4618      	mov	r0, r3
 800c13a:	f7f4 fda7 	bl	8000c8c <__aeabi_i2f>
 800c13e:	4603      	mov	r3, r0
 800c140:	4619      	mov	r1, r3
 800c142:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c146:	f7f4 fea9 	bl	8000e9c <__aeabi_fdiv>
 800c14a:	4603      	mov	r3, r0
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7f4 f963 	bl	8000418 <__aeabi_f2d>
 800c152:	4602      	mov	r2, r0
 800c154:	460b      	mov	r3, r1
 800c156:	6879      	ldr	r1, [r7, #4]
 800c158:	e9c1 2344 	strd	r2, r3, [r1, #272]	; 0x110
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f04f 0200 	mov.w	r2, #0
 800c162:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f04f 0200 	mov.w	r2, #0
 800c16c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f04f 0200 	mov.w	r2, #0
 800c176:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4a6b      	ldr	r2, [pc, #428]	; (800c32c <_ZN15Kalman_FiltresiC1Ev+0x27c>)
 800c17e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f04f 0200 	mov.w	r2, #0
 800c188:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f04f 0200 	mov.w	r2, #0
 800c192:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f04f 0200 	mov.w	r2, #0
 800c19c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	4a62      	ldr	r2, [pc, #392]	; (800c32c <_ZN15Kalman_FiltresiC1Ev+0x27c>)
 800c1a4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	4a61      	ldr	r2, [pc, #388]	; (800c330 <_ZN15Kalman_FiltresiC1Ev+0x280>)
 800c1ac:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f04f 0200 	mov.w	r2, #0
 800c1b6:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f04f 0200 	mov.w	r2, #0
 800c1c0:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4a59      	ldr	r2, [pc, #356]	; (800c32c <_ZN15Kalman_FiltresiC1Ev+0x27c>)
 800c1c8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4a59      	ldr	r2, [pc, #356]	; (800c334 <_ZN15Kalman_FiltresiC1Ev+0x284>)
 800c1d0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4a58      	ldr	r2, [pc, #352]	; (800c338 <_ZN15Kalman_FiltresiC1Ev+0x288>)
 800c1d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a57      	ldr	r2, [pc, #348]	; (800c33c <_ZN15Kalman_FiltresiC1Ev+0x28c>)
 800c1e0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	4a56      	ldr	r2, [pc, #344]	; (800c340 <_ZN15Kalman_FiltresiC1Ev+0x290>)
 800c1e8:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	4a54      	ldr	r2, [pc, #336]	; (800c340 <_ZN15Kalman_FiltresiC1Ev+0x290>)
 800c1f0:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	4a45      	ldr	r2, [pc, #276]	; (800c30c <_ZN15Kalman_FiltresiC1Ev+0x25c>)
 800c1f8:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800c202:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4a4e      	ldr	r2, [pc, #312]	; (800c344 <_ZN15Kalman_FiltresiC1Ev+0x294>)
 800c20a:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c214:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	4a4b      	ldr	r2, [pc, #300]	; (800c348 <_ZN15Kalman_FiltresiC1Ev+0x298>)
 800c21c:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	4a4a      	ldr	r2, [pc, #296]	; (800c34c <_ZN15Kalman_FiltresiC1Ev+0x29c>)
 800c224:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4a40      	ldr	r2, [pc, #256]	; (800c32c <_ZN15Kalman_FiltresiC1Ev+0x27c>)
 800c22c:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c236:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c240:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a42      	ldr	r2, [pc, #264]	; (800c350 <_ZN15Kalman_FiltresiC1Ev+0x2a0>)
 800c248:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a41      	ldr	r2, [pc, #260]	; (800c354 <_ZN15Kalman_FiltresiC1Ev+0x2a4>)
 800c250:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f503 7134 	add.w	r1, r3, #720	; 0x2d0
 800c25a:	a31d      	add	r3, pc, #116	; (adr r3, 800c2d0 <_ZN15Kalman_FiltresiC1Ev+0x220>)
 800c25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c260:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c264:	a31a      	add	r3, pc, #104	; (adr r3, 800c2d0 <_ZN15Kalman_FiltresiC1Ev+0x220>)
 800c266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26a:	e9cd 2300 	strd	r2, r3, [sp]
 800c26e:	a31a      	add	r3, pc, #104	; (adr r3, 800c2d8 <_ZN15Kalman_FiltresiC1Ev+0x228>)
 800c270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c274:	4608      	mov	r0, r1
 800c276:	f001 fc2d 	bl	800dad4 <_ZN3lpfC1Eddd>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f503 713e 	add.w	r1, r3, #760	; 0x2f8
 800c280:	a317      	add	r3, pc, #92	; (adr r3, 800c2e0 <_ZN15Kalman_FiltresiC1Ev+0x230>)
 800c282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c286:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c28a:	a315      	add	r3, pc, #84	; (adr r3, 800c2e0 <_ZN15Kalman_FiltresiC1Ev+0x230>)
 800c28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c290:	e9cd 2300 	strd	r2, r3, [sp]
 800c294:	a314      	add	r3, pc, #80	; (adr r3, 800c2e8 <_ZN15Kalman_FiltresiC1Ev+0x238>)
 800c296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29a:	4608      	mov	r0, r1
 800c29c:	f001 fc1a 	bl	800dad4 <_ZN3lpfC1Eddd>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f503 7148 	add.w	r1, r3, #800	; 0x320
 800c2a6:	a312      	add	r3, pc, #72	; (adr r3, 800c2f0 <_ZN15Kalman_FiltresiC1Ev+0x240>)
 800c2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c2b0:	a30f      	add	r3, pc, #60	; (adr r3, 800c2f0 <_ZN15Kalman_FiltresiC1Ev+0x240>)
 800c2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b6:	e9cd 2300 	strd	r2, r3, [sp]
 800c2ba:	a30f      	add	r3, pc, #60	; (adr r3, 800c2f8 <_ZN15Kalman_FiltresiC1Ev+0x248>)
 800c2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c0:	4608      	mov	r0, r1
 800c2c2:	f001 fc07 	bl	800dad4 <_ZN3lpfC1Eddd>

}
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3708      	adds	r7, #8
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}
 800c2d0:	de7ea5f8 	.word	0xde7ea5f8
 800c2d4:	3fb2a454 	.word	0x3fb2a454
 800c2d8:	ab367a10 	.word	0xab367a10
 800c2dc:	3feb573e 	.word	0x3feb573e
 800c2e0:	fc3b4f61 	.word	0xfc3b4f61
 800c2e4:	3fa35935 	.word	0x3fa35935
 800c2e8:	4f0d844d 	.word	0x4f0d844d
 800c2ec:	3fed94af 	.word	0x3fed94af
 800c2f0:	e5c91d15 	.word	0xe5c91d15
 800c2f4:	3feda43f 	.word	0x3feda43f
 800c2f8:	cb923a2a 	.word	0xcb923a2a
 800c2fc:	bfeb487f 	.word	0xbfeb487f
 800c300:	3ca3d70a 	.word	0x3ca3d70a
 800c304:	3dcccccd 	.word	0x3dcccccd
 800c308:	3d4ccccd 	.word	0x3d4ccccd
 800c30c:	41a00000 	.word	0x41a00000
 800c310:	461c4000 	.word	0x461c4000
 800c314:	4e6e6b28 	.word	0x4e6e6b28
 800c318:	41200000 	.word	0x41200000
 800c31c:	4b189680 	.word	0x4b189680
 800c320:	40a00000 	.word	0x40a00000
 800c324:	42480000 	.word	0x42480000
 800c328:	42654ca3 	.word	0x42654ca3
 800c32c:	322bcc77 	.word	0x322bcc77
 800c330:	47c35000 	.word	0x47c35000
 800c334:	bd824c8c 	.word	0xbd824c8c
 800c338:	3c8d8029 	.word	0x3c8d8029
 800c33c:	3c16a355 	.word	0x3c16a355
 800c340:	40400000 	.word	0x40400000
 800c344:	3cdd2f1b 	.word	0x3cdd2f1b
 800c348:	48f42400 	.word	0x48f42400
 800c34c:	3727c5ac 	.word	0x3727c5ac
 800c350:	bf8ccccd 	.word	0xbf8ccccd
 800c354:	c0966666 	.word	0xc0966666

0800c358 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>:


}


void Kalman_Filtresi::EKF_Attitude(euler_angle euler_angle) {
 800c358:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c35c:	b0aa      	sub	sp, #168	; 0xa8
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
 800c362:	460b      	mov	r3, r1
 800c364:	70fb      	strb	r3, [r7, #3]
	  float accX = acc[0];
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c36c:	66fb      	str	r3, [r7, #108]	; 0x6c
	  float accY = acc[1];
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c374:	66bb      	str	r3, [r7, #104]	; 0x68
	  float accZ = acc[2];
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c37c:	667b      	str	r3, [r7, #100]	; 0x64

	  float gyroX = gyro[0];
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c384:	663b      	str	r3, [r7, #96]	; 0x60
	  float gyroY = gyro[1];
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c38c:	65fb      	str	r3, [r7, #92]	; 0x5c
	  float gyroZ = gyro[2];
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c394:	65bb      	str	r3, [r7, #88]	; 0x58

	  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 800c396:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c398:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c39a:	f7f4 fccb 	bl	8000d34 <__aeabi_fmul>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	461c      	mov	r4, r3
 800c3a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c3a4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800c3a6:	f7f4 fcc5 	bl	8000d34 <__aeabi_fmul>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	f7f4 fbb8 	bl	8000b24 <__addsf3>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	461c      	mov	r4, r3
 800c3b8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c3ba:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c3bc:	f7f4 fcba 	bl	8000d34 <__aeabi_fmul>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f7f4 fbad 	bl	8000b24 <__addsf3>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7f5 fd0f 	bl	8001df0 <_ZSt4sqrtf>
 800c3d2:	6578      	str	r0, [r7, #84]	; 0x54

	  pitch_acc =  asin(accX/acctop)*rad2deg + PITCH_OFFSET;
 800c3d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c3d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c3d8:	f7f4 fd60 	bl	8000e9c <__aeabi_fdiv>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7f5 fce0 	bl	8001da4 <_ZSt4asinf>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	4610      	mov	r0, r2
 800c3f0:	f7f4 fca0 	bl	8000d34 <__aeabi_fmul>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3fe:	4619      	mov	r1, r3
 800c400:	4610      	mov	r0, r2
 800c402:	f7f4 fb8f 	bl	8000b24 <__addsf3>
 800c406:	4603      	mov	r3, r0
 800c408:	461a      	mov	r2, r3
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	  roll_acc  =  asin(accY/acctop)*rad2deg + ROLL_OFFSET;
 800c410:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c412:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800c414:	f7f4 fd42 	bl	8000e9c <__aeabi_fdiv>
 800c418:	4603      	mov	r3, r0
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7f5 fcc2 	bl	8001da4 <_ZSt4asinf>
 800c420:	4602      	mov	r2, r0
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c428:	4619      	mov	r1, r3
 800c42a:	4610      	mov	r0, r2
 800c42c:	f7f4 fc82 	bl	8000d34 <__aeabi_fmul>
 800c430:	4603      	mov	r3, r0
 800c432:	461a      	mov	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800c43a:	4619      	mov	r1, r3
 800c43c:	4610      	mov	r0, r2
 800c43e:	f7f4 fb71 	bl	8000b24 <__addsf3>
 800c442:	4603      	mov	r3, r0
 800c444:	461a      	mov	r2, r3
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc

	  roll_gyro_comp  = gyro[0] * st;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c452:	4618      	mov	r0, r3
 800c454:	f7f3 ffe0 	bl	8000418 <__aeabi_f2d>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	; 0x110
 800c45e:	f7f4 f833 	bl	80004c8 <__aeabi_dmul>
 800c462:	4602      	mov	r2, r0
 800c464:	460b      	mov	r3, r1
 800c466:	4610      	mov	r0, r2
 800c468:	4619      	mov	r1, r3
 800c46a:	f7f4 fb05 	bl	8000a78 <__aeabi_d2f>
 800c46e:	4602      	mov	r2, r0
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	  pitch_gyro_comp = gyro[1] * st;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7f3 ffcb 	bl	8000418 <__aeabi_f2d>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	; 0x110
 800c488:	f7f4 f81e 	bl	80004c8 <__aeabi_dmul>
 800c48c:	4602      	mov	r2, r0
 800c48e:	460b      	mov	r3, r1
 800c490:	4610      	mov	r0, r2
 800c492:	4619      	mov	r1, r3
 800c494:	f7f4 faf0 	bl	8000a78 <__aeabi_d2f>
 800c498:	4602      	mov	r2, r0
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	float angle_ekf, angle_rate, angle_bias, angle_acc, gyro;
	float S11_angle, S12_angle, S13_angle, S21_angle, S22_angle, S23_angle, S31_angle, S32_angle, S33_angle ;

	if(!armed) {
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 800c4a6:	f083 0301 	eor.w	r3, r3, #1
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d015      	beq.n	800c4dc <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x184>
	    Qa = 1;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c4b6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	    Qg = 1e-2;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4ac2      	ldr	r2, [pc, #776]	; (800c7c8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x470>)
 800c4be:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	    roll_comp = roll_acc;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	    pitch_comp = pitch_acc;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
 800c4da:	e078      	b.n	800c5ce <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x276>

	}

	else {
		switch(euler_angle) {
 800c4dc:	78fb      	ldrb	r3, [r7, #3]
 800c4de:	2b02      	cmp	r3, #2
 800c4e0:	d008      	beq.n	800c4f4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x19c>
		default:
		    Qa = 5e4;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	4ab9      	ldr	r2, [pc, #740]	; (800c7cc <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x474>)
 800c4e6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		    Qg = 200;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4ab8      	ldr	r2, [pc, #736]	; (800c7d0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x478>)
 800c4ee:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

			break;
 800c4f2:	e008      	b.n	800c506 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1ae>

		case YAW:
			Qa = 5e8;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	4ab7      	ldr	r2, [pc, #732]	; (800c7d4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x47c>)
 800c4f8:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
			Qg = 100;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	4ab6      	ldr	r2, [pc, #728]	; (800c7d8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x480>)
 800c500:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
			break;
 800c504:	bf00      	nop

		}

	    pitch_comp=(pitch_gyro_comp+pitch_eski)*0.995+pitch_acc*0.005;	//Tümleyen filtre
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c512:	4619      	mov	r1, r3
 800c514:	4610      	mov	r0, r2
 800c516:	f7f4 fb05 	bl	8000b24 <__addsf3>
 800c51a:	4603      	mov	r3, r0
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7f3 ff7b 	bl	8000418 <__aeabi_f2d>
 800c522:	a3a5      	add	r3, pc, #660	; (adr r3, 800c7b8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x460>)
 800c524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c528:	f7f3 ffce 	bl	80004c8 <__aeabi_dmul>
 800c52c:	4602      	mov	r2, r0
 800c52e:	460b      	mov	r3, r1
 800c530:	4614      	mov	r4, r2
 800c532:	461d      	mov	r5, r3
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7f3 ff6c 	bl	8000418 <__aeabi_f2d>
 800c540:	a39f      	add	r3, pc, #636	; (adr r3, 800c7c0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x468>)
 800c542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c546:	f7f3 ffbf 	bl	80004c8 <__aeabi_dmul>
 800c54a:	4602      	mov	r2, r0
 800c54c:	460b      	mov	r3, r1
 800c54e:	4620      	mov	r0, r4
 800c550:	4629      	mov	r1, r5
 800c552:	f7f3 fe03 	bl	800015c <__adddf3>
 800c556:	4602      	mov	r2, r0
 800c558:	460b      	mov	r3, r1
 800c55a:	4610      	mov	r0, r2
 800c55c:	4619      	mov	r1, r3
 800c55e:	f7f4 fa8b 	bl	8000a78 <__aeabi_d2f>
 800c562:	4602      	mov	r2, r0
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	    roll_comp =(roll_gyro_comp+roll_eski)*0.995+roll_acc*0.005;		//Tümleyen filtre
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800c576:	4619      	mov	r1, r3
 800c578:	4610      	mov	r0, r2
 800c57a:	f7f4 fad3 	bl	8000b24 <__addsf3>
 800c57e:	4603      	mov	r3, r0
 800c580:	4618      	mov	r0, r3
 800c582:	f7f3 ff49 	bl	8000418 <__aeabi_f2d>
 800c586:	a38c      	add	r3, pc, #560	; (adr r3, 800c7b8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x460>)
 800c588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58c:	f7f3 ff9c 	bl	80004c8 <__aeabi_dmul>
 800c590:	4602      	mov	r2, r0
 800c592:	460b      	mov	r3, r1
 800c594:	4614      	mov	r4, r2
 800c596:	461d      	mov	r5, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7f3 ff3a 	bl	8000418 <__aeabi_f2d>
 800c5a4:	a386      	add	r3, pc, #536	; (adr r3, 800c7c0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x468>)
 800c5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5aa:	f7f3 ff8d 	bl	80004c8 <__aeabi_dmul>
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	4629      	mov	r1, r5
 800c5b6:	f7f3 fdd1 	bl	800015c <__adddf3>
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	460b      	mov	r3, r1
 800c5be:	4610      	mov	r0, r2
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	f7f4 fa59 	bl	8000a78 <__aeabi_d2f>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	}


	//ANGLE PREDICTION
	switch(euler_angle) {
 800c5ce:	78fb      	ldrb	r3, [r7, #3]
 800c5d0:	2b02      	cmp	r3, #2
 800c5d2:	f000 80ae 	beq.w	800c732 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x3da>
 800c5d6:	2b02      	cmp	r3, #2
 800c5d8:	f300 8101 	bgt.w	800c7de <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x486>
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d002      	beq.n	800c5e6 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x28e>
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d066      	beq.n	800c6b2 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x35a>
 800c5e4:	e0fb      	b.n	800c7de <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x486>
		case ROLL:
			angle_ekf = roll_ekf;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800c5ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			angle_rate = roll_rate;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			angle_bias = roll_bias;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800c5fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			angle_acc = roll_acc;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800c608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			gyro = gyroX;
 800c60c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c60e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

			S11_angle = S11_roll;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800c618:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			S12_angle = S12_roll;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c622:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			S13_angle = S13_roll;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c62c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			S21_angle = S21_roll;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c636:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			S22_angle = S22_roll;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800c640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			S23_angle = S23_roll;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c64a:	67fb      	str	r3, [r7, #124]	; 0x7c
			S31_angle = S31_roll;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c652:	67bb      	str	r3, [r7, #120]	; 0x78
			S32_angle = S32_roll;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800c65a:	677b      	str	r3, [r7, #116]	; 0x74
			S33_angle = S33_roll;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c662:	673b      	str	r3, [r7, #112]	; 0x70
			if(armed) {
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	f000 80b6 	beq.w	800c7dc <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x484>
				roll_int = roll_int + roll_rate*st;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4618      	mov	r0, r3
 800c676:	f7f3 fecf 	bl	8000418 <__aeabi_f2d>
 800c67a:	4604      	mov	r4, r0
 800c67c:	460d      	mov	r5, r1
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c682:	4618      	mov	r0, r3
 800c684:	f7f3 fec8 	bl	8000418 <__aeabi_f2d>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	; 0x110
 800c68e:	f7f3 ff1b 	bl	80004c8 <__aeabi_dmul>
 800c692:	4602      	mov	r2, r0
 800c694:	460b      	mov	r3, r1
 800c696:	4620      	mov	r0, r4
 800c698:	4629      	mov	r1, r5
 800c69a:	f7f3 fd5f 	bl	800015c <__adddf3>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	4610      	mov	r0, r2
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	f7f4 f9e7 	bl	8000a78 <__aeabi_d2f>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	601a      	str	r2, [r3, #0]
			}
			break;
 800c6b0:	e094      	b.n	800c7dc <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x484>

		case PITCH:
			angle_ekf = pitch_ekf;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800c6b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			angle_rate = pitch_rate;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			angle_bias = pitch_bias;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c6ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			angle_acc = pitch_acc;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800c6d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			gyro = gyroY;
 800c6d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c6da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

			S11_angle = S11_pitch;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800c6e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			S12_angle = S12_pitch;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800c6ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			S13_angle = S13_pitch;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800c6f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			S21_angle = S21_pitch;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800c702:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			S22_angle = S22_pitch;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800c70c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			S23_angle = S23_pitch;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800c716:	67fb      	str	r3, [r7, #124]	; 0x7c
			S31_angle = S31_pitch;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800c71e:	67bb      	str	r3, [r7, #120]	; 0x78
			S32_angle = S32_pitch;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800c726:	677b      	str	r3, [r7, #116]	; 0x74
			S33_angle = S33_pitch;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800c72e:	673b      	str	r3, [r7, #112]	; 0x70
			break;
 800c730:	e055      	b.n	800c7de <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x486>

		case YAW:
			angle_ekf = yaw_ekf;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800c738:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			angle_rate = yaw_rate;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c740:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			angle_bias = yaw_bias;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800c74a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			angle_acc = yaw_acc;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800c754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			gyro = gyroZ;
 800c758:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c75a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94


			S11_angle = S11_yaw;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800c764:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			S12_angle = S12_yaw;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800c76e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			S13_angle = S13_yaw;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800c778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			S21_angle = S21_yaw;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800c782:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			S22_angle = S22_yaw;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800c78c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			S23_angle = S23_yaw;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800c796:	67fb      	str	r3, [r7, #124]	; 0x7c
			S31_angle = S31_yaw;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800c79e:	67bb      	str	r3, [r7, #120]	; 0x78
			S32_angle = S32_yaw;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800c7a6:	677b      	str	r3, [r7, #116]	; 0x74
			S33_angle = S33_yaw;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800c7ae:	673b      	str	r3, [r7, #112]	; 0x70
			break;
 800c7b0:	e015      	b.n	800c7de <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x486>
 800c7b2:	bf00      	nop
 800c7b4:	f3af 8000 	nop.w
 800c7b8:	3d70a3d7 	.word	0x3d70a3d7
 800c7bc:	3fefd70a 	.word	0x3fefd70a
 800c7c0:	47ae147b 	.word	0x47ae147b
 800c7c4:	3f747ae1 	.word	0x3f747ae1
 800c7c8:	3c23d70a 	.word	0x3c23d70a
 800c7cc:	47435000 	.word	0x47435000
 800c7d0:	43480000 	.word	0x43480000
 800c7d4:	4dee6b28 	.word	0x4dee6b28
 800c7d8:	42c80000 	.word	0x42c80000
			break;
 800c7dc:	bf00      	nop

	}

    angle_ekf = (angle_ekf) + st*(angle_rate);
 800c7de:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800c7e2:	f7f3 fe19 	bl	8000418 <__aeabi_f2d>
 800c7e6:	4680      	mov	r8, r0
 800c7e8:	4689      	mov	r9, r1
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	e9d3 4544 	ldrd	r4, r5, [r3, #272]	; 0x110
 800c7f0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800c7f4:	f7f3 fe10 	bl	8000418 <__aeabi_f2d>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	460b      	mov	r3, r1
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	4629      	mov	r1, r5
 800c800:	f7f3 fe62 	bl	80004c8 <__aeabi_dmul>
 800c804:	4602      	mov	r2, r0
 800c806:	460b      	mov	r3, r1
 800c808:	4640      	mov	r0, r8
 800c80a:	4649      	mov	r1, r9
 800c80c:	f7f3 fca6 	bl	800015c <__adddf3>
 800c810:	4602      	mov	r2, r0
 800c812:	460b      	mov	r3, r1
 800c814:	4610      	mov	r0, r2
 800c816:	4619      	mov	r1, r3
 800c818:	f7f4 f92e 	bl	8000a78 <__aeabi_d2f>
 800c81c:	4603      	mov	r3, r0
 800c81e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    float CS_m11 = S13_angle + S33_angle*st;
 800c822:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800c826:	f7f3 fdf7 	bl	8000418 <__aeabi_f2d>
 800c82a:	4604      	mov	r4, r0
 800c82c:	460d      	mov	r5, r1
 800c82e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c830:	f7f3 fdf2 	bl	8000418 <__aeabi_f2d>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	; 0x110
 800c83a:	f7f3 fe45 	bl	80004c8 <__aeabi_dmul>
 800c83e:	4602      	mov	r2, r0
 800c840:	460b      	mov	r3, r1
 800c842:	4620      	mov	r0, r4
 800c844:	4629      	mov	r1, r5
 800c846:	f7f3 fc89 	bl	800015c <__adddf3>
 800c84a:	4602      	mov	r2, r0
 800c84c:	460b      	mov	r3, r1
 800c84e:	4610      	mov	r0, r2
 800c850:	4619      	mov	r1, r3
 800c852:	f7f4 f911 	bl	8000a78 <__aeabi_d2f>
 800c856:	4603      	mov	r3, r0
 800c858:	653b      	str	r3, [r7, #80]	; 0x50

    S11_angle = S11_angle + sa + CS_m11*st + S31_angle*st;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c85e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c862:	4618      	mov	r0, r3
 800c864:	f7f4 f95e 	bl	8000b24 <__addsf3>
 800c868:	4603      	mov	r3, r0
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7f3 fdd4 	bl	8000418 <__aeabi_f2d>
 800c870:	4604      	mov	r4, r0
 800c872:	460d      	mov	r5, r1
 800c874:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c876:	f7f3 fdcf 	bl	8000418 <__aeabi_f2d>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	; 0x110
 800c880:	f7f3 fe22 	bl	80004c8 <__aeabi_dmul>
 800c884:	4602      	mov	r2, r0
 800c886:	460b      	mov	r3, r1
 800c888:	4620      	mov	r0, r4
 800c88a:	4629      	mov	r1, r5
 800c88c:	f7f3 fc66 	bl	800015c <__adddf3>
 800c890:	4602      	mov	r2, r0
 800c892:	460b      	mov	r3, r1
 800c894:	4614      	mov	r4, r2
 800c896:	461d      	mov	r5, r3
 800c898:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800c89a:	f7f3 fdbd 	bl	8000418 <__aeabi_f2d>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	; 0x110
 800c8a4:	f7f3 fe10 	bl	80004c8 <__aeabi_dmul>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	4629      	mov	r1, r5
 800c8b0:	f7f3 fc54 	bl	800015c <__adddf3>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	4610      	mov	r0, r2
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	f7f4 f8dc 	bl	8000a78 <__aeabi_d2f>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    S12_angle = S12_angle + S32_angle*st;
 800c8c6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800c8ca:	f7f3 fda5 	bl	8000418 <__aeabi_f2d>
 800c8ce:	4604      	mov	r4, r0
 800c8d0:	460d      	mov	r5, r1
 800c8d2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800c8d4:	f7f3 fda0 	bl	8000418 <__aeabi_f2d>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	; 0x110
 800c8de:	f7f3 fdf3 	bl	80004c8 <__aeabi_dmul>
 800c8e2:	4602      	mov	r2, r0
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	4620      	mov	r0, r4
 800c8e8:	4629      	mov	r1, r5
 800c8ea:	f7f3 fc37 	bl	800015c <__adddf3>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	4610      	mov	r0, r2
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	f7f4 f8bf 	bl	8000a78 <__aeabi_d2f>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    S13_angle = CS_m11;
 800c900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c902:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    S21_angle = S21_angle + S23_angle*st;
 800c906:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800c90a:	f7f3 fd85 	bl	8000418 <__aeabi_f2d>
 800c90e:	4604      	mov	r4, r0
 800c910:	460d      	mov	r5, r1
 800c912:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800c914:	f7f3 fd80 	bl	8000418 <__aeabi_f2d>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	; 0x110
 800c91e:	f7f3 fdd3 	bl	80004c8 <__aeabi_dmul>
 800c922:	4602      	mov	r2, r0
 800c924:	460b      	mov	r3, r1
 800c926:	4620      	mov	r0, r4
 800c928:	4629      	mov	r1, r5
 800c92a:	f7f3 fc17 	bl	800015c <__adddf3>
 800c92e:	4602      	mov	r2, r0
 800c930:	460b      	mov	r3, r1
 800c932:	4610      	mov	r0, r2
 800c934:	4619      	mov	r1, r3
 800c936:	f7f4 f89f 	bl	8000a78 <__aeabi_d2f>
 800c93a:	4603      	mov	r3, r0
 800c93c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    S22_angle = S22_angle + sb;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c944:	4619      	mov	r1, r3
 800c946:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800c94a:	f7f4 f8eb 	bl	8000b24 <__addsf3>
 800c94e:	4603      	mov	r3, r0
 800c950:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    S23_angle = S23_angle;
    S31_angle = S31_angle + S33_angle*st;
 800c954:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800c956:	f7f3 fd5f 	bl	8000418 <__aeabi_f2d>
 800c95a:	4604      	mov	r4, r0
 800c95c:	460d      	mov	r5, r1
 800c95e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c960:	f7f3 fd5a 	bl	8000418 <__aeabi_f2d>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	; 0x110
 800c96a:	f7f3 fdad 	bl	80004c8 <__aeabi_dmul>
 800c96e:	4602      	mov	r2, r0
 800c970:	460b      	mov	r3, r1
 800c972:	4620      	mov	r0, r4
 800c974:	4629      	mov	r1, r5
 800c976:	f7f3 fbf1 	bl	800015c <__adddf3>
 800c97a:	4602      	mov	r2, r0
 800c97c:	460b      	mov	r3, r1
 800c97e:	4610      	mov	r0, r2
 800c980:	4619      	mov	r1, r3
 800c982:	f7f4 f879 	bl	8000a78 <__aeabi_d2f>
 800c986:	4603      	mov	r3, r0
 800c988:	67bb      	str	r3, [r7, #120]	; 0x78
    S32_angle = S32_angle;
    S33_angle = S33_angle + sr;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c98e:	4619      	mov	r1, r3
 800c990:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c992:	f7f4 f8c7 	bl	8000b24 <__addsf3>
 800c996:	4603      	mov	r3, r0
 800c998:	673b      	str	r3, [r7, #112]	; 0x70

    //ANGLE CORRECTION
    float CK11 = 1/(Qa*Qg + Qa*S22_angle + Qa*S23_angle + Qa*S32_angle + Qa*S33_angle + Qg*S11_angle + S11_angle*S22_angle - S12_angle*S21_angle + S11_angle*S23_angle - S13_angle*S21_angle + S11_angle*S32_angle - S12_angle*S31_angle + S11_angle*S33_angle - S13_angle*S31_angle);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	4610      	mov	r0, r2
 800c9aa:	f7f4 f9c3 	bl	8000d34 <__aeabi_fmul>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	461c      	mov	r4, r3
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800c9b8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7f4 f9b9 	bl	8000d34 <__aeabi_fmul>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	f7f4 f8ac 	bl	8000b24 <__addsf3>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	461c      	mov	r4, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800c9d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7f4 f9ab 	bl	8000d34 <__aeabi_fmul>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	f7f4 f89e 	bl	8000b24 <__addsf3>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	461c      	mov	r4, r3
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800c9f2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7f4 f99d 	bl	8000d34 <__aeabi_fmul>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	4620      	mov	r0, r4
 800ca00:	f7f4 f890 	bl	8000b24 <__addsf3>
 800ca04:	4603      	mov	r3, r0
 800ca06:	461c      	mov	r4, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800ca0e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7f4 f98f 	bl	8000d34 <__aeabi_fmul>
 800ca16:	4603      	mov	r3, r0
 800ca18:	4619      	mov	r1, r3
 800ca1a:	4620      	mov	r0, r4
 800ca1c:	f7f4 f882 	bl	8000b24 <__addsf3>
 800ca20:	4603      	mov	r3, r0
 800ca22:	461c      	mov	r4, r3
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7f4 f980 	bl	8000d34 <__aeabi_fmul>
 800ca34:	4603      	mov	r3, r0
 800ca36:	4619      	mov	r1, r3
 800ca38:	4620      	mov	r0, r4
 800ca3a:	f7f4 f873 	bl	8000b24 <__addsf3>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	461c      	mov	r4, r3
 800ca42:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ca46:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800ca4a:	f7f4 f973 	bl	8000d34 <__aeabi_fmul>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	4619      	mov	r1, r3
 800ca52:	4620      	mov	r0, r4
 800ca54:	f7f4 f866 	bl	8000b24 <__addsf3>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	461c      	mov	r4, r3
 800ca5c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ca60:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800ca64:	f7f4 f966 	bl	8000d34 <__aeabi_fmul>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	f7f4 f857 	bl	8000b20 <__aeabi_fsub>
 800ca72:	4603      	mov	r3, r0
 800ca74:	461c      	mov	r4, r3
 800ca76:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ca78:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800ca7c:	f7f4 f95a 	bl	8000d34 <__aeabi_fmul>
 800ca80:	4603      	mov	r3, r0
 800ca82:	4619      	mov	r1, r3
 800ca84:	4620      	mov	r0, r4
 800ca86:	f7f4 f84d 	bl	8000b24 <__addsf3>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	461c      	mov	r4, r3
 800ca8e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ca92:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800ca96:	f7f4 f94d 	bl	8000d34 <__aeabi_fmul>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	4620      	mov	r0, r4
 800caa0:	f7f4 f83e 	bl	8000b20 <__aeabi_fsub>
 800caa4:	4603      	mov	r3, r0
 800caa6:	461c      	mov	r4, r3
 800caa8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800caaa:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800caae:	f7f4 f941 	bl	8000d34 <__aeabi_fmul>
 800cab2:	4603      	mov	r3, r0
 800cab4:	4619      	mov	r1, r3
 800cab6:	4620      	mov	r0, r4
 800cab8:	f7f4 f834 	bl	8000b24 <__addsf3>
 800cabc:	4603      	mov	r3, r0
 800cabe:	461c      	mov	r4, r3
 800cac0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800cac2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800cac6:	f7f4 f935 	bl	8000d34 <__aeabi_fmul>
 800caca:	4603      	mov	r3, r0
 800cacc:	4619      	mov	r1, r3
 800cace:	4620      	mov	r0, r4
 800cad0:	f7f4 f826 	bl	8000b20 <__aeabi_fsub>
 800cad4:	4603      	mov	r3, r0
 800cad6:	461c      	mov	r4, r3
 800cad8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cada:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800cade:	f7f4 f929 	bl	8000d34 <__aeabi_fmul>
 800cae2:	4603      	mov	r3, r0
 800cae4:	4619      	mov	r1, r3
 800cae6:	4620      	mov	r0, r4
 800cae8:	f7f4 f81c 	bl	8000b24 <__addsf3>
 800caec:	4603      	mov	r3, r0
 800caee:	461c      	mov	r4, r3
 800caf0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800caf2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800caf6:	f7f4 f91d 	bl	8000d34 <__aeabi_fmul>
 800cafa:	4603      	mov	r3, r0
 800cafc:	4619      	mov	r1, r3
 800cafe:	4620      	mov	r0, r4
 800cb00:	f7f4 f80e 	bl	8000b20 <__aeabi_fsub>
 800cb04:	4603      	mov	r3, r0
 800cb06:	4619      	mov	r1, r3
 800cb08:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800cb0c:	f7f4 f9c6 	bl	8000e9c <__aeabi_fdiv>
 800cb10:	4603      	mov	r3, r0
 800cb12:	64fb      	str	r3, [r7, #76]	; 0x4c
    float CK12 = Qg + S22_angle + S23_angle + S32_angle + S33_angle;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cb1a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f7f4 f800 	bl	8000b24 <__addsf3>
 800cb24:	4603      	mov	r3, r0
 800cb26:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7f3 fffb 	bl	8000b24 <__addsf3>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7f3 fff6 	bl	8000b24 <__addsf3>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800cb3e:	f7f3 fff1 	bl	8000b24 <__addsf3>
 800cb42:	4603      	mov	r3, r0
 800cb44:	64bb      	str	r3, [r7, #72]	; 0x48
    float CK13 = S12_angle + S13_angle;
 800cb46:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800cb4a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800cb4e:	f7f3 ffe9 	bl	8000b24 <__addsf3>
 800cb52:	4603      	mov	r3, r0
 800cb54:	647b      	str	r3, [r7, #68]	; 0x44
    float CK14 = S21_angle + S31_angle;
 800cb56:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800cb58:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800cb5c:	f7f3 ffe2 	bl	8000b24 <__addsf3>
 800cb60:	4603      	mov	r3, r0
 800cb62:	643b      	str	r3, [r7, #64]	; 0x40
    float CK15 = Qa + S11_angle;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800cb70:	f7f3 ffd8 	bl	8000b24 <__addsf3>
 800cb74:	4603      	mov	r3, r0
 800cb76:	63fb      	str	r3, [r7, #60]	; 0x3c
    float CK16 = S32_angle + S33_angle;
 800cb78:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cb7a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800cb7c:	f7f3 ffd2 	bl	8000b24 <__addsf3>
 800cb80:	4603      	mov	r3, r0
 800cb82:	63bb      	str	r3, [r7, #56]	; 0x38
    float CK17 = S22_angle + S23_angle;
 800cb84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cb86:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800cb8a:	f7f3 ffcb 	bl	8000b24 <__addsf3>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	637b      	str	r3, [r7, #52]	; 0x34

    float Kt11 = CK11*CK12*S11_angle - CK11*CK13*CK14;
 800cb92:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cb94:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cb96:	f7f4 f8cd 	bl	8000d34 <__aeabi_fmul>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7f4 f8c7 	bl	8000d34 <__aeabi_fmul>
 800cba6:	4603      	mov	r3, r0
 800cba8:	461c      	mov	r4, r3
 800cbaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cbac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cbae:	f7f4 f8c1 	bl	8000d34 <__aeabi_fmul>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7f4 f8bc 	bl	8000d34 <__aeabi_fmul>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	4619      	mov	r1, r3
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f7f3 ffad 	bl	8000b20 <__aeabi_fsub>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	633b      	str	r3, [r7, #48]	; 0x30
    float Kt12 = CK11*CK13*CK15 - CK11*CK13*S11_angle;
 800cbca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cbcc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cbce:	f7f4 f8b1 	bl	8000d34 <__aeabi_fmul>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7f4 f8ac 	bl	8000d34 <__aeabi_fmul>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	461c      	mov	r4, r3
 800cbe0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cbe2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cbe4:	f7f4 f8a6 	bl	8000d34 <__aeabi_fmul>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7f4 f8a0 	bl	8000d34 <__aeabi_fmul>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f7f3 ff91 	bl	8000b20 <__aeabi_fsub>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	62fb      	str	r3, [r7, #44]	; 0x2c
    float Kt21 = CK11*CK12*S21_angle - CK11*CK14*CK17;
 800cc02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cc04:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cc06:	f7f4 f895 	bl	8000d34 <__aeabi_fmul>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7f4 f88f 	bl	8000d34 <__aeabi_fmul>
 800cc16:	4603      	mov	r3, r0
 800cc18:	461c      	mov	r4, r3
 800cc1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cc1c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cc1e:	f7f4 f889 	bl	8000d34 <__aeabi_fmul>
 800cc22:	4603      	mov	r3, r0
 800cc24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7f4 f884 	bl	8000d34 <__aeabi_fmul>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	4619      	mov	r1, r3
 800cc30:	4620      	mov	r0, r4
 800cc32:	f7f3 ff75 	bl	8000b20 <__aeabi_fsub>
 800cc36:	4603      	mov	r3, r0
 800cc38:	62bb      	str	r3, [r7, #40]	; 0x28
    float Kt22 = CK11*CK15*CK17 - CK11*CK13*S21_angle;
 800cc3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc3c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cc3e:	f7f4 f879 	bl	8000d34 <__aeabi_fmul>
 800cc42:	4603      	mov	r3, r0
 800cc44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7f4 f874 	bl	8000d34 <__aeabi_fmul>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	461c      	mov	r4, r3
 800cc50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cc52:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cc54:	f7f4 f86e 	bl	8000d34 <__aeabi_fmul>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7f4 f868 	bl	8000d34 <__aeabi_fmul>
 800cc64:	4603      	mov	r3, r0
 800cc66:	4619      	mov	r1, r3
 800cc68:	4620      	mov	r0, r4
 800cc6a:	f7f3 ff59 	bl	8000b20 <__aeabi_fsub>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	627b      	str	r3, [r7, #36]	; 0x24
    float Kt31 = CK11*CK12*S31_angle - CK11*CK14*CK16;
 800cc72:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cc74:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cc76:	f7f4 f85d 	bl	8000d34 <__aeabi_fmul>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7f4 f858 	bl	8000d34 <__aeabi_fmul>
 800cc84:	4603      	mov	r3, r0
 800cc86:	461c      	mov	r4, r3
 800cc88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cc8a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cc8c:	f7f4 f852 	bl	8000d34 <__aeabi_fmul>
 800cc90:	4603      	mov	r3, r0
 800cc92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7f4 f84d 	bl	8000d34 <__aeabi_fmul>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	4620      	mov	r0, r4
 800cca0:	f7f3 ff3e 	bl	8000b20 <__aeabi_fsub>
 800cca4:	4603      	mov	r3, r0
 800cca6:	623b      	str	r3, [r7, #32]
    float Kt32 = CK11*CK15*CK16 - CK11*CK13*S31_angle;
 800cca8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ccaa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ccac:	f7f4 f842 	bl	8000d34 <__aeabi_fmul>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7f4 f83d 	bl	8000d34 <__aeabi_fmul>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	461c      	mov	r4, r3
 800ccbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ccc0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ccc2:	f7f4 f837 	bl	8000d34 <__aeabi_fmul>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ccca:	4618      	mov	r0, r3
 800cccc:	f7f4 f832 	bl	8000d34 <__aeabi_fmul>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	f7f3 ff23 	bl	8000b20 <__aeabi_fsub>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	61fb      	str	r3, [r7, #28]

    float Cx11 = angle_bias - gyro + angle_rate;
 800ccde:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800cce2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800cce6:	f7f3 ff1b 	bl	8000b20 <__aeabi_fsub>
 800ccea:	4603      	mov	r3, r0
 800ccec:	4619      	mov	r1, r3
 800ccee:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800ccf2:	f7f3 ff17 	bl	8000b24 <__addsf3>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	61bb      	str	r3, [r7, #24]
    float Cx12 = angle_acc - angle_ekf;
 800ccfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ccfe:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800cd02:	f7f3 ff0d 	bl	8000b20 <__aeabi_fsub>
 800cd06:	4603      	mov	r3, r0
 800cd08:	617b      	str	r3, [r7, #20]

    angle_ekf = angle_ekf - Cx11*Kt12 + Cx12*Kt11;
 800cd0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd0c:	69b8      	ldr	r0, [r7, #24]
 800cd0e:	f7f4 f811 	bl	8000d34 <__aeabi_fmul>
 800cd12:	4603      	mov	r3, r0
 800cd14:	4619      	mov	r1, r3
 800cd16:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800cd1a:	f7f3 ff01 	bl	8000b20 <__aeabi_fsub>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	461c      	mov	r4, r3
 800cd22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd24:	6978      	ldr	r0, [r7, #20]
 800cd26:	f7f4 f805 	bl	8000d34 <__aeabi_fmul>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	4620      	mov	r0, r4
 800cd30:	f7f3 fef8 	bl	8000b24 <__addsf3>
 800cd34:	4603      	mov	r3, r0
 800cd36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    angle_bias = angle_bias - Cx11*Kt22 + Cx12*Kt21;
 800cd3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd3c:	69b8      	ldr	r0, [r7, #24]
 800cd3e:	f7f3 fff9 	bl	8000d34 <__aeabi_fmul>
 800cd42:	4603      	mov	r3, r0
 800cd44:	4619      	mov	r1, r3
 800cd46:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800cd4a:	f7f3 fee9 	bl	8000b20 <__aeabi_fsub>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	461c      	mov	r4, r3
 800cd52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd54:	6978      	ldr	r0, [r7, #20]
 800cd56:	f7f3 ffed 	bl	8000d34 <__aeabi_fmul>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f7f3 fee0 	bl	8000b24 <__addsf3>
 800cd64:	4603      	mov	r3, r0
 800cd66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    angle_rate = angle_rate - Cx11*Kt32 + Cx12*Kt31;
 800cd6a:	69f9      	ldr	r1, [r7, #28]
 800cd6c:	69b8      	ldr	r0, [r7, #24]
 800cd6e:	f7f3 ffe1 	bl	8000d34 <__aeabi_fmul>
 800cd72:	4603      	mov	r3, r0
 800cd74:	4619      	mov	r1, r3
 800cd76:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800cd7a:	f7f3 fed1 	bl	8000b20 <__aeabi_fsub>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	461c      	mov	r4, r3
 800cd82:	6a39      	ldr	r1, [r7, #32]
 800cd84:	6978      	ldr	r0, [r7, #20]
 800cd86:	f7f3 ffd5 	bl	8000d34 <__aeabi_fmul>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f7f3 fec8 	bl	8000b24 <__addsf3>
 800cd94:	4603      	mov	r3, r0
 800cd96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    float CS11 = Kt32 - 1;
 800cd9a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cd9e:	69f8      	ldr	r0, [r7, #28]
 800cda0:	f7f3 febe 	bl	8000b20 <__aeabi_fsub>
 800cda4:	4603      	mov	r3, r0
 800cda6:	613b      	str	r3, [r7, #16]
    float CS12 = Kt22 - 1;
 800cda8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cdac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdae:	f7f3 feb7 	bl	8000b20 <__aeabi_fsub>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	60fb      	str	r3, [r7, #12]
    float CS13 = Kt11 - 1;
 800cdb6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cdba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdbc:	f7f3 feb0 	bl	8000b20 <__aeabi_fsub>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	60bb      	str	r3, [r7, #8]

    S11_angle = - CS13*S11_angle - Kt12*S21_angle - Kt12*S31_angle;
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cdca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7f3 ffb0 	bl	8000d34 <__aeabi_fmul>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	461c      	mov	r4, r3
 800cdd8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800cddc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdde:	f7f3 ffa9 	bl	8000d34 <__aeabi_fmul>
 800cde2:	4603      	mov	r3, r0
 800cde4:	4619      	mov	r1, r3
 800cde6:	4620      	mov	r0, r4
 800cde8:	f7f3 fe9a 	bl	8000b20 <__aeabi_fsub>
 800cdec:	4603      	mov	r3, r0
 800cdee:	461c      	mov	r4, r3
 800cdf0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800cdf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdf4:	f7f3 ff9e 	bl	8000d34 <__aeabi_fmul>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f7f3 fe8f 	bl	8000b20 <__aeabi_fsub>
 800ce02:	4603      	mov	r3, r0
 800ce04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    S12_angle = - CS13*S12_angle - Kt12*S22_angle - Kt12*S32_angle;
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ce0e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7f3 ff8e 	bl	8000d34 <__aeabi_fmul>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	461c      	mov	r4, r3
 800ce1c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ce20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce22:	f7f3 ff87 	bl	8000d34 <__aeabi_fmul>
 800ce26:	4603      	mov	r3, r0
 800ce28:	4619      	mov	r1, r3
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	f7f3 fe78 	bl	8000b20 <__aeabi_fsub>
 800ce30:	4603      	mov	r3, r0
 800ce32:	461c      	mov	r4, r3
 800ce34:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ce36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce38:	f7f3 ff7c 	bl	8000d34 <__aeabi_fmul>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	4619      	mov	r1, r3
 800ce40:	4620      	mov	r0, r4
 800ce42:	f7f3 fe6d 	bl	8000b20 <__aeabi_fsub>
 800ce46:	4603      	mov	r3, r0
 800ce48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    S13_angle = - CS13*S13_angle - Kt12*S23_angle - Kt12*S33_angle;
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ce52:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7f3 ff6c 	bl	8000d34 <__aeabi_fmul>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	461c      	mov	r4, r3
 800ce60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ce62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce64:	f7f3 ff66 	bl	8000d34 <__aeabi_fmul>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	f7f3 fe57 	bl	8000b20 <__aeabi_fsub>
 800ce72:	4603      	mov	r3, r0
 800ce74:	461c      	mov	r4, r3
 800ce76:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ce78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce7a:	f7f3 ff5b 	bl	8000d34 <__aeabi_fmul>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	4619      	mov	r1, r3
 800ce82:	4620      	mov	r0, r4
 800ce84:	f7f3 fe4c 	bl	8000b20 <__aeabi_fsub>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    S21_angle = - CS12*S21_angle - Kt21*S11_angle - Kt22*S31_angle;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ce94:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7f3 ff4b 	bl	8000d34 <__aeabi_fmul>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	461c      	mov	r4, r3
 800cea2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cea8:	f7f3 ff44 	bl	8000d34 <__aeabi_fmul>
 800ceac:	4603      	mov	r3, r0
 800ceae:	4619      	mov	r1, r3
 800ceb0:	4620      	mov	r0, r4
 800ceb2:	f7f3 fe35 	bl	8000b20 <__aeabi_fsub>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	461c      	mov	r4, r3
 800ceba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800cebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cebe:	f7f3 ff39 	bl	8000d34 <__aeabi_fmul>
 800cec2:	4603      	mov	r3, r0
 800cec4:	4619      	mov	r1, r3
 800cec6:	4620      	mov	r0, r4
 800cec8:	f7f3 fe2a 	bl	8000b20 <__aeabi_fsub>
 800cecc:	4603      	mov	r3, r0
 800cece:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    S22_angle = - CS12*S22_angle - Kt21*S12_angle - Kt22*S32_angle;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ced8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cedc:	4618      	mov	r0, r3
 800cede:	f7f3 ff29 	bl	8000d34 <__aeabi_fmul>
 800cee2:	4603      	mov	r3, r0
 800cee4:	461c      	mov	r4, r3
 800cee6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800ceea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ceec:	f7f3 ff22 	bl	8000d34 <__aeabi_fmul>
 800cef0:	4603      	mov	r3, r0
 800cef2:	4619      	mov	r1, r3
 800cef4:	4620      	mov	r0, r4
 800cef6:	f7f3 fe13 	bl	8000b20 <__aeabi_fsub>
 800cefa:	4603      	mov	r3, r0
 800cefc:	461c      	mov	r4, r3
 800cefe:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cf00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf02:	f7f3 ff17 	bl	8000d34 <__aeabi_fmul>
 800cf06:	4603      	mov	r3, r0
 800cf08:	4619      	mov	r1, r3
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	f7f3 fe08 	bl	8000b20 <__aeabi_fsub>
 800cf10:	4603      	mov	r3, r0
 800cf12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    S23_angle = - CS12*S23_angle - Kt21*S13_angle - Kt22*S33_angle;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cf1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7f3 ff08 	bl	8000d34 <__aeabi_fmul>
 800cf24:	4603      	mov	r3, r0
 800cf26:	461c      	mov	r4, r3
 800cf28:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800cf2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf2e:	f7f3 ff01 	bl	8000d34 <__aeabi_fmul>
 800cf32:	4603      	mov	r3, r0
 800cf34:	4619      	mov	r1, r3
 800cf36:	4620      	mov	r0, r4
 800cf38:	f7f3 fdf2 	bl	8000b20 <__aeabi_fsub>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	461c      	mov	r4, r3
 800cf40:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cf42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf44:	f7f3 fef6 	bl	8000d34 <__aeabi_fmul>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	4620      	mov	r0, r4
 800cf4e:	f7f3 fde7 	bl	8000b20 <__aeabi_fsub>
 800cf52:	4603      	mov	r3, r0
 800cf54:	67fb      	str	r3, [r7, #124]	; 0x7c
    S31_angle = - CS11*S31_angle - Kt31*S11_angle - Kt32*S21_angle;
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cf5c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7f3 fee8 	bl	8000d34 <__aeabi_fmul>
 800cf64:	4603      	mov	r3, r0
 800cf66:	461c      	mov	r4, r3
 800cf68:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cf6c:	6a38      	ldr	r0, [r7, #32]
 800cf6e:	f7f3 fee1 	bl	8000d34 <__aeabi_fmul>
 800cf72:	4603      	mov	r3, r0
 800cf74:	4619      	mov	r1, r3
 800cf76:	4620      	mov	r0, r4
 800cf78:	f7f3 fdd2 	bl	8000b20 <__aeabi_fsub>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	461c      	mov	r4, r3
 800cf80:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800cf84:	69f8      	ldr	r0, [r7, #28]
 800cf86:	f7f3 fed5 	bl	8000d34 <__aeabi_fmul>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	4620      	mov	r0, r4
 800cf90:	f7f3 fdc6 	bl	8000b20 <__aeabi_fsub>
 800cf94:	4603      	mov	r3, r0
 800cf96:	67bb      	str	r3, [r7, #120]	; 0x78
    S32_angle = - CS11*S32_angle - Kt31*S12_angle - Kt32*S22_angle;
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cf9e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7f3 fec7 	bl	8000d34 <__aeabi_fmul>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	461c      	mov	r4, r3
 800cfaa:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800cfae:	6a38      	ldr	r0, [r7, #32]
 800cfb0:	f7f3 fec0 	bl	8000d34 <__aeabi_fmul>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	4620      	mov	r0, r4
 800cfba:	f7f3 fdb1 	bl	8000b20 <__aeabi_fsub>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	461c      	mov	r4, r3
 800cfc2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cfc6:	69f8      	ldr	r0, [r7, #28]
 800cfc8:	f7f3 feb4 	bl	8000d34 <__aeabi_fmul>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	4619      	mov	r1, r3
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	f7f3 fda5 	bl	8000b20 <__aeabi_fsub>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	677b      	str	r3, [r7, #116]	; 0x74
    S33_angle = - CS11*S33_angle - Kt31*S13_angle - Kt32*S23_angle;
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cfe0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7f3 fea6 	bl	8000d34 <__aeabi_fmul>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	461c      	mov	r4, r3
 800cfec:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800cff0:	6a38      	ldr	r0, [r7, #32]
 800cff2:	f7f3 fe9f 	bl	8000d34 <__aeabi_fmul>
 800cff6:	4603      	mov	r3, r0
 800cff8:	4619      	mov	r1, r3
 800cffa:	4620      	mov	r0, r4
 800cffc:	f7f3 fd90 	bl	8000b20 <__aeabi_fsub>
 800d000:	4603      	mov	r3, r0
 800d002:	461c      	mov	r4, r3
 800d004:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d006:	69f8      	ldr	r0, [r7, #28]
 800d008:	f7f3 fe94 	bl	8000d34 <__aeabi_fmul>
 800d00c:	4603      	mov	r3, r0
 800d00e:	4619      	mov	r1, r3
 800d010:	4620      	mov	r0, r4
 800d012:	f7f3 fd85 	bl	8000b20 <__aeabi_fsub>
 800d016:	4603      	mov	r3, r0
 800d018:	673b      	str	r3, [r7, #112]	; 0x70

    switch(euler_angle) {
 800d01a:	78fb      	ldrb	r3, [r7, #3]
 800d01c:	2b02      	cmp	r3, #2
 800d01e:	f000 8082 	beq.w	800d126 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xdce>
 800d022:	2b02      	cmp	r3, #2
 800d024:	f300 80bc 	bgt.w	800d1a0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xe48>
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d002      	beq.n	800d032 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xcda>
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d03d      	beq.n	800d0ac <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xd54>
    			 S32_yaw = S32_angle;
    			 S33_yaw = S33_angle;
    			break;

    }
}
 800d030:	e0b6      	b.n	800d1a0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xe48>
    			 roll_ekf = angle_ekf ;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d038:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
    			 roll_rate = angle_rate;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d042:	625a      	str	r2, [r3, #36]	; 0x24
    			 roll_bias = angle_bias;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d04a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    			 roll_acc = angle_acc ;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d054:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
    			 S11_roll = S11_angle;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d05e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    			 S12_roll = S12_angle;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d068:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    			 S13_roll = S13_angle;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d072:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    			 S21_roll = S21_angle;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d07c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    			 S22_roll = S22_angle;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d086:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    			 S23_roll = S23_angle;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d08e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    			 S31_roll = S31_angle;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d096:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    			 S32_roll = S32_angle;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d09e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    			 S33_roll = S33_angle;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d0a6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    			break;
 800d0aa:	e079      	b.n	800d1a0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xe48>
    			 pitch_ekf = angle_ekf ;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d0b2:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
    			 pitch_rate = angle_rate;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d0bc:	629a      	str	r2, [r3, #40]	; 0x28
    			 pitch_bias = angle_bias;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d0c4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    			 pitch_acc = angle_acc ;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d0ce:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
    			 S11_pitch = S11_angle;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d0d8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    			 S12_pitch = S12_angle;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d0e2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    			 S13_pitch = S13_angle;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d0ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    			 S21_pitch = S21_angle;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d0f6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    			 S22_pitch = S22_angle;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d100:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    			 S23_pitch = S23_angle;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d108:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    			 S31_pitch = S31_angle;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d110:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    			 S32_pitch = S32_angle;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d118:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    			 S33_pitch = S33_angle;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d120:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    			break;
 800d124:	e03c      	b.n	800d1a0 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xe48>
    			 yaw_ekf = angle_ekf ;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d12c:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    			 yaw_rate = angle_rate;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d136:	62da      	str	r2, [r3, #44]	; 0x2c
    			 yaw_bias = angle_bias;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d13e:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
    			 yaw_acc = angle_acc ;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d148:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
    			 S11_yaw = S11_angle;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d152:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    			 S12_yaw = S12_angle;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d15c:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    			 S13_yaw = S13_angle;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d166:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    			 S21_yaw = S21_angle;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d170:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    			 S22_yaw = S22_angle;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d17a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    			 S23_yaw = S23_angle;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d182:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    			 S31_yaw = S31_angle;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d18a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    			 S32_yaw = S32_angle;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d192:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    			 S33_yaw = S33_angle;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d19a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    			break;
 800d19e:	bf00      	nop
}
 800d1a0:	bf00      	nop
 800d1a2:	37a8      	adds	r7, #168	; 0xa8
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d1aa:	bf00      	nop

0800d1ac <_ZN15Kalman_Filtresi3RunEv>:

	xgps = xbody;
	ygps = ybody;

}
void Kalman_Filtresi::Run() {
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b086      	sub	sp, #24
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]

  acc_pos_x_med += acc_pos_x;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	685a      	ldr	r2, [r3, #4]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800d1be:	4619      	mov	r1, r3
 800d1c0:	4610      	mov	r0, r2
 800d1c2:	f7f3 fcaf 	bl	8000b24 <__addsf3>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	605a      	str	r2, [r3, #4]
  float accX = acc[0];
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d1d4:	617b      	str	r3, [r7, #20]
  float accY = acc[1];
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d1dc:	613b      	str	r3, [r7, #16]
  float accZ = acc[2];
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d1e4:	60fb      	str	r3, [r7, #12]



//    if(gyro_ready) {

    pos_ekf_counter++;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	1c5a      	adds	r2, r3, #1
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	609a      	str	r2, [r3, #8]
    EKF_Attitude(ROLL);
 800d1f0:	2100      	movs	r1, #0
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f7ff f8b0 	bl	800c358 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
    EKF_Attitude(PITCH);
 800d1f8:	2101      	movs	r1, #1
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f7ff f8ac 	bl	800c358 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
    EKF_Attitude(YAW);
 800d200:	2102      	movs	r1, #2
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f7ff f8a8 	bl	800c358 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
//
//    	gyro_ready = true;
//    }


	pitch_eski=pitch_comp;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	roll_eski=roll_comp;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

    state.angles[0] = roll_ekf;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8d3 21f4 	ldr.w	r2, [r3, #500]	; 0x1f4
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    state.angles[1] = pitch_ekf;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    state.angles[2] = -1*yaw_ekf;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800d23e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

    state.rates[0] = roll_rate;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    state.rates[1] = pitch_rate;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    state.rates[2] = yaw_rate;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4

    state.bias[0] = roll_bias;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    state.bias[1] = pitch_bias;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    state.bias[2] = yaw_bias;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0

}
 800d28a:	bf00      	nop
 800d28c:	3718      	adds	r7, #24
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}

0800d292 <_ZN15Kalman_FiltresiD1Ev>:

Kalman_Filtresi::~Kalman_Filtresi() {}
 800d292:	b580      	push	{r7, lr}
 800d294:	b082      	sub	sp, #8
 800d296:	af00      	add	r7, sp, #0
 800d298:	6078      	str	r0, [r7, #4]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f503 7348 	add.w	r3, r3, #800	; 0x320
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f000 fc88 	bl	800dbb6 <_ZN3lpfD1Ev>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f000 fc82 	bl	800dbb6 <_ZN3lpfD1Ev>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f000 fc7c 	bl	800dbb6 <_ZN3lpfD1Ev>
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3708      	adds	r7, #8
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID() {};
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b086      	sub	sp, #24
 800d2cc:	af04      	add	r7, sp, #16
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	4a27      	ldr	r2, [pc, #156]	; (800d370 <_ZN3PIDC1Ev+0xa8>)
 800d2d4:	609a      	str	r2, [r3, #8]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	4a26      	ldr	r2, [pc, #152]	; (800d374 <_ZN3PIDC1Ev+0xac>)
 800d2da:	60da      	str	r2, [r3, #12]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4a26      	ldr	r2, [pc, #152]	; (800d378 <_ZN3PIDC1Ev+0xb0>)
 800d2e0:	611a      	str	r2, [r3, #16]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	22c8      	movs	r2, #200	; 0xc8
 800d2e6:	615a      	str	r2, [r3, #20]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	695b      	ldr	r3, [r3, #20]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7f3 fccd 	bl	8000c8c <__aeabi_i2f>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d2fa:	f7f3 fdcf 	bl	8000e9c <__aeabi_fdiv>
 800d2fe:	4603      	mov	r3, r0
 800d300:	461a      	mov	r2, r3
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	619a      	str	r2, [r3, #24]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	4a1c      	ldr	r2, [pc, #112]	; (800d37c <_ZN3PIDC1Ev+0xb4>)
 800d30a:	61da      	str	r2, [r3, #28]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	69da      	ldr	r2, [r3, #28]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	699b      	ldr	r3, [r3, #24]
 800d314:	4619      	mov	r1, r3
 800d316:	4610      	mov	r0, r2
 800d318:	f7f3 fd0c 	bl	8000d34 <__aeabi_fmul>
 800d31c:	4603      	mov	r3, r0
 800d31e:	461a      	mov	r2, r3
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	621a      	str	r2, [r3, #32]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d32a:	a30d      	add	r3, pc, #52	; (adr r3, 800d360 <_ZN3PIDC1Ev+0x98>)
 800d32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d330:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d334:	a30a      	add	r3, pc, #40	; (adr r3, 800d360 <_ZN3PIDC1Ev+0x98>)
 800d336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33a:	e9cd 2300 	strd	r2, r3, [sp]
 800d33e:	a30a      	add	r3, pc, #40	; (adr r3, 800d368 <_ZN3PIDC1Ev+0xa0>)
 800d340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d344:	4608      	mov	r0, r1
 800d346:	f000 fbc5 	bl	800dad4 <_ZN3lpfC1Eddd>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d350:	669a      	str	r2, [r3, #104]	; 0x68
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	4618      	mov	r0, r3
 800d356:	3708      	adds	r7, #8
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	f3af 8000 	nop.w
 800d360:	de7ea5f8 	.word	0xde7ea5f8
 800d364:	3fb2a454 	.word	0x3fb2a454
 800d368:	ab367a10 	.word	0xab367a10
 800d36c:	3feb573e 	.word	0x3feb573e
 800d370:	3d4ccccd 	.word	0x3d4ccccd
 800d374:	42f00000 	.word	0x42f00000
 800d378:	c2f00000 	.word	0xc2f00000
 800d37c:	3e99999a 	.word	0x3e99999a

0800d380 <_ZN3PID7P_AngleEffff>:

float PID::P_Angle(float alpha_des, float alpha, float Kp_angle, float Ki_angle) {
 800d380:	b590      	push	{r4, r7, lr}
 800d382:	b087      	sub	sp, #28
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	60b9      	str	r1, [r7, #8]
 800d38a:	607a      	str	r2, [r7, #4]
 800d38c:	603b      	str	r3, [r7, #0]
	float P,I;
	e_angle = alpha_des - alpha;
 800d38e:	6879      	ldr	r1, [r7, #4]
 800d390:	68b8      	ldr	r0, [r7, #8]
 800d392:	f7f3 fbc5 	bl	8000b20 <__aeabi_fsub>
 800d396:	4603      	mov	r3, r0
 800d398:	461a      	mov	r2, r3
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	ie_roll += e_angle*st;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	699b      	ldr	r3, [r3, #24]
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	4610      	mov	r0, r2
 800d3b2:	f7f3 fcbf 	bl	8000d34 <__aeabi_fmul>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	f7f3 fbb2 	bl	8000b24 <__addsf3>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	67da      	str	r2, [r3, #124]	; 0x7c
	P = Kp_angle*e_angle;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	6838      	ldr	r0, [r7, #0]
 800d3d2:	f7f3 fcaf 	bl	8000d34 <__aeabi_fmul>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	617b      	str	r3, [r7, #20]
	I = Ki_angle*ie_roll;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3de:	4619      	mov	r1, r3
 800d3e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3e2:	f7f3 fca7 	bl	8000d34 <__aeabi_fmul>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	613b      	str	r3, [r7, #16]
    return P+I;
 800d3ea:	6939      	ldr	r1, [r7, #16]
 800d3ec:	6978      	ldr	r0, [r7, #20]
 800d3ee:	f7f3 fb99 	bl	8000b24 <__addsf3>
 800d3f2:	4603      	mov	r3, r0

}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	371c      	adds	r7, #28
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd90      	pop	{r4, r7, pc}

0800d3fc <_ZN3PID6PI_VelEfffffj>:
	float P = Kp_angle * sqrt_e + alpha_des;
	P = P * sign_e;
	return P;
}

float PID::PI_Vel(float z0, float z, float v, float Kp_alt, float Ki_alt, unsigned int ch) {
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b08a      	sub	sp, #40	; 0x28
 800d400:	af00      	add	r7, sp, #0
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
 800d408:	603b      	str	r3, [r7, #0]
	float P;
	float I;
	float v_des;

	if(ch > 1700) {
 800d40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d40c:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800d410:	4293      	cmp	r3, r2
 800d412:	d90e      	bls.n	800d432 <_ZN3PID6PI_VelEfffffj+0x36>
		zi = z0 + x_inc;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	6a1b      	ldr	r3, [r3, #32]
 800d418:	68b9      	ldr	r1, [r7, #8]
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7f3 fb82 	bl	8000b24 <__addsf3>
 800d420:	4603      	mov	r3, r0
 800d422:	461a      	mov	r2, r3
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		v_des = vz_def;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	69db      	ldr	r3, [r3, #28]
 800d42e:	627b      	str	r3, [r7, #36]	; 0x24
 800d430:	e01c      	b.n	800d46c <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else if (ch < 1300) {
 800d432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d434:	f240 5213 	movw	r2, #1299	; 0x513
 800d438:	4293      	cmp	r3, r2
 800d43a:	d810      	bhi.n	800d45e <_ZN3PID6PI_VelEfffffj+0x62>
		zi = z0 - x_inc;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	6a1b      	ldr	r3, [r3, #32]
 800d440:	4619      	mov	r1, r3
 800d442:	68b8      	ldr	r0, [r7, #8]
 800d444:	f7f3 fb6c 	bl	8000b20 <__aeabi_fsub>
 800d448:	4603      	mov	r3, r0
 800d44a:	461a      	mov	r2, r3
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		v_des = -1 * vz_def;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	69db      	ldr	r3, [r3, #28]
 800d456:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d45a:	627b      	str	r3, [r7, #36]	; 0x24
 800d45c:	e006      	b.n	800d46c <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else {
		zi = z0;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	68ba      	ldr	r2, [r7, #8]
 800d462:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		v_des = 0;
 800d466:	f04f 0300 	mov.w	r3, #0
 800d46a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	float e = v_des - v;
 800d46c:	6839      	ldr	r1, [r7, #0]
 800d46e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d470:	f7f3 fb56 	bl	8000b20 <__aeabi_fsub>
 800d474:	4603      	mov	r3, r0
 800d476:	623b      	str	r3, [r7, #32]
	P = Kp_alt*e;
 800d478:	6a39      	ldr	r1, [r7, #32]
 800d47a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d47c:	f7f3 fc5a 	bl	8000d34 <__aeabi_fmul>
 800d480:	4603      	mov	r3, r0
 800d482:	61fb      	str	r3, [r7, #28]

	float ei = z0 - z;
 800d484:	6879      	ldr	r1, [r7, #4]
 800d486:	68b8      	ldr	r0, [r7, #8]
 800d488:	f7f3 fb4a 	bl	8000b20 <__aeabi_fsub>
 800d48c:	4603      	mov	r3, r0
 800d48e:	61bb      	str	r3, [r7, #24]
	I = Ki_alt * ei;
 800d490:	69b9      	ldr	r1, [r7, #24]
 800d492:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d494:	f7f3 fc4e 	bl	8000d34 <__aeabi_fmul>
 800d498:	4603      	mov	r3, r0
 800d49a:	617b      	str	r3, [r7, #20]

	float PI = P + I;
 800d49c:	6979      	ldr	r1, [r7, #20]
 800d49e:	69f8      	ldr	r0, [r7, #28]
 800d4a0:	f7f3 fb40 	bl	8000b24 <__addsf3>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	613b      	str	r3, [r7, #16]
    return PI;
 800d4a8:	693b      	ldr	r3, [r7, #16]

}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3728      	adds	r7, #40	; 0x28
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	0000      	movs	r0, r0
 800d4b4:	0000      	movs	r0, r0
	...

0800d4b8 <_ZN3PID6RateFFEf>:

float PID::RateFF(float rate_des) {
 800d4b8:	b5b0      	push	{r4, r5, r7, lr}
 800d4ba:	b084      	sub	sp, #16
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	6039      	str	r1, [r7, #0]
	float ff = 0.9975*ff_ + 0.0904*rate_des - 0.0904*rate_des_;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f7f2 ffa6 	bl	8000418 <__aeabi_f2d>
 800d4cc:	a31e      	add	r3, pc, #120	; (adr r3, 800d548 <_ZN3PID6RateFFEf+0x90>)
 800d4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d2:	f7f2 fff9 	bl	80004c8 <__aeabi_dmul>
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	460b      	mov	r3, r1
 800d4da:	4614      	mov	r4, r2
 800d4dc:	461d      	mov	r5, r3
 800d4de:	6838      	ldr	r0, [r7, #0]
 800d4e0:	f7f2 ff9a 	bl	8000418 <__aeabi_f2d>
 800d4e4:	a31a      	add	r3, pc, #104	; (adr r3, 800d550 <_ZN3PID6RateFFEf+0x98>)
 800d4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ea:	f7f2 ffed 	bl	80004c8 <__aeabi_dmul>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	4629      	mov	r1, r5
 800d4f6:	f7f2 fe31 	bl	800015c <__adddf3>
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	4614      	mov	r4, r2
 800d500:	461d      	mov	r5, r3
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d506:	4618      	mov	r0, r3
 800d508:	f7f2 ff86 	bl	8000418 <__aeabi_f2d>
 800d50c:	a310      	add	r3, pc, #64	; (adr r3, 800d550 <_ZN3PID6RateFFEf+0x98>)
 800d50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d512:	f7f2 ffd9 	bl	80004c8 <__aeabi_dmul>
 800d516:	4602      	mov	r2, r0
 800d518:	460b      	mov	r3, r1
 800d51a:	4620      	mov	r0, r4
 800d51c:	4629      	mov	r1, r5
 800d51e:	f7f2 fe1b 	bl	8000158 <__aeabi_dsub>
 800d522:	4602      	mov	r2, r0
 800d524:	460b      	mov	r3, r1
 800d526:	4610      	mov	r0, r2
 800d528:	4619      	mov	r1, r3
 800d52a:	f7f3 faa5 	bl	8000a78 <__aeabi_d2f>
 800d52e:	4603      	mov	r3, r0
 800d530:	60fb      	str	r3, [r7, #12]
	return K_ff*ff;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d536:	68f9      	ldr	r1, [r7, #12]
 800d538:	4618      	mov	r0, r3
 800d53a:	f7f3 fbfb 	bl	8000d34 <__aeabi_fmul>
 800d53e:	4603      	mov	r3, r0
}
 800d540:	4618      	mov	r0, r3
 800d542:	3710      	adds	r7, #16
 800d544:	46bd      	mov	sp, r7
 800d546:	bdb0      	pop	{r4, r5, r7, pc}
 800d548:	1eb851ec 	.word	0x1eb851ec
 800d54c:	3fefeb85 	.word	0x3fefeb85
 800d550:	538ef34d 	.word	0x538ef34d
 800d554:	3fb72474 	.word	0x3fb72474

0800d558 <_ZN3PID9PID_Rate2Efffffff>:


float PID::PID_Rate2(float alpha_dot_des, float alpha_dot, float alpha, float Kp, float Ki, float Kd, float Kp_angle) {
 800d558:	b590      	push	{r4, r7, lr}
 800d55a:	b087      	sub	sp, #28
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	60f8      	str	r0, [r7, #12]
 800d560:	60b9      	str	r1, [r7, #8]
 800d562:	607a      	str	r2, [r7, #4]
 800d564:	603b      	str	r3, [r7, #0]
	e_roll = alpha_dot_des - alpha_dot;
 800d566:	6879      	ldr	r1, [r7, #4]
 800d568:	68b8      	ldr	r0, [r7, #8]
 800d56a:	f7f3 fad9 	bl	8000b20 <__aeabi_fsub>
 800d56e:	4603      	mov	r3, r0
 800d570:	461a      	mov	r2, r3
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	66da      	str	r2, [r3, #108]	; 0x6c
	ie_roll_rate += e_roll*st;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	699b      	ldr	r3, [r3, #24]
 800d584:	4619      	mov	r1, r3
 800d586:	4610      	mov	r0, r2
 800d588:	f7f3 fbd4 	bl	8000d34 <__aeabi_fmul>
 800d58c:	4603      	mov	r3, r0
 800d58e:	4619      	mov	r1, r3
 800d590:	4620      	mov	r0, r4
 800d592:	f7f3 fac7 	bl	8000b24 <__addsf3>
 800d596:	4603      	mov	r3, r0
 800d598:	461a      	mov	r2, r3
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	P = Kp * e_roll;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7f3 fbc4 	bl	8000d34 <__aeabi_fmul>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c



	//I = Ki * (ie_roll * Kp_angle - alpha);
	I = Ki * ie_roll_rate;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7f3 fbb8 	bl	8000d34 <__aeabi_fmul>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	//float alpha_dot_dot_des = alpha_dot_des - alpha_dot_des_;
	float alpha_dot_dot = (alpha_dot - alpha_dot_) / st;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5d2:	4619      	mov	r1, r3
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f7f3 faa3 	bl	8000b20 <__aeabi_fsub>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	461a      	mov	r2, r3
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	699b      	ldr	r3, [r3, #24]
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	4610      	mov	r0, r2
 800d5e6:	f7f3 fc59 	bl	8000e9c <__aeabi_fdiv>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	617b      	str	r3, [r7, #20]
	//alpha_dot_dot_des = alpha_dot_dot_des / st;
	alpha_dot_dot = d_filt.Run(alpha_dot_dot);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	3338      	adds	r3, #56	; 0x38
 800d5f2:	6979      	ldr	r1, [r7, #20]
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f000 fa88 	bl	800db0a <_ZN3lpf3RunEf>
 800d5fa:	6178      	str	r0, [r7, #20]

	D = Kd * (-alpha_dot * Kp_angle - alpha_dot_dot);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d602:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d604:	4618      	mov	r0, r3
 800d606:	f7f3 fb95 	bl	8000d34 <__aeabi_fmul>
 800d60a:	4603      	mov	r3, r0
 800d60c:	6979      	ldr	r1, [r7, #20]
 800d60e:	4618      	mov	r0, r3
 800d610:	f7f3 fa86 	bl	8000b20 <__aeabi_fsub>
 800d614:	4603      	mov	r3, r0
 800d616:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d618:	4618      	mov	r0, r3
 800d61a:	f7f3 fb8b 	bl	8000d34 <__aeabi_fmul>
 800d61e:	4603      	mov	r3, r0
 800d620:	461a      	mov	r2, r3
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
//  	de_filt = N * (Kd * alpha_dot_des - de_int);
//  	de_int += de_filt*st;
//  	D = de_filt;


	pd = P + I + D;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d634:	4619      	mov	r1, r3
 800d636:	4610      	mov	r0, r2
 800d638:	f7f3 fa74 	bl	8000b24 <__addsf3>
 800d63c:	4603      	mov	r3, r0
 800d63e:	461a      	mov	r2, r3
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d646:	4619      	mov	r1, r3
 800d648:	4610      	mov	r0, r2
 800d64a:	f7f3 fa6b 	bl	8000b24 <__addsf3>
 800d64e:	4603      	mov	r3, r0
 800d650:	461a      	mov	r2, r3
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  	pd_roll_buf = pd;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	625a      	str	r2, [r3, #36]	; 0x24
	pd  = Sat(pd,  300, -300);
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800d668:	4b0e      	ldr	r3, [pc, #56]	; (800d6a4 <_ZN3PID9PID_Rate2Efffffff+0x14c>)
 800d66a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d66e:	68f8      	ldr	r0, [r7, #12]
 800d670:	f000 f9ba 	bl	800d9e8 <_ZN3PID3SatEfii>
 800d674:	4602      	mov	r2, r0
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pd_roll_sat_buf = pd;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	alpha_dot_des_ = alpha_dot_des;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	68ba      	ldr	r2, [r7, #8]
 800d68c:	62da      	str	r2, [r3, #44]	; 0x2c
	alpha_dot_ = alpha_dot;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	631a      	str	r2, [r3, #48]	; 0x30
	return pd;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	371c      	adds	r7, #28
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd90      	pop	{r4, r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	fffffed4 	.word	0xfffffed4

0800d6a8 <_ZN3PID7PID_PosEfffff>:

float PID::PID_Pos(float pos_des, float pos, float Kp, float Ki, float Kd) {
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b088      	sub	sp, #32
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	607a      	str	r2, [r7, #4]
 800d6b4:	603b      	str	r3, [r7, #0]
	_e_pos = e_pos;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	685a      	ldr	r2, [r3, #4]
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	601a      	str	r2, [r3, #0]
	e_pos = pos_des - pos;
 800d6be:	6879      	ldr	r1, [r7, #4]
 800d6c0:	68b8      	ldr	r0, [r7, #8]
 800d6c2:	f7f3 fa2d 	bl	8000b20 <__aeabi_fsub>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	461a      	mov	r2, r3
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	605a      	str	r2, [r3, #4]
	float P = Kp * e_pos;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	6838      	ldr	r0, [r7, #0]
 800d6d6:	f7f3 fb2d 	bl	8000d34 <__aeabi_fmul>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	61fb      	str	r3, [r7, #28]

	float e_pos_dot = (e_pos - _e_pos)/st_pos;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	685a      	ldr	r2, [r3, #4]
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	4610      	mov	r0, r2
 800d6ea:	f7f3 fa19 	bl	8000b20 <__aeabi_fsub>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	689b      	ldr	r3, [r3, #8]
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	4610      	mov	r0, r2
 800d6fa:	f7f3 fbcf 	bl	8000e9c <__aeabi_fdiv>
 800d6fe:	4603      	mov	r3, r0
 800d700:	61bb      	str	r3, [r7, #24]
	//alpha_dot_dot_des = alpha_dot_dot_des / st;
	//alpha_dot_dot = d_filt.Run(alpha_dot_dot);

	float D = Kd * e_pos_dot;
 800d702:	69b9      	ldr	r1, [r7, #24]
 800d704:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d706:	f7f3 fb15 	bl	8000d34 <__aeabi_fmul>
 800d70a:	4603      	mov	r3, r0
 800d70c:	617b      	str	r3, [r7, #20]
  	de_filt = N * (Kd * alpha_dot_des - de_int);
  	de_int += de_filt*st;
  	D = de_filt;
*/

	float pd = P + D;
 800d70e:	6979      	ldr	r1, [r7, #20]
 800d710:	69f8      	ldr	r0, [r7, #28]
 800d712:	f7f3 fa07 	bl	8000b24 <__addsf3>
 800d716:	4603      	mov	r3, r0
 800d718:	613b      	str	r3, [r7, #16]
	return pd;
 800d71a:	693b      	ldr	r3, [r7, #16]
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3720      	adds	r7, #32
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}

0800d724 <_ZN3PID7PD_RateEfffff>:

float PID::PD_Rate(float alpha_dot_des, float alpha_dot, float Kp, float Ki, float Kd) {
 800d724:	b590      	push	{r4, r7, lr}
 800d726:	b087      	sub	sp, #28
 800d728:	af00      	add	r7, sp, #0
 800d72a:	60f8      	str	r0, [r7, #12]
 800d72c:	60b9      	str	r1, [r7, #8]
 800d72e:	607a      	str	r2, [r7, #4]
 800d730:	603b      	str	r3, [r7, #0]

	e_roll = alpha_dot_des - alpha_dot;
 800d732:	6879      	ldr	r1, [r7, #4]
 800d734:	68b8      	ldr	r0, [r7, #8]
 800d736:	f7f3 f9f3 	bl	8000b20 <__aeabi_fsub>
 800d73a:	4603      	mov	r3, r0
 800d73c:	461a      	mov	r2, r3
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	66da      	str	r2, [r3, #108]	; 0x6c
  float e_roll_der = - alpha_dot;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d748:	613b      	str	r3, [r7, #16]
  float e_roll_int = e_roll;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d74e:	617b      	str	r3, [r7, #20]

  if((int)pd_roll_buf != (int)pd_roll_sat_buf) {
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d754:	4618      	mov	r0, r3
 800d756:	f7f3 fcc9 	bl	80010ec <__aeabi_f2iz>
 800d75a:	4604      	mov	r4, r0
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d762:	4618      	mov	r0, r3
 800d764:	f7f3 fcc2 	bl	80010ec <__aeabi_f2iz>
 800d768:	4603      	mov	r3, r0
 800d76a:	429c      	cmp	r4, r3
 800d76c:	d019      	beq.n	800d7a2 <_ZN3PID7PD_RateEfffff+0x7e>
    if(sgn(e_roll) == sgn(pd_roll_sat_buf)) {
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d772:	4619      	mov	r1, r3
 800d774:	68f8      	ldr	r0, [r7, #12]
 800d776:	f000 f8df 	bl	800d938 <_ZN3PID3sgnEf>
 800d77a:	4603      	mov	r3, r0
 800d77c:	461c      	mov	r4, r3
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d784:	4619      	mov	r1, r3
 800d786:	68f8      	ldr	r0, [r7, #12]
 800d788:	f000 f8d6 	bl	800d938 <_ZN3PID3sgnEf>
 800d78c:	4603      	mov	r3, r0
 800d78e:	429c      	cmp	r4, r3
 800d790:	bf0c      	ite	eq
 800d792:	2301      	moveq	r3, #1
 800d794:	2300      	movne	r3, #0
 800d796:	b2db      	uxtb	r3, r3
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d002      	beq.n	800d7a2 <_ZN3PID7PD_RateEfffff+0x7e>
      e_roll_int = 0;
 800d79c:	f04f 0300 	mov.w	r3, #0
 800d7a0:	617b      	str	r3, [r7, #20]
    }
  }

  	de_filt = N * (Kd * e_roll - de_int);
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7f3 fac3 	bl	8000d34 <__aeabi_fmul>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d7b8:	4619      	mov	r1, r3
 800d7ba:	4610      	mov	r0, r2
 800d7bc:	f7f3 f9b0 	bl	8000b20 <__aeabi_fsub>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	494d      	ldr	r1, [pc, #308]	; (800d8f8 <_ZN3PID7PD_RateEfffff+0x1d4>)
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f7f3 fab5 	bl	8000d34 <__aeabi_fmul>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  	de_int += de_filt*st;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f8d3 4098 	ldr.w	r4, [r3, #152]	; 0x98
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	699b      	ldr	r3, [r3, #24]
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	4610      	mov	r0, r2
 800d7e8:	f7f3 faa4 	bl	8000d34 <__aeabi_fmul>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	4620      	mov	r0, r4
 800d7f2:	f7f3 f997 	bl	8000b24 <__addsf3>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	de = e_roll - e_eski_roll;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d808:	4619      	mov	r1, r3
 800d80a:	4610      	mov	r0, r2
 800d80c:	f7f3 f988 	bl	8000b20 <__aeabi_fsub>
 800d810:	4603      	mov	r3, r0
 800d812:	461a      	mov	r2, r3
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	e_eski_roll = e_roll;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	675a      	str	r2, [r3, #116]	; 0x74

  ie_roll += e_roll_int*st;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	699b      	ldr	r3, [r3, #24]
 800d82a:	6979      	ldr	r1, [r7, #20]
 800d82c:	4618      	mov	r0, r3
 800d82e:	f7f3 fa81 	bl	8000d34 <__aeabi_fmul>
 800d832:	4603      	mov	r3, r0
 800d834:	4619      	mov	r1, r3
 800d836:	4620      	mov	r0, r4
 800d838:	f7f3 f974 	bl	8000b24 <__addsf3>
 800d83c:	4603      	mov	r3, r0
 800d83e:	461a      	mov	r2, r3
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	67da      	str	r2, [r3, #124]	; 0x7c

  ie_roll_sat = ie_roll;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	

	P = Kp*e_roll; D = de_filt; I = Ki * ie_roll_sat;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d852:	6839      	ldr	r1, [r7, #0]
 800d854:	4618      	mov	r0, r3
 800d856:	f7f3 fa6d 	bl	8000d34 <__aeabi_fmul>
 800d85a:	4603      	mov	r3, r0
 800d85c:	461a      	mov	r2, r3
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d878:	4618      	mov	r0, r3
 800d87a:	f7f3 fa5b 	bl	8000d34 <__aeabi_fmul>
 800d87e:	4603      	mov	r3, r0
 800d880:	461a      	mov	r2, r3
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	//D = lpf.update(D);
	pd = P + I + D;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d894:	4619      	mov	r1, r3
 800d896:	4610      	mov	r0, r2
 800d898:	f7f3 f944 	bl	8000b24 <__addsf3>
 800d89c:	4603      	mov	r3, r0
 800d89e:	461a      	mov	r2, r3
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	4610      	mov	r0, r2
 800d8aa:	f7f3 f93b 	bl	8000b24 <__addsf3>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	461a      	mov	r2, r3
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  	pd_roll_buf = pd;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	625a      	str	r2, [r3, #36]	; 0x24
	pd  = Sat(pd,  300, -300);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800d8c8:	4b0c      	ldr	r3, [pc, #48]	; (800d8fc <_ZN3PID7PD_RateEfffff+0x1d8>)
 800d8ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d8ce:	68f8      	ldr	r0, [r7, #12]
 800d8d0:	f000 f88a 	bl	800d9e8 <_ZN3PID3SatEfii>
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pd_roll_sat_buf = pd;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    return pd;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8

}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	371c      	adds	r7, #28
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd90      	pop	{r4, r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	42c80000 	.word	0x42c80000
 800d8fc:	fffffed4 	.word	0xfffffed4

0800d900 <_ZN3PID5resetEv>:

void PID::reset() {
 800d900:	b480      	push	{r7}
 800d902:	b083      	sub	sp, #12
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
	ie_roll = 0;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f04f 0200 	mov.w	r2, #0
 800d90e:	67da      	str	r2, [r3, #124]	; 0x7c
	ie_roll_rate = 0;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f04f 0200 	mov.w	r2, #0
 800d916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	de_filt = 0;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f04f 0200 	mov.w	r2, #0
 800d920:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	de_int = 0;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f04f 0200 	mov.w	r2, #0
 800d92a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 800d92e:	bf00      	nop
 800d930:	370c      	adds	r7, #12
 800d932:	46bd      	mov	sp, r7
 800d934:	bc80      	pop	{r7}
 800d936:	4770      	bx	lr

0800d938 <_ZN3PID3sgnEf>:

    return P;

}

uint8_t PID::sgn(float v) {
 800d938:	b580      	push	{r7, lr}
 800d93a:	b082      	sub	sp, #8
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
  if (v < 0) return -1;
 800d942:	f04f 0100 	mov.w	r1, #0
 800d946:	6838      	ldr	r0, [r7, #0]
 800d948:	f7f3 fb92 	bl	8001070 <__aeabi_fcmplt>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d001      	beq.n	800d956 <_ZN3PID3sgnEf+0x1e>
 800d952:	23ff      	movs	r3, #255	; 0xff
 800d954:	e00a      	b.n	800d96c <_ZN3PID3sgnEf+0x34>
  if (v > 0) return 1;
 800d956:	f04f 0100 	mov.w	r1, #0
 800d95a:	6838      	ldr	r0, [r7, #0]
 800d95c:	f7f3 fba6 	bl	80010ac <__aeabi_fcmpgt>
 800d960:	4603      	mov	r3, r0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d001      	beq.n	800d96a <_ZN3PID3sgnEf+0x32>
 800d966:	2301      	movs	r3, #1
 800d968:	e000      	b.n	800d96c <_ZN3PID3sgnEf+0x34>
  return 0;
 800d96a:	2300      	movs	r3, #0
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3708      	adds	r7, #8
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <_ZN3PID3SatEfiii>:

 float PID::Sat(float pwm, int max, int min, int thr) {
 800d974:	b580      	push	{r7, lr}
 800d976:	b086      	sub	sp, #24
 800d978:	af00      	add	r7, sp, #0
 800d97a:	60f8      	str	r0, [r7, #12]
 800d97c:	60b9      	str	r1, [r7, #8]
 800d97e:	607a      	str	r2, [r7, #4]
 800d980:	603b      	str	r3, [r7, #0]
	float pwm_out;

	if(thr > 1020) {
 800d982:	6a3b      	ldr	r3, [r7, #32]
 800d984:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800d988:	dd24      	ble.n	800d9d4 <_ZN3PID3SatEfiii+0x60>
		if(pwm > max) {
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f7f3 f97e 	bl	8000c8c <__aeabi_i2f>
 800d990:	4603      	mov	r3, r0
 800d992:	4619      	mov	r1, r3
 800d994:	68b8      	ldr	r0, [r7, #8]
 800d996:	f7f3 fb89 	bl	80010ac <__aeabi_fcmpgt>
 800d99a:	4603      	mov	r3, r0
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d005      	beq.n	800d9ac <_ZN3PID3SatEfiii+0x38>
			pwm_out = max;
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f7f3 f973 	bl	8000c8c <__aeabi_i2f>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	617b      	str	r3, [r7, #20]
 800d9aa:	e015      	b.n	800d9d8 <_ZN3PID3SatEfiii+0x64>
		}

		else if (pwm < min) {
 800d9ac:	6838      	ldr	r0, [r7, #0]
 800d9ae:	f7f3 f96d 	bl	8000c8c <__aeabi_i2f>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	68b8      	ldr	r0, [r7, #8]
 800d9b8:	f7f3 fb5a 	bl	8001070 <__aeabi_fcmplt>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d005      	beq.n	800d9ce <_ZN3PID3SatEfiii+0x5a>
			pwm_out = min;
 800d9c2:	6838      	ldr	r0, [r7, #0]
 800d9c4:	f7f3 f962 	bl	8000c8c <__aeabi_i2f>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	617b      	str	r3, [r7, #20]
 800d9cc:	e004      	b.n	800d9d8 <_ZN3PID3SatEfiii+0x64>
		}

		else {
			pwm_out = pwm;
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	617b      	str	r3, [r7, #20]
 800d9d2:	e001      	b.n	800d9d8 <_ZN3PID3SatEfiii+0x64>


	}

	else {
		pwm_out = 1000;
 800d9d4:	4b03      	ldr	r3, [pc, #12]	; (800d9e4 <_ZN3PID3SatEfiii+0x70>)
 800d9d6:	617b      	str	r3, [r7, #20]
	}
	return pwm_out;
 800d9d8:	697b      	ldr	r3, [r7, #20]
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3718      	adds	r7, #24
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	447a0000 	.word	0x447a0000

0800d9e8 <_ZN3PID3SatEfii>:

 float PID::Sat(float pwm, int max, int min) {
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b086      	sub	sp, #24
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	60b9      	str	r1, [r7, #8]
 800d9f2:	607a      	str	r2, [r7, #4]
 800d9f4:	603b      	str	r3, [r7, #0]
	float pwm_out;

		if(pwm > max) {
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f7f3 f948 	bl	8000c8c <__aeabi_i2f>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	4619      	mov	r1, r3
 800da00:	68b8      	ldr	r0, [r7, #8]
 800da02:	f7f3 fb53 	bl	80010ac <__aeabi_fcmpgt>
 800da06:	4603      	mov	r3, r0
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d005      	beq.n	800da18 <_ZN3PID3SatEfii+0x30>
			pwm_out = max;
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f7f3 f93d 	bl	8000c8c <__aeabi_i2f>
 800da12:	4603      	mov	r3, r0
 800da14:	617b      	str	r3, [r7, #20]
 800da16:	e012      	b.n	800da3e <_ZN3PID3SatEfii+0x56>
		}

		else if (pwm < min) {
 800da18:	6838      	ldr	r0, [r7, #0]
 800da1a:	f7f3 f937 	bl	8000c8c <__aeabi_i2f>
 800da1e:	4603      	mov	r3, r0
 800da20:	4619      	mov	r1, r3
 800da22:	68b8      	ldr	r0, [r7, #8]
 800da24:	f7f3 fb24 	bl	8001070 <__aeabi_fcmplt>
 800da28:	4603      	mov	r3, r0
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d005      	beq.n	800da3a <_ZN3PID3SatEfii+0x52>
			pwm_out = min;
 800da2e:	6838      	ldr	r0, [r7, #0]
 800da30:	f7f3 f92c 	bl	8000c8c <__aeabi_i2f>
 800da34:	4603      	mov	r3, r0
 800da36:	617b      	str	r3, [r7, #20]
 800da38:	e001      	b.n	800da3e <_ZN3PID3SatEfii+0x56>
		}

		else {
			pwm_out = pwm;
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	617b      	str	r3, [r7, #20]
		}




	return pwm_out;
 800da3e:	697b      	ldr	r3, [r7, #20]
}
 800da40:	4618      	mov	r0, r3
 800da42:	3718      	adds	r7, #24
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <_ZN3PID5F2thrEf>:
	float out_max  = 1326;

	return (float)(dir) * ((float)pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int PID::F2thr(float F) {
 800da48:	b580      	push	{r7, lr}
 800da4a:	b088      	sub	sp, #32
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
	float kf = 5.074714371861032e-08;
 800da52:	4b16      	ldr	r3, [pc, #88]	; (800daac <_ZN3PID5F2thrEf+0x64>)
 800da54:	61fb      	str	r3, [r7, #28]
	float max_rpm = 17591;
 800da56:	4b16      	ldr	r3, [pc, #88]	; (800dab0 <_ZN3PID5F2thrEf+0x68>)
 800da58:	61bb      	str	r3, [r7, #24]
	float Fm = F/4;
 800da5a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800da5e:	6838      	ldr	r0, [r7, #0]
 800da60:	f7f3 fa1c 	bl	8000e9c <__aeabi_fdiv>
 800da64:	4603      	mov	r3, r0
 800da66:	617b      	str	r3, [r7, #20]
	float wh = sqrt(Fm/kf);
 800da68:	69f9      	ldr	r1, [r7, #28]
 800da6a:	6978      	ldr	r0, [r7, #20]
 800da6c:	f7f3 fa16 	bl	8000e9c <__aeabi_fdiv>
 800da70:	4603      	mov	r3, r0
 800da72:	4618      	mov	r0, r3
 800da74:	f7f4 f9bc 	bl	8001df0 <_ZSt4sqrtf>
 800da78:	6138      	str	r0, [r7, #16]

	unsigned int thr = (wh - 0) * (2000 - 1000) / (max_rpm - 0) + 1000;
 800da7a:	490e      	ldr	r1, [pc, #56]	; (800dab4 <_ZN3PID5F2thrEf+0x6c>)
 800da7c:	6938      	ldr	r0, [r7, #16]
 800da7e:	f7f3 f959 	bl	8000d34 <__aeabi_fmul>
 800da82:	4603      	mov	r3, r0
 800da84:	69b9      	ldr	r1, [r7, #24]
 800da86:	4618      	mov	r0, r3
 800da88:	f7f3 fa08 	bl	8000e9c <__aeabi_fdiv>
 800da8c:	4603      	mov	r3, r0
 800da8e:	4909      	ldr	r1, [pc, #36]	; (800dab4 <_ZN3PID5F2thrEf+0x6c>)
 800da90:	4618      	mov	r0, r3
 800da92:	f7f3 f847 	bl	8000b24 <__addsf3>
 800da96:	4603      	mov	r3, r0
 800da98:	4618      	mov	r0, r3
 800da9a:	f7f3 fb4d 	bl	8001138 <__aeabi_f2uiz>
 800da9e:	4603      	mov	r3, r0
 800daa0:	60fb      	str	r3, [r7, #12]
	return thr;
 800daa2:	68fb      	ldr	r3, [r7, #12]
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3720      	adds	r7, #32
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}
 800daac:	3359f513 	.word	0x3359f513
 800dab0:	46896e00 	.word	0x46896e00
 800dab4:	447a0000 	.word	0x447a0000

0800dab8 <_ZN3PIDD1Ev>:

PID::~PID() {};
 800dab8:	b580      	push	{r7, lr}
 800daba:	b082      	sub	sp, #8
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	3338      	adds	r3, #56	; 0x38
 800dac4:	4618      	mov	r0, r3
 800dac6:	f000 f876 	bl	800dbb6 <_ZN3lpfD1Ev>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	4618      	mov	r0, r3
 800dace:	3708      	adds	r7, #8
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <_ZN3lpfC1Eddd>:
#include "lpf.hpp"

lpf::lpf(double a, double b, double c)  {
 800dad4:	b480      	push	{r7}
 800dad6:	b085      	sub	sp, #20
 800dad8:	af00      	add	r7, sp, #0
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	e9c7 2300 	strd	r2, r3, [r7]
	a_f = a;
 800dae0:	68f9      	ldr	r1, [r7, #12]
 800dae2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dae6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	b_f = b;
 800daea:	68f9      	ldr	r1, [r7, #12]
 800daec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800daf0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	c_f = c;
 800daf4:	68f9      	ldr	r1, [r7, #12]
 800daf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800dafa:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	4618      	mov	r0, r3
 800db02:	3714      	adds	r7, #20
 800db04:	46bd      	mov	sp, r7
 800db06:	bc80      	pop	{r7}
 800db08:	4770      	bx	lr

0800db0a <_ZN3lpf3RunEf>:


float lpf::Run(float x) {
 800db0a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]


	//float y = 0.8544*y_ + 0.07282 * x + 0.07282 * x_;
	float y = a_f*y_ + b_f * x + c_f * x_;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	4618      	mov	r0, r3
 800db22:	f7f2 fc79 	bl	8000418 <__aeabi_f2d>
 800db26:	4602      	mov	r2, r0
 800db28:	460b      	mov	r3, r1
 800db2a:	4620      	mov	r0, r4
 800db2c:	4629      	mov	r1, r5
 800db2e:	f7f2 fccb 	bl	80004c8 <__aeabi_dmul>
 800db32:	4602      	mov	r2, r0
 800db34:	460b      	mov	r3, r1
 800db36:	4690      	mov	r8, r2
 800db38:	4699      	mov	r9, r3
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800db40:	6838      	ldr	r0, [r7, #0]
 800db42:	f7f2 fc69 	bl	8000418 <__aeabi_f2d>
 800db46:	4602      	mov	r2, r0
 800db48:	460b      	mov	r3, r1
 800db4a:	4620      	mov	r0, r4
 800db4c:	4629      	mov	r1, r5
 800db4e:	f7f2 fcbb 	bl	80004c8 <__aeabi_dmul>
 800db52:	4602      	mov	r2, r0
 800db54:	460b      	mov	r3, r1
 800db56:	4640      	mov	r0, r8
 800db58:	4649      	mov	r1, r9
 800db5a:	f7f2 faff 	bl	800015c <__adddf3>
 800db5e:	4602      	mov	r2, r0
 800db60:	460b      	mov	r3, r1
 800db62:	4690      	mov	r8, r2
 800db64:	4699      	mov	r9, r3
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	4618      	mov	r0, r3
 800db72:	f7f2 fc51 	bl	8000418 <__aeabi_f2d>
 800db76:	4602      	mov	r2, r0
 800db78:	460b      	mov	r3, r1
 800db7a:	4620      	mov	r0, r4
 800db7c:	4629      	mov	r1, r5
 800db7e:	f7f2 fca3 	bl	80004c8 <__aeabi_dmul>
 800db82:	4602      	mov	r2, r0
 800db84:	460b      	mov	r3, r1
 800db86:	4640      	mov	r0, r8
 800db88:	4649      	mov	r1, r9
 800db8a:	f7f2 fae7 	bl	800015c <__adddf3>
 800db8e:	4602      	mov	r2, r0
 800db90:	460b      	mov	r3, r1
 800db92:	4610      	mov	r0, r2
 800db94:	4619      	mov	r1, r3
 800db96:	f7f2 ff6f 	bl	8000a78 <__aeabi_d2f>
 800db9a:	4603      	mov	r3, r0
 800db9c:	60fb      	str	r3, [r7, #12]
	x_ = x;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	683a      	ldr	r2, [r7, #0]
 800dba2:	601a      	str	r2, [r3, #0]
	y_ = y;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	68fa      	ldr	r2, [r7, #12]
 800dba8:	605a      	str	r2, [r3, #4]
	return y;
 800dbaa:	68fb      	ldr	r3, [r7, #12]

}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3710      	adds	r7, #16
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800dbb6 <_ZN3lpfD1Ev>:

lpf::~lpf() {}
 800dbb6:	b480      	push	{r7}
 800dbb8:	b083      	sub	sp, #12
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	370c      	adds	r7, #12
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bc80      	pop	{r7}
 800dbc8:	4770      	bx	lr
	...

0800dbcc <atanf>:
 800dbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbd0:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800dbd4:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800dbd8:	4604      	mov	r4, r0
 800dbda:	4680      	mov	r8, r0
 800dbdc:	db0e      	blt.n	800dbfc <atanf+0x30>
 800dbde:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800dbe2:	dd04      	ble.n	800dbee <atanf+0x22>
 800dbe4:	4601      	mov	r1, r0
 800dbe6:	f7f2 ff9d 	bl	8000b24 <__addsf3>
 800dbea:	4604      	mov	r4, r0
 800dbec:	e003      	b.n	800dbf6 <atanf+0x2a>
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	f300 80ce 	bgt.w	800dd90 <atanf+0x1c4>
 800dbf4:	4c67      	ldr	r4, [pc, #412]	; (800dd94 <atanf+0x1c8>)
 800dbf6:	4620      	mov	r0, r4
 800dbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbfc:	4b66      	ldr	r3, [pc, #408]	; (800dd98 <atanf+0x1cc>)
 800dbfe:	429d      	cmp	r5, r3
 800dc00:	dc0e      	bgt.n	800dc20 <atanf+0x54>
 800dc02:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800dc06:	da08      	bge.n	800dc1a <atanf+0x4e>
 800dc08:	4964      	ldr	r1, [pc, #400]	; (800dd9c <atanf+0x1d0>)
 800dc0a:	f7f2 ff8b 	bl	8000b24 <__addsf3>
 800dc0e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dc12:	f7f3 fa4b 	bl	80010ac <__aeabi_fcmpgt>
 800dc16:	2800      	cmp	r0, #0
 800dc18:	d1ed      	bne.n	800dbf6 <atanf+0x2a>
 800dc1a:	f04f 36ff 	mov.w	r6, #4294967295
 800dc1e:	e01c      	b.n	800dc5a <atanf+0x8e>
 800dc20:	f000 f914 	bl	800de4c <fabsf>
 800dc24:	4b5e      	ldr	r3, [pc, #376]	; (800dda0 <atanf+0x1d4>)
 800dc26:	4604      	mov	r4, r0
 800dc28:	429d      	cmp	r5, r3
 800dc2a:	dc7c      	bgt.n	800dd26 <atanf+0x15a>
 800dc2c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800dc30:	429d      	cmp	r5, r3
 800dc32:	dc67      	bgt.n	800dd04 <atanf+0x138>
 800dc34:	4601      	mov	r1, r0
 800dc36:	f7f2 ff75 	bl	8000b24 <__addsf3>
 800dc3a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dc3e:	f7f2 ff6f 	bl	8000b20 <__aeabi_fsub>
 800dc42:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800dc46:	4605      	mov	r5, r0
 800dc48:	4620      	mov	r0, r4
 800dc4a:	f7f2 ff6b 	bl	8000b24 <__addsf3>
 800dc4e:	4601      	mov	r1, r0
 800dc50:	4628      	mov	r0, r5
 800dc52:	f7f3 f923 	bl	8000e9c <__aeabi_fdiv>
 800dc56:	2600      	movs	r6, #0
 800dc58:	4604      	mov	r4, r0
 800dc5a:	4621      	mov	r1, r4
 800dc5c:	4620      	mov	r0, r4
 800dc5e:	f7f3 f869 	bl	8000d34 <__aeabi_fmul>
 800dc62:	4601      	mov	r1, r0
 800dc64:	4607      	mov	r7, r0
 800dc66:	f7f3 f865 	bl	8000d34 <__aeabi_fmul>
 800dc6a:	4605      	mov	r5, r0
 800dc6c:	494d      	ldr	r1, [pc, #308]	; (800dda4 <atanf+0x1d8>)
 800dc6e:	f7f3 f861 	bl	8000d34 <__aeabi_fmul>
 800dc72:	494d      	ldr	r1, [pc, #308]	; (800dda8 <atanf+0x1dc>)
 800dc74:	f7f2 ff56 	bl	8000b24 <__addsf3>
 800dc78:	4629      	mov	r1, r5
 800dc7a:	f7f3 f85b 	bl	8000d34 <__aeabi_fmul>
 800dc7e:	494b      	ldr	r1, [pc, #300]	; (800ddac <atanf+0x1e0>)
 800dc80:	f7f2 ff50 	bl	8000b24 <__addsf3>
 800dc84:	4629      	mov	r1, r5
 800dc86:	f7f3 f855 	bl	8000d34 <__aeabi_fmul>
 800dc8a:	4949      	ldr	r1, [pc, #292]	; (800ddb0 <atanf+0x1e4>)
 800dc8c:	f7f2 ff4a 	bl	8000b24 <__addsf3>
 800dc90:	4629      	mov	r1, r5
 800dc92:	f7f3 f84f 	bl	8000d34 <__aeabi_fmul>
 800dc96:	4947      	ldr	r1, [pc, #284]	; (800ddb4 <atanf+0x1e8>)
 800dc98:	f7f2 ff44 	bl	8000b24 <__addsf3>
 800dc9c:	4629      	mov	r1, r5
 800dc9e:	f7f3 f849 	bl	8000d34 <__aeabi_fmul>
 800dca2:	4945      	ldr	r1, [pc, #276]	; (800ddb8 <atanf+0x1ec>)
 800dca4:	f7f2 ff3e 	bl	8000b24 <__addsf3>
 800dca8:	4639      	mov	r1, r7
 800dcaa:	f7f3 f843 	bl	8000d34 <__aeabi_fmul>
 800dcae:	4943      	ldr	r1, [pc, #268]	; (800ddbc <atanf+0x1f0>)
 800dcb0:	4607      	mov	r7, r0
 800dcb2:	4628      	mov	r0, r5
 800dcb4:	f7f3 f83e 	bl	8000d34 <__aeabi_fmul>
 800dcb8:	4941      	ldr	r1, [pc, #260]	; (800ddc0 <atanf+0x1f4>)
 800dcba:	f7f2 ff31 	bl	8000b20 <__aeabi_fsub>
 800dcbe:	4629      	mov	r1, r5
 800dcc0:	f7f3 f838 	bl	8000d34 <__aeabi_fmul>
 800dcc4:	493f      	ldr	r1, [pc, #252]	; (800ddc4 <atanf+0x1f8>)
 800dcc6:	f7f2 ff2b 	bl	8000b20 <__aeabi_fsub>
 800dcca:	4629      	mov	r1, r5
 800dccc:	f7f3 f832 	bl	8000d34 <__aeabi_fmul>
 800dcd0:	493d      	ldr	r1, [pc, #244]	; (800ddc8 <atanf+0x1fc>)
 800dcd2:	f7f2 ff25 	bl	8000b20 <__aeabi_fsub>
 800dcd6:	4629      	mov	r1, r5
 800dcd8:	f7f3 f82c 	bl	8000d34 <__aeabi_fmul>
 800dcdc:	493b      	ldr	r1, [pc, #236]	; (800ddcc <atanf+0x200>)
 800dcde:	f7f2 ff1f 	bl	8000b20 <__aeabi_fsub>
 800dce2:	4629      	mov	r1, r5
 800dce4:	f7f3 f826 	bl	8000d34 <__aeabi_fmul>
 800dce8:	4601      	mov	r1, r0
 800dcea:	4638      	mov	r0, r7
 800dcec:	f7f2 ff1a 	bl	8000b24 <__addsf3>
 800dcf0:	4621      	mov	r1, r4
 800dcf2:	f7f3 f81f 	bl	8000d34 <__aeabi_fmul>
 800dcf6:	1c73      	adds	r3, r6, #1
 800dcf8:	4601      	mov	r1, r0
 800dcfa:	d133      	bne.n	800dd64 <atanf+0x198>
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	f7f2 ff0f 	bl	8000b20 <__aeabi_fsub>
 800dd02:	e772      	b.n	800dbea <atanf+0x1e>
 800dd04:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dd08:	f7f2 ff0a 	bl	8000b20 <__aeabi_fsub>
 800dd0c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dd10:	4605      	mov	r5, r0
 800dd12:	4620      	mov	r0, r4
 800dd14:	f7f2 ff06 	bl	8000b24 <__addsf3>
 800dd18:	4601      	mov	r1, r0
 800dd1a:	4628      	mov	r0, r5
 800dd1c:	f7f3 f8be 	bl	8000e9c <__aeabi_fdiv>
 800dd20:	2601      	movs	r6, #1
 800dd22:	4604      	mov	r4, r0
 800dd24:	e799      	b.n	800dc5a <atanf+0x8e>
 800dd26:	4b2a      	ldr	r3, [pc, #168]	; (800ddd0 <atanf+0x204>)
 800dd28:	429d      	cmp	r5, r3
 800dd2a:	dc14      	bgt.n	800dd56 <atanf+0x18a>
 800dd2c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800dd30:	f7f2 fef6 	bl	8000b20 <__aeabi_fsub>
 800dd34:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800dd38:	4605      	mov	r5, r0
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	f7f2 fffa 	bl	8000d34 <__aeabi_fmul>
 800dd40:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dd44:	f7f2 feee 	bl	8000b24 <__addsf3>
 800dd48:	4601      	mov	r1, r0
 800dd4a:	4628      	mov	r0, r5
 800dd4c:	f7f3 f8a6 	bl	8000e9c <__aeabi_fdiv>
 800dd50:	2602      	movs	r6, #2
 800dd52:	4604      	mov	r4, r0
 800dd54:	e781      	b.n	800dc5a <atanf+0x8e>
 800dd56:	4601      	mov	r1, r0
 800dd58:	481e      	ldr	r0, [pc, #120]	; (800ddd4 <atanf+0x208>)
 800dd5a:	f7f3 f89f 	bl	8000e9c <__aeabi_fdiv>
 800dd5e:	2603      	movs	r6, #3
 800dd60:	4604      	mov	r4, r0
 800dd62:	e77a      	b.n	800dc5a <atanf+0x8e>
 800dd64:	4b1c      	ldr	r3, [pc, #112]	; (800ddd8 <atanf+0x20c>)
 800dd66:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800dd6a:	f7f2 fed9 	bl	8000b20 <__aeabi_fsub>
 800dd6e:	4621      	mov	r1, r4
 800dd70:	f7f2 fed6 	bl	8000b20 <__aeabi_fsub>
 800dd74:	4b19      	ldr	r3, [pc, #100]	; (800dddc <atanf+0x210>)
 800dd76:	4601      	mov	r1, r0
 800dd78:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dd7c:	f7f2 fed0 	bl	8000b20 <__aeabi_fsub>
 800dd80:	f1b8 0f00 	cmp.w	r8, #0
 800dd84:	4604      	mov	r4, r0
 800dd86:	f6bf af36 	bge.w	800dbf6 <atanf+0x2a>
 800dd8a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800dd8e:	e72c      	b.n	800dbea <atanf+0x1e>
 800dd90:	4c13      	ldr	r4, [pc, #76]	; (800dde0 <atanf+0x214>)
 800dd92:	e730      	b.n	800dbf6 <atanf+0x2a>
 800dd94:	bfc90fdb 	.word	0xbfc90fdb
 800dd98:	3edfffff 	.word	0x3edfffff
 800dd9c:	7149f2ca 	.word	0x7149f2ca
 800dda0:	3f97ffff 	.word	0x3f97ffff
 800dda4:	3c8569d7 	.word	0x3c8569d7
 800dda8:	3d4bda59 	.word	0x3d4bda59
 800ddac:	3d886b35 	.word	0x3d886b35
 800ddb0:	3dba2e6e 	.word	0x3dba2e6e
 800ddb4:	3e124925 	.word	0x3e124925
 800ddb8:	3eaaaaab 	.word	0x3eaaaaab
 800ddbc:	bd15a221 	.word	0xbd15a221
 800ddc0:	3d6ef16b 	.word	0x3d6ef16b
 800ddc4:	3d9d8795 	.word	0x3d9d8795
 800ddc8:	3de38e38 	.word	0x3de38e38
 800ddcc:	3e4ccccd 	.word	0x3e4ccccd
 800ddd0:	401bffff 	.word	0x401bffff
 800ddd4:	bf800000 	.word	0xbf800000
 800ddd8:	08010d04 	.word	0x08010d04
 800dddc:	08010cf4 	.word	0x08010cf4
 800dde0:	3fc90fdb 	.word	0x3fc90fdb

0800dde4 <cosf>:
 800dde4:	b507      	push	{r0, r1, r2, lr}
 800dde6:	4a18      	ldr	r2, [pc, #96]	; (800de48 <cosf+0x64>)
 800dde8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ddec:	4293      	cmp	r3, r2
 800ddee:	4601      	mov	r1, r0
 800ddf0:	dc03      	bgt.n	800ddfa <cosf+0x16>
 800ddf2:	2100      	movs	r1, #0
 800ddf4:	f001 fac4 	bl	800f380 <__kernel_cosf>
 800ddf8:	e004      	b.n	800de04 <cosf+0x20>
 800ddfa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ddfe:	db04      	blt.n	800de0a <cosf+0x26>
 800de00:	f7f2 fe8e 	bl	8000b20 <__aeabi_fsub>
 800de04:	b003      	add	sp, #12
 800de06:	f85d fb04 	ldr.w	pc, [sp], #4
 800de0a:	4669      	mov	r1, sp
 800de0c:	f001 f908 	bl	800f020 <__ieee754_rem_pio2f>
 800de10:	f000 0203 	and.w	r2, r0, #3
 800de14:	2a01      	cmp	r2, #1
 800de16:	d005      	beq.n	800de24 <cosf+0x40>
 800de18:	2a02      	cmp	r2, #2
 800de1a:	d00a      	beq.n	800de32 <cosf+0x4e>
 800de1c:	b972      	cbnz	r2, 800de3c <cosf+0x58>
 800de1e:	9901      	ldr	r1, [sp, #4]
 800de20:	9800      	ldr	r0, [sp, #0]
 800de22:	e7e7      	b.n	800ddf4 <cosf+0x10>
 800de24:	9901      	ldr	r1, [sp, #4]
 800de26:	9800      	ldr	r0, [sp, #0]
 800de28:	f001 fde0 	bl	800f9ec <__kernel_sinf>
 800de2c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800de30:	e7e8      	b.n	800de04 <cosf+0x20>
 800de32:	9901      	ldr	r1, [sp, #4]
 800de34:	9800      	ldr	r0, [sp, #0]
 800de36:	f001 faa3 	bl	800f380 <__kernel_cosf>
 800de3a:	e7f7      	b.n	800de2c <cosf+0x48>
 800de3c:	2201      	movs	r2, #1
 800de3e:	9901      	ldr	r1, [sp, #4]
 800de40:	9800      	ldr	r0, [sp, #0]
 800de42:	f001 fdd3 	bl	800f9ec <__kernel_sinf>
 800de46:	e7dd      	b.n	800de04 <cosf+0x20>
 800de48:	3f490fd8 	.word	0x3f490fd8

0800de4c <fabsf>:
 800de4c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800de50:	4770      	bx	lr
	...

0800de54 <sinf>:
 800de54:	b507      	push	{r0, r1, r2, lr}
 800de56:	4a19      	ldr	r2, [pc, #100]	; (800debc <sinf+0x68>)
 800de58:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800de5c:	4293      	cmp	r3, r2
 800de5e:	4601      	mov	r1, r0
 800de60:	dc04      	bgt.n	800de6c <sinf+0x18>
 800de62:	2200      	movs	r2, #0
 800de64:	2100      	movs	r1, #0
 800de66:	f001 fdc1 	bl	800f9ec <__kernel_sinf>
 800de6a:	e004      	b.n	800de76 <sinf+0x22>
 800de6c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800de70:	db04      	blt.n	800de7c <sinf+0x28>
 800de72:	f7f2 fe55 	bl	8000b20 <__aeabi_fsub>
 800de76:	b003      	add	sp, #12
 800de78:	f85d fb04 	ldr.w	pc, [sp], #4
 800de7c:	4669      	mov	r1, sp
 800de7e:	f001 f8cf 	bl	800f020 <__ieee754_rem_pio2f>
 800de82:	f000 0003 	and.w	r0, r0, #3
 800de86:	2801      	cmp	r0, #1
 800de88:	d006      	beq.n	800de98 <sinf+0x44>
 800de8a:	2802      	cmp	r0, #2
 800de8c:	d009      	beq.n	800dea2 <sinf+0x4e>
 800de8e:	b980      	cbnz	r0, 800deb2 <sinf+0x5e>
 800de90:	2201      	movs	r2, #1
 800de92:	9901      	ldr	r1, [sp, #4]
 800de94:	9800      	ldr	r0, [sp, #0]
 800de96:	e7e6      	b.n	800de66 <sinf+0x12>
 800de98:	9901      	ldr	r1, [sp, #4]
 800de9a:	9800      	ldr	r0, [sp, #0]
 800de9c:	f001 fa70 	bl	800f380 <__kernel_cosf>
 800dea0:	e7e9      	b.n	800de76 <sinf+0x22>
 800dea2:	2201      	movs	r2, #1
 800dea4:	9901      	ldr	r1, [sp, #4]
 800dea6:	9800      	ldr	r0, [sp, #0]
 800dea8:	f001 fda0 	bl	800f9ec <__kernel_sinf>
 800deac:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800deb0:	e7e1      	b.n	800de76 <sinf+0x22>
 800deb2:	9901      	ldr	r1, [sp, #4]
 800deb4:	9800      	ldr	r0, [sp, #0]
 800deb6:	f001 fa63 	bl	800f380 <__kernel_cosf>
 800deba:	e7f7      	b.n	800deac <sinf+0x58>
 800debc:	3f490fd8 	.word	0x3f490fd8

0800dec0 <pow>:
 800dec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dec4:	461f      	mov	r7, r3
 800dec6:	4680      	mov	r8, r0
 800dec8:	4689      	mov	r9, r1
 800deca:	4616      	mov	r6, r2
 800decc:	f000 f91c 	bl	800e108 <__ieee754_pow>
 800ded0:	4b4d      	ldr	r3, [pc, #308]	; (800e008 <pow+0x148>)
 800ded2:	4604      	mov	r4, r0
 800ded4:	f993 3000 	ldrsb.w	r3, [r3]
 800ded8:	460d      	mov	r5, r1
 800deda:	3301      	adds	r3, #1
 800dedc:	d015      	beq.n	800df0a <pow+0x4a>
 800dede:	4632      	mov	r2, r6
 800dee0:	463b      	mov	r3, r7
 800dee2:	4630      	mov	r0, r6
 800dee4:	4639      	mov	r1, r7
 800dee6:	f7f2 fd89 	bl	80009fc <__aeabi_dcmpun>
 800deea:	b970      	cbnz	r0, 800df0a <pow+0x4a>
 800deec:	4642      	mov	r2, r8
 800deee:	464b      	mov	r3, r9
 800def0:	4640      	mov	r0, r8
 800def2:	4649      	mov	r1, r9
 800def4:	f7f2 fd82 	bl	80009fc <__aeabi_dcmpun>
 800def8:	2200      	movs	r2, #0
 800defa:	2300      	movs	r3, #0
 800defc:	b148      	cbz	r0, 800df12 <pow+0x52>
 800defe:	4630      	mov	r0, r6
 800df00:	4639      	mov	r1, r7
 800df02:	f7f2 fd49 	bl	8000998 <__aeabi_dcmpeq>
 800df06:	2800      	cmp	r0, #0
 800df08:	d17b      	bne.n	800e002 <pow+0x142>
 800df0a:	4620      	mov	r0, r4
 800df0c:	4629      	mov	r1, r5
 800df0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df12:	4640      	mov	r0, r8
 800df14:	4649      	mov	r1, r9
 800df16:	f7f2 fd3f 	bl	8000998 <__aeabi_dcmpeq>
 800df1a:	b1e0      	cbz	r0, 800df56 <pow+0x96>
 800df1c:	2200      	movs	r2, #0
 800df1e:	2300      	movs	r3, #0
 800df20:	4630      	mov	r0, r6
 800df22:	4639      	mov	r1, r7
 800df24:	f7f2 fd38 	bl	8000998 <__aeabi_dcmpeq>
 800df28:	2800      	cmp	r0, #0
 800df2a:	d16a      	bne.n	800e002 <pow+0x142>
 800df2c:	4630      	mov	r0, r6
 800df2e:	4639      	mov	r1, r7
 800df30:	f001 fdd5 	bl	800fade <finite>
 800df34:	2800      	cmp	r0, #0
 800df36:	d0e8      	beq.n	800df0a <pow+0x4a>
 800df38:	2200      	movs	r2, #0
 800df3a:	2300      	movs	r3, #0
 800df3c:	4630      	mov	r0, r6
 800df3e:	4639      	mov	r1, r7
 800df40:	f7f2 fd34 	bl	80009ac <__aeabi_dcmplt>
 800df44:	2800      	cmp	r0, #0
 800df46:	d0e0      	beq.n	800df0a <pow+0x4a>
 800df48:	f001 ff7a 	bl	800fe40 <__errno>
 800df4c:	2321      	movs	r3, #33	; 0x21
 800df4e:	2400      	movs	r4, #0
 800df50:	6003      	str	r3, [r0, #0]
 800df52:	4d2e      	ldr	r5, [pc, #184]	; (800e00c <pow+0x14c>)
 800df54:	e7d9      	b.n	800df0a <pow+0x4a>
 800df56:	4620      	mov	r0, r4
 800df58:	4629      	mov	r1, r5
 800df5a:	f001 fdc0 	bl	800fade <finite>
 800df5e:	bba8      	cbnz	r0, 800dfcc <pow+0x10c>
 800df60:	4640      	mov	r0, r8
 800df62:	4649      	mov	r1, r9
 800df64:	f001 fdbb 	bl	800fade <finite>
 800df68:	b380      	cbz	r0, 800dfcc <pow+0x10c>
 800df6a:	4630      	mov	r0, r6
 800df6c:	4639      	mov	r1, r7
 800df6e:	f001 fdb6 	bl	800fade <finite>
 800df72:	b358      	cbz	r0, 800dfcc <pow+0x10c>
 800df74:	4622      	mov	r2, r4
 800df76:	462b      	mov	r3, r5
 800df78:	4620      	mov	r0, r4
 800df7a:	4629      	mov	r1, r5
 800df7c:	f7f2 fd3e 	bl	80009fc <__aeabi_dcmpun>
 800df80:	b160      	cbz	r0, 800df9c <pow+0xdc>
 800df82:	f001 ff5d 	bl	800fe40 <__errno>
 800df86:	2321      	movs	r3, #33	; 0x21
 800df88:	2200      	movs	r2, #0
 800df8a:	6003      	str	r3, [r0, #0]
 800df8c:	2300      	movs	r3, #0
 800df8e:	4610      	mov	r0, r2
 800df90:	4619      	mov	r1, r3
 800df92:	f7f2 fbc3 	bl	800071c <__aeabi_ddiv>
 800df96:	4604      	mov	r4, r0
 800df98:	460d      	mov	r5, r1
 800df9a:	e7b6      	b.n	800df0a <pow+0x4a>
 800df9c:	f001 ff50 	bl	800fe40 <__errno>
 800dfa0:	2322      	movs	r3, #34	; 0x22
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	6003      	str	r3, [r0, #0]
 800dfa6:	4649      	mov	r1, r9
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	4640      	mov	r0, r8
 800dfac:	f7f2 fcfe 	bl	80009ac <__aeabi_dcmplt>
 800dfb0:	2400      	movs	r4, #0
 800dfb2:	b148      	cbz	r0, 800dfc8 <pow+0x108>
 800dfb4:	4630      	mov	r0, r6
 800dfb6:	4639      	mov	r1, r7
 800dfb8:	f001 fd9e 	bl	800faf8 <rint>
 800dfbc:	4632      	mov	r2, r6
 800dfbe:	463b      	mov	r3, r7
 800dfc0:	f7f2 fcea 	bl	8000998 <__aeabi_dcmpeq>
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	d0c4      	beq.n	800df52 <pow+0x92>
 800dfc8:	4d11      	ldr	r5, [pc, #68]	; (800e010 <pow+0x150>)
 800dfca:	e79e      	b.n	800df0a <pow+0x4a>
 800dfcc:	2200      	movs	r2, #0
 800dfce:	2300      	movs	r3, #0
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	4629      	mov	r1, r5
 800dfd4:	f7f2 fce0 	bl	8000998 <__aeabi_dcmpeq>
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	d096      	beq.n	800df0a <pow+0x4a>
 800dfdc:	4640      	mov	r0, r8
 800dfde:	4649      	mov	r1, r9
 800dfe0:	f001 fd7d 	bl	800fade <finite>
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	d090      	beq.n	800df0a <pow+0x4a>
 800dfe8:	4630      	mov	r0, r6
 800dfea:	4639      	mov	r1, r7
 800dfec:	f001 fd77 	bl	800fade <finite>
 800dff0:	2800      	cmp	r0, #0
 800dff2:	d08a      	beq.n	800df0a <pow+0x4a>
 800dff4:	f001 ff24 	bl	800fe40 <__errno>
 800dff8:	2322      	movs	r3, #34	; 0x22
 800dffa:	2400      	movs	r4, #0
 800dffc:	2500      	movs	r5, #0
 800dffe:	6003      	str	r3, [r0, #0]
 800e000:	e783      	b.n	800df0a <pow+0x4a>
 800e002:	2400      	movs	r4, #0
 800e004:	4d03      	ldr	r5, [pc, #12]	; (800e014 <pow+0x154>)
 800e006:	e780      	b.n	800df0a <pow+0x4a>
 800e008:	20000019 	.word	0x20000019
 800e00c:	fff00000 	.word	0xfff00000
 800e010:	7ff00000 	.word	0x7ff00000
 800e014:	3ff00000 	.word	0x3ff00000

0800e018 <sqrt>:
 800e018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e01a:	4606      	mov	r6, r0
 800e01c:	460f      	mov	r7, r1
 800e01e:	f000 fd89 	bl	800eb34 <__ieee754_sqrt>
 800e022:	4b12      	ldr	r3, [pc, #72]	; (800e06c <sqrt+0x54>)
 800e024:	4604      	mov	r4, r0
 800e026:	f993 3000 	ldrsb.w	r3, [r3]
 800e02a:	460d      	mov	r5, r1
 800e02c:	3301      	adds	r3, #1
 800e02e:	d019      	beq.n	800e064 <sqrt+0x4c>
 800e030:	4632      	mov	r2, r6
 800e032:	463b      	mov	r3, r7
 800e034:	4630      	mov	r0, r6
 800e036:	4639      	mov	r1, r7
 800e038:	f7f2 fce0 	bl	80009fc <__aeabi_dcmpun>
 800e03c:	b990      	cbnz	r0, 800e064 <sqrt+0x4c>
 800e03e:	2200      	movs	r2, #0
 800e040:	2300      	movs	r3, #0
 800e042:	4630      	mov	r0, r6
 800e044:	4639      	mov	r1, r7
 800e046:	f7f2 fcb1 	bl	80009ac <__aeabi_dcmplt>
 800e04a:	b158      	cbz	r0, 800e064 <sqrt+0x4c>
 800e04c:	f001 fef8 	bl	800fe40 <__errno>
 800e050:	2321      	movs	r3, #33	; 0x21
 800e052:	2200      	movs	r2, #0
 800e054:	6003      	str	r3, [r0, #0]
 800e056:	2300      	movs	r3, #0
 800e058:	4610      	mov	r0, r2
 800e05a:	4619      	mov	r1, r3
 800e05c:	f7f2 fb5e 	bl	800071c <__aeabi_ddiv>
 800e060:	4604      	mov	r4, r0
 800e062:	460d      	mov	r5, r1
 800e064:	4620      	mov	r0, r4
 800e066:	4629      	mov	r1, r5
 800e068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e06a:	bf00      	nop
 800e06c:	20000019 	.word	0x20000019

0800e070 <asinf>:
 800e070:	b538      	push	{r3, r4, r5, lr}
 800e072:	4604      	mov	r4, r0
 800e074:	f000 fe0a 	bl	800ec8c <__ieee754_asinf>
 800e078:	4b0e      	ldr	r3, [pc, #56]	; (800e0b4 <asinf+0x44>)
 800e07a:	4605      	mov	r5, r0
 800e07c:	f993 3000 	ldrsb.w	r3, [r3]
 800e080:	3301      	adds	r3, #1
 800e082:	d015      	beq.n	800e0b0 <asinf+0x40>
 800e084:	4621      	mov	r1, r4
 800e086:	4620      	mov	r0, r4
 800e088:	f7f3 f81a 	bl	80010c0 <__aeabi_fcmpun>
 800e08c:	b980      	cbnz	r0, 800e0b0 <asinf+0x40>
 800e08e:	4620      	mov	r0, r4
 800e090:	f7ff fedc 	bl	800de4c <fabsf>
 800e094:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e098:	f7f3 f808 	bl	80010ac <__aeabi_fcmpgt>
 800e09c:	b140      	cbz	r0, 800e0b0 <asinf+0x40>
 800e09e:	f001 fecf 	bl	800fe40 <__errno>
 800e0a2:	2321      	movs	r3, #33	; 0x21
 800e0a4:	6003      	str	r3, [r0, #0]
 800e0a6:	4804      	ldr	r0, [pc, #16]	; (800e0b8 <asinf+0x48>)
 800e0a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0ac:	f001 be78 	b.w	800fda0 <nanf>
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	bd38      	pop	{r3, r4, r5, pc}
 800e0b4:	20000019 	.word	0x20000019
 800e0b8:	080111a5 	.word	0x080111a5

0800e0bc <atan2f>:
 800e0bc:	f000 bf2a 	b.w	800ef14 <__ieee754_atan2f>

0800e0c0 <sqrtf>:
 800e0c0:	b538      	push	{r3, r4, r5, lr}
 800e0c2:	4605      	mov	r5, r0
 800e0c4:	f001 f90a 	bl	800f2dc <__ieee754_sqrtf>
 800e0c8:	4b0d      	ldr	r3, [pc, #52]	; (800e100 <sqrtf+0x40>)
 800e0ca:	4604      	mov	r4, r0
 800e0cc:	f993 3000 	ldrsb.w	r3, [r3]
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	d012      	beq.n	800e0fa <sqrtf+0x3a>
 800e0d4:	4629      	mov	r1, r5
 800e0d6:	4628      	mov	r0, r5
 800e0d8:	f7f2 fff2 	bl	80010c0 <__aeabi_fcmpun>
 800e0dc:	b968      	cbnz	r0, 800e0fa <sqrtf+0x3a>
 800e0de:	2100      	movs	r1, #0
 800e0e0:	4628      	mov	r0, r5
 800e0e2:	f7f2 ffc5 	bl	8001070 <__aeabi_fcmplt>
 800e0e6:	b140      	cbz	r0, 800e0fa <sqrtf+0x3a>
 800e0e8:	f001 feaa 	bl	800fe40 <__errno>
 800e0ec:	2321      	movs	r3, #33	; 0x21
 800e0ee:	2100      	movs	r1, #0
 800e0f0:	6003      	str	r3, [r0, #0]
 800e0f2:	4608      	mov	r0, r1
 800e0f4:	f7f2 fed2 	bl	8000e9c <__aeabi_fdiv>
 800e0f8:	4604      	mov	r4, r0
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	bd38      	pop	{r3, r4, r5, pc}
 800e0fe:	bf00      	nop
 800e100:	20000019 	.word	0x20000019
 800e104:	00000000 	.word	0x00000000

0800e108 <__ieee754_pow>:
 800e108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e10c:	b093      	sub	sp, #76	; 0x4c
 800e10e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e112:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800e116:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800e11a:	ea55 0302 	orrs.w	r3, r5, r2
 800e11e:	4607      	mov	r7, r0
 800e120:	4688      	mov	r8, r1
 800e122:	f000 84bf 	beq.w	800eaa4 <__ieee754_pow+0x99c>
 800e126:	4b7e      	ldr	r3, [pc, #504]	; (800e320 <__ieee754_pow+0x218>)
 800e128:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800e12c:	429c      	cmp	r4, r3
 800e12e:	4689      	mov	r9, r1
 800e130:	4682      	mov	sl, r0
 800e132:	dc09      	bgt.n	800e148 <__ieee754_pow+0x40>
 800e134:	d103      	bne.n	800e13e <__ieee754_pow+0x36>
 800e136:	b978      	cbnz	r0, 800e158 <__ieee754_pow+0x50>
 800e138:	42a5      	cmp	r5, r4
 800e13a:	dd02      	ble.n	800e142 <__ieee754_pow+0x3a>
 800e13c:	e00c      	b.n	800e158 <__ieee754_pow+0x50>
 800e13e:	429d      	cmp	r5, r3
 800e140:	dc02      	bgt.n	800e148 <__ieee754_pow+0x40>
 800e142:	429d      	cmp	r5, r3
 800e144:	d10e      	bne.n	800e164 <__ieee754_pow+0x5c>
 800e146:	b16a      	cbz	r2, 800e164 <__ieee754_pow+0x5c>
 800e148:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e14c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e150:	ea54 030a 	orrs.w	r3, r4, sl
 800e154:	f000 84a6 	beq.w	800eaa4 <__ieee754_pow+0x99c>
 800e158:	4872      	ldr	r0, [pc, #456]	; (800e324 <__ieee754_pow+0x21c>)
 800e15a:	b013      	add	sp, #76	; 0x4c
 800e15c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e160:	f001 bcc4 	b.w	800faec <nan>
 800e164:	f1b9 0f00 	cmp.w	r9, #0
 800e168:	da39      	bge.n	800e1de <__ieee754_pow+0xd6>
 800e16a:	4b6f      	ldr	r3, [pc, #444]	; (800e328 <__ieee754_pow+0x220>)
 800e16c:	429d      	cmp	r5, r3
 800e16e:	dc54      	bgt.n	800e21a <__ieee754_pow+0x112>
 800e170:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e174:	429d      	cmp	r5, r3
 800e176:	f340 84a6 	ble.w	800eac6 <__ieee754_pow+0x9be>
 800e17a:	152b      	asrs	r3, r5, #20
 800e17c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e180:	2b14      	cmp	r3, #20
 800e182:	dd0f      	ble.n	800e1a4 <__ieee754_pow+0x9c>
 800e184:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e188:	fa22 f103 	lsr.w	r1, r2, r3
 800e18c:	fa01 f303 	lsl.w	r3, r1, r3
 800e190:	4293      	cmp	r3, r2
 800e192:	f040 8498 	bne.w	800eac6 <__ieee754_pow+0x9be>
 800e196:	f001 0101 	and.w	r1, r1, #1
 800e19a:	f1c1 0302 	rsb	r3, r1, #2
 800e19e:	9300      	str	r3, [sp, #0]
 800e1a0:	b182      	cbz	r2, 800e1c4 <__ieee754_pow+0xbc>
 800e1a2:	e05e      	b.n	800e262 <__ieee754_pow+0x15a>
 800e1a4:	2a00      	cmp	r2, #0
 800e1a6:	d15a      	bne.n	800e25e <__ieee754_pow+0x156>
 800e1a8:	f1c3 0314 	rsb	r3, r3, #20
 800e1ac:	fa45 f103 	asr.w	r1, r5, r3
 800e1b0:	fa01 f303 	lsl.w	r3, r1, r3
 800e1b4:	42ab      	cmp	r3, r5
 800e1b6:	f040 8483 	bne.w	800eac0 <__ieee754_pow+0x9b8>
 800e1ba:	f001 0101 	and.w	r1, r1, #1
 800e1be:	f1c1 0302 	rsb	r3, r1, #2
 800e1c2:	9300      	str	r3, [sp, #0]
 800e1c4:	4b59      	ldr	r3, [pc, #356]	; (800e32c <__ieee754_pow+0x224>)
 800e1c6:	429d      	cmp	r5, r3
 800e1c8:	d130      	bne.n	800e22c <__ieee754_pow+0x124>
 800e1ca:	2e00      	cmp	r6, #0
 800e1cc:	f280 8474 	bge.w	800eab8 <__ieee754_pow+0x9b0>
 800e1d0:	463a      	mov	r2, r7
 800e1d2:	4643      	mov	r3, r8
 800e1d4:	2000      	movs	r0, #0
 800e1d6:	4955      	ldr	r1, [pc, #340]	; (800e32c <__ieee754_pow+0x224>)
 800e1d8:	f7f2 faa0 	bl	800071c <__aeabi_ddiv>
 800e1dc:	e02f      	b.n	800e23e <__ieee754_pow+0x136>
 800e1de:	2300      	movs	r3, #0
 800e1e0:	9300      	str	r3, [sp, #0]
 800e1e2:	2a00      	cmp	r2, #0
 800e1e4:	d13d      	bne.n	800e262 <__ieee754_pow+0x15a>
 800e1e6:	4b4e      	ldr	r3, [pc, #312]	; (800e320 <__ieee754_pow+0x218>)
 800e1e8:	429d      	cmp	r5, r3
 800e1ea:	d1eb      	bne.n	800e1c4 <__ieee754_pow+0xbc>
 800e1ec:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e1f0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e1f4:	ea53 030a 	orrs.w	r3, r3, sl
 800e1f8:	f000 8454 	beq.w	800eaa4 <__ieee754_pow+0x99c>
 800e1fc:	4b4c      	ldr	r3, [pc, #304]	; (800e330 <__ieee754_pow+0x228>)
 800e1fe:	429c      	cmp	r4, r3
 800e200:	dd0d      	ble.n	800e21e <__ieee754_pow+0x116>
 800e202:	2e00      	cmp	r6, #0
 800e204:	f280 8454 	bge.w	800eab0 <__ieee754_pow+0x9a8>
 800e208:	f04f 0b00 	mov.w	fp, #0
 800e20c:	f04f 0c00 	mov.w	ip, #0
 800e210:	4658      	mov	r0, fp
 800e212:	4661      	mov	r1, ip
 800e214:	b013      	add	sp, #76	; 0x4c
 800e216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e21a:	2302      	movs	r3, #2
 800e21c:	e7e0      	b.n	800e1e0 <__ieee754_pow+0xd8>
 800e21e:	2e00      	cmp	r6, #0
 800e220:	daf2      	bge.n	800e208 <__ieee754_pow+0x100>
 800e222:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800e226:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800e22a:	e7f1      	b.n	800e210 <__ieee754_pow+0x108>
 800e22c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800e230:	d108      	bne.n	800e244 <__ieee754_pow+0x13c>
 800e232:	463a      	mov	r2, r7
 800e234:	4643      	mov	r3, r8
 800e236:	4638      	mov	r0, r7
 800e238:	4641      	mov	r1, r8
 800e23a:	f7f2 f945 	bl	80004c8 <__aeabi_dmul>
 800e23e:	4683      	mov	fp, r0
 800e240:	468c      	mov	ip, r1
 800e242:	e7e5      	b.n	800e210 <__ieee754_pow+0x108>
 800e244:	4b3b      	ldr	r3, [pc, #236]	; (800e334 <__ieee754_pow+0x22c>)
 800e246:	429e      	cmp	r6, r3
 800e248:	d10b      	bne.n	800e262 <__ieee754_pow+0x15a>
 800e24a:	f1b9 0f00 	cmp.w	r9, #0
 800e24e:	db08      	blt.n	800e262 <__ieee754_pow+0x15a>
 800e250:	4638      	mov	r0, r7
 800e252:	4641      	mov	r1, r8
 800e254:	b013      	add	sp, #76	; 0x4c
 800e256:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e25a:	f000 bc6b 	b.w	800eb34 <__ieee754_sqrt>
 800e25e:	2300      	movs	r3, #0
 800e260:	9300      	str	r3, [sp, #0]
 800e262:	4638      	mov	r0, r7
 800e264:	4641      	mov	r1, r8
 800e266:	f001 fc37 	bl	800fad8 <fabs>
 800e26a:	4683      	mov	fp, r0
 800e26c:	468c      	mov	ip, r1
 800e26e:	f1ba 0f00 	cmp.w	sl, #0
 800e272:	d129      	bne.n	800e2c8 <__ieee754_pow+0x1c0>
 800e274:	b124      	cbz	r4, 800e280 <__ieee754_pow+0x178>
 800e276:	4b2d      	ldr	r3, [pc, #180]	; (800e32c <__ieee754_pow+0x224>)
 800e278:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d123      	bne.n	800e2c8 <__ieee754_pow+0x1c0>
 800e280:	2e00      	cmp	r6, #0
 800e282:	da07      	bge.n	800e294 <__ieee754_pow+0x18c>
 800e284:	465a      	mov	r2, fp
 800e286:	4663      	mov	r3, ip
 800e288:	2000      	movs	r0, #0
 800e28a:	4928      	ldr	r1, [pc, #160]	; (800e32c <__ieee754_pow+0x224>)
 800e28c:	f7f2 fa46 	bl	800071c <__aeabi_ddiv>
 800e290:	4683      	mov	fp, r0
 800e292:	468c      	mov	ip, r1
 800e294:	f1b9 0f00 	cmp.w	r9, #0
 800e298:	daba      	bge.n	800e210 <__ieee754_pow+0x108>
 800e29a:	9b00      	ldr	r3, [sp, #0]
 800e29c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e2a0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e2a4:	4323      	orrs	r3, r4
 800e2a6:	d108      	bne.n	800e2ba <__ieee754_pow+0x1b2>
 800e2a8:	465a      	mov	r2, fp
 800e2aa:	4663      	mov	r3, ip
 800e2ac:	4658      	mov	r0, fp
 800e2ae:	4661      	mov	r1, ip
 800e2b0:	f7f1 ff52 	bl	8000158 <__aeabi_dsub>
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	e78e      	b.n	800e1d8 <__ieee754_pow+0xd0>
 800e2ba:	9b00      	ldr	r3, [sp, #0]
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d1a7      	bne.n	800e210 <__ieee754_pow+0x108>
 800e2c0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800e2c4:	469c      	mov	ip, r3
 800e2c6:	e7a3      	b.n	800e210 <__ieee754_pow+0x108>
 800e2c8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800e2cc:	3b01      	subs	r3, #1
 800e2ce:	930c      	str	r3, [sp, #48]	; 0x30
 800e2d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2d2:	9b00      	ldr	r3, [sp, #0]
 800e2d4:	4313      	orrs	r3, r2
 800e2d6:	d104      	bne.n	800e2e2 <__ieee754_pow+0x1da>
 800e2d8:	463a      	mov	r2, r7
 800e2da:	4643      	mov	r3, r8
 800e2dc:	4638      	mov	r0, r7
 800e2de:	4641      	mov	r1, r8
 800e2e0:	e7e6      	b.n	800e2b0 <__ieee754_pow+0x1a8>
 800e2e2:	4b15      	ldr	r3, [pc, #84]	; (800e338 <__ieee754_pow+0x230>)
 800e2e4:	429d      	cmp	r5, r3
 800e2e6:	f340 80f9 	ble.w	800e4dc <__ieee754_pow+0x3d4>
 800e2ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e2ee:	429d      	cmp	r5, r3
 800e2f0:	4b0f      	ldr	r3, [pc, #60]	; (800e330 <__ieee754_pow+0x228>)
 800e2f2:	dd09      	ble.n	800e308 <__ieee754_pow+0x200>
 800e2f4:	429c      	cmp	r4, r3
 800e2f6:	dc0c      	bgt.n	800e312 <__ieee754_pow+0x20a>
 800e2f8:	2e00      	cmp	r6, #0
 800e2fa:	da85      	bge.n	800e208 <__ieee754_pow+0x100>
 800e2fc:	a306      	add	r3, pc, #24	; (adr r3, 800e318 <__ieee754_pow+0x210>)
 800e2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e302:	4610      	mov	r0, r2
 800e304:	4619      	mov	r1, r3
 800e306:	e798      	b.n	800e23a <__ieee754_pow+0x132>
 800e308:	429c      	cmp	r4, r3
 800e30a:	dbf5      	blt.n	800e2f8 <__ieee754_pow+0x1f0>
 800e30c:	4b07      	ldr	r3, [pc, #28]	; (800e32c <__ieee754_pow+0x224>)
 800e30e:	429c      	cmp	r4, r3
 800e310:	dd14      	ble.n	800e33c <__ieee754_pow+0x234>
 800e312:	2e00      	cmp	r6, #0
 800e314:	dcf2      	bgt.n	800e2fc <__ieee754_pow+0x1f4>
 800e316:	e777      	b.n	800e208 <__ieee754_pow+0x100>
 800e318:	8800759c 	.word	0x8800759c
 800e31c:	7e37e43c 	.word	0x7e37e43c
 800e320:	7ff00000 	.word	0x7ff00000
 800e324:	080111a5 	.word	0x080111a5
 800e328:	433fffff 	.word	0x433fffff
 800e32c:	3ff00000 	.word	0x3ff00000
 800e330:	3fefffff 	.word	0x3fefffff
 800e334:	3fe00000 	.word	0x3fe00000
 800e338:	41e00000 	.word	0x41e00000
 800e33c:	4661      	mov	r1, ip
 800e33e:	2200      	movs	r2, #0
 800e340:	4658      	mov	r0, fp
 800e342:	4b61      	ldr	r3, [pc, #388]	; (800e4c8 <__ieee754_pow+0x3c0>)
 800e344:	f7f1 ff08 	bl	8000158 <__aeabi_dsub>
 800e348:	a355      	add	r3, pc, #340	; (adr r3, 800e4a0 <__ieee754_pow+0x398>)
 800e34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e34e:	4604      	mov	r4, r0
 800e350:	460d      	mov	r5, r1
 800e352:	f7f2 f8b9 	bl	80004c8 <__aeabi_dmul>
 800e356:	a354      	add	r3, pc, #336	; (adr r3, 800e4a8 <__ieee754_pow+0x3a0>)
 800e358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35c:	4606      	mov	r6, r0
 800e35e:	460f      	mov	r7, r1
 800e360:	4620      	mov	r0, r4
 800e362:	4629      	mov	r1, r5
 800e364:	f7f2 f8b0 	bl	80004c8 <__aeabi_dmul>
 800e368:	2200      	movs	r2, #0
 800e36a:	4682      	mov	sl, r0
 800e36c:	468b      	mov	fp, r1
 800e36e:	4620      	mov	r0, r4
 800e370:	4629      	mov	r1, r5
 800e372:	4b56      	ldr	r3, [pc, #344]	; (800e4cc <__ieee754_pow+0x3c4>)
 800e374:	f7f2 f8a8 	bl	80004c8 <__aeabi_dmul>
 800e378:	4602      	mov	r2, r0
 800e37a:	460b      	mov	r3, r1
 800e37c:	a14c      	add	r1, pc, #304	; (adr r1, 800e4b0 <__ieee754_pow+0x3a8>)
 800e37e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e382:	f7f1 fee9 	bl	8000158 <__aeabi_dsub>
 800e386:	4622      	mov	r2, r4
 800e388:	462b      	mov	r3, r5
 800e38a:	f7f2 f89d 	bl	80004c8 <__aeabi_dmul>
 800e38e:	4602      	mov	r2, r0
 800e390:	460b      	mov	r3, r1
 800e392:	2000      	movs	r0, #0
 800e394:	494e      	ldr	r1, [pc, #312]	; (800e4d0 <__ieee754_pow+0x3c8>)
 800e396:	f7f1 fedf 	bl	8000158 <__aeabi_dsub>
 800e39a:	4622      	mov	r2, r4
 800e39c:	462b      	mov	r3, r5
 800e39e:	4680      	mov	r8, r0
 800e3a0:	4689      	mov	r9, r1
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	4629      	mov	r1, r5
 800e3a6:	f7f2 f88f 	bl	80004c8 <__aeabi_dmul>
 800e3aa:	4602      	mov	r2, r0
 800e3ac:	460b      	mov	r3, r1
 800e3ae:	4640      	mov	r0, r8
 800e3b0:	4649      	mov	r1, r9
 800e3b2:	f7f2 f889 	bl	80004c8 <__aeabi_dmul>
 800e3b6:	a340      	add	r3, pc, #256	; (adr r3, 800e4b8 <__ieee754_pow+0x3b0>)
 800e3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3bc:	f7f2 f884 	bl	80004c8 <__aeabi_dmul>
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	460b      	mov	r3, r1
 800e3c4:	4650      	mov	r0, sl
 800e3c6:	4659      	mov	r1, fp
 800e3c8:	f7f1 fec6 	bl	8000158 <__aeabi_dsub>
 800e3cc:	f04f 0a00 	mov.w	sl, #0
 800e3d0:	4602      	mov	r2, r0
 800e3d2:	460b      	mov	r3, r1
 800e3d4:	4604      	mov	r4, r0
 800e3d6:	460d      	mov	r5, r1
 800e3d8:	4630      	mov	r0, r6
 800e3da:	4639      	mov	r1, r7
 800e3dc:	f7f1 febe 	bl	800015c <__adddf3>
 800e3e0:	4632      	mov	r2, r6
 800e3e2:	463b      	mov	r3, r7
 800e3e4:	4650      	mov	r0, sl
 800e3e6:	468b      	mov	fp, r1
 800e3e8:	f7f1 feb6 	bl	8000158 <__aeabi_dsub>
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	4629      	mov	r1, r5
 800e3f4:	f7f1 feb0 	bl	8000158 <__aeabi_dsub>
 800e3f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e3fc:	9b00      	ldr	r3, [sp, #0]
 800e3fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e400:	3b01      	subs	r3, #1
 800e402:	4313      	orrs	r3, r2
 800e404:	f04f 0600 	mov.w	r6, #0
 800e408:	f04f 0200 	mov.w	r2, #0
 800e40c:	bf0c      	ite	eq
 800e40e:	4b31      	ldreq	r3, [pc, #196]	; (800e4d4 <__ieee754_pow+0x3cc>)
 800e410:	4b2d      	ldrne	r3, [pc, #180]	; (800e4c8 <__ieee754_pow+0x3c0>)
 800e412:	4604      	mov	r4, r0
 800e414:	460d      	mov	r5, r1
 800e416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e41a:	e9cd 2300 	strd	r2, r3, [sp]
 800e41e:	4632      	mov	r2, r6
 800e420:	463b      	mov	r3, r7
 800e422:	f7f1 fe99 	bl	8000158 <__aeabi_dsub>
 800e426:	4652      	mov	r2, sl
 800e428:	465b      	mov	r3, fp
 800e42a:	f7f2 f84d 	bl	80004c8 <__aeabi_dmul>
 800e42e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e432:	4680      	mov	r8, r0
 800e434:	4689      	mov	r9, r1
 800e436:	4620      	mov	r0, r4
 800e438:	4629      	mov	r1, r5
 800e43a:	f7f2 f845 	bl	80004c8 <__aeabi_dmul>
 800e43e:	4602      	mov	r2, r0
 800e440:	460b      	mov	r3, r1
 800e442:	4640      	mov	r0, r8
 800e444:	4649      	mov	r1, r9
 800e446:	f7f1 fe89 	bl	800015c <__adddf3>
 800e44a:	4632      	mov	r2, r6
 800e44c:	463b      	mov	r3, r7
 800e44e:	4680      	mov	r8, r0
 800e450:	4689      	mov	r9, r1
 800e452:	4650      	mov	r0, sl
 800e454:	4659      	mov	r1, fp
 800e456:	f7f2 f837 	bl	80004c8 <__aeabi_dmul>
 800e45a:	4604      	mov	r4, r0
 800e45c:	460d      	mov	r5, r1
 800e45e:	460b      	mov	r3, r1
 800e460:	4602      	mov	r2, r0
 800e462:	4649      	mov	r1, r9
 800e464:	4640      	mov	r0, r8
 800e466:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800e46a:	f7f1 fe77 	bl	800015c <__adddf3>
 800e46e:	4b1a      	ldr	r3, [pc, #104]	; (800e4d8 <__ieee754_pow+0x3d0>)
 800e470:	4682      	mov	sl, r0
 800e472:	4299      	cmp	r1, r3
 800e474:	460f      	mov	r7, r1
 800e476:	460e      	mov	r6, r1
 800e478:	f340 82ed 	ble.w	800ea56 <__ieee754_pow+0x94e>
 800e47c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e480:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e484:	4303      	orrs	r3, r0
 800e486:	f000 81e7 	beq.w	800e858 <__ieee754_pow+0x750>
 800e48a:	a30d      	add	r3, pc, #52	; (adr r3, 800e4c0 <__ieee754_pow+0x3b8>)
 800e48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e490:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e494:	f7f2 f818 	bl	80004c8 <__aeabi_dmul>
 800e498:	a309      	add	r3, pc, #36	; (adr r3, 800e4c0 <__ieee754_pow+0x3b8>)
 800e49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49e:	e6cc      	b.n	800e23a <__ieee754_pow+0x132>
 800e4a0:	60000000 	.word	0x60000000
 800e4a4:	3ff71547 	.word	0x3ff71547
 800e4a8:	f85ddf44 	.word	0xf85ddf44
 800e4ac:	3e54ae0b 	.word	0x3e54ae0b
 800e4b0:	55555555 	.word	0x55555555
 800e4b4:	3fd55555 	.word	0x3fd55555
 800e4b8:	652b82fe 	.word	0x652b82fe
 800e4bc:	3ff71547 	.word	0x3ff71547
 800e4c0:	8800759c 	.word	0x8800759c
 800e4c4:	7e37e43c 	.word	0x7e37e43c
 800e4c8:	3ff00000 	.word	0x3ff00000
 800e4cc:	3fd00000 	.word	0x3fd00000
 800e4d0:	3fe00000 	.word	0x3fe00000
 800e4d4:	bff00000 	.word	0xbff00000
 800e4d8:	408fffff 	.word	0x408fffff
 800e4dc:	4bd4      	ldr	r3, [pc, #848]	; (800e830 <__ieee754_pow+0x728>)
 800e4de:	2200      	movs	r2, #0
 800e4e0:	ea09 0303 	and.w	r3, r9, r3
 800e4e4:	b943      	cbnz	r3, 800e4f8 <__ieee754_pow+0x3f0>
 800e4e6:	4658      	mov	r0, fp
 800e4e8:	4661      	mov	r1, ip
 800e4ea:	4bd2      	ldr	r3, [pc, #840]	; (800e834 <__ieee754_pow+0x72c>)
 800e4ec:	f7f1 ffec 	bl	80004c8 <__aeabi_dmul>
 800e4f0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e4f4:	4683      	mov	fp, r0
 800e4f6:	460c      	mov	r4, r1
 800e4f8:	1523      	asrs	r3, r4, #20
 800e4fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e4fe:	4413      	add	r3, r2
 800e500:	930b      	str	r3, [sp, #44]	; 0x2c
 800e502:	4bcd      	ldr	r3, [pc, #820]	; (800e838 <__ieee754_pow+0x730>)
 800e504:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e508:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e50c:	429c      	cmp	r4, r3
 800e50e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e512:	dd08      	ble.n	800e526 <__ieee754_pow+0x41e>
 800e514:	4bc9      	ldr	r3, [pc, #804]	; (800e83c <__ieee754_pow+0x734>)
 800e516:	429c      	cmp	r4, r3
 800e518:	f340 819c 	ble.w	800e854 <__ieee754_pow+0x74c>
 800e51c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e51e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e522:	3301      	adds	r3, #1
 800e524:	930b      	str	r3, [sp, #44]	; 0x2c
 800e526:	2600      	movs	r6, #0
 800e528:	00f3      	lsls	r3, r6, #3
 800e52a:	930d      	str	r3, [sp, #52]	; 0x34
 800e52c:	4bc4      	ldr	r3, [pc, #784]	; (800e840 <__ieee754_pow+0x738>)
 800e52e:	4658      	mov	r0, fp
 800e530:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e534:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e538:	4629      	mov	r1, r5
 800e53a:	461a      	mov	r2, r3
 800e53c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800e540:	4623      	mov	r3, r4
 800e542:	f7f1 fe09 	bl	8000158 <__aeabi_dsub>
 800e546:	46da      	mov	sl, fp
 800e548:	462b      	mov	r3, r5
 800e54a:	4652      	mov	r2, sl
 800e54c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e550:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e554:	f7f1 fe02 	bl	800015c <__adddf3>
 800e558:	4602      	mov	r2, r0
 800e55a:	460b      	mov	r3, r1
 800e55c:	2000      	movs	r0, #0
 800e55e:	49b9      	ldr	r1, [pc, #740]	; (800e844 <__ieee754_pow+0x73c>)
 800e560:	f7f2 f8dc 	bl	800071c <__aeabi_ddiv>
 800e564:	4602      	mov	r2, r0
 800e566:	460b      	mov	r3, r1
 800e568:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e56c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e570:	f7f1 ffaa 	bl	80004c8 <__aeabi_dmul>
 800e574:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e578:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e57c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e580:	2300      	movs	r3, #0
 800e582:	2200      	movs	r2, #0
 800e584:	46ab      	mov	fp, r5
 800e586:	106d      	asrs	r5, r5, #1
 800e588:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e58c:	9304      	str	r3, [sp, #16]
 800e58e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e592:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e596:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800e59a:	4640      	mov	r0, r8
 800e59c:	4649      	mov	r1, r9
 800e59e:	4614      	mov	r4, r2
 800e5a0:	461d      	mov	r5, r3
 800e5a2:	f7f1 ff91 	bl	80004c8 <__aeabi_dmul>
 800e5a6:	4602      	mov	r2, r0
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e5ae:	f7f1 fdd3 	bl	8000158 <__aeabi_dsub>
 800e5b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e5b6:	4606      	mov	r6, r0
 800e5b8:	460f      	mov	r7, r1
 800e5ba:	4620      	mov	r0, r4
 800e5bc:	4629      	mov	r1, r5
 800e5be:	f7f1 fdcb 	bl	8000158 <__aeabi_dsub>
 800e5c2:	4602      	mov	r2, r0
 800e5c4:	460b      	mov	r3, r1
 800e5c6:	4650      	mov	r0, sl
 800e5c8:	4659      	mov	r1, fp
 800e5ca:	f7f1 fdc5 	bl	8000158 <__aeabi_dsub>
 800e5ce:	4642      	mov	r2, r8
 800e5d0:	464b      	mov	r3, r9
 800e5d2:	f7f1 ff79 	bl	80004c8 <__aeabi_dmul>
 800e5d6:	4602      	mov	r2, r0
 800e5d8:	460b      	mov	r3, r1
 800e5da:	4630      	mov	r0, r6
 800e5dc:	4639      	mov	r1, r7
 800e5de:	f7f1 fdbb 	bl	8000158 <__aeabi_dsub>
 800e5e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e5e6:	f7f1 ff6f 	bl	80004c8 <__aeabi_dmul>
 800e5ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e5ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e5f2:	4610      	mov	r0, r2
 800e5f4:	4619      	mov	r1, r3
 800e5f6:	f7f1 ff67 	bl	80004c8 <__aeabi_dmul>
 800e5fa:	a37b      	add	r3, pc, #492	; (adr r3, 800e7e8 <__ieee754_pow+0x6e0>)
 800e5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e600:	4604      	mov	r4, r0
 800e602:	460d      	mov	r5, r1
 800e604:	f7f1 ff60 	bl	80004c8 <__aeabi_dmul>
 800e608:	a379      	add	r3, pc, #484	; (adr r3, 800e7f0 <__ieee754_pow+0x6e8>)
 800e60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e60e:	f7f1 fda5 	bl	800015c <__adddf3>
 800e612:	4622      	mov	r2, r4
 800e614:	462b      	mov	r3, r5
 800e616:	f7f1 ff57 	bl	80004c8 <__aeabi_dmul>
 800e61a:	a377      	add	r3, pc, #476	; (adr r3, 800e7f8 <__ieee754_pow+0x6f0>)
 800e61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e620:	f7f1 fd9c 	bl	800015c <__adddf3>
 800e624:	4622      	mov	r2, r4
 800e626:	462b      	mov	r3, r5
 800e628:	f7f1 ff4e 	bl	80004c8 <__aeabi_dmul>
 800e62c:	a374      	add	r3, pc, #464	; (adr r3, 800e800 <__ieee754_pow+0x6f8>)
 800e62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e632:	f7f1 fd93 	bl	800015c <__adddf3>
 800e636:	4622      	mov	r2, r4
 800e638:	462b      	mov	r3, r5
 800e63a:	f7f1 ff45 	bl	80004c8 <__aeabi_dmul>
 800e63e:	a372      	add	r3, pc, #456	; (adr r3, 800e808 <__ieee754_pow+0x700>)
 800e640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e644:	f7f1 fd8a 	bl	800015c <__adddf3>
 800e648:	4622      	mov	r2, r4
 800e64a:	462b      	mov	r3, r5
 800e64c:	f7f1 ff3c 	bl	80004c8 <__aeabi_dmul>
 800e650:	a36f      	add	r3, pc, #444	; (adr r3, 800e810 <__ieee754_pow+0x708>)
 800e652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e656:	f7f1 fd81 	bl	800015c <__adddf3>
 800e65a:	4622      	mov	r2, r4
 800e65c:	4606      	mov	r6, r0
 800e65e:	460f      	mov	r7, r1
 800e660:	462b      	mov	r3, r5
 800e662:	4620      	mov	r0, r4
 800e664:	4629      	mov	r1, r5
 800e666:	f7f1 ff2f 	bl	80004c8 <__aeabi_dmul>
 800e66a:	4602      	mov	r2, r0
 800e66c:	460b      	mov	r3, r1
 800e66e:	4630      	mov	r0, r6
 800e670:	4639      	mov	r1, r7
 800e672:	f7f1 ff29 	bl	80004c8 <__aeabi_dmul>
 800e676:	4604      	mov	r4, r0
 800e678:	460d      	mov	r5, r1
 800e67a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e67e:	4642      	mov	r2, r8
 800e680:	464b      	mov	r3, r9
 800e682:	f7f1 fd6b 	bl	800015c <__adddf3>
 800e686:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e68a:	f7f1 ff1d 	bl	80004c8 <__aeabi_dmul>
 800e68e:	4622      	mov	r2, r4
 800e690:	462b      	mov	r3, r5
 800e692:	f7f1 fd63 	bl	800015c <__adddf3>
 800e696:	4642      	mov	r2, r8
 800e698:	4606      	mov	r6, r0
 800e69a:	460f      	mov	r7, r1
 800e69c:	464b      	mov	r3, r9
 800e69e:	4640      	mov	r0, r8
 800e6a0:	4649      	mov	r1, r9
 800e6a2:	f7f1 ff11 	bl	80004c8 <__aeabi_dmul>
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	4b67      	ldr	r3, [pc, #412]	; (800e848 <__ieee754_pow+0x740>)
 800e6aa:	4682      	mov	sl, r0
 800e6ac:	468b      	mov	fp, r1
 800e6ae:	f7f1 fd55 	bl	800015c <__adddf3>
 800e6b2:	4632      	mov	r2, r6
 800e6b4:	463b      	mov	r3, r7
 800e6b6:	f7f1 fd51 	bl	800015c <__adddf3>
 800e6ba:	9c04      	ldr	r4, [sp, #16]
 800e6bc:	460d      	mov	r5, r1
 800e6be:	4622      	mov	r2, r4
 800e6c0:	460b      	mov	r3, r1
 800e6c2:	4640      	mov	r0, r8
 800e6c4:	4649      	mov	r1, r9
 800e6c6:	f7f1 feff 	bl	80004c8 <__aeabi_dmul>
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	4680      	mov	r8, r0
 800e6ce:	4689      	mov	r9, r1
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	4629      	mov	r1, r5
 800e6d4:	4b5c      	ldr	r3, [pc, #368]	; (800e848 <__ieee754_pow+0x740>)
 800e6d6:	f7f1 fd3f 	bl	8000158 <__aeabi_dsub>
 800e6da:	4652      	mov	r2, sl
 800e6dc:	465b      	mov	r3, fp
 800e6de:	f7f1 fd3b 	bl	8000158 <__aeabi_dsub>
 800e6e2:	4602      	mov	r2, r0
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	4630      	mov	r0, r6
 800e6e8:	4639      	mov	r1, r7
 800e6ea:	f7f1 fd35 	bl	8000158 <__aeabi_dsub>
 800e6ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e6f2:	f7f1 fee9 	bl	80004c8 <__aeabi_dmul>
 800e6f6:	4622      	mov	r2, r4
 800e6f8:	4606      	mov	r6, r0
 800e6fa:	460f      	mov	r7, r1
 800e6fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e700:	462b      	mov	r3, r5
 800e702:	f7f1 fee1 	bl	80004c8 <__aeabi_dmul>
 800e706:	4602      	mov	r2, r0
 800e708:	460b      	mov	r3, r1
 800e70a:	4630      	mov	r0, r6
 800e70c:	4639      	mov	r1, r7
 800e70e:	f7f1 fd25 	bl	800015c <__adddf3>
 800e712:	4606      	mov	r6, r0
 800e714:	460f      	mov	r7, r1
 800e716:	4602      	mov	r2, r0
 800e718:	460b      	mov	r3, r1
 800e71a:	4640      	mov	r0, r8
 800e71c:	4649      	mov	r1, r9
 800e71e:	f7f1 fd1d 	bl	800015c <__adddf3>
 800e722:	a33d      	add	r3, pc, #244	; (adr r3, 800e818 <__ieee754_pow+0x710>)
 800e724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e728:	9c04      	ldr	r4, [sp, #16]
 800e72a:	460d      	mov	r5, r1
 800e72c:	4620      	mov	r0, r4
 800e72e:	f7f1 fecb 	bl	80004c8 <__aeabi_dmul>
 800e732:	4642      	mov	r2, r8
 800e734:	464b      	mov	r3, r9
 800e736:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e73a:	4620      	mov	r0, r4
 800e73c:	4629      	mov	r1, r5
 800e73e:	f7f1 fd0b 	bl	8000158 <__aeabi_dsub>
 800e742:	4602      	mov	r2, r0
 800e744:	460b      	mov	r3, r1
 800e746:	4630      	mov	r0, r6
 800e748:	4639      	mov	r1, r7
 800e74a:	f7f1 fd05 	bl	8000158 <__aeabi_dsub>
 800e74e:	a334      	add	r3, pc, #208	; (adr r3, 800e820 <__ieee754_pow+0x718>)
 800e750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e754:	f7f1 feb8 	bl	80004c8 <__aeabi_dmul>
 800e758:	a333      	add	r3, pc, #204	; (adr r3, 800e828 <__ieee754_pow+0x720>)
 800e75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e75e:	4606      	mov	r6, r0
 800e760:	460f      	mov	r7, r1
 800e762:	4620      	mov	r0, r4
 800e764:	4629      	mov	r1, r5
 800e766:	f7f1 feaf 	bl	80004c8 <__aeabi_dmul>
 800e76a:	4602      	mov	r2, r0
 800e76c:	460b      	mov	r3, r1
 800e76e:	4630      	mov	r0, r6
 800e770:	4639      	mov	r1, r7
 800e772:	f7f1 fcf3 	bl	800015c <__adddf3>
 800e776:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e778:	4b34      	ldr	r3, [pc, #208]	; (800e84c <__ieee754_pow+0x744>)
 800e77a:	4413      	add	r3, r2
 800e77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e780:	f7f1 fcec 	bl	800015c <__adddf3>
 800e784:	4680      	mov	r8, r0
 800e786:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e788:	4689      	mov	r9, r1
 800e78a:	f7f1 fe33 	bl	80003f4 <__aeabi_i2d>
 800e78e:	4604      	mov	r4, r0
 800e790:	460d      	mov	r5, r1
 800e792:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e794:	4b2e      	ldr	r3, [pc, #184]	; (800e850 <__ieee754_pow+0x748>)
 800e796:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e79a:	4413      	add	r3, r2
 800e79c:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e7a0:	4642      	mov	r2, r8
 800e7a2:	464b      	mov	r3, r9
 800e7a4:	f7f1 fcda 	bl	800015c <__adddf3>
 800e7a8:	4632      	mov	r2, r6
 800e7aa:	463b      	mov	r3, r7
 800e7ac:	f7f1 fcd6 	bl	800015c <__adddf3>
 800e7b0:	4622      	mov	r2, r4
 800e7b2:	462b      	mov	r3, r5
 800e7b4:	f7f1 fcd2 	bl	800015c <__adddf3>
 800e7b8:	f8dd a010 	ldr.w	sl, [sp, #16]
 800e7bc:	4622      	mov	r2, r4
 800e7be:	462b      	mov	r3, r5
 800e7c0:	4650      	mov	r0, sl
 800e7c2:	468b      	mov	fp, r1
 800e7c4:	f7f1 fcc8 	bl	8000158 <__aeabi_dsub>
 800e7c8:	4632      	mov	r2, r6
 800e7ca:	463b      	mov	r3, r7
 800e7cc:	f7f1 fcc4 	bl	8000158 <__aeabi_dsub>
 800e7d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e7d4:	f7f1 fcc0 	bl	8000158 <__aeabi_dsub>
 800e7d8:	4602      	mov	r2, r0
 800e7da:	460b      	mov	r3, r1
 800e7dc:	4640      	mov	r0, r8
 800e7de:	4649      	mov	r1, r9
 800e7e0:	e608      	b.n	800e3f4 <__ieee754_pow+0x2ec>
 800e7e2:	bf00      	nop
 800e7e4:	f3af 8000 	nop.w
 800e7e8:	4a454eef 	.word	0x4a454eef
 800e7ec:	3fca7e28 	.word	0x3fca7e28
 800e7f0:	93c9db65 	.word	0x93c9db65
 800e7f4:	3fcd864a 	.word	0x3fcd864a
 800e7f8:	a91d4101 	.word	0xa91d4101
 800e7fc:	3fd17460 	.word	0x3fd17460
 800e800:	518f264d 	.word	0x518f264d
 800e804:	3fd55555 	.word	0x3fd55555
 800e808:	db6fabff 	.word	0xdb6fabff
 800e80c:	3fdb6db6 	.word	0x3fdb6db6
 800e810:	33333303 	.word	0x33333303
 800e814:	3fe33333 	.word	0x3fe33333
 800e818:	e0000000 	.word	0xe0000000
 800e81c:	3feec709 	.word	0x3feec709
 800e820:	dc3a03fd 	.word	0xdc3a03fd
 800e824:	3feec709 	.word	0x3feec709
 800e828:	145b01f5 	.word	0x145b01f5
 800e82c:	be3e2fe0 	.word	0xbe3e2fe0
 800e830:	7ff00000 	.word	0x7ff00000
 800e834:	43400000 	.word	0x43400000
 800e838:	0003988e 	.word	0x0003988e
 800e83c:	000bb679 	.word	0x000bb679
 800e840:	08010d18 	.word	0x08010d18
 800e844:	3ff00000 	.word	0x3ff00000
 800e848:	40080000 	.word	0x40080000
 800e84c:	08010d38 	.word	0x08010d38
 800e850:	08010d28 	.word	0x08010d28
 800e854:	2601      	movs	r6, #1
 800e856:	e667      	b.n	800e528 <__ieee754_pow+0x420>
 800e858:	a39d      	add	r3, pc, #628	; (adr r3, 800ead0 <__ieee754_pow+0x9c8>)
 800e85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85e:	4640      	mov	r0, r8
 800e860:	4649      	mov	r1, r9
 800e862:	f7f1 fc7b 	bl	800015c <__adddf3>
 800e866:	4622      	mov	r2, r4
 800e868:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e86c:	462b      	mov	r3, r5
 800e86e:	4650      	mov	r0, sl
 800e870:	4639      	mov	r1, r7
 800e872:	f7f1 fc71 	bl	8000158 <__aeabi_dsub>
 800e876:	4602      	mov	r2, r0
 800e878:	460b      	mov	r3, r1
 800e87a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e87e:	f7f2 f8b3 	bl	80009e8 <__aeabi_dcmpgt>
 800e882:	2800      	cmp	r0, #0
 800e884:	f47f ae01 	bne.w	800e48a <__ieee754_pow+0x382>
 800e888:	4aa5      	ldr	r2, [pc, #660]	; (800eb20 <__ieee754_pow+0xa18>)
 800e88a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800e88e:	4293      	cmp	r3, r2
 800e890:	f340 8103 	ble.w	800ea9a <__ieee754_pow+0x992>
 800e894:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e898:	2000      	movs	r0, #0
 800e89a:	151b      	asrs	r3, r3, #20
 800e89c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e8a0:	fa4a f303 	asr.w	r3, sl, r3
 800e8a4:	4433      	add	r3, r6
 800e8a6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e8aa:	4f9e      	ldr	r7, [pc, #632]	; (800eb24 <__ieee754_pow+0xa1c>)
 800e8ac:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e8b0:	4117      	asrs	r7, r2
 800e8b2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e8b6:	ea23 0107 	bic.w	r1, r3, r7
 800e8ba:	f1c2 0214 	rsb	r2, r2, #20
 800e8be:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e8c2:	460b      	mov	r3, r1
 800e8c4:	fa4a fa02 	asr.w	sl, sl, r2
 800e8c8:	2e00      	cmp	r6, #0
 800e8ca:	4602      	mov	r2, r0
 800e8cc:	4629      	mov	r1, r5
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	bfb8      	it	lt
 800e8d2:	f1ca 0a00 	rsblt	sl, sl, #0
 800e8d6:	f7f1 fc3f 	bl	8000158 <__aeabi_dsub>
 800e8da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8e2:	2400      	movs	r4, #0
 800e8e4:	4642      	mov	r2, r8
 800e8e6:	464b      	mov	r3, r9
 800e8e8:	f7f1 fc38 	bl	800015c <__adddf3>
 800e8ec:	a37a      	add	r3, pc, #488	; (adr r3, 800ead8 <__ieee754_pow+0x9d0>)
 800e8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f2:	4620      	mov	r0, r4
 800e8f4:	460d      	mov	r5, r1
 800e8f6:	f7f1 fde7 	bl	80004c8 <__aeabi_dmul>
 800e8fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e8fe:	4606      	mov	r6, r0
 800e900:	460f      	mov	r7, r1
 800e902:	4620      	mov	r0, r4
 800e904:	4629      	mov	r1, r5
 800e906:	f7f1 fc27 	bl	8000158 <__aeabi_dsub>
 800e90a:	4602      	mov	r2, r0
 800e90c:	460b      	mov	r3, r1
 800e90e:	4640      	mov	r0, r8
 800e910:	4649      	mov	r1, r9
 800e912:	f7f1 fc21 	bl	8000158 <__aeabi_dsub>
 800e916:	a372      	add	r3, pc, #456	; (adr r3, 800eae0 <__ieee754_pow+0x9d8>)
 800e918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e91c:	f7f1 fdd4 	bl	80004c8 <__aeabi_dmul>
 800e920:	a371      	add	r3, pc, #452	; (adr r3, 800eae8 <__ieee754_pow+0x9e0>)
 800e922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e926:	4680      	mov	r8, r0
 800e928:	4689      	mov	r9, r1
 800e92a:	4620      	mov	r0, r4
 800e92c:	4629      	mov	r1, r5
 800e92e:	f7f1 fdcb 	bl	80004c8 <__aeabi_dmul>
 800e932:	4602      	mov	r2, r0
 800e934:	460b      	mov	r3, r1
 800e936:	4640      	mov	r0, r8
 800e938:	4649      	mov	r1, r9
 800e93a:	f7f1 fc0f 	bl	800015c <__adddf3>
 800e93e:	4604      	mov	r4, r0
 800e940:	460d      	mov	r5, r1
 800e942:	4602      	mov	r2, r0
 800e944:	460b      	mov	r3, r1
 800e946:	4630      	mov	r0, r6
 800e948:	4639      	mov	r1, r7
 800e94a:	f7f1 fc07 	bl	800015c <__adddf3>
 800e94e:	4632      	mov	r2, r6
 800e950:	463b      	mov	r3, r7
 800e952:	4680      	mov	r8, r0
 800e954:	4689      	mov	r9, r1
 800e956:	f7f1 fbff 	bl	8000158 <__aeabi_dsub>
 800e95a:	4602      	mov	r2, r0
 800e95c:	460b      	mov	r3, r1
 800e95e:	4620      	mov	r0, r4
 800e960:	4629      	mov	r1, r5
 800e962:	f7f1 fbf9 	bl	8000158 <__aeabi_dsub>
 800e966:	4642      	mov	r2, r8
 800e968:	4606      	mov	r6, r0
 800e96a:	460f      	mov	r7, r1
 800e96c:	464b      	mov	r3, r9
 800e96e:	4640      	mov	r0, r8
 800e970:	4649      	mov	r1, r9
 800e972:	f7f1 fda9 	bl	80004c8 <__aeabi_dmul>
 800e976:	a35e      	add	r3, pc, #376	; (adr r3, 800eaf0 <__ieee754_pow+0x9e8>)
 800e978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e97c:	4604      	mov	r4, r0
 800e97e:	460d      	mov	r5, r1
 800e980:	f7f1 fda2 	bl	80004c8 <__aeabi_dmul>
 800e984:	a35c      	add	r3, pc, #368	; (adr r3, 800eaf8 <__ieee754_pow+0x9f0>)
 800e986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e98a:	f7f1 fbe5 	bl	8000158 <__aeabi_dsub>
 800e98e:	4622      	mov	r2, r4
 800e990:	462b      	mov	r3, r5
 800e992:	f7f1 fd99 	bl	80004c8 <__aeabi_dmul>
 800e996:	a35a      	add	r3, pc, #360	; (adr r3, 800eb00 <__ieee754_pow+0x9f8>)
 800e998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99c:	f7f1 fbde 	bl	800015c <__adddf3>
 800e9a0:	4622      	mov	r2, r4
 800e9a2:	462b      	mov	r3, r5
 800e9a4:	f7f1 fd90 	bl	80004c8 <__aeabi_dmul>
 800e9a8:	a357      	add	r3, pc, #348	; (adr r3, 800eb08 <__ieee754_pow+0xa00>)
 800e9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ae:	f7f1 fbd3 	bl	8000158 <__aeabi_dsub>
 800e9b2:	4622      	mov	r2, r4
 800e9b4:	462b      	mov	r3, r5
 800e9b6:	f7f1 fd87 	bl	80004c8 <__aeabi_dmul>
 800e9ba:	a355      	add	r3, pc, #340	; (adr r3, 800eb10 <__ieee754_pow+0xa08>)
 800e9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c0:	f7f1 fbcc 	bl	800015c <__adddf3>
 800e9c4:	4622      	mov	r2, r4
 800e9c6:	462b      	mov	r3, r5
 800e9c8:	f7f1 fd7e 	bl	80004c8 <__aeabi_dmul>
 800e9cc:	4602      	mov	r2, r0
 800e9ce:	460b      	mov	r3, r1
 800e9d0:	4640      	mov	r0, r8
 800e9d2:	4649      	mov	r1, r9
 800e9d4:	f7f1 fbc0 	bl	8000158 <__aeabi_dsub>
 800e9d8:	4604      	mov	r4, r0
 800e9da:	460d      	mov	r5, r1
 800e9dc:	4602      	mov	r2, r0
 800e9de:	460b      	mov	r3, r1
 800e9e0:	4640      	mov	r0, r8
 800e9e2:	4649      	mov	r1, r9
 800e9e4:	f7f1 fd70 	bl	80004c8 <__aeabi_dmul>
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	4629      	mov	r1, r5
 800e9f6:	f7f1 fbaf 	bl	8000158 <__aeabi_dsub>
 800e9fa:	4602      	mov	r2, r0
 800e9fc:	460b      	mov	r3, r1
 800e9fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea02:	f7f1 fe8b 	bl	800071c <__aeabi_ddiv>
 800ea06:	4632      	mov	r2, r6
 800ea08:	4604      	mov	r4, r0
 800ea0a:	460d      	mov	r5, r1
 800ea0c:	463b      	mov	r3, r7
 800ea0e:	4640      	mov	r0, r8
 800ea10:	4649      	mov	r1, r9
 800ea12:	f7f1 fd59 	bl	80004c8 <__aeabi_dmul>
 800ea16:	4632      	mov	r2, r6
 800ea18:	463b      	mov	r3, r7
 800ea1a:	f7f1 fb9f 	bl	800015c <__adddf3>
 800ea1e:	4602      	mov	r2, r0
 800ea20:	460b      	mov	r3, r1
 800ea22:	4620      	mov	r0, r4
 800ea24:	4629      	mov	r1, r5
 800ea26:	f7f1 fb97 	bl	8000158 <__aeabi_dsub>
 800ea2a:	4642      	mov	r2, r8
 800ea2c:	464b      	mov	r3, r9
 800ea2e:	f7f1 fb93 	bl	8000158 <__aeabi_dsub>
 800ea32:	4602      	mov	r2, r0
 800ea34:	460b      	mov	r3, r1
 800ea36:	2000      	movs	r0, #0
 800ea38:	493b      	ldr	r1, [pc, #236]	; (800eb28 <__ieee754_pow+0xa20>)
 800ea3a:	f7f1 fb8d 	bl	8000158 <__aeabi_dsub>
 800ea3e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ea42:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ea46:	da2b      	bge.n	800eaa0 <__ieee754_pow+0x998>
 800ea48:	4652      	mov	r2, sl
 800ea4a:	f001 f8e1 	bl	800fc10 <scalbn>
 800ea4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea52:	f7ff bbf2 	b.w	800e23a <__ieee754_pow+0x132>
 800ea56:	4b35      	ldr	r3, [pc, #212]	; (800eb2c <__ieee754_pow+0xa24>)
 800ea58:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800ea5c:	429f      	cmp	r7, r3
 800ea5e:	f77f af13 	ble.w	800e888 <__ieee754_pow+0x780>
 800ea62:	4b33      	ldr	r3, [pc, #204]	; (800eb30 <__ieee754_pow+0xa28>)
 800ea64:	440b      	add	r3, r1
 800ea66:	4303      	orrs	r3, r0
 800ea68:	d00b      	beq.n	800ea82 <__ieee754_pow+0x97a>
 800ea6a:	a32b      	add	r3, pc, #172	; (adr r3, 800eb18 <__ieee754_pow+0xa10>)
 800ea6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea74:	f7f1 fd28 	bl	80004c8 <__aeabi_dmul>
 800ea78:	a327      	add	r3, pc, #156	; (adr r3, 800eb18 <__ieee754_pow+0xa10>)
 800ea7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea7e:	f7ff bbdc 	b.w	800e23a <__ieee754_pow+0x132>
 800ea82:	4622      	mov	r2, r4
 800ea84:	462b      	mov	r3, r5
 800ea86:	f7f1 fb67 	bl	8000158 <__aeabi_dsub>
 800ea8a:	4642      	mov	r2, r8
 800ea8c:	464b      	mov	r3, r9
 800ea8e:	f7f1 ffa1 	bl	80009d4 <__aeabi_dcmpge>
 800ea92:	2800      	cmp	r0, #0
 800ea94:	f43f aef8 	beq.w	800e888 <__ieee754_pow+0x780>
 800ea98:	e7e7      	b.n	800ea6a <__ieee754_pow+0x962>
 800ea9a:	f04f 0a00 	mov.w	sl, #0
 800ea9e:	e71e      	b.n	800e8de <__ieee754_pow+0x7d6>
 800eaa0:	4621      	mov	r1, r4
 800eaa2:	e7d4      	b.n	800ea4e <__ieee754_pow+0x946>
 800eaa4:	f04f 0b00 	mov.w	fp, #0
 800eaa8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800eb28 <__ieee754_pow+0xa20>
 800eaac:	f7ff bbb0 	b.w	800e210 <__ieee754_pow+0x108>
 800eab0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800eab4:	f7ff bbac 	b.w	800e210 <__ieee754_pow+0x108>
 800eab8:	4638      	mov	r0, r7
 800eaba:	4641      	mov	r1, r8
 800eabc:	f7ff bbbf 	b.w	800e23e <__ieee754_pow+0x136>
 800eac0:	9200      	str	r2, [sp, #0]
 800eac2:	f7ff bb7f 	b.w	800e1c4 <__ieee754_pow+0xbc>
 800eac6:	2300      	movs	r3, #0
 800eac8:	f7ff bb69 	b.w	800e19e <__ieee754_pow+0x96>
 800eacc:	f3af 8000 	nop.w
 800ead0:	652b82fe 	.word	0x652b82fe
 800ead4:	3c971547 	.word	0x3c971547
 800ead8:	00000000 	.word	0x00000000
 800eadc:	3fe62e43 	.word	0x3fe62e43
 800eae0:	fefa39ef 	.word	0xfefa39ef
 800eae4:	3fe62e42 	.word	0x3fe62e42
 800eae8:	0ca86c39 	.word	0x0ca86c39
 800eaec:	be205c61 	.word	0xbe205c61
 800eaf0:	72bea4d0 	.word	0x72bea4d0
 800eaf4:	3e663769 	.word	0x3e663769
 800eaf8:	c5d26bf1 	.word	0xc5d26bf1
 800eafc:	3ebbbd41 	.word	0x3ebbbd41
 800eb00:	af25de2c 	.word	0xaf25de2c
 800eb04:	3f11566a 	.word	0x3f11566a
 800eb08:	16bebd93 	.word	0x16bebd93
 800eb0c:	3f66c16c 	.word	0x3f66c16c
 800eb10:	5555553e 	.word	0x5555553e
 800eb14:	3fc55555 	.word	0x3fc55555
 800eb18:	c2f8f359 	.word	0xc2f8f359
 800eb1c:	01a56e1f 	.word	0x01a56e1f
 800eb20:	3fe00000 	.word	0x3fe00000
 800eb24:	000fffff 	.word	0x000fffff
 800eb28:	3ff00000 	.word	0x3ff00000
 800eb2c:	4090cbff 	.word	0x4090cbff
 800eb30:	3f6f3400 	.word	0x3f6f3400

0800eb34 <__ieee754_sqrt>:
 800eb34:	f8df c150 	ldr.w	ip, [pc, #336]	; 800ec88 <__ieee754_sqrt+0x154>
 800eb38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb3c:	ea3c 0c01 	bics.w	ip, ip, r1
 800eb40:	460b      	mov	r3, r1
 800eb42:	4606      	mov	r6, r0
 800eb44:	460d      	mov	r5, r1
 800eb46:	460a      	mov	r2, r1
 800eb48:	4607      	mov	r7, r0
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	d10e      	bne.n	800eb6c <__ieee754_sqrt+0x38>
 800eb4e:	4602      	mov	r2, r0
 800eb50:	f7f1 fcba 	bl	80004c8 <__aeabi_dmul>
 800eb54:	4602      	mov	r2, r0
 800eb56:	460b      	mov	r3, r1
 800eb58:	4630      	mov	r0, r6
 800eb5a:	4629      	mov	r1, r5
 800eb5c:	f7f1 fafe 	bl	800015c <__adddf3>
 800eb60:	4606      	mov	r6, r0
 800eb62:	460d      	mov	r5, r1
 800eb64:	4630      	mov	r0, r6
 800eb66:	4629      	mov	r1, r5
 800eb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb6c:	2900      	cmp	r1, #0
 800eb6e:	dc0d      	bgt.n	800eb8c <__ieee754_sqrt+0x58>
 800eb70:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800eb74:	ea5c 0707 	orrs.w	r7, ip, r7
 800eb78:	d0f4      	beq.n	800eb64 <__ieee754_sqrt+0x30>
 800eb7a:	b139      	cbz	r1, 800eb8c <__ieee754_sqrt+0x58>
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	f7f1 faeb 	bl	8000158 <__aeabi_dsub>
 800eb82:	4602      	mov	r2, r0
 800eb84:	460b      	mov	r3, r1
 800eb86:	f7f1 fdc9 	bl	800071c <__aeabi_ddiv>
 800eb8a:	e7e9      	b.n	800eb60 <__ieee754_sqrt+0x2c>
 800eb8c:	1512      	asrs	r2, r2, #20
 800eb8e:	d074      	beq.n	800ec7a <__ieee754_sqrt+0x146>
 800eb90:	2000      	movs	r0, #0
 800eb92:	07d5      	lsls	r5, r2, #31
 800eb94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb98:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800eb9c:	bf5e      	ittt	pl
 800eb9e:	0fe3      	lsrpl	r3, r4, #31
 800eba0:	0064      	lslpl	r4, r4, #1
 800eba2:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800eba6:	0fe3      	lsrs	r3, r4, #31
 800eba8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ebac:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800ebb0:	2516      	movs	r5, #22
 800ebb2:	4601      	mov	r1, r0
 800ebb4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ebb8:	1076      	asrs	r6, r6, #1
 800ebba:	0064      	lsls	r4, r4, #1
 800ebbc:	188f      	adds	r7, r1, r2
 800ebbe:	429f      	cmp	r7, r3
 800ebc0:	bfde      	ittt	le
 800ebc2:	1bdb      	suble	r3, r3, r7
 800ebc4:	18b9      	addle	r1, r7, r2
 800ebc6:	1880      	addle	r0, r0, r2
 800ebc8:	005b      	lsls	r3, r3, #1
 800ebca:	3d01      	subs	r5, #1
 800ebcc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ebd0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ebd4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ebd8:	d1f0      	bne.n	800ebbc <__ieee754_sqrt+0x88>
 800ebda:	462a      	mov	r2, r5
 800ebdc:	f04f 0e20 	mov.w	lr, #32
 800ebe0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800ebe4:	428b      	cmp	r3, r1
 800ebe6:	eb07 0c05 	add.w	ip, r7, r5
 800ebea:	dc02      	bgt.n	800ebf2 <__ieee754_sqrt+0xbe>
 800ebec:	d113      	bne.n	800ec16 <__ieee754_sqrt+0xe2>
 800ebee:	45a4      	cmp	ip, r4
 800ebf0:	d811      	bhi.n	800ec16 <__ieee754_sqrt+0xe2>
 800ebf2:	f1bc 0f00 	cmp.w	ip, #0
 800ebf6:	eb0c 0507 	add.w	r5, ip, r7
 800ebfa:	da43      	bge.n	800ec84 <__ieee754_sqrt+0x150>
 800ebfc:	2d00      	cmp	r5, #0
 800ebfe:	db41      	blt.n	800ec84 <__ieee754_sqrt+0x150>
 800ec00:	f101 0801 	add.w	r8, r1, #1
 800ec04:	1a5b      	subs	r3, r3, r1
 800ec06:	4641      	mov	r1, r8
 800ec08:	45a4      	cmp	ip, r4
 800ec0a:	bf88      	it	hi
 800ec0c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ec10:	eba4 040c 	sub.w	r4, r4, ip
 800ec14:	443a      	add	r2, r7
 800ec16:	005b      	lsls	r3, r3, #1
 800ec18:	f1be 0e01 	subs.w	lr, lr, #1
 800ec1c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ec20:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800ec24:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ec28:	d1dc      	bne.n	800ebe4 <__ieee754_sqrt+0xb0>
 800ec2a:	4323      	orrs	r3, r4
 800ec2c:	d006      	beq.n	800ec3c <__ieee754_sqrt+0x108>
 800ec2e:	1c54      	adds	r4, r2, #1
 800ec30:	bf0b      	itete	eq
 800ec32:	4672      	moveq	r2, lr
 800ec34:	3201      	addne	r2, #1
 800ec36:	3001      	addeq	r0, #1
 800ec38:	f022 0201 	bicne.w	r2, r2, #1
 800ec3c:	1043      	asrs	r3, r0, #1
 800ec3e:	07c1      	lsls	r1, r0, #31
 800ec40:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ec44:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ec48:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ec4c:	bf48      	it	mi
 800ec4e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ec52:	4610      	mov	r0, r2
 800ec54:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800ec58:	e782      	b.n	800eb60 <__ieee754_sqrt+0x2c>
 800ec5a:	0ae3      	lsrs	r3, r4, #11
 800ec5c:	3915      	subs	r1, #21
 800ec5e:	0564      	lsls	r4, r4, #21
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d0fa      	beq.n	800ec5a <__ieee754_sqrt+0x126>
 800ec64:	02de      	lsls	r6, r3, #11
 800ec66:	d50a      	bpl.n	800ec7e <__ieee754_sqrt+0x14a>
 800ec68:	f1c2 0020 	rsb	r0, r2, #32
 800ec6c:	fa24 f000 	lsr.w	r0, r4, r0
 800ec70:	1e55      	subs	r5, r2, #1
 800ec72:	4094      	lsls	r4, r2
 800ec74:	4303      	orrs	r3, r0
 800ec76:	1b4a      	subs	r2, r1, r5
 800ec78:	e78a      	b.n	800eb90 <__ieee754_sqrt+0x5c>
 800ec7a:	4611      	mov	r1, r2
 800ec7c:	e7f0      	b.n	800ec60 <__ieee754_sqrt+0x12c>
 800ec7e:	005b      	lsls	r3, r3, #1
 800ec80:	3201      	adds	r2, #1
 800ec82:	e7ef      	b.n	800ec64 <__ieee754_sqrt+0x130>
 800ec84:	4688      	mov	r8, r1
 800ec86:	e7bd      	b.n	800ec04 <__ieee754_sqrt+0xd0>
 800ec88:	7ff00000 	.word	0x7ff00000

0800ec8c <__ieee754_asinf>:
 800ec8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec90:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800ec94:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800ec98:	4604      	mov	r4, r0
 800ec9a:	4605      	mov	r5, r0
 800ec9c:	d10c      	bne.n	800ecb8 <__ieee754_asinf+0x2c>
 800ec9e:	498d      	ldr	r1, [pc, #564]	; (800eed4 <__ieee754_asinf+0x248>)
 800eca0:	f7f2 f848 	bl	8000d34 <__aeabi_fmul>
 800eca4:	498c      	ldr	r1, [pc, #560]	; (800eed8 <__ieee754_asinf+0x24c>)
 800eca6:	4605      	mov	r5, r0
 800eca8:	4620      	mov	r0, r4
 800ecaa:	f7f2 f843 	bl	8000d34 <__aeabi_fmul>
 800ecae:	4601      	mov	r1, r0
 800ecb0:	4628      	mov	r0, r5
 800ecb2:	f7f1 ff37 	bl	8000b24 <__addsf3>
 800ecb6:	e006      	b.n	800ecc6 <__ieee754_asinf+0x3a>
 800ecb8:	dd07      	ble.n	800ecca <__ieee754_asinf+0x3e>
 800ecba:	4601      	mov	r1, r0
 800ecbc:	f7f1 ff30 	bl	8000b20 <__aeabi_fsub>
 800ecc0:	4601      	mov	r1, r0
 800ecc2:	f7f2 f8eb 	bl	8000e9c <__aeabi_fdiv>
 800ecc6:	4604      	mov	r4, r0
 800ecc8:	e00e      	b.n	800ece8 <__ieee754_asinf+0x5c>
 800ecca:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800ecce:	da58      	bge.n	800ed82 <__ieee754_asinf+0xf6>
 800ecd0:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800ecd4:	da0b      	bge.n	800ecee <__ieee754_asinf+0x62>
 800ecd6:	4981      	ldr	r1, [pc, #516]	; (800eedc <__ieee754_asinf+0x250>)
 800ecd8:	f7f1 ff24 	bl	8000b24 <__addsf3>
 800ecdc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ece0:	f7f2 f9e4 	bl	80010ac <__aeabi_fcmpgt>
 800ece4:	2800      	cmp	r0, #0
 800ece6:	d04c      	beq.n	800ed82 <__ieee754_asinf+0xf6>
 800ece8:	4620      	mov	r0, r4
 800ecea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecee:	4601      	mov	r1, r0
 800ecf0:	f7f2 f820 	bl	8000d34 <__aeabi_fmul>
 800ecf4:	4605      	mov	r5, r0
 800ecf6:	497a      	ldr	r1, [pc, #488]	; (800eee0 <__ieee754_asinf+0x254>)
 800ecf8:	f7f2 f81c 	bl	8000d34 <__aeabi_fmul>
 800ecfc:	4979      	ldr	r1, [pc, #484]	; (800eee4 <__ieee754_asinf+0x258>)
 800ecfe:	f7f1 ff11 	bl	8000b24 <__addsf3>
 800ed02:	4629      	mov	r1, r5
 800ed04:	f7f2 f816 	bl	8000d34 <__aeabi_fmul>
 800ed08:	4977      	ldr	r1, [pc, #476]	; (800eee8 <__ieee754_asinf+0x25c>)
 800ed0a:	f7f1 ff09 	bl	8000b20 <__aeabi_fsub>
 800ed0e:	4629      	mov	r1, r5
 800ed10:	f7f2 f810 	bl	8000d34 <__aeabi_fmul>
 800ed14:	4975      	ldr	r1, [pc, #468]	; (800eeec <__ieee754_asinf+0x260>)
 800ed16:	f7f1 ff05 	bl	8000b24 <__addsf3>
 800ed1a:	4629      	mov	r1, r5
 800ed1c:	f7f2 f80a 	bl	8000d34 <__aeabi_fmul>
 800ed20:	4973      	ldr	r1, [pc, #460]	; (800eef0 <__ieee754_asinf+0x264>)
 800ed22:	f7f1 fefd 	bl	8000b20 <__aeabi_fsub>
 800ed26:	4629      	mov	r1, r5
 800ed28:	f7f2 f804 	bl	8000d34 <__aeabi_fmul>
 800ed2c:	4971      	ldr	r1, [pc, #452]	; (800eef4 <__ieee754_asinf+0x268>)
 800ed2e:	f7f1 fef9 	bl	8000b24 <__addsf3>
 800ed32:	4629      	mov	r1, r5
 800ed34:	f7f1 fffe 	bl	8000d34 <__aeabi_fmul>
 800ed38:	496f      	ldr	r1, [pc, #444]	; (800eef8 <__ieee754_asinf+0x26c>)
 800ed3a:	4606      	mov	r6, r0
 800ed3c:	4628      	mov	r0, r5
 800ed3e:	f7f1 fff9 	bl	8000d34 <__aeabi_fmul>
 800ed42:	496e      	ldr	r1, [pc, #440]	; (800eefc <__ieee754_asinf+0x270>)
 800ed44:	f7f1 feec 	bl	8000b20 <__aeabi_fsub>
 800ed48:	4629      	mov	r1, r5
 800ed4a:	f7f1 fff3 	bl	8000d34 <__aeabi_fmul>
 800ed4e:	496c      	ldr	r1, [pc, #432]	; (800ef00 <__ieee754_asinf+0x274>)
 800ed50:	f7f1 fee8 	bl	8000b24 <__addsf3>
 800ed54:	4629      	mov	r1, r5
 800ed56:	f7f1 ffed 	bl	8000d34 <__aeabi_fmul>
 800ed5a:	496a      	ldr	r1, [pc, #424]	; (800ef04 <__ieee754_asinf+0x278>)
 800ed5c:	f7f1 fee0 	bl	8000b20 <__aeabi_fsub>
 800ed60:	4629      	mov	r1, r5
 800ed62:	f7f1 ffe7 	bl	8000d34 <__aeabi_fmul>
 800ed66:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ed6a:	f7f1 fedb 	bl	8000b24 <__addsf3>
 800ed6e:	4601      	mov	r1, r0
 800ed70:	4630      	mov	r0, r6
 800ed72:	f7f2 f893 	bl	8000e9c <__aeabi_fdiv>
 800ed76:	4621      	mov	r1, r4
 800ed78:	f7f1 ffdc 	bl	8000d34 <__aeabi_fmul>
 800ed7c:	4601      	mov	r1, r0
 800ed7e:	4620      	mov	r0, r4
 800ed80:	e797      	b.n	800ecb2 <__ieee754_asinf+0x26>
 800ed82:	4620      	mov	r0, r4
 800ed84:	f7ff f862 	bl	800de4c <fabsf>
 800ed88:	4601      	mov	r1, r0
 800ed8a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ed8e:	f7f1 fec7 	bl	8000b20 <__aeabi_fsub>
 800ed92:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800ed96:	f7f1 ffcd 	bl	8000d34 <__aeabi_fmul>
 800ed9a:	4606      	mov	r6, r0
 800ed9c:	4950      	ldr	r1, [pc, #320]	; (800eee0 <__ieee754_asinf+0x254>)
 800ed9e:	f7f1 ffc9 	bl	8000d34 <__aeabi_fmul>
 800eda2:	4950      	ldr	r1, [pc, #320]	; (800eee4 <__ieee754_asinf+0x258>)
 800eda4:	f7f1 febe 	bl	8000b24 <__addsf3>
 800eda8:	4631      	mov	r1, r6
 800edaa:	f7f1 ffc3 	bl	8000d34 <__aeabi_fmul>
 800edae:	494e      	ldr	r1, [pc, #312]	; (800eee8 <__ieee754_asinf+0x25c>)
 800edb0:	f7f1 feb6 	bl	8000b20 <__aeabi_fsub>
 800edb4:	4631      	mov	r1, r6
 800edb6:	f7f1 ffbd 	bl	8000d34 <__aeabi_fmul>
 800edba:	494c      	ldr	r1, [pc, #304]	; (800eeec <__ieee754_asinf+0x260>)
 800edbc:	f7f1 feb2 	bl	8000b24 <__addsf3>
 800edc0:	4631      	mov	r1, r6
 800edc2:	f7f1 ffb7 	bl	8000d34 <__aeabi_fmul>
 800edc6:	494a      	ldr	r1, [pc, #296]	; (800eef0 <__ieee754_asinf+0x264>)
 800edc8:	f7f1 feaa 	bl	8000b20 <__aeabi_fsub>
 800edcc:	4631      	mov	r1, r6
 800edce:	f7f1 ffb1 	bl	8000d34 <__aeabi_fmul>
 800edd2:	4948      	ldr	r1, [pc, #288]	; (800eef4 <__ieee754_asinf+0x268>)
 800edd4:	f7f1 fea6 	bl	8000b24 <__addsf3>
 800edd8:	4631      	mov	r1, r6
 800edda:	f7f1 ffab 	bl	8000d34 <__aeabi_fmul>
 800edde:	4946      	ldr	r1, [pc, #280]	; (800eef8 <__ieee754_asinf+0x26c>)
 800ede0:	4681      	mov	r9, r0
 800ede2:	4630      	mov	r0, r6
 800ede4:	f7f1 ffa6 	bl	8000d34 <__aeabi_fmul>
 800ede8:	4944      	ldr	r1, [pc, #272]	; (800eefc <__ieee754_asinf+0x270>)
 800edea:	f7f1 fe99 	bl	8000b20 <__aeabi_fsub>
 800edee:	4631      	mov	r1, r6
 800edf0:	f7f1 ffa0 	bl	8000d34 <__aeabi_fmul>
 800edf4:	4942      	ldr	r1, [pc, #264]	; (800ef00 <__ieee754_asinf+0x274>)
 800edf6:	f7f1 fe95 	bl	8000b24 <__addsf3>
 800edfa:	4631      	mov	r1, r6
 800edfc:	f7f1 ff9a 	bl	8000d34 <__aeabi_fmul>
 800ee00:	4940      	ldr	r1, [pc, #256]	; (800ef04 <__ieee754_asinf+0x278>)
 800ee02:	f7f1 fe8d 	bl	8000b20 <__aeabi_fsub>
 800ee06:	4631      	mov	r1, r6
 800ee08:	f7f1 ff94 	bl	8000d34 <__aeabi_fmul>
 800ee0c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ee10:	f7f1 fe88 	bl	8000b24 <__addsf3>
 800ee14:	4682      	mov	sl, r0
 800ee16:	4630      	mov	r0, r6
 800ee18:	f000 fa60 	bl	800f2dc <__ieee754_sqrtf>
 800ee1c:	4b3a      	ldr	r3, [pc, #232]	; (800ef08 <__ieee754_asinf+0x27c>)
 800ee1e:	4607      	mov	r7, r0
 800ee20:	4598      	cmp	r8, r3
 800ee22:	dd1a      	ble.n	800ee5a <__ieee754_asinf+0x1ce>
 800ee24:	4651      	mov	r1, sl
 800ee26:	4648      	mov	r0, r9
 800ee28:	f7f2 f838 	bl	8000e9c <__aeabi_fdiv>
 800ee2c:	4639      	mov	r1, r7
 800ee2e:	f7f1 ff81 	bl	8000d34 <__aeabi_fmul>
 800ee32:	4639      	mov	r1, r7
 800ee34:	f7f1 fe76 	bl	8000b24 <__addsf3>
 800ee38:	4601      	mov	r1, r0
 800ee3a:	f7f1 fe73 	bl	8000b24 <__addsf3>
 800ee3e:	4933      	ldr	r1, [pc, #204]	; (800ef0c <__ieee754_asinf+0x280>)
 800ee40:	f7f1 fe70 	bl	8000b24 <__addsf3>
 800ee44:	4601      	mov	r1, r0
 800ee46:	4823      	ldr	r0, [pc, #140]	; (800eed4 <__ieee754_asinf+0x248>)
 800ee48:	f7f1 fe6a 	bl	8000b20 <__aeabi_fsub>
 800ee4c:	2d00      	cmp	r5, #0
 800ee4e:	4604      	mov	r4, r0
 800ee50:	f73f af4a 	bgt.w	800ece8 <__ieee754_asinf+0x5c>
 800ee54:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ee58:	e735      	b.n	800ecc6 <__ieee754_asinf+0x3a>
 800ee5a:	4601      	mov	r1, r0
 800ee5c:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800ee60:	f7f1 fe60 	bl	8000b24 <__addsf3>
 800ee64:	4651      	mov	r1, sl
 800ee66:	4604      	mov	r4, r0
 800ee68:	4648      	mov	r0, r9
 800ee6a:	f7f2 f817 	bl	8000e9c <__aeabi_fdiv>
 800ee6e:	4601      	mov	r1, r0
 800ee70:	4620      	mov	r0, r4
 800ee72:	f7f1 ff5f 	bl	8000d34 <__aeabi_fmul>
 800ee76:	f028 080f 	bic.w	r8, r8, #15
 800ee7a:	4681      	mov	r9, r0
 800ee7c:	4641      	mov	r1, r8
 800ee7e:	4640      	mov	r0, r8
 800ee80:	f7f1 ff58 	bl	8000d34 <__aeabi_fmul>
 800ee84:	4601      	mov	r1, r0
 800ee86:	4630      	mov	r0, r6
 800ee88:	f7f1 fe4a 	bl	8000b20 <__aeabi_fsub>
 800ee8c:	4641      	mov	r1, r8
 800ee8e:	4604      	mov	r4, r0
 800ee90:	4638      	mov	r0, r7
 800ee92:	f7f1 fe47 	bl	8000b24 <__addsf3>
 800ee96:	4601      	mov	r1, r0
 800ee98:	4620      	mov	r0, r4
 800ee9a:	f7f1 ffff 	bl	8000e9c <__aeabi_fdiv>
 800ee9e:	4601      	mov	r1, r0
 800eea0:	f7f1 fe40 	bl	8000b24 <__addsf3>
 800eea4:	4601      	mov	r1, r0
 800eea6:	480c      	ldr	r0, [pc, #48]	; (800eed8 <__ieee754_asinf+0x24c>)
 800eea8:	f7f1 fe3a 	bl	8000b20 <__aeabi_fsub>
 800eeac:	4601      	mov	r1, r0
 800eeae:	4648      	mov	r0, r9
 800eeb0:	f7f1 fe36 	bl	8000b20 <__aeabi_fsub>
 800eeb4:	4641      	mov	r1, r8
 800eeb6:	4604      	mov	r4, r0
 800eeb8:	4640      	mov	r0, r8
 800eeba:	f7f1 fe33 	bl	8000b24 <__addsf3>
 800eebe:	4601      	mov	r1, r0
 800eec0:	4813      	ldr	r0, [pc, #76]	; (800ef10 <__ieee754_asinf+0x284>)
 800eec2:	f7f1 fe2d 	bl	8000b20 <__aeabi_fsub>
 800eec6:	4601      	mov	r1, r0
 800eec8:	4620      	mov	r0, r4
 800eeca:	f7f1 fe29 	bl	8000b20 <__aeabi_fsub>
 800eece:	4601      	mov	r1, r0
 800eed0:	480f      	ldr	r0, [pc, #60]	; (800ef10 <__ieee754_asinf+0x284>)
 800eed2:	e7b9      	b.n	800ee48 <__ieee754_asinf+0x1bc>
 800eed4:	3fc90fdb 	.word	0x3fc90fdb
 800eed8:	b33bbd2e 	.word	0xb33bbd2e
 800eedc:	7149f2ca 	.word	0x7149f2ca
 800eee0:	3811ef08 	.word	0x3811ef08
 800eee4:	3a4f7f04 	.word	0x3a4f7f04
 800eee8:	3d241146 	.word	0x3d241146
 800eeec:	3e4e0aa8 	.word	0x3e4e0aa8
 800eef0:	3ea6b090 	.word	0x3ea6b090
 800eef4:	3e2aaaab 	.word	0x3e2aaaab
 800eef8:	3d9dc62e 	.word	0x3d9dc62e
 800eefc:	3f303361 	.word	0x3f303361
 800ef00:	4001572d 	.word	0x4001572d
 800ef04:	4019d139 	.word	0x4019d139
 800ef08:	3f799999 	.word	0x3f799999
 800ef0c:	333bbd2e 	.word	0x333bbd2e
 800ef10:	3f490fdb 	.word	0x3f490fdb

0800ef14 <__ieee754_atan2f>:
 800ef14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef16:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ef1a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ef1e:	4603      	mov	r3, r0
 800ef20:	dc05      	bgt.n	800ef2e <__ieee754_atan2f+0x1a>
 800ef22:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800ef26:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ef2a:	4607      	mov	r7, r0
 800ef2c:	dd04      	ble.n	800ef38 <__ieee754_atan2f+0x24>
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7f1 fdf8 	bl	8000b24 <__addsf3>
 800ef34:	4603      	mov	r3, r0
 800ef36:	e011      	b.n	800ef5c <__ieee754_atan2f+0x48>
 800ef38:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800ef3c:	d103      	bne.n	800ef46 <__ieee754_atan2f+0x32>
 800ef3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ef42:	f7fe be43 	b.w	800dbcc <atanf>
 800ef46:	178c      	asrs	r4, r1, #30
 800ef48:	f004 0402 	and.w	r4, r4, #2
 800ef4c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ef50:	b932      	cbnz	r2, 800ef60 <__ieee754_atan2f+0x4c>
 800ef52:	2c02      	cmp	r4, #2
 800ef54:	d04c      	beq.n	800eff0 <__ieee754_atan2f+0xdc>
 800ef56:	2c03      	cmp	r4, #3
 800ef58:	d100      	bne.n	800ef5c <__ieee754_atan2f+0x48>
 800ef5a:	4b29      	ldr	r3, [pc, #164]	; (800f000 <__ieee754_atan2f+0xec>)
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef60:	b91e      	cbnz	r6, 800ef6a <__ieee754_atan2f+0x56>
 800ef62:	2f00      	cmp	r7, #0
 800ef64:	da4a      	bge.n	800effc <__ieee754_atan2f+0xe8>
 800ef66:	4b27      	ldr	r3, [pc, #156]	; (800f004 <__ieee754_atan2f+0xf0>)
 800ef68:	e7f8      	b.n	800ef5c <__ieee754_atan2f+0x48>
 800ef6a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ef6e:	d10e      	bne.n	800ef8e <__ieee754_atan2f+0x7a>
 800ef70:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ef74:	f104 34ff 	add.w	r4, r4, #4294967295
 800ef78:	d105      	bne.n	800ef86 <__ieee754_atan2f+0x72>
 800ef7a:	2c02      	cmp	r4, #2
 800ef7c:	d83a      	bhi.n	800eff4 <__ieee754_atan2f+0xe0>
 800ef7e:	4b22      	ldr	r3, [pc, #136]	; (800f008 <__ieee754_atan2f+0xf4>)
 800ef80:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ef84:	e7ea      	b.n	800ef5c <__ieee754_atan2f+0x48>
 800ef86:	2c02      	cmp	r4, #2
 800ef88:	d836      	bhi.n	800eff8 <__ieee754_atan2f+0xe4>
 800ef8a:	4b20      	ldr	r3, [pc, #128]	; (800f00c <__ieee754_atan2f+0xf8>)
 800ef8c:	e7f8      	b.n	800ef80 <__ieee754_atan2f+0x6c>
 800ef8e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ef92:	d0e6      	beq.n	800ef62 <__ieee754_atan2f+0x4e>
 800ef94:	1b92      	subs	r2, r2, r6
 800ef96:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800ef9a:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800ef9e:	da17      	bge.n	800efd0 <__ieee754_atan2f+0xbc>
 800efa0:	2900      	cmp	r1, #0
 800efa2:	da01      	bge.n	800efa8 <__ieee754_atan2f+0x94>
 800efa4:	303c      	adds	r0, #60	; 0x3c
 800efa6:	db15      	blt.n	800efd4 <__ieee754_atan2f+0xc0>
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7f1 ff77 	bl	8000e9c <__aeabi_fdiv>
 800efae:	f7fe ff4d 	bl	800de4c <fabsf>
 800efb2:	f7fe fe0b 	bl	800dbcc <atanf>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2c01      	cmp	r4, #1
 800efba:	d00d      	beq.n	800efd8 <__ieee754_atan2f+0xc4>
 800efbc:	2c02      	cmp	r4, #2
 800efbe:	d00e      	beq.n	800efde <__ieee754_atan2f+0xca>
 800efc0:	2c00      	cmp	r4, #0
 800efc2:	d0cb      	beq.n	800ef5c <__ieee754_atan2f+0x48>
 800efc4:	4912      	ldr	r1, [pc, #72]	; (800f010 <__ieee754_atan2f+0xfc>)
 800efc6:	4618      	mov	r0, r3
 800efc8:	f7f1 fdac 	bl	8000b24 <__addsf3>
 800efcc:	4911      	ldr	r1, [pc, #68]	; (800f014 <__ieee754_atan2f+0x100>)
 800efce:	e00c      	b.n	800efea <__ieee754_atan2f+0xd6>
 800efd0:	4b11      	ldr	r3, [pc, #68]	; (800f018 <__ieee754_atan2f+0x104>)
 800efd2:	e7f1      	b.n	800efb8 <__ieee754_atan2f+0xa4>
 800efd4:	2300      	movs	r3, #0
 800efd6:	e7ef      	b.n	800efb8 <__ieee754_atan2f+0xa4>
 800efd8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800efdc:	e7be      	b.n	800ef5c <__ieee754_atan2f+0x48>
 800efde:	490c      	ldr	r1, [pc, #48]	; (800f010 <__ieee754_atan2f+0xfc>)
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7f1 fd9f 	bl	8000b24 <__addsf3>
 800efe6:	4601      	mov	r1, r0
 800efe8:	480a      	ldr	r0, [pc, #40]	; (800f014 <__ieee754_atan2f+0x100>)
 800efea:	f7f1 fd99 	bl	8000b20 <__aeabi_fsub>
 800efee:	e7a1      	b.n	800ef34 <__ieee754_atan2f+0x20>
 800eff0:	4b08      	ldr	r3, [pc, #32]	; (800f014 <__ieee754_atan2f+0x100>)
 800eff2:	e7b3      	b.n	800ef5c <__ieee754_atan2f+0x48>
 800eff4:	4b09      	ldr	r3, [pc, #36]	; (800f01c <__ieee754_atan2f+0x108>)
 800eff6:	e7b1      	b.n	800ef5c <__ieee754_atan2f+0x48>
 800eff8:	2300      	movs	r3, #0
 800effa:	e7af      	b.n	800ef5c <__ieee754_atan2f+0x48>
 800effc:	4b06      	ldr	r3, [pc, #24]	; (800f018 <__ieee754_atan2f+0x104>)
 800effe:	e7ad      	b.n	800ef5c <__ieee754_atan2f+0x48>
 800f000:	c0490fdb 	.word	0xc0490fdb
 800f004:	bfc90fdb 	.word	0xbfc90fdb
 800f008:	08010d48 	.word	0x08010d48
 800f00c:	08010d54 	.word	0x08010d54
 800f010:	33bbbd2e 	.word	0x33bbbd2e
 800f014:	40490fdb 	.word	0x40490fdb
 800f018:	3fc90fdb 	.word	0x3fc90fdb
 800f01c:	3f490fdb 	.word	0x3f490fdb

0800f020 <__ieee754_rem_pio2f>:
 800f020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f024:	4aa0      	ldr	r2, [pc, #640]	; (800f2a8 <__ieee754_rem_pio2f+0x288>)
 800f026:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800f02a:	4296      	cmp	r6, r2
 800f02c:	460c      	mov	r4, r1
 800f02e:	4682      	mov	sl, r0
 800f030:	b087      	sub	sp, #28
 800f032:	dc04      	bgt.n	800f03e <__ieee754_rem_pio2f+0x1e>
 800f034:	2300      	movs	r3, #0
 800f036:	6008      	str	r0, [r1, #0]
 800f038:	604b      	str	r3, [r1, #4]
 800f03a:	2500      	movs	r5, #0
 800f03c:	e01a      	b.n	800f074 <__ieee754_rem_pio2f+0x54>
 800f03e:	4a9b      	ldr	r2, [pc, #620]	; (800f2ac <__ieee754_rem_pio2f+0x28c>)
 800f040:	4296      	cmp	r6, r2
 800f042:	dc4b      	bgt.n	800f0dc <__ieee754_rem_pio2f+0xbc>
 800f044:	2800      	cmp	r0, #0
 800f046:	499a      	ldr	r1, [pc, #616]	; (800f2b0 <__ieee754_rem_pio2f+0x290>)
 800f048:	4f9a      	ldr	r7, [pc, #616]	; (800f2b4 <__ieee754_rem_pio2f+0x294>)
 800f04a:	f026 060f 	bic.w	r6, r6, #15
 800f04e:	dd23      	ble.n	800f098 <__ieee754_rem_pio2f+0x78>
 800f050:	f7f1 fd66 	bl	8000b20 <__aeabi_fsub>
 800f054:	42be      	cmp	r6, r7
 800f056:	4605      	mov	r5, r0
 800f058:	d010      	beq.n	800f07c <__ieee754_rem_pio2f+0x5c>
 800f05a:	4997      	ldr	r1, [pc, #604]	; (800f2b8 <__ieee754_rem_pio2f+0x298>)
 800f05c:	f7f1 fd60 	bl	8000b20 <__aeabi_fsub>
 800f060:	4601      	mov	r1, r0
 800f062:	6020      	str	r0, [r4, #0]
 800f064:	4628      	mov	r0, r5
 800f066:	f7f1 fd5b 	bl	8000b20 <__aeabi_fsub>
 800f06a:	4993      	ldr	r1, [pc, #588]	; (800f2b8 <__ieee754_rem_pio2f+0x298>)
 800f06c:	f7f1 fd58 	bl	8000b20 <__aeabi_fsub>
 800f070:	2501      	movs	r5, #1
 800f072:	6060      	str	r0, [r4, #4]
 800f074:	4628      	mov	r0, r5
 800f076:	b007      	add	sp, #28
 800f078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f07c:	498f      	ldr	r1, [pc, #572]	; (800f2bc <__ieee754_rem_pio2f+0x29c>)
 800f07e:	f7f1 fd4f 	bl	8000b20 <__aeabi_fsub>
 800f082:	498f      	ldr	r1, [pc, #572]	; (800f2c0 <__ieee754_rem_pio2f+0x2a0>)
 800f084:	4605      	mov	r5, r0
 800f086:	f7f1 fd4b 	bl	8000b20 <__aeabi_fsub>
 800f08a:	4601      	mov	r1, r0
 800f08c:	6020      	str	r0, [r4, #0]
 800f08e:	4628      	mov	r0, r5
 800f090:	f7f1 fd46 	bl	8000b20 <__aeabi_fsub>
 800f094:	498a      	ldr	r1, [pc, #552]	; (800f2c0 <__ieee754_rem_pio2f+0x2a0>)
 800f096:	e7e9      	b.n	800f06c <__ieee754_rem_pio2f+0x4c>
 800f098:	f7f1 fd44 	bl	8000b24 <__addsf3>
 800f09c:	42be      	cmp	r6, r7
 800f09e:	4605      	mov	r5, r0
 800f0a0:	d00e      	beq.n	800f0c0 <__ieee754_rem_pio2f+0xa0>
 800f0a2:	4985      	ldr	r1, [pc, #532]	; (800f2b8 <__ieee754_rem_pio2f+0x298>)
 800f0a4:	f7f1 fd3e 	bl	8000b24 <__addsf3>
 800f0a8:	4601      	mov	r1, r0
 800f0aa:	6020      	str	r0, [r4, #0]
 800f0ac:	4628      	mov	r0, r5
 800f0ae:	f7f1 fd37 	bl	8000b20 <__aeabi_fsub>
 800f0b2:	4981      	ldr	r1, [pc, #516]	; (800f2b8 <__ieee754_rem_pio2f+0x298>)
 800f0b4:	f7f1 fd36 	bl	8000b24 <__addsf3>
 800f0b8:	f04f 35ff 	mov.w	r5, #4294967295
 800f0bc:	6060      	str	r0, [r4, #4]
 800f0be:	e7d9      	b.n	800f074 <__ieee754_rem_pio2f+0x54>
 800f0c0:	497e      	ldr	r1, [pc, #504]	; (800f2bc <__ieee754_rem_pio2f+0x29c>)
 800f0c2:	f7f1 fd2f 	bl	8000b24 <__addsf3>
 800f0c6:	497e      	ldr	r1, [pc, #504]	; (800f2c0 <__ieee754_rem_pio2f+0x2a0>)
 800f0c8:	4605      	mov	r5, r0
 800f0ca:	f7f1 fd2b 	bl	8000b24 <__addsf3>
 800f0ce:	4601      	mov	r1, r0
 800f0d0:	6020      	str	r0, [r4, #0]
 800f0d2:	4628      	mov	r0, r5
 800f0d4:	f7f1 fd24 	bl	8000b20 <__aeabi_fsub>
 800f0d8:	4979      	ldr	r1, [pc, #484]	; (800f2c0 <__ieee754_rem_pio2f+0x2a0>)
 800f0da:	e7eb      	b.n	800f0b4 <__ieee754_rem_pio2f+0x94>
 800f0dc:	4a79      	ldr	r2, [pc, #484]	; (800f2c4 <__ieee754_rem_pio2f+0x2a4>)
 800f0de:	4296      	cmp	r6, r2
 800f0e0:	f300 8091 	bgt.w	800f206 <__ieee754_rem_pio2f+0x1e6>
 800f0e4:	f7fe feb2 	bl	800de4c <fabsf>
 800f0e8:	4977      	ldr	r1, [pc, #476]	; (800f2c8 <__ieee754_rem_pio2f+0x2a8>)
 800f0ea:	4607      	mov	r7, r0
 800f0ec:	f7f1 fe22 	bl	8000d34 <__aeabi_fmul>
 800f0f0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f0f4:	f7f1 fd16 	bl	8000b24 <__addsf3>
 800f0f8:	f7f1 fff8 	bl	80010ec <__aeabi_f2iz>
 800f0fc:	4605      	mov	r5, r0
 800f0fe:	f7f1 fdc5 	bl	8000c8c <__aeabi_i2f>
 800f102:	496b      	ldr	r1, [pc, #428]	; (800f2b0 <__ieee754_rem_pio2f+0x290>)
 800f104:	4681      	mov	r9, r0
 800f106:	f7f1 fe15 	bl	8000d34 <__aeabi_fmul>
 800f10a:	4601      	mov	r1, r0
 800f10c:	4638      	mov	r0, r7
 800f10e:	f7f1 fd07 	bl	8000b20 <__aeabi_fsub>
 800f112:	4969      	ldr	r1, [pc, #420]	; (800f2b8 <__ieee754_rem_pio2f+0x298>)
 800f114:	4680      	mov	r8, r0
 800f116:	4648      	mov	r0, r9
 800f118:	f7f1 fe0c 	bl	8000d34 <__aeabi_fmul>
 800f11c:	2d1f      	cmp	r5, #31
 800f11e:	4607      	mov	r7, r0
 800f120:	dc0c      	bgt.n	800f13c <__ieee754_rem_pio2f+0x11c>
 800f122:	4a6a      	ldr	r2, [pc, #424]	; (800f2cc <__ieee754_rem_pio2f+0x2ac>)
 800f124:	1e69      	subs	r1, r5, #1
 800f126:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f12a:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800f12e:	4293      	cmp	r3, r2
 800f130:	d004      	beq.n	800f13c <__ieee754_rem_pio2f+0x11c>
 800f132:	4639      	mov	r1, r7
 800f134:	4640      	mov	r0, r8
 800f136:	f7f1 fcf3 	bl	8000b20 <__aeabi_fsub>
 800f13a:	e00b      	b.n	800f154 <__ieee754_rem_pio2f+0x134>
 800f13c:	4639      	mov	r1, r7
 800f13e:	4640      	mov	r0, r8
 800f140:	f7f1 fcee 	bl	8000b20 <__aeabi_fsub>
 800f144:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f148:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800f14c:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800f150:	2e08      	cmp	r6, #8
 800f152:	dc01      	bgt.n	800f158 <__ieee754_rem_pio2f+0x138>
 800f154:	6020      	str	r0, [r4, #0]
 800f156:	e026      	b.n	800f1a6 <__ieee754_rem_pio2f+0x186>
 800f158:	4958      	ldr	r1, [pc, #352]	; (800f2bc <__ieee754_rem_pio2f+0x29c>)
 800f15a:	4648      	mov	r0, r9
 800f15c:	f7f1 fdea 	bl	8000d34 <__aeabi_fmul>
 800f160:	4607      	mov	r7, r0
 800f162:	4601      	mov	r1, r0
 800f164:	4640      	mov	r0, r8
 800f166:	f7f1 fcdb 	bl	8000b20 <__aeabi_fsub>
 800f16a:	4601      	mov	r1, r0
 800f16c:	4606      	mov	r6, r0
 800f16e:	4640      	mov	r0, r8
 800f170:	f7f1 fcd6 	bl	8000b20 <__aeabi_fsub>
 800f174:	4639      	mov	r1, r7
 800f176:	f7f1 fcd3 	bl	8000b20 <__aeabi_fsub>
 800f17a:	4607      	mov	r7, r0
 800f17c:	4950      	ldr	r1, [pc, #320]	; (800f2c0 <__ieee754_rem_pio2f+0x2a0>)
 800f17e:	4648      	mov	r0, r9
 800f180:	f7f1 fdd8 	bl	8000d34 <__aeabi_fmul>
 800f184:	4639      	mov	r1, r7
 800f186:	f7f1 fccb 	bl	8000b20 <__aeabi_fsub>
 800f18a:	4601      	mov	r1, r0
 800f18c:	4607      	mov	r7, r0
 800f18e:	4630      	mov	r0, r6
 800f190:	f7f1 fcc6 	bl	8000b20 <__aeabi_fsub>
 800f194:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f198:	ebab 0b03 	sub.w	fp, fp, r3
 800f19c:	f1bb 0f19 	cmp.w	fp, #25
 800f1a0:	dc16      	bgt.n	800f1d0 <__ieee754_rem_pio2f+0x1b0>
 800f1a2:	46b0      	mov	r8, r6
 800f1a4:	6020      	str	r0, [r4, #0]
 800f1a6:	6826      	ldr	r6, [r4, #0]
 800f1a8:	4640      	mov	r0, r8
 800f1aa:	4631      	mov	r1, r6
 800f1ac:	f7f1 fcb8 	bl	8000b20 <__aeabi_fsub>
 800f1b0:	4639      	mov	r1, r7
 800f1b2:	f7f1 fcb5 	bl	8000b20 <__aeabi_fsub>
 800f1b6:	f1ba 0f00 	cmp.w	sl, #0
 800f1ba:	6060      	str	r0, [r4, #4]
 800f1bc:	f6bf af5a 	bge.w	800f074 <__ieee754_rem_pio2f+0x54>
 800f1c0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800f1c4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f1c8:	6026      	str	r6, [r4, #0]
 800f1ca:	6060      	str	r0, [r4, #4]
 800f1cc:	426d      	negs	r5, r5
 800f1ce:	e751      	b.n	800f074 <__ieee754_rem_pio2f+0x54>
 800f1d0:	493f      	ldr	r1, [pc, #252]	; (800f2d0 <__ieee754_rem_pio2f+0x2b0>)
 800f1d2:	4648      	mov	r0, r9
 800f1d4:	f7f1 fdae 	bl	8000d34 <__aeabi_fmul>
 800f1d8:	4607      	mov	r7, r0
 800f1da:	4601      	mov	r1, r0
 800f1dc:	4630      	mov	r0, r6
 800f1de:	f7f1 fc9f 	bl	8000b20 <__aeabi_fsub>
 800f1e2:	4601      	mov	r1, r0
 800f1e4:	4680      	mov	r8, r0
 800f1e6:	4630      	mov	r0, r6
 800f1e8:	f7f1 fc9a 	bl	8000b20 <__aeabi_fsub>
 800f1ec:	4639      	mov	r1, r7
 800f1ee:	f7f1 fc97 	bl	8000b20 <__aeabi_fsub>
 800f1f2:	4606      	mov	r6, r0
 800f1f4:	4937      	ldr	r1, [pc, #220]	; (800f2d4 <__ieee754_rem_pio2f+0x2b4>)
 800f1f6:	4648      	mov	r0, r9
 800f1f8:	f7f1 fd9c 	bl	8000d34 <__aeabi_fmul>
 800f1fc:	4631      	mov	r1, r6
 800f1fe:	f7f1 fc8f 	bl	8000b20 <__aeabi_fsub>
 800f202:	4607      	mov	r7, r0
 800f204:	e795      	b.n	800f132 <__ieee754_rem_pio2f+0x112>
 800f206:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800f20a:	db05      	blt.n	800f218 <__ieee754_rem_pio2f+0x1f8>
 800f20c:	4601      	mov	r1, r0
 800f20e:	f7f1 fc87 	bl	8000b20 <__aeabi_fsub>
 800f212:	6060      	str	r0, [r4, #4]
 800f214:	6020      	str	r0, [r4, #0]
 800f216:	e710      	b.n	800f03a <__ieee754_rem_pio2f+0x1a>
 800f218:	15f7      	asrs	r7, r6, #23
 800f21a:	3f86      	subs	r7, #134	; 0x86
 800f21c:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800f220:	4630      	mov	r0, r6
 800f222:	f7f1 ff63 	bl	80010ec <__aeabi_f2iz>
 800f226:	f7f1 fd31 	bl	8000c8c <__aeabi_i2f>
 800f22a:	4601      	mov	r1, r0
 800f22c:	9003      	str	r0, [sp, #12]
 800f22e:	4630      	mov	r0, r6
 800f230:	f7f1 fc76 	bl	8000b20 <__aeabi_fsub>
 800f234:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800f238:	f7f1 fd7c 	bl	8000d34 <__aeabi_fmul>
 800f23c:	4606      	mov	r6, r0
 800f23e:	f7f1 ff55 	bl	80010ec <__aeabi_f2iz>
 800f242:	f7f1 fd23 	bl	8000c8c <__aeabi_i2f>
 800f246:	4601      	mov	r1, r0
 800f248:	9004      	str	r0, [sp, #16]
 800f24a:	4605      	mov	r5, r0
 800f24c:	4630      	mov	r0, r6
 800f24e:	f7f1 fc67 	bl	8000b20 <__aeabi_fsub>
 800f252:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800f256:	f7f1 fd6d 	bl	8000d34 <__aeabi_fmul>
 800f25a:	2100      	movs	r1, #0
 800f25c:	9005      	str	r0, [sp, #20]
 800f25e:	f7f1 fefd 	bl	800105c <__aeabi_fcmpeq>
 800f262:	b1f0      	cbz	r0, 800f2a2 <__ieee754_rem_pio2f+0x282>
 800f264:	2100      	movs	r1, #0
 800f266:	4628      	mov	r0, r5
 800f268:	f7f1 fef8 	bl	800105c <__aeabi_fcmpeq>
 800f26c:	2800      	cmp	r0, #0
 800f26e:	bf14      	ite	ne
 800f270:	2301      	movne	r3, #1
 800f272:	2302      	moveq	r3, #2
 800f274:	4a18      	ldr	r2, [pc, #96]	; (800f2d8 <__ieee754_rem_pio2f+0x2b8>)
 800f276:	4621      	mov	r1, r4
 800f278:	9201      	str	r2, [sp, #4]
 800f27a:	2202      	movs	r2, #2
 800f27c:	a803      	add	r0, sp, #12
 800f27e:	9200      	str	r2, [sp, #0]
 800f280:	463a      	mov	r2, r7
 800f282:	f000 f8fd 	bl	800f480 <__kernel_rem_pio2f>
 800f286:	f1ba 0f00 	cmp.w	sl, #0
 800f28a:	4605      	mov	r5, r0
 800f28c:	f6bf aef2 	bge.w	800f074 <__ieee754_rem_pio2f+0x54>
 800f290:	6823      	ldr	r3, [r4, #0]
 800f292:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f296:	6023      	str	r3, [r4, #0]
 800f298:	6863      	ldr	r3, [r4, #4]
 800f29a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f29e:	6063      	str	r3, [r4, #4]
 800f2a0:	e794      	b.n	800f1cc <__ieee754_rem_pio2f+0x1ac>
 800f2a2:	2303      	movs	r3, #3
 800f2a4:	e7e6      	b.n	800f274 <__ieee754_rem_pio2f+0x254>
 800f2a6:	bf00      	nop
 800f2a8:	3f490fd8 	.word	0x3f490fd8
 800f2ac:	4016cbe3 	.word	0x4016cbe3
 800f2b0:	3fc90f80 	.word	0x3fc90f80
 800f2b4:	3fc90fd0 	.word	0x3fc90fd0
 800f2b8:	37354443 	.word	0x37354443
 800f2bc:	37354400 	.word	0x37354400
 800f2c0:	2e85a308 	.word	0x2e85a308
 800f2c4:	43490f80 	.word	0x43490f80
 800f2c8:	3f22f984 	.word	0x3f22f984
 800f2cc:	08010d60 	.word	0x08010d60
 800f2d0:	2e85a300 	.word	0x2e85a300
 800f2d4:	248d3132 	.word	0x248d3132
 800f2d8:	08010de0 	.word	0x08010de0

0800f2dc <__ieee754_sqrtf>:
 800f2dc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800f2e0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f2e4:	b570      	push	{r4, r5, r6, lr}
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	4604      	mov	r4, r0
 800f2ea:	d309      	bcc.n	800f300 <__ieee754_sqrtf+0x24>
 800f2ec:	4601      	mov	r1, r0
 800f2ee:	f7f1 fd21 	bl	8000d34 <__aeabi_fmul>
 800f2f2:	4601      	mov	r1, r0
 800f2f4:	4620      	mov	r0, r4
 800f2f6:	f7f1 fc15 	bl	8000b24 <__addsf3>
 800f2fa:	4604      	mov	r4, r0
 800f2fc:	4620      	mov	r0, r4
 800f2fe:	bd70      	pop	{r4, r5, r6, pc}
 800f300:	2a00      	cmp	r2, #0
 800f302:	d0fb      	beq.n	800f2fc <__ieee754_sqrtf+0x20>
 800f304:	2800      	cmp	r0, #0
 800f306:	da06      	bge.n	800f316 <__ieee754_sqrtf+0x3a>
 800f308:	4601      	mov	r1, r0
 800f30a:	f7f1 fc09 	bl	8000b20 <__aeabi_fsub>
 800f30e:	4601      	mov	r1, r0
 800f310:	f7f1 fdc4 	bl	8000e9c <__aeabi_fdiv>
 800f314:	e7f1      	b.n	800f2fa <__ieee754_sqrtf+0x1e>
 800f316:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800f31a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800f31e:	d029      	beq.n	800f374 <__ieee754_sqrtf+0x98>
 800f320:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800f324:	07cb      	lsls	r3, r1, #31
 800f326:	f04f 0300 	mov.w	r3, #0
 800f32a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800f32e:	f04f 0419 	mov.w	r4, #25
 800f332:	461e      	mov	r6, r3
 800f334:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800f338:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800f33c:	bf58      	it	pl
 800f33e:	0052      	lslpl	r2, r2, #1
 800f340:	1040      	asrs	r0, r0, #1
 800f342:	0052      	lsls	r2, r2, #1
 800f344:	1875      	adds	r5, r6, r1
 800f346:	4295      	cmp	r5, r2
 800f348:	bfde      	ittt	le
 800f34a:	186e      	addle	r6, r5, r1
 800f34c:	1b52      	suble	r2, r2, r5
 800f34e:	185b      	addle	r3, r3, r1
 800f350:	3c01      	subs	r4, #1
 800f352:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f356:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f35a:	d1f3      	bne.n	800f344 <__ieee754_sqrtf+0x68>
 800f35c:	b112      	cbz	r2, 800f364 <__ieee754_sqrtf+0x88>
 800f35e:	3301      	adds	r3, #1
 800f360:	f023 0301 	bic.w	r3, r3, #1
 800f364:	105c      	asrs	r4, r3, #1
 800f366:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800f36a:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800f36e:	e7c5      	b.n	800f2fc <__ieee754_sqrtf+0x20>
 800f370:	005b      	lsls	r3, r3, #1
 800f372:	3201      	adds	r2, #1
 800f374:	0218      	lsls	r0, r3, #8
 800f376:	d5fb      	bpl.n	800f370 <__ieee754_sqrtf+0x94>
 800f378:	3a01      	subs	r2, #1
 800f37a:	1a89      	subs	r1, r1, r2
 800f37c:	e7d0      	b.n	800f320 <__ieee754_sqrtf+0x44>
	...

0800f380 <__kernel_cosf>:
 800f380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f384:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800f388:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800f38c:	4606      	mov	r6, r0
 800f38e:	4688      	mov	r8, r1
 800f390:	da03      	bge.n	800f39a <__kernel_cosf+0x1a>
 800f392:	f7f1 feab 	bl	80010ec <__aeabi_f2iz>
 800f396:	2800      	cmp	r0, #0
 800f398:	d05c      	beq.n	800f454 <__kernel_cosf+0xd4>
 800f39a:	4631      	mov	r1, r6
 800f39c:	4630      	mov	r0, r6
 800f39e:	f7f1 fcc9 	bl	8000d34 <__aeabi_fmul>
 800f3a2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f3a6:	4605      	mov	r5, r0
 800f3a8:	f7f1 fcc4 	bl	8000d34 <__aeabi_fmul>
 800f3ac:	492b      	ldr	r1, [pc, #172]	; (800f45c <__kernel_cosf+0xdc>)
 800f3ae:	4607      	mov	r7, r0
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	f7f1 fcbf 	bl	8000d34 <__aeabi_fmul>
 800f3b6:	492a      	ldr	r1, [pc, #168]	; (800f460 <__kernel_cosf+0xe0>)
 800f3b8:	f7f1 fbb4 	bl	8000b24 <__addsf3>
 800f3bc:	4629      	mov	r1, r5
 800f3be:	f7f1 fcb9 	bl	8000d34 <__aeabi_fmul>
 800f3c2:	4928      	ldr	r1, [pc, #160]	; (800f464 <__kernel_cosf+0xe4>)
 800f3c4:	f7f1 fbac 	bl	8000b20 <__aeabi_fsub>
 800f3c8:	4629      	mov	r1, r5
 800f3ca:	f7f1 fcb3 	bl	8000d34 <__aeabi_fmul>
 800f3ce:	4926      	ldr	r1, [pc, #152]	; (800f468 <__kernel_cosf+0xe8>)
 800f3d0:	f7f1 fba8 	bl	8000b24 <__addsf3>
 800f3d4:	4629      	mov	r1, r5
 800f3d6:	f7f1 fcad 	bl	8000d34 <__aeabi_fmul>
 800f3da:	4924      	ldr	r1, [pc, #144]	; (800f46c <__kernel_cosf+0xec>)
 800f3dc:	f7f1 fba0 	bl	8000b20 <__aeabi_fsub>
 800f3e0:	4629      	mov	r1, r5
 800f3e2:	f7f1 fca7 	bl	8000d34 <__aeabi_fmul>
 800f3e6:	4922      	ldr	r1, [pc, #136]	; (800f470 <__kernel_cosf+0xf0>)
 800f3e8:	f7f1 fb9c 	bl	8000b24 <__addsf3>
 800f3ec:	4629      	mov	r1, r5
 800f3ee:	f7f1 fca1 	bl	8000d34 <__aeabi_fmul>
 800f3f2:	4629      	mov	r1, r5
 800f3f4:	f7f1 fc9e 	bl	8000d34 <__aeabi_fmul>
 800f3f8:	4641      	mov	r1, r8
 800f3fa:	4605      	mov	r5, r0
 800f3fc:	4630      	mov	r0, r6
 800f3fe:	f7f1 fc99 	bl	8000d34 <__aeabi_fmul>
 800f402:	4601      	mov	r1, r0
 800f404:	4628      	mov	r0, r5
 800f406:	f7f1 fb8b 	bl	8000b20 <__aeabi_fsub>
 800f40a:	4b1a      	ldr	r3, [pc, #104]	; (800f474 <__kernel_cosf+0xf4>)
 800f40c:	4605      	mov	r5, r0
 800f40e:	429c      	cmp	r4, r3
 800f410:	dc0a      	bgt.n	800f428 <__kernel_cosf+0xa8>
 800f412:	4601      	mov	r1, r0
 800f414:	4638      	mov	r0, r7
 800f416:	f7f1 fb83 	bl	8000b20 <__aeabi_fsub>
 800f41a:	4601      	mov	r1, r0
 800f41c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f420:	f7f1 fb7e 	bl	8000b20 <__aeabi_fsub>
 800f424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f428:	4b13      	ldr	r3, [pc, #76]	; (800f478 <__kernel_cosf+0xf8>)
 800f42a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f42e:	429c      	cmp	r4, r3
 800f430:	bfcc      	ite	gt
 800f432:	4c12      	ldrgt	r4, [pc, #72]	; (800f47c <__kernel_cosf+0xfc>)
 800f434:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800f438:	4621      	mov	r1, r4
 800f43a:	f7f1 fb71 	bl	8000b20 <__aeabi_fsub>
 800f43e:	4621      	mov	r1, r4
 800f440:	4606      	mov	r6, r0
 800f442:	4638      	mov	r0, r7
 800f444:	f7f1 fb6c 	bl	8000b20 <__aeabi_fsub>
 800f448:	4629      	mov	r1, r5
 800f44a:	f7f1 fb69 	bl	8000b20 <__aeabi_fsub>
 800f44e:	4601      	mov	r1, r0
 800f450:	4630      	mov	r0, r6
 800f452:	e7e5      	b.n	800f420 <__kernel_cosf+0xa0>
 800f454:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f458:	e7e4      	b.n	800f424 <__kernel_cosf+0xa4>
 800f45a:	bf00      	nop
 800f45c:	ad47d74e 	.word	0xad47d74e
 800f460:	310f74f6 	.word	0x310f74f6
 800f464:	3493f27c 	.word	0x3493f27c
 800f468:	37d00d01 	.word	0x37d00d01
 800f46c:	3ab60b61 	.word	0x3ab60b61
 800f470:	3d2aaaab 	.word	0x3d2aaaab
 800f474:	3e999999 	.word	0x3e999999
 800f478:	3f480000 	.word	0x3f480000
 800f47c:	3e900000 	.word	0x3e900000

0800f480 <__kernel_rem_pio2f>:
 800f480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f484:	b0db      	sub	sp, #364	; 0x16c
 800f486:	9202      	str	r2, [sp, #8]
 800f488:	9304      	str	r3, [sp, #16]
 800f48a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f48c:	4bc5      	ldr	r3, [pc, #788]	; (800f7a4 <__kernel_rem_pio2f+0x324>)
 800f48e:	9005      	str	r0, [sp, #20]
 800f490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f494:	9100      	str	r1, [sp, #0]
 800f496:	9301      	str	r3, [sp, #4]
 800f498:	9b04      	ldr	r3, [sp, #16]
 800f49a:	3b01      	subs	r3, #1
 800f49c:	9303      	str	r3, [sp, #12]
 800f49e:	9b02      	ldr	r3, [sp, #8]
 800f4a0:	1d1a      	adds	r2, r3, #4
 800f4a2:	f2c0 809b 	blt.w	800f5dc <__kernel_rem_pio2f+0x15c>
 800f4a6:	1edc      	subs	r4, r3, #3
 800f4a8:	bf48      	it	mi
 800f4aa:	1d1c      	addmi	r4, r3, #4
 800f4ac:	10e4      	asrs	r4, r4, #3
 800f4ae:	2500      	movs	r5, #0
 800f4b0:	f04f 0a00 	mov.w	sl, #0
 800f4b4:	1c67      	adds	r7, r4, #1
 800f4b6:	00fb      	lsls	r3, r7, #3
 800f4b8:	9306      	str	r3, [sp, #24]
 800f4ba:	9b02      	ldr	r3, [sp, #8]
 800f4bc:	9a03      	ldr	r2, [sp, #12]
 800f4be:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800f4c2:	9b01      	ldr	r3, [sp, #4]
 800f4c4:	1aa6      	subs	r6, r4, r2
 800f4c6:	eb03 0802 	add.w	r8, r3, r2
 800f4ca:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800f4cc:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800f4d0:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800f4d4:	4545      	cmp	r5, r8
 800f4d6:	f340 8083 	ble.w	800f5e0 <__kernel_rem_pio2f+0x160>
 800f4da:	f04f 0800 	mov.w	r8, #0
 800f4de:	f04f 0b00 	mov.w	fp, #0
 800f4e2:	9b04      	ldr	r3, [sp, #16]
 800f4e4:	aa1e      	add	r2, sp, #120	; 0x78
 800f4e6:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800f4ea:	ab46      	add	r3, sp, #280	; 0x118
 800f4ec:	9a01      	ldr	r2, [sp, #4]
 800f4ee:	4590      	cmp	r8, r2
 800f4f0:	f340 809c 	ble.w	800f62c <__kernel_rem_pio2f+0x1ac>
 800f4f4:	4613      	mov	r3, r2
 800f4f6:	aa0a      	add	r2, sp, #40	; 0x28
 800f4f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f4fc:	9308      	str	r3, [sp, #32]
 800f4fe:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800f500:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f504:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f508:	9307      	str	r3, [sp, #28]
 800f50a:	ad0a      	add	r5, sp, #40	; 0x28
 800f50c:	462e      	mov	r6, r5
 800f50e:	46c3      	mov	fp, r8
 800f510:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800f514:	ab5a      	add	r3, sp, #360	; 0x168
 800f516:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800f51a:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800f51e:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800f522:	f1bb 0f00 	cmp.w	fp, #0
 800f526:	f300 8086 	bgt.w	800f636 <__kernel_rem_pio2f+0x1b6>
 800f52a:	4639      	mov	r1, r7
 800f52c:	4620      	mov	r0, r4
 800f52e:	f000 fc3b 	bl	800fda8 <scalbnf>
 800f532:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800f536:	4604      	mov	r4, r0
 800f538:	f7f1 fbfc 	bl	8000d34 <__aeabi_fmul>
 800f53c:	f000 fbee 	bl	800fd1c <floorf>
 800f540:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800f544:	f7f1 fbf6 	bl	8000d34 <__aeabi_fmul>
 800f548:	4601      	mov	r1, r0
 800f54a:	4620      	mov	r0, r4
 800f54c:	f7f1 fae8 	bl	8000b20 <__aeabi_fsub>
 800f550:	4604      	mov	r4, r0
 800f552:	f7f1 fdcb 	bl	80010ec <__aeabi_f2iz>
 800f556:	4606      	mov	r6, r0
 800f558:	f7f1 fb98 	bl	8000c8c <__aeabi_i2f>
 800f55c:	4601      	mov	r1, r0
 800f55e:	4620      	mov	r0, r4
 800f560:	f7f1 fade 	bl	8000b20 <__aeabi_fsub>
 800f564:	2f00      	cmp	r7, #0
 800f566:	4681      	mov	r9, r0
 800f568:	f340 8084 	ble.w	800f674 <__kernel_rem_pio2f+0x1f4>
 800f56c:	f108 32ff 	add.w	r2, r8, #4294967295
 800f570:	ab0a      	add	r3, sp, #40	; 0x28
 800f572:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800f576:	f1c7 0108 	rsb	r1, r7, #8
 800f57a:	fa44 f301 	asr.w	r3, r4, r1
 800f57e:	441e      	add	r6, r3
 800f580:	408b      	lsls	r3, r1
 800f582:	1ae4      	subs	r4, r4, r3
 800f584:	f1c7 0007 	rsb	r0, r7, #7
 800f588:	ab0a      	add	r3, sp, #40	; 0x28
 800f58a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f58e:	4104      	asrs	r4, r0
 800f590:	2c00      	cmp	r4, #0
 800f592:	dd7e      	ble.n	800f692 <__kernel_rem_pio2f+0x212>
 800f594:	2200      	movs	r2, #0
 800f596:	4692      	mov	sl, r2
 800f598:	3601      	adds	r6, #1
 800f59a:	4590      	cmp	r8, r2
 800f59c:	f300 80b0 	bgt.w	800f700 <__kernel_rem_pio2f+0x280>
 800f5a0:	2f00      	cmp	r7, #0
 800f5a2:	dd05      	ble.n	800f5b0 <__kernel_rem_pio2f+0x130>
 800f5a4:	2f01      	cmp	r7, #1
 800f5a6:	f000 80bd 	beq.w	800f724 <__kernel_rem_pio2f+0x2a4>
 800f5aa:	2f02      	cmp	r7, #2
 800f5ac:	f000 80c5 	beq.w	800f73a <__kernel_rem_pio2f+0x2ba>
 800f5b0:	2c02      	cmp	r4, #2
 800f5b2:	d16e      	bne.n	800f692 <__kernel_rem_pio2f+0x212>
 800f5b4:	4649      	mov	r1, r9
 800f5b6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f5ba:	f7f1 fab1 	bl	8000b20 <__aeabi_fsub>
 800f5be:	4681      	mov	r9, r0
 800f5c0:	f1ba 0f00 	cmp.w	sl, #0
 800f5c4:	d065      	beq.n	800f692 <__kernel_rem_pio2f+0x212>
 800f5c6:	4639      	mov	r1, r7
 800f5c8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f5cc:	f000 fbec 	bl	800fda8 <scalbnf>
 800f5d0:	4601      	mov	r1, r0
 800f5d2:	4648      	mov	r0, r9
 800f5d4:	f7f1 faa4 	bl	8000b20 <__aeabi_fsub>
 800f5d8:	4681      	mov	r9, r0
 800f5da:	e05a      	b.n	800f692 <__kernel_rem_pio2f+0x212>
 800f5dc:	2400      	movs	r4, #0
 800f5de:	e766      	b.n	800f4ae <__kernel_rem_pio2f+0x2e>
 800f5e0:	42ee      	cmn	r6, r5
 800f5e2:	d407      	bmi.n	800f5f4 <__kernel_rem_pio2f+0x174>
 800f5e4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f5e8:	f7f1 fb50 	bl	8000c8c <__aeabi_i2f>
 800f5ec:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800f5f0:	3501      	adds	r5, #1
 800f5f2:	e76f      	b.n	800f4d4 <__kernel_rem_pio2f+0x54>
 800f5f4:	4650      	mov	r0, sl
 800f5f6:	e7f9      	b.n	800f5ec <__kernel_rem_pio2f+0x16c>
 800f5f8:	9b05      	ldr	r3, [sp, #20]
 800f5fa:	f8da 1000 	ldr.w	r1, [sl]
 800f5fe:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800f602:	f7f1 fb97 	bl	8000d34 <__aeabi_fmul>
 800f606:	4601      	mov	r1, r0
 800f608:	4630      	mov	r0, r6
 800f60a:	f7f1 fa8b 	bl	8000b24 <__addsf3>
 800f60e:	4606      	mov	r6, r0
 800f610:	f109 0901 	add.w	r9, r9, #1
 800f614:	ab46      	add	r3, sp, #280	; 0x118
 800f616:	9a03      	ldr	r2, [sp, #12]
 800f618:	f1aa 0a04 	sub.w	sl, sl, #4
 800f61c:	4591      	cmp	r9, r2
 800f61e:	ddeb      	ble.n	800f5f8 <__kernel_rem_pio2f+0x178>
 800f620:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800f624:	3504      	adds	r5, #4
 800f626:	f108 0801 	add.w	r8, r8, #1
 800f62a:	e75f      	b.n	800f4ec <__kernel_rem_pio2f+0x6c>
 800f62c:	46aa      	mov	sl, r5
 800f62e:	465e      	mov	r6, fp
 800f630:	f04f 0900 	mov.w	r9, #0
 800f634:	e7ef      	b.n	800f616 <__kernel_rem_pio2f+0x196>
 800f636:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800f63a:	4620      	mov	r0, r4
 800f63c:	f7f1 fb7a 	bl	8000d34 <__aeabi_fmul>
 800f640:	f7f1 fd54 	bl	80010ec <__aeabi_f2iz>
 800f644:	f7f1 fb22 	bl	8000c8c <__aeabi_i2f>
 800f648:	4649      	mov	r1, r9
 800f64a:	9009      	str	r0, [sp, #36]	; 0x24
 800f64c:	f7f1 fb72 	bl	8000d34 <__aeabi_fmul>
 800f650:	4601      	mov	r1, r0
 800f652:	4620      	mov	r0, r4
 800f654:	f7f1 fa64 	bl	8000b20 <__aeabi_fsub>
 800f658:	f7f1 fd48 	bl	80010ec <__aeabi_f2iz>
 800f65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f65e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f662:	f846 0b04 	str.w	r0, [r6], #4
 800f666:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7f1 fa5a 	bl	8000b24 <__addsf3>
 800f670:	4604      	mov	r4, r0
 800f672:	e756      	b.n	800f522 <__kernel_rem_pio2f+0xa2>
 800f674:	d106      	bne.n	800f684 <__kernel_rem_pio2f+0x204>
 800f676:	f108 33ff 	add.w	r3, r8, #4294967295
 800f67a:	aa0a      	add	r2, sp, #40	; 0x28
 800f67c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f680:	1224      	asrs	r4, r4, #8
 800f682:	e785      	b.n	800f590 <__kernel_rem_pio2f+0x110>
 800f684:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f688:	f7f1 fd06 	bl	8001098 <__aeabi_fcmpge>
 800f68c:	4604      	mov	r4, r0
 800f68e:	2800      	cmp	r0, #0
 800f690:	d134      	bne.n	800f6fc <__kernel_rem_pio2f+0x27c>
 800f692:	2100      	movs	r1, #0
 800f694:	4648      	mov	r0, r9
 800f696:	f7f1 fce1 	bl	800105c <__aeabi_fcmpeq>
 800f69a:	2800      	cmp	r0, #0
 800f69c:	f000 809a 	beq.w	800f7d4 <__kernel_rem_pio2f+0x354>
 800f6a0:	f108 35ff 	add.w	r5, r8, #4294967295
 800f6a4:	462b      	mov	r3, r5
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	9901      	ldr	r1, [sp, #4]
 800f6aa:	428b      	cmp	r3, r1
 800f6ac:	da4d      	bge.n	800f74a <__kernel_rem_pio2f+0x2ca>
 800f6ae:	2a00      	cmp	r2, #0
 800f6b0:	d07c      	beq.n	800f7ac <__kernel_rem_pio2f+0x32c>
 800f6b2:	ab0a      	add	r3, sp, #40	; 0x28
 800f6b4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f6b8:	3f08      	subs	r7, #8
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	f000 8088 	beq.w	800f7d0 <__kernel_rem_pio2f+0x350>
 800f6c0:	4639      	mov	r1, r7
 800f6c2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f6c6:	f000 fb6f 	bl	800fda8 <scalbnf>
 800f6ca:	46aa      	mov	sl, r5
 800f6cc:	4681      	mov	r9, r0
 800f6ce:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800f6d2:	af46      	add	r7, sp, #280	; 0x118
 800f6d4:	f1ba 0f00 	cmp.w	sl, #0
 800f6d8:	f280 80b1 	bge.w	800f83e <__kernel_rem_pio2f+0x3be>
 800f6dc:	46a9      	mov	r9, r5
 800f6de:	f04f 0a00 	mov.w	sl, #0
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	f1b9 0f00 	cmp.w	r9, #0
 800f6e8:	f2c0 80db 	blt.w	800f8a2 <__kernel_rem_pio2f+0x422>
 800f6ec:	a946      	add	r1, sp, #280	; 0x118
 800f6ee:	4617      	mov	r7, r2
 800f6f0:	f04f 0800 	mov.w	r8, #0
 800f6f4:	4b2c      	ldr	r3, [pc, #176]	; (800f7a8 <__kernel_rem_pio2f+0x328>)
 800f6f6:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800f6fa:	e0c3      	b.n	800f884 <__kernel_rem_pio2f+0x404>
 800f6fc:	2402      	movs	r4, #2
 800f6fe:	e749      	b.n	800f594 <__kernel_rem_pio2f+0x114>
 800f700:	682b      	ldr	r3, [r5, #0]
 800f702:	f1ba 0f00 	cmp.w	sl, #0
 800f706:	d108      	bne.n	800f71a <__kernel_rem_pio2f+0x29a>
 800f708:	b11b      	cbz	r3, 800f712 <__kernel_rem_pio2f+0x292>
 800f70a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800f70e:	602b      	str	r3, [r5, #0]
 800f710:	2301      	movs	r3, #1
 800f712:	469a      	mov	sl, r3
 800f714:	3201      	adds	r2, #1
 800f716:	3504      	adds	r5, #4
 800f718:	e73f      	b.n	800f59a <__kernel_rem_pio2f+0x11a>
 800f71a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800f71e:	602b      	str	r3, [r5, #0]
 800f720:	4653      	mov	r3, sl
 800f722:	e7f6      	b.n	800f712 <__kernel_rem_pio2f+0x292>
 800f724:	f108 32ff 	add.w	r2, r8, #4294967295
 800f728:	ab0a      	add	r3, sp, #40	; 0x28
 800f72a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f72e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f732:	a90a      	add	r1, sp, #40	; 0x28
 800f734:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f738:	e73a      	b.n	800f5b0 <__kernel_rem_pio2f+0x130>
 800f73a:	f108 32ff 	add.w	r2, r8, #4294967295
 800f73e:	ab0a      	add	r3, sp, #40	; 0x28
 800f740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f748:	e7f3      	b.n	800f732 <__kernel_rem_pio2f+0x2b2>
 800f74a:	a90a      	add	r1, sp, #40	; 0x28
 800f74c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f750:	3b01      	subs	r3, #1
 800f752:	430a      	orrs	r2, r1
 800f754:	e7a8      	b.n	800f6a8 <__kernel_rem_pio2f+0x228>
 800f756:	3301      	adds	r3, #1
 800f758:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f75c:	2900      	cmp	r1, #0
 800f75e:	d0fa      	beq.n	800f756 <__kernel_rem_pio2f+0x2d6>
 800f760:	9a04      	ldr	r2, [sp, #16]
 800f762:	f108 0501 	add.w	r5, r8, #1
 800f766:	eb08 0402 	add.w	r4, r8, r2
 800f76a:	aa1e      	add	r2, sp, #120	; 0x78
 800f76c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f770:	4498      	add	r8, r3
 800f772:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800f776:	45a8      	cmp	r8, r5
 800f778:	f6ff aec7 	blt.w	800f50a <__kernel_rem_pio2f+0x8a>
 800f77c:	9b07      	ldr	r3, [sp, #28]
 800f77e:	46a3      	mov	fp, r4
 800f780:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f784:	f7f1 fa82 	bl	8000c8c <__aeabi_i2f>
 800f788:	f04f 0a00 	mov.w	sl, #0
 800f78c:	2600      	movs	r6, #0
 800f78e:	f84b 0b04 	str.w	r0, [fp], #4
 800f792:	9b03      	ldr	r3, [sp, #12]
 800f794:	459a      	cmp	sl, r3
 800f796:	dd0c      	ble.n	800f7b2 <__kernel_rem_pio2f+0x332>
 800f798:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800f79c:	465c      	mov	r4, fp
 800f79e:	3501      	adds	r5, #1
 800f7a0:	e7e9      	b.n	800f776 <__kernel_rem_pio2f+0x2f6>
 800f7a2:	bf00      	nop
 800f7a4:	08011124 	.word	0x08011124
 800f7a8:	080110f8 	.word	0x080110f8
 800f7ac:	2301      	movs	r3, #1
 800f7ae:	9a08      	ldr	r2, [sp, #32]
 800f7b0:	e7d2      	b.n	800f758 <__kernel_rem_pio2f+0x2d8>
 800f7b2:	9b05      	ldr	r3, [sp, #20]
 800f7b4:	f854 0904 	ldr.w	r0, [r4], #-4
 800f7b8:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800f7bc:	f7f1 faba 	bl	8000d34 <__aeabi_fmul>
 800f7c0:	4601      	mov	r1, r0
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	f7f1 f9ae 	bl	8000b24 <__addsf3>
 800f7c8:	f10a 0a01 	add.w	sl, sl, #1
 800f7cc:	4606      	mov	r6, r0
 800f7ce:	e7e0      	b.n	800f792 <__kernel_rem_pio2f+0x312>
 800f7d0:	3d01      	subs	r5, #1
 800f7d2:	e76e      	b.n	800f6b2 <__kernel_rem_pio2f+0x232>
 800f7d4:	9b06      	ldr	r3, [sp, #24]
 800f7d6:	9a02      	ldr	r2, [sp, #8]
 800f7d8:	4648      	mov	r0, r9
 800f7da:	1a99      	subs	r1, r3, r2
 800f7dc:	f000 fae4 	bl	800fda8 <scalbnf>
 800f7e0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800f7e4:	4605      	mov	r5, r0
 800f7e6:	f7f1 fc57 	bl	8001098 <__aeabi_fcmpge>
 800f7ea:	b300      	cbz	r0, 800f82e <__kernel_rem_pio2f+0x3ae>
 800f7ec:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800f7f0:	4628      	mov	r0, r5
 800f7f2:	f7f1 fa9f 	bl	8000d34 <__aeabi_fmul>
 800f7f6:	f7f1 fc79 	bl	80010ec <__aeabi_f2iz>
 800f7fa:	f7f1 fa47 	bl	8000c8c <__aeabi_i2f>
 800f7fe:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800f802:	4681      	mov	r9, r0
 800f804:	f7f1 fa96 	bl	8000d34 <__aeabi_fmul>
 800f808:	4601      	mov	r1, r0
 800f80a:	4628      	mov	r0, r5
 800f80c:	f7f1 f988 	bl	8000b20 <__aeabi_fsub>
 800f810:	f7f1 fc6c 	bl	80010ec <__aeabi_f2iz>
 800f814:	ab0a      	add	r3, sp, #40	; 0x28
 800f816:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f81a:	4648      	mov	r0, r9
 800f81c:	f7f1 fc66 	bl	80010ec <__aeabi_f2iz>
 800f820:	f108 0501 	add.w	r5, r8, #1
 800f824:	ab0a      	add	r3, sp, #40	; 0x28
 800f826:	3708      	adds	r7, #8
 800f828:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800f82c:	e748      	b.n	800f6c0 <__kernel_rem_pio2f+0x240>
 800f82e:	4628      	mov	r0, r5
 800f830:	f7f1 fc5c 	bl	80010ec <__aeabi_f2iz>
 800f834:	ab0a      	add	r3, sp, #40	; 0x28
 800f836:	4645      	mov	r5, r8
 800f838:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f83c:	e740      	b.n	800f6c0 <__kernel_rem_pio2f+0x240>
 800f83e:	ab0a      	add	r3, sp, #40	; 0x28
 800f840:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f844:	f7f1 fa22 	bl	8000c8c <__aeabi_i2f>
 800f848:	4649      	mov	r1, r9
 800f84a:	f7f1 fa73 	bl	8000d34 <__aeabi_fmul>
 800f84e:	4641      	mov	r1, r8
 800f850:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800f854:	4648      	mov	r0, r9
 800f856:	f7f1 fa6d 	bl	8000d34 <__aeabi_fmul>
 800f85a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f85e:	4681      	mov	r9, r0
 800f860:	e738      	b.n	800f6d4 <__kernel_rem_pio2f+0x254>
 800f862:	f853 0b04 	ldr.w	r0, [r3], #4
 800f866:	f85b 1b04 	ldr.w	r1, [fp], #4
 800f86a:	9203      	str	r2, [sp, #12]
 800f86c:	9302      	str	r3, [sp, #8]
 800f86e:	f7f1 fa61 	bl	8000d34 <__aeabi_fmul>
 800f872:	4601      	mov	r1, r0
 800f874:	4638      	mov	r0, r7
 800f876:	f7f1 f955 	bl	8000b24 <__addsf3>
 800f87a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f87e:	4607      	mov	r7, r0
 800f880:	f108 0801 	add.w	r8, r8, #1
 800f884:	9901      	ldr	r1, [sp, #4]
 800f886:	4588      	cmp	r8, r1
 800f888:	dc01      	bgt.n	800f88e <__kernel_rem_pio2f+0x40e>
 800f88a:	45c2      	cmp	sl, r8
 800f88c:	dae9      	bge.n	800f862 <__kernel_rem_pio2f+0x3e2>
 800f88e:	ab5a      	add	r3, sp, #360	; 0x168
 800f890:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800f894:	f843 7ca0 	str.w	r7, [r3, #-160]
 800f898:	f109 39ff 	add.w	r9, r9, #4294967295
 800f89c:	f10a 0a01 	add.w	sl, sl, #1
 800f8a0:	e720      	b.n	800f6e4 <__kernel_rem_pio2f+0x264>
 800f8a2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f8a4:	2b02      	cmp	r3, #2
 800f8a6:	dc07      	bgt.n	800f8b8 <__kernel_rem_pio2f+0x438>
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	dc4d      	bgt.n	800f948 <__kernel_rem_pio2f+0x4c8>
 800f8ac:	d02e      	beq.n	800f90c <__kernel_rem_pio2f+0x48c>
 800f8ae:	f006 0007 	and.w	r0, r6, #7
 800f8b2:	b05b      	add	sp, #364	; 0x16c
 800f8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8b8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f8ba:	2b03      	cmp	r3, #3
 800f8bc:	d1f7      	bne.n	800f8ae <__kernel_rem_pio2f+0x42e>
 800f8be:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800f8c2:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800f8c6:	46b8      	mov	r8, r7
 800f8c8:	46aa      	mov	sl, r5
 800f8ca:	f1ba 0f00 	cmp.w	sl, #0
 800f8ce:	dc48      	bgt.n	800f962 <__kernel_rem_pio2f+0x4e2>
 800f8d0:	46a9      	mov	r9, r5
 800f8d2:	f1b9 0f01 	cmp.w	r9, #1
 800f8d6:	dc5f      	bgt.n	800f998 <__kernel_rem_pio2f+0x518>
 800f8d8:	2000      	movs	r0, #0
 800f8da:	2d01      	cmp	r5, #1
 800f8dc:	dc75      	bgt.n	800f9ca <__kernel_rem_pio2f+0x54a>
 800f8de:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800f8e0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800f8e2:	2c00      	cmp	r4, #0
 800f8e4:	d177      	bne.n	800f9d6 <__kernel_rem_pio2f+0x556>
 800f8e6:	9900      	ldr	r1, [sp, #0]
 800f8e8:	600a      	str	r2, [r1, #0]
 800f8ea:	460a      	mov	r2, r1
 800f8ec:	604b      	str	r3, [r1, #4]
 800f8ee:	6090      	str	r0, [r2, #8]
 800f8f0:	e7dd      	b.n	800f8ae <__kernel_rem_pio2f+0x42e>
 800f8f2:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800f8f6:	f7f1 f915 	bl	8000b24 <__addsf3>
 800f8fa:	3d01      	subs	r5, #1
 800f8fc:	2d00      	cmp	r5, #0
 800f8fe:	daf8      	bge.n	800f8f2 <__kernel_rem_pio2f+0x472>
 800f900:	b10c      	cbz	r4, 800f906 <__kernel_rem_pio2f+0x486>
 800f902:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f906:	9b00      	ldr	r3, [sp, #0]
 800f908:	6018      	str	r0, [r3, #0]
 800f90a:	e7d0      	b.n	800f8ae <__kernel_rem_pio2f+0x42e>
 800f90c:	2000      	movs	r0, #0
 800f90e:	af32      	add	r7, sp, #200	; 0xc8
 800f910:	e7f4      	b.n	800f8fc <__kernel_rem_pio2f+0x47c>
 800f912:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800f916:	f7f1 f905 	bl	8000b24 <__addsf3>
 800f91a:	3f01      	subs	r7, #1
 800f91c:	2f00      	cmp	r7, #0
 800f91e:	daf8      	bge.n	800f912 <__kernel_rem_pio2f+0x492>
 800f920:	b1bc      	cbz	r4, 800f952 <__kernel_rem_pio2f+0x4d2>
 800f922:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800f926:	9a00      	ldr	r2, [sp, #0]
 800f928:	4601      	mov	r1, r0
 800f92a:	6013      	str	r3, [r2, #0]
 800f92c:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800f92e:	f7f1 f8f7 	bl	8000b20 <__aeabi_fsub>
 800f932:	2701      	movs	r7, #1
 800f934:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800f938:	42bd      	cmp	r5, r7
 800f93a:	da0c      	bge.n	800f956 <__kernel_rem_pio2f+0x4d6>
 800f93c:	b10c      	cbz	r4, 800f942 <__kernel_rem_pio2f+0x4c2>
 800f93e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f942:	9b00      	ldr	r3, [sp, #0]
 800f944:	6058      	str	r0, [r3, #4]
 800f946:	e7b2      	b.n	800f8ae <__kernel_rem_pio2f+0x42e>
 800f948:	462f      	mov	r7, r5
 800f94a:	2000      	movs	r0, #0
 800f94c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800f950:	e7e4      	b.n	800f91c <__kernel_rem_pio2f+0x49c>
 800f952:	4603      	mov	r3, r0
 800f954:	e7e7      	b.n	800f926 <__kernel_rem_pio2f+0x4a6>
 800f956:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800f95a:	f7f1 f8e3 	bl	8000b24 <__addsf3>
 800f95e:	3701      	adds	r7, #1
 800f960:	e7ea      	b.n	800f938 <__kernel_rem_pio2f+0x4b8>
 800f962:	f8d8 3000 	ldr.w	r3, [r8]
 800f966:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800f96a:	4619      	mov	r1, r3
 800f96c:	4610      	mov	r0, r2
 800f96e:	9302      	str	r3, [sp, #8]
 800f970:	9201      	str	r2, [sp, #4]
 800f972:	f7f1 f8d7 	bl	8000b24 <__addsf3>
 800f976:	9a01      	ldr	r2, [sp, #4]
 800f978:	4601      	mov	r1, r0
 800f97a:	4681      	mov	r9, r0
 800f97c:	4610      	mov	r0, r2
 800f97e:	f7f1 f8cf 	bl	8000b20 <__aeabi_fsub>
 800f982:	9b02      	ldr	r3, [sp, #8]
 800f984:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f988:	4619      	mov	r1, r3
 800f98a:	f7f1 f8cb 	bl	8000b24 <__addsf3>
 800f98e:	f848 0904 	str.w	r0, [r8], #-4
 800f992:	f8c8 9000 	str.w	r9, [r8]
 800f996:	e798      	b.n	800f8ca <__kernel_rem_pio2f+0x44a>
 800f998:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800f99c:	f8d7 a000 	ldr.w	sl, [r7]
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	4651      	mov	r1, sl
 800f9a4:	9301      	str	r3, [sp, #4]
 800f9a6:	f7f1 f8bd 	bl	8000b24 <__addsf3>
 800f9aa:	9b01      	ldr	r3, [sp, #4]
 800f9ac:	4601      	mov	r1, r0
 800f9ae:	4680      	mov	r8, r0
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f7f1 f8b5 	bl	8000b20 <__aeabi_fsub>
 800f9b6:	4651      	mov	r1, sl
 800f9b8:	f7f1 f8b4 	bl	8000b24 <__addsf3>
 800f9bc:	f847 0904 	str.w	r0, [r7], #-4
 800f9c0:	f109 39ff 	add.w	r9, r9, #4294967295
 800f9c4:	f8c7 8000 	str.w	r8, [r7]
 800f9c8:	e783      	b.n	800f8d2 <__kernel_rem_pio2f+0x452>
 800f9ca:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800f9ce:	f7f1 f8a9 	bl	8000b24 <__addsf3>
 800f9d2:	3d01      	subs	r5, #1
 800f9d4:	e781      	b.n	800f8da <__kernel_rem_pio2f+0x45a>
 800f9d6:	9900      	ldr	r1, [sp, #0]
 800f9d8:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800f9dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f9e0:	600a      	str	r2, [r1, #0]
 800f9e2:	604b      	str	r3, [r1, #4]
 800f9e4:	460a      	mov	r2, r1
 800f9e6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f9ea:	e780      	b.n	800f8ee <__kernel_rem_pio2f+0x46e>

0800f9ec <__kernel_sinf>:
 800f9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9f0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f9f4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f9f8:	4604      	mov	r4, r0
 800f9fa:	460f      	mov	r7, r1
 800f9fc:	4691      	mov	r9, r2
 800f9fe:	da03      	bge.n	800fa08 <__kernel_sinf+0x1c>
 800fa00:	f7f1 fb74 	bl	80010ec <__aeabi_f2iz>
 800fa04:	2800      	cmp	r0, #0
 800fa06:	d035      	beq.n	800fa74 <__kernel_sinf+0x88>
 800fa08:	4621      	mov	r1, r4
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	f7f1 f992 	bl	8000d34 <__aeabi_fmul>
 800fa10:	4605      	mov	r5, r0
 800fa12:	4601      	mov	r1, r0
 800fa14:	4620      	mov	r0, r4
 800fa16:	f7f1 f98d 	bl	8000d34 <__aeabi_fmul>
 800fa1a:	4929      	ldr	r1, [pc, #164]	; (800fac0 <__kernel_sinf+0xd4>)
 800fa1c:	4606      	mov	r6, r0
 800fa1e:	4628      	mov	r0, r5
 800fa20:	f7f1 f988 	bl	8000d34 <__aeabi_fmul>
 800fa24:	4927      	ldr	r1, [pc, #156]	; (800fac4 <__kernel_sinf+0xd8>)
 800fa26:	f7f1 f87b 	bl	8000b20 <__aeabi_fsub>
 800fa2a:	4629      	mov	r1, r5
 800fa2c:	f7f1 f982 	bl	8000d34 <__aeabi_fmul>
 800fa30:	4925      	ldr	r1, [pc, #148]	; (800fac8 <__kernel_sinf+0xdc>)
 800fa32:	f7f1 f877 	bl	8000b24 <__addsf3>
 800fa36:	4629      	mov	r1, r5
 800fa38:	f7f1 f97c 	bl	8000d34 <__aeabi_fmul>
 800fa3c:	4923      	ldr	r1, [pc, #140]	; (800facc <__kernel_sinf+0xe0>)
 800fa3e:	f7f1 f86f 	bl	8000b20 <__aeabi_fsub>
 800fa42:	4629      	mov	r1, r5
 800fa44:	f7f1 f976 	bl	8000d34 <__aeabi_fmul>
 800fa48:	4921      	ldr	r1, [pc, #132]	; (800fad0 <__kernel_sinf+0xe4>)
 800fa4a:	f7f1 f86b 	bl	8000b24 <__addsf3>
 800fa4e:	4680      	mov	r8, r0
 800fa50:	f1b9 0f00 	cmp.w	r9, #0
 800fa54:	d111      	bne.n	800fa7a <__kernel_sinf+0x8e>
 800fa56:	4601      	mov	r1, r0
 800fa58:	4628      	mov	r0, r5
 800fa5a:	f7f1 f96b 	bl	8000d34 <__aeabi_fmul>
 800fa5e:	491d      	ldr	r1, [pc, #116]	; (800fad4 <__kernel_sinf+0xe8>)
 800fa60:	f7f1 f85e 	bl	8000b20 <__aeabi_fsub>
 800fa64:	4631      	mov	r1, r6
 800fa66:	f7f1 f965 	bl	8000d34 <__aeabi_fmul>
 800fa6a:	4601      	mov	r1, r0
 800fa6c:	4620      	mov	r0, r4
 800fa6e:	f7f1 f859 	bl	8000b24 <__addsf3>
 800fa72:	4604      	mov	r4, r0
 800fa74:	4620      	mov	r0, r4
 800fa76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa7a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800fa7e:	4638      	mov	r0, r7
 800fa80:	f7f1 f958 	bl	8000d34 <__aeabi_fmul>
 800fa84:	4641      	mov	r1, r8
 800fa86:	4681      	mov	r9, r0
 800fa88:	4630      	mov	r0, r6
 800fa8a:	f7f1 f953 	bl	8000d34 <__aeabi_fmul>
 800fa8e:	4601      	mov	r1, r0
 800fa90:	4648      	mov	r0, r9
 800fa92:	f7f1 f845 	bl	8000b20 <__aeabi_fsub>
 800fa96:	4629      	mov	r1, r5
 800fa98:	f7f1 f94c 	bl	8000d34 <__aeabi_fmul>
 800fa9c:	4639      	mov	r1, r7
 800fa9e:	f7f1 f83f 	bl	8000b20 <__aeabi_fsub>
 800faa2:	490c      	ldr	r1, [pc, #48]	; (800fad4 <__kernel_sinf+0xe8>)
 800faa4:	4605      	mov	r5, r0
 800faa6:	4630      	mov	r0, r6
 800faa8:	f7f1 f944 	bl	8000d34 <__aeabi_fmul>
 800faac:	4601      	mov	r1, r0
 800faae:	4628      	mov	r0, r5
 800fab0:	f7f1 f838 	bl	8000b24 <__addsf3>
 800fab4:	4601      	mov	r1, r0
 800fab6:	4620      	mov	r0, r4
 800fab8:	f7f1 f832 	bl	8000b20 <__aeabi_fsub>
 800fabc:	e7d9      	b.n	800fa72 <__kernel_sinf+0x86>
 800fabe:	bf00      	nop
 800fac0:	2f2ec9d3 	.word	0x2f2ec9d3
 800fac4:	32d72f34 	.word	0x32d72f34
 800fac8:	3638ef1b 	.word	0x3638ef1b
 800facc:	39500d01 	.word	0x39500d01
 800fad0:	3c088889 	.word	0x3c088889
 800fad4:	3e2aaaab 	.word	0x3e2aaaab

0800fad8 <fabs>:
 800fad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800fadc:	4770      	bx	lr

0800fade <finite>:
 800fade:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800fae2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800fae6:	0fc0      	lsrs	r0, r0, #31
 800fae8:	4770      	bx	lr
	...

0800faec <nan>:
 800faec:	2000      	movs	r0, #0
 800faee:	4901      	ldr	r1, [pc, #4]	; (800faf4 <nan+0x8>)
 800faf0:	4770      	bx	lr
 800faf2:	bf00      	nop
 800faf4:	7ff80000 	.word	0x7ff80000

0800faf8 <rint>:
 800faf8:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800fafc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fafe:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800fb02:	2f13      	cmp	r7, #19
 800fb04:	4602      	mov	r2, r0
 800fb06:	460b      	mov	r3, r1
 800fb08:	460c      	mov	r4, r1
 800fb0a:	4605      	mov	r5, r0
 800fb0c:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800fb10:	dc59      	bgt.n	800fbc6 <rint+0xce>
 800fb12:	2f00      	cmp	r7, #0
 800fb14:	da2a      	bge.n	800fb6c <rint+0x74>
 800fb16:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800fb1a:	4301      	orrs	r1, r0
 800fb1c:	d022      	beq.n	800fb64 <rint+0x6c>
 800fb1e:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800fb22:	4301      	orrs	r1, r0
 800fb24:	424d      	negs	r5, r1
 800fb26:	430d      	orrs	r5, r1
 800fb28:	4936      	ldr	r1, [pc, #216]	; (800fc04 <rint+0x10c>)
 800fb2a:	0c5c      	lsrs	r4, r3, #17
 800fb2c:	0b2d      	lsrs	r5, r5, #12
 800fb2e:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800fb32:	0464      	lsls	r4, r4, #17
 800fb34:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800fb38:	ea45 0304 	orr.w	r3, r5, r4
 800fb3c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800fb40:	4620      	mov	r0, r4
 800fb42:	4629      	mov	r1, r5
 800fb44:	f7f0 fb0a 	bl	800015c <__adddf3>
 800fb48:	e9cd 0100 	strd	r0, r1, [sp]
 800fb4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb50:	462b      	mov	r3, r5
 800fb52:	4622      	mov	r2, r4
 800fb54:	f7f0 fb00 	bl	8000158 <__aeabi_dsub>
 800fb58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fb5c:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800fb60:	4602      	mov	r2, r0
 800fb62:	460b      	mov	r3, r1
 800fb64:	4610      	mov	r0, r2
 800fb66:	4619      	mov	r1, r3
 800fb68:	b003      	add	sp, #12
 800fb6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb6c:	4926      	ldr	r1, [pc, #152]	; (800fc08 <rint+0x110>)
 800fb6e:	4139      	asrs	r1, r7
 800fb70:	ea03 0001 	and.w	r0, r3, r1
 800fb74:	4310      	orrs	r0, r2
 800fb76:	d0f5      	beq.n	800fb64 <rint+0x6c>
 800fb78:	084b      	lsrs	r3, r1, #1
 800fb7a:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800fb7e:	ea52 0501 	orrs.w	r5, r2, r1
 800fb82:	d00c      	beq.n	800fb9e <rint+0xa6>
 800fb84:	ea24 0303 	bic.w	r3, r4, r3
 800fb88:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800fb8c:	2f13      	cmp	r7, #19
 800fb8e:	bf0c      	ite	eq
 800fb90:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800fb94:	2500      	movne	r5, #0
 800fb96:	fa44 f707 	asr.w	r7, r4, r7
 800fb9a:	ea43 0407 	orr.w	r4, r3, r7
 800fb9e:	4919      	ldr	r1, [pc, #100]	; (800fc04 <rint+0x10c>)
 800fba0:	4623      	mov	r3, r4
 800fba2:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800fba6:	462a      	mov	r2, r5
 800fba8:	e9d6 4500 	ldrd	r4, r5, [r6]
 800fbac:	4620      	mov	r0, r4
 800fbae:	4629      	mov	r1, r5
 800fbb0:	f7f0 fad4 	bl	800015c <__adddf3>
 800fbb4:	e9cd 0100 	strd	r0, r1, [sp]
 800fbb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fbbc:	4622      	mov	r2, r4
 800fbbe:	462b      	mov	r3, r5
 800fbc0:	f7f0 faca 	bl	8000158 <__aeabi_dsub>
 800fbc4:	e7cc      	b.n	800fb60 <rint+0x68>
 800fbc6:	2f33      	cmp	r7, #51	; 0x33
 800fbc8:	dd05      	ble.n	800fbd6 <rint+0xde>
 800fbca:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800fbce:	d1c9      	bne.n	800fb64 <rint+0x6c>
 800fbd0:	f7f0 fac4 	bl	800015c <__adddf3>
 800fbd4:	e7c4      	b.n	800fb60 <rint+0x68>
 800fbd6:	f04f 31ff 	mov.w	r1, #4294967295
 800fbda:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800fbde:	fa21 f10c 	lsr.w	r1, r1, ip
 800fbe2:	4208      	tst	r0, r1
 800fbe4:	d0be      	beq.n	800fb64 <rint+0x6c>
 800fbe6:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800fbea:	bf18      	it	ne
 800fbec:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800fbf0:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800fbf4:	bf1e      	ittt	ne
 800fbf6:	ea20 0303 	bicne.w	r3, r0, r3
 800fbfa:	fa45 fc0c 	asrne.w	ip, r5, ip
 800fbfe:	ea43 050c 	orrne.w	r5, r3, ip
 800fc02:	e7cc      	b.n	800fb9e <rint+0xa6>
 800fc04:	08011130 	.word	0x08011130
 800fc08:	000fffff 	.word	0x000fffff
 800fc0c:	00000000 	.word	0x00000000

0800fc10 <scalbn>:
 800fc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc12:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800fc16:	4604      	mov	r4, r0
 800fc18:	460d      	mov	r5, r1
 800fc1a:	4617      	mov	r7, r2
 800fc1c:	460b      	mov	r3, r1
 800fc1e:	b996      	cbnz	r6, 800fc46 <scalbn+0x36>
 800fc20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fc24:	4303      	orrs	r3, r0
 800fc26:	d039      	beq.n	800fc9c <scalbn+0x8c>
 800fc28:	4b35      	ldr	r3, [pc, #212]	; (800fd00 <scalbn+0xf0>)
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	f7f0 fc4c 	bl	80004c8 <__aeabi_dmul>
 800fc30:	4b34      	ldr	r3, [pc, #208]	; (800fd04 <scalbn+0xf4>)
 800fc32:	4604      	mov	r4, r0
 800fc34:	429f      	cmp	r7, r3
 800fc36:	460d      	mov	r5, r1
 800fc38:	da0f      	bge.n	800fc5a <scalbn+0x4a>
 800fc3a:	a32d      	add	r3, pc, #180	; (adr r3, 800fcf0 <scalbn+0xe0>)
 800fc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc40:	f7f0 fc42 	bl	80004c8 <__aeabi_dmul>
 800fc44:	e006      	b.n	800fc54 <scalbn+0x44>
 800fc46:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800fc4a:	4296      	cmp	r6, r2
 800fc4c:	d10a      	bne.n	800fc64 <scalbn+0x54>
 800fc4e:	4602      	mov	r2, r0
 800fc50:	f7f0 fa84 	bl	800015c <__adddf3>
 800fc54:	4604      	mov	r4, r0
 800fc56:	460d      	mov	r5, r1
 800fc58:	e020      	b.n	800fc9c <scalbn+0x8c>
 800fc5a:	460b      	mov	r3, r1
 800fc5c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800fc60:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800fc64:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800fc68:	19b9      	adds	r1, r7, r6
 800fc6a:	4291      	cmp	r1, r2
 800fc6c:	dd0e      	ble.n	800fc8c <scalbn+0x7c>
 800fc6e:	a322      	add	r3, pc, #136	; (adr r3, 800fcf8 <scalbn+0xe8>)
 800fc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc74:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800fc78:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800fc7c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800fc80:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800fc84:	4820      	ldr	r0, [pc, #128]	; (800fd08 <scalbn+0xf8>)
 800fc86:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800fc8a:	e7d9      	b.n	800fc40 <scalbn+0x30>
 800fc8c:	2900      	cmp	r1, #0
 800fc8e:	dd08      	ble.n	800fca2 <scalbn+0x92>
 800fc90:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fc94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fc98:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	4629      	mov	r1, r5
 800fca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fca2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800fca6:	da16      	bge.n	800fcd6 <scalbn+0xc6>
 800fca8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fcac:	429f      	cmp	r7, r3
 800fcae:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800fcb2:	dd08      	ble.n	800fcc6 <scalbn+0xb6>
 800fcb4:	4c15      	ldr	r4, [pc, #84]	; (800fd0c <scalbn+0xfc>)
 800fcb6:	4814      	ldr	r0, [pc, #80]	; (800fd08 <scalbn+0xf8>)
 800fcb8:	f363 74df 	bfi	r4, r3, #31, #1
 800fcbc:	a30e      	add	r3, pc, #56	; (adr r3, 800fcf8 <scalbn+0xe8>)
 800fcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc2:	4621      	mov	r1, r4
 800fcc4:	e7bc      	b.n	800fc40 <scalbn+0x30>
 800fcc6:	4c12      	ldr	r4, [pc, #72]	; (800fd10 <scalbn+0x100>)
 800fcc8:	4812      	ldr	r0, [pc, #72]	; (800fd14 <scalbn+0x104>)
 800fcca:	f363 74df 	bfi	r4, r3, #31, #1
 800fcce:	a308      	add	r3, pc, #32	; (adr r3, 800fcf0 <scalbn+0xe0>)
 800fcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd4:	e7f5      	b.n	800fcc2 <scalbn+0xb2>
 800fcd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fcda:	3136      	adds	r1, #54	; 0x36
 800fcdc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fce0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800fce4:	4620      	mov	r0, r4
 800fce6:	4629      	mov	r1, r5
 800fce8:	2200      	movs	r2, #0
 800fcea:	4b0b      	ldr	r3, [pc, #44]	; (800fd18 <scalbn+0x108>)
 800fcec:	e7a8      	b.n	800fc40 <scalbn+0x30>
 800fcee:	bf00      	nop
 800fcf0:	c2f8f359 	.word	0xc2f8f359
 800fcf4:	01a56e1f 	.word	0x01a56e1f
 800fcf8:	8800759c 	.word	0x8800759c
 800fcfc:	7e37e43c 	.word	0x7e37e43c
 800fd00:	43500000 	.word	0x43500000
 800fd04:	ffff3cb0 	.word	0xffff3cb0
 800fd08:	8800759c 	.word	0x8800759c
 800fd0c:	7e37e43c 	.word	0x7e37e43c
 800fd10:	01a56e1f 	.word	0x01a56e1f
 800fd14:	c2f8f359 	.word	0xc2f8f359
 800fd18:	3c900000 	.word	0x3c900000

0800fd1c <floorf>:
 800fd1c:	b570      	push	{r4, r5, r6, lr}
 800fd1e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800fd22:	3d7f      	subs	r5, #127	; 0x7f
 800fd24:	2d16      	cmp	r5, #22
 800fd26:	4601      	mov	r1, r0
 800fd28:	4604      	mov	r4, r0
 800fd2a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800fd2e:	dc26      	bgt.n	800fd7e <floorf+0x62>
 800fd30:	2d00      	cmp	r5, #0
 800fd32:	da0e      	bge.n	800fd52 <floorf+0x36>
 800fd34:	4917      	ldr	r1, [pc, #92]	; (800fd94 <floorf+0x78>)
 800fd36:	f7f0 fef5 	bl	8000b24 <__addsf3>
 800fd3a:	2100      	movs	r1, #0
 800fd3c:	f7f1 f9b6 	bl	80010ac <__aeabi_fcmpgt>
 800fd40:	b128      	cbz	r0, 800fd4e <floorf+0x32>
 800fd42:	2c00      	cmp	r4, #0
 800fd44:	da23      	bge.n	800fd8e <floorf+0x72>
 800fd46:	4b14      	ldr	r3, [pc, #80]	; (800fd98 <floorf+0x7c>)
 800fd48:	2e00      	cmp	r6, #0
 800fd4a:	bf18      	it	ne
 800fd4c:	461c      	movne	r4, r3
 800fd4e:	4621      	mov	r1, r4
 800fd50:	e01b      	b.n	800fd8a <floorf+0x6e>
 800fd52:	4e12      	ldr	r6, [pc, #72]	; (800fd9c <floorf+0x80>)
 800fd54:	412e      	asrs	r6, r5
 800fd56:	4230      	tst	r0, r6
 800fd58:	d017      	beq.n	800fd8a <floorf+0x6e>
 800fd5a:	490e      	ldr	r1, [pc, #56]	; (800fd94 <floorf+0x78>)
 800fd5c:	f7f0 fee2 	bl	8000b24 <__addsf3>
 800fd60:	2100      	movs	r1, #0
 800fd62:	f7f1 f9a3 	bl	80010ac <__aeabi_fcmpgt>
 800fd66:	2800      	cmp	r0, #0
 800fd68:	d0f1      	beq.n	800fd4e <floorf+0x32>
 800fd6a:	2c00      	cmp	r4, #0
 800fd6c:	bfbe      	ittt	lt
 800fd6e:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800fd72:	fa43 f505 	asrlt.w	r5, r3, r5
 800fd76:	1964      	addlt	r4, r4, r5
 800fd78:	ea24 0406 	bic.w	r4, r4, r6
 800fd7c:	e7e7      	b.n	800fd4e <floorf+0x32>
 800fd7e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800fd82:	d302      	bcc.n	800fd8a <floorf+0x6e>
 800fd84:	f7f0 fece 	bl	8000b24 <__addsf3>
 800fd88:	4601      	mov	r1, r0
 800fd8a:	4608      	mov	r0, r1
 800fd8c:	bd70      	pop	{r4, r5, r6, pc}
 800fd8e:	2400      	movs	r4, #0
 800fd90:	e7dd      	b.n	800fd4e <floorf+0x32>
 800fd92:	bf00      	nop
 800fd94:	7149f2ca 	.word	0x7149f2ca
 800fd98:	bf800000 	.word	0xbf800000
 800fd9c:	007fffff 	.word	0x007fffff

0800fda0 <nanf>:
 800fda0:	4800      	ldr	r0, [pc, #0]	; (800fda4 <nanf+0x4>)
 800fda2:	4770      	bx	lr
 800fda4:	7fc00000 	.word	0x7fc00000

0800fda8 <scalbnf>:
 800fda8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800fdac:	b538      	push	{r3, r4, r5, lr}
 800fdae:	4603      	mov	r3, r0
 800fdb0:	460d      	mov	r5, r1
 800fdb2:	4604      	mov	r4, r0
 800fdb4:	d02a      	beq.n	800fe0c <scalbnf+0x64>
 800fdb6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800fdba:	d304      	bcc.n	800fdc6 <scalbnf+0x1e>
 800fdbc:	4601      	mov	r1, r0
 800fdbe:	f7f0 feb1 	bl	8000b24 <__addsf3>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	e022      	b.n	800fe0c <scalbnf+0x64>
 800fdc6:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800fdca:	d117      	bne.n	800fdfc <scalbnf+0x54>
 800fdcc:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800fdd0:	f7f0 ffb0 	bl	8000d34 <__aeabi_fmul>
 800fdd4:	4a17      	ldr	r2, [pc, #92]	; (800fe34 <scalbnf+0x8c>)
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	4295      	cmp	r5, r2
 800fdda:	db0b      	blt.n	800fdf4 <scalbnf+0x4c>
 800fddc:	4604      	mov	r4, r0
 800fdde:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800fde2:	3a19      	subs	r2, #25
 800fde4:	442a      	add	r2, r5
 800fde6:	2afe      	cmp	r2, #254	; 0xfe
 800fde8:	dd0a      	ble.n	800fe00 <scalbnf+0x58>
 800fdea:	4913      	ldr	r1, [pc, #76]	; (800fe38 <scalbnf+0x90>)
 800fdec:	4618      	mov	r0, r3
 800fdee:	f361 001e 	bfi	r0, r1, #0, #31
 800fdf2:	e000      	b.n	800fdf6 <scalbnf+0x4e>
 800fdf4:	4911      	ldr	r1, [pc, #68]	; (800fe3c <scalbnf+0x94>)
 800fdf6:	f7f0 ff9d 	bl	8000d34 <__aeabi_fmul>
 800fdfa:	e7e2      	b.n	800fdc2 <scalbnf+0x1a>
 800fdfc:	0dd2      	lsrs	r2, r2, #23
 800fdfe:	e7f1      	b.n	800fde4 <scalbnf+0x3c>
 800fe00:	2a00      	cmp	r2, #0
 800fe02:	dd05      	ble.n	800fe10 <scalbnf+0x68>
 800fe04:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800fe08:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	bd38      	pop	{r3, r4, r5, pc}
 800fe10:	f112 0f16 	cmn.w	r2, #22
 800fe14:	da05      	bge.n	800fe22 <scalbnf+0x7a>
 800fe16:	f24c 3250 	movw	r2, #50000	; 0xc350
 800fe1a:	4295      	cmp	r5, r2
 800fe1c:	dce5      	bgt.n	800fdea <scalbnf+0x42>
 800fe1e:	4907      	ldr	r1, [pc, #28]	; (800fe3c <scalbnf+0x94>)
 800fe20:	e7e4      	b.n	800fdec <scalbnf+0x44>
 800fe22:	3219      	adds	r2, #25
 800fe24:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800fe28:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800fe2c:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800fe30:	e7e1      	b.n	800fdf6 <scalbnf+0x4e>
 800fe32:	bf00      	nop
 800fe34:	ffff3cb0 	.word	0xffff3cb0
 800fe38:	7149f2ca 	.word	0x7149f2ca
 800fe3c:	0da24260 	.word	0x0da24260

0800fe40 <__errno>:
 800fe40:	4b01      	ldr	r3, [pc, #4]	; (800fe48 <__errno+0x8>)
 800fe42:	6818      	ldr	r0, [r3, #0]
 800fe44:	4770      	bx	lr
 800fe46:	bf00      	nop
 800fe48:	2000001c 	.word	0x2000001c

0800fe4c <__libc_init_array>:
 800fe4c:	b570      	push	{r4, r5, r6, lr}
 800fe4e:	2600      	movs	r6, #0
 800fe50:	4d0c      	ldr	r5, [pc, #48]	; (800fe84 <__libc_init_array+0x38>)
 800fe52:	4c0d      	ldr	r4, [pc, #52]	; (800fe88 <__libc_init_array+0x3c>)
 800fe54:	1b64      	subs	r4, r4, r5
 800fe56:	10a4      	asrs	r4, r4, #2
 800fe58:	42a6      	cmp	r6, r4
 800fe5a:	d109      	bne.n	800fe70 <__libc_init_array+0x24>
 800fe5c:	f000 fc5c 	bl	8010718 <_init>
 800fe60:	2600      	movs	r6, #0
 800fe62:	4d0a      	ldr	r5, [pc, #40]	; (800fe8c <__libc_init_array+0x40>)
 800fe64:	4c0a      	ldr	r4, [pc, #40]	; (800fe90 <__libc_init_array+0x44>)
 800fe66:	1b64      	subs	r4, r4, r5
 800fe68:	10a4      	asrs	r4, r4, #2
 800fe6a:	42a6      	cmp	r6, r4
 800fe6c:	d105      	bne.n	800fe7a <__libc_init_array+0x2e>
 800fe6e:	bd70      	pop	{r4, r5, r6, pc}
 800fe70:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe74:	4798      	blx	r3
 800fe76:	3601      	adds	r6, #1
 800fe78:	e7ee      	b.n	800fe58 <__libc_init_array+0xc>
 800fe7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe7e:	4798      	blx	r3
 800fe80:	3601      	adds	r6, #1
 800fe82:	e7f2      	b.n	800fe6a <__libc_init_array+0x1e>
 800fe84:	080111d4 	.word	0x080111d4
 800fe88:	080111d4 	.word	0x080111d4
 800fe8c:	080111d4 	.word	0x080111d4
 800fe90:	080111dc 	.word	0x080111dc

0800fe94 <memcpy>:
 800fe94:	440a      	add	r2, r1
 800fe96:	4291      	cmp	r1, r2
 800fe98:	f100 33ff 	add.w	r3, r0, #4294967295
 800fe9c:	d100      	bne.n	800fea0 <memcpy+0xc>
 800fe9e:	4770      	bx	lr
 800fea0:	b510      	push	{r4, lr}
 800fea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fea6:	4291      	cmp	r1, r2
 800fea8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800feac:	d1f9      	bne.n	800fea2 <memcpy+0xe>
 800feae:	bd10      	pop	{r4, pc}

0800feb0 <memset>:
 800feb0:	4603      	mov	r3, r0
 800feb2:	4402      	add	r2, r0
 800feb4:	4293      	cmp	r3, r2
 800feb6:	d100      	bne.n	800feba <memset+0xa>
 800feb8:	4770      	bx	lr
 800feba:	f803 1b01 	strb.w	r1, [r3], #1
 800febe:	e7f9      	b.n	800feb4 <memset+0x4>

0800fec0 <_free_r>:
 800fec0:	b538      	push	{r3, r4, r5, lr}
 800fec2:	4605      	mov	r5, r0
 800fec4:	2900      	cmp	r1, #0
 800fec6:	d043      	beq.n	800ff50 <_free_r+0x90>
 800fec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fecc:	1f0c      	subs	r4, r1, #4
 800fece:	2b00      	cmp	r3, #0
 800fed0:	bfb8      	it	lt
 800fed2:	18e4      	addlt	r4, r4, r3
 800fed4:	f000 f8cc 	bl	8010070 <__malloc_lock>
 800fed8:	4a1e      	ldr	r2, [pc, #120]	; (800ff54 <_free_r+0x94>)
 800feda:	6813      	ldr	r3, [r2, #0]
 800fedc:	4610      	mov	r0, r2
 800fede:	b933      	cbnz	r3, 800feee <_free_r+0x2e>
 800fee0:	6063      	str	r3, [r4, #4]
 800fee2:	6014      	str	r4, [r2, #0]
 800fee4:	4628      	mov	r0, r5
 800fee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800feea:	f000 b8c7 	b.w	801007c <__malloc_unlock>
 800feee:	42a3      	cmp	r3, r4
 800fef0:	d90a      	bls.n	800ff08 <_free_r+0x48>
 800fef2:	6821      	ldr	r1, [r4, #0]
 800fef4:	1862      	adds	r2, r4, r1
 800fef6:	4293      	cmp	r3, r2
 800fef8:	bf01      	itttt	eq
 800fefa:	681a      	ldreq	r2, [r3, #0]
 800fefc:	685b      	ldreq	r3, [r3, #4]
 800fefe:	1852      	addeq	r2, r2, r1
 800ff00:	6022      	streq	r2, [r4, #0]
 800ff02:	6063      	str	r3, [r4, #4]
 800ff04:	6004      	str	r4, [r0, #0]
 800ff06:	e7ed      	b.n	800fee4 <_free_r+0x24>
 800ff08:	461a      	mov	r2, r3
 800ff0a:	685b      	ldr	r3, [r3, #4]
 800ff0c:	b10b      	cbz	r3, 800ff12 <_free_r+0x52>
 800ff0e:	42a3      	cmp	r3, r4
 800ff10:	d9fa      	bls.n	800ff08 <_free_r+0x48>
 800ff12:	6811      	ldr	r1, [r2, #0]
 800ff14:	1850      	adds	r0, r2, r1
 800ff16:	42a0      	cmp	r0, r4
 800ff18:	d10b      	bne.n	800ff32 <_free_r+0x72>
 800ff1a:	6820      	ldr	r0, [r4, #0]
 800ff1c:	4401      	add	r1, r0
 800ff1e:	1850      	adds	r0, r2, r1
 800ff20:	4283      	cmp	r3, r0
 800ff22:	6011      	str	r1, [r2, #0]
 800ff24:	d1de      	bne.n	800fee4 <_free_r+0x24>
 800ff26:	6818      	ldr	r0, [r3, #0]
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	4401      	add	r1, r0
 800ff2c:	6011      	str	r1, [r2, #0]
 800ff2e:	6053      	str	r3, [r2, #4]
 800ff30:	e7d8      	b.n	800fee4 <_free_r+0x24>
 800ff32:	d902      	bls.n	800ff3a <_free_r+0x7a>
 800ff34:	230c      	movs	r3, #12
 800ff36:	602b      	str	r3, [r5, #0]
 800ff38:	e7d4      	b.n	800fee4 <_free_r+0x24>
 800ff3a:	6820      	ldr	r0, [r4, #0]
 800ff3c:	1821      	adds	r1, r4, r0
 800ff3e:	428b      	cmp	r3, r1
 800ff40:	bf01      	itttt	eq
 800ff42:	6819      	ldreq	r1, [r3, #0]
 800ff44:	685b      	ldreq	r3, [r3, #4]
 800ff46:	1809      	addeq	r1, r1, r0
 800ff48:	6021      	streq	r1, [r4, #0]
 800ff4a:	6063      	str	r3, [r4, #4]
 800ff4c:	6054      	str	r4, [r2, #4]
 800ff4e:	e7c9      	b.n	800fee4 <_free_r+0x24>
 800ff50:	bd38      	pop	{r3, r4, r5, pc}
 800ff52:	bf00      	nop
 800ff54:	200017d4 	.word	0x200017d4

0800ff58 <_malloc_r>:
 800ff58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff5a:	1ccd      	adds	r5, r1, #3
 800ff5c:	f025 0503 	bic.w	r5, r5, #3
 800ff60:	3508      	adds	r5, #8
 800ff62:	2d0c      	cmp	r5, #12
 800ff64:	bf38      	it	cc
 800ff66:	250c      	movcc	r5, #12
 800ff68:	2d00      	cmp	r5, #0
 800ff6a:	4606      	mov	r6, r0
 800ff6c:	db01      	blt.n	800ff72 <_malloc_r+0x1a>
 800ff6e:	42a9      	cmp	r1, r5
 800ff70:	d903      	bls.n	800ff7a <_malloc_r+0x22>
 800ff72:	230c      	movs	r3, #12
 800ff74:	6033      	str	r3, [r6, #0]
 800ff76:	2000      	movs	r0, #0
 800ff78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff7a:	f000 f879 	bl	8010070 <__malloc_lock>
 800ff7e:	4921      	ldr	r1, [pc, #132]	; (8010004 <_malloc_r+0xac>)
 800ff80:	680a      	ldr	r2, [r1, #0]
 800ff82:	4614      	mov	r4, r2
 800ff84:	b99c      	cbnz	r4, 800ffae <_malloc_r+0x56>
 800ff86:	4f20      	ldr	r7, [pc, #128]	; (8010008 <_malloc_r+0xb0>)
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	b923      	cbnz	r3, 800ff96 <_malloc_r+0x3e>
 800ff8c:	4621      	mov	r1, r4
 800ff8e:	4630      	mov	r0, r6
 800ff90:	f000 f83c 	bl	801000c <_sbrk_r>
 800ff94:	6038      	str	r0, [r7, #0]
 800ff96:	4629      	mov	r1, r5
 800ff98:	4630      	mov	r0, r6
 800ff9a:	f000 f837 	bl	801000c <_sbrk_r>
 800ff9e:	1c43      	adds	r3, r0, #1
 800ffa0:	d123      	bne.n	800ffea <_malloc_r+0x92>
 800ffa2:	230c      	movs	r3, #12
 800ffa4:	4630      	mov	r0, r6
 800ffa6:	6033      	str	r3, [r6, #0]
 800ffa8:	f000 f868 	bl	801007c <__malloc_unlock>
 800ffac:	e7e3      	b.n	800ff76 <_malloc_r+0x1e>
 800ffae:	6823      	ldr	r3, [r4, #0]
 800ffb0:	1b5b      	subs	r3, r3, r5
 800ffb2:	d417      	bmi.n	800ffe4 <_malloc_r+0x8c>
 800ffb4:	2b0b      	cmp	r3, #11
 800ffb6:	d903      	bls.n	800ffc0 <_malloc_r+0x68>
 800ffb8:	6023      	str	r3, [r4, #0]
 800ffba:	441c      	add	r4, r3
 800ffbc:	6025      	str	r5, [r4, #0]
 800ffbe:	e004      	b.n	800ffca <_malloc_r+0x72>
 800ffc0:	6863      	ldr	r3, [r4, #4]
 800ffc2:	42a2      	cmp	r2, r4
 800ffc4:	bf0c      	ite	eq
 800ffc6:	600b      	streq	r3, [r1, #0]
 800ffc8:	6053      	strne	r3, [r2, #4]
 800ffca:	4630      	mov	r0, r6
 800ffcc:	f000 f856 	bl	801007c <__malloc_unlock>
 800ffd0:	f104 000b 	add.w	r0, r4, #11
 800ffd4:	1d23      	adds	r3, r4, #4
 800ffd6:	f020 0007 	bic.w	r0, r0, #7
 800ffda:	1ac2      	subs	r2, r0, r3
 800ffdc:	d0cc      	beq.n	800ff78 <_malloc_r+0x20>
 800ffde:	1a1b      	subs	r3, r3, r0
 800ffe0:	50a3      	str	r3, [r4, r2]
 800ffe2:	e7c9      	b.n	800ff78 <_malloc_r+0x20>
 800ffe4:	4622      	mov	r2, r4
 800ffe6:	6864      	ldr	r4, [r4, #4]
 800ffe8:	e7cc      	b.n	800ff84 <_malloc_r+0x2c>
 800ffea:	1cc4      	adds	r4, r0, #3
 800ffec:	f024 0403 	bic.w	r4, r4, #3
 800fff0:	42a0      	cmp	r0, r4
 800fff2:	d0e3      	beq.n	800ffbc <_malloc_r+0x64>
 800fff4:	1a21      	subs	r1, r4, r0
 800fff6:	4630      	mov	r0, r6
 800fff8:	f000 f808 	bl	801000c <_sbrk_r>
 800fffc:	3001      	adds	r0, #1
 800fffe:	d1dd      	bne.n	800ffbc <_malloc_r+0x64>
 8010000:	e7cf      	b.n	800ffa2 <_malloc_r+0x4a>
 8010002:	bf00      	nop
 8010004:	200017d4 	.word	0x200017d4
 8010008:	200017d8 	.word	0x200017d8

0801000c <_sbrk_r>:
 801000c:	b538      	push	{r3, r4, r5, lr}
 801000e:	2300      	movs	r3, #0
 8010010:	4d05      	ldr	r5, [pc, #20]	; (8010028 <_sbrk_r+0x1c>)
 8010012:	4604      	mov	r4, r0
 8010014:	4608      	mov	r0, r1
 8010016:	602b      	str	r3, [r5, #0]
 8010018:	f7f5 f842 	bl	80050a0 <_sbrk>
 801001c:	1c43      	adds	r3, r0, #1
 801001e:	d102      	bne.n	8010026 <_sbrk_r+0x1a>
 8010020:	682b      	ldr	r3, [r5, #0]
 8010022:	b103      	cbz	r3, 8010026 <_sbrk_r+0x1a>
 8010024:	6023      	str	r3, [r4, #0]
 8010026:	bd38      	pop	{r3, r4, r5, pc}
 8010028:	20001b0c 	.word	0x20001b0c

0801002c <siprintf>:
 801002c:	b40e      	push	{r1, r2, r3}
 801002e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010032:	b500      	push	{lr}
 8010034:	b09c      	sub	sp, #112	; 0x70
 8010036:	ab1d      	add	r3, sp, #116	; 0x74
 8010038:	9002      	str	r0, [sp, #8]
 801003a:	9006      	str	r0, [sp, #24]
 801003c:	9107      	str	r1, [sp, #28]
 801003e:	9104      	str	r1, [sp, #16]
 8010040:	4808      	ldr	r0, [pc, #32]	; (8010064 <siprintf+0x38>)
 8010042:	4909      	ldr	r1, [pc, #36]	; (8010068 <siprintf+0x3c>)
 8010044:	f853 2b04 	ldr.w	r2, [r3], #4
 8010048:	9105      	str	r1, [sp, #20]
 801004a:	6800      	ldr	r0, [r0, #0]
 801004c:	a902      	add	r1, sp, #8
 801004e:	9301      	str	r3, [sp, #4]
 8010050:	f000 f876 	bl	8010140 <_svfiprintf_r>
 8010054:	2200      	movs	r2, #0
 8010056:	9b02      	ldr	r3, [sp, #8]
 8010058:	701a      	strb	r2, [r3, #0]
 801005a:	b01c      	add	sp, #112	; 0x70
 801005c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010060:	b003      	add	sp, #12
 8010062:	4770      	bx	lr
 8010064:	2000001c 	.word	0x2000001c
 8010068:	ffff0208 	.word	0xffff0208

0801006c <__retarget_lock_acquire_recursive>:
 801006c:	4770      	bx	lr

0801006e <__retarget_lock_release_recursive>:
 801006e:	4770      	bx	lr

08010070 <__malloc_lock>:
 8010070:	4801      	ldr	r0, [pc, #4]	; (8010078 <__malloc_lock+0x8>)
 8010072:	f7ff bffb 	b.w	801006c <__retarget_lock_acquire_recursive>
 8010076:	bf00      	nop
 8010078:	20001b04 	.word	0x20001b04

0801007c <__malloc_unlock>:
 801007c:	4801      	ldr	r0, [pc, #4]	; (8010084 <__malloc_unlock+0x8>)
 801007e:	f7ff bff6 	b.w	801006e <__retarget_lock_release_recursive>
 8010082:	bf00      	nop
 8010084:	20001b04 	.word	0x20001b04

08010088 <__ssputs_r>:
 8010088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801008c:	688e      	ldr	r6, [r1, #8]
 801008e:	4682      	mov	sl, r0
 8010090:	429e      	cmp	r6, r3
 8010092:	460c      	mov	r4, r1
 8010094:	4690      	mov	r8, r2
 8010096:	461f      	mov	r7, r3
 8010098:	d838      	bhi.n	801010c <__ssputs_r+0x84>
 801009a:	898a      	ldrh	r2, [r1, #12]
 801009c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80100a0:	d032      	beq.n	8010108 <__ssputs_r+0x80>
 80100a2:	6825      	ldr	r5, [r4, #0]
 80100a4:	6909      	ldr	r1, [r1, #16]
 80100a6:	3301      	adds	r3, #1
 80100a8:	eba5 0901 	sub.w	r9, r5, r1
 80100ac:	6965      	ldr	r5, [r4, #20]
 80100ae:	444b      	add	r3, r9
 80100b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80100b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80100b8:	106d      	asrs	r5, r5, #1
 80100ba:	429d      	cmp	r5, r3
 80100bc:	bf38      	it	cc
 80100be:	461d      	movcc	r5, r3
 80100c0:	0553      	lsls	r3, r2, #21
 80100c2:	d531      	bpl.n	8010128 <__ssputs_r+0xa0>
 80100c4:	4629      	mov	r1, r5
 80100c6:	f7ff ff47 	bl	800ff58 <_malloc_r>
 80100ca:	4606      	mov	r6, r0
 80100cc:	b950      	cbnz	r0, 80100e4 <__ssputs_r+0x5c>
 80100ce:	230c      	movs	r3, #12
 80100d0:	f04f 30ff 	mov.w	r0, #4294967295
 80100d4:	f8ca 3000 	str.w	r3, [sl]
 80100d8:	89a3      	ldrh	r3, [r4, #12]
 80100da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100de:	81a3      	strh	r3, [r4, #12]
 80100e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100e4:	464a      	mov	r2, r9
 80100e6:	6921      	ldr	r1, [r4, #16]
 80100e8:	f7ff fed4 	bl	800fe94 <memcpy>
 80100ec:	89a3      	ldrh	r3, [r4, #12]
 80100ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80100f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100f6:	81a3      	strh	r3, [r4, #12]
 80100f8:	6126      	str	r6, [r4, #16]
 80100fa:	444e      	add	r6, r9
 80100fc:	6026      	str	r6, [r4, #0]
 80100fe:	463e      	mov	r6, r7
 8010100:	6165      	str	r5, [r4, #20]
 8010102:	eba5 0509 	sub.w	r5, r5, r9
 8010106:	60a5      	str	r5, [r4, #8]
 8010108:	42be      	cmp	r6, r7
 801010a:	d900      	bls.n	801010e <__ssputs_r+0x86>
 801010c:	463e      	mov	r6, r7
 801010e:	4632      	mov	r2, r6
 8010110:	4641      	mov	r1, r8
 8010112:	6820      	ldr	r0, [r4, #0]
 8010114:	f000 fab8 	bl	8010688 <memmove>
 8010118:	68a3      	ldr	r3, [r4, #8]
 801011a:	6822      	ldr	r2, [r4, #0]
 801011c:	1b9b      	subs	r3, r3, r6
 801011e:	4432      	add	r2, r6
 8010120:	2000      	movs	r0, #0
 8010122:	60a3      	str	r3, [r4, #8]
 8010124:	6022      	str	r2, [r4, #0]
 8010126:	e7db      	b.n	80100e0 <__ssputs_r+0x58>
 8010128:	462a      	mov	r2, r5
 801012a:	f000 fac7 	bl	80106bc <_realloc_r>
 801012e:	4606      	mov	r6, r0
 8010130:	2800      	cmp	r0, #0
 8010132:	d1e1      	bne.n	80100f8 <__ssputs_r+0x70>
 8010134:	4650      	mov	r0, sl
 8010136:	6921      	ldr	r1, [r4, #16]
 8010138:	f7ff fec2 	bl	800fec0 <_free_r>
 801013c:	e7c7      	b.n	80100ce <__ssputs_r+0x46>
	...

08010140 <_svfiprintf_r>:
 8010140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010144:	4698      	mov	r8, r3
 8010146:	898b      	ldrh	r3, [r1, #12]
 8010148:	4607      	mov	r7, r0
 801014a:	061b      	lsls	r3, r3, #24
 801014c:	460d      	mov	r5, r1
 801014e:	4614      	mov	r4, r2
 8010150:	b09d      	sub	sp, #116	; 0x74
 8010152:	d50e      	bpl.n	8010172 <_svfiprintf_r+0x32>
 8010154:	690b      	ldr	r3, [r1, #16]
 8010156:	b963      	cbnz	r3, 8010172 <_svfiprintf_r+0x32>
 8010158:	2140      	movs	r1, #64	; 0x40
 801015a:	f7ff fefd 	bl	800ff58 <_malloc_r>
 801015e:	6028      	str	r0, [r5, #0]
 8010160:	6128      	str	r0, [r5, #16]
 8010162:	b920      	cbnz	r0, 801016e <_svfiprintf_r+0x2e>
 8010164:	230c      	movs	r3, #12
 8010166:	603b      	str	r3, [r7, #0]
 8010168:	f04f 30ff 	mov.w	r0, #4294967295
 801016c:	e0d1      	b.n	8010312 <_svfiprintf_r+0x1d2>
 801016e:	2340      	movs	r3, #64	; 0x40
 8010170:	616b      	str	r3, [r5, #20]
 8010172:	2300      	movs	r3, #0
 8010174:	9309      	str	r3, [sp, #36]	; 0x24
 8010176:	2320      	movs	r3, #32
 8010178:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801017c:	2330      	movs	r3, #48	; 0x30
 801017e:	f04f 0901 	mov.w	r9, #1
 8010182:	f8cd 800c 	str.w	r8, [sp, #12]
 8010186:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801032c <_svfiprintf_r+0x1ec>
 801018a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801018e:	4623      	mov	r3, r4
 8010190:	469a      	mov	sl, r3
 8010192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010196:	b10a      	cbz	r2, 801019c <_svfiprintf_r+0x5c>
 8010198:	2a25      	cmp	r2, #37	; 0x25
 801019a:	d1f9      	bne.n	8010190 <_svfiprintf_r+0x50>
 801019c:	ebba 0b04 	subs.w	fp, sl, r4
 80101a0:	d00b      	beq.n	80101ba <_svfiprintf_r+0x7a>
 80101a2:	465b      	mov	r3, fp
 80101a4:	4622      	mov	r2, r4
 80101a6:	4629      	mov	r1, r5
 80101a8:	4638      	mov	r0, r7
 80101aa:	f7ff ff6d 	bl	8010088 <__ssputs_r>
 80101ae:	3001      	adds	r0, #1
 80101b0:	f000 80aa 	beq.w	8010308 <_svfiprintf_r+0x1c8>
 80101b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101b6:	445a      	add	r2, fp
 80101b8:	9209      	str	r2, [sp, #36]	; 0x24
 80101ba:	f89a 3000 	ldrb.w	r3, [sl]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	f000 80a2 	beq.w	8010308 <_svfiprintf_r+0x1c8>
 80101c4:	2300      	movs	r3, #0
 80101c6:	f04f 32ff 	mov.w	r2, #4294967295
 80101ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101ce:	f10a 0a01 	add.w	sl, sl, #1
 80101d2:	9304      	str	r3, [sp, #16]
 80101d4:	9307      	str	r3, [sp, #28]
 80101d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101da:	931a      	str	r3, [sp, #104]	; 0x68
 80101dc:	4654      	mov	r4, sl
 80101de:	2205      	movs	r2, #5
 80101e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101e4:	4851      	ldr	r0, [pc, #324]	; (801032c <_svfiprintf_r+0x1ec>)
 80101e6:	f000 fa41 	bl	801066c <memchr>
 80101ea:	9a04      	ldr	r2, [sp, #16]
 80101ec:	b9d8      	cbnz	r0, 8010226 <_svfiprintf_r+0xe6>
 80101ee:	06d0      	lsls	r0, r2, #27
 80101f0:	bf44      	itt	mi
 80101f2:	2320      	movmi	r3, #32
 80101f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101f8:	0711      	lsls	r1, r2, #28
 80101fa:	bf44      	itt	mi
 80101fc:	232b      	movmi	r3, #43	; 0x2b
 80101fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010202:	f89a 3000 	ldrb.w	r3, [sl]
 8010206:	2b2a      	cmp	r3, #42	; 0x2a
 8010208:	d015      	beq.n	8010236 <_svfiprintf_r+0xf6>
 801020a:	4654      	mov	r4, sl
 801020c:	2000      	movs	r0, #0
 801020e:	f04f 0c0a 	mov.w	ip, #10
 8010212:	9a07      	ldr	r2, [sp, #28]
 8010214:	4621      	mov	r1, r4
 8010216:	f811 3b01 	ldrb.w	r3, [r1], #1
 801021a:	3b30      	subs	r3, #48	; 0x30
 801021c:	2b09      	cmp	r3, #9
 801021e:	d94e      	bls.n	80102be <_svfiprintf_r+0x17e>
 8010220:	b1b0      	cbz	r0, 8010250 <_svfiprintf_r+0x110>
 8010222:	9207      	str	r2, [sp, #28]
 8010224:	e014      	b.n	8010250 <_svfiprintf_r+0x110>
 8010226:	eba0 0308 	sub.w	r3, r0, r8
 801022a:	fa09 f303 	lsl.w	r3, r9, r3
 801022e:	4313      	orrs	r3, r2
 8010230:	46a2      	mov	sl, r4
 8010232:	9304      	str	r3, [sp, #16]
 8010234:	e7d2      	b.n	80101dc <_svfiprintf_r+0x9c>
 8010236:	9b03      	ldr	r3, [sp, #12]
 8010238:	1d19      	adds	r1, r3, #4
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	9103      	str	r1, [sp, #12]
 801023e:	2b00      	cmp	r3, #0
 8010240:	bfbb      	ittet	lt
 8010242:	425b      	neglt	r3, r3
 8010244:	f042 0202 	orrlt.w	r2, r2, #2
 8010248:	9307      	strge	r3, [sp, #28]
 801024a:	9307      	strlt	r3, [sp, #28]
 801024c:	bfb8      	it	lt
 801024e:	9204      	strlt	r2, [sp, #16]
 8010250:	7823      	ldrb	r3, [r4, #0]
 8010252:	2b2e      	cmp	r3, #46	; 0x2e
 8010254:	d10c      	bne.n	8010270 <_svfiprintf_r+0x130>
 8010256:	7863      	ldrb	r3, [r4, #1]
 8010258:	2b2a      	cmp	r3, #42	; 0x2a
 801025a:	d135      	bne.n	80102c8 <_svfiprintf_r+0x188>
 801025c:	9b03      	ldr	r3, [sp, #12]
 801025e:	3402      	adds	r4, #2
 8010260:	1d1a      	adds	r2, r3, #4
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	9203      	str	r2, [sp, #12]
 8010266:	2b00      	cmp	r3, #0
 8010268:	bfb8      	it	lt
 801026a:	f04f 33ff 	movlt.w	r3, #4294967295
 801026e:	9305      	str	r3, [sp, #20]
 8010270:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801033c <_svfiprintf_r+0x1fc>
 8010274:	2203      	movs	r2, #3
 8010276:	4650      	mov	r0, sl
 8010278:	7821      	ldrb	r1, [r4, #0]
 801027a:	f000 f9f7 	bl	801066c <memchr>
 801027e:	b140      	cbz	r0, 8010292 <_svfiprintf_r+0x152>
 8010280:	2340      	movs	r3, #64	; 0x40
 8010282:	eba0 000a 	sub.w	r0, r0, sl
 8010286:	fa03 f000 	lsl.w	r0, r3, r0
 801028a:	9b04      	ldr	r3, [sp, #16]
 801028c:	3401      	adds	r4, #1
 801028e:	4303      	orrs	r3, r0
 8010290:	9304      	str	r3, [sp, #16]
 8010292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010296:	2206      	movs	r2, #6
 8010298:	4825      	ldr	r0, [pc, #148]	; (8010330 <_svfiprintf_r+0x1f0>)
 801029a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801029e:	f000 f9e5 	bl	801066c <memchr>
 80102a2:	2800      	cmp	r0, #0
 80102a4:	d038      	beq.n	8010318 <_svfiprintf_r+0x1d8>
 80102a6:	4b23      	ldr	r3, [pc, #140]	; (8010334 <_svfiprintf_r+0x1f4>)
 80102a8:	bb1b      	cbnz	r3, 80102f2 <_svfiprintf_r+0x1b2>
 80102aa:	9b03      	ldr	r3, [sp, #12]
 80102ac:	3307      	adds	r3, #7
 80102ae:	f023 0307 	bic.w	r3, r3, #7
 80102b2:	3308      	adds	r3, #8
 80102b4:	9303      	str	r3, [sp, #12]
 80102b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102b8:	4433      	add	r3, r6
 80102ba:	9309      	str	r3, [sp, #36]	; 0x24
 80102bc:	e767      	b.n	801018e <_svfiprintf_r+0x4e>
 80102be:	460c      	mov	r4, r1
 80102c0:	2001      	movs	r0, #1
 80102c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80102c6:	e7a5      	b.n	8010214 <_svfiprintf_r+0xd4>
 80102c8:	2300      	movs	r3, #0
 80102ca:	f04f 0c0a 	mov.w	ip, #10
 80102ce:	4619      	mov	r1, r3
 80102d0:	3401      	adds	r4, #1
 80102d2:	9305      	str	r3, [sp, #20]
 80102d4:	4620      	mov	r0, r4
 80102d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102da:	3a30      	subs	r2, #48	; 0x30
 80102dc:	2a09      	cmp	r2, #9
 80102de:	d903      	bls.n	80102e8 <_svfiprintf_r+0x1a8>
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d0c5      	beq.n	8010270 <_svfiprintf_r+0x130>
 80102e4:	9105      	str	r1, [sp, #20]
 80102e6:	e7c3      	b.n	8010270 <_svfiprintf_r+0x130>
 80102e8:	4604      	mov	r4, r0
 80102ea:	2301      	movs	r3, #1
 80102ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80102f0:	e7f0      	b.n	80102d4 <_svfiprintf_r+0x194>
 80102f2:	ab03      	add	r3, sp, #12
 80102f4:	9300      	str	r3, [sp, #0]
 80102f6:	462a      	mov	r2, r5
 80102f8:	4638      	mov	r0, r7
 80102fa:	4b0f      	ldr	r3, [pc, #60]	; (8010338 <_svfiprintf_r+0x1f8>)
 80102fc:	a904      	add	r1, sp, #16
 80102fe:	f3af 8000 	nop.w
 8010302:	1c42      	adds	r2, r0, #1
 8010304:	4606      	mov	r6, r0
 8010306:	d1d6      	bne.n	80102b6 <_svfiprintf_r+0x176>
 8010308:	89ab      	ldrh	r3, [r5, #12]
 801030a:	065b      	lsls	r3, r3, #25
 801030c:	f53f af2c 	bmi.w	8010168 <_svfiprintf_r+0x28>
 8010310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010312:	b01d      	add	sp, #116	; 0x74
 8010314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010318:	ab03      	add	r3, sp, #12
 801031a:	9300      	str	r3, [sp, #0]
 801031c:	462a      	mov	r2, r5
 801031e:	4638      	mov	r0, r7
 8010320:	4b05      	ldr	r3, [pc, #20]	; (8010338 <_svfiprintf_r+0x1f8>)
 8010322:	a904      	add	r1, sp, #16
 8010324:	f000 f87c 	bl	8010420 <_printf_i>
 8010328:	e7eb      	b.n	8010302 <_svfiprintf_r+0x1c2>
 801032a:	bf00      	nop
 801032c:	080111a0 	.word	0x080111a0
 8010330:	080111aa 	.word	0x080111aa
 8010334:	00000000 	.word	0x00000000
 8010338:	08010089 	.word	0x08010089
 801033c:	080111a6 	.word	0x080111a6

08010340 <_printf_common>:
 8010340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010344:	4616      	mov	r6, r2
 8010346:	4699      	mov	r9, r3
 8010348:	688a      	ldr	r2, [r1, #8]
 801034a:	690b      	ldr	r3, [r1, #16]
 801034c:	4607      	mov	r7, r0
 801034e:	4293      	cmp	r3, r2
 8010350:	bfb8      	it	lt
 8010352:	4613      	movlt	r3, r2
 8010354:	6033      	str	r3, [r6, #0]
 8010356:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801035a:	460c      	mov	r4, r1
 801035c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010360:	b10a      	cbz	r2, 8010366 <_printf_common+0x26>
 8010362:	3301      	adds	r3, #1
 8010364:	6033      	str	r3, [r6, #0]
 8010366:	6823      	ldr	r3, [r4, #0]
 8010368:	0699      	lsls	r1, r3, #26
 801036a:	bf42      	ittt	mi
 801036c:	6833      	ldrmi	r3, [r6, #0]
 801036e:	3302      	addmi	r3, #2
 8010370:	6033      	strmi	r3, [r6, #0]
 8010372:	6825      	ldr	r5, [r4, #0]
 8010374:	f015 0506 	ands.w	r5, r5, #6
 8010378:	d106      	bne.n	8010388 <_printf_common+0x48>
 801037a:	f104 0a19 	add.w	sl, r4, #25
 801037e:	68e3      	ldr	r3, [r4, #12]
 8010380:	6832      	ldr	r2, [r6, #0]
 8010382:	1a9b      	subs	r3, r3, r2
 8010384:	42ab      	cmp	r3, r5
 8010386:	dc28      	bgt.n	80103da <_printf_common+0x9a>
 8010388:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801038c:	1e13      	subs	r3, r2, #0
 801038e:	6822      	ldr	r2, [r4, #0]
 8010390:	bf18      	it	ne
 8010392:	2301      	movne	r3, #1
 8010394:	0692      	lsls	r2, r2, #26
 8010396:	d42d      	bmi.n	80103f4 <_printf_common+0xb4>
 8010398:	4649      	mov	r1, r9
 801039a:	4638      	mov	r0, r7
 801039c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80103a0:	47c0      	blx	r8
 80103a2:	3001      	adds	r0, #1
 80103a4:	d020      	beq.n	80103e8 <_printf_common+0xa8>
 80103a6:	6823      	ldr	r3, [r4, #0]
 80103a8:	68e5      	ldr	r5, [r4, #12]
 80103aa:	f003 0306 	and.w	r3, r3, #6
 80103ae:	2b04      	cmp	r3, #4
 80103b0:	bf18      	it	ne
 80103b2:	2500      	movne	r5, #0
 80103b4:	6832      	ldr	r2, [r6, #0]
 80103b6:	f04f 0600 	mov.w	r6, #0
 80103ba:	68a3      	ldr	r3, [r4, #8]
 80103bc:	bf08      	it	eq
 80103be:	1aad      	subeq	r5, r5, r2
 80103c0:	6922      	ldr	r2, [r4, #16]
 80103c2:	bf08      	it	eq
 80103c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80103c8:	4293      	cmp	r3, r2
 80103ca:	bfc4      	itt	gt
 80103cc:	1a9b      	subgt	r3, r3, r2
 80103ce:	18ed      	addgt	r5, r5, r3
 80103d0:	341a      	adds	r4, #26
 80103d2:	42b5      	cmp	r5, r6
 80103d4:	d11a      	bne.n	801040c <_printf_common+0xcc>
 80103d6:	2000      	movs	r0, #0
 80103d8:	e008      	b.n	80103ec <_printf_common+0xac>
 80103da:	2301      	movs	r3, #1
 80103dc:	4652      	mov	r2, sl
 80103de:	4649      	mov	r1, r9
 80103e0:	4638      	mov	r0, r7
 80103e2:	47c0      	blx	r8
 80103e4:	3001      	adds	r0, #1
 80103e6:	d103      	bne.n	80103f0 <_printf_common+0xb0>
 80103e8:	f04f 30ff 	mov.w	r0, #4294967295
 80103ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103f0:	3501      	adds	r5, #1
 80103f2:	e7c4      	b.n	801037e <_printf_common+0x3e>
 80103f4:	2030      	movs	r0, #48	; 0x30
 80103f6:	18e1      	adds	r1, r4, r3
 80103f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80103fc:	1c5a      	adds	r2, r3, #1
 80103fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010402:	4422      	add	r2, r4
 8010404:	3302      	adds	r3, #2
 8010406:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801040a:	e7c5      	b.n	8010398 <_printf_common+0x58>
 801040c:	2301      	movs	r3, #1
 801040e:	4622      	mov	r2, r4
 8010410:	4649      	mov	r1, r9
 8010412:	4638      	mov	r0, r7
 8010414:	47c0      	blx	r8
 8010416:	3001      	adds	r0, #1
 8010418:	d0e6      	beq.n	80103e8 <_printf_common+0xa8>
 801041a:	3601      	adds	r6, #1
 801041c:	e7d9      	b.n	80103d2 <_printf_common+0x92>
	...

08010420 <_printf_i>:
 8010420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010424:	460c      	mov	r4, r1
 8010426:	7e27      	ldrb	r7, [r4, #24]
 8010428:	4691      	mov	r9, r2
 801042a:	2f78      	cmp	r7, #120	; 0x78
 801042c:	4680      	mov	r8, r0
 801042e:	469a      	mov	sl, r3
 8010430:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010432:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010436:	d807      	bhi.n	8010448 <_printf_i+0x28>
 8010438:	2f62      	cmp	r7, #98	; 0x62
 801043a:	d80a      	bhi.n	8010452 <_printf_i+0x32>
 801043c:	2f00      	cmp	r7, #0
 801043e:	f000 80d9 	beq.w	80105f4 <_printf_i+0x1d4>
 8010442:	2f58      	cmp	r7, #88	; 0x58
 8010444:	f000 80a4 	beq.w	8010590 <_printf_i+0x170>
 8010448:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801044c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010450:	e03a      	b.n	80104c8 <_printf_i+0xa8>
 8010452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010456:	2b15      	cmp	r3, #21
 8010458:	d8f6      	bhi.n	8010448 <_printf_i+0x28>
 801045a:	a001      	add	r0, pc, #4	; (adr r0, 8010460 <_printf_i+0x40>)
 801045c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010460:	080104b9 	.word	0x080104b9
 8010464:	080104cd 	.word	0x080104cd
 8010468:	08010449 	.word	0x08010449
 801046c:	08010449 	.word	0x08010449
 8010470:	08010449 	.word	0x08010449
 8010474:	08010449 	.word	0x08010449
 8010478:	080104cd 	.word	0x080104cd
 801047c:	08010449 	.word	0x08010449
 8010480:	08010449 	.word	0x08010449
 8010484:	08010449 	.word	0x08010449
 8010488:	08010449 	.word	0x08010449
 801048c:	080105db 	.word	0x080105db
 8010490:	080104fd 	.word	0x080104fd
 8010494:	080105bd 	.word	0x080105bd
 8010498:	08010449 	.word	0x08010449
 801049c:	08010449 	.word	0x08010449
 80104a0:	080105fd 	.word	0x080105fd
 80104a4:	08010449 	.word	0x08010449
 80104a8:	080104fd 	.word	0x080104fd
 80104ac:	08010449 	.word	0x08010449
 80104b0:	08010449 	.word	0x08010449
 80104b4:	080105c5 	.word	0x080105c5
 80104b8:	680b      	ldr	r3, [r1, #0]
 80104ba:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80104be:	1d1a      	adds	r2, r3, #4
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	600a      	str	r2, [r1, #0]
 80104c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80104c8:	2301      	movs	r3, #1
 80104ca:	e0a4      	b.n	8010616 <_printf_i+0x1f6>
 80104cc:	6825      	ldr	r5, [r4, #0]
 80104ce:	6808      	ldr	r0, [r1, #0]
 80104d0:	062e      	lsls	r6, r5, #24
 80104d2:	f100 0304 	add.w	r3, r0, #4
 80104d6:	d50a      	bpl.n	80104ee <_printf_i+0xce>
 80104d8:	6805      	ldr	r5, [r0, #0]
 80104da:	600b      	str	r3, [r1, #0]
 80104dc:	2d00      	cmp	r5, #0
 80104de:	da03      	bge.n	80104e8 <_printf_i+0xc8>
 80104e0:	232d      	movs	r3, #45	; 0x2d
 80104e2:	426d      	negs	r5, r5
 80104e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104e8:	230a      	movs	r3, #10
 80104ea:	485e      	ldr	r0, [pc, #376]	; (8010664 <_printf_i+0x244>)
 80104ec:	e019      	b.n	8010522 <_printf_i+0x102>
 80104ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80104f2:	6805      	ldr	r5, [r0, #0]
 80104f4:	600b      	str	r3, [r1, #0]
 80104f6:	bf18      	it	ne
 80104f8:	b22d      	sxthne	r5, r5
 80104fa:	e7ef      	b.n	80104dc <_printf_i+0xbc>
 80104fc:	680b      	ldr	r3, [r1, #0]
 80104fe:	6825      	ldr	r5, [r4, #0]
 8010500:	1d18      	adds	r0, r3, #4
 8010502:	6008      	str	r0, [r1, #0]
 8010504:	0628      	lsls	r0, r5, #24
 8010506:	d501      	bpl.n	801050c <_printf_i+0xec>
 8010508:	681d      	ldr	r5, [r3, #0]
 801050a:	e002      	b.n	8010512 <_printf_i+0xf2>
 801050c:	0669      	lsls	r1, r5, #25
 801050e:	d5fb      	bpl.n	8010508 <_printf_i+0xe8>
 8010510:	881d      	ldrh	r5, [r3, #0]
 8010512:	2f6f      	cmp	r7, #111	; 0x6f
 8010514:	bf0c      	ite	eq
 8010516:	2308      	moveq	r3, #8
 8010518:	230a      	movne	r3, #10
 801051a:	4852      	ldr	r0, [pc, #328]	; (8010664 <_printf_i+0x244>)
 801051c:	2100      	movs	r1, #0
 801051e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010522:	6866      	ldr	r6, [r4, #4]
 8010524:	2e00      	cmp	r6, #0
 8010526:	bfa8      	it	ge
 8010528:	6821      	ldrge	r1, [r4, #0]
 801052a:	60a6      	str	r6, [r4, #8]
 801052c:	bfa4      	itt	ge
 801052e:	f021 0104 	bicge.w	r1, r1, #4
 8010532:	6021      	strge	r1, [r4, #0]
 8010534:	b90d      	cbnz	r5, 801053a <_printf_i+0x11a>
 8010536:	2e00      	cmp	r6, #0
 8010538:	d04d      	beq.n	80105d6 <_printf_i+0x1b6>
 801053a:	4616      	mov	r6, r2
 801053c:	fbb5 f1f3 	udiv	r1, r5, r3
 8010540:	fb03 5711 	mls	r7, r3, r1, r5
 8010544:	5dc7      	ldrb	r7, [r0, r7]
 8010546:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801054a:	462f      	mov	r7, r5
 801054c:	42bb      	cmp	r3, r7
 801054e:	460d      	mov	r5, r1
 8010550:	d9f4      	bls.n	801053c <_printf_i+0x11c>
 8010552:	2b08      	cmp	r3, #8
 8010554:	d10b      	bne.n	801056e <_printf_i+0x14e>
 8010556:	6823      	ldr	r3, [r4, #0]
 8010558:	07df      	lsls	r7, r3, #31
 801055a:	d508      	bpl.n	801056e <_printf_i+0x14e>
 801055c:	6923      	ldr	r3, [r4, #16]
 801055e:	6861      	ldr	r1, [r4, #4]
 8010560:	4299      	cmp	r1, r3
 8010562:	bfde      	ittt	le
 8010564:	2330      	movle	r3, #48	; 0x30
 8010566:	f806 3c01 	strble.w	r3, [r6, #-1]
 801056a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801056e:	1b92      	subs	r2, r2, r6
 8010570:	6122      	str	r2, [r4, #16]
 8010572:	464b      	mov	r3, r9
 8010574:	4621      	mov	r1, r4
 8010576:	4640      	mov	r0, r8
 8010578:	f8cd a000 	str.w	sl, [sp]
 801057c:	aa03      	add	r2, sp, #12
 801057e:	f7ff fedf 	bl	8010340 <_printf_common>
 8010582:	3001      	adds	r0, #1
 8010584:	d14c      	bne.n	8010620 <_printf_i+0x200>
 8010586:	f04f 30ff 	mov.w	r0, #4294967295
 801058a:	b004      	add	sp, #16
 801058c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010590:	4834      	ldr	r0, [pc, #208]	; (8010664 <_printf_i+0x244>)
 8010592:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010596:	680e      	ldr	r6, [r1, #0]
 8010598:	6823      	ldr	r3, [r4, #0]
 801059a:	f856 5b04 	ldr.w	r5, [r6], #4
 801059e:	061f      	lsls	r7, r3, #24
 80105a0:	600e      	str	r6, [r1, #0]
 80105a2:	d514      	bpl.n	80105ce <_printf_i+0x1ae>
 80105a4:	07d9      	lsls	r1, r3, #31
 80105a6:	bf44      	itt	mi
 80105a8:	f043 0320 	orrmi.w	r3, r3, #32
 80105ac:	6023      	strmi	r3, [r4, #0]
 80105ae:	b91d      	cbnz	r5, 80105b8 <_printf_i+0x198>
 80105b0:	6823      	ldr	r3, [r4, #0]
 80105b2:	f023 0320 	bic.w	r3, r3, #32
 80105b6:	6023      	str	r3, [r4, #0]
 80105b8:	2310      	movs	r3, #16
 80105ba:	e7af      	b.n	801051c <_printf_i+0xfc>
 80105bc:	6823      	ldr	r3, [r4, #0]
 80105be:	f043 0320 	orr.w	r3, r3, #32
 80105c2:	6023      	str	r3, [r4, #0]
 80105c4:	2378      	movs	r3, #120	; 0x78
 80105c6:	4828      	ldr	r0, [pc, #160]	; (8010668 <_printf_i+0x248>)
 80105c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80105cc:	e7e3      	b.n	8010596 <_printf_i+0x176>
 80105ce:	065e      	lsls	r6, r3, #25
 80105d0:	bf48      	it	mi
 80105d2:	b2ad      	uxthmi	r5, r5
 80105d4:	e7e6      	b.n	80105a4 <_printf_i+0x184>
 80105d6:	4616      	mov	r6, r2
 80105d8:	e7bb      	b.n	8010552 <_printf_i+0x132>
 80105da:	680b      	ldr	r3, [r1, #0]
 80105dc:	6826      	ldr	r6, [r4, #0]
 80105de:	1d1d      	adds	r5, r3, #4
 80105e0:	6960      	ldr	r0, [r4, #20]
 80105e2:	600d      	str	r5, [r1, #0]
 80105e4:	0635      	lsls	r5, r6, #24
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	d501      	bpl.n	80105ee <_printf_i+0x1ce>
 80105ea:	6018      	str	r0, [r3, #0]
 80105ec:	e002      	b.n	80105f4 <_printf_i+0x1d4>
 80105ee:	0671      	lsls	r1, r6, #25
 80105f0:	d5fb      	bpl.n	80105ea <_printf_i+0x1ca>
 80105f2:	8018      	strh	r0, [r3, #0]
 80105f4:	2300      	movs	r3, #0
 80105f6:	4616      	mov	r6, r2
 80105f8:	6123      	str	r3, [r4, #16]
 80105fa:	e7ba      	b.n	8010572 <_printf_i+0x152>
 80105fc:	680b      	ldr	r3, [r1, #0]
 80105fe:	1d1a      	adds	r2, r3, #4
 8010600:	600a      	str	r2, [r1, #0]
 8010602:	681e      	ldr	r6, [r3, #0]
 8010604:	2100      	movs	r1, #0
 8010606:	4630      	mov	r0, r6
 8010608:	6862      	ldr	r2, [r4, #4]
 801060a:	f000 f82f 	bl	801066c <memchr>
 801060e:	b108      	cbz	r0, 8010614 <_printf_i+0x1f4>
 8010610:	1b80      	subs	r0, r0, r6
 8010612:	6060      	str	r0, [r4, #4]
 8010614:	6863      	ldr	r3, [r4, #4]
 8010616:	6123      	str	r3, [r4, #16]
 8010618:	2300      	movs	r3, #0
 801061a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801061e:	e7a8      	b.n	8010572 <_printf_i+0x152>
 8010620:	4632      	mov	r2, r6
 8010622:	4649      	mov	r1, r9
 8010624:	4640      	mov	r0, r8
 8010626:	6923      	ldr	r3, [r4, #16]
 8010628:	47d0      	blx	sl
 801062a:	3001      	adds	r0, #1
 801062c:	d0ab      	beq.n	8010586 <_printf_i+0x166>
 801062e:	6823      	ldr	r3, [r4, #0]
 8010630:	079b      	lsls	r3, r3, #30
 8010632:	d413      	bmi.n	801065c <_printf_i+0x23c>
 8010634:	68e0      	ldr	r0, [r4, #12]
 8010636:	9b03      	ldr	r3, [sp, #12]
 8010638:	4298      	cmp	r0, r3
 801063a:	bfb8      	it	lt
 801063c:	4618      	movlt	r0, r3
 801063e:	e7a4      	b.n	801058a <_printf_i+0x16a>
 8010640:	2301      	movs	r3, #1
 8010642:	4632      	mov	r2, r6
 8010644:	4649      	mov	r1, r9
 8010646:	4640      	mov	r0, r8
 8010648:	47d0      	blx	sl
 801064a:	3001      	adds	r0, #1
 801064c:	d09b      	beq.n	8010586 <_printf_i+0x166>
 801064e:	3501      	adds	r5, #1
 8010650:	68e3      	ldr	r3, [r4, #12]
 8010652:	9903      	ldr	r1, [sp, #12]
 8010654:	1a5b      	subs	r3, r3, r1
 8010656:	42ab      	cmp	r3, r5
 8010658:	dcf2      	bgt.n	8010640 <_printf_i+0x220>
 801065a:	e7eb      	b.n	8010634 <_printf_i+0x214>
 801065c:	2500      	movs	r5, #0
 801065e:	f104 0619 	add.w	r6, r4, #25
 8010662:	e7f5      	b.n	8010650 <_printf_i+0x230>
 8010664:	080111b1 	.word	0x080111b1
 8010668:	080111c2 	.word	0x080111c2

0801066c <memchr>:
 801066c:	4603      	mov	r3, r0
 801066e:	b510      	push	{r4, lr}
 8010670:	b2c9      	uxtb	r1, r1
 8010672:	4402      	add	r2, r0
 8010674:	4293      	cmp	r3, r2
 8010676:	4618      	mov	r0, r3
 8010678:	d101      	bne.n	801067e <memchr+0x12>
 801067a:	2000      	movs	r0, #0
 801067c:	e003      	b.n	8010686 <memchr+0x1a>
 801067e:	7804      	ldrb	r4, [r0, #0]
 8010680:	3301      	adds	r3, #1
 8010682:	428c      	cmp	r4, r1
 8010684:	d1f6      	bne.n	8010674 <memchr+0x8>
 8010686:	bd10      	pop	{r4, pc}

08010688 <memmove>:
 8010688:	4288      	cmp	r0, r1
 801068a:	b510      	push	{r4, lr}
 801068c:	eb01 0402 	add.w	r4, r1, r2
 8010690:	d902      	bls.n	8010698 <memmove+0x10>
 8010692:	4284      	cmp	r4, r0
 8010694:	4623      	mov	r3, r4
 8010696:	d807      	bhi.n	80106a8 <memmove+0x20>
 8010698:	1e43      	subs	r3, r0, #1
 801069a:	42a1      	cmp	r1, r4
 801069c:	d008      	beq.n	80106b0 <memmove+0x28>
 801069e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80106a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80106a6:	e7f8      	b.n	801069a <memmove+0x12>
 80106a8:	4601      	mov	r1, r0
 80106aa:	4402      	add	r2, r0
 80106ac:	428a      	cmp	r2, r1
 80106ae:	d100      	bne.n	80106b2 <memmove+0x2a>
 80106b0:	bd10      	pop	{r4, pc}
 80106b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80106b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80106ba:	e7f7      	b.n	80106ac <memmove+0x24>

080106bc <_realloc_r>:
 80106bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106be:	4607      	mov	r7, r0
 80106c0:	4614      	mov	r4, r2
 80106c2:	460e      	mov	r6, r1
 80106c4:	b921      	cbnz	r1, 80106d0 <_realloc_r+0x14>
 80106c6:	4611      	mov	r1, r2
 80106c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80106cc:	f7ff bc44 	b.w	800ff58 <_malloc_r>
 80106d0:	b922      	cbnz	r2, 80106dc <_realloc_r+0x20>
 80106d2:	f7ff fbf5 	bl	800fec0 <_free_r>
 80106d6:	4625      	mov	r5, r4
 80106d8:	4628      	mov	r0, r5
 80106da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106dc:	f000 f814 	bl	8010708 <_malloc_usable_size_r>
 80106e0:	42a0      	cmp	r0, r4
 80106e2:	d20f      	bcs.n	8010704 <_realloc_r+0x48>
 80106e4:	4621      	mov	r1, r4
 80106e6:	4638      	mov	r0, r7
 80106e8:	f7ff fc36 	bl	800ff58 <_malloc_r>
 80106ec:	4605      	mov	r5, r0
 80106ee:	2800      	cmp	r0, #0
 80106f0:	d0f2      	beq.n	80106d8 <_realloc_r+0x1c>
 80106f2:	4631      	mov	r1, r6
 80106f4:	4622      	mov	r2, r4
 80106f6:	f7ff fbcd 	bl	800fe94 <memcpy>
 80106fa:	4631      	mov	r1, r6
 80106fc:	4638      	mov	r0, r7
 80106fe:	f7ff fbdf 	bl	800fec0 <_free_r>
 8010702:	e7e9      	b.n	80106d8 <_realloc_r+0x1c>
 8010704:	4635      	mov	r5, r6
 8010706:	e7e7      	b.n	80106d8 <_realloc_r+0x1c>

08010708 <_malloc_usable_size_r>:
 8010708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801070c:	1f18      	subs	r0, r3, #4
 801070e:	2b00      	cmp	r3, #0
 8010710:	bfbc      	itt	lt
 8010712:	580b      	ldrlt	r3, [r1, r0]
 8010714:	18c0      	addlt	r0, r0, r3
 8010716:	4770      	bx	lr

08010718 <_init>:
 8010718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801071a:	bf00      	nop
 801071c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801071e:	bc08      	pop	{r3}
 8010720:	469e      	mov	lr, r3
 8010722:	4770      	bx	lr

08010724 <_fini>:
 8010724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010726:	bf00      	nop
 8010728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801072a:	bc08      	pop	{r3}
 801072c:	469e      	mov	lr, r3
 801072e:	4770      	bx	lr
