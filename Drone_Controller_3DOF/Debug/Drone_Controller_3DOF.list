
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a78  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa4  08010b88  08010b88  00020b88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801162c  0801162c  00030080  2**0
                  CONTENTS
  4 .ARM          00000000  0801162c  0801162c  00030080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801162c  0801162c  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801162c  0801162c  0002162c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08011634  08011634  00021634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801163c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019d4  20000080  080116bc  00030080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001a54  080116bc  00031a54  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bbdd  00000000  00000000  000300a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054bc  00000000  00000000  0005bc86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001818  00000000  00000000  00061148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001678  00000000  00000000  00062960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e500  00000000  00000000  00063fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001efe6  00000000  00000000  000824d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096bd7  00000000  00000000  000a14be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00138095  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007134  00000000  00000000  001380e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08010b70 	.word	0x08010b70

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08010b70 	.word	0x08010b70

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <__aeabi_f2uiz>:
 8001148:	0042      	lsls	r2, r0, #1
 800114a:	d20e      	bcs.n	800116a <__aeabi_f2uiz+0x22>
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001150:	d30b      	bcc.n	800116a <__aeabi_f2uiz+0x22>
 8001152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d409      	bmi.n	8001170 <__aeabi_f2uiz+0x28>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001164:	fa23 f002 	lsr.w	r0, r3, r2
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2uiz+0x32>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d102      	bne.n	8001180 <__aeabi_f2uiz+0x38>
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	4770      	bx	lr
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize() {
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af04      	add	r7, sp, #16
    devAddr = HMC5883L_DEFAULT_ADDRESS << 1;
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HMC5883L_initialize+0x44>)
 8001190:	223c      	movs	r2, #60	; 0x3c
 8001192:	701a      	strb	r2, [r3, #0]
    // write CONFIG_A register
    uint8_t config = (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
 8001194:	2378      	movs	r3, #120	; 0x78
 8001196:	71fb      	strb	r3, [r7, #7]
            		 (HMC5883L_RATE_75     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
					 (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1));
    HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_CONFIG_A, 1, &config, 1, I2C_TIMEOUT);
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HMC5883L_initialize+0x44>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b299      	uxth	r1, r3
 800119e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	2301      	movs	r3, #1
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	1dfb      	adds	r3, r7, #7
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	2200      	movs	r2, #0
 80011b0:	4807      	ldr	r0, [pc, #28]	; (80011d0 <HMC5883L_initialize+0x48>)
 80011b2:	f006 f8d5 	bl	8007360 <HAL_I2C_Mem_Write>

    // write CONFIG_B register
    HMC5883L_setGain(HMC5883L_GAIN_1090);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f000 f80c 	bl	80011d4 <HMC5883L_setGain>

    // write MODE register
    HMC5883L_setMode(HMC5883L_MODE_CONTINUOUS);
 80011bc:	2000      	movs	r0, #0
 80011be:	f000 f829 	bl	8001214 <HMC5883L_setMode>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000009c 	.word	0x2000009c
 80011d0:	200016e8 	.word	0x200016e8

080011d4 <HMC5883L_setGain>:
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */

void HMC5883L_setGain(uint8_t gain) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af04      	add	r7, sp, #16
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
	gain = gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	015b      	lsls	r3, r3, #5
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_CONFIG_B, 1, &gain, 1, I2C_TIMEOUT);
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HMC5883L_setGain+0x38>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b299      	uxth	r1, r3
 80011ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	2301      	movs	r3, #1
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2301      	movs	r3, #1
 80011fc:	2201      	movs	r2, #1
 80011fe:	4804      	ldr	r0, [pc, #16]	; (8001210 <HMC5883L_setGain+0x3c>)
 8001200:	f006 f8ae 	bl	8007360 <HAL_I2C_Mem_Write>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2000009c 	.word	0x2000009c
 8001210:	200016e8 	.word	0x200016e8

08001214 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af04      	add	r7, sp, #16
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
	newMode = newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, devAddr, HMC5883L_RA_MODE, 1, &newMode, 1, I2C_TIMEOUT);
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HMC5883L_setMode+0x3c>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b299      	uxth	r1, r3
 8001228:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	2301      	movs	r3, #1
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	2202      	movs	r2, #2
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <HMC5883L_setMode+0x40>)
 800123c:	f006 f890 	bl	8007360 <HAL_I2C_Mem_Write>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 8001240:	79fa      	ldrb	r2, [r7, #7]
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HMC5883L_setMode+0x44>)
 8001244:	701a      	strb	r2, [r3, #0]
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2000009c 	.word	0x2000009c
 8001254:	200016e8 	.word	0x200016e8
 8001258:	200000a6 	.word	0x200000a6

0800125c <HMC5883L_getMagData>:
 * @param x 16-bit signed integer container for X-axis heading
 * @param y 16-bit signed integer container for Y-axis heading
 * @param z 16-bit signed integer container for Z-axis heading
 * @see HMC5883L_RA_DATAX_H
 */
void HMC5883L_getMagData(int16_t *x, int16_t *y, int16_t *z) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af04      	add	r7, sp, #16
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, devAddr, HMC5883L_RA_DATAX_H, 1, buffer, 6, I2C_TIMEOUT);
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <HMC5883L_getMagData+0x84>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b299      	uxth	r1, r3
 800126e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001272:	9302      	str	r3, [sp, #8]
 8001274:	2306      	movs	r3, #6
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <HMC5883L_getMagData+0x88>)
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2301      	movs	r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	4819      	ldr	r0, [pc, #100]	; (80012e8 <HMC5883L_getMagData+0x8c>)
 8001282:	f006 f967 	bl	8007554 <HAL_I2C_Mem_Read>
    if (mode == HMC5883L_MODE_SINGLE) HMC5883L_setMode(HMC5883L_MODE_SINGLE);
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <HMC5883L_getMagData+0x90>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d102      	bne.n	8001294 <HMC5883L_getMagData+0x38>
 800128e:	2001      	movs	r0, #1
 8001290:	f7ff ffc0 	bl	8001214 <HMC5883L_setMode>
    *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <HMC5883L_getMagData+0x88>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HMC5883L_getMagData+0x88>)
 800129e:	785b      	ldrb	r3, [r3, #1]
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[4]) << 8) | buffer[5];
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HMC5883L_getMagData+0x88>)
 80012ac:	791b      	ldrb	r3, [r3, #4]
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HMC5883L_getMagData+0x88>)
 80012b4:	795b      	ldrb	r3, [r3, #5]
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[2]) << 8) | buffer[3];
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HMC5883L_getMagData+0x88>)
 80012c2:	789b      	ldrb	r3, [r3, #2]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HMC5883L_getMagData+0x88>)
 80012ca:	78db      	ldrb	r3, [r3, #3]
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	801a      	strh	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000009c 	.word	0x2000009c
 80012e4:	200000a0 	.word	0x200000a0
 80012e8:	200016e8 	.word	0x200016e8
 80012ec:	200000a6 	.word	0x200000a6

080012f0 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <Ringbuf_init+0x38>)
 80012f6:	4a0d      	ldr	r2, [pc, #52]	; (800132c <Ringbuf_init+0x3c>)
 80012f8:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <Ringbuf_init+0x40>)
 80012fc:	4a0d      	ldr	r2, [pc, #52]	; (8001334 <Ringbuf_init+0x44>)
 80012fe:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001300:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <Ringbuf_init+0x48>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	695a      	ldr	r2, [r3, #20]
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <Ringbuf_init+0x48>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0201 	orr.w	r2, r2, #1
 800130e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <Ringbuf_init+0x48>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <Ringbuf_init+0x48>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0220 	orr.w	r2, r2, #32
 800131e:	60da      	str	r2, [r3, #12]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	200016e0 	.word	0x200016e0
 800132c:	200000a8 	.word	0x200000a8
 8001330:	200016dc 	.word	0x200016dc
 8001334:	200004b0 	.word	0x200004b0
 8001338:	200018f8 	.word	0x200018f8

0800133c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800134e:	3301      	adds	r3, #1
 8001350:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001354:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	429a      	cmp	r2, r3
 8001360:	d009      	beq.n	8001376 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	79f9      	ldrb	r1, [r7, #7]
 800136c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  }
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <Uart_isr>:

}


void Uart_isr (UART_HandleTypeDef *huart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f003 0320 	and.w	r3, r3, #32
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d013      	beq.n	80013ca <Uart_isr+0x4a>
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	f003 0320 	and.w	r3, r3, #32
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00e      	beq.n	80013ca <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80013ba:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <Uart_isr+0xb4>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	4611      	mov	r1, r2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ffba 	bl	800133c <store_char>
        return;
 80013c8:	e031      	b.n	800142e <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d02c      	beq.n	800142e <Uart_isr+0xae>
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d027      	beq.n	800142e <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <Uart_isr+0xb8>)
 80013e0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <Uart_isr+0xb8>)
 80013e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d108      	bne.n	8001400 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013fc:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80013fe:	e015      	b.n	800142c <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <Uart_isr+0xb8>)
 8001402:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001406:	4a0c      	ldr	r2, [pc, #48]	; (8001438 <Uart_isr+0xb8>)
 8001408:	5cd3      	ldrb	r3, [r2, r3]
 800140a:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <Uart_isr+0xb8>)
 800140e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001412:	3301      	adds	r3, #1
 8001414:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <Uart_isr+0xb8>)
 800141a:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    	      huart->Instance->SR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	7bba      	ldrb	r2, [r7, #14]
 800142a:	605a      	str	r2, [r3, #4]
    	return;
 800142c:	bf00      	nop
    }
}
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200016e0 	.word	0x200016e0
 8001438:	200004b0 	.word	0x200004b0

0800143c <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8001446:	2300      	movs	r3, #0
 8001448:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 800144a:	2301      	movs	r3, #1
 800144c:	9302      	str	r3, [sp, #8]
 800144e:	2301      	movs	r3, #1
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	1dbb      	adds	r3, r7, #6
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2301      	movs	r3, #1
 8001458:	22d0      	movs	r2, #208	; 0xd0
 800145a:	21ef      	movs	r1, #239	; 0xef
 800145c:	4806      	ldr	r0, [pc, #24]	; (8001478 <read_chip_id+0x3c>)
 800145e:	f006 f879 	bl	8007554 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8001462:	79bb      	ldrb	r3, [r7, #6]
 8001464:	2b55      	cmp	r3, #85	; 0x55
 8001466:	d001      	beq.n	800146c <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8001468:	2301      	movs	r3, #1
 800146a:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 800146c:	79fb      	ldrb	r3, [r7, #7]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200016e8 	.word	0x200016e8

0800147c <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af04      	add	r7, sp, #16
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8001488:	2300      	movs	r3, #0
 800148a:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	2b03      	cmp	r3, #3
 8001490:	d81a      	bhi.n	80014c8 <set_oss+0x4c>
 8001492:	a201      	add	r2, pc, #4	; (adr r2, 8001498 <set_oss+0x1c>)
 8001494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001498:	080014a9 	.word	0x080014a9
 800149c:	080014b1 	.word	0x080014b1
 80014a0:	080014b9 	.word	0x080014b9
 80014a4:	080014c1 	.word	0x080014c1
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2205      	movs	r2, #5
 80014ac:	705a      	strb	r2, [r3, #1]
			break;
 80014ae:	e00f      	b.n	80014d0 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2208      	movs	r2, #8
 80014b4:	705a      	strb	r2, [r3, #1]
			break;
 80014b6:	e00b      	b.n	80014d0 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	220e      	movs	r2, #14
 80014bc:	705a      	strb	r2, [r3, #1]
			break;
 80014be:	e007      	b.n	80014d0 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	221a      	movs	r2, #26
 80014c4:	705a      	strb	r2, [r3, #1]
			break;
 80014c6:	e003      	b.n	80014d0 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2208      	movs	r2, #8
 80014cc:	705a      	strb	r2, [r3, #1]
			break;
 80014ce:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	78fa      	ldrb	r2, [r7, #3]
 80014d4:	701a      	strb	r2, [r3, #0]

	//BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));

	ratio = (ratio & 0x3) << 6;
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	019b      	lsls	r3, r3, #6
 80014da:	70fb      	strb	r3, [r7, #3]
	in_buff[1] = ratio;
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 80014e0:	2301      	movs	r3, #1
 80014e2:	9302      	str	r3, [sp, #8]
 80014e4:	2302      	movs	r3, #2
 80014e6:	9301      	str	r3, [sp, #4]
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2301      	movs	r3, #1
 80014f0:	22f4      	movs	r2, #244	; 0xf4
 80014f2:	21ee      	movs	r1, #238	; 0xee
 80014f4:	4803      	ldr	r0, [pc, #12]	; (8001504 <set_oss+0x88>)
 80014f6:	f005 ff33 	bl	8007360 <HAL_I2C_Mem_Write>
}
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200016e8 	.word	0x200016e8

08001508 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08e      	sub	sp, #56	; 0x38
 800150c:	af04      	add	r7, sp, #16
 800150e:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8001510:	2300      	movs	r3, #0
 8001512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8001530:	2301      	movs	r3, #1
 8001532:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 8001536:	2301      	movs	r3, #1
 8001538:	9302      	str	r3, [sp, #8]
 800153a:	2316      	movs	r3, #22
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2301      	movs	r3, #1
 8001546:	22aa      	movs	r2, #170	; 0xaa
 8001548:	21ef      	movs	r1, #239	; 0xef
 800154a:	4828      	ldr	r0, [pc, #160]	; (80015ec <read_calib_data+0xe4>)
 800154c:	f006 f802 	bl	8007554 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001550:	2300      	movs	r3, #0
 8001552:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001556:	e03e      	b.n	80015d6 <read_calib_data+0xce>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 8001558:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001562:	4413      	add	r3, r2
 8001564:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	b219      	sxth	r1, r3
 800156c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001570:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001574:	4413      	add	r3, r2
 8001576:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800157a:	b21a      	sxth	r2, r3
 800157c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	4403      	add	r3, r0
 8001586:	430a      	orrs	r2, r1
 8001588:	b212      	sxth	r2, r2
 800158a:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 800158c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159a:	2b00      	cmp	r3, #0
 800159c:	bf0c      	ite	eq
 800159e:	2301      	moveq	r3, #1
 80015a0:	2300      	movne	r3, #0
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	440b      	add	r3, r1
 80015ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b6:	bf0c      	ite	eq
 80015b8:	2301      	moveq	r3, #1
 80015ba:	2300      	movne	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	4313      	orrs	r3, r2
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <read_calib_data+0xc4>
		{
			ret_val = GET_CALIB_ERR;
 80015c6:	2302      	movs	r3, #2
 80015c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80015cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015d0:	3301      	adds	r3, #1
 80015d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015da:	2b0b      	cmp	r3, #11
 80015dc:	d9bc      	bls.n	8001558 <read_calib_data+0x50>
		}
	}

	return ret_val;
 80015de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3728      	adds	r7, #40	; 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200016e8 	.word	0x200016e8

080015f0 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2204      	movs	r2, #4
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f00e fe82 	bl	8010308 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8001604:	687c      	ldr	r4, [r7, #4]
 8001606:	f7ff ff19 	bl	800143c <read_chip_id>
 800160a:	4603      	mov	r3, r0
 800160c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp->err = read_calib_data ((short *)&bmp->calib);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	687c      	ldr	r4, [r7, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff77 	bl	8001508 <read_calib_data>
 800161a:	4603      	mov	r3, r0
 800161c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3338      	adds	r3, #56	; 0x38
 8001624:	2101      	movs	r1, #1
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff28 	bl	800147c <set_oss>
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bd90      	pop	{r4, r7, pc}

08001634 <write_ut>:

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
}

void write_ut (void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
	out_buff[0] = BMP_SET_TEMP_CONV;
 800163a:	232e      	movs	r3, #46	; 0x2e
 800163c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800163e:	2301      	movs	r3, #1
 8001640:	9302      	str	r3, [sp, #8]
 8001642:	2301      	movs	r3, #1
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2301      	movs	r3, #1
 800164c:	22f4      	movs	r2, #244	; 0xf4
 800164e:	21ee      	movs	r1, #238	; 0xee
 8001650:	4803      	ldr	r0, [pc, #12]	; (8001660 <write_ut+0x2c>)
 8001652:	f005 fe85 	bl	8007360 <HAL_I2C_Mem_Write>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200016e8 	.word	0x200016e8

08001664 <read_ut>:

int32_t read_ut (void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 800166a:	2301      	movs	r3, #1
 800166c:	9302      	str	r3, [sp, #8]
 800166e:	2302      	movs	r3, #2
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2301      	movs	r3, #1
 8001678:	22f6      	movs	r2, #246	; 0xf6
 800167a:	21ef      	movs	r1, #239	; 0xef
 800167c:	4805      	ldr	r0, [pc, #20]	; (8001694 <read_ut+0x30>)
 800167e:	f005 ff69 	bl	8007554 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 8001682:	793b      	ldrb	r3, [r7, #4]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	797a      	ldrb	r2, [r7, #5]
 8001688:	4313      	orrs	r3, r2
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200016e8 	.word	0x200016e8

08001698 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fd22 	bl	80010fc <__aeabi_f2iz>
 80016b8:	4602      	mov	r2, r0
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	895b      	ldrh	r3, [r3, #10]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	8912      	ldrh	r2, [r2, #8]
 80016c4:	fb02 f303 	mul.w	r3, r2, r3
 80016c8:	13db      	asrs	r3, r3, #15
 80016ca:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80016d2:	02da      	lsls	r2, r3, #11
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80016da:	4619      	mov	r1, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	440b      	add	r3, r1
 80016e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80016e4:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	441a      	add	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	3308      	adds	r3, #8
 80016f6:	111b      	asrs	r3, r3, #4
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff facf 	bl	8000c9c <__aeabi_i2f>
 80016fe:	4603      	mov	r3, r0
 8001700:	490e      	ldr	r1, [pc, #56]	; (800173c <get_temp+0xa4>)
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fb1e 	bl	8000d44 <__aeabi_fmul>
 8001708:	4603      	mov	r3, r0
 800170a:	60fb      	str	r3, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 800170c:	490c      	ldr	r1, [pc, #48]	; (8001740 <get_temp+0xa8>)
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f7ff fcc0 	bl	8001094 <__aeabi_fcmple>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d106      	bne.n	8001728 <get_temp+0x90>
 800171a:	490a      	ldr	r1, [pc, #40]	; (8001744 <get_temp+0xac>)
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f7ff fcc3 	bl	80010a8 <__aeabi_fcmpge>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <get_temp+0x98>
	{
		bmp->err = GET_TEMP_ERR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2203      	movs	r2, #3
 800172c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 8001730:	68fb      	ldr	r3, [r7, #12]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	3dcccccd 	.word	0x3dcccccd
 8001740:	c2200000 	.word	0xc2200000
 8001744:	42aa0000 	.word	0x42aa0000

08001748 <write_up>:
	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
	return up;
}

void write_up (void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af04      	add	r7, sp, #16
	uint8_t out_buff[3] = {0};
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <write_up+0x38>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	803b      	strh	r3, [r7, #0]
 8001754:	2300      	movs	r3, #0
 8001756:	70bb      	strb	r3, [r7, #2]
	long up = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	607b      	str	r3, [r7, #4]

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
	out_buff[0] = BMP_SET_PRESS_CONV;
 800175c:	2334      	movs	r3, #52	; 0x34
 800175e:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8001760:	2301      	movs	r3, #1
 8001762:	9302      	str	r3, [sp, #8]
 8001764:	2301      	movs	r3, #1
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	463b      	mov	r3, r7
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2301      	movs	r3, #1
 800176e:	22f4      	movs	r2, #244	; 0xf4
 8001770:	21ee      	movs	r1, #238	; 0xee
 8001772:	4804      	ldr	r0, [pc, #16]	; (8001784 <write_up+0x3c>)
 8001774:	f005 fdf4 	bl	8007360 <HAL_I2C_Mem_Write>
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	08010b88 	.word	0x08010b88
 8001784:	200016e8 	.word	0x200016e8

08001788 <read_up>:

int32_t read_up (oss_t oss)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af04      	add	r7, sp, #16
 800178e:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <read_up+0x54>)
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	813b      	strh	r3, [r7, #8]
 8001796:	2300      	movs	r3, #0
 8001798:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
	//Delay BMP_OSS1_CONV_TIME
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 800179e:	2301      	movs	r3, #1
 80017a0:	9302      	str	r3, [sp, #8]
 80017a2:	2303      	movs	r3, #3
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	f107 0308 	add.w	r3, r7, #8
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2301      	movs	r3, #1
 80017ae:	22f6      	movs	r2, #246	; 0xf6
 80017b0:	21ef      	movs	r1, #239	; 0xef
 80017b2:	480b      	ldr	r0, [pc, #44]	; (80017e0 <read_up+0x58>)
 80017b4:	f005 fece 	bl	8007554 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80017b8:	7a3b      	ldrb	r3, [r7, #8]
 80017ba:	041a      	lsls	r2, r3, #16
 80017bc:	7a7b      	ldrb	r3, [r7, #9]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	4413      	add	r3, r2
 80017c2:	7aba      	ldrb	r2, [r7, #10]
 80017c4:	441a      	add	r2, r3
 80017c6:	793b      	ldrb	r3, [r7, #4]
 80017c8:	f1c3 0308 	rsb	r3, r3, #8
 80017cc:	fa42 f303 	asr.w	r3, r2, r3
 80017d0:	60fb      	str	r3, [r7, #12]
	return up;
 80017d2:	68fb      	ldr	r3, [r7, #12]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	08010b88 	.word	0x08010b88
 80017e0:	200016e8 	.word	0x200016e8

080017e4 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 80017e4:	b084      	sub	sp, #16
 80017e6:	b480      	push	{r7}
 80017e8:	b089      	sub	sp, #36	; 0x24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80017f0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 80017fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017fe:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001802:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001804:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001808:	461a      	mov	r2, r3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	fb03 f303 	mul.w	r3, r3, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	da01      	bge.n	8001818 <get_pressure+0x34>
 8001814:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001818:	131b      	asrs	r3, r3, #12
 800181a:	fb03 f302 	mul.w	r3, r3, r2
 800181e:	2b00      	cmp	r3, #0
 8001820:	da01      	bge.n	8001826 <get_pressure+0x42>
 8001822:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001826:	12db      	asrs	r3, r3, #11
 8001828:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 800182a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800182e:	461a      	mov	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fb03 f302 	mul.w	r3, r3, r2
 8001836:	2b00      	cmp	r3, #0
 8001838:	da01      	bge.n	800183e <get_pressure+0x5a>
 800183a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800183e:	12db      	asrs	r3, r3, #11
 8001840:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4413      	add	r3, r2
 8001848:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 800184a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800184e:	009a      	lsls	r2, r3, #2
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4413      	add	r3, r2
 8001854:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001858:	4093      	lsls	r3, r2
 800185a:	3302      	adds	r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	da00      	bge.n	8001862 <get_pressure+0x7e>
 8001860:	3303      	adds	r3, #3
 8001862:	109b      	asrs	r3, r3, #2
 8001864:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 8001866:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800186a:	461a      	mov	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fb03 f302 	mul.w	r3, r3, r2
 8001872:	2b00      	cmp	r3, #0
 8001874:	da02      	bge.n	800187c <get_pressure+0x98>
 8001876:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800187a:	331f      	adds	r3, #31
 800187c:	135b      	asrs	r3, r3, #13
 800187e:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001880:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001884:	461a      	mov	r2, r3
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	fb03 f303 	mul.w	r3, r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	da01      	bge.n	8001894 <get_pressure+0xb0>
 8001890:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001894:	131b      	asrs	r3, r3, #12
 8001896:	fb03 f302 	mul.w	r3, r3, r2
 800189a:	2b00      	cmp	r3, #0
 800189c:	da02      	bge.n	80018a4 <get_pressure+0xc0>
 800189e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80018a2:	33ff      	adds	r3, #255	; 0xff
 80018a4:	141b      	asrs	r3, r3, #16
 80018a6:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4413      	add	r3, r2
 80018ae:	3302      	adds	r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	da00      	bge.n	80018b6 <get_pressure+0xd2>
 80018b4:	3303      	adds	r3, #3
 80018b6:	109b      	asrs	r3, r3, #2
 80018b8:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 80018ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018bc:	461a      	mov	r2, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80018c4:	fb03 f302 	mul.w	r3, r3, r2
 80018c8:	0bdb      	lsrs	r3, r3, #15
 80018ca:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80018cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ce:	461a      	mov	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80018d8:	4611      	mov	r1, r2
 80018da:	f24c 3250 	movw	r2, #50000	; 0xc350
 80018de:	410a      	asrs	r2, r1
 80018e0:	fb02 f303 	mul.w	r3, r2, r3
 80018e4:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db06      	blt.n	80018fa <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	005a      	lsls	r2, r3, #1
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	61fb      	str	r3, [r7, #28]
 80018f8:	e005      	b.n	8001906 <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	2b00      	cmp	r3, #0
 800190a:	da00      	bge.n	800190e <get_pressure+0x12a>
 800190c:	33ff      	adds	r3, #255	; 0xff
 800190e:	121b      	asrs	r3, r3, #8
 8001910:	461a      	mov	r2, r3
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	2b00      	cmp	r3, #0
 8001916:	da00      	bge.n	800191a <get_pressure+0x136>
 8001918:	33ff      	adds	r3, #255	; 0xff
 800191a:	121b      	asrs	r3, r3, #8
 800191c:	fb03 f302 	mul.w	r3, r3, r2
 8001920:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	f640 32de 	movw	r2, #3038	; 0xbde
 8001928:	fb02 f303 	mul.w	r3, r2, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	da02      	bge.n	8001936 <get_pressure+0x152>
 8001930:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001934:	33ff      	adds	r3, #255	; 0xff
 8001936:	141b      	asrs	r3, r3, #16
 8001938:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <get_pressure+0x194>)
 800193e:	fb02 f303 	mul.w	r3, r2, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	da02      	bge.n	800194c <get_pressure+0x168>
 8001946:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800194a:	33ff      	adds	r3, #255	; 0xff
 800194c:	141b      	asrs	r3, r3, #16
 800194e:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4413      	add	r3, r2
 8001956:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800195a:	2b00      	cmp	r3, #0
 800195c:	da00      	bge.n	8001960 <get_pressure+0x17c>
 800195e:	330f      	adds	r3, #15
 8001960:	111b      	asrs	r3, r3, #4
 8001962:	461a      	mov	r2, r3
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	4413      	add	r3, r2
 8001968:	61fb      	str	r3, [r7, #28]

	return p;
 800196a:	69fb      	ldr	r3, [r7, #28]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3724      	adds	r7, #36	; 0x24
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	b004      	add	sp, #16
 8001976:	4770      	bx	lr
 8001978:	ffffe343 	.word	0xffffe343
 800197c:	00000000 	.word	0x00000000

08001980 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff f982 	bl	8000c9c <__aeabi_i2f>
 8001998:	4603      	mov	r3, r0
 800199a:	4923      	ldr	r1, [pc, #140]	; (8001a28 <get_altitude+0xa8>)
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fa85 	bl	8000eac <__aeabi_fdiv>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fd3f 	bl	8000428 <__aeabi_f2d>
 80019aa:	a31b      	add	r3, pc, #108	; (adr r3, 8001a18 <get_altitude+0x98>)
 80019ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b0:	f00c fcb2 	bl	800e318 <pow>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	f04f 0000 	mov.w	r0, #0
 80019bc:	491b      	ldr	r1, [pc, #108]	; (8001a2c <get_altitude+0xac>)
 80019be:	f7fe fbd3 	bl	8000168 <__aeabi_dsub>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	a315      	add	r3, pc, #84	; (adr r3, 8001a20 <get_altitude+0xa0>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	f7fe fd82 	bl	80004d8 <__aeabi_dmul>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f7ff f854 	bl	8000a88 <__aeabi_d2f>
 80019e0:	4603      	mov	r3, r0
 80019e2:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 80019e4:	4912      	ldr	r1, [pc, #72]	; (8001a30 <get_altitude+0xb0>)
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f7ff fb54 	bl	8001094 <__aeabi_fcmple>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d106      	bne.n	8001a00 <get_altitude+0x80>
 80019f2:	4910      	ldr	r1, [pc, #64]	; (8001a34 <get_altitude+0xb4>)
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff fb57 	bl	80010a8 <__aeabi_fcmpge>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <get_altitude+0x88>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2205      	movs	r2, #5
 8001a04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return altitude;
 8001a08:	68fb      	ldr	r3, [r7, #12]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	f3af 8000 	nop.w
 8001a18:	ccd9456c 	.word	0xccd9456c
 8001a1c:	3fc85b95 	.word	0x3fc85b95
 8001a20:	00000000 	.word	0x00000000
 8001a24:	40e5a540 	.word	0x40e5a540
 8001a28:	47c5e680 	.word	0x47c5e680
 8001a2c:	3ff00000 	.word	0x3ff00000
 8001a30:	c3fa0000 	.word	0xc3fa0000
 8001a34:	460ca000 	.word	0x460ca000

08001a38 <get_b_counter>:
int get_b_t_counter(void) {
	return b_t_counter;
}


int get_b_counter(void) {
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
	return b_counter;
 8001a3c:	4b02      	ldr	r3, [pc, #8]	; (8001a48 <get_b_counter+0x10>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	200008b8 	.word	0x200008b8

08001a4c <set_b_counter>:

void set_b_counter(unsigned int CLOCK_RATE) {
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

	b_counter++;
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <set_b_counter+0x30>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <set_b_counter+0x30>)
 8001a5c:	6013      	str	r3, [r2, #0]
	if(b_counter > CLOCK_RATE) {
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <set_b_counter+0x30>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d202      	bcs.n	8001a70 <set_b_counter+0x24>
		b_counter = 0;
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <set_b_counter+0x30>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
	}
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	200008b8 	.word	0x200008b8

08001a80 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f00c fbd7 	bl	800e23c <cosf>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f00c fc03 	bl	800e2ac <sinf>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <MX_DMA_Init+0x58>)
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	4a13      	ldr	r2, [pc, #76]	; (8001b08 <MX_DMA_Init+0x58>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6153      	str	r3, [r2, #20]
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_DMA_Init+0x58>)
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	200f      	movs	r0, #15
 8001ad4:	f004 fb51 	bl	800617a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001ad8:	200f      	movs	r0, #15
 8001ada:	f004 fb6a 	bl	80061b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2010      	movs	r0, #16
 8001ae4:	f004 fb49 	bl	800617a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001ae8:	2010      	movs	r0, #16
 8001aea:	f004 fb62 	bl	80061b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	2011      	movs	r0, #17
 8001af4:	f004 fb41 	bl	800617a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001af8:	2011      	movs	r0, #17
 8001afa:	f004 fb5a 	bl	80061b2 <HAL_NVIC_EnableIRQ>

}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000

08001b0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b12:	f107 0310 	add.w	r3, r7, #16
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b20:	4b39      	ldr	r3, [pc, #228]	; (8001c08 <MX_GPIO_Init+0xfc>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4a38      	ldr	r2, [pc, #224]	; (8001c08 <MX_GPIO_Init+0xfc>)
 8001b26:	f043 0310 	orr.w	r3, r3, #16
 8001b2a:	6193      	str	r3, [r2, #24]
 8001b2c:	4b36      	ldr	r3, [pc, #216]	; (8001c08 <MX_GPIO_Init+0xfc>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f003 0310 	and.w	r3, r3, #16
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b38:	4b33      	ldr	r3, [pc, #204]	; (8001c08 <MX_GPIO_Init+0xfc>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	4a32      	ldr	r2, [pc, #200]	; (8001c08 <MX_GPIO_Init+0xfc>)
 8001b3e:	f043 0320 	orr.w	r3, r3, #32
 8001b42:	6193      	str	r3, [r2, #24]
 8001b44:	4b30      	ldr	r3, [pc, #192]	; (8001c08 <MX_GPIO_Init+0xfc>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0320 	and.w	r3, r3, #32
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b50:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <MX_GPIO_Init+0xfc>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4a2c      	ldr	r2, [pc, #176]	; (8001c08 <MX_GPIO_Init+0xfc>)
 8001b56:	f043 0304 	orr.w	r3, r3, #4
 8001b5a:	6193      	str	r3, [r2, #24]
 8001b5c:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <MX_GPIO_Init+0xfc>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b68:	4b27      	ldr	r3, [pc, #156]	; (8001c08 <MX_GPIO_Init+0xfc>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4a26      	ldr	r2, [pc, #152]	; (8001c08 <MX_GPIO_Init+0xfc>)
 8001b6e:	f043 0308 	orr.w	r3, r3, #8
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <MX_GPIO_Init+0xfc>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	603b      	str	r3, [r7, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b86:	4821      	ldr	r0, [pc, #132]	; (8001c0c <MX_GPIO_Init+0x100>)
 8001b88:	f004 ff16 	bl	80069b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f243 0102 	movw	r1, #12290	; 0x3002
 8001b92:	481f      	ldr	r0, [pc, #124]	; (8001c10 <MX_GPIO_Init+0x104>)
 8001b94:	f004 ff10 	bl	80069b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b9e:	481d      	ldr	r0, [pc, #116]	; (8001c14 <MX_GPIO_Init+0x108>)
 8001ba0:	f004 ff0a 	bl	80069b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001ba4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001bb6:	f107 0310 	add.w	r3, r7, #16
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4813      	ldr	r0, [pc, #76]	; (8001c0c <MX_GPIO_Init+0x100>)
 8001bbe:	f004 fd77 	bl	80066b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|CSN_Pin|CE_Pin;
 8001bc2:	f243 0302 	movw	r3, #12290	; 0x3002
 8001bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480d      	ldr	r0, [pc, #52]	; (8001c10 <MX_GPIO_Init+0x104>)
 8001bdc:	f004 fd68 	bl	80066b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001be0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001be4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be6:	2301      	movs	r3, #1
 8001be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf2:	f107 0310 	add.w	r3, r7, #16
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4806      	ldr	r0, [pc, #24]	; (8001c14 <MX_GPIO_Init+0x108>)
 8001bfa:	f004 fd59 	bl	80066b0 <HAL_GPIO_Init>

}
 8001bfe:	bf00      	nop
 8001c00:	3720      	adds	r7, #32
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40011000 	.word	0x40011000
 8001c10:	40010c00 	.word	0x40010c00
 8001c14:	40010800 	.word	0x40010800

08001c18 <request_range>:
static int u_counter;
char read;
char write = 1;
char error;

void request_range(void) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af02      	add	r7, sp, #8



		//char error = 1;

		unsigned char command = 0x51;
 8001c1e:	2351      	movs	r3, #81	; 0x51
 8001c20:	71bb      	strb	r3, [r7, #6]
		char error = HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
 8001c22:	1dba      	adds	r2, r7, #6
 8001c24:	2364      	movs	r3, #100	; 0x64
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2301      	movs	r3, #1
 8001c2a:	21e0      	movs	r1, #224	; 0xe0
 8001c2c:	4805      	ldr	r0, [pc, #20]	; (8001c44 <request_range+0x2c>)
 8001c2e:	f005 f839 	bl	8006ca4 <HAL_I2C_Master_Transmit>
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
		//HAL_Delay(100);
		write = 0;
 8001c36:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <request_range+0x30>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]

}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200016e8 	.word	0x200016e8
 8001c48:	20000000 	.word	0x20000000

08001c4c <getRange>:

			//HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
int getRange (void)
				{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af02      	add	r7, sp, #8
		//if (!error) {
			read = 0;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <getRange+0x34>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
			write = 1;
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <getRange+0x38>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]
			unsigned char range[2];
			HAL_I2C_Master_Receive(&hi2c1, 225, range, 2, I2C_TIMEOUT);
 8001c5e:	1d3a      	adds	r2, r7, #4
 8001c60:	2364      	movs	r3, #100	; 0x64
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	2302      	movs	r3, #2
 8001c66:	21e1      	movs	r1, #225	; 0xe1
 8001c68:	4807      	ldr	r0, [pc, #28]	; (8001c88 <getRange+0x3c>)
 8001c6a:	f005 f919 	bl	8006ea0 <HAL_I2C_Master_Receive>
			return (range[0] << BYTE_SHIFT) | range[1];
 8001c6e:	793b      	ldrb	r3, [r7, #4]
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	797a      	ldrb	r2, [r7, #5]
 8001c74:	4313      	orrs	r3, r2



	//return -1;

}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200016e6 	.word	0x200016e6
 8001c84:	20000000 	.word	0x20000000
 8001c88:	200016e8 	.word	0x200016e8

08001c8c <set_ucounter>:

void set_ucounter(unsigned int CLOCK_RATE) {
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

	u_counter++;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <set_ucounter+0x30>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <set_ucounter+0x30>)
 8001c9c:	6013      	str	r3, [r2, #0]
	if(u_counter > CLOCK_RATE) {
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <set_ucounter+0x30>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d202      	bcs.n	8001cb0 <set_ucounter+0x24>
		u_counter = 0;
 8001caa:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <set_ucounter+0x30>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
	}
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	200008bc 	.word	0x200008bc

08001cc0 <get_ucounter>:

int get_ucounter(void) {
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
	return u_counter;
 8001cc4:	4b02      	ldr	r3, [pc, #8]	; (8001cd0 <get_ucounter+0x10>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	200008bc 	.word	0x200008bc

08001cd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <MX_I2C1_Init+0x50>)
 8001cda:	4a13      	ldr	r2, [pc, #76]	; (8001d28 <MX_I2C1_Init+0x54>)
 8001cdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <MX_I2C1_Init+0x50>)
 8001ce0:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <MX_I2C1_Init+0x58>)
 8001ce2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <MX_I2C1_Init+0x50>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <MX_I2C1_Init+0x50>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <MX_I2C1_Init+0x50>)
 8001cf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cf6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <MX_I2C1_Init+0x50>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <MX_I2C1_Init+0x50>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <MX_I2C1_Init+0x50>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <MX_I2C1_Init+0x50>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d10:	4804      	ldr	r0, [pc, #16]	; (8001d24 <MX_I2C1_Init+0x50>)
 8001d12:	f004 fe83 	bl	8006a1c <HAL_I2C_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d1c:	f002 f9be 	bl	800409c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200016e8 	.word	0x200016e8
 8001d28:	40005400 	.word	0x40005400
 8001d2c:	00061a80 	.word	0x00061a80

08001d30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a15      	ldr	r2, [pc, #84]	; (8001da0 <HAL_I2C_MspInit+0x70>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d123      	bne.n	8001d98 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d50:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <HAL_I2C_MspInit+0x74>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	4a13      	ldr	r2, [pc, #76]	; (8001da4 <HAL_I2C_MspInit+0x74>)
 8001d56:	f043 0308 	orr.w	r3, r3, #8
 8001d5a:	6193      	str	r3, [r2, #24]
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_I2C_MspInit+0x74>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d68:	23c0      	movs	r3, #192	; 0xc0
 8001d6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d6c:	2312      	movs	r3, #18
 8001d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d70:	2303      	movs	r3, #3
 8001d72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d74:	f107 0310 	add.w	r3, r7, #16
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480b      	ldr	r0, [pc, #44]	; (8001da8 <HAL_I2C_MspInit+0x78>)
 8001d7c:	f004 fc98 	bl	80066b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <HAL_I2C_MspInit+0x74>)
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	4a07      	ldr	r2, [pc, #28]	; (8001da4 <HAL_I2C_MspInit+0x74>)
 8001d86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d8a:	61d3      	str	r3, [r2, #28]
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_I2C_MspInit+0x74>)
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3720      	adds	r7, #32
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40005400 	.word	0x40005400
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010c00 	.word	0x40010c00

08001dac <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <_ZSt4asinf>:
  { return __builtin_asinf(__x); }
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f00c fb7b 	bl	800e4c8 <asinf>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <_ZSt4atanf>:
  { return __builtin_atanf(__x); }
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f00c f91d 	bl	800e024 <atanf>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
 8001dfe:	6839      	ldr	r1, [r7, #0]
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f00c fb87 	bl	800e514 <atan2f>
 8001e06:	4603      	mov	r3, r0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f00c fb7d 	bl	800e518 <sqrtf>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_UART_TxCpltCallback>:
	while(delay_timer < current_time + millis) {
		printf("Do nothing...");
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance) {
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_UART_TxCpltCallback+0xa0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d140      	bne.n	8001ebe <HAL_UART_TxCpltCallback+0x96>
		char end_char;
		switch(tx_type) {
 8001e3c:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <HAL_UART_TxCpltCallback+0xa4>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d013      	beq.n	8001e6c <HAL_UART_TxCpltCallback+0x44>
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	dc3a      	bgt.n	8001ebe <HAL_UART_TxCpltCallback+0x96>
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <HAL_UART_TxCpltCallback+0x2a>
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d017      	beq.n	8001e80 <HAL_UART_TxCpltCallback+0x58>
		    period = sent_time - sent_time_;
		    break;
		}

	}
}
 8001e50:	e035      	b.n	8001ebe <HAL_UART_TxCpltCallback+0x96>
			end_char = 0x01;
 8001e52:	2301      	movs	r3, #1
 8001e54:	72fb      	strb	r3, [r7, #11]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 8001e56:	f107 030b 	add.w	r3, r7, #11
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	481a      	ldr	r0, [pc, #104]	; (8001ec8 <HAL_UART_TxCpltCallback+0xa0>)
 8001e60:	f009 f8de 	bl	800b020 <HAL_UART_Transmit_DMA>
			tx_type = package;
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_UART_TxCpltCallback+0xa4>)
 8001e66:	2202      	movs	r2, #2
 8001e68:	701a      	strb	r2, [r3, #0]
			break;
 8001e6a:	e028      	b.n	8001ebe <HAL_UART_TxCpltCallback+0x96>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buf, sizeof(struct telem_pack));
 8001e6c:	f240 1205 	movw	r2, #261	; 0x105
 8001e70:	4917      	ldr	r1, [pc, #92]	; (8001ed0 <HAL_UART_TxCpltCallback+0xa8>)
 8001e72:	4815      	ldr	r0, [pc, #84]	; (8001ec8 <HAL_UART_TxCpltCallback+0xa0>)
 8001e74:	f009 f8d4 	bl	800b020 <HAL_UART_Transmit_DMA>
			tx_type = stop;
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_UART_TxCpltCallback+0xa4>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
			break;
 8001e7e:	e01e      	b.n	8001ebe <HAL_UART_TxCpltCallback+0x96>
			end_char = 0x04;
 8001e80:	2304      	movs	r3, #4
 8001e82:	72fb      	strb	r3, [r7, #11]
		    HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 8001e84:	f107 030b 	add.w	r3, r7, #11
 8001e88:	2201      	movs	r2, #1
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	480e      	ldr	r0, [pc, #56]	; (8001ec8 <HAL_UART_TxCpltCallback+0xa0>)
 8001e8e:	f009 f8c7 	bl	800b020 <HAL_UART_Transmit_DMA>
		    tx_type = start;
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <HAL_UART_TxCpltCallback+0xa4>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
		    long int sent_time_ = sent_time;
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <HAL_UART_TxCpltCallback+0xac>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60fb      	str	r3, [r7, #12]
		    sent_time = HAL_GetTick();
 8001e9e:	f004 f867 	bl	8005f70 <HAL_GetTick>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_UART_TxCpltCallback+0xac>)
 8001ea8:	601a      	str	r2, [r3, #0]
		    period = sent_time - sent_time_;
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_UART_TxCpltCallback+0xac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <HAL_UART_TxCpltCallback+0xb0>)
 8001eba:	701a      	strb	r2, [r3, #0]
		    break;
 8001ebc:	bf00      	nop
}
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20001a00 	.word	0x20001a00
 8001ecc:	20001625 	.word	0x20001625
 8001ed0:	20000a58 	.word	0x20000a58
 8001ed4:	2000156c 	.word	0x2000156c
 8001ed8:	20001624 	.word	0x20001624
 8001edc:	00000000 	.word	0x00000000

08001ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee2:	b09b      	sub	sp, #108	; 0x6c
 8001ee4:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ee6:	f003 ffeb 	bl	8005ec0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 8001eea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001eee:	f004 f849 	bl	8005f84 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ef2:	f000 f93b 	bl	800216c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ef6:	f7ff fe09 	bl	8001b0c <MX_GPIO_Init>
  MX_DMA_Init();
 8001efa:	f7ff fdd9 	bl	8001ab0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001efe:	f7ff fee9 	bl	8001cd4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001f02:	f003 fbff 	bl	8005704 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001f06:	f003 fb55 	bl	80055b4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001f0a:	f003 fe0f 	bl	8005b2c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001f0e:	f003 fc45 	bl	800579c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001f12:	f003 fcb3 	bl	800587c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001f16:	f003 fddf 	bl	8005ad8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001f1a:	f003 fe31 	bl	8005b80 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001f1e:	f003 f9c5 	bl	80052ac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, (uint8_t*)&cam_data, sizeof(cam_data));
 8001f22:	2209      	movs	r2, #9
 8001f24:	497a      	ldr	r1, [pc, #488]	; (8002110 <main+0x230>)
 8001f26:	487b      	ldr	r0, [pc, #492]	; (8002114 <main+0x234>)
 8001f28:	f009 f8e6 	bl	800b0f8 <HAL_UART_Receive_DMA>

  HAL_UART_Receive_DMA(&huart2, (uint8_t*)ch_rcv_buf, 1);
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	497a      	ldr	r1, [pc, #488]	; (8002118 <main+0x238>)
 8001f30:	487a      	ldr	r0, [pc, #488]	; (800211c <main+0x23c>)
 8001f32:	f009 f8e1 	bl	800b0f8 <HAL_UART_Receive_DMA>
  //HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(cam_data)-1);
#ifdef UAV1
  MPU6050_Baslat();
 8001f36:	f000 f969 	bl	800220c <_Z14MPU6050_Baslatv>
  bmp_init(&bmp);
 8001f3a:	4879      	ldr	r0, [pc, #484]	; (8002120 <main+0x240>)
 8001f3c:	f7ff fb58 	bl	80015f0 <bmp_init>
  HMC5883L_initialize();
 8001f40:	f7ff f922 	bl	8001188 <HMC5883L_initialize>
#endif
  MotorBaslat();
 8001f44:	f001 fa08 	bl	8003358 <_Z11MotorBaslatv>
  //GPSInit();
  HAL_Delay(1000);
 8001f48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f4c:	f004 f81a 	bl	8005f84 <HAL_Delay>

  Ringbuf_init();
 8001f50:	f7ff f9ce 	bl	80012f0 <Ringbuf_init>

	/***********NRF Ayarlari****************/

#ifdef UAV1
	NRF24_begin(CE_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 8001f54:	4c73      	ldr	r4, [pc, #460]	; (8002124 <main+0x244>)
 8001f56:	4668      	mov	r0, sp
 8001f58:	1d23      	adds	r3, r4, #4
 8001f5a:	2254      	movs	r2, #84	; 0x54
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f00e f9c5 	bl	80102ec <memcpy>
 8001f62:	6823      	ldr	r3, [r4, #0]
 8001f64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6c:	486e      	ldr	r0, [pc, #440]	; (8002128 <main+0x248>)
 8001f6e:	f002 fa0f 	bl	8004390 <NRF24_begin>
	NRF24_stopListening();
 8001f72:	f002 faed 	bl	8004550 <NRF24_stopListening>
	NRF24_openWritingPipe(TxpipeAddrs);
 8001f76:	4b6d      	ldr	r3, [pc, #436]	; (800212c <main+0x24c>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f002 fb46 	bl	8004610 <NRF24_openWritingPipe>
	nrf24_DebugUART_Init(huart3);
 8001f84:	4e6a      	ldr	r6, [pc, #424]	; (8002130 <main+0x250>)
 8001f86:	466d      	mov	r5, sp
 8001f88:	f106 0410 	add.w	r4, r6, #16
 8001f8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f98:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001f9c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001fa0:	f003 f968 	bl	8005274 <nrf24_DebugUART_Init>
	NRF24_setAutoAck(false);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f002 fbbd 	bl	8004724 <NRF24_setAutoAck>
	NRF24_setChannel(34);
 8001faa:	2022      	movs	r0, #34	; 0x22
 8001fac:	f002 fb6f 	bl	800468e <NRF24_setChannel>
	NRF24_setPayloadSize(sizeof(struct pwm));
 8001fb0:	2008      	movs	r0, #8
 8001fb2:	f002 fb81 	bl	80046b8 <NRF24_setPayloadSize>
	char test_data[] = "Testing...";
 8001fb6:	4a5f      	ldr	r2, [pc, #380]	; (8002134 <main+0x254>)
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fbc:	c303      	stmia	r3!, {r0, r1}
 8001fbe:	801a      	strh	r2, [r3, #0]
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	0c12      	lsrs	r2, r2, #16
 8001fc4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)&test_data, sizeof(test_data), 5);
 8001fc6:	1d39      	adds	r1, r7, #4
 8001fc8:	2305      	movs	r3, #5
 8001fca:	220b      	movs	r2, #11
 8001fcc:	4858      	ldr	r0, [pc, #352]	; (8002130 <main+0x250>)
 8001fce:	f008 ff95 	bl	800aefc <HAL_UART_Transmit>
	printRadioSettings();
 8001fd2:	f002 fd27 	bl	8004a24 <printRadioSettings>
	HAL_UART_Transmit(&huart3, (uint8_t*)&test_data, sizeof(test_data), 5);
	printRadioSettings();
#endif

  //Gyro kalibrasyon hatalarını hesapla.
  HAL_Delay(2000);
 8001fd6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001fda:	f003 ffd3 	bl	8005f84 <HAL_Delay>

#ifdef UAV1

  GyroXh = GyroErr(GYRO_X_ADDR); GyroYh=GyroErr(GYRO_Y_ADDR); GyroZh=GyroErr(GYRO_Z_ADDR);
 8001fde:	201d      	movs	r0, #29
 8001fe0:	f001 f95e 	bl	80032a0 <_Z7GyroErrh>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4a54      	ldr	r2, [pc, #336]	; (8002138 <main+0x258>)
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	201f      	movs	r0, #31
 8001fec:	f001 f958 	bl	80032a0 <_Z7GyroErrh>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4a52      	ldr	r2, [pc, #328]	; (800213c <main+0x25c>)
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	2021      	movs	r0, #33	; 0x21
 8001ff8:	f001 f952 	bl	80032a0 <_Z7GyroErrh>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4a50      	ldr	r2, [pc, #320]	; (8002140 <main+0x260>)
 8002000:	6013      	str	r3, [r2, #0]
  AccXh = AccErr(ACC_X_ADDR)* .0078; AccYh = AccErr(ACC_Y_ADDR)* .0078; AccZh = AccErr(ACC_Z_ADDR)* .0078;
 8002002:	2032      	movs	r0, #50	; 0x32
 8002004:	f001 f97a 	bl	80032fc <_Z6AccErrh>
 8002008:	4603      	mov	r3, r0
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fa0c 	bl	8000428 <__aeabi_f2d>
 8002010:	a33d      	add	r3, pc, #244	; (adr r3, 8002108 <main+0x228>)
 8002012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002016:	f7fe fa5f 	bl	80004d8 <__aeabi_dmul>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	f7fe fd31 	bl	8000a88 <__aeabi_d2f>
 8002026:	4603      	mov	r3, r0
 8002028:	4a46      	ldr	r2, [pc, #280]	; (8002144 <main+0x264>)
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	2034      	movs	r0, #52	; 0x34
 800202e:	f001 f965 	bl	80032fc <_Z6AccErrh>
 8002032:	4603      	mov	r3, r0
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe f9f7 	bl	8000428 <__aeabi_f2d>
 800203a:	a333      	add	r3, pc, #204	; (adr r3, 8002108 <main+0x228>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	f7fe fa4a 	bl	80004d8 <__aeabi_dmul>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	f7fe fd1c 	bl	8000a88 <__aeabi_d2f>
 8002050:	4603      	mov	r3, r0
 8002052:	4a3d      	ldr	r2, [pc, #244]	; (8002148 <main+0x268>)
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	2036      	movs	r0, #54	; 0x36
 8002058:	f001 f950 	bl	80032fc <_Z6AccErrh>
 800205c:	4603      	mov	r3, r0
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe f9e2 	bl	8000428 <__aeabi_f2d>
 8002064:	a328      	add	r3, pc, #160	; (adr r3, 8002108 <main+0x228>)
 8002066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206a:	f7fe fa35 	bl	80004d8 <__aeabi_dmul>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	f7fe fd07 	bl	8000a88 <__aeabi_d2f>
 800207a:	4603      	mov	r3, r0
 800207c:	4a33      	ldr	r2, [pc, #204]	; (800214c <main+0x26c>)
 800207e:	6013      	str	r3, [r2, #0]

  //İvmeölçer degerlerini oku

  accX = AccOku(ACC_X_ADDR);
 8002080:	2032      	movs	r0, #50	; 0x32
 8002082:	f000 fde5 	bl	8002c50 <_Z6AccOkuh>
 8002086:	4603      	mov	r3, r0
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fe07 	bl	8000c9c <__aeabi_i2f>
 800208e:	4603      	mov	r3, r0
 8002090:	4a2f      	ldr	r2, [pc, #188]	; (8002150 <main+0x270>)
 8002092:	6013      	str	r3, [r2, #0]
  accY = AccOku(ACC_Y_ADDR);
 8002094:	2034      	movs	r0, #52	; 0x34
 8002096:	f000 fddb 	bl	8002c50 <_Z6AccOkuh>
 800209a:	4603      	mov	r3, r0
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fdfd 	bl	8000c9c <__aeabi_i2f>
 80020a2:	4603      	mov	r3, r0
 80020a4:	4a2b      	ldr	r2, [pc, #172]	; (8002154 <main+0x274>)
 80020a6:	6013      	str	r3, [r2, #0]
  accZ = AccOku(ACC_Z_ADDR);
 80020a8:	2036      	movs	r0, #54	; 0x36
 80020aa:	f000 fdd1 	bl	8002c50 <_Z6AccOkuh>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fdf3 	bl	8000c9c <__aeabi_i2f>
 80020b6:	4603      	mov	r3, r0
 80020b8:	4a27      	ldr	r2, [pc, #156]	; (8002158 <main+0x278>)
 80020ba:	6013      	str	r3, [r2, #0]
#endif
  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 80020bc:	4827      	ldr	r0, [pc, #156]	; (800215c <main+0x27c>)
 80020be:	f007 fb7b 	bl	80097b8 <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 80020c2:	4827      	ldr	r0, [pc, #156]	; (8002160 <main+0x280>)
 80020c4:	f007 fb2e 	bl	8009724 <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80020c8:	2100      	movs	r1, #0
 80020ca:	4826      	ldr	r0, [pc, #152]	; (8002164 <main+0x284>)
 80020cc:	f007 fc16 	bl	80098fc <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80020d0:	2104      	movs	r1, #4
 80020d2:	4824      	ldr	r0, [pc, #144]	; (8002164 <main+0x284>)
 80020d4:	f008 fd42 	bl	800ab5c <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80020d8:	2108      	movs	r1, #8
 80020da:	4822      	ldr	r0, [pc, #136]	; (8002164 <main+0x284>)
 80020dc:	f008 fd3e 	bl	800ab5c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80020e0:	210c      	movs	r1, #12
 80020e2:	4820      	ldr	r0, [pc, #128]	; (8002164 <main+0x284>)
 80020e4:	f007 fc0a 	bl	80098fc <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 80020e8:	2108      	movs	r1, #8
 80020ea:	481d      	ldr	r0, [pc, #116]	; (8002160 <main+0x280>)
 80020ec:	f007 fd00 	bl	8009af0 <HAL_TIM_IC_Start_IT>

  //ESP DMA Başlat.
  char end_char = 0x01;
 80020f0:	2301      	movs	r3, #1
 80020f2:	70fb      	strb	r3, [r7, #3]
  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 80020f4:	1cfb      	adds	r3, r7, #3
 80020f6:	2201      	movs	r2, #1
 80020f8:	4619      	mov	r1, r3
 80020fa:	4808      	ldr	r0, [pc, #32]	; (800211c <main+0x23c>)
 80020fc:	f008 ff90 	bl	800b020 <HAL_UART_Transmit_DMA>
  tx_type = package;
 8002100:	4b19      	ldr	r3, [pc, #100]	; (8002168 <main+0x288>)
 8002102:	2202      	movs	r2, #2
 8002104:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8002106:	e7fe      	b.n	8002106 <main+0x226>
 8002108:	8e8a71de 	.word	0x8e8a71de
 800210c:	3f7ff2e4 	.word	0x3f7ff2e4
 8002110:	200015e4 	.word	0x200015e4
 8002114:	200019c0 	.word	0x200019c0
 8002118:	20001614 	.word	0x20001614
 800211c:	20001a00 	.word	0x20001a00
 8002120:	20001594 	.word	0x20001594
 8002124:	2000173c 	.word	0x2000173c
 8002128:	40010c00 	.word	0x40010c00
 800212c:	20000008 	.word	0x20000008
 8002130:	200018f8 	.word	0x200018f8
 8002134:	08010b9c 	.word	0x08010b9c
 8002138:	200008f0 	.word	0x200008f0
 800213c:	200008f4 	.word	0x200008f4
 8002140:	200008f8 	.word	0x200008f8
 8002144:	200008fc 	.word	0x200008fc
 8002148:	20000900 	.word	0x20000900
 800214c:	20000904 	.word	0x20000904
 8002150:	200008cc 	.word	0x200008cc
 8002154:	200008d0 	.word	0x200008d0
 8002158:	200008d4 	.word	0x200008d4
 800215c:	2000186c 	.word	0x2000186c
 8002160:	200017dc 	.word	0x200017dc
 8002164:	20001824 	.word	0x20001824
 8002168:	20001625 	.word	0x20001625

0800216c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b090      	sub	sp, #64	; 0x40
 8002170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002172:	f107 0318 	add.w	r3, r7, #24
 8002176:	2228      	movs	r2, #40	; 0x28
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f00e f8c4 	bl	8010308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	60da      	str	r2, [r3, #12]
 800218c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800218e:	2301      	movs	r3, #1
 8002190:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002192:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002196:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002198:	2300      	movs	r3, #0
 800219a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800219c:	2301      	movs	r3, #1
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021a0:	2302      	movs	r3, #2
 80021a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80021ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021b0:	f107 0318 	add.w	r3, r7, #24
 80021b4:	4618      	mov	r0, r3
 80021b6:	f006 f8df 	bl	8008378 <HAL_RCC_OscConfig>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	bf14      	ite	ne
 80021c0:	2301      	movne	r3, #1
 80021c2:	2300      	moveq	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80021ca:	f001 ff67 	bl	800409c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ce:	230f      	movs	r3, #15
 80021d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021d2:	2302      	movs	r3, #2
 80021d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	2102      	movs	r1, #2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f006 fb45 	bl	8008878 <HAL_RCC_ClockConfig>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	bf14      	ite	ne
 80021f4:	2301      	movne	r3, #1
 80021f6:	2300      	moveq	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80021fe:	f001 ff4d 	bl	800409c <Error_Handler>
  }
}
 8002202:	bf00      	nop
 8002204:	3740      	adds	r7, #64	; 0x40
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <_Z14MPU6050_Baslatv>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 8002212:	2300      	movs	r3, #0
 8002214:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 8002216:	2305      	movs	r3, #5
 8002218:	9302      	str	r3, [sp, #8]
 800221a:	2301      	movs	r3, #1
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	1dfb      	adds	r3, r7, #7
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	2301      	movs	r3, #1
 8002224:	223e      	movs	r2, #62	; 0x3e
 8002226:	21d0      	movs	r1, #208	; 0xd0
 8002228:	4826      	ldr	r0, [pc, #152]	; (80022c4 <_Z14MPU6050_Baslatv+0xb8>)
 800222a:	f005 f899 	bl	8007360 <HAL_I2C_Mem_Write>
	config = 0x18;
 800222e:	2318      	movs	r3, #24
 8002230:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 250 d/s'ye ayarlandi.
 8002232:	2305      	movs	r3, #5
 8002234:	9302      	str	r3, [sp, #8]
 8002236:	2301      	movs	r3, #1
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	1dfb      	adds	r3, r7, #7
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2301      	movs	r3, #1
 8002240:	2216      	movs	r2, #22
 8002242:	21d0      	movs	r1, #208	; 0xd0
 8002244:	481f      	ldr	r0, [pc, #124]	; (80022c4 <_Z14MPU6050_Baslatv+0xb8>)
 8002246:	f005 f88b 	bl	8007360 <HAL_I2C_Mem_Write>
	config = 0x00;
 800224a:	2300      	movs	r3, #0
 800224c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2d, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 800224e:	2305      	movs	r3, #5
 8002250:	9302      	str	r3, [sp, #8]
 8002252:	2301      	movs	r3, #1
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	1dfb      	adds	r3, r7, #7
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2301      	movs	r3, #1
 800225c:	222d      	movs	r2, #45	; 0x2d
 800225e:	21a6      	movs	r1, #166	; 0xa6
 8002260:	4818      	ldr	r0, [pc, #96]	; (80022c4 <_Z14MPU6050_Baslatv+0xb8>)
 8002262:	f005 f87d 	bl	8007360 <HAL_I2C_Mem_Write>
	config = 0x08;
 8002266:	2308      	movs	r3, #8
 8002268:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2d, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 800226a:	2305      	movs	r3, #5
 800226c:	9302      	str	r3, [sp, #8]
 800226e:	2301      	movs	r3, #1
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	1dfb      	adds	r3, r7, #7
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	2301      	movs	r3, #1
 8002278:	222d      	movs	r2, #45	; 0x2d
 800227a:	21a6      	movs	r1, #166	; 0xa6
 800227c:	4811      	ldr	r0, [pc, #68]	; (80022c4 <_Z14MPU6050_Baslatv+0xb8>)
 800227e:	f005 f86f 	bl	8007360 <HAL_I2C_Mem_Write>
	config = 0x0D;
 8002282:	230d      	movs	r3, #13
 8002284:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x2c, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 8002286:	2305      	movs	r3, #5
 8002288:	9302      	str	r3, [sp, #8]
 800228a:	2301      	movs	r3, #1
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	1dfb      	adds	r3, r7, #7
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2301      	movs	r3, #1
 8002294:	222c      	movs	r2, #44	; 0x2c
 8002296:	21a6      	movs	r1, #166	; 0xa6
 8002298:	480a      	ldr	r0, [pc, #40]	; (80022c4 <_Z14MPU6050_Baslatv+0xb8>)
 800229a:	f005 f861 	bl	8007360 <HAL_I2C_Mem_Write>
	config = 0x01;
 800229e:	2301      	movs	r3, #1
 80022a0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)ADXL345, 0x31, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 80022a2:	2305      	movs	r3, #5
 80022a4:	9302      	str	r3, [sp, #8]
 80022a6:	2301      	movs	r3, #1
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	1dfb      	adds	r3, r7, #7
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2301      	movs	r3, #1
 80022b0:	2231      	movs	r2, #49	; 0x31
 80022b2:	21a6      	movs	r1, #166	; 0xa6
 80022b4:	4803      	ldr	r0, [pc, #12]	; (80022c4 <_Z14MPU6050_Baslatv+0xb8>)
 80022b6:	f005 f853 	bl	8007360 <HAL_I2C_Mem_Write>

	//config = 0x04; //0x04
	//HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_DLPF_REG, 1, &config, 1, 5); //Low Pass Filter 94 Hz'e ayarlandı


}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	200016e8 	.word	0x200016e8

080022c8 <_Z8MagCalibsss>:

}
*/
#endif

void MagCalib(int16_t MAG_X,int16_t MAG_Y,int16_t MAG_Z) {
 80022c8:	b5b0      	push	{r4, r5, r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	80fb      	strh	r3, [r7, #6]
 80022d2:	460b      	mov	r3, r1
 80022d4:	80bb      	strh	r3, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	807b      	strh	r3, [r7, #2]
	/*
	MAG_X_CALIB = 0.94941*MAG_X - 0.0029894*MAG_Y + 0.0042334*MAG_Z - 163.26;
	MAG_Y_CALIB = 0.94369*MAG_Y - 0.0029894*MAG_X + 0.010705*MAG_Z + 179.65;
	MAG_Z_CALIB = 0.0042334*MAG_X + 0.010705*MAG_Y + 1.1163*MAG_Z - 139.67;
	*/
	MAG_X_CALIB = 0.9655*MAG_X + 0.01389*MAG_Y - 0.01816*MAG_Z + 16.0;
 80022da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe f890 	bl	8000404 <__aeabi_i2d>
 80022e4:	a366      	add	r3, pc, #408	; (adr r3, 8002480 <_Z8MagCalibsss+0x1b8>)
 80022e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ea:	f7fe f8f5 	bl	80004d8 <__aeabi_dmul>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	4614      	mov	r4, r2
 80022f4:	461d      	mov	r5, r3
 80022f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe f882 	bl	8000404 <__aeabi_i2d>
 8002300:	a361      	add	r3, pc, #388	; (adr r3, 8002488 <_Z8MagCalibsss+0x1c0>)
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fe f8e7 	bl	80004d8 <__aeabi_dmul>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4620      	mov	r0, r4
 8002310:	4629      	mov	r1, r5
 8002312:	f7fd ff2b 	bl	800016c <__adddf3>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4614      	mov	r4, r2
 800231c:	461d      	mov	r5, r3
 800231e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe f86e 	bl	8000404 <__aeabi_i2d>
 8002328:	a359      	add	r3, pc, #356	; (adr r3, 8002490 <_Z8MagCalibsss+0x1c8>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fe f8d3 	bl	80004d8 <__aeabi_dmul>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4620      	mov	r0, r4
 8002338:	4629      	mov	r1, r5
 800233a:	f7fd ff15 	bl	8000168 <__aeabi_dsub>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	4b5d      	ldr	r3, [pc, #372]	; (80024c0 <_Z8MagCalibsss+0x1f8>)
 800234c:	f7fd ff0e 	bl	800016c <__adddf3>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	f7fe fb6e 	bl	8000a38 <__aeabi_d2iz>
 800235c:	4603      	mov	r3, r0
 800235e:	b21a      	sxth	r2, r3
 8002360:	4b58      	ldr	r3, [pc, #352]	; (80024c4 <_Z8MagCalibsss+0x1fc>)
 8002362:	801a      	strh	r2, [r3, #0]
	MAG_Y_CALIB = 0.01389*MAG_X + 0.9476*MAG_Y + 0.006714*MAG_Z + 103.3;
 8002364:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f84b 	bl	8000404 <__aeabi_i2d>
 800236e:	a346      	add	r3, pc, #280	; (adr r3, 8002488 <_Z8MagCalibsss+0x1c0>)
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	f7fe f8b0 	bl	80004d8 <__aeabi_dmul>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4614      	mov	r4, r2
 800237e:	461d      	mov	r5, r3
 8002380:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe f83d 	bl	8000404 <__aeabi_i2d>
 800238a:	a343      	add	r3, pc, #268	; (adr r3, 8002498 <_Z8MagCalibsss+0x1d0>)
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	f7fe f8a2 	bl	80004d8 <__aeabi_dmul>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4620      	mov	r0, r4
 800239a:	4629      	mov	r1, r5
 800239c:	f7fd fee6 	bl	800016c <__adddf3>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4614      	mov	r4, r2
 80023a6:	461d      	mov	r5, r3
 80023a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe f829 	bl	8000404 <__aeabi_i2d>
 80023b2:	a33b      	add	r3, pc, #236	; (adr r3, 80024a0 <_Z8MagCalibsss+0x1d8>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	f7fe f88e 	bl	80004d8 <__aeabi_dmul>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4620      	mov	r0, r4
 80023c2:	4629      	mov	r1, r5
 80023c4:	f7fd fed2 	bl	800016c <__adddf3>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4610      	mov	r0, r2
 80023ce:	4619      	mov	r1, r3
 80023d0:	a335      	add	r3, pc, #212	; (adr r3, 80024a8 <_Z8MagCalibsss+0x1e0>)
 80023d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d6:	f7fd fec9 	bl	800016c <__adddf3>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4610      	mov	r0, r2
 80023e0:	4619      	mov	r1, r3
 80023e2:	f7fe fb29 	bl	8000a38 <__aeabi_d2iz>
 80023e6:	4603      	mov	r3, r0
 80023e8:	b21a      	sxth	r2, r3
 80023ea:	4b37      	ldr	r3, [pc, #220]	; (80024c8 <_Z8MagCalibsss+0x200>)
 80023ec:	801a      	strh	r2, [r3, #0]
	MAG_Z_CALIB = 0.006714*MAG_Y - 0.01816*MAG_X + 1.094*MAG_Z - 8.554;
 80023ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe f806 	bl	8000404 <__aeabi_i2d>
 80023f8:	a329      	add	r3, pc, #164	; (adr r3, 80024a0 <_Z8MagCalibsss+0x1d8>)
 80023fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fe:	f7fe f86b 	bl	80004d8 <__aeabi_dmul>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4614      	mov	r4, r2
 8002408:	461d      	mov	r5, r3
 800240a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fd fff8 	bl	8000404 <__aeabi_i2d>
 8002414:	a31e      	add	r3, pc, #120	; (adr r3, 8002490 <_Z8MagCalibsss+0x1c8>)
 8002416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241a:	f7fe f85d 	bl	80004d8 <__aeabi_dmul>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4620      	mov	r0, r4
 8002424:	4629      	mov	r1, r5
 8002426:	f7fd fe9f 	bl	8000168 <__aeabi_dsub>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4614      	mov	r4, r2
 8002430:	461d      	mov	r5, r3
 8002432:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fd ffe4 	bl	8000404 <__aeabi_i2d>
 800243c:	a31c      	add	r3, pc, #112	; (adr r3, 80024b0 <_Z8MagCalibsss+0x1e8>)
 800243e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002442:	f7fe f849 	bl	80004d8 <__aeabi_dmul>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4620      	mov	r0, r4
 800244c:	4629      	mov	r1, r5
 800244e:	f7fd fe8d 	bl	800016c <__adddf3>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4610      	mov	r0, r2
 8002458:	4619      	mov	r1, r3
 800245a:	a317      	add	r3, pc, #92	; (adr r3, 80024b8 <_Z8MagCalibsss+0x1f0>)
 800245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002460:	f7fd fe82 	bl	8000168 <__aeabi_dsub>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	f7fe fae4 	bl	8000a38 <__aeabi_d2iz>
 8002470:	4603      	mov	r3, r0
 8002472:	b21a      	sxth	r2, r3
 8002474:	4b15      	ldr	r3, [pc, #84]	; (80024cc <_Z8MagCalibsss+0x204>)
 8002476:	801a      	strh	r2, [r3, #0]
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bdb0      	pop	{r4, r5, r7, pc}
 8002480:	4189374c 	.word	0x4189374c
 8002484:	3feee560 	.word	0x3feee560
 8002488:	3dee7818 	.word	0x3dee7818
 800248c:	3f8c725c 	.word	0x3f8c725c
 8002490:	f861a60d 	.word	0xf861a60d
 8002494:	3f929888 	.word	0x3f929888
 8002498:	3c361134 	.word	0x3c361134
 800249c:	3fee52bd 	.word	0x3fee52bd
 80024a0:	a6ce3583 	.word	0xa6ce3583
 80024a4:	3f7b8023 	.word	0x3f7b8023
 80024a8:	33333333 	.word	0x33333333
 80024ac:	4059d333 	.word	0x4059d333
 80024b0:	24dd2f1b 	.word	0x24dd2f1b
 80024b4:	3ff18106 	.word	0x3ff18106
 80024b8:	e353f7cf 	.word	0xe353f7cf
 80024bc:	40211ba5 	.word	0x40211ba5
 80024c0:	40300000 	.word	0x40300000
 80024c4:	2000160e 	.word	0x2000160e
 80024c8:	20001610 	.word	0x20001610
 80024cc:	20001612 	.word	0x20001612

080024d0 <_Z9checkModei>:

void checkMode(int mod_ch) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
	  if(mod_ch < 1400) {
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80024de:	da1f      	bge.n	8002520 <_Z9checkModei+0x50>

		  controller.mod = STABILIZE;
 80024e0:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <_Z9checkModei+0x88>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		  controller.z0 = EKF.alt_gnd;
 80024e8:	4b1c      	ldr	r3, [pc, #112]	; (800255c <_Z9checkModei+0x8c>)
 80024ea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80024ee:	4a1a      	ldr	r2, [pc, #104]	; (8002558 <_Z9checkModei+0x88>)
 80024f0:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
		  controller.x0 = EKF.x;
 80024f4:	4b19      	ldr	r3, [pc, #100]	; (800255c <_Z9checkModei+0x8c>)
 80024f6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80024fa:	4a17      	ldr	r2, [pc, #92]	; (8002558 <_Z9checkModei+0x88>)
 80024fc:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
		  controller.y0 = EKF.y;
 8002500:	4b16      	ldr	r3, [pc, #88]	; (800255c <_Z9checkModei+0x8c>)
 8002502:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8002506:	4a14      	ldr	r2, [pc, #80]	; (8002558 <_Z9checkModei+0x88>)
 8002508:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
		  controller.p_alt.reset();
 800250c:	4814      	ldr	r0, [pc, #80]	; (8002560 <_Z9checkModei+0x90>)
 800250e:	f00b fc23 	bl	800dd58 <_ZN3PID5resetEv>
		  controller.p_velx.reset();
 8002512:	4814      	ldr	r0, [pc, #80]	; (8002564 <_Z9checkModei+0x94>)
 8002514:	f00b fc20 	bl	800dd58 <_ZN3PID5resetEv>
		  controller.p_vely.reset();
 8002518:	4813      	ldr	r0, [pc, #76]	; (8002568 <_Z9checkModei+0x98>)
 800251a:	f00b fc1d 	bl	800dd58 <_ZN3PID5resetEv>

	  else {
		  //controller.mod = LOITER;
		  controller.mod = STABILIZE;
	  }
}
 800251e:	e016      	b.n	800254e <_Z9checkModei+0x7e>
	  else if (mod_ch >=1400 && mod_ch <1700) {
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8002526:	db0e      	blt.n	8002546 <_Z9checkModei+0x76>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800252e:	4293      	cmp	r3, r2
 8002530:	dc09      	bgt.n	8002546 <_Z9checkModei+0x76>
		  controller.mod = STABILIZE;
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <_Z9checkModei+0x88>)
 8002534:	2200      	movs	r2, #0
 8002536:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		  z0 = controller.p_alt.zi;
 800253a:	4b07      	ldr	r3, [pc, #28]	; (8002558 <_Z9checkModei+0x88>)
 800253c:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8002540:	4a0a      	ldr	r2, [pc, #40]	; (800256c <_Z9checkModei+0x9c>)
 8002542:	6013      	str	r3, [r2, #0]
}
 8002544:	e003      	b.n	800254e <_Z9checkModei+0x7e>
		  controller.mod = STABILIZE;
 8002546:	4b04      	ldr	r3, [pc, #16]	; (8002558 <_Z9checkModei+0x88>)
 8002548:	2200      	movs	r2, #0
 800254a:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000ea8 	.word	0x20000ea8
 800255c:	20000b60 	.word	0x20000b60
 8002560:	200012a8 	.word	0x200012a8
 8002564:	20001360 	.word	0x20001360
 8002568:	20001418 	.word	0x20001418
 800256c:	200015d0 	.word	0x200015d0

08002570 <_Z10CheckSwarmv>:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
		break;
	}
}

void CheckSwarm() {
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
	if(ch[SWARM_CH-1] > 1500) {
 8002574:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <_Z10CheckSwarmv+0x68>)
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800257c:	4293      	cmp	r3, r2
 800257e:	dd14      	ble.n	80025aa <_Z10CheckSwarmv+0x3a>
		if(swarm_mode != SWARM) {
 8002580:	4b16      	ldr	r3, [pc, #88]	; (80025dc <_Z10CheckSwarmv+0x6c>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d024      	beq.n	80025d2 <_Z10CheckSwarmv+0x62>
			swarm_mode = SWARM;
 8002588:	4b14      	ldr	r3, [pc, #80]	; (80025dc <_Z10CheckSwarmv+0x6c>)
 800258a:	2201      	movs	r2, #1
 800258c:	701a      	strb	r2, [r3, #0]

			controller.swarm = true;
 800258e:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <_Z10CheckSwarmv+0x70>)
 8002590:	2201      	movs	r2, #1
 8002592:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9

			controller.pid_roll.reset();
 8002596:	4813      	ldr	r0, [pc, #76]	; (80025e4 <_Z10CheckSwarmv+0x74>)
 8002598:	f00b fbde 	bl	800dd58 <_ZN3PID5resetEv>
			controller.pid_pitch.reset();
 800259c:	4812      	ldr	r0, [pc, #72]	; (80025e8 <_Z10CheckSwarmv+0x78>)
 800259e:	f00b fbdb 	bl	800dd58 <_ZN3PID5resetEv>
			controller.pid_yaw.reset();
 80025a2:	4812      	ldr	r0, [pc, #72]	; (80025ec <_Z10CheckSwarmv+0x7c>)
 80025a4:	f00b fbd8 	bl	800dd58 <_ZN3PID5resetEv>
			controller.pid_roll.reset();
			controller.pid_pitch.reset();
			controller.pid_yaw.reset();
		}
	}
}
 80025a8:	e013      	b.n	80025d2 <_Z10CheckSwarmv+0x62>
		if(swarm_mode != NORMAL) {
 80025aa:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <_Z10CheckSwarmv+0x6c>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00f      	beq.n	80025d2 <_Z10CheckSwarmv+0x62>
			controller.swarm = false;
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <_Z10CheckSwarmv+0x70>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			swarm_mode = NORMAL;
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <_Z10CheckSwarmv+0x6c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
			controller.pid_roll.reset();
 80025c0:	4808      	ldr	r0, [pc, #32]	; (80025e4 <_Z10CheckSwarmv+0x74>)
 80025c2:	f00b fbc9 	bl	800dd58 <_ZN3PID5resetEv>
			controller.pid_pitch.reset();
 80025c6:	4808      	ldr	r0, [pc, #32]	; (80025e8 <_Z10CheckSwarmv+0x78>)
 80025c8:	f00b fbc6 	bl	800dd58 <_ZN3PID5resetEv>
			controller.pid_yaw.reset();
 80025cc:	4807      	ldr	r0, [pc, #28]	; (80025ec <_Z10CheckSwarmv+0x7c>)
 80025ce:	f00b fbc3 	bl	800dd58 <_ZN3PID5resetEv>
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20001508 	.word	0x20001508
 80025dc:	20001626 	.word	0x20001626
 80025e0:	20000ea8 	.word	0x20000ea8
 80025e4:	20001080 	.word	0x20001080
 80025e8:	20001138 	.word	0x20001138
 80025ec:	200011f0 	.word	0x200011f0

080025f0 <_Z13CheckFailsafev>:

void CheckFailsafe() {
 80025f0:	b598      	push	{r3, r4, r7, lr}
 80025f2:	af00      	add	r7, sp, #0

	if(armed) {
 80025f4:	4b27      	ldr	r3, [pc, #156]	; (8002694 <_Z13CheckFailsafev+0xa4>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d048      	beq.n	800268e <_Z13CheckFailsafev+0x9e>
		if(ch[2] < 970 && !in_failsafe) {
 80025fc:	4b26      	ldr	r3, [pc, #152]	; (8002698 <_Z13CheckFailsafev+0xa8>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f240 32c9 	movw	r2, #969	; 0x3c9
 8002604:	4293      	cmp	r3, r2
 8002606:	dc0d      	bgt.n	8002624 <_Z13CheckFailsafev+0x34>
 8002608:	4b24      	ldr	r3, [pc, #144]	; (800269c <_Z13CheckFailsafev+0xac>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	f083 0301 	eor.w	r3, r3, #1
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d006      	beq.n	8002624 <_Z13CheckFailsafev+0x34>
			in_failsafe = true;
 8002616:	4b21      	ldr	r3, [pc, #132]	; (800269c <_Z13CheckFailsafev+0xac>)
 8002618:	2201      	movs	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
			Fail_Acc = accXc;
 800261c:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <_Z13CheckFailsafev+0xb0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a20      	ldr	r2, [pc, #128]	; (80026a4 <_Z13CheckFailsafev+0xb4>)
 8002622:	6013      	str	r3, [r2, #0]
		}

		if(failsafe_counter < 1000) {
 8002624:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <_Z13CheckFailsafev+0xb8>)
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800262c:	d226      	bcs.n	800267c <_Z13CheckFailsafev+0x8c>

			if(in_failsafe) { //5 seconds
 800262e:	4b1b      	ldr	r3, [pc, #108]	; (800269c <_Z13CheckFailsafev+0xac>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d02b      	beq.n	800268e <_Z13CheckFailsafev+0x9e>
				if(abs(accXc - Fail_Acc) < ACC_FAIL_LIM) {
 8002636:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <_Z13CheckFailsafev+0xb0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a1a      	ldr	r2, [pc, #104]	; (80026a4 <_Z13CheckFailsafev+0xb4>)
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fa75 	bl	8000b30 <__aeabi_fsub>
 8002646:	4603      	mov	r3, r0
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fbaf 	bl	8001dac <_ZSt3absf>
 800264e:	4603      	mov	r3, r0
 8002650:	2201      	movs	r2, #1
 8002652:	4614      	mov	r4, r2
 8002654:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fd11 	bl	8001080 <__aeabi_fcmplt>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <_Z13CheckFailsafev+0x78>
 8002664:	2300      	movs	r3, #0
 8002666:	461c      	mov	r4, r3
 8002668:	b2e3      	uxtb	r3, r4
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00f      	beq.n	800268e <_Z13CheckFailsafev+0x9e>
					failsafe_counter++;
 800266e:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <_Z13CheckFailsafev+0xb8>)
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	3301      	adds	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <_Z13CheckFailsafev+0xb8>)
 8002678:	801a      	strh	r2, [r3, #0]
			failsafe_counter = 0;
		}
	}


}
 800267a:	e008      	b.n	800268e <_Z13CheckFailsafev+0x9e>
			armed = false;
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <_Z13CheckFailsafev+0xa4>)
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
			in_failsafe = false;
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <_Z13CheckFailsafev+0xac>)
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
			failsafe_counter = 0;
 8002688:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <_Z13CheckFailsafev+0xb8>)
 800268a:	2200      	movs	r2, #0
 800268c:	801a      	strh	r2, [r3, #0]
}
 800268e:	bf00      	nop
 8002690:	bd98      	pop	{r3, r4, r7, pc}
 8002692:	bf00      	nop
 8002694:	20001571 	.word	0x20001571
 8002698:	20001508 	.word	0x20001508
 800269c:	2000161e 	.word	0x2000161e
 80026a0:	200008d8 	.word	0x200008d8
 80026a4:	20001620 	.word	0x20001620
 80026a8:	2000161c 	.word	0x2000161c

080026ac <_Z9Check_Armv>:


void Check_Arm() {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
	if(!armed) {
 80026b0:	4b27      	ldr	r3, [pc, #156]	; (8002750 <_Z9Check_Armv+0xa4>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	f083 0301 	eor.w	r3, r3, #1
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d045      	beq.n	800274a <_Z9Check_Armv+0x9e>
		if((ch[2] < CH3_MIN + 100) && (ch[3] > 1700)) {
 80026be:	4b25      	ldr	r3, [pc, #148]	; (8002754 <_Z9Check_Armv+0xa8>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f240 424b 	movw	r2, #1099	; 0x44b
 80026c6:	4293      	cmp	r3, r2
 80026c8:	dc3b      	bgt.n	8002742 <_Z9Check_Armv+0x96>
 80026ca:	4b22      	ldr	r3, [pc, #136]	; (8002754 <_Z9Check_Armv+0xa8>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80026d2:	4293      	cmp	r3, r2
 80026d4:	dd35      	ble.n	8002742 <_Z9Check_Armv+0x96>
				if(!arm_start){
 80026d6:	4b20      	ldr	r3, [pc, #128]	; (8002758 <_Z9Check_Armv+0xac>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	f083 0301 	eor.w	r3, r3, #1
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 80026e4:	f003 fc44 	bl	8005f70 <HAL_GetTick>
 80026e8:	4603      	mov	r3, r0
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <_Z9Check_Armv+0xb0>)
 80026ee:	601a      	str	r2, [r3, #0]
					arm_start = true;
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <_Z9Check_Armv+0xac>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 80026f6:	f003 fc3b 	bl	8005f70 <HAL_GetTick>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4a17      	ldr	r2, [pc, #92]	; (800275c <_Z9Check_Armv+0xb0>)
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002706:	4293      	cmp	r3, r2
 8002708:	bf8c      	ite	hi
 800270a:	2301      	movhi	r3, #1
 800270c:	2300      	movls	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01a      	beq.n	800274a <_Z9Check_Armv+0x9e>
					controller.pid_roll.reset();
 8002714:	4812      	ldr	r0, [pc, #72]	; (8002760 <_Z9Check_Armv+0xb4>)
 8002716:	f00b fb1f 	bl	800dd58 <_ZN3PID5resetEv>
					controller.pid_pitch.reset();
 800271a:	4812      	ldr	r0, [pc, #72]	; (8002764 <_Z9Check_Armv+0xb8>)
 800271c:	f00b fb1c 	bl	800dd58 <_ZN3PID5resetEv>
					controller.pid_yaw.reset();
 8002720:	4811      	ldr	r0, [pc, #68]	; (8002768 <_Z9Check_Armv+0xbc>)
 8002722:	f00b fb19 	bl	800dd58 <_ZN3PID5resetEv>
					armed = true;
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <_Z9Check_Armv+0xa4>)
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
					EKF.armed = true;
 800272c:	4b0f      	ldr	r3, [pc, #60]	; (800276c <_Z9Check_Armv+0xc0>)
 800272e:	2201      	movs	r2, #1
 8002730:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
					//SetHome2();
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8002734:	2201      	movs	r2, #1
 8002736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800273a:	480d      	ldr	r0, [pc, #52]	; (8002770 <_Z9Check_Armv+0xc4>)
 800273c:	f004 f93c 	bl	80069b8 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - arm_timer > 3000) {
 8002740:	e003      	b.n	800274a <_Z9Check_Armv+0x9e>
				}

		}

		else {
			arm_start = false;
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <_Z9Check_Armv+0xac>)
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8002748:	e7ff      	b.n	800274a <_Z9Check_Armv+0x9e>
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20001571 	.word	0x20001571
 8002754:	20001508 	.word	0x20001508
 8002758:	20001570 	.word	0x20001570
 800275c:	20001564 	.word	0x20001564
 8002760:	20001080 	.word	0x20001080
 8002764:	20001138 	.word	0x20001138
 8002768:	200011f0 	.word	0x200011f0
 800276c:	20000b60 	.word	0x20000b60
 8002770:	40010800 	.word	0x40010800

08002774 <_Z12Check_Disarmv>:

void Check_Disarm() {
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
	if(armed) {
 8002778:	4b21      	ldr	r3, [pc, #132]	; (8002800 <_Z12Check_Disarmv+0x8c>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d03c      	beq.n	80027fa <_Z12Check_Disarmv+0x86>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 8002780:	4b20      	ldr	r3, [pc, #128]	; (8002804 <_Z12Check_Disarmv+0x90>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f240 424b 	movw	r2, #1099	; 0x44b
 8002788:	4293      	cmp	r3, r2
 800278a:	dc32      	bgt.n	80027f2 <_Z12Check_Disarmv+0x7e>
 800278c:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <_Z12Check_Disarmv+0x90>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f240 424b 	movw	r2, #1099	; 0x44b
 8002794:	4293      	cmp	r3, r2
 8002796:	dc2c      	bgt.n	80027f2 <_Z12Check_Disarmv+0x7e>
				if(!disarm_start){
 8002798:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <_Z12Check_Disarmv+0x94>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	f083 0301 	eor.w	r3, r3, #1
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d008      	beq.n	80027b8 <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 80027a6:	f003 fbe3 	bl	8005f70 <HAL_GetTick>
 80027aa:	4603      	mov	r3, r0
 80027ac:	461a      	mov	r2, r3
 80027ae:	4b17      	ldr	r3, [pc, #92]	; (800280c <_Z12Check_Disarmv+0x98>)
 80027b0:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <_Z12Check_Disarmv+0x94>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 80027b8:	f003 fbda 	bl	8005f70 <HAL_GetTick>
 80027bc:	4603      	mov	r3, r0
 80027be:	4a13      	ldr	r2, [pc, #76]	; (800280c <_Z12Check_Disarmv+0x98>)
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80027c8:	4293      	cmp	r3, r2
 80027ca:	bf8c      	ite	hi
 80027cc:	2301      	movhi	r3, #1
 80027ce:	2300      	movls	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d011      	beq.n	80027fa <_Z12Check_Disarmv+0x86>
					armed = false;
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <_Z12Check_Disarmv+0x8c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
					EKF.armed = false;
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <_Z12Check_Disarmv+0x9c>)
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80027e4:	2200      	movs	r2, #0
 80027e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027ea:	480a      	ldr	r0, [pc, #40]	; (8002814 <_Z12Check_Disarmv+0xa0>)
 80027ec:	f004 f8e4 	bl	80069b8 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 80027f0:	e003      	b.n	80027fa <_Z12Check_Disarmv+0x86>
				}

		}

		else {
			disarm_start = false;
 80027f2:	4b05      	ldr	r3, [pc, #20]	; (8002808 <_Z12Check_Disarmv+0x94>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80027f8:	e7ff      	b.n	80027fa <_Z12Check_Disarmv+0x86>
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20001571 	.word	0x20001571
 8002804:	20001508 	.word	0x20001508
 8002808:	20001572 	.word	0x20001572
 800280c:	20001568 	.word	0x20001568
 8002810:	20000b60 	.word	0x20000b60
 8002814:	40010800 	.word	0x40010800

08002818 <_Z9TelemPackv>:

void TelemPack() {
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 800281c:	4b9e      	ldr	r3, [pc, #632]	; (8002a98 <_Z9TelemPackv+0x280>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a9e      	ldr	r2, [pc, #632]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002822:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 8002824:	4b9c      	ldr	r3, [pc, #624]	; (8002a98 <_Z9TelemPackv+0x280>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4a9c      	ldr	r2, [pc, #624]	; (8002a9c <_Z9TelemPackv+0x284>)
 800282a:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 800282c:	4b9a      	ldr	r3, [pc, #616]	; (8002a98 <_Z9TelemPackv+0x280>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	4a9a      	ldr	r2, [pc, #616]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002832:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 8002834:	4b9a      	ldr	r3, [pc, #616]	; (8002aa0 <_Z9TelemPackv+0x288>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	b29a      	uxth	r2, r3
 800283a:	4b98      	ldr	r3, [pc, #608]	; (8002a9c <_Z9TelemPackv+0x284>)
 800283c:	861a      	strh	r2, [r3, #48]	; 0x30
	  telem_pack.pwm.w2 = controller_output[1];
 800283e:	4b98      	ldr	r3, [pc, #608]	; (8002aa0 <_Z9TelemPackv+0x288>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	b29a      	uxth	r2, r3
 8002844:	4b95      	ldr	r3, [pc, #596]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002846:	865a      	strh	r2, [r3, #50]	; 0x32
	  telem_pack.pwm.w3 = controller_output[2];
 8002848:	4b95      	ldr	r3, [pc, #596]	; (8002aa0 <_Z9TelemPackv+0x288>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	b29a      	uxth	r2, r3
 800284e:	4b93      	ldr	r3, [pc, #588]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002850:	869a      	strh	r2, [r3, #52]	; 0x34
	  telem_pack.pwm.w4 = controller_output[3];
 8002852:	4b93      	ldr	r3, [pc, #588]	; (8002aa0 <_Z9TelemPackv+0x288>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	b29a      	uxth	r2, r3
 8002858:	4b90      	ldr	r3, [pc, #576]	; (8002a9c <_Z9TelemPackv+0x284>)
 800285a:	86da      	strh	r2, [r3, #54]	; 0x36

	  telem_pack.attitude_des.roll  = controller.roll_des;
 800285c:	4b91      	ldr	r3, [pc, #580]	; (8002aa4 <_Z9TelemPackv+0x28c>)
 800285e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8002862:	4a8e      	ldr	r2, [pc, #568]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002864:	60d3      	str	r3, [r2, #12]
	  telem_pack.attitude_des.pitch = controller.pitch_des;
 8002866:	4b8f      	ldr	r3, [pc, #572]	; (8002aa4 <_Z9TelemPackv+0x28c>)
 8002868:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800286c:	4a8b      	ldr	r2, [pc, #556]	; (8002a9c <_Z9TelemPackv+0x284>)
 800286e:	6113      	str	r3, [r2, #16]
	  telem_pack.attitude_des.yaw   = yaw_counter;
 8002870:	4b8d      	ldr	r3, [pc, #564]	; (8002aa8 <_Z9TelemPackv+0x290>)
 8002872:	f993 3000 	ldrsb.w	r3, [r3]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fa10 	bl	8000c9c <__aeabi_i2f>
 800287c:	4603      	mov	r3, r0
 800287e:	4a87      	ldr	r2, [pc, #540]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002880:	6153      	str	r3, [r2, #20]

	  telem_pack.attitude_rate.roll  = state.rates[0];
 8002882:	4b85      	ldr	r3, [pc, #532]	; (8002a98 <_Z9TelemPackv+0x280>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	4a85      	ldr	r2, [pc, #532]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002888:	6193      	str	r3, [r2, #24]
	  telem_pack.attitude_rate.pitch = state.rates[1];
 800288a:	4b83      	ldr	r3, [pc, #524]	; (8002a98 <_Z9TelemPackv+0x280>)
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	4a83      	ldr	r2, [pc, #524]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002890:	61d3      	str	r3, [r2, #28]
	  telem_pack.attitude_rate.yaw 	 = state.rates[2];
 8002892:	4b81      	ldr	r3, [pc, #516]	; (8002a98 <_Z9TelemPackv+0x280>)
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	4a81      	ldr	r2, [pc, #516]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002898:	6213      	str	r3, [r2, #32]

	  telem_pack.attitude_rate_des.roll =  state_des.rates[0];
 800289a:	4b84      	ldr	r3, [pc, #528]	; (8002aac <_Z9TelemPackv+0x294>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	4a7f      	ldr	r2, [pc, #508]	; (8002a9c <_Z9TelemPackv+0x284>)
 80028a0:	6253      	str	r3, [r2, #36]	; 0x24
	  telem_pack.attitude_rate_des.pitch = state_des.rates[1];
 80028a2:	4b82      	ldr	r3, [pc, #520]	; (8002aac <_Z9TelemPackv+0x294>)
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	4a7d      	ldr	r2, [pc, #500]	; (8002a9c <_Z9TelemPackv+0x284>)
 80028a8:	6293      	str	r3, [r2, #40]	; 0x28

	  telem_pack.ekf.roll_acc  = EKF.roll_acc;
 80028aa:	4b81      	ldr	r3, [pc, #516]	; (8002ab0 <_Z9TelemPackv+0x298>)
 80028ac:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80028b0:	4a7a      	ldr	r2, [pc, #488]	; (8002a9c <_Z9TelemPackv+0x284>)
 80028b2:	6393      	str	r3, [r2, #56]	; 0x38
	  telem_pack.ekf.pitch_acc = EKF.pitch_acc;
 80028b4:	4b7e      	ldr	r3, [pc, #504]	; (8002ab0 <_Z9TelemPackv+0x298>)
 80028b6:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80028ba:	4a78      	ldr	r2, [pc, #480]	; (8002a9c <_Z9TelemPackv+0x284>)
 80028bc:	63d3      	str	r3, [r2, #60]	; 0x3c

	  telem_pack.ekf.roll_gyro  = EKF.gyro[0];
 80028be:	4b7c      	ldr	r3, [pc, #496]	; (8002ab0 <_Z9TelemPackv+0x298>)
 80028c0:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80028c4:	4a75      	ldr	r2, [pc, #468]	; (8002a9c <_Z9TelemPackv+0x284>)
 80028c6:	6413      	str	r3, [r2, #64]	; 0x40
	  telem_pack.ekf.pitch_gyro = EKF.gyro[1];
 80028c8:	4b79      	ldr	r3, [pc, #484]	; (8002ab0 <_Z9TelemPackv+0x298>)
 80028ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028ce:	4a73      	ldr	r2, [pc, #460]	; (8002a9c <_Z9TelemPackv+0x284>)
 80028d0:	6453      	str	r3, [r2, #68]	; 0x44

	  telem_pack.ekf.roll_comp =  EKF.roll_bias;
 80028d2:	4b77      	ldr	r3, [pc, #476]	; (8002ab0 <_Z9TelemPackv+0x298>)
 80028d4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80028d8:	4a70      	ldr	r2, [pc, #448]	; (8002a9c <_Z9TelemPackv+0x284>)
 80028da:	6493      	str	r3, [r2, #72]	; 0x48
	  telem_pack.ekf.pitch_comp = EKF.pitch_bias;
 80028dc:	4b74      	ldr	r3, [pc, #464]	; (8002ab0 <_Z9TelemPackv+0x298>)
 80028de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80028e2:	4a6e      	ldr	r2, [pc, #440]	; (8002a9c <_Z9TelemPackv+0x284>)
 80028e4:	64d3      	str	r3, [r2, #76]	; 0x4c

	  telem_pack.ekf.roll_ekf =  EKF.roll_ekf;
 80028e6:	4b72      	ldr	r3, [pc, #456]	; (8002ab0 <_Z9TelemPackv+0x298>)
 80028e8:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 80028ec:	4a6b      	ldr	r2, [pc, #428]	; (8002a9c <_Z9TelemPackv+0x284>)
 80028ee:	6513      	str	r3, [r2, #80]	; 0x50
	  telem_pack.ekf.pitch_ekf = EKF.pitch_ekf;
 80028f0:	4b6f      	ldr	r3, [pc, #444]	; (8002ab0 <_Z9TelemPackv+0x298>)
 80028f2:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80028f6:	4a69      	ldr	r2, [pc, #420]	; (8002a9c <_Z9TelemPackv+0x284>)
 80028f8:	6553      	str	r3, [r2, #84]	; 0x54

	  telem_pack.pid_roll.P = controller.pid_roll.P;
 80028fa:	4b6a      	ldr	r3, [pc, #424]	; (8002aa4 <_Z9TelemPackv+0x28c>)
 80028fc:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8002900:	4a66      	ldr	r2, [pc, #408]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002902:	6593      	str	r3, [r2, #88]	; 0x58
	  telem_pack.pid_roll.I = controller.pid_roll.I;
 8002904:	4b67      	ldr	r3, [pc, #412]	; (8002aa4 <_Z9TelemPackv+0x28c>)
 8002906:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800290a:	4a64      	ldr	r2, [pc, #400]	; (8002a9c <_Z9TelemPackv+0x284>)
 800290c:	65d3      	str	r3, [r2, #92]	; 0x5c
	  telem_pack.pid_roll.D = controller.pid_roll.D;
 800290e:	4b65      	ldr	r3, [pc, #404]	; (8002aa4 <_Z9TelemPackv+0x28c>)
 8002910:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8002914:	4a61      	ldr	r2, [pc, #388]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002916:	6613      	str	r3, [r2, #96]	; 0x60
	  telem_pack.pid_roll.pd_roll_sat_buf = controller.pid_roll.pd_roll_sat_buf;
 8002918:	4b62      	ldr	r3, [pc, #392]	; (8002aa4 <_Z9TelemPackv+0x28c>)
 800291a:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 800291e:	4a5f      	ldr	r2, [pc, #380]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002920:	6653      	str	r3, [r2, #100]	; 0x64

	  telem_pack.pid_pitch.P = controller.pid_pitch.P;
 8002922:	4b60      	ldr	r3, [pc, #384]	; (8002aa4 <_Z9TelemPackv+0x28c>)
 8002924:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 8002928:	4a5c      	ldr	r2, [pc, #368]	; (8002a9c <_Z9TelemPackv+0x284>)
 800292a:	6693      	str	r3, [r2, #104]	; 0x68
	  telem_pack.pid_pitch.I = controller.pid_pitch.I;
 800292c:	4b5d      	ldr	r3, [pc, #372]	; (8002aa4 <_Z9TelemPackv+0x28c>)
 800292e:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8002932:	4a5a      	ldr	r2, [pc, #360]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002934:	66d3      	str	r3, [r2, #108]	; 0x6c
	  telem_pack.pid_pitch.D = controller.pid_pitch.D;
 8002936:	4b5b      	ldr	r3, [pc, #364]	; (8002aa4 <_Z9TelemPackv+0x28c>)
 8002938:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800293c:	4a57      	ldr	r2, [pc, #348]	; (8002a9c <_Z9TelemPackv+0x284>)
 800293e:	6713      	str	r3, [r2, #112]	; 0x70
	  telem_pack.pid_pitch.pd_roll_sat_buf = controller.pid_pitch.pd_roll_sat_buf;
 8002940:	4b58      	ldr	r3, [pc, #352]	; (8002aa4 <_Z9TelemPackv+0x28c>)
 8002942:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 8002946:	4a55      	ldr	r2, [pc, #340]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002948:	6753      	str	r3, [r2, #116]	; 0x74

	  telem_pack.sonar_alt = EKF.sonar_alt;
 800294a:	4b59      	ldr	r3, [pc, #356]	; (8002ab0 <_Z9TelemPackv+0x298>)
 800294c:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8002950:	4a52      	ldr	r2, [pc, #328]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002952:	6793      	str	r3, [r2, #120]	; 0x78
	  telem_pack.velocity_body.z = EKF.vz;
 8002954:	4b56      	ldr	r3, [pc, #344]	; (8002ab0 <_Z9TelemPackv+0x298>)
 8002956:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 800295a:	4a50      	ldr	r2, [pc, #320]	; (8002a9c <_Z9TelemPackv+0x284>)
 800295c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	  telem_pack.position_body.z = EKF.alt_gnd;
 8002960:	4b53      	ldr	r3, [pc, #332]	; (8002ab0 <_Z9TelemPackv+0x298>)
 8002962:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8002966:	4a4d      	ldr	r2, [pc, #308]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	  telem_pack.cam_data.detected = cam_data_20.detected;
 800296c:	4b51      	ldr	r3, [pc, #324]	; (8002ab4 <_Z9TelemPackv+0x29c>)
 800296e:	781a      	ldrb	r2, [r3, #0]
 8002970:	4b4a      	ldr	r3, [pc, #296]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002972:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	  telem_pack.cam_data.x = cam_data_20.x;
 8002976:	4b4f      	ldr	r3, [pc, #316]	; (8002ab4 <_Z9TelemPackv+0x29c>)
 8002978:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800297c:	b21a      	sxth	r2, r3
 800297e:	4b47      	ldr	r3, [pc, #284]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002980:	f8a3 209d 	strh.w	r2, [r3, #157]	; 0x9d
	  telem_pack.cam_data.y = cam_data_20.y;
 8002984:	4b4b      	ldr	r3, [pc, #300]	; (8002ab4 <_Z9TelemPackv+0x29c>)
 8002986:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800298a:	b21a      	sxth	r2, r3
 800298c:	4b43      	ldr	r3, [pc, #268]	; (8002a9c <_Z9TelemPackv+0x284>)
 800298e:	f8a3 209f 	strh.w	r2, [r3, #159]	; 0x9f
	  telem_pack.cam_data.z_cam = cam_data_20.z_cam;
 8002992:	4b48      	ldr	r3, [pc, #288]	; (8002ab4 <_Z9TelemPackv+0x29c>)
 8002994:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8002998:	b21a      	sxth	r2, r3
 800299a:	4b40      	ldr	r3, [pc, #256]	; (8002a9c <_Z9TelemPackv+0x284>)
 800299c:	f8a3 20a1 	strh.w	r2, [r3, #161]	; 0xa1


	  telem_pack.position_body.x = EKF.x;
 80029a0:	4b43      	ldr	r3, [pc, #268]	; (8002ab0 <_Z9TelemPackv+0x298>)
 80029a2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80029a6:	4a3d      	ldr	r2, [pc, #244]	; (8002a9c <_Z9TelemPackv+0x284>)
 80029a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	  telem_pack.velocity_body.x = EKF.vx;
 80029ac:	4b40      	ldr	r3, [pc, #256]	; (8002ab0 <_Z9TelemPackv+0x298>)
 80029ae:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80029b2:	4a3a      	ldr	r2, [pc, #232]	; (8002a9c <_Z9TelemPackv+0x284>)
 80029b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	  telem_pack.position_body.y = EKF.y;
 80029b8:	4b3d      	ldr	r3, [pc, #244]	; (8002ab0 <_Z9TelemPackv+0x298>)
 80029ba:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 80029be:	4a37      	ldr	r2, [pc, #220]	; (8002a9c <_Z9TelemPackv+0x284>)
 80029c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	  telem_pack.velocity_body.y = EKF.vy;
 80029c4:	4b3a      	ldr	r3, [pc, #232]	; (8002ab0 <_Z9TelemPackv+0x298>)
 80029c6:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 80029ca:	4a34      	ldr	r2, [pc, #208]	; (8002a9c <_Z9TelemPackv+0x284>)
 80029cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	  telem_pack.alt_thr = controller.alt_thr;
 80029d0:	4b34      	ldr	r3, [pc, #208]	; (8002aa4 <_Z9TelemPackv+0x28c>)
 80029d2:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
 80029d6:	4a31      	ldr	r2, [pc, #196]	; (8002a9c <_Z9TelemPackv+0x284>)
 80029d8:	67d3      	str	r3, [r2, #124]	; 0x7c

	  telem_pack.time_millis = HAL_GetTick();
 80029da:	f003 fac9 	bl	8005f70 <HAL_GetTick>
 80029de:	4603      	mov	r3, r0
 80029e0:	4a2e      	ldr	r2, [pc, #184]	; (8002a9c <_Z9TelemPackv+0x284>)
 80029e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	  telem_pack.acc.x = accXc;
 80029e6:	4b34      	ldr	r3, [pc, #208]	; (8002ab8 <_Z9TelemPackv+0x2a0>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4b2c      	ldr	r3, [pc, #176]	; (8002a9c <_Z9TelemPackv+0x284>)
 80029ec:	f8c3 20a5 	str.w	r2, [r3, #165]	; 0xa5
	  telem_pack.acc.y = accYc;
 80029f0:	4b32      	ldr	r3, [pc, #200]	; (8002abc <_Z9TelemPackv+0x2a4>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b29      	ldr	r3, [pc, #164]	; (8002a9c <_Z9TelemPackv+0x284>)
 80029f6:	f8c3 20a9 	str.w	r2, [r3, #169]	; 0xa9
	  telem_pack.acc.z = accZm;
 80029fa:	4b31      	ldr	r3, [pc, #196]	; (8002ac0 <_Z9TelemPackv+0x2a8>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	4b27      	ldr	r3, [pc, #156]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002a00:	f8c3 20ad 	str.w	r2, [r3, #173]	; 0xad

	  telem_pack.mag.x = MAG_X_CALIB;
 8002a04:	4b2f      	ldr	r3, [pc, #188]	; (8002ac4 <_Z9TelemPackv+0x2ac>)
 8002a06:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a0a:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002a0c:	f8a3 20b1 	strh.w	r2, [r3, #177]	; 0xb1
	  telem_pack.mag.y = MAG_Y_CALIB;
 8002a10:	4b2d      	ldr	r3, [pc, #180]	; (8002ac8 <_Z9TelemPackv+0x2b0>)
 8002a12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a16:	4b21      	ldr	r3, [pc, #132]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002a18:	f8a3 20b3 	strh.w	r2, [r3, #179]	; 0xb3
	  telem_pack.mag.z = MAG_Z_CALIB;
 8002a1c:	4b2b      	ldr	r3, [pc, #172]	; (8002acc <_Z9TelemPackv+0x2b4>)
 8002a1e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a22:	4b1e      	ldr	r3, [pc, #120]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002a24:	f8a3 20b5 	strh.w	r2, [r3, #181]	; 0xb5

	  telem_pack.gps.vel_body.x = EKF.vgpsx;
	  telem_pack.gps.vel_body.y = EKF.vgpsy;
	   */

	  telem_pack.ch.ch1 = (uint16_t)ch[0];
 8002a28:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <_Z9TelemPackv+0x2b8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002a30:	f8a3 20e7 	strh.w	r2, [r3, #231]	; 0xe7
	  telem_pack.ch.ch2 = (uint16_t)ch[1];
 8002a34:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <_Z9TelemPackv+0x2b8>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	4b18      	ldr	r3, [pc, #96]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002a3c:	f8a3 20e9 	strh.w	r2, [r3, #233]	; 0xe9
	  telem_pack.ch.ch3 = (uint16_t)ch[2];
 8002a40:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <_Z9TelemPackv+0x2b8>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002a48:	f8a3 20eb 	strh.w	r2, [r3, #235]	; 0xeb
	  telem_pack.ch.ch4 = (uint16_t)ch[3];
 8002a4c:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <_Z9TelemPackv+0x2b8>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002a54:	f8a3 20ed 	strh.w	r2, [r3, #237]	; 0xed
	  telem_pack.ch.ch5 = (uint16_t)ch[4];
 8002a58:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <_Z9TelemPackv+0x2b8>)
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002a60:	f8a3 20ef 	strh.w	r2, [r3, #239]	; 0xef
	  telem_pack.ch.ch6 = (uint16_t)ch[5];
 8002a64:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <_Z9TelemPackv+0x2b8>)
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002a6c:	f8a3 20f1 	strh.w	r2, [r3, #241]	; 0xf1
	  telem_pack.ch.ch7 = (uint16_t)ch[6];
 8002a70:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <_Z9TelemPackv+0x2b8>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002a78:	f8a3 20f3 	strh.w	r2, [r3, #243]	; 0xf3
	  telem_pack.ch.ch8 = (uint16_t)ch[7];
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <_Z9TelemPackv+0x2b8>)
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002a84:	f8a3 20f5 	strh.w	r2, [r3, #245]	; 0xf5
	  telem_pack.ch.ch9 = (uint16_t)ch[8];
 8002a88:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <_Z9TelemPackv+0x2b8>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <_Z9TelemPackv+0x284>)
 8002a90:	f8a3 20f7 	strh.w	r2, [r3, #247]	; 0xf7
 8002a94:	e01e      	b.n	8002ad4 <_Z9TelemPackv+0x2bc>
 8002a96:	bf00      	nop
 8002a98:	2000092c 	.word	0x2000092c
 8002a9c:	20000950 	.word	0x20000950
 8002aa0:	200014d8 	.word	0x200014d8
 8002aa4:	20000ea8 	.word	0x20000ea8
 8002aa8:	20001627 	.word	0x20001627
 8002aac:	20000908 	.word	0x20000908
 8002ab0:	20000b60 	.word	0x20000b60
 8002ab4:	200015f0 	.word	0x200015f0
 8002ab8:	200008d8 	.word	0x200008d8
 8002abc:	200008dc 	.word	0x200008dc
 8002ac0:	200008ec 	.word	0x200008ec
 8002ac4:	2000160e 	.word	0x2000160e
 8002ac8:	20001610 	.word	0x20001610
 8002acc:	20001612 	.word	0x20001612
 8002ad0:	20001508 	.word	0x20001508
	  telem_pack.ch.ch10 = (uint16_t)ch[9];
 8002ad4:	4b17      	ldr	r3, [pc, #92]	; (8002b34 <_Z9TelemPackv+0x31c>)
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <_Z9TelemPackv+0x320>)
 8002adc:	f8a3 20f9 	strh.w	r2, [r3, #249]	; 0xf9
	  telem_pack.ch.ch11 = (uint16_t)ch[10];
 8002ae0:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <_Z9TelemPackv+0x31c>)
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <_Z9TelemPackv+0x320>)
 8002ae8:	f8a3 20fb 	strh.w	r2, [r3, #251]	; 0xfb

	  telem_pack.pwm2.w1 = controller_output_2[0];
 8002aec:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <_Z9TelemPackv+0x324>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <_Z9TelemPackv+0x320>)
 8002af4:	f8a3 20fd 	strh.w	r2, [r3, #253]	; 0xfd
	  telem_pack.pwm2.w2 = controller_output_2[1];
 8002af8:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <_Z9TelemPackv+0x324>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <_Z9TelemPackv+0x320>)
 8002b00:	f8a3 20ff 	strh.w	r2, [r3, #255]	; 0xff
	  telem_pack.pwm2.w3 = controller_output_2[2];
 8002b04:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <_Z9TelemPackv+0x324>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <_Z9TelemPackv+0x320>)
 8002b0c:	f8a3 2101 	strh.w	r2, [r3, #257]	; 0x101
	  telem_pack.pwm2.w4 = controller_output_2[3];
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <_Z9TelemPackv+0x324>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <_Z9TelemPackv+0x320>)
 8002b18:	f8a3 2103 	strh.w	r2, [r3, #259]	; 0x103

	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 8002b1c:	4a08      	ldr	r2, [pc, #32]	; (8002b40 <_Z9TelemPackv+0x328>)
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <_Z9TelemPackv+0x320>)
 8002b20:	4610      	mov	r0, r2
 8002b22:	4619      	mov	r1, r3
 8002b24:	f240 1305 	movw	r3, #261	; 0x105
 8002b28:	461a      	mov	r2, r3
 8002b2a:	f00d fbdf 	bl	80102ec <memcpy>
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20001508 	.word	0x20001508
 8002b38:	20000950 	.word	0x20000950
 8002b3c:	200014e8 	.word	0x200014e8
 8002b40:	20000a58 	.word	0x20000a58

08002b44 <_Z7GyroOkuh>:
	  sent_time = HAL_GetTick();


}

int16_t GyroOku (uint8_t addr) {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af04      	add	r7, sp, #16
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	2301      	movs	r3, #1
 8002b54:	9302      	str	r3, [sp, #8]
 8002b56:	2302      	movs	r3, #2
 8002b58:	9301      	str	r3, [sp, #4]
 8002b5a:	f107 030c 	add.w	r3, r7, #12
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	2301      	movs	r3, #1
 8002b62:	21d1      	movs	r1, #209	; 0xd1
 8002b64:	4807      	ldr	r0, [pc, #28]	; (8002b84 <_Z7GyroOkuh+0x40>)
 8002b66:	f004 fcf5 	bl	8007554 <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 8002b6a:	7b3b      	ldrb	r3, [r7, #12]
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	b21a      	sxth	r2, r3
 8002b70:	7b7b      	ldrb	r3, [r7, #13]
 8002b72:	b21b      	sxth	r3, r3
 8002b74:	4313      	orrs	r3, r2
 8002b76:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8002b78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	200016e8 	.word	0x200016e8

08002b88 <_Z7pwm2angt>:
    }


}

float pwm2ang(unsigned short int pwm) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	80fb      	strh	r3, [r7, #6]
	int dead_zone = 5;
 8002b92:	2305      	movs	r3, #5
 8002b94:	61bb      	str	r3, [r7, #24]

	int in_min  = 1000;
 8002b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b9a:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8002b9c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002ba0:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	*/
	int out_min = -20;
 8002ba2:	f06f 0313 	mvn.w	r3, #19
 8002ba6:	60fb      	str	r3, [r7, #12]
	int out_max  = 20;
 8002ba8:	2314      	movs	r3, #20
 8002baa:	60bb      	str	r3, [r7, #8]
	unsigned short int pwm_out;

	if(pwm > 1500 - dead_zone && pwm < 1500 + dead_zone) {
 8002bac:	88fa      	ldrh	r2, [r7, #6]
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	dd09      	ble.n	8002bce <_Z7pwm2angt+0x46>
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	db03      	blt.n	8002bce <_Z7pwm2angt+0x46>
		pwm_out = 1500;
 8002bc6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002bca:	83fb      	strh	r3, [r7, #30]
 8002bcc:	e001      	b.n	8002bd2 <_Z7pwm2angt+0x4a>
	}

	else {
		pwm_out = pwm;
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	83fb      	strh	r3, [r7, #30]
	}

	return (pwm_out - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002bd2:	8bfa      	ldrh	r2, [r7, #30]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	1a8a      	subs	r2, r1, r2
 8002bde:	fb02 f203 	mul.w	r2, r2, r3
 8002be2:	6939      	ldr	r1, [r7, #16]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	1acb      	subs	r3, r1, r3
 8002be8:	fb92 f2f3 	sdiv	r2, r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4413      	add	r3, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fe f853 	bl	8000c9c <__aeabi_i2f>
 8002bf6:	4603      	mov	r3, r0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3720      	adds	r7, #32
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <_Z8pwm2ratet>:

float pwm2rate(unsigned short int pwm) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	80fb      	strh	r3, [r7, #6]

	int in_min  = 1000;
 8002c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c0e:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8002c10:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002c14:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	 */
	int out_min = -100;
 8002c16:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002c1a:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 8002c1c:	2364      	movs	r3, #100	; 0x64
 8002c1e:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8002c20:	88fa      	ldrh	r2, [r7, #6]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	68b9      	ldr	r1, [r7, #8]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	1a8a      	subs	r2, r1, r2
 8002c2c:	fb02 f203 	mul.w	r2, r2, r3
 8002c30:	6939      	ldr	r1, [r7, #16]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	1acb      	subs	r3, r1, r3
 8002c36:	fb92 f2f3 	sdiv	r2, r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	425b      	negs	r3, r3
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fe f82b 	bl	8000c9c <__aeabi_i2f>
 8002c46:	4603      	mov	r3, r0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <_Z6AccOkuh>:


int16_t AccOku (uint8_t addr) {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af04      	add	r7, sp, #16
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)ADXL345 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	2301      	movs	r3, #1
 8002c60:	9302      	str	r3, [sp, #8]
 8002c62:	2302      	movs	r3, #2
 8002c64:	9301      	str	r3, [sp, #4]
 8002c66:	f107 030c 	add.w	r3, r7, #12
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	21a7      	movs	r1, #167	; 0xa7
 8002c70:	4807      	ldr	r0, [pc, #28]	; (8002c90 <_Z6AccOkuh+0x40>)
 8002c72:	f004 fc6f 	bl	8007554 <HAL_I2C_Mem_Read>
	int16_t gyro = (gyro_data[1]<<8) | gyro_data[0];
 8002c76:	7b7b      	ldrb	r3, [r7, #13]
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	b21a      	sxth	r2, r3
 8002c7c:	7b3b      	ldrb	r3, [r7, #12]
 8002c7e:	b21b      	sxth	r3, r3
 8002c80:	4313      	orrs	r3, r2
 8002c82:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8002c84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	200016e8 	.word	0x200016e8

08002c94 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7fd fbb1 	bl	8000404 <__aeabi_i2d>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f00b fbe1 	bl	800e470 <sqrt>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_Z9DCM2EulerPsS_>:

struct attitude DCM2Euler(int16_t acc[3], int16_t mag[3]) {
 8002cbc:	b5b0      	push	{r4, r5, r7, lr}
 8002cbe:	b08e      	sub	sp, #56	; 0x38
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
	struct attitude euler_angles;
	float rad2deg = 180.0/3.14;
 8002cc8:	4bc6      	ldr	r3, [pc, #792]	; (8002fe4 <_Z9DCM2EulerPsS_+0x328>)
 8002cca:	637b      	str	r3, [r7, #52]	; 0x34
	float acctop = sqrt(acc[0]*acc[0] + acc[1]*acc[1] + acc[2]*acc[2]);
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cda:	fb03 f202 	mul.w	r2, r3, r2
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	3302      	adds	r3, #2
 8002ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	3302      	adds	r3, #2
 8002cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cf0:	fb03 f301 	mul.w	r3, r3, r1
 8002cf4:	441a      	add	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	3304      	adds	r3, #4
 8002d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d08:	fb03 f301 	mul.w	r3, r3, r1
 8002d0c:	4413      	add	r3, r2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ffc0 	bl	8002c94 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	f7fd feb4 	bl	8000a88 <__aeabi_d2f>
 8002d20:	4603      	mov	r3, r0
 8002d22:	633b      	str	r3, [r7, #48]	; 0x30

	//float A = (acctop*sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1])));
	//float DCM11 = (mag[0]*acc[1]*acc[1] - acc[0]*mag[1]*acc[1] + mag[0]*acc[2]*acc[2] - acc[0]*mag[2]*acc[2])/A;
	float DCM11 = (mag[0]*acc[1]*acc[1] - acc[0]*mag[1]*acc[1] + mag[0]*acc[2]*acc[2] - acc[0]*mag[2]*acc[2])/(acctop*sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1])));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	3302      	adds	r3, #2
 8002d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d34:	fb03 f302 	mul.w	r3, r3, r2
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	3202      	adds	r2, #2
 8002d3c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002d40:	fb02 f203 	mul.w	r2, r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3302      	adds	r3, #2
 8002d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d54:	fb03 f301 	mul.w	r3, r3, r1
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	3102      	adds	r1, #2
 8002d5c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	1ad2      	subs	r2, r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3304      	adds	r3, #4
 8002d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d76:	fb03 f301 	mul.w	r3, r3, r1
 8002d7a:	68b9      	ldr	r1, [r7, #8]
 8002d7c:	3104      	adds	r1, #4
 8002d7e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	441a      	add	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3304      	adds	r3, #4
 8002d94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d98:	fb03 f301 	mul.w	r3, r3, r1
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	3104      	adds	r1, #4
 8002da0:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd ff76 	bl	8000c9c <__aeabi_i2f>
 8002db0:	4604      	mov	r4, r0
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db8:	461a      	mov	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3302      	adds	r3, #2
 8002dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dc2:	fb03 f202 	mul.w	r2, r3, r2
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	3302      	adds	r3, #2
 8002dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dce:	4619      	mov	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dd6:	fb03 f301 	mul.w	r3, r3, r1
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fd ff5d 	bl	8000c9c <__aeabi_i2f>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 f9d3 	bl	8003190 <_Z6squaref>
 8002dea:	4605      	mov	r5, r0
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002df2:	461a      	mov	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3304      	adds	r3, #4
 8002df8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dfc:	fb03 f202 	mul.w	r2, r3, r2
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	3304      	adds	r3, #4
 8002e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e10:	fb03 f301 	mul.w	r3, r3, r1
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fd ff40 	bl	8000c9c <__aeabi_i2f>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 f9b6 	bl	8003190 <_Z6squaref>
 8002e24:	4603      	mov	r3, r0
 8002e26:	4619      	mov	r1, r3
 8002e28:	4628      	mov	r0, r5
 8002e2a:	f7fd fe83 	bl	8000b34 <__addsf3>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	461d      	mov	r5, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	3302      	adds	r3, #2
 8002e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e44:	fb03 f202 	mul.w	r2, r3, r2
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e50:	4619      	mov	r1, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3302      	adds	r3, #2
 8002e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e5a:	fb03 f301 	mul.w	r3, r3, r1
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd ff1b 	bl	8000c9c <__aeabi_i2f>
 8002e66:	4603      	mov	r3, r0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 f991 	bl	8003190 <_Z6squaref>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4619      	mov	r1, r3
 8002e72:	4628      	mov	r0, r5
 8002e74:	f7fd fe5e 	bl	8000b34 <__addsf3>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe ffc8 	bl	8001e10 <_ZSt4sqrtf>
 8002e80:	4603      	mov	r3, r0
 8002e82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fd ff5d 	bl	8000d44 <__aeabi_fmul>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f7fe f80c 	bl	8000eac <__aeabi_fdiv>
 8002e94:	4603      	mov	r3, r0
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
	//A = sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1]));
	//float DCM21 = -(acc[1]*mag[2] - acc[2]*mag[1])/A;
	float DCM21 = -(acc[1]*mag[2] - acc[2]*mag[1])/sqrt(square(acc[0]*mag[1] - acc[1]*mag[0]) + square(acc[0]*mag[2] - acc[2]*mag[0]) + square(acc[1]*mag[2] - acc[2]*mag[1]));
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eaa:	fb03 f202 	mul.w	r2, r3, r2
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	3302      	adds	r3, #2
 8002eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ec0:	fb03 f301 	mul.w	r3, r3, r1
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fee8 	bl	8000c9c <__aeabi_i2f>
 8002ecc:	4604      	mov	r4, r0
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3302      	adds	r3, #2
 8002eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ede:	fb03 f202 	mul.w	r2, r3, r2
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	3302      	adds	r3, #2
 8002ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eea:	4619      	mov	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef2:	fb03 f301 	mul.w	r3, r3, r1
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd fecf 	bl	8000c9c <__aeabi_i2f>
 8002efe:	4603      	mov	r3, r0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 f945 	bl	8003190 <_Z6squaref>
 8002f06:	4605      	mov	r5, r0
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3304      	adds	r3, #4
 8002f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f18:	fb03 f202 	mul.w	r2, r3, r2
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f24:	4619      	mov	r1, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f2c:	fb03 f301 	mul.w	r3, r3, r1
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd feb2 	bl	8000c9c <__aeabi_i2f>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 f928 	bl	8003190 <_Z6squaref>
 8002f40:	4603      	mov	r3, r0
 8002f42:	4619      	mov	r1, r3
 8002f44:	4628      	mov	r0, r5
 8002f46:	f7fd fdf5 	bl	8000b34 <__addsf3>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	461d      	mov	r5, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	3302      	adds	r3, #2
 8002f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f56:	461a      	mov	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f60:	fb03 f202 	mul.w	r2, r3, r2
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	3304      	adds	r3, #4
 8002f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3302      	adds	r3, #2
 8002f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f76:	fb03 f301 	mul.w	r3, r3, r1
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd fe8d 	bl	8000c9c <__aeabi_i2f>
 8002f82:	4603      	mov	r3, r0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 f903 	bl	8003190 <_Z6squaref>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4628      	mov	r0, r5
 8002f90:	f7fd fdd0 	bl	8000b34 <__addsf3>
 8002f94:	4603      	mov	r3, r0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe ff3a 	bl	8001e10 <_ZSt4sqrtf>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f7fd ff83 	bl	8000eac <__aeabi_fdiv>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	62bb      	str	r3, [r7, #40]	; 0x28


	float DCM31 = -acc[0]/acctop;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fb0:	425b      	negs	r3, r3
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd fe72 	bl	8000c9c <__aeabi_i2f>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fd ff75 	bl	8000eac <__aeabi_fdiv>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
	float DCM32 = -acc[1]/acctop;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	3302      	adds	r3, #2
 8002fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fce:	425b      	negs	r3, r3
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fd fe63 	bl	8000c9c <__aeabi_i2f>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd ff66 	bl	8000eac <__aeabi_fdiv>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	e001      	b.n	8002fe8 <_Z9DCM2EulerPsS_+0x32c>
 8002fe4:	42654ca3 	.word	0x42654ca3
 8002fe8:	623b      	str	r3, [r7, #32]
	float DCM33 = -acc[2]/acctop;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	3304      	adds	r3, #4
 8002fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ff2:	425b      	negs	r3, r3
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fd fe51 	bl	8000c9c <__aeabi_i2f>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd ff54 	bl	8000eac <__aeabi_fdiv>
 8003004:	4603      	mov	r3, r0
 8003006:	61fb      	str	r3, [r7, #28]
	//euler_angles.pitch = rad2deg*atan2(-DCM31,x);
	float pitch = asin(-DCM31);
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe fed8 	bl	8001dc4 <_ZSt4asinf>
 8003014:	61b8      	str	r0, [r7, #24]
	float cp = cos(pitch);
 8003016:	69b8      	ldr	r0, [r7, #24]
 8003018:	f7fe fd32 	bl	8001a80 <_ZSt3cosf>
 800301c:	6178      	str	r0, [r7, #20]

	euler_angles.pitch = rad2deg*pitch;
 800301e:	69b9      	ldr	r1, [r7, #24]
 8003020:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003022:	f7fd fe8f 	bl	8000d44 <__aeabi_fmul>
 8003026:	4603      	mov	r3, r0
 8003028:	461a      	mov	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	605a      	str	r2, [r3, #4]
	//pitch = asin(pitch);
	euler_angles.roll = rad2deg*atan(DCM32/DCM33);
 800302e:	69f9      	ldr	r1, [r7, #28]
 8003030:	6a38      	ldr	r0, [r7, #32]
 8003032:	f7fd ff3b 	bl	8000eac <__aeabi_fdiv>
 8003036:	4603      	mov	r3, r0
 8003038:	4618      	mov	r0, r3
 800303a:	f7fe fecf 	bl	8001ddc <_ZSt4atanf>
 800303e:	4603      	mov	r3, r0
 8003040:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003042:	4618      	mov	r0, r3
 8003044:	f7fd fe7e 	bl	8000d44 <__aeabi_fmul>
 8003048:	4603      	mov	r3, r0
 800304a:	461a      	mov	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	601a      	str	r2, [r3, #0]
	float yaw = rad2deg*atan2(DCM21/cp,DCM11/cp);
 8003050:	6979      	ldr	r1, [r7, #20]
 8003052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003054:	f7fd ff2a 	bl	8000eac <__aeabi_fdiv>
 8003058:	4603      	mov	r3, r0
 800305a:	461c      	mov	r4, r3
 800305c:	6979      	ldr	r1, [r7, #20]
 800305e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003060:	f7fd ff24 	bl	8000eac <__aeabi_fdiv>
 8003064:	4603      	mov	r3, r0
 8003066:	4619      	mov	r1, r3
 8003068:	4620      	mov	r0, r4
 800306a:	f7fe fec3 	bl	8001df4 <_ZSt5atan2ff>
 800306e:	4603      	mov	r3, r0
 8003070:	4619      	mov	r1, r3
 8003072:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003074:	f7fd fe66 	bl	8000d44 <__aeabi_fmul>
 8003078:	4603      	mov	r3, r0
 800307a:	613b      	str	r3, [r7, #16]
	//-euler_angles.yaw  = rad2deg*atan2(DCM21,DCM11);
	if((int)yaw < -175 && (int)yaw >= -180) {
 800307c:	6938      	ldr	r0, [r7, #16]
 800307e:	f7fe f83d 	bl	80010fc <__aeabi_f2iz>
 8003082:	4603      	mov	r3, r0
 8003084:	f113 0faf 	cmn.w	r3, #175	; 0xaf
 8003088:	da23      	bge.n	80030d2 <_Z9DCM2EulerPsS_+0x416>
 800308a:	6938      	ldr	r0, [r7, #16]
 800308c:	f7fe f836 	bl	80010fc <__aeabi_f2iz>
 8003090:	4603      	mov	r3, r0
 8003092:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8003096:	db1c      	blt.n	80030d2 <_Z9DCM2EulerPsS_+0x416>
			//yaw_sign = POSITIVE;
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] > 0) {
 8003098:	4b39      	ldr	r3, [pc, #228]	; (8003180 <_Z9DCM2EulerPsS_+0x4c4>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d04b      	beq.n	8003138 <_Z9DCM2EulerPsS_+0x47c>
 80030a0:	4b38      	ldr	r3, [pc, #224]	; (8003184 <_Z9DCM2EulerPsS_+0x4c8>)
 80030a2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80030a6:	f04f 0100 	mov.w	r1, #0
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fd ffe8 	bl	8001080 <__aeabi_fcmplt>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d100      	bne.n	80030b8 <_Z9DCM2EulerPsS_+0x3fc>
 80030b6:	e03f      	b.n	8003138 <_Z9DCM2EulerPsS_+0x47c>
			yaw_counter++;
 80030b8:	4b33      	ldr	r3, [pc, #204]	; (8003188 <_Z9DCM2EulerPsS_+0x4cc>)
 80030ba:	f993 3000 	ldrsb.w	r3, [r3]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	b25a      	sxtb	r2, r3
 80030c6:	4b30      	ldr	r3, [pc, #192]	; (8003188 <_Z9DCM2EulerPsS_+0x4cc>)
 80030c8:	701a      	strb	r2, [r3, #0]
			yaw_sign = POSITIVE;
 80030ca:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <_Z9DCM2EulerPsS_+0x4c4>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] > 0) {
 80030d0:	e032      	b.n	8003138 <_Z9DCM2EulerPsS_+0x47c>
		}

	}
	else if((int)yaw > 175 && (int)yaw <= 180) {
 80030d2:	6938      	ldr	r0, [r7, #16]
 80030d4:	f7fe f812 	bl	80010fc <__aeabi_f2iz>
 80030d8:	4603      	mov	r3, r0
 80030da:	2baf      	cmp	r3, #175	; 0xaf
 80030dc:	dd22      	ble.n	8003124 <_Z9DCM2EulerPsS_+0x468>
 80030de:	6938      	ldr	r0, [r7, #16]
 80030e0:	f7fe f80c 	bl	80010fc <__aeabi_f2iz>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2bb4      	cmp	r3, #180	; 0xb4
 80030e8:	dc1c      	bgt.n	8003124 <_Z9DCM2EulerPsS_+0x468>
			//yaw_sign = NEGATIVE;
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] < 0) {
 80030ea:	4b25      	ldr	r3, [pc, #148]	; (8003180 <_Z9DCM2EulerPsS_+0x4c4>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d022      	beq.n	8003138 <_Z9DCM2EulerPsS_+0x47c>
 80030f2:	4b24      	ldr	r3, [pc, #144]	; (8003184 <_Z9DCM2EulerPsS_+0x4c8>)
 80030f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80030f8:	f04f 0100 	mov.w	r1, #0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd ffdd 	bl	80010bc <__aeabi_fcmpgt>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d100      	bne.n	800310a <_Z9DCM2EulerPsS_+0x44e>
 8003108:	e016      	b.n	8003138 <_Z9DCM2EulerPsS_+0x47c>
			yaw_counter--;
 800310a:	4b1f      	ldr	r3, [pc, #124]	; (8003188 <_Z9DCM2EulerPsS_+0x4cc>)
 800310c:	f993 3000 	ldrsb.w	r3, [r3]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b2db      	uxtb	r3, r3
 8003116:	b25a      	sxtb	r2, r3
 8003118:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <_Z9DCM2EulerPsS_+0x4cc>)
 800311a:	701a      	strb	r2, [r3, #0]
			yaw_sign = POSITIVE;
 800311c:	4b18      	ldr	r3, [pc, #96]	; (8003180 <_Z9DCM2EulerPsS_+0x4c4>)
 800311e:	2200      	movs	r2, #0
 8003120:	701a      	strb	r2, [r3, #0]
		if(yaw_sign != POSITIVE && -1*EKF.gyro[2] < 0) {
 8003122:	e009      	b.n	8003138 <_Z9DCM2EulerPsS_+0x47c>
		}
	}

	else if(jump_counter > 50) { //Approx 1 sec.
 8003124:	4b19      	ldr	r3, [pc, #100]	; (800318c <_Z9DCM2EulerPsS_+0x4d0>)
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	2b32      	cmp	r3, #50	; 0x32
 800312a:	d905      	bls.n	8003138 <_Z9DCM2EulerPsS_+0x47c>
		yaw_sign = NEUTRAL;
 800312c:	4b14      	ldr	r3, [pc, #80]	; (8003180 <_Z9DCM2EulerPsS_+0x4c4>)
 800312e:	2202      	movs	r2, #2
 8003130:	701a      	strb	r2, [r3, #0]
		jump_counter = 0;
 8003132:	4b16      	ldr	r3, [pc, #88]	; (800318c <_Z9DCM2EulerPsS_+0x4d0>)
 8003134:	2200      	movs	r2, #0
 8003136:	801a      	strh	r2, [r3, #0]
	}

	if(yaw_sign != NEUTRAL) {
 8003138:	4b11      	ldr	r3, [pc, #68]	; (8003180 <_Z9DCM2EulerPsS_+0x4c4>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d005      	beq.n	800314c <_Z9DCM2EulerPsS_+0x490>
		jump_counter++;
 8003140:	4b12      	ldr	r3, [pc, #72]	; (800318c <_Z9DCM2EulerPsS_+0x4d0>)
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	3301      	adds	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	4b10      	ldr	r3, [pc, #64]	; (800318c <_Z9DCM2EulerPsS_+0x4d0>)
 800314a:	801a      	strh	r2, [r3, #0]
	}

	yaw += yaw_counter*360;
 800314c:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <_Z9DCM2EulerPsS_+0x4cc>)
 800314e:	f993 3000 	ldrsb.w	r3, [r3]
 8003152:	461a      	mov	r2, r3
 8003154:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003158:	fb03 f302 	mul.w	r3, r3, r2
 800315c:	4618      	mov	r0, r3
 800315e:	f7fd fd9d 	bl	8000c9c <__aeabi_i2f>
 8003162:	4603      	mov	r3, r0
 8003164:	4619      	mov	r1, r3
 8003166:	6938      	ldr	r0, [r7, #16]
 8003168:	f7fd fce4 	bl	8000b34 <__addsf3>
 800316c:	4603      	mov	r3, r0
 800316e:	613b      	str	r3, [r7, #16]
	euler_angles.yaw = yaw;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	609a      	str	r2, [r3, #8]
	//euler_angles.yaw = (atan2((float) mag[1], (float) mag[0]) * 180 / M_PI);
	//yaw = acos(yaw);
	//euler_angles.pitch  = rad2deg*pitch;
	//euler_angles.roll   = rad2deg*roll;
	//euler_angles.yaw    = rad2deg*yaw;
	return euler_angles;
 8003176:	bf00      	nop

}
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	3738      	adds	r7, #56	; 0x38
 800317c:	46bd      	mov	sp, r7
 800317e:	bdb0      	pop	{r4, r5, r7, pc}
 8003180:	20000001 	.word	0x20000001
 8003184:	20000b60 	.word	0x20000b60
 8003188:	20001627 	.word	0x20001627
 800318c:	20001628 	.word	0x20001628

08003190 <_Z6squaref>:

float square(float x) {
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
	float y = x*x;
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fd fdd2 	bl	8000d44 <__aeabi_fmul>
 80031a0:	4603      	mov	r3, r0
 80031a2:	60fb      	str	r3, [r7, #12]
	return y;
 80031a4:	68fb      	ldr	r3, [r7, #12]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <_Z6PWMYazv>:

void PWMYaz() {
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
*/

#ifdef UAV1


		  if(armed) {
 80031b4:	4b35      	ldr	r3, [pc, #212]	; (800328c <_Z6PWMYazv+0xdc>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d04f      	beq.n	800325c <_Z6PWMYazv+0xac>

			  if(in_failsafe) {
 80031bc:	4b34      	ldr	r3, [pc, #208]	; (8003290 <_Z6PWMYazv+0xe0>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d014      	beq.n	80031ee <_Z6PWMYazv+0x3e>
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1300);
 80031c4:	4b33      	ldr	r3, [pc, #204]	; (8003294 <_Z6PWMYazv+0xe4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f240 5214 	movw	r2, #1300	; 0x514
 80031cc:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1300);
 80031ce:	4b31      	ldr	r3, [pc, #196]	; (8003294 <_Z6PWMYazv+0xe4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f240 5214 	movw	r2, #1300	; 0x514
 80031d6:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1300);
 80031d8:	4b2e      	ldr	r3, [pc, #184]	; (8003294 <_Z6PWMYazv+0xe4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f240 5214 	movw	r2, #1300	; 0x514
 80031e0:	63da      	str	r2, [r3, #60]	; 0x3c
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1300);
 80031e2:	4b2c      	ldr	r3, [pc, #176]	; (8003294 <_Z6PWMYazv+0xe4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f240 5214 	movw	r2, #1300	; 0x514
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
	  }
#endif

}
 80031ec:	e04a      	b.n	8003284 <_Z6PWMYazv+0xd4>
				  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > CH3_MIN + 100) {
 80031ee:	4b2a      	ldr	r3, [pc, #168]	; (8003298 <_Z6PWMYazv+0xe8>)
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f240 52db 	movw	r2, #1499	; 0x5db
 80031f6:	4293      	cmp	r3, r2
 80031f8:	dc1b      	bgt.n	8003232 <_Z6PWMYazv+0x82>
 80031fa:	4b27      	ldr	r3, [pc, #156]	; (8003298 <_Z6PWMYazv+0xe8>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f240 424c 	movw	r2, #1100	; 0x44c
 8003202:	4293      	cmp	r3, r2
 8003204:	dd15      	ble.n	8003232 <_Z6PWMYazv+0x82>
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output[0]);
 8003206:	4b25      	ldr	r3, [pc, #148]	; (800329c <_Z6PWMYazv+0xec>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4b22      	ldr	r3, [pc, #136]	; (8003294 <_Z6PWMYazv+0xe4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	635a      	str	r2, [r3, #52]	; 0x34
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output[1]);
 8003210:	4b22      	ldr	r3, [pc, #136]	; (800329c <_Z6PWMYazv+0xec>)
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	4b1f      	ldr	r3, [pc, #124]	; (8003294 <_Z6PWMYazv+0xe4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	639a      	str	r2, [r3, #56]	; 0x38
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output[2]);
 800321a:	4b20      	ldr	r3, [pc, #128]	; (800329c <_Z6PWMYazv+0xec>)
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <_Z6PWMYazv+0xe4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	63da      	str	r2, [r3, #60]	; 0x3c
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output[3]);
 8003224:	4b1d      	ldr	r3, [pc, #116]	; (800329c <_Z6PWMYazv+0xec>)
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <_Z6PWMYazv+0xe4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	641a      	str	r2, [r3, #64]	; 0x40
 800322e:	bf00      	nop
}
 8003230:	e028      	b.n	8003284 <_Z6PWMYazv+0xd4>
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8003232:	4b18      	ldr	r3, [pc, #96]	; (8003294 <_Z6PWMYazv+0xe4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800323a:	635a      	str	r2, [r3, #52]	; 0x34
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 800323c:	4b15      	ldr	r3, [pc, #84]	; (8003294 <_Z6PWMYazv+0xe4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003244:	639a      	str	r2, [r3, #56]	; 0x38
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8003246:	4b13      	ldr	r3, [pc, #76]	; (8003294 <_Z6PWMYazv+0xe4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800324e:	63da      	str	r2, [r3, #60]	; 0x3c
						  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8003250:	4b10      	ldr	r3, [pc, #64]	; (8003294 <_Z6PWMYazv+0xe4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003258:	641a      	str	r2, [r3, #64]	; 0x40
}
 800325a:	e013      	b.n	8003284 <_Z6PWMYazv+0xd4>
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 800325c:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <_Z6PWMYazv+0xe4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003264:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8003266:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <_Z6PWMYazv+0xe4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800326e:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8003270:	4b08      	ldr	r3, [pc, #32]	; (8003294 <_Z6PWMYazv+0xe4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003278:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <_Z6PWMYazv+0xe4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003282:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr
 800328c:	20001571 	.word	0x20001571
 8003290:	2000161e 	.word	0x2000161e
 8003294:	20001824 	.word	0x20001824
 8003298:	20001508 	.word	0x20001508
 800329c:	200014d8 	.word	0x200014d8

080032a0 <_Z7GyroErrh>:


float GyroErr(uint8_t addr) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 80032b0:	2300      	movs	r3, #0
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80032ba:	da12      	bge.n	80032e2 <_Z7GyroErrh+0x42>
	{
		GyroXh += (GyroOku(addr));
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff fc40 	bl	8002b44 <_Z7GyroOkuh>
 80032c4:	4603      	mov	r3, r0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd fce8 	bl	8000c9c <__aeabi_i2f>
 80032cc:	4603      	mov	r3, r0
 80032ce:	4619      	mov	r1, r3
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f7fd fc2f 	bl	8000b34 <__addsf3>
 80032d6:	4603      	mov	r3, r0
 80032d8:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	3301      	adds	r3, #1
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	e7e8      	b.n	80032b4 <_Z7GyroErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 80032e2:	4905      	ldr	r1, [pc, #20]	; (80032f8 <_Z7GyroErrh+0x58>)
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f7fd fde1 	bl	8000eac <__aeabi_fdiv>
 80032ea:	4603      	mov	r3, r0
 80032ec:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 80032ee:	68fb      	ldr	r3, [r7, #12]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	44fa0000 	.word	0x44fa0000

080032fc <_Z6AccErrh>:

float AccErr(uint8_t addr) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 800330c:	2300      	movs	r3, #0
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003316:	da12      	bge.n	800333e <_Z6AccErrh+0x42>
	{
		GyroXh += (AccOku(addr));
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff fc98 	bl	8002c50 <_Z6AccOkuh>
 8003320:	4603      	mov	r3, r0
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd fcba 	bl	8000c9c <__aeabi_i2f>
 8003328:	4603      	mov	r3, r0
 800332a:	4619      	mov	r1, r3
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7fd fc01 	bl	8000b34 <__addsf3>
 8003332:	4603      	mov	r3, r0
 8003334:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	3301      	adds	r3, #1
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	e7e8      	b.n	8003310 <_Z6AccErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 800333e:	4905      	ldr	r1, [pc, #20]	; (8003354 <_Z6AccErrh+0x58>)
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f7fd fdb3 	bl	8000eac <__aeabi_fdiv>
 8003346:	4603      	mov	r3, r0
 8003348:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 800334a:	68fb      	ldr	r3, [r7, #12]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	44fa0000 	.word	0x44fa0000

08003358 <_Z11MotorBaslatv>:

void MotorBaslat(void) {
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 800335c:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <_Z11MotorBaslatv+0x38>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003364:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <_Z11MotorBaslatv+0x38>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800336e:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8003370:	4b07      	ldr	r3, [pc, #28]	; (8003390 <_Z11MotorBaslatv+0x38>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003378:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 800337a:	4b05      	ldr	r3, [pc, #20]	; (8003390 <_Z11MotorBaslatv+0x38>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003382:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 8003384:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003388:	f002 fdfc 	bl	8005f84 <HAL_Delay>
}
 800338c:	bf00      	nop
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20001824 	.word	0x20001824
 8003394:	00000000 	.word	0x00000000

08003398 <HAL_TIM_PeriodElapsedCallback>:
		home = true;
}
*/

//Ana Kontrolcü döngüsü
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8003398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800339a:	b0a3      	sub	sp, #140	; 0x8c
 800339c:	af0c      	add	r7, sp, #48	; 0x30
 800339e:	6178      	str	r0, [r7, #20]

	if(htim == &htim2) {
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	4a51      	ldr	r2, [pc, #324]	; (80034e8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	f040 859a 	bne.w	8003ede <HAL_TIM_PeriodElapsedCallback+0xb46>
		//1.25 ms || 800 Hz
		Check_Arm();
 80033aa:	f7ff f97f 	bl	80026ac <_Z9Check_Armv>
		Check_Disarm();
 80033ae:	f7ff f9e1 	bl	8002774 <_Z12Check_Disarmv>

		set_ucounter(SONAR_CLOCK_RATE);
 80033b2:	2014      	movs	r0, #20
 80033b4:	f7fe fc6a 	bl	8001c8c <set_ucounter>
		set_b_counter(12);
 80033b8:	200c      	movs	r0, #12
 80033ba:	f7fe fb47 	bl	8001a4c <set_b_counter>

		controller_counter++;
 80033be:	4b4b      	ldr	r3, [pc, #300]	; (80034ec <HAL_TIM_PeriodElapsedCallback+0x154>)
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	3301      	adds	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	4b49      	ldr	r3, [pc, #292]	; (80034ec <HAL_TIM_PeriodElapsedCallback+0x154>)
 80033c8:	801a      	strh	r2, [r3, #0]
		camera_counter++;
 80033ca:	4b49      	ldr	r3, [pc, #292]	; (80034f0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	3301      	adds	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	4b47      	ldr	r3, [pc, #284]	; (80034f0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80033d4:	801a      	strh	r2, [r3, #0]
		mag_counter++;
 80033d6:	4b47      	ldr	r3, [pc, #284]	; (80034f4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	3301      	adds	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	4b45      	ldr	r3, [pc, #276]	; (80034f4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80033e0:	801a      	strh	r2, [r3, #0]

		#ifdef UAV1


		if(mag_counter == MAG_CLOCK_RATE) {
 80033e2:	4b44      	ldr	r3, [pc, #272]	; (80034f4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d146      	bne.n	8003478 <HAL_TIM_PeriodElapsedCallback+0xe0>
			mag_counter = 0;
 80033ea:	4b42      	ldr	r3, [pc, #264]	; (80034f4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	801a      	strh	r2, [r3, #0]
			HMC5883L_getMagData(&MAG_X, &MAG_Y, &MAG_Z);
 80033f0:	4a41      	ldr	r2, [pc, #260]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80033f2:	4942      	ldr	r1, [pc, #264]	; (80034fc <HAL_TIM_PeriodElapsedCallback+0x164>)
 80033f4:	4842      	ldr	r0, [pc, #264]	; (8003500 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80033f6:	f7fd ff31 	bl	800125c <HMC5883L_getMagData>
			MagCalib(MAG_X, MAG_Y, MAG_Z);
 80033fa:	4b41      	ldr	r3, [pc, #260]	; (8003500 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80033fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003400:	4a3e      	ldr	r2, [pc, #248]	; (80034fc <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003402:	f9b2 1000 	ldrsh.w	r1, [r2]
 8003406:	4a3c      	ldr	r2, [pc, #240]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003408:	f9b2 2000 	ldrsh.w	r2, [r2]
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe ff5b 	bl	80022c8 <_Z8MagCalibsss>
			int16_t mag[3];
			mag[0] = MAG_X_CALIB;
 8003412:	4b3c      	ldr	r3, [pc, #240]	; (8003504 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003418:	85bb      	strh	r3, [r7, #44]	; 0x2c
			mag[1] = MAG_Y_CALIB;
 800341a:	4b3b      	ldr	r3, [pc, #236]	; (8003508 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800341c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003420:	85fb      	strh	r3, [r7, #46]	; 0x2e
			mag[2] = MAG_Z_CALIB;
 8003422:	4b3a      	ldr	r3, [pc, #232]	; (800350c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003428:	863b      	strh	r3, [r7, #48]	; 0x30

			int16_t acc[3];
			acc[0] = accX;
 800342a:	4b39      	ldr	r3, [pc, #228]	; (8003510 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd fe64 	bl	80010fc <__aeabi_f2iz>
 8003434:	4603      	mov	r3, r0
 8003436:	b21b      	sxth	r3, r3
 8003438:	84bb      	strh	r3, [r7, #36]	; 0x24
			acc[1] = accY;
 800343a:	4b36      	ldr	r3, [pc, #216]	; (8003514 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7fd fe5c 	bl	80010fc <__aeabi_f2iz>
 8003444:	4603      	mov	r3, r0
 8003446:	b21b      	sxth	r3, r3
 8003448:	84fb      	strh	r3, [r7, #38]	; 0x26
			acc[2] = accZ;
 800344a:	4b33      	ldr	r3, [pc, #204]	; (8003518 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7fd fe54 	bl	80010fc <__aeabi_f2iz>
 8003454:	4603      	mov	r3, r0
 8003456:	b21b      	sxth	r3, r3
 8003458:	853b      	strh	r3, [r7, #40]	; 0x28
			euler_angles = DCM2Euler(acc, mag);
 800345a:	4c30      	ldr	r4, [pc, #192]	; (800351c <HAL_TIM_PeriodElapsedCallback+0x184>)
 800345c:	463b      	mov	r3, r7
 800345e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003462:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff fc28 	bl	8002cbc <_Z9DCM2EulerPsS_>
 800346c:	4623      	mov	r3, r4
 800346e:	463a      	mov	r2, r7
 8003470:	6810      	ldr	r0, [r2, #0]
 8003472:	6851      	ldr	r1, [r2, #4]
 8003474:	6892      	ldr	r2, [r2, #8]
 8003476:	c307      	stmia	r3!, {r0, r1, r2}

		}

		if(camera_counter == 40) {
 8003478:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	2b28      	cmp	r3, #40	; 0x28
 800347e:	d125      	bne.n	80034cc <HAL_TIM_PeriodElapsedCallback+0x134>
			  camera_counter = 0;
 8003480:	4b1b      	ldr	r3, [pc, #108]	; (80034f0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003482:	2200      	movs	r2, #0
 8003484:	801a      	strh	r2, [r3, #0]
			  memcpy(&cam_data_20, &cam_data, sizeof(cam_data));
 8003486:	4b26      	ldr	r3, [pc, #152]	; (8003520 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003488:	4a26      	ldr	r2, [pc, #152]	; (8003524 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800348a:	ca07      	ldmia	r2, {r0, r1, r2}
 800348c:	c303      	stmia	r3!, {r0, r1}
 800348e:	701a      	strb	r2, [r3, #0]
			  EKF.camx = (float)cam_data.y/100.0;
 8003490:	4b24      	ldr	r3, [pc, #144]	; (8003524 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003492:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8003496:	b21b      	sxth	r3, r3
 8003498:	4618      	mov	r0, r3
 800349a:	f7fd fbff 	bl	8000c9c <__aeabi_i2f>
 800349e:	4603      	mov	r3, r0
 80034a0:	4921      	ldr	r1, [pc, #132]	; (8003528 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd fd02 	bl	8000eac <__aeabi_fdiv>
 80034a8:	4603      	mov	r3, r0
 80034aa:	461a      	mov	r2, r3
 80034ac:	4b1f      	ldr	r3, [pc, #124]	; (800352c <HAL_TIM_PeriodElapsedCallback+0x194>)
 80034ae:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c

			  if(!cam_data.detected) {
 80034b2:	4b1c      	ldr	r3, [pc, #112]	; (8003524 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d104      	bne.n	80034c4 <HAL_TIM_PeriodElapsedCallback+0x12c>
				  EKF.Qc = 9e9;
 80034ba:	4b1c      	ldr	r3, [pc, #112]	; (800352c <HAL_TIM_PeriodElapsedCallback+0x194>)
 80034bc:	4a1c      	ldr	r2, [pc, #112]	; (8003530 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80034be:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 80034c2:	e003      	b.n	80034cc <HAL_TIM_PeriodElapsedCallback+0x134>
			  }

			  else {
				  EKF.Qc = 2.7e-2;
 80034c4:	4b19      	ldr	r3, [pc, #100]	; (800352c <HAL_TIM_PeriodElapsedCallback+0x194>)
 80034c6:	4a1b      	ldr	r2, [pc, #108]	; (8003534 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80034c8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
			  }
		}

		if(get_ucounter() == 1) {
 80034cc:	f7fe fbf8 	bl	8001cc0 <get_ucounter>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	bf0c      	ite	eq
 80034d6:	2301      	moveq	r3, #1
 80034d8:	2300      	movne	r3, #0
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d02b      	beq.n	8003538 <HAL_TIM_PeriodElapsedCallback+0x1a0>
			request_range();
 80034e0:	f7fe fb9a 	bl	8001c18 <request_range>
 80034e4:	e0e9      	b.n	80036ba <HAL_TIM_PeriodElapsedCallback+0x322>
 80034e6:	bf00      	nop
 80034e8:	2000186c 	.word	0x2000186c
 80034ec:	2000158c 	.word	0x2000158c
 80034f0:	2000158e 	.word	0x2000158e
 80034f4:	20001590 	.word	0x20001590
 80034f8:	2000160c 	.word	0x2000160c
 80034fc:	2000160a 	.word	0x2000160a
 8003500:	20001608 	.word	0x20001608
 8003504:	2000160e 	.word	0x2000160e
 8003508:	20001610 	.word	0x20001610
 800350c:	20001612 	.word	0x20001612
 8003510:	200008cc 	.word	0x200008cc
 8003514:	200008d0 	.word	0x200008d0
 8003518:	200008d4 	.word	0x200008d4
 800351c:	200015fc 	.word	0x200015fc
 8003520:	200015f0 	.word	0x200015f0
 8003524:	200015e4 	.word	0x200015e4
 8003528:	42c80000 	.word	0x42c80000
 800352c:	20000b60 	.word	0x20000b60
 8003530:	50061c46 	.word	0x50061c46
 8003534:	3cdd2f1b 	.word	0x3cdd2f1b
			//sonar_range = getRange();
		}


		else if (get_ucounter() == SONAR_CLOCK_RATE) {
 8003538:	f7fe fbc2 	bl	8001cc0 <get_ucounter>
 800353c:	4603      	mov	r3, r0
 800353e:	2b14      	cmp	r3, #20
 8003540:	bf0c      	ite	eq
 8003542:	2301      	moveq	r3, #1
 8003544:	2300      	movne	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80b6 	beq.w	80036ba <HAL_TIM_PeriodElapsedCallback+0x322>

		  sonar_range = getRange();
 800354e:	f7fe fb7d 	bl	8001c4c <getRange>
 8003552:	4603      	mov	r3, r0
 8003554:	461a      	mov	r2, r3
 8003556:	4b70      	ldr	r3, [pc, #448]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8003558:	601a      	str	r2, [r3, #0]
		  sonar_alt_ = sonar_alt;
 800355a:	4b70      	ldr	r3, [pc, #448]	; (800371c <HAL_TIM_PeriodElapsedCallback+0x384>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a70      	ldr	r2, [pc, #448]	; (8003720 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003560:	6013      	str	r3, [r2, #0]
		  sonar_vel_ = sonar_vel;
 8003562:	4b70      	ldr	r3, [pc, #448]	; (8003724 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a70      	ldr	r2, [pc, #448]	; (8003728 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8003568:	6013      	str	r3, [r2, #0]

		  float sonar_roll = abs(deg2rad*state.angles[0]);
 800356a:	4b70      	ldr	r3, [pc, #448]	; (800372c <HAL_TIM_PeriodElapsedCallback+0x394>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4970      	ldr	r1, [pc, #448]	; (8003730 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd fbe7 	bl	8000d44 <__aeabi_fmul>
 8003576:	4603      	mov	r3, r0
 8003578:	4618      	mov	r0, r3
 800357a:	f7fe fc17 	bl	8001dac <_ZSt3absf>
 800357e:	6578      	str	r0, [r7, #84]	; 0x54
		  float sonar_pitch = abs(deg2rad*state.angles[1]);
 8003580:	4b6a      	ldr	r3, [pc, #424]	; (800372c <HAL_TIM_PeriodElapsedCallback+0x394>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	496a      	ldr	r1, [pc, #424]	; (8003730 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8003586:	4618      	mov	r0, r3
 8003588:	f7fd fbdc 	bl	8000d44 <__aeabi_fmul>
 800358c:	4603      	mov	r3, r0
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe fc0c 	bl	8001dac <_ZSt3absf>
 8003594:	6538      	str	r0, [r7, #80]	; 0x50
		  sonar_alt = (float)sonar_range/100.0 * cos(sonar_roll)* cos(sonar_pitch);
 8003596:	4b60      	ldr	r3, [pc, #384]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fd fb7a 	bl	8000c94 <__aeabi_ui2f>
 80035a0:	4603      	mov	r3, r0
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fc ff40 	bl	8000428 <__aeabi_f2d>
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	4b61      	ldr	r3, [pc, #388]	; (8003734 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80035ae:	f7fd f8bd 	bl	800072c <__aeabi_ddiv>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4614      	mov	r4, r2
 80035b8:	461d      	mov	r5, r3
 80035ba:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80035bc:	f7fe fa60 	bl	8001a80 <_ZSt3cosf>
 80035c0:	4603      	mov	r3, r0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fc ff30 	bl	8000428 <__aeabi_f2d>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4620      	mov	r0, r4
 80035ce:	4629      	mov	r1, r5
 80035d0:	f7fc ff82 	bl	80004d8 <__aeabi_dmul>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4614      	mov	r4, r2
 80035da:	461d      	mov	r5, r3
 80035dc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80035de:	f7fe fa4f 	bl	8001a80 <_ZSt3cosf>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fc ff1f 	bl	8000428 <__aeabi_f2d>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	4620      	mov	r0, r4
 80035f0:	4629      	mov	r1, r5
 80035f2:	f7fc ff71 	bl	80004d8 <__aeabi_dmul>
 80035f6:	4602      	mov	r2, r0
 80035f8:	460b      	mov	r3, r1
 80035fa:	4610      	mov	r0, r2
 80035fc:	4619      	mov	r1, r3
 80035fe:	f7fd fa43 	bl	8000a88 <__aeabi_d2f>
 8003602:	4603      	mov	r3, r0
 8003604:	4a45      	ldr	r2, [pc, #276]	; (800371c <HAL_TIM_PeriodElapsedCallback+0x384>)
 8003606:	6013      	str	r3, [r2, #0]
		  float sonar_st = (float)(1.0/SONAR_CLOCK);
 8003608:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 800360c:	64fb      	str	r3, [r7, #76]	; 0x4c
		  sonar_vel = (sonar_alt - sonar_alt_)/sonar_st;
 800360e:	4b43      	ldr	r3, [pc, #268]	; (800371c <HAL_TIM_PeriodElapsedCallback+0x384>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a43      	ldr	r2, [pc, #268]	; (8003720 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003614:	6812      	ldr	r2, [r2, #0]
 8003616:	4611      	mov	r1, r2
 8003618:	4618      	mov	r0, r3
 800361a:	f7fd fa89 	bl	8000b30 <__aeabi_fsub>
 800361e:	4603      	mov	r3, r0
 8003620:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003622:	4618      	mov	r0, r3
 8003624:	f7fd fc42 	bl	8000eac <__aeabi_fdiv>
 8003628:	4603      	mov	r3, r0
 800362a:	461a      	mov	r2, r3
 800362c:	4b3d      	ldr	r3, [pc, #244]	; (8003724 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800362e:	601a      	str	r2, [r3, #0]


		  if (abs(sonar_vel) > 7) {
 8003630:	4b3c      	ldr	r3, [pc, #240]	; (8003724 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7fe fbb9 	bl	8001dac <_ZSt3absf>
 800363a:	4603      	mov	r3, r0
 800363c:	2201      	movs	r2, #1
 800363e:	4614      	mov	r4, r2
 8003640:	493d      	ldr	r1, [pc, #244]	; (8003738 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8003642:	4618      	mov	r0, r3
 8003644:	f7fd fd3a 	bl	80010bc <__aeabi_fcmpgt>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_TIM_PeriodElapsedCallback+0x2ba>
 800364e:	2300      	movs	r3, #0
 8003650:	461c      	mov	r4, r3
 8003652:	b2e3      	uxtb	r3, r4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d007      	beq.n	8003668 <HAL_TIM_PeriodElapsedCallback+0x2d0>
			  sonar_alt = sonar_alt_;
 8003658:	4b31      	ldr	r3, [pc, #196]	; (8003720 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a2f      	ldr	r2, [pc, #188]	; (800371c <HAL_TIM_PeriodElapsedCallback+0x384>)
 800365e:	6013      	str	r3, [r2, #0]
			  sonar_vel = sonar_vel_;
 8003660:	4b31      	ldr	r3, [pc, #196]	; (8003728 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a2f      	ldr	r2, [pc, #188]	; (8003724 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8003666:	6013      	str	r3, [r2, #0]
		  }

		  if(sonar_alt > 6 || sonar_alt < 0.3) {
 8003668:	4b2c      	ldr	r3, [pc, #176]	; (800371c <HAL_TIM_PeriodElapsedCallback+0x384>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4933      	ldr	r1, [pc, #204]	; (800373c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800366e:	4618      	mov	r0, r3
 8003670:	f7fd fd24 	bl	80010bc <__aeabi_fcmpgt>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10c      	bne.n	8003694 <HAL_TIM_PeriodElapsedCallback+0x2fc>
 800367a:	4b28      	ldr	r3, [pc, #160]	; (800371c <HAL_TIM_PeriodElapsedCallback+0x384>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fc fed2 	bl	8000428 <__aeabi_f2d>
 8003684:	a322      	add	r3, pc, #136	; (adr r3, 8003710 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8003686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368a:	f7fd f997 	bl	80009bc <__aeabi_dcmplt>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_TIM_PeriodElapsedCallback+0x30e>
			  EKF.Qs = 9e9;
 8003694:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8003696:	4a2b      	ldr	r2, [pc, #172]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8003698:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
			  EKF.salt = 50;
 800369c:	4b28      	ldr	r3, [pc, #160]	; (8003740 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 800369e:	4a2a      	ldr	r2, [pc, #168]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80036a0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 80036a4:	e009      	b.n	80036ba <HAL_TIM_PeriodElapsedCallback+0x322>
		  }

		  else {
			  EKF.Qs = 0.25;
 80036a6:	4b26      	ldr	r3, [pc, #152]	; (8003740 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80036a8:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80036ac:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
			  EKF.salt = 1;
 80036b0:	4b23      	ldr	r3, [pc, #140]	; (8003740 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80036b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80036b6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
		  }


		}

		if(get_b_counter() == 1) {
 80036ba:	f7fe f9bd 	bl	8001a38 <get_b_counter>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <HAL_TIM_PeriodElapsedCallback+0x33c>
			write_ut();
 80036ce:	f7fd ffb1 	bl	8001634 <write_ut>
 80036d2:	e06b      	b.n	80037ac <HAL_TIM_PeriodElapsedCallback+0x414>
		}

		else if(get_b_counter() == 5) { //5 ms
 80036d4:	f7fe f9b0 	bl	8001a38 <get_b_counter>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b05      	cmp	r3, #5
 80036dc:	bf0c      	ite	eq
 80036de:	2301      	moveq	r3, #1
 80036e0:	2300      	movne	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d033      	beq.n	8003750 <HAL_TIM_PeriodElapsedCallback+0x3b8>
			bmp.uncomp.temp = read_ut ();
 80036e8:	f7fd ffbc 	bl	8001664 <read_ut>
 80036ec:	4603      	mov	r3, r0
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fd fad4 	bl	8000c9c <__aeabi_i2f>
 80036f4:	4603      	mov	r3, r0
 80036f6:	4a15      	ldr	r2, [pc, #84]	; (800374c <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80036f8:	6193      	str	r3, [r2, #24]
			bmp.data.temp = get_temp (&bmp);
 80036fa:	4814      	ldr	r0, [pc, #80]	; (800374c <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80036fc:	f7fd ffcc 	bl	8001698 <get_temp>
 8003700:	4603      	mov	r3, r0
 8003702:	4a12      	ldr	r2, [pc, #72]	; (800374c <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8003704:	6293      	str	r3, [r2, #40]	; 0x28
			write_up();
 8003706:	f7fe f81f 	bl	8001748 <write_up>
 800370a:	e04f      	b.n	80037ac <HAL_TIM_PeriodElapsedCallback+0x414>
 800370c:	f3af 8000 	nop.w
 8003710:	33333333 	.word	0x33333333
 8003714:	3fd33333 	.word	0x3fd33333
 8003718:	20001588 	.word	0x20001588
 800371c:	20001578 	.word	0x20001578
 8003720:	2000157c 	.word	0x2000157c
 8003724:	20001580 	.word	0x20001580
 8003728:	20001584 	.word	0x20001584
 800372c:	2000092c 	.word	0x2000092c
 8003730:	3c8e8a72 	.word	0x3c8e8a72
 8003734:	40590000 	.word	0x40590000
 8003738:	40e00000 	.word	0x40e00000
 800373c:	40c00000 	.word	0x40c00000
 8003740:	20000b60 	.word	0x20000b60
 8003744:	50061c46 	.word	0x50061c46
 8003748:	42480000 	.word	0x42480000
 800374c:	20001594 	.word	0x20001594
		}

		else if(get_b_counter() == 12) { //
 8003750:	f7fe f972 	bl	8001a38 <get_b_counter>
 8003754:	4603      	mov	r3, r0
 8003756:	2b0c      	cmp	r3, #12
 8003758:	bf0c      	ite	eq
 800375a:	2301      	moveq	r3, #1
 800375c:	2300      	movne	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d023      	beq.n	80037ac <HAL_TIM_PeriodElapsedCallback+0x414>
			bmp.uncomp.press = read_up (bmp.oss);
 8003764:	4ba8      	ldr	r3, [pc, #672]	; (8003a08 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8003766:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003768:	f7fe f80e 	bl	8001788 <read_up>
 800376c:	4603      	mov	r3, r0
 800376e:	4aa6      	ldr	r2, [pc, #664]	; (8003a08 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8003770:	61d3      	str	r3, [r2, #28]
			bmp.data.press = get_pressure (bmp);
 8003772:	4ea5      	ldr	r6, [pc, #660]	; (8003a08 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8003774:	466d      	mov	r5, sp
 8003776:	f106 0410 	add.w	r4, r6, #16
 800377a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800377c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800377e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003782:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003786:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800378a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800378e:	f7fe f829 	bl	80017e4 <get_pressure>
 8003792:	4603      	mov	r3, r0
 8003794:	4a9c      	ldr	r2, [pc, #624]	; (8003a08 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8003796:	62d3      	str	r3, [r2, #44]	; 0x2c
			bmp.data.altitude = get_altitude (&bmp);
 8003798:	489b      	ldr	r0, [pc, #620]	; (8003a08 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800379a:	f7fe f8f1 	bl	8001980 <get_altitude>
 800379e:	4603      	mov	r3, r0
 80037a0:	4a99      	ldr	r2, [pc, #612]	; (8003a08 <HAL_TIM_PeriodElapsedCallback+0x670>)
 80037a2:	6353      	str	r3, [r2, #52]	; 0x34
			baro_alt = bmp.data.altitude;
 80037a4:	4b98      	ldr	r3, [pc, #608]	; (8003a08 <HAL_TIM_PeriodElapsedCallback+0x670>)
 80037a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a8:	4a98      	ldr	r2, [pc, #608]	; (8003a0c <HAL_TIM_PeriodElapsedCallback+0x674>)
 80037aa:	6013      	str	r3, [r2, #0]


		}
#endif

		if(controller_counter == CONTROLLER_RATE) { //5 ms || 200 Hz
 80037ac:	4b98      	ldr	r3, [pc, #608]	; (8003a10 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	f040 8394 	bne.w	8003ede <HAL_TIM_PeriodElapsedCallback+0xb46>
			_controller_timer = controller_timer;
 80037b6:	4b97      	ldr	r3, [pc, #604]	; (8003a14 <HAL_TIM_PeriodElapsedCallback+0x67c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a97      	ldr	r2, [pc, #604]	; (8003a18 <HAL_TIM_PeriodElapsedCallback+0x680>)
 80037bc:	6013      	str	r3, [r2, #0]
			controller_timer = HAL_GetTick();
 80037be:	f002 fbd7 	bl	8005f70 <HAL_GetTick>
 80037c2:	4603      	mov	r3, r0
 80037c4:	461a      	mov	r2, r3
 80037c6:	4b93      	ldr	r3, [pc, #588]	; (8003a14 <HAL_TIM_PeriodElapsedCallback+0x67c>)
 80037c8:	601a      	str	r2, [r3, #0]
			controller_timer_dif = controller_timer-_controller_timer;
 80037ca:	4b92      	ldr	r3, [pc, #584]	; (8003a14 <HAL_TIM_PeriodElapsedCallback+0x67c>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	4b92      	ldr	r3, [pc, #584]	; (8003a18 <HAL_TIM_PeriodElapsedCallback+0x680>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	4a91      	ldr	r2, [pc, #580]	; (8003a1c <HAL_TIM_PeriodElapsedCallback+0x684>)
 80037d6:	6013      	str	r3, [r2, #0]
			controller_counter = 0;
 80037d8:	4b8d      	ldr	r3, [pc, #564]	; (8003a10 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80037da:	2200      	movs	r2, #0
 80037dc:	801a      	strh	r2, [r3, #0]


#ifdef UAV1

		  gyroX = (GyroOku(GYRO_X_ADDR)- GyroXh)/14.375 ;
 80037de:	201d      	movs	r0, #29
 80037e0:	f7ff f9b0 	bl	8002b44 <_Z7GyroOkuh>
 80037e4:	4603      	mov	r3, r0
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fd fa58 	bl	8000c9c <__aeabi_i2f>
 80037ec:	4602      	mov	r2, r0
 80037ee:	4b8c      	ldr	r3, [pc, #560]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x688>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4619      	mov	r1, r3
 80037f4:	4610      	mov	r0, r2
 80037f6:	f7fd f99b 	bl	8000b30 <__aeabi_fsub>
 80037fa:	4603      	mov	r3, r0
 80037fc:	4989      	ldr	r1, [pc, #548]	; (8003a24 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fd fb54 	bl	8000eac <__aeabi_fdiv>
 8003804:	4603      	mov	r3, r0
 8003806:	461a      	mov	r2, r3
 8003808:	4b87      	ldr	r3, [pc, #540]	; (8003a28 <HAL_TIM_PeriodElapsedCallback+0x690>)
 800380a:	601a      	str	r2, [r3, #0]
		  gyroY = (GyroOku(GYRO_Y_ADDR)- GyroYh)/14.375 ;
 800380c:	201f      	movs	r0, #31
 800380e:	f7ff f999 	bl	8002b44 <_Z7GyroOkuh>
 8003812:	4603      	mov	r3, r0
 8003814:	4618      	mov	r0, r3
 8003816:	f7fd fa41 	bl	8000c9c <__aeabi_i2f>
 800381a:	4602      	mov	r2, r0
 800381c:	4b83      	ldr	r3, [pc, #524]	; (8003a2c <HAL_TIM_PeriodElapsedCallback+0x694>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4619      	mov	r1, r3
 8003822:	4610      	mov	r0, r2
 8003824:	f7fd f984 	bl	8000b30 <__aeabi_fsub>
 8003828:	4603      	mov	r3, r0
 800382a:	497e      	ldr	r1, [pc, #504]	; (8003a24 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 800382c:	4618      	mov	r0, r3
 800382e:	f7fd fb3d 	bl	8000eac <__aeabi_fdiv>
 8003832:	4603      	mov	r3, r0
 8003834:	461a      	mov	r2, r3
 8003836:	4b7e      	ldr	r3, [pc, #504]	; (8003a30 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8003838:	601a      	str	r2, [r3, #0]
		  gyroZ = (GyroOku(GYRO_Z_ADDR)- GyroZh)/14.375 ;
 800383a:	2021      	movs	r0, #33	; 0x21
 800383c:	f7ff f982 	bl	8002b44 <_Z7GyroOkuh>
 8003840:	4603      	mov	r3, r0
 8003842:	4618      	mov	r0, r3
 8003844:	f7fd fa2a 	bl	8000c9c <__aeabi_i2f>
 8003848:	4602      	mov	r2, r0
 800384a:	4b7a      	ldr	r3, [pc, #488]	; (8003a34 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4619      	mov	r1, r3
 8003850:	4610      	mov	r0, r2
 8003852:	f7fd f96d 	bl	8000b30 <__aeabi_fsub>
 8003856:	4603      	mov	r3, r0
 8003858:	4972      	ldr	r1, [pc, #456]	; (8003a24 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 800385a:	4618      	mov	r0, r3
 800385c:	f7fd fb26 	bl	8000eac <__aeabi_fdiv>
 8003860:	4603      	mov	r3, r0
 8003862:	461a      	mov	r2, r3
 8003864:	4b74      	ldr	r3, [pc, #464]	; (8003a38 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8003866:	601a      	str	r2, [r3, #0]
		  //gyroX_a += gyroX_a_x * st;



		  //float gyro[3];
		  EKF.gyro[0] = gyroX;
 8003868:	4b6f      	ldr	r3, [pc, #444]	; (8003a28 <HAL_TIM_PeriodElapsedCallback+0x690>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a73      	ldr	r2, [pc, #460]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 800386e:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
		  EKF.gyro[1] = -1*gyroY;
 8003872:	4b6f      	ldr	r3, [pc, #444]	; (8003a30 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800387a:	4a70      	ldr	r2, [pc, #448]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 800387c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
		  EKF.gyro[2] = gyroZ;
 8003880:	4b6d      	ldr	r3, [pc, #436]	; (8003a38 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a6d      	ldr	r2, [pc, #436]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8003886:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

		  //İvmeölçer degerlerini oku

		  accX = AccOku(ACC_X_ADDR);
 800388a:	2032      	movs	r0, #50	; 0x32
 800388c:	f7ff f9e0 	bl	8002c50 <_Z6AccOkuh>
 8003890:	4603      	mov	r3, r0
 8003892:	4618      	mov	r0, r3
 8003894:	f7fd fa02 	bl	8000c9c <__aeabi_i2f>
 8003898:	4603      	mov	r3, r0
 800389a:	4a69      	ldr	r2, [pc, #420]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 800389c:	6013      	str	r3, [r2, #0]
		  accY = AccOku(ACC_Y_ADDR);
 800389e:	2034      	movs	r0, #52	; 0x34
 80038a0:	f7ff f9d6 	bl	8002c50 <_Z6AccOkuh>
 80038a4:	4603      	mov	r3, r0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd f9f8 	bl	8000c9c <__aeabi_i2f>
 80038ac:	4603      	mov	r3, r0
 80038ae:	4a65      	ldr	r2, [pc, #404]	; (8003a44 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80038b0:	6013      	str	r3, [r2, #0]
		  accZ = AccOku(ACC_Z_ADDR);
 80038b2:	2036      	movs	r0, #54	; 0x36
 80038b4:	f7ff f9cc 	bl	8002c50 <_Z6AccOkuh>
 80038b8:	4603      	mov	r3, r0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fd f9ee 	bl	8000c9c <__aeabi_i2f>
 80038c0:	4603      	mov	r3, r0
 80038c2:	4a61      	ldr	r2, [pc, #388]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 80038c4:	6013      	str	r3, [r2, #0]

		  accX = (1+Sx) * accX + bx;
 80038c6:	4b5e      	ldr	r3, [pc, #376]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4960      	ldr	r1, [pc, #384]	; (8003a4c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fd fa39 	bl	8000d44 <__aeabi_fmul>
 80038d2:	4603      	mov	r3, r0
 80038d4:	495e      	ldr	r1, [pc, #376]	; (8003a50 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fd f92a 	bl	8000b30 <__aeabi_fsub>
 80038dc:	4603      	mov	r3, r0
 80038de:	461a      	mov	r2, r3
 80038e0:	4b57      	ldr	r3, [pc, #348]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 80038e2:	601a      	str	r2, [r3, #0]
		  accY = (1+Sy) * accY + by;
 80038e4:	4b57      	ldr	r3, [pc, #348]	; (8003a44 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	495a      	ldr	r1, [pc, #360]	; (8003a54 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fd fa2a 	bl	8000d44 <__aeabi_fmul>
 80038f0:	4603      	mov	r3, r0
 80038f2:	4959      	ldr	r1, [pc, #356]	; (8003a58 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fd f91d 	bl	8000b34 <__addsf3>
 80038fa:	4603      	mov	r3, r0
 80038fc:	461a      	mov	r2, r3
 80038fe:	4b51      	ldr	r3, [pc, #324]	; (8003a44 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8003900:	601a      	str	r2, [r3, #0]
		  accZ = (1+Sz) * accZ + bz;
 8003902:	4b51      	ldr	r3, [pc, #324]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4955      	ldr	r1, [pc, #340]	; (8003a5c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8003908:	4618      	mov	r0, r3
 800390a:	f7fd fa1b 	bl	8000d44 <__aeabi_fmul>
 800390e:	4603      	mov	r3, r0
 8003910:	4953      	ldr	r1, [pc, #332]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8003912:	4618      	mov	r0, r3
 8003914:	f7fd f90e 	bl	8000b34 <__addsf3>
 8003918:	4603      	mov	r3, r0
 800391a:	461a      	mov	r2, r3
 800391c:	4b4a      	ldr	r3, [pc, #296]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 800391e:	601a      	str	r2, [r3, #0]

		  accXc = (float)accX* 0.0078;
 8003920:	4b47      	ldr	r3, [pc, #284]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f7fc fd7f 	bl	8000428 <__aeabi_f2d>
 800392a:	a335      	add	r3, pc, #212	; (adr r3, 8003a00 <HAL_TIM_PeriodElapsedCallback+0x668>)
 800392c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003930:	f7fc fdd2 	bl	80004d8 <__aeabi_dmul>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4610      	mov	r0, r2
 800393a:	4619      	mov	r1, r3
 800393c:	f7fd f8a4 	bl	8000a88 <__aeabi_d2f>
 8003940:	4603      	mov	r3, r0
 8003942:	4a48      	ldr	r2, [pc, #288]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8003944:	6013      	str	r3, [r2, #0]
		  accYc = (float)accY* 0.0078;
 8003946:	4b3f      	ldr	r3, [pc, #252]	; (8003a44 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f7fc fd6c 	bl	8000428 <__aeabi_f2d>
 8003950:	a32b      	add	r3, pc, #172	; (adr r3, 8003a00 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	f7fc fdbf 	bl	80004d8 <__aeabi_dmul>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4610      	mov	r0, r2
 8003960:	4619      	mov	r1, r3
 8003962:	f7fd f891 	bl	8000a88 <__aeabi_d2f>
 8003966:	4603      	mov	r3, r0
 8003968:	4a3f      	ldr	r2, [pc, #252]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 800396a:	6013      	str	r3, [r2, #0]
		  accZc = (float)accZ* 0.0078;
 800396c:	4b36      	ldr	r3, [pc, #216]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f7fc fd59 	bl	8000428 <__aeabi_f2d>
 8003976:	a322      	add	r3, pc, #136	; (adr r3, 8003a00 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8003978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397c:	f7fc fdac 	bl	80004d8 <__aeabi_dmul>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4610      	mov	r0, r2
 8003986:	4619      	mov	r1, r3
 8003988:	f7fd f87e 	bl	8000a88 <__aeabi_d2f>
 800398c:	4603      	mov	r3, r0
 800398e:	4a37      	ldr	r2, [pc, #220]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8003990:	6013      	str	r3, [r2, #0]

		  //float acc[3];
		  EKF.acc[0] = accX;// - AccXh;
 8003992:	4b2b      	ldr	r3, [pc, #172]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a29      	ldr	r2, [pc, #164]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8003998:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
		  EKF.acc[1] = accY;// - AccYh;
 800399c:	4b29      	ldr	r3, [pc, #164]	; (8003a44 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a26      	ldr	r2, [pc, #152]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80039a2:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		  EKF.acc[2] = accZ;// - AccZh;
 80039a6:	4b28      	ldr	r3, [pc, #160]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a24      	ldr	r2, [pc, #144]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80039ac:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210

		  //float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
		 // pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı

		  float g = 9.81;
 80039b0:	4b2f      	ldr	r3, [pc, #188]	; (8003a70 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 80039b2:	64bb      	str	r3, [r7, #72]	; 0x48
		  float roll_r  = deg2rad*EKF.state.angles[0];
 80039b4:	4b21      	ldr	r3, [pc, #132]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80039b6:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80039ba:	492e      	ldr	r1, [pc, #184]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fd f9c1 	bl	8000d44 <__aeabi_fmul>
 80039c2:	4603      	mov	r3, r0
 80039c4:	647b      	str	r3, [r7, #68]	; 0x44
		  float pitch_r = deg2rad*EKF.state.angles[1];
 80039c6:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80039c8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80039cc:	4929      	ldr	r1, [pc, #164]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fd f9b8 	bl	8000d44 <__aeabi_fmul>
 80039d4:	4603      	mov	r3, r0
 80039d6:	643b      	str	r3, [r7, #64]	; 0x40

		  //g body components, Without * g
		  float gx = sin(pitch_r);
 80039d8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80039da:	f7fe f85d 	bl	8001a98 <_ZSt3sinf>
 80039de:	63f8      	str	r0, [r7, #60]	; 0x3c
		  float gy = cos(pitch_r)*sin(roll_r);
 80039e0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80039e2:	f7fe f84d 	bl	8001a80 <_ZSt3cosf>
 80039e6:	4604      	mov	r4, r0
 80039e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80039ea:	f7fe f855 	bl	8001a98 <_ZSt3sinf>
 80039ee:	4603      	mov	r3, r0
 80039f0:	4619      	mov	r1, r3
 80039f2:	4620      	mov	r0, r4
 80039f4:	f7fd f9a6 	bl	8000d44 <__aeabi_fmul>
 80039f8:	e03e      	b.n	8003a78 <HAL_TIM_PeriodElapsedCallback+0x6e0>
 80039fa:	bf00      	nop
 80039fc:	f3af 8000 	nop.w
 8003a00:	8e8a71de 	.word	0x8e8a71de
 8003a04:	3f7ff2e4 	.word	0x3f7ff2e4
 8003a08:	20001594 	.word	0x20001594
 8003a0c:	20001574 	.word	0x20001574
 8003a10:	2000158c 	.word	0x2000158c
 8003a14:	200015d8 	.word	0x200015d8
 8003a18:	200015dc 	.word	0x200015dc
 8003a1c:	200015e0 	.word	0x200015e0
 8003a20:	200008f0 	.word	0x200008f0
 8003a24:	41660000 	.word	0x41660000
 8003a28:	200008c0 	.word	0x200008c0
 8003a2c:	200008f4 	.word	0x200008f4
 8003a30:	200008c4 	.word	0x200008c4
 8003a34:	200008f8 	.word	0x200008f8
 8003a38:	200008c8 	.word	0x200008c8
 8003a3c:	20000b60 	.word	0x20000b60
 8003a40:	200008cc 	.word	0x200008cc
 8003a44:	200008d0 	.word	0x200008d0
 8003a48:	200008d4 	.word	0x200008d4
 8003a4c:	3f7f3b64 	.word	0x3f7f3b64
 8003a50:	3efae148 	.word	0x3efae148
 8003a54:	3f7e978d 	.word	0x3f7e978d
 8003a58:	414d0a3d 	.word	0x414d0a3d
 8003a5c:	3f797f63 	.word	0x3f797f63
 8003a60:	404d1eb8 	.word	0x404d1eb8
 8003a64:	200008d8 	.word	0x200008d8
 8003a68:	200008dc 	.word	0x200008dc
 8003a6c:	200008e0 	.word	0x200008e0
 8003a70:	411cf5c3 	.word	0x411cf5c3
 8003a74:	3c8e8a72 	.word	0x3c8e8a72
 8003a78:	4603      	mov	r3, r0
 8003a7a:	63bb      	str	r3, [r7, #56]	; 0x38
		  float gz = cos(roll_r)*cos(pitch_r);
 8003a7c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003a7e:	f7fd ffff 	bl	8001a80 <_ZSt3cosf>
 8003a82:	4604      	mov	r4, r0
 8003a84:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003a86:	f7fd fffb 	bl	8001a80 <_ZSt3cosf>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f7fd f958 	bl	8000d44 <__aeabi_fmul>
 8003a94:	4603      	mov	r3, r0
 8003a96:	637b      	str	r3, [r7, #52]	; 0x34



		  accXc -= gx;
 8003a98:	4b98      	ldr	r3, [pc, #608]	; (8003cfc <HAL_TIM_PeriodElapsedCallback+0x964>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd f846 	bl	8000b30 <__aeabi_fsub>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4b94      	ldr	r3, [pc, #592]	; (8003cfc <HAL_TIM_PeriodElapsedCallback+0x964>)
 8003aaa:	601a      	str	r2, [r3, #0]
		  accYc -= gy;
 8003aac:	4b94      	ldr	r3, [pc, #592]	; (8003d00 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fd f83c 	bl	8000b30 <__aeabi_fsub>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	461a      	mov	r2, r3
 8003abc:	4b90      	ldr	r3, [pc, #576]	; (8003d00 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8003abe:	601a      	str	r2, [r3, #0]
		  accZc -= gz;
 8003ac0:	4b90      	ldr	r3, [pc, #576]	; (8003d04 <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fd f832 	bl	8000b30 <__aeabi_fsub>
 8003acc:	4603      	mov	r3, r0
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4b8c      	ldr	r3, [pc, #560]	; (8003d04 <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8003ad2:	601a      	str	r2, [r3, #0]

		  //Body to Local
		  accXm = accXc*cos(pitch_r) - accZc*cos(roll_r)*sin(pitch_r) - accYc*sin(roll_r)*sin(pitch_r);
 8003ad4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003ad6:	f7fd ffd3 	bl	8001a80 <_ZSt3cosf>
 8003ada:	4602      	mov	r2, r0
 8003adc:	4b87      	ldr	r3, [pc, #540]	; (8003cfc <HAL_TIM_PeriodElapsedCallback+0x964>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f7fd f92e 	bl	8000d44 <__aeabi_fmul>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	461c      	mov	r4, r3
 8003aec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003aee:	f7fd ffc7 	bl	8001a80 <_ZSt3cosf>
 8003af2:	4602      	mov	r2, r0
 8003af4:	4b83      	ldr	r3, [pc, #524]	; (8003d04 <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4619      	mov	r1, r3
 8003afa:	4610      	mov	r0, r2
 8003afc:	f7fd f922 	bl	8000d44 <__aeabi_fmul>
 8003b00:	4603      	mov	r3, r0
 8003b02:	461d      	mov	r5, r3
 8003b04:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003b06:	f7fd ffc7 	bl	8001a98 <_ZSt3sinf>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4628      	mov	r0, r5
 8003b10:	f7fd f918 	bl	8000d44 <__aeabi_fmul>
 8003b14:	4603      	mov	r3, r0
 8003b16:	4619      	mov	r1, r3
 8003b18:	4620      	mov	r0, r4
 8003b1a:	f7fd f809 	bl	8000b30 <__aeabi_fsub>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	461c      	mov	r4, r3
 8003b22:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003b24:	f7fd ffb8 	bl	8001a98 <_ZSt3sinf>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	4b75      	ldr	r3, [pc, #468]	; (8003d00 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4610      	mov	r0, r2
 8003b32:	f7fd f907 	bl	8000d44 <__aeabi_fmul>
 8003b36:	4603      	mov	r3, r0
 8003b38:	461d      	mov	r5, r3
 8003b3a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003b3c:	f7fd ffac 	bl	8001a98 <_ZSt3sinf>
 8003b40:	4603      	mov	r3, r0
 8003b42:	4619      	mov	r1, r3
 8003b44:	4628      	mov	r0, r5
 8003b46:	f7fd f8fd 	bl	8000d44 <__aeabi_fmul>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4620      	mov	r0, r4
 8003b50:	f7fc ffee 	bl	8000b30 <__aeabi_fsub>
 8003b54:	4603      	mov	r3, r0
 8003b56:	461a      	mov	r2, r3
 8003b58:	4b6b      	ldr	r3, [pc, #428]	; (8003d08 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8003b5a:	601a      	str	r2, [r3, #0]
		  accYm = accYc*cos(roll_r) - accZc*sin(roll_r);
 8003b5c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003b5e:	f7fd ff8f 	bl	8001a80 <_ZSt3cosf>
 8003b62:	4602      	mov	r2, r0
 8003b64:	4b66      	ldr	r3, [pc, #408]	; (8003d00 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	f7fd f8ea 	bl	8000d44 <__aeabi_fmul>
 8003b70:	4603      	mov	r3, r0
 8003b72:	461c      	mov	r4, r3
 8003b74:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003b76:	f7fd ff8f 	bl	8001a98 <_ZSt3sinf>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	4b61      	ldr	r3, [pc, #388]	; (8003d04 <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4619      	mov	r1, r3
 8003b82:	4610      	mov	r0, r2
 8003b84:	f7fd f8de 	bl	8000d44 <__aeabi_fmul>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f7fc ffcf 	bl	8000b30 <__aeabi_fsub>
 8003b92:	4603      	mov	r3, r0
 8003b94:	461a      	mov	r2, r3
 8003b96:	4b5d      	ldr	r3, [pc, #372]	; (8003d0c <HAL_TIM_PeriodElapsedCallback+0x974>)
 8003b98:	601a      	str	r2, [r3, #0]
		  accZm = accZc*cos(roll_r)*cos(pitch_r) + accXc*sin(pitch_r) + accYc*cos(pitch_r)*sin(roll_r);
 8003b9a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003b9c:	f7fd ff70 	bl	8001a80 <_ZSt3cosf>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	4b58      	ldr	r3, [pc, #352]	; (8003d04 <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4610      	mov	r0, r2
 8003baa:	f7fd f8cb 	bl	8000d44 <__aeabi_fmul>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	461c      	mov	r4, r3
 8003bb2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003bb4:	f7fd ff64 	bl	8001a80 <_ZSt3cosf>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f7fd f8c1 	bl	8000d44 <__aeabi_fmul>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	461c      	mov	r4, r3
 8003bc6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003bc8:	f7fd ff66 	bl	8001a98 <_ZSt3sinf>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	4b4b      	ldr	r3, [pc, #300]	; (8003cfc <HAL_TIM_PeriodElapsedCallback+0x964>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	f7fd f8b5 	bl	8000d44 <__aeabi_fmul>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4620      	mov	r0, r4
 8003be0:	f7fc ffa8 	bl	8000b34 <__addsf3>
 8003be4:	4603      	mov	r3, r0
 8003be6:	461c      	mov	r4, r3
 8003be8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003bea:	f7fd ff49 	bl	8001a80 <_ZSt3cosf>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	4b43      	ldr	r3, [pc, #268]	; (8003d00 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	f7fd f8a4 	bl	8000d44 <__aeabi_fmul>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	461d      	mov	r5, r3
 8003c00:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003c02:	f7fd ff49 	bl	8001a98 <_ZSt3sinf>
 8003c06:	4603      	mov	r3, r0
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	f7fd f89a 	bl	8000d44 <__aeabi_fmul>
 8003c10:	4603      	mov	r3, r0
 8003c12:	4619      	mov	r1, r3
 8003c14:	4620      	mov	r0, r4
 8003c16:	f7fc ff8d 	bl	8000b34 <__addsf3>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4b3c      	ldr	r3, [pc, #240]	; (8003d10 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8003c20:	601a      	str	r2, [r3, #0]


		  accXm *= g; accYm *= g; accZm *= g;
 8003c22:	4b39      	ldr	r3, [pc, #228]	; (8003d08 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fd f88b 	bl	8000d44 <__aeabi_fmul>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	461a      	mov	r2, r3
 8003c32:	4b35      	ldr	r3, [pc, #212]	; (8003d08 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	4b35      	ldr	r3, [pc, #212]	; (8003d0c <HAL_TIM_PeriodElapsedCallback+0x974>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fd f881 	bl	8000d44 <__aeabi_fmul>
 8003c42:	4603      	mov	r3, r0
 8003c44:	461a      	mov	r2, r3
 8003c46:	4b31      	ldr	r3, [pc, #196]	; (8003d0c <HAL_TIM_PeriodElapsedCallback+0x974>)
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	4b31      	ldr	r3, [pc, #196]	; (8003d10 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fd f877 	bl	8000d44 <__aeabi_fmul>
 8003c56:	4603      	mov	r3, r0
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4b2d      	ldr	r3, [pc, #180]	; (8003d10 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8003c5c:	601a      	str	r2, [r3, #0]

		  EKF.acc_vert = accZm;
 8003c5e:	4b2c      	ldr	r3, [pc, #176]	; (8003d10 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a2c      	ldr	r2, [pc, #176]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003c64:	f8c2 326c 	str.w	r3, [r2, #620]	; 0x26c

		  EKF.accXm = accXm;// * deg2rad*EKF.state.angles[1];
 8003c68:	4b27      	ldr	r3, [pc, #156]	; (8003d08 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a29      	ldr	r2, [pc, #164]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003c6e:	f8c2 3284 	str.w	r3, [r2, #644]	; 0x284
		  EKF.accYm = accYm;
 8003c72:	4b26      	ldr	r3, [pc, #152]	; (8003d0c <HAL_TIM_PeriodElapsedCallback+0x974>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a27      	ldr	r2, [pc, #156]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003c78:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
		  EKF.acc_pos_x = accXm;
 8003c7c:	4b22      	ldr	r3, [pc, #136]	; (8003d08 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a24      	ldr	r2, [pc, #144]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003c82:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
		  EKF.acc_pos_y = -accYm;
 8003c86:	4b21      	ldr	r3, [pc, #132]	; (8003d0c <HAL_TIM_PeriodElapsedCallback+0x974>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003c8e:	4a21      	ldr	r2, [pc, #132]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003c90:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

		  EKF.sonar_alt = sonar_alt;
 8003c94:	4b20      	ldr	r3, [pc, #128]	; (8003d18 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a1e      	ldr	r2, [pc, #120]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003c9a:	f8c2 3278 	str.w	r3, [r2, #632]	; 0x278
		  EKF.baro_alt = baro_alt;
 8003c9e:	4b1f      	ldr	r3, [pc, #124]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x984>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1c      	ldr	r2, [pc, #112]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003ca4:	f8c2 327c 	str.w	r3, [r2, #636]	; 0x27c
		  EKF.yaw_acc  = -1*euler_angles.yaw;
 8003ca8:	4b1d      	ldr	r3, [pc, #116]	; (8003d20 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003cb0:	4a18      	ldr	r2, [pc, #96]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003cb2:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc

		  EKF.Run();
 8003cb6:	4817      	ldr	r0, [pc, #92]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003cb8:	f009 fc22 	bl	800d500 <_ZN15Kalman_Filtresi3RunEv>


		  state.angles[0]  	  = EKF.state.angles[0];
 8003cbc:	4b15      	ldr	r3, [pc, #84]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003cbe:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8003cc2:	4a18      	ldr	r2, [pc, #96]	; (8003d24 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8003cc4:	6013      	str	r3, [r2, #0]
		  state.angles[1] 	  = EKF.state.angles[1];
 8003cc6:	4b13      	ldr	r3, [pc, #76]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003cc8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003ccc:	4a15      	ldr	r2, [pc, #84]	; (8003d24 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8003cce:	6053      	str	r3, [r2, #4]
		  state.angles[2]     = EKF.state.angles[2];
 8003cd0:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003cd2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003cd6:	4a13      	ldr	r2, [pc, #76]	; (8003d24 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8003cd8:	6093      	str	r3, [r2, #8]

		  state.rates[0] = EKF.state.rates[0];
 8003cda:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003cdc:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8003ce0:	4a10      	ldr	r2, [pc, #64]	; (8003d24 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8003ce2:	60d3      	str	r3, [r2, #12]
		  state.rates[1] = EKF.state.rates[1];
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003ce6:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8003cea:	4a0e      	ldr	r2, [pc, #56]	; (8003d24 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8003cec:	6113      	str	r3, [r2, #16]
		  state.rates[2] = EKF.state.rates[2];
 8003cee:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8003cf0:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8003cf4:	4a0b      	ldr	r2, [pc, #44]	; (8003d24 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8003cf6:	6153      	str	r3, [r2, #20]
 8003cf8:	e016      	b.n	8003d28 <HAL_TIM_PeriodElapsedCallback+0x990>
 8003cfa:	bf00      	nop
 8003cfc:	200008d8 	.word	0x200008d8
 8003d00:	200008dc 	.word	0x200008dc
 8003d04:	200008e0 	.word	0x200008e0
 8003d08:	200008e4 	.word	0x200008e4
 8003d0c:	200008e8 	.word	0x200008e8
 8003d10:	200008ec 	.word	0x200008ec
 8003d14:	20000b60 	.word	0x20000b60
 8003d18:	20001578 	.word	0x20001578
 8003d1c:	20001574 	.word	0x20001574
 8003d20:	200015fc 	.word	0x200015fc
 8003d24:	2000092c 	.word	0x2000092c


		   checkMode(ch[MOD_CH-1]);
 8003d28:	4b6f      	ldr	r3, [pc, #444]	; (8003ee8 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fe fbcf 	bl	80024d0 <_Z9checkModei>

		   controller.z_vel = EKF.vz;
 8003d32:	4b6e      	ldr	r3, [pc, #440]	; (8003eec <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8003d34:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8003d38:	4a6d      	ldr	r2, [pc, #436]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003d3a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
		   controller.z = EKF.alt_gnd;
 8003d3e:	4b6b      	ldr	r3, [pc, #428]	; (8003eec <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8003d40:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8003d44:	4a6a      	ldr	r2, [pc, #424]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003d46:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0

		   controller.vx	 = EKF.vx;
 8003d4a:	4b68      	ldr	r3, [pc, #416]	; (8003eec <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8003d4c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8003d50:	4a67      	ldr	r2, [pc, #412]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003d52:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
		   controller.x     = EKF.x;
 8003d56:	4b65      	ldr	r3, [pc, #404]	; (8003eec <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8003d58:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8003d5c:	4a64      	ldr	r2, [pc, #400]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003d5e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0

		   controller.vy	 = EKF.vy;
 8003d62:	4b62      	ldr	r3, [pc, #392]	; (8003eec <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8003d64:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 8003d68:	4a61      	ldr	r2, [pc, #388]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003d6a:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
		   controller.y     = EKF.y;
 8003d6e:	4b5f      	ldr	r3, [pc, #380]	; (8003eec <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8003d70:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8003d74:	4a5e      	ldr	r2, [pc, #376]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003d76:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0

		  controller.state = state;
 8003d7a:	4b5d      	ldr	r3, [pc, #372]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003d7c:	4a5d      	ldr	r2, [pc, #372]	; (8003ef4 <HAL_TIM_PeriodElapsedCallback+0xb5c>)
 8003d7e:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8003d82:	4615      	mov	r5, r2
 8003d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d8c:	682b      	ldr	r3, [r5, #0]
 8003d8e:	6023      	str	r3, [r4, #0]
		  controller.state_des = state_des;
 8003d90:	4b57      	ldr	r3, [pc, #348]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003d92:	4a59      	ldr	r2, [pc, #356]	; (8003ef8 <HAL_TIM_PeriodElapsedCallback+0xb60>)
 8003d94:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 8003d98:	4615      	mov	r5, r2
 8003d9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003da2:	682b      	ldr	r3, [r5, #0]
 8003da4:	6023      	str	r3, [r4, #0]
		  controller.ch3 = ch[2];
 8003da6:	4b50      	ldr	r3, [pc, #320]	; (8003ee8 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fc ff76 	bl	8000c9c <__aeabi_i2f>
 8003db0:	4603      	mov	r3, r0
 8003db2:	4a4f      	ldr	r2, [pc, #316]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003db4:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		  controller.ch2 = ch[1];
 8003db8:	4b4b      	ldr	r3, [pc, #300]	; (8003ee8 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fc ff6d 	bl	8000c9c <__aeabi_i2f>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	4a4a      	ldr	r2, [pc, #296]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003dc6:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
		  controller.ch1 = ch[0];
 8003dca:	4b47      	ldr	r3, [pc, #284]	; (8003ee8 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fc ff64 	bl	8000c9c <__aeabi_i2f>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	4a46      	ldr	r2, [pc, #280]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003dd8:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
		  controller.Run();
 8003ddc:	4844      	ldr	r0, [pc, #272]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003dde:	f007 fef1 	bl	800bbc4 <_ZN10Controller3RunEv>

		  controller_output[0] = controller.controller_output_pwm[0];
 8003de2:	4b43      	ldr	r3, [pc, #268]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003de4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003de8:	4a44      	ldr	r2, [pc, #272]	; (8003efc <HAL_TIM_PeriodElapsedCallback+0xb64>)
 8003dea:	6013      	str	r3, [r2, #0]
		  controller_output[1] = controller.controller_output_pwm[1];
 8003dec:	4b40      	ldr	r3, [pc, #256]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003dee:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8003df2:	4a42      	ldr	r2, [pc, #264]	; (8003efc <HAL_TIM_PeriodElapsedCallback+0xb64>)
 8003df4:	6053      	str	r3, [r2, #4]
		  controller_output[2] = controller.controller_output_pwm[2];
 8003df6:	4b3e      	ldr	r3, [pc, #248]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003df8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003dfc:	4a3f      	ldr	r2, [pc, #252]	; (8003efc <HAL_TIM_PeriodElapsedCallback+0xb64>)
 8003dfe:	6093      	str	r3, [r2, #8]
		  controller_output[3] = controller.controller_output_pwm[3];
 8003e00:	4b3b      	ldr	r3, [pc, #236]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003e02:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003e06:	4a3d      	ldr	r2, [pc, #244]	; (8003efc <HAL_TIM_PeriodElapsedCallback+0xb64>)
 8003e08:	60d3      	str	r3, [r2, #12]
#endif
		#ifdef UAV1

		  if(armed) {
 8003e0a:	4b3d      	ldr	r3, [pc, #244]	; (8003f00 <HAL_TIM_PeriodElapsedCallback+0xb68>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d031      	beq.n	8003e76 <HAL_TIM_PeriodElapsedCallback+0xade>



			  if(ch[EMERGENCY_CH-1] < 1500 && ch[3-1] > CH3_MIN + 100) {
 8003e12:	4b35      	ldr	r3, [pc, #212]	; (8003ee8 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f240 52db 	movw	r2, #1499	; 0x5db
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	dc1a      	bgt.n	8003e54 <HAL_TIM_PeriodElapsedCallback+0xabc>
 8003e1e:	4b32      	ldr	r3, [pc, #200]	; (8003ee8 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f240 424c 	movw	r2, #1100	; 0x44c
 8003e26:	4293      	cmp	r3, r2
 8003e28:	dd14      	ble.n	8003e54 <HAL_TIM_PeriodElapsedCallback+0xabc>

				  controller_output_2[0] = controller.controller_output_pwm2[0];
 8003e2a:	4b31      	ldr	r3, [pc, #196]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003e2c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8003e30:	4a34      	ldr	r2, [pc, #208]	; (8003f04 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8003e32:	6013      	str	r3, [r2, #0]
				  controller_output_2[1] = controller.controller_output_pwm2[1];
 8003e34:	4b2e      	ldr	r3, [pc, #184]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003e36:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8003e3a:	4a32      	ldr	r2, [pc, #200]	; (8003f04 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8003e3c:	6053      	str	r3, [r2, #4]
				  controller_output_2[2] = controller.controller_output_pwm2[2];
 8003e3e:	4b2c      	ldr	r3, [pc, #176]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003e40:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8003e44:	4a2f      	ldr	r2, [pc, #188]	; (8003f04 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8003e46:	6093      	str	r3, [r2, #8]
				  controller_output_2[3] = controller.controller_output_pwm2[3];
 8003e48:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003e4a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003e4e:	4a2d      	ldr	r2, [pc, #180]	; (8003f04 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8003e50:	60d3      	str	r3, [r2, #12]
 8003e52:	e020      	b.n	8003e96 <HAL_TIM_PeriodElapsedCallback+0xafe>

			  }

			  else {
				  controller_output_2[0] = 1000;
 8003e54:	4b2b      	ldr	r3, [pc, #172]	; (8003f04 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8003e56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e5a:	601a      	str	r2, [r3, #0]
				  controller_output_2[1] = 1000;
 8003e5c:	4b29      	ldr	r3, [pc, #164]	; (8003f04 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8003e5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e62:	605a      	str	r2, [r3, #4]
				  controller_output_2[2] = 1000;
 8003e64:	4b27      	ldr	r3, [pc, #156]	; (8003f04 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8003e66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e6a:	609a      	str	r2, [r3, #8]
				  controller_output_2[3] = 1000;
 8003e6c:	4b25      	ldr	r3, [pc, #148]	; (8003f04 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8003e6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e72:	60da      	str	r2, [r3, #12]
 8003e74:	e00f      	b.n	8003e96 <HAL_TIM_PeriodElapsedCallback+0xafe>
			  }

		  }

		  else {
			  controller_output_2[0] = 1000;
 8003e76:	4b23      	ldr	r3, [pc, #140]	; (8003f04 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8003e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e7c:	601a      	str	r2, [r3, #0]
			  controller_output_2[1] = 1000;
 8003e7e:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8003e80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e84:	605a      	str	r2, [r3, #4]
			  controller_output_2[2] = 1000;
 8003e86:	4b1f      	ldr	r3, [pc, #124]	; (8003f04 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8003e88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e8c:	609a      	str	r2, [r3, #8]
			  controller_output_2[3] = 1000;
 8003e8e:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8003e90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e94:	60da      	str	r2, [r3, #12]
		  }
		#endif

		  state_des.rates[0] = controller.roll_rate_des;
 8003e96:	4b16      	ldr	r3, [pc, #88]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003e98:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8003e9c:	4a16      	ldr	r2, [pc, #88]	; (8003ef8 <HAL_TIM_PeriodElapsedCallback+0xb60>)
 8003e9e:	60d3      	str	r3, [r2, #12]
		  state_des.rates[1] = controller.pitch_rate_des;
 8003ea0:	4b13      	ldr	r3, [pc, #76]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8003ea2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003ea6:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <HAL_TIM_PeriodElapsedCallback+0xb60>)
 8003ea8:	6113      	str	r3, [r2, #16]


		  TelemPack();
 8003eaa:	f7fe fcb5 	bl	8002818 <_Z9TelemPackv>
		  CheckFailsafe();
 8003eae:	f7fe fb9f 	bl	80025f0 <_Z13CheckFailsafev>
		  CheckSwarm();
 8003eb2:	f7fe fb5d 	bl	8002570 <_Z10CheckSwarmv>
		  PWMYaz();
 8003eb6:	f7ff f97b 	bl	80031b0 <_Z6PWMYazv>

		#ifdef UAV1
		  	  	//Pack motor outputs to nrf24 buffer.
		  	  	char nrf_buf[sizeof(struct pwm)];
		  	  	memcpy(nrf_buf,&telem_pack.pwm2,sizeof(struct pwm));
 8003eba:	4a13      	ldr	r2, [pc, #76]	; (8003f08 <HAL_TIM_PeriodElapsedCallback+0xb70>)
 8003ebc:	f107 031c 	add.w	r3, r7, #28
 8003ec0:	32fd      	adds	r2, #253	; 0xfd
 8003ec2:	6810      	ldr	r0, [r2, #0]
 8003ec4:	6851      	ldr	r1, [r2, #4]
 8003ec6:	c303      	stmia	r3!, {r0, r1}
				NRF24_write(nrf_buf, sizeof(struct pwm));
 8003ec8:	f107 031c 	add.w	r3, r7, #28
 8003ecc:	2108      	movs	r1, #8
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fb4a 	bl	8004568 <NRF24_write>
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8003ed4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ed8:	480c      	ldr	r0, [pc, #48]	; (8003f0c <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8003eda:	f002 fd85 	bl	80069e8 <HAL_GPIO_TogglePin>
		  //SwitchMag();

		  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
		}
		}
	}
 8003ede:	bf00      	nop
 8003ee0:	375c      	adds	r7, #92	; 0x5c
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20001508 	.word	0x20001508
 8003eec:	20000b60 	.word	0x20000b60
 8003ef0:	20000ea8 	.word	0x20000ea8
 8003ef4:	2000092c 	.word	0x2000092c
 8003ef8:	20000908 	.word	0x20000908
 8003efc:	200014d8 	.word	0x200014d8
 8003f00:	20001571 	.word	0x20001571
 8003f04:	200014e8 	.word	0x200014e8
 8003f08:	20000950 	.word	0x20000950
 8003f0c:	40011000 	.word	0x40011000

08003f10 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a55      	ldr	r2, [pc, #340]	; (8004070 <HAL_TIM_IC_CaptureCallback+0x160>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	f040 80a2 	bne.w	8004066 <HAL_TIM_IC_CaptureCallback+0x156>


	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	7f1b      	ldrb	r3, [r3, #28]
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	f040 809d 	bne.w	8004066 <HAL_TIM_IC_CaptureCallback+0x156>
	{
				IC_Val1 = IC_Val2;
 8003f2c:	4b51      	ldr	r3, [pc, #324]	; (8004074 <HAL_TIM_IC_CaptureCallback+0x164>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a51      	ldr	r2, [pc, #324]	; (8004078 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003f32:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8003f34:	2108      	movs	r1, #8
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f006 f9fe 	bl	800a338 <HAL_TIM_ReadCapturedValue>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4b4c      	ldr	r3, [pc, #304]	; (8004074 <HAL_TIM_IC_CaptureCallback+0x164>)
 8003f42:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 8003f44:	4b4b      	ldr	r3, [pc, #300]	; (8004074 <HAL_TIM_IC_CaptureCallback+0x164>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	4b4b      	ldr	r3, [pc, #300]	; (8004078 <HAL_TIM_IC_CaptureCallback+0x168>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	4a4b      	ldr	r2, [pc, #300]	; (800407c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003f50:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 8003f52:	4b4a      	ldr	r3, [pc, #296]	; (800407c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	0fdb      	lsrs	r3, r3, #31
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d006      	beq.n	8003f6c <HAL_TIM_IC_CaptureCallback+0x5c>
					Diff+=65535;
 8003f5e:	4b47      	ldr	r3, [pc, #284]	; (800407c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003f66:	33ff      	adds	r3, #255	; 0xff
 8003f68:	4a44      	ldr	r2, [pc, #272]	; (800407c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003f6a:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
					if(Diff >= 800 && Diff <= 2000) {
 8003f6c:	4b43      	ldr	r3, [pc, #268]	; (800407c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003f74:	db06      	blt.n	8003f84 <HAL_TIM_IC_CaptureCallback+0x74>
 8003f76:	4b41      	ldr	r3, [pc, #260]	; (800407c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003f7e:	dc01      	bgt.n	8003f84 <HAL_TIM_IC_CaptureCallback+0x74>
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <HAL_TIM_IC_CaptureCallback+0x76>
 8003f84:	2300      	movs	r3, #0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d01c      	beq.n	8003fc4 <HAL_TIM_IC_CaptureCallback+0xb4>
					#ifdef UAV1
						ch_[i] = ch[i];
 8003f8a:	4b3d      	ldr	r3, [pc, #244]	; (8004080 <HAL_TIM_IC_CaptureCallback+0x170>)
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	b21b      	sxth	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	4b3b      	ldr	r3, [pc, #236]	; (8004080 <HAL_TIM_IC_CaptureCallback+0x170>)
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	b21b      	sxth	r3, r3
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4b3a      	ldr	r3, [pc, #232]	; (8004084 <HAL_TIM_IC_CaptureCallback+0x174>)
 8003f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fa0:	4a39      	ldr	r2, [pc, #228]	; (8004088 <HAL_TIM_IC_CaptureCallback+0x178>)
 8003fa2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
						ch[i] = Diff;
 8003fa6:	4b36      	ldr	r3, [pc, #216]	; (8004080 <HAL_TIM_IC_CaptureCallback+0x170>)
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	b21b      	sxth	r3, r3
 8003fac:	4619      	mov	r1, r3
 8003fae:	4b33      	ldr	r3, [pc, #204]	; (800407c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a34      	ldr	r2, [pc, #208]	; (8004084 <HAL_TIM_IC_CaptureCallback+0x174>)
 8003fb4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
						ch_count++;
 8003fb8:	4b34      	ldr	r3, [pc, #208]	; (800408c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	4a33      	ldr	r2, [pc, #204]	; (800408c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	e015      	b.n	8003ff0 <HAL_TIM_IC_CaptureCallback+0xe0>
						ch_count++;
					#endif

					}

					else if(Diff > CH0) {
 8003fc4:	4b2d      	ldr	r3, [pc, #180]	; (800407c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	bfcc      	ite	gt
 8003fd0:	2301      	movgt	r3, #1
 8003fd2:	2300      	movle	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_TIM_IC_CaptureCallback+0xe0>
						//ch[CH_NUM] = ch[i];
						i = -1;
 8003fda:	4b29      	ldr	r3, [pc, #164]	; (8004080 <HAL_TIM_IC_CaptureCallback+0x170>)
 8003fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fe0:	801a      	strh	r2, [r3, #0]
						ch[CH_NUM] = Diff;
 8003fe2:	4b26      	ldr	r3, [pc, #152]	; (800407c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a27      	ldr	r2, [pc, #156]	; (8004084 <HAL_TIM_IC_CaptureCallback+0x174>)
 8003fe8:	6293      	str	r3, [r2, #40]	; 0x28
						sync = 1;
 8003fea:	4b29      	ldr	r3, [pc, #164]	; (8004090 <HAL_TIM_IC_CaptureCallback+0x180>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	801a      	strh	r2, [r3, #0]
					}




				state_des.angles[0] =  pwm2ang(ch[0]);
 8003ff0:	4b24      	ldr	r3, [pc, #144]	; (8004084 <HAL_TIM_IC_CaptureCallback+0x174>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fe fdc6 	bl	8002b88 <_Z7pwm2angt>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	4a25      	ldr	r2, [pc, #148]	; (8004094 <HAL_TIM_IC_CaptureCallback+0x184>)
 8004000:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pwm2ang(ch[1]);
 8004002:	4b20      	ldr	r3, [pc, #128]	; (8004084 <HAL_TIM_IC_CaptureCallback+0x174>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	b29b      	uxth	r3, r3
 8004008:	4618      	mov	r0, r3
 800400a:	f7fe fdbd 	bl	8002b88 <_Z7pwm2angt>
 800400e:	4603      	mov	r3, r0
 8004010:	4a20      	ldr	r2, [pc, #128]	; (8004094 <HAL_TIM_IC_CaptureCallback+0x184>)
 8004012:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 8004014:	4b1f      	ldr	r3, [pc, #124]	; (8004094 <HAL_TIM_IC_CaptureCallback+0x184>)
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pwm2rate(ch[3]);
 800401c:	4b19      	ldr	r3, [pc, #100]	; (8004084 <HAL_TIM_IC_CaptureCallback+0x174>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	b29b      	uxth	r3, r3
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe fdec 	bl	8002c00 <_Z8pwm2ratet>
 8004028:	4603      	mov	r3, r0
 800402a:	4a1a      	ldr	r2, [pc, #104]	; (8004094 <HAL_TIM_IC_CaptureCallback+0x184>)
 800402c:	6153      	str	r3, [r2, #20]

				i++;
 800402e:	4b14      	ldr	r3, [pc, #80]	; (8004080 <HAL_TIM_IC_CaptureCallback+0x170>)
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	b21b      	sxth	r3, r3
 8004034:	b29b      	uxth	r3, r3
 8004036:	3301      	adds	r3, #1
 8004038:	b29b      	uxth	r3, r3
 800403a:	b21a      	sxth	r2, r3
 800403c:	4b10      	ldr	r3, [pc, #64]	; (8004080 <HAL_TIM_IC_CaptureCallback+0x170>)
 800403e:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 8004040:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <HAL_TIM_IC_CaptureCallback+0x170>)
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	b21b      	sxth	r3, r3
 8004046:	4619      	mov	r1, r3
 8004048:	4b13      	ldr	r3, [pc, #76]	; (8004098 <HAL_TIM_IC_CaptureCallback+0x188>)
 800404a:	fb83 2301 	smull	r2, r3, r3, r1
 800404e:	105a      	asrs	r2, r3, #1
 8004050:	17cb      	asrs	r3, r1, #31
 8004052:	1ad2      	subs	r2, r2, r3
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	4413      	add	r3, r2
 800405e:	1aca      	subs	r2, r1, r3
 8004060:	b212      	sxth	r2, r2
 8004062:	4b07      	ldr	r3, [pc, #28]	; (8004080 <HAL_TIM_IC_CaptureCallback+0x170>)
 8004064:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	200017dc 	.word	0x200017dc
 8004074:	200014f8 	.word	0x200014f8
 8004078:	200014fc 	.word	0x200014fc
 800407c:	20001500 	.word	0x20001500
 8004080:	20001504 	.word	0x20001504
 8004084:	20001508 	.word	0x20001508
 8004088:	20001534 	.word	0x20001534
 800408c:	200015d4 	.word	0x200015d4
 8004090:	20001560 	.word	0x20001560
 8004094:	20000908 	.word	0x20000908
 8004098:	2e8ba2e9 	.word	0x2e8ba2e9

0800409c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80040a0:	b672      	cpsid	i
}
 80040a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80040a4:	e7fe      	b.n	80040a4 <Error_Handler+0x8>
	...

080040a8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d10a      	bne.n	80040ce <_Z41__static_initialization_and_destruction_0ii+0x26>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040be:	4293      	cmp	r3, r2
 80040c0:	d105      	bne.n	80040ce <_Z41__static_initialization_and_destruction_0ii+0x26>
Kalman_Filtresi EKF;
 80040c2:	480c      	ldr	r0, [pc, #48]	; (80040f4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80040c4:	f008 fa88 	bl	800c5d8 <_ZN15Kalman_FiltresiC1Ev>
Controller controller;
 80040c8:	480b      	ldr	r0, [pc, #44]	; (80040f8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80040ca:	f007 fc81 	bl	800b9d0 <_ZN10ControllerC1Ev>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <_Z41__static_initialization_and_destruction_0ii+0x42>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040da:	4293      	cmp	r3, r2
 80040dc:	d105      	bne.n	80040ea <_Z41__static_initialization_and_destruction_0ii+0x42>
 80040de:	4806      	ldr	r0, [pc, #24]	; (80040f8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80040e0:	f008 fa3c 	bl	800c55c <_ZN10ControllerD1Ev>
Kalman_Filtresi EKF;
 80040e4:	4803      	ldr	r0, [pc, #12]	; (80040f4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80040e6:	f009 faff 	bl	800d6e8 <_ZN15Kalman_FiltresiD1Ev>
}
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20000b60 	.word	0x20000b60
 80040f8:	20000ea8 	.word	0x20000ea8

080040fc <_GLOBAL__sub_I_gyroX>:
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
 8004100:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004104:	2001      	movs	r0, #1
 8004106:	f7ff ffcf 	bl	80040a8 <_Z41__static_initialization_and_destruction_0ii>
 800410a:	bd80      	pop	{r7, pc}

0800410c <_GLOBAL__sub_D_gyroX>:
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
 8004110:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004114:	2000      	movs	r0, #0
 8004116:	f7ff ffc7 	bl	80040a8 <_Z41__static_initialization_and_destruction_0ii>
 800411a:	bd80      	pop	{r7, pc}

0800411c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8004128:	4b0a      	ldr	r3, [pc, #40]	; (8004154 <NRF24_DelayMicroSeconds+0x38>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a0a      	ldr	r2, [pc, #40]	; (8004158 <NRF24_DelayMicroSeconds+0x3c>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	0c9a      	lsrs	r2, r3, #18
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	fb02 f303 	mul.w	r3, r2, r3
 800413a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 800413c:	bf00      	nop
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	1e5a      	subs	r2, r3, #1
 8004142:	60fa      	str	r2, [r7, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1fa      	bne.n	800413e <NRF24_DelayMicroSeconds+0x22>
}
 8004148:	bf00      	nop
 800414a:	bf00      	nop
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr
 8004154:	20000010 	.word	0x20000010
 8004158:	165e9f81 	.word	0x165e9f81

0800415c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <NRF24_csn+0x20>
 800416a:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <NRF24_csn+0x38>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a0a      	ldr	r2, [pc, #40]	; (8004198 <NRF24_csn+0x3c>)
 8004170:	8811      	ldrh	r1, [r2, #0]
 8004172:	2201      	movs	r2, #1
 8004174:	4618      	mov	r0, r3
 8004176:	f002 fc1f 	bl	80069b8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800417a:	e007      	b.n	800418c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <NRF24_csn+0x38>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a05      	ldr	r2, [pc, #20]	; (8004198 <NRF24_csn+0x3c>)
 8004182:	8811      	ldrh	r1, [r2, #0]
 8004184:	2200      	movs	r2, #0
 8004186:	4618      	mov	r0, r3
 8004188:	f002 fc16 	bl	80069b8 <HAL_GPIO_WritePin>
}
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20001630 	.word	0x20001630
 8004198:	20001634 	.word	0x20001634

0800419c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d008      	beq.n	80041bc <NRF24_ce+0x20>
 80041aa:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <NRF24_ce+0x38>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a0a      	ldr	r2, [pc, #40]	; (80041d8 <NRF24_ce+0x3c>)
 80041b0:	8811      	ldrh	r1, [r2, #0]
 80041b2:	2201      	movs	r2, #1
 80041b4:	4618      	mov	r0, r3
 80041b6:	f002 fbff 	bl	80069b8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80041ba:	e007      	b.n	80041cc <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <NRF24_ce+0x38>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a05      	ldr	r2, [pc, #20]	; (80041d8 <NRF24_ce+0x3c>)
 80041c2:	8811      	ldrh	r1, [r2, #0]
 80041c4:	2200      	movs	r2, #0
 80041c6:	4618      	mov	r0, r3
 80041c8:	f002 fbf6 	bl	80069b8 <HAL_GPIO_WritePin>
}
 80041cc:	bf00      	nop
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	20001630 	.word	0x20001630
 80041d8:	20001636 	.word	0x20001636

080041dc <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80041e6:	2000      	movs	r0, #0
 80041e8:	f7ff ffb8 	bl	800415c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	f003 031f 	and.w	r3, r3, #31
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80041f6:	f107 010c 	add.w	r1, r7, #12
 80041fa:	2364      	movs	r3, #100	; 0x64
 80041fc:	2201      	movs	r2, #1
 80041fe:	480a      	ldr	r0, [pc, #40]	; (8004228 <NRF24_read_register+0x4c>)
 8004200:	f004 fd58 	bl	8008cb4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8004204:	f107 030c 	add.w	r3, r7, #12
 8004208:	1c59      	adds	r1, r3, #1
 800420a:	2364      	movs	r3, #100	; 0x64
 800420c:	2201      	movs	r2, #1
 800420e:	4806      	ldr	r0, [pc, #24]	; (8004228 <NRF24_read_register+0x4c>)
 8004210:	f004 fe8c 	bl	8008f2c <HAL_SPI_Receive>
	retData = spiBuf[1];
 8004214:	7b7b      	ldrb	r3, [r7, #13]
 8004216:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8004218:	2001      	movs	r0, #1
 800421a:	f7ff ff9f 	bl	800415c <NRF24_csn>
	return retData;
 800421e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20001638 	.word	0x20001638

0800422c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	6039      	str	r1, [r7, #0]
 8004236:	71fb      	strb	r3, [r7, #7]
 8004238:	4613      	mov	r3, r2
 800423a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800423c:	2000      	movs	r0, #0
 800423e:	f7ff ff8d 	bl	800415c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	b2db      	uxtb	r3, r3
 800424a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800424c:	f107 010c 	add.w	r1, r7, #12
 8004250:	2364      	movs	r3, #100	; 0x64
 8004252:	2201      	movs	r2, #1
 8004254:	4808      	ldr	r0, [pc, #32]	; (8004278 <NRF24_read_registerN+0x4c>)
 8004256:	f004 fd2d 	bl	8008cb4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800425a:	79bb      	ldrb	r3, [r7, #6]
 800425c:	b29a      	uxth	r2, r3
 800425e:	2364      	movs	r3, #100	; 0x64
 8004260:	6839      	ldr	r1, [r7, #0]
 8004262:	4805      	ldr	r0, [pc, #20]	; (8004278 <NRF24_read_registerN+0x4c>)
 8004264:	f004 fe62 	bl	8008f2c <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8004268:	2001      	movs	r0, #1
 800426a:	f7ff ff77 	bl	800415c <NRF24_csn>
}
 800426e:	bf00      	nop
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20001638 	.word	0x20001638

0800427c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	460a      	mov	r2, r1
 8004286:	71fb      	strb	r3, [r7, #7]
 8004288:	4613      	mov	r3, r2
 800428a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800428c:	2000      	movs	r0, #0
 800428e:	f7ff ff65 	bl	800415c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	f043 0320 	orr.w	r3, r3, #32
 8004298:	b2db      	uxtb	r3, r3
 800429a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 800429c:	79bb      	ldrb	r3, [r7, #6]
 800429e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80042a0:	f107 010c 	add.w	r1, r7, #12
 80042a4:	2364      	movs	r3, #100	; 0x64
 80042a6:	2202      	movs	r2, #2
 80042a8:	4804      	ldr	r0, [pc, #16]	; (80042bc <NRF24_write_register+0x40>)
 80042aa:	f004 fd03 	bl	8008cb4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80042ae:	2001      	movs	r0, #1
 80042b0:	f7ff ff54 	bl	800415c <NRF24_csn>
}
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20001638 	.word	0x20001638

080042c0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	6039      	str	r1, [r7, #0]
 80042ca:	71fb      	strb	r3, [r7, #7]
 80042cc:	4613      	mov	r3, r2
 80042ce:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80042d0:	2000      	movs	r0, #0
 80042d2:	f7ff ff43 	bl	800415c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	f043 0320 	orr.w	r3, r3, #32
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80042e0:	f107 010c 	add.w	r1, r7, #12
 80042e4:	2364      	movs	r3, #100	; 0x64
 80042e6:	2201      	movs	r2, #1
 80042e8:	4808      	ldr	r0, [pc, #32]	; (800430c <NRF24_write_registerN+0x4c>)
 80042ea:	f004 fce3 	bl	8008cb4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80042ee:	79bb      	ldrb	r3, [r7, #6]
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	2364      	movs	r3, #100	; 0x64
 80042f4:	6839      	ldr	r1, [r7, #0]
 80042f6:	4805      	ldr	r0, [pc, #20]	; (800430c <NRF24_write_registerN+0x4c>)
 80042f8:	f004 fcdc 	bl	8008cb4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80042fc:	2001      	movs	r0, #1
 80042fe:	f7ff ff2d 	bl	800415c <NRF24_csn>
}
 8004302:	bf00      	nop
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20001638 	.word	0x20001638

08004310 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 800431c:	2000      	movs	r0, #0
 800431e:	f7ff ff1d 	bl	800415c <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8004322:	23a0      	movs	r3, #160	; 0xa0
 8004324:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8004326:	f107 010f 	add.w	r1, r7, #15
 800432a:	2364      	movs	r3, #100	; 0x64
 800432c:	2201      	movs	r2, #1
 800432e:	4808      	ldr	r0, [pc, #32]	; (8004350 <NRF24_write_payload+0x40>)
 8004330:	f004 fcc0 	bl	8008cb4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	b29a      	uxth	r2, r3
 8004338:	2364      	movs	r3, #100	; 0x64
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4804      	ldr	r0, [pc, #16]	; (8004350 <NRF24_write_payload+0x40>)
 800433e:	f004 fcb9 	bl	8008cb4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8004342:	2001      	movs	r0, #1
 8004344:	f7ff ff0a 	bl	800415c <NRF24_csn>
}
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20001638 	.word	0x20001638

08004354 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8004358:	21ff      	movs	r1, #255	; 0xff
 800435a:	20e1      	movs	r0, #225	; 0xe1
 800435c:	f7ff ff8e 	bl	800427c <NRF24_write_register>
}
 8004360:	bf00      	nop
 8004362:	bd80      	pop	{r7, pc}

08004364 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8004368:	21ff      	movs	r1, #255	; 0xff
 800436a:	20e2      	movs	r0, #226	; 0xe2
 800436c:	f7ff ff86 	bl	800427c <NRF24_write_register>
}
 8004370:	bf00      	nop
 8004372:	bd80      	pop	{r7, pc}

08004374 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800437a:	2007      	movs	r0, #7
 800437c:	f7ff ff2e 	bl	80041dc <NRF24_read_register>
 8004380:	4603      	mov	r3, r0
 8004382:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8004384:	79fb      	ldrb	r3, [r7, #7]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8004390:	b082      	sub	sp, #8
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	61fb      	str	r3, [r7, #28]
 800439c:	460b      	mov	r3, r1
 800439e:	807b      	strh	r3, [r7, #2]
 80043a0:	4613      	mov	r3, r2
 80043a2:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80043a4:	4b66      	ldr	r3, [pc, #408]	; (8004540 <NRF24_begin+0x1b0>)
 80043a6:	4618      	mov	r0, r3
 80043a8:	f107 031c 	add.w	r3, r7, #28
 80043ac:	2258      	movs	r2, #88	; 0x58
 80043ae:	4619      	mov	r1, r3
 80043b0:	f00b ff9c 	bl	80102ec <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80043b4:	4a63      	ldr	r2, [pc, #396]	; (8004544 <NRF24_begin+0x1b4>)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80043ba:	4a63      	ldr	r2, [pc, #396]	; (8004548 <NRF24_begin+0x1b8>)
 80043bc:	887b      	ldrh	r3, [r7, #2]
 80043be:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80043c0:	4a62      	ldr	r2, [pc, #392]	; (800454c <NRF24_begin+0x1bc>)
 80043c2:	883b      	ldrh	r3, [r7, #0]
 80043c4:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 80043c6:	2001      	movs	r0, #1
 80043c8:	f7ff fec8 	bl	800415c <NRF24_csn>
	NRF24_ce(0);
 80043cc:	2000      	movs	r0, #0
 80043ce:	f7ff fee5 	bl	800419c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80043d2:	2005      	movs	r0, #5
 80043d4:	f001 fdd6 	bl	8005f84 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80043d8:	2108      	movs	r1, #8
 80043da:	2000      	movs	r0, #0
 80043dc:	f7ff ff4e 	bl	800427c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80043e0:	213f      	movs	r1, #63	; 0x3f
 80043e2:	2001      	movs	r0, #1
 80043e4:	f7ff ff4a 	bl	800427c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80043e8:	2103      	movs	r1, #3
 80043ea:	2002      	movs	r0, #2
 80043ec:	f7ff ff46 	bl	800427c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80043f0:	2103      	movs	r1, #3
 80043f2:	2003      	movs	r0, #3
 80043f4:	f7ff ff42 	bl	800427c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80043f8:	2103      	movs	r1, #3
 80043fa:	2004      	movs	r0, #4
 80043fc:	f7ff ff3e 	bl	800427c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8004400:	2102      	movs	r1, #2
 8004402:	2005      	movs	r0, #5
 8004404:	f7ff ff3a 	bl	800427c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8004408:	210f      	movs	r1, #15
 800440a:	2006      	movs	r0, #6
 800440c:	f7ff ff36 	bl	800427c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8004410:	210e      	movs	r1, #14
 8004412:	2007      	movs	r0, #7
 8004414:	f7ff ff32 	bl	800427c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8004418:	2100      	movs	r1, #0
 800441a:	2008      	movs	r0, #8
 800441c:	f7ff ff2e 	bl	800427c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8004420:	2100      	movs	r1, #0
 8004422:	2009      	movs	r0, #9
 8004424:	f7ff ff2a 	bl	800427c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8004428:	23e7      	movs	r3, #231	; 0xe7
 800442a:	733b      	strb	r3, [r7, #12]
 800442c:	23e7      	movs	r3, #231	; 0xe7
 800442e:	72fb      	strb	r3, [r7, #11]
 8004430:	23e7      	movs	r3, #231	; 0xe7
 8004432:	72bb      	strb	r3, [r7, #10]
 8004434:	23e7      	movs	r3, #231	; 0xe7
 8004436:	727b      	strb	r3, [r7, #9]
 8004438:	23e7      	movs	r3, #231	; 0xe7
 800443a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 800443c:	f107 0308 	add.w	r3, r7, #8
 8004440:	2205      	movs	r2, #5
 8004442:	4619      	mov	r1, r3
 8004444:	200a      	movs	r0, #10
 8004446:	f7ff ff3b 	bl	80042c0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 800444a:	23c2      	movs	r3, #194	; 0xc2
 800444c:	733b      	strb	r3, [r7, #12]
 800444e:	23c2      	movs	r3, #194	; 0xc2
 8004450:	72fb      	strb	r3, [r7, #11]
 8004452:	23c2      	movs	r3, #194	; 0xc2
 8004454:	72bb      	strb	r3, [r7, #10]
 8004456:	23c2      	movs	r3, #194	; 0xc2
 8004458:	727b      	strb	r3, [r7, #9]
 800445a:	23c2      	movs	r3, #194	; 0xc2
 800445c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800445e:	f107 0308 	add.w	r3, r7, #8
 8004462:	2205      	movs	r2, #5
 8004464:	4619      	mov	r1, r3
 8004466:	200b      	movs	r0, #11
 8004468:	f7ff ff2a 	bl	80042c0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800446c:	21c3      	movs	r1, #195	; 0xc3
 800446e:	200c      	movs	r0, #12
 8004470:	f7ff ff04 	bl	800427c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8004474:	21c4      	movs	r1, #196	; 0xc4
 8004476:	200d      	movs	r0, #13
 8004478:	f7ff ff00 	bl	800427c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800447c:	21c5      	movs	r1, #197	; 0xc5
 800447e:	200e      	movs	r0, #14
 8004480:	f7ff fefc 	bl	800427c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8004484:	21c6      	movs	r1, #198	; 0xc6
 8004486:	200f      	movs	r0, #15
 8004488:	f7ff fef8 	bl	800427c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800448c:	23e7      	movs	r3, #231	; 0xe7
 800448e:	733b      	strb	r3, [r7, #12]
 8004490:	23e7      	movs	r3, #231	; 0xe7
 8004492:	72fb      	strb	r3, [r7, #11]
 8004494:	23e7      	movs	r3, #231	; 0xe7
 8004496:	72bb      	strb	r3, [r7, #10]
 8004498:	23e7      	movs	r3, #231	; 0xe7
 800449a:	727b      	strb	r3, [r7, #9]
 800449c:	23e7      	movs	r3, #231	; 0xe7
 800449e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80044a0:	f107 0308 	add.w	r3, r7, #8
 80044a4:	2205      	movs	r2, #5
 80044a6:	4619      	mov	r1, r3
 80044a8:	2010      	movs	r0, #16
 80044aa:	f7ff ff09 	bl	80042c0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80044ae:	2100      	movs	r1, #0
 80044b0:	2011      	movs	r0, #17
 80044b2:	f7ff fee3 	bl	800427c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80044b6:	2100      	movs	r1, #0
 80044b8:	2012      	movs	r0, #18
 80044ba:	f7ff fedf 	bl	800427c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80044be:	2100      	movs	r1, #0
 80044c0:	2013      	movs	r0, #19
 80044c2:	f7ff fedb 	bl	800427c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80044c6:	2100      	movs	r1, #0
 80044c8:	2014      	movs	r0, #20
 80044ca:	f7ff fed7 	bl	800427c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80044ce:	2100      	movs	r1, #0
 80044d0:	2015      	movs	r0, #21
 80044d2:	f7ff fed3 	bl	800427c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80044d6:	2100      	movs	r1, #0
 80044d8:	2016      	movs	r0, #22
 80044da:	f7ff fecf 	bl	800427c <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 80044de:	f000 fa87 	bl	80049f0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80044e2:	2100      	movs	r1, #0
 80044e4:	201c      	movs	r0, #28
 80044e6:	f7ff fec9 	bl	800427c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80044ea:	2100      	movs	r1, #0
 80044ec:	201d      	movs	r0, #29
 80044ee:	f7ff fec5 	bl	800427c <NRF24_write_register>
	printRadioSettings();
 80044f2:	f000 fa97 	bl	8004a24 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80044f6:	210f      	movs	r1, #15
 80044f8:	200f      	movs	r0, #15
 80044fa:	f000 f8ad 	bl	8004658 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80044fe:	2003      	movs	r0, #3
 8004500:	f000 f925 	bl	800474e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8004504:	2001      	movs	r0, #1
 8004506:	f000 f95b 	bl	80047c0 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800450a:	2002      	movs	r0, #2
 800450c:	f000 f99e 	bl	800484c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8004510:	f000 f8f0 	bl	80046f4 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8004514:	2020      	movs	r0, #32
 8004516:	f000 f8cf 	bl	80046b8 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 800451a:	f000 fa60 	bl	80049de <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800451e:	204c      	movs	r0, #76	; 0x4c
 8004520:	f000 f8b5 	bl	800468e <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8004524:	f7ff ff16 	bl	8004354 <NRF24_flush_tx>
	NRF24_flush_rx();
 8004528:	f7ff ff1c 	bl	8004364 <NRF24_flush_rx>

	NRF24_powerDown();
 800452c:	f000 f9b6 	bl	800489c <NRF24_powerDown>

}
 8004530:	bf00      	nop
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800453a:	b002      	add	sp, #8
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20001638 	.word	0x20001638
 8004544:	20001630 	.word	0x20001630
 8004548:	20001634 	.word	0x20001634
 800454c:	20001636 	.word	0x20001636

08004550 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8004554:	2000      	movs	r0, #0
 8004556:	f7ff fe21 	bl	800419c <NRF24_ce>
	NRF24_flush_tx();
 800455a:	f7ff fefb 	bl	8004354 <NRF24_flush_tx>
	NRF24_flush_rx();
 800455e:	f7ff ff01 	bl	8004364 <NRF24_flush_rx>
}
 8004562:	bf00      	nop
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8004574:	f000 fa33 	bl	80049de <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	4619      	mov	r1, r3
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f9cc 	bl	800491a <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8004582:	f001 fcf5 	bl	8005f70 <HAL_GetTick>
 8004586:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8004588:	230a      	movs	r3, #10
 800458a:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 800458c:	f107 030d 	add.w	r3, r7, #13
 8004590:	2201      	movs	r2, #1
 8004592:	4619      	mov	r1, r3
 8004594:	2008      	movs	r0, #8
 8004596:	f7ff fe49 	bl	800422c <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 800459a:	f7ff feeb 	bl	8004374 <NRF24_get_status>
 800459e:	4603      	mov	r3, r0
 80045a0:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d107      	bne.n	80045bc <NRF24_write+0x54>
 80045ac:	f001 fce0 	bl	8005f70 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d8e7      	bhi.n	800458c <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 80045bc:	f107 010b 	add.w	r1, r7, #11
 80045c0:	f107 030c 	add.w	r3, r7, #12
 80045c4:	4a0c      	ldr	r2, [pc, #48]	; (80045f8 <NRF24_write+0x90>)
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 f9d6 	bl	8004978 <NRF24_whatHappened>
	retStatus = tx_ok;
 80045cc:	7b3b      	ldrb	r3, [r7, #12]
 80045ce:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 80045d0:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <NRF24_write+0x90>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 80045d8:	f000 f884 	bl	80046e4 <NRF24_getDynamicPayloadSize>
 80045dc:	4603      	mov	r3, r0
 80045de:	461a      	mov	r2, r3
 80045e0:	4b06      	ldr	r3, [pc, #24]	; (80045fc <NRF24_write+0x94>)
 80045e2:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 80045e4:	f000 f80c 	bl	8004600 <NRF24_available>
	NRF24_flush_tx();
 80045e8:	f7ff feb4 	bl	8004354 <NRF24_flush_tx>
	return retStatus;
 80045ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	2000162a 	.word	0x2000162a
 80045fc:	2000162b 	.word	0x2000162b

08004600 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8004604:	2000      	movs	r0, #0
 8004606:	f000 f958 	bl	80048ba <NRF24_availablePipe>
 800460a:	4603      	mov	r3, r0
}
 800460c:	4618      	mov	r0, r3
 800460e:	bd80      	pop	{r7, pc}

08004610 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 800461a:	463b      	mov	r3, r7
 800461c:	2205      	movs	r2, #5
 800461e:	4619      	mov	r1, r3
 8004620:	200a      	movs	r0, #10
 8004622:	f7ff fe4d 	bl	80042c0 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8004626:	463b      	mov	r3, r7
 8004628:	2205      	movs	r2, #5
 800462a:	4619      	mov	r1, r3
 800462c:	2010      	movs	r0, #16
 800462e:	f7ff fe47 	bl	80042c0 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 8004632:	2320      	movs	r3, #32
 8004634:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8004636:	4b07      	ldr	r3, [pc, #28]	; (8004654 <NRF24_openWritingPipe+0x44>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	7bfa      	ldrb	r2, [r7, #15]
 800463c:	4293      	cmp	r3, r2
 800463e:	bf28      	it	cs
 8004640:	4613      	movcs	r3, r2
 8004642:	b2db      	uxtb	r3, r3
 8004644:	4619      	mov	r1, r3
 8004646:	2011      	movs	r0, #17
 8004648:	f7ff fe18 	bl	800427c <NRF24_write_register>
}
 800464c:	bf00      	nop
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	2000162c 	.word	0x2000162c

08004658 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	460a      	mov	r2, r1
 8004662:	71fb      	strb	r3, [r7, #7]
 8004664:	4613      	mov	r3, r2
 8004666:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	b25a      	sxtb	r2, r3
 800466e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	b25b      	sxtb	r3, r3
 8004678:	4313      	orrs	r3, r2
 800467a:	b25b      	sxtb	r3, r3
 800467c:	b2db      	uxtb	r3, r3
 800467e:	4619      	mov	r1, r3
 8004680:	2004      	movs	r0, #4
 8004682:	f7ff fdfb 	bl	800427c <NRF24_write_register>
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	4603      	mov	r3, r0
 8004696:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8004698:	237f      	movs	r3, #127	; 0x7f
 800469a:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 800469c:	7bfa      	ldrb	r2, [r7, #15]
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	4293      	cmp	r3, r2
 80046a2:	bf28      	it	cs
 80046a4:	4613      	movcs	r3, r2
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	4619      	mov	r1, r3
 80046aa:	2005      	movs	r0, #5
 80046ac:	f7ff fde6 	bl	800427c <NRF24_write_register>
}
 80046b0:	bf00      	nop
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80046c2:	2320      	movs	r3, #32
 80046c4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80046c6:	7bfa      	ldrb	r2, [r7, #15]
 80046c8:	79fb      	ldrb	r3, [r7, #7]
 80046ca:	4293      	cmp	r3, r2
 80046cc:	bf28      	it	cs
 80046ce:	4613      	movcs	r3, r2
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	4b03      	ldr	r3, [pc, #12]	; (80046e0 <NRF24_setPayloadSize+0x28>)
 80046d4:	701a      	strb	r2, [r3, #0]
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr
 80046e0:	2000162c 	.word	0x2000162c

080046e4 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80046e8:	2060      	movs	r0, #96	; 0x60
 80046ea:	f7ff fd77 	bl	80041dc <NRF24_read_register>
 80046ee:	4603      	mov	r3, r0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80046f8:	201d      	movs	r0, #29
 80046fa:	f7ff fd6f 	bl	80041dc <NRF24_read_register>
 80046fe:	4603      	mov	r3, r0
 8004700:	f023 0304 	bic.w	r3, r3, #4
 8004704:	b2db      	uxtb	r3, r3
 8004706:	4619      	mov	r1, r3
 8004708:	201d      	movs	r0, #29
 800470a:	f7ff fdb7 	bl	800427c <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 800470e:	2100      	movs	r1, #0
 8004710:	201c      	movs	r0, #28
 8004712:	f7ff fdb3 	bl	800427c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8004716:	4b02      	ldr	r3, [pc, #8]	; (8004720 <NRF24_disableDynamicPayloads+0x2c>)
 8004718:	2200      	movs	r2, #0
 800471a:	701a      	strb	r2, [r3, #0]
}
 800471c:	bf00      	nop
 800471e:	bd80      	pop	{r7, pc}
 8004720:	2000162d 	.word	0x2000162d

08004724 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d004      	beq.n	800473e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8004734:	213f      	movs	r1, #63	; 0x3f
 8004736:	2001      	movs	r0, #1
 8004738:	f7ff fda0 	bl	800427c <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 800473c:	e003      	b.n	8004746 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800473e:	2100      	movs	r1, #0
 8004740:	2001      	movs	r0, #1
 8004742:	f7ff fd9b 	bl	800427c <NRF24_write_register>
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	4603      	mov	r3, r0
 8004756:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8004758:	2006      	movs	r0, #6
 800475a:	f7ff fd3f 	bl	80041dc <NRF24_read_register>
 800475e:	4603      	mov	r3, r0
 8004760:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	f023 0306 	bic.w	r3, r3, #6
 8004768:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	2b03      	cmp	r3, #3
 800476e:	d104      	bne.n	800477a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	f043 0306 	orr.w	r3, r3, #6
 8004776:	73fb      	strb	r3, [r7, #15]
 8004778:	e019      	b.n	80047ae <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	2b02      	cmp	r3, #2
 800477e:	d104      	bne.n	800478a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8004780:	7bfb      	ldrb	r3, [r7, #15]
 8004782:	f043 0304 	orr.w	r3, r3, #4
 8004786:	73fb      	strb	r3, [r7, #15]
 8004788:	e011      	b.n	80047ae <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d104      	bne.n	800479a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	f043 0302 	orr.w	r3, r3, #2
 8004796:	73fb      	strb	r3, [r7, #15]
 8004798:	e009      	b.n	80047ae <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d006      	beq.n	80047ae <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d103      	bne.n	80047ae <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	f043 0306 	orr.w	r3, r3, #6
 80047ac:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	4619      	mov	r1, r3
 80047b2:	2006      	movs	r0, #6
 80047b4:	f7ff fd62 	bl	800427c <NRF24_write_register>
}
 80047b8:	bf00      	nop
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80047ca:	2300      	movs	r3, #0
 80047cc:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80047ce:	2006      	movs	r0, #6
 80047d0:	f7ff fd04 	bl	80041dc <NRF24_read_register>
 80047d4:	4603      	mov	r3, r0
 80047d6:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 80047d8:	4b1b      	ldr	r3, [pc, #108]	; (8004848 <NRF24_setDataRate+0x88>)
 80047da:	2200      	movs	r2, #0
 80047dc:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80047de:	7bbb      	ldrb	r3, [r7, #14]
 80047e0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80047e4:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 80047e6:	79fb      	ldrb	r3, [r7, #7]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d107      	bne.n	80047fc <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 80047ec:	4b16      	ldr	r3, [pc, #88]	; (8004848 <NRF24_setDataRate+0x88>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 80047f2:	7bbb      	ldrb	r3, [r7, #14]
 80047f4:	f043 0320 	orr.w	r3, r3, #32
 80047f8:	73bb      	strb	r3, [r7, #14]
 80047fa:	e00d      	b.n	8004818 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80047fc:	79fb      	ldrb	r3, [r7, #7]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d107      	bne.n	8004812 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8004802:	4b11      	ldr	r3, [pc, #68]	; (8004848 <NRF24_setDataRate+0x88>)
 8004804:	2201      	movs	r2, #1
 8004806:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8004808:	7bbb      	ldrb	r3, [r7, #14]
 800480a:	f043 0308 	orr.w	r3, r3, #8
 800480e:	73bb      	strb	r3, [r7, #14]
 8004810:	e002      	b.n	8004818 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8004812:	4b0d      	ldr	r3, [pc, #52]	; (8004848 <NRF24_setDataRate+0x88>)
 8004814:	2200      	movs	r2, #0
 8004816:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8004818:	7bbb      	ldrb	r3, [r7, #14]
 800481a:	4619      	mov	r1, r3
 800481c:	2006      	movs	r0, #6
 800481e:	f7ff fd2d 	bl	800427c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8004822:	2006      	movs	r0, #6
 8004824:	f7ff fcda 	bl	80041dc <NRF24_read_register>
 8004828:	4603      	mov	r3, r0
 800482a:	461a      	mov	r2, r3
 800482c:	7bbb      	ldrb	r3, [r7, #14]
 800482e:	4293      	cmp	r3, r2
 8004830:	d102      	bne.n	8004838 <NRF24_setDataRate+0x78>
  {
    result = true;
 8004832:	2301      	movs	r3, #1
 8004834:	73fb      	strb	r3, [r7, #15]
 8004836:	e002      	b.n	800483e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8004838:	4b03      	ldr	r3, [pc, #12]	; (8004848 <NRF24_setDataRate+0x88>)
 800483a:	2200      	movs	r2, #0
 800483c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800483e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	2000162e 	.word	0x2000162e

0800484c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8004856:	2000      	movs	r0, #0
 8004858:	f7ff fcc0 	bl	80041dc <NRF24_read_register>
 800485c:	4603      	mov	r3, r0
 800485e:	f023 030c 	bic.w	r3, r3, #12
 8004862:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8004864:	79fb      	ldrb	r3, [r7, #7]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00f      	beq.n	800488a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 800486a:	79fb      	ldrb	r3, [r7, #7]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d104      	bne.n	800487a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	f043 0308 	orr.w	r3, r3, #8
 8004876:	73fb      	strb	r3, [r7, #15]
 8004878:	e007      	b.n	800488a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 800487a:	7bfb      	ldrb	r3, [r7, #15]
 800487c:	f043 0308 	orr.w	r3, r3, #8
 8004880:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8004882:	7bfb      	ldrb	r3, [r7, #15]
 8004884:	f043 0304 	orr.w	r3, r3, #4
 8004888:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	4619      	mov	r1, r3
 800488e:	2000      	movs	r0, #0
 8004890:	f7ff fcf4 	bl	800427c <NRF24_write_register>
}
 8004894:	bf00      	nop
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80048a0:	2000      	movs	r0, #0
 80048a2:	f7ff fc9b 	bl	80041dc <NRF24_read_register>
 80048a6:	4603      	mov	r3, r0
 80048a8:	f023 0302 	bic.w	r3, r3, #2
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	4619      	mov	r1, r3
 80048b0:	2000      	movs	r0, #0
 80048b2:	f7ff fce3 	bl	800427c <NRF24_write_register>
}
 80048b6:	bf00      	nop
 80048b8:	bd80      	pop	{r7, pc}

080048ba <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 80048c2:	f7ff fd57 	bl	8004374 <NRF24_get_status>
 80048c6:	4603      	mov	r3, r0
 80048c8:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	bf14      	ite	ne
 80048d4:	2301      	movne	r3, #1
 80048d6:	2300      	moveq	r3, #0
 80048d8:	73bb      	strb	r3, [r7, #14]

  if (result)
 80048da:	7bbb      	ldrb	r3, [r7, #14]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d017      	beq.n	8004910 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d007      	beq.n	80048f6 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	085b      	lsrs	r3, r3, #1
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80048f6:	2140      	movs	r1, #64	; 0x40
 80048f8:	2007      	movs	r0, #7
 80048fa:	f7ff fcbf 	bl	800427c <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8004908:	2120      	movs	r1, #32
 800490a:	2007      	movs	r0, #7
 800490c:	f7ff fcb6 	bl	800427c <NRF24_write_register>
    }
  }
  return result;
 8004910:	7bbb      	ldrb	r3, [r7, #14]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b082      	sub	sp, #8
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	460b      	mov	r3, r1
 8004924:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8004926:	2000      	movs	r0, #0
 8004928:	f7ff fc38 	bl	800419c <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 800492c:	2000      	movs	r0, #0
 800492e:	f7ff fc55 	bl	80041dc <NRF24_read_register>
 8004932:	4603      	mov	r3, r0
 8004934:	f043 0302 	orr.w	r3, r3, #2
 8004938:	b2db      	uxtb	r3, r3
 800493a:	f023 0301 	bic.w	r3, r3, #1
 800493e:	b2db      	uxtb	r3, r3
 8004940:	4619      	mov	r1, r3
 8004942:	2000      	movs	r0, #0
 8004944:	f7ff fc9a 	bl	800427c <NRF24_write_register>
  NRF24_ce(1);
 8004948:	2001      	movs	r0, #1
 800494a:	f7ff fc27 	bl	800419c <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 800494e:	2096      	movs	r0, #150	; 0x96
 8004950:	f7ff fbe4 	bl	800411c <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8004954:	78fb      	ldrb	r3, [r7, #3]
 8004956:	4619      	mov	r1, r3
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff fcd9 	bl	8004310 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 800495e:	2001      	movs	r0, #1
 8004960:	f7ff fc1c 	bl	800419c <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8004964:	200f      	movs	r0, #15
 8004966:	f7ff fbd9 	bl	800411c <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 800496a:	2000      	movs	r0, #0
 800496c:	f7ff fc16 	bl	800419c <NRF24_ce>
}
 8004970:	bf00      	nop
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8004984:	f7ff fcf6 	bl	8004374 <NRF24_get_status>
 8004988:	4603      	mov	r3, r0
 800498a:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8004992:	2170      	movs	r1, #112	; 0x70
 8004994:	2007      	movs	r0, #7
 8004996:	f7ff fc71 	bl	800427c <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 800499a:	7dfb      	ldrb	r3, [r7, #23]
 800499c:	f003 0320 	and.w	r3, r3, #32
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	bf14      	ite	ne
 80049a4:	2301      	movne	r3, #1
 80049a6:	2300      	moveq	r3, #0
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bf14      	ite	ne
 80049b8:	2301      	movne	r3, #1
 80049ba:	2300      	moveq	r3, #0
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 80049c2:	7dfb      	ldrb	r3, [r7, #23]
 80049c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	bf14      	ite	ne
 80049cc:	2301      	movne	r3, #1
 80049ce:	2300      	moveq	r3, #0
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	701a      	strb	r2, [r3, #0]
}
 80049d6:	bf00      	nop
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80049e2:	2170      	movs	r1, #112	; 0x70
 80049e4:	2007      	movs	r0, #7
 80049e6:	f7ff fc49 	bl	800427c <NRF24_write_register>
}
 80049ea:	bf00      	nop
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80049f6:	2000      	movs	r0, #0
 80049f8:	f7ff fbb0 	bl	800415c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80049fc:	2350      	movs	r3, #80	; 0x50
 80049fe:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8004a00:	2373      	movs	r3, #115	; 0x73
 8004a02:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8004a04:	1d39      	adds	r1, r7, #4
 8004a06:	2364      	movs	r3, #100	; 0x64
 8004a08:	2202      	movs	r2, #2
 8004a0a:	4805      	ldr	r0, [pc, #20]	; (8004a20 <NRF24_ACTIVATE_cmd+0x30>)
 8004a0c:	f004 f952 	bl	8008cb4 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8004a10:	2001      	movs	r0, #1
 8004a12:	f7ff fba3 	bl	800415c <NRF24_csn>
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20001638 	.word	0x20001638

08004a24 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8004a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a26:	b0a1      	sub	sp, #132	; 0x84
 8004a28:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8004a2a:	f107 0308 	add.w	r3, r7, #8
 8004a2e:	49c3      	ldr	r1, [pc, #780]	; (8004d3c <printRadioSettings+0x318>)
 8004a30:	4618      	mov	r0, r3
 8004a32:	f00b fd27 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a36:	f107 0308 	add.w	r3, r7, #8
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fb fb88 	bl	8000150 <strlen>
 8004a40:	4603      	mov	r3, r0
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	f107 0108 	add.w	r1, r7, #8
 8004a48:	230a      	movs	r3, #10
 8004a4a:	48bd      	ldr	r0, [pc, #756]	; (8004d40 <printRadioSettings+0x31c>)
 8004a4c:	f006 fa56 	bl	800aefc <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8004a50:	2000      	movs	r0, #0
 8004a52:	f7ff fbc3 	bl	80041dc <NRF24_read_register>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8004a5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d013      	beq.n	8004a90 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8004a68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d006      	beq.n	8004a82 <printRadioSettings+0x5e>
 8004a74:	f107 0308 	add.w	r3, r7, #8
 8004a78:	49b2      	ldr	r1, [pc, #712]	; (8004d44 <printRadioSettings+0x320>)
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f00b fd02 	bl	8010484 <siprintf>
 8004a80:	e00c      	b.n	8004a9c <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8004a82:	f107 0308 	add.w	r3, r7, #8
 8004a86:	49b0      	ldr	r1, [pc, #704]	; (8004d48 <printRadioSettings+0x324>)
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f00b fcfb 	bl	8010484 <siprintf>
 8004a8e:	e005      	b.n	8004a9c <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8004a90:	f107 0308 	add.w	r3, r7, #8
 8004a94:	49ad      	ldr	r1, [pc, #692]	; (8004d4c <printRadioSettings+0x328>)
 8004a96:	4618      	mov	r0, r3
 8004a98:	f00b fcf4 	bl	8010484 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a9c:	f107 0308 	add.w	r3, r7, #8
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fb fb55 	bl	8000150 <strlen>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	f107 0108 	add.w	r1, r7, #8
 8004aae:	230a      	movs	r3, #10
 8004ab0:	48a3      	ldr	r0, [pc, #652]	; (8004d40 <printRadioSettings+0x31c>)
 8004ab2:	f006 fa23 	bl	800aefc <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	f7ff fb90 	bl	80041dc <NRF24_read_register>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004ac2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ac6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bfcc      	ite	gt
 8004ace:	2301      	movgt	r3, #1
 8004ad0:	2300      	movle	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004ad6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ada:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bfcc      	ite	gt
 8004ae2:	2301      	movgt	r3, #1
 8004ae4:	2300      	movle	r3, #0
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004aea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004aee:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	bfcc      	ite	gt
 8004af6:	2301      	movgt	r3, #1
 8004af8:	2300      	movle	r3, #0
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004afe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b02:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	bfcc      	ite	gt
 8004b0a:	2301      	movgt	r3, #1
 8004b0c:	2300      	movle	r3, #0
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004b12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b16:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	bfcc      	ite	gt
 8004b1e:	2301      	movgt	r3, #1
 8004b20:	2300      	movle	r3, #0
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004b26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b2a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	bfcc      	ite	gt
 8004b32:	2301      	movgt	r3, #1
 8004b34:	2300      	movle	r3, #0
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	f107 0008 	add.w	r0, r7, #8
 8004b3c:	9303      	str	r3, [sp, #12]
 8004b3e:	9402      	str	r4, [sp, #8]
 8004b40:	9101      	str	r1, [sp, #4]
 8004b42:	9200      	str	r2, [sp, #0]
 8004b44:	4633      	mov	r3, r6
 8004b46:	462a      	mov	r2, r5
 8004b48:	4981      	ldr	r1, [pc, #516]	; (8004d50 <printRadioSettings+0x32c>)
 8004b4a:	f00b fc9b 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004b4e:	f107 0308 	add.w	r3, r7, #8
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fb fafc 	bl	8000150 <strlen>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	f107 0108 	add.w	r1, r7, #8
 8004b60:	230a      	movs	r3, #10
 8004b62:	4877      	ldr	r0, [pc, #476]	; (8004d40 <printRadioSettings+0x31c>)
 8004b64:	f006 f9ca 	bl	800aefc <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8004b68:	2002      	movs	r0, #2
 8004b6a:	f7ff fb37 	bl	80041dc <NRF24_read_register>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004b74:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b78:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	bfcc      	ite	gt
 8004b80:	2301      	movgt	r3, #1
 8004b82:	2300      	movle	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004b88:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b8c:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	bfcc      	ite	gt
 8004b94:	2301      	movgt	r3, #1
 8004b96:	2300      	movle	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004b9c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ba0:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bfcc      	ite	gt
 8004ba8:	2301      	movgt	r3, #1
 8004baa:	2300      	movle	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004bb0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004bb4:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bfcc      	ite	gt
 8004bbc:	2301      	movgt	r3, #1
 8004bbe:	2300      	movle	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004bc4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004bc8:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bfcc      	ite	gt
 8004bd0:	2301      	movgt	r3, #1
 8004bd2:	2300      	movle	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004bd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004bdc:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	bfcc      	ite	gt
 8004be4:	2301      	movgt	r3, #1
 8004be6:	2300      	movle	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	f107 0008 	add.w	r0, r7, #8
 8004bee:	9303      	str	r3, [sp, #12]
 8004bf0:	9402      	str	r4, [sp, #8]
 8004bf2:	9101      	str	r1, [sp, #4]
 8004bf4:	9200      	str	r2, [sp, #0]
 8004bf6:	4633      	mov	r3, r6
 8004bf8:	462a      	mov	r2, r5
 8004bfa:	4956      	ldr	r1, [pc, #344]	; (8004d54 <printRadioSettings+0x330>)
 8004bfc:	f00b fc42 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004c00:	f107 0308 	add.w	r3, r7, #8
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fb faa3 	bl	8000150 <strlen>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	f107 0108 	add.w	r1, r7, #8
 8004c12:	230a      	movs	r3, #10
 8004c14:	484a      	ldr	r0, [pc, #296]	; (8004d40 <printRadioSettings+0x31c>)
 8004c16:	f006 f971 	bl	800aefc <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8004c1a:	2003      	movs	r0, #3
 8004c1c:	f7ff fade 	bl	80041dc <NRF24_read_register>
 8004c20:	4603      	mov	r3, r0
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8004c2a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c2e:	3302      	adds	r3, #2
 8004c30:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8004c34:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8004c38:	f107 0308 	add.w	r3, r7, #8
 8004c3c:	4946      	ldr	r1, [pc, #280]	; (8004d58 <printRadioSettings+0x334>)
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f00b fc20 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004c44:	f107 0308 	add.w	r3, r7, #8
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fb fa81 	bl	8000150 <strlen>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	f107 0108 	add.w	r1, r7, #8
 8004c56:	230a      	movs	r3, #10
 8004c58:	4839      	ldr	r0, [pc, #228]	; (8004d40 <printRadioSettings+0x31c>)
 8004c5a:	f006 f94f 	bl	800aefc <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8004c5e:	2005      	movs	r0, #5
 8004c60:	f7ff fabc 	bl	80041dc <NRF24_read_register>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8004c6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c72:	f107 0308 	add.w	r3, r7, #8
 8004c76:	4939      	ldr	r1, [pc, #228]	; (8004d5c <printRadioSettings+0x338>)
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f00b fc03 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004c7e:	f107 0308 	add.w	r3, r7, #8
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fb fa64 	bl	8000150 <strlen>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	f107 0108 	add.w	r1, r7, #8
 8004c90:	230a      	movs	r3, #10
 8004c92:	482b      	ldr	r0, [pc, #172]	; (8004d40 <printRadioSettings+0x31c>)
 8004c94:	f006 f932 	bl	800aefc <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8004c98:	2006      	movs	r0, #6
 8004c9a:	f7ff fa9f 	bl	80041dc <NRF24_read_register>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8004ca4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d006      	beq.n	8004cbe <printRadioSettings+0x29a>
 8004cb0:	f107 0308 	add.w	r3, r7, #8
 8004cb4:	492a      	ldr	r1, [pc, #168]	; (8004d60 <printRadioSettings+0x33c>)
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f00b fbe4 	bl	8010484 <siprintf>
 8004cbc:	e005      	b.n	8004cca <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8004cbe:	f107 0308 	add.w	r3, r7, #8
 8004cc2:	4928      	ldr	r1, [pc, #160]	; (8004d64 <printRadioSettings+0x340>)
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f00b fbdd 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004cca:	f107 0308 	add.w	r3, r7, #8
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fb fa3e 	bl	8000150 <strlen>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	f107 0108 	add.w	r1, r7, #8
 8004cdc:	230a      	movs	r3, #10
 8004cde:	4818      	ldr	r0, [pc, #96]	; (8004d40 <printRadioSettings+0x31c>)
 8004ce0:	f006 f90c 	bl	800aefc <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8004ce4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ce8:	f003 0306 	and.w	r3, r3, #6
 8004cec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8004cf0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004cf4:	085b      	lsrs	r3, r3, #1
 8004cf6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8004cfa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <printRadioSettings+0x2ec>
 8004d02:	f107 0308 	add.w	r3, r7, #8
 8004d06:	4918      	ldr	r1, [pc, #96]	; (8004d68 <printRadioSettings+0x344>)
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f00b fbbb 	bl	8010484 <siprintf>
 8004d0e:	e03b      	b.n	8004d88 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8004d10:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d106      	bne.n	8004d26 <printRadioSettings+0x302>
 8004d18:	f107 0308 	add.w	r3, r7, #8
 8004d1c:	4913      	ldr	r1, [pc, #76]	; (8004d6c <printRadioSettings+0x348>)
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f00b fbb0 	bl	8010484 <siprintf>
 8004d24:	e030      	b.n	8004d88 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8004d26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d122      	bne.n	8004d74 <printRadioSettings+0x350>
 8004d2e:	f107 0308 	add.w	r3, r7, #8
 8004d32:	490f      	ldr	r1, [pc, #60]	; (8004d70 <printRadioSettings+0x34c>)
 8004d34:	4618      	mov	r0, r3
 8004d36:	f00b fba5 	bl	8010484 <siprintf>
 8004d3a:	e025      	b.n	8004d88 <printRadioSettings+0x364>
 8004d3c:	08010be0 	.word	0x08010be0
 8004d40:	20001690 	.word	0x20001690
 8004d44:	08010c14 	.word	0x08010c14
 8004d48:	08010c30 	.word	0x08010c30
 8004d4c:	08010c4c 	.word	0x08010c4c
 8004d50:	08010c60 	.word	0x08010c60
 8004d54:	08010ca4 	.word	0x08010ca4
 8004d58:	08010cf0 	.word	0x08010cf0
 8004d5c:	08010d0c 	.word	0x08010d0c
 8004d60:	08010d20 	.word	0x08010d20
 8004d64:	08010d38 	.word	0x08010d38
 8004d68:	08010d50 	.word	0x08010d50
 8004d6c:	08010d64 	.word	0x08010d64
 8004d70:	08010d78 	.word	0x08010d78
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8004d74:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d105      	bne.n	8004d88 <printRadioSettings+0x364>
 8004d7c:	f107 0308 	add.w	r3, r7, #8
 8004d80:	49d7      	ldr	r1, [pc, #860]	; (80050e0 <printRadioSettings+0x6bc>)
 8004d82:	4618      	mov	r0, r3
 8004d84:	f00b fb7e 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004d88:	f107 0308 	add.w	r3, r7, #8
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fb f9df 	bl	8000150 <strlen>
 8004d92:	4603      	mov	r3, r0
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	f107 0108 	add.w	r1, r7, #8
 8004d9a:	230a      	movs	r3, #10
 8004d9c:	48d1      	ldr	r0, [pc, #836]	; (80050e4 <printRadioSettings+0x6c0>)
 8004d9e:	f006 f8ad 	bl	800aefc <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8004da2:	463b      	mov	r3, r7
 8004da4:	2205      	movs	r2, #5
 8004da6:	4619      	mov	r1, r3
 8004da8:	200a      	movs	r0, #10
 8004daa:	f7ff fa3f 	bl	800422c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8004dae:	793b      	ldrb	r3, [r7, #4]
 8004db0:	461c      	mov	r4, r3
 8004db2:	78fb      	ldrb	r3, [r7, #3]
 8004db4:	461d      	mov	r5, r3
 8004db6:	78bb      	ldrb	r3, [r7, #2]
 8004db8:	787a      	ldrb	r2, [r7, #1]
 8004dba:	7839      	ldrb	r1, [r7, #0]
 8004dbc:	f107 0008 	add.w	r0, r7, #8
 8004dc0:	9102      	str	r1, [sp, #8]
 8004dc2:	9201      	str	r2, [sp, #4]
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	462b      	mov	r3, r5
 8004dc8:	4622      	mov	r2, r4
 8004dca:	49c7      	ldr	r1, [pc, #796]	; (80050e8 <printRadioSettings+0x6c4>)
 8004dcc:	f00b fb5a 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004dd0:	f107 0308 	add.w	r3, r7, #8
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7fb f9bb 	bl	8000150 <strlen>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	f107 0108 	add.w	r1, r7, #8
 8004de2:	230a      	movs	r3, #10
 8004de4:	48bf      	ldr	r0, [pc, #764]	; (80050e4 <printRadioSettings+0x6c0>)
 8004de6:	f006 f889 	bl	800aefc <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8004dea:	463b      	mov	r3, r7
 8004dec:	2205      	movs	r2, #5
 8004dee:	4619      	mov	r1, r3
 8004df0:	200b      	movs	r0, #11
 8004df2:	f7ff fa1b 	bl	800422c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8004df6:	793b      	ldrb	r3, [r7, #4]
 8004df8:	461c      	mov	r4, r3
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	461d      	mov	r5, r3
 8004dfe:	78bb      	ldrb	r3, [r7, #2]
 8004e00:	787a      	ldrb	r2, [r7, #1]
 8004e02:	7839      	ldrb	r1, [r7, #0]
 8004e04:	f107 0008 	add.w	r0, r7, #8
 8004e08:	9102      	str	r1, [sp, #8]
 8004e0a:	9201      	str	r2, [sp, #4]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	462b      	mov	r3, r5
 8004e10:	4622      	mov	r2, r4
 8004e12:	49b6      	ldr	r1, [pc, #728]	; (80050ec <printRadioSettings+0x6c8>)
 8004e14:	f00b fb36 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004e18:	f107 0308 	add.w	r3, r7, #8
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fb f997 	bl	8000150 <strlen>
 8004e22:	4603      	mov	r3, r0
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	f107 0108 	add.w	r1, r7, #8
 8004e2a:	230a      	movs	r3, #10
 8004e2c:	48ad      	ldr	r0, [pc, #692]	; (80050e4 <printRadioSettings+0x6c0>)
 8004e2e:	f006 f865 	bl	800aefc <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8004e32:	463b      	mov	r3, r7
 8004e34:	2201      	movs	r2, #1
 8004e36:	4619      	mov	r1, r3
 8004e38:	200c      	movs	r0, #12
 8004e3a:	f7ff f9f7 	bl	800422c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004e3e:	783b      	ldrb	r3, [r7, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	f107 0308 	add.w	r3, r7, #8
 8004e46:	49aa      	ldr	r1, [pc, #680]	; (80050f0 <printRadioSettings+0x6cc>)
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f00b fb1b 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004e4e:	f107 0308 	add.w	r3, r7, #8
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fb f97c 	bl	8000150 <strlen>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	f107 0108 	add.w	r1, r7, #8
 8004e60:	230a      	movs	r3, #10
 8004e62:	48a0      	ldr	r0, [pc, #640]	; (80050e4 <printRadioSettings+0x6c0>)
 8004e64:	f006 f84a 	bl	800aefc <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8004e68:	463b      	mov	r3, r7
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	200d      	movs	r0, #13
 8004e70:	f7ff f9dc 	bl	800422c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004e74:	783b      	ldrb	r3, [r7, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	f107 0308 	add.w	r3, r7, #8
 8004e7c:	499d      	ldr	r1, [pc, #628]	; (80050f4 <printRadioSettings+0x6d0>)
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f00b fb00 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004e84:	f107 0308 	add.w	r3, r7, #8
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fb f961 	bl	8000150 <strlen>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	f107 0108 	add.w	r1, r7, #8
 8004e96:	230a      	movs	r3, #10
 8004e98:	4892      	ldr	r0, [pc, #584]	; (80050e4 <printRadioSettings+0x6c0>)
 8004e9a:	f006 f82f 	bl	800aefc <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8004e9e:	463b      	mov	r3, r7
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	200e      	movs	r0, #14
 8004ea6:	f7ff f9c1 	bl	800422c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004eaa:	783b      	ldrb	r3, [r7, #0]
 8004eac:	461a      	mov	r2, r3
 8004eae:	f107 0308 	add.w	r3, r7, #8
 8004eb2:	4991      	ldr	r1, [pc, #580]	; (80050f8 <printRadioSettings+0x6d4>)
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f00b fae5 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004eba:	f107 0308 	add.w	r3, r7, #8
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fb f946 	bl	8000150 <strlen>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	f107 0108 	add.w	r1, r7, #8
 8004ecc:	230a      	movs	r3, #10
 8004ece:	4885      	ldr	r0, [pc, #532]	; (80050e4 <printRadioSettings+0x6c0>)
 8004ed0:	f006 f814 	bl	800aefc <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8004ed4:	463b      	mov	r3, r7
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	4619      	mov	r1, r3
 8004eda:	200f      	movs	r0, #15
 8004edc:	f7ff f9a6 	bl	800422c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004ee0:	783b      	ldrb	r3, [r7, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f107 0308 	add.w	r3, r7, #8
 8004ee8:	4984      	ldr	r1, [pc, #528]	; (80050fc <printRadioSettings+0x6d8>)
 8004eea:	4618      	mov	r0, r3
 8004eec:	f00b faca 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004ef0:	f107 0308 	add.w	r3, r7, #8
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7fb f92b 	bl	8000150 <strlen>
 8004efa:	4603      	mov	r3, r0
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	f107 0108 	add.w	r1, r7, #8
 8004f02:	230a      	movs	r3, #10
 8004f04:	4877      	ldr	r0, [pc, #476]	; (80050e4 <printRadioSettings+0x6c0>)
 8004f06:	f005 fff9 	bl	800aefc <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8004f0a:	463b      	mov	r3, r7
 8004f0c:	2205      	movs	r2, #5
 8004f0e:	4619      	mov	r1, r3
 8004f10:	2010      	movs	r0, #16
 8004f12:	f7ff f98b 	bl	800422c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8004f16:	793b      	ldrb	r3, [r7, #4]
 8004f18:	461c      	mov	r4, r3
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	461d      	mov	r5, r3
 8004f1e:	78bb      	ldrb	r3, [r7, #2]
 8004f20:	787a      	ldrb	r2, [r7, #1]
 8004f22:	7839      	ldrb	r1, [r7, #0]
 8004f24:	f107 0008 	add.w	r0, r7, #8
 8004f28:	9102      	str	r1, [sp, #8]
 8004f2a:	9201      	str	r2, [sp, #4]
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	462b      	mov	r3, r5
 8004f30:	4622      	mov	r2, r4
 8004f32:	4973      	ldr	r1, [pc, #460]	; (8005100 <printRadioSettings+0x6dc>)
 8004f34:	f00b faa6 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004f38:	f107 0308 	add.w	r3, r7, #8
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fb f907 	bl	8000150 <strlen>
 8004f42:	4603      	mov	r3, r0
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	f107 0108 	add.w	r1, r7, #8
 8004f4a:	230a      	movs	r3, #10
 8004f4c:	4865      	ldr	r0, [pc, #404]	; (80050e4 <printRadioSettings+0x6c0>)
 8004f4e:	f005 ffd5 	bl	800aefc <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8004f52:	2011      	movs	r0, #17
 8004f54:	f7ff f942 	bl	80041dc <NRF24_read_register>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004f5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004f62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f66:	f107 0308 	add.w	r3, r7, #8
 8004f6a:	4966      	ldr	r1, [pc, #408]	; (8005104 <printRadioSettings+0x6e0>)
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f00b fa89 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004f72:	f107 0308 	add.w	r3, r7, #8
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7fb f8ea 	bl	8000150 <strlen>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	f107 0108 	add.w	r1, r7, #8
 8004f84:	230a      	movs	r3, #10
 8004f86:	4857      	ldr	r0, [pc, #348]	; (80050e4 <printRadioSettings+0x6c0>)
 8004f88:	f005 ffb8 	bl	800aefc <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8004f8c:	2012      	movs	r0, #18
 8004f8e:	f7ff f925 	bl	80041dc <NRF24_read_register>
 8004f92:	4603      	mov	r3, r0
 8004f94:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004f98:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004f9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fa0:	f107 0308 	add.w	r3, r7, #8
 8004fa4:	4958      	ldr	r1, [pc, #352]	; (8005108 <printRadioSettings+0x6e4>)
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f00b fa6c 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004fac:	f107 0308 	add.w	r3, r7, #8
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fb f8cd 	bl	8000150 <strlen>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	f107 0108 	add.w	r1, r7, #8
 8004fbe:	230a      	movs	r3, #10
 8004fc0:	4848      	ldr	r0, [pc, #288]	; (80050e4 <printRadioSettings+0x6c0>)
 8004fc2:	f005 ff9b 	bl	800aefc <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8004fc6:	2013      	movs	r0, #19
 8004fc8:	f7ff f908 	bl	80041dc <NRF24_read_register>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004fd2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004fd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fda:	f107 0308 	add.w	r3, r7, #8
 8004fde:	494b      	ldr	r1, [pc, #300]	; (800510c <printRadioSettings+0x6e8>)
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f00b fa4f 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004fe6:	f107 0308 	add.w	r3, r7, #8
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fb f8b0 	bl	8000150 <strlen>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	f107 0108 	add.w	r1, r7, #8
 8004ff8:	230a      	movs	r3, #10
 8004ffa:	483a      	ldr	r0, [pc, #232]	; (80050e4 <printRadioSettings+0x6c0>)
 8004ffc:	f005 ff7e 	bl	800aefc <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8005000:	2014      	movs	r0, #20
 8005002:	f7ff f8eb 	bl	80041dc <NRF24_read_register>
 8005006:	4603      	mov	r3, r0
 8005008:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800500c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005010:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005014:	f107 0308 	add.w	r3, r7, #8
 8005018:	493d      	ldr	r1, [pc, #244]	; (8005110 <printRadioSettings+0x6ec>)
 800501a:	4618      	mov	r0, r3
 800501c:	f00b fa32 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005020:	f107 0308 	add.w	r3, r7, #8
 8005024:	4618      	mov	r0, r3
 8005026:	f7fb f893 	bl	8000150 <strlen>
 800502a:	4603      	mov	r3, r0
 800502c:	b29a      	uxth	r2, r3
 800502e:	f107 0108 	add.w	r1, r7, #8
 8005032:	230a      	movs	r3, #10
 8005034:	482b      	ldr	r0, [pc, #172]	; (80050e4 <printRadioSettings+0x6c0>)
 8005036:	f005 ff61 	bl	800aefc <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 800503a:	2015      	movs	r0, #21
 800503c:	f7ff f8ce 	bl	80041dc <NRF24_read_register>
 8005040:	4603      	mov	r3, r0
 8005042:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8005046:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800504a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800504e:	f107 0308 	add.w	r3, r7, #8
 8005052:	4930      	ldr	r1, [pc, #192]	; (8005114 <printRadioSettings+0x6f0>)
 8005054:	4618      	mov	r0, r3
 8005056:	f00b fa15 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800505a:	f107 0308 	add.w	r3, r7, #8
 800505e:	4618      	mov	r0, r3
 8005060:	f7fb f876 	bl	8000150 <strlen>
 8005064:	4603      	mov	r3, r0
 8005066:	b29a      	uxth	r2, r3
 8005068:	f107 0108 	add.w	r1, r7, #8
 800506c:	230a      	movs	r3, #10
 800506e:	481d      	ldr	r0, [pc, #116]	; (80050e4 <printRadioSettings+0x6c0>)
 8005070:	f005 ff44 	bl	800aefc <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8005074:	2016      	movs	r0, #22
 8005076:	f7ff f8b1 	bl	80041dc <NRF24_read_register>
 800507a:	4603      	mov	r3, r0
 800507c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8005080:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005084:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005088:	f107 0308 	add.w	r3, r7, #8
 800508c:	4922      	ldr	r1, [pc, #136]	; (8005118 <printRadioSettings+0x6f4>)
 800508e:	4618      	mov	r0, r3
 8005090:	f00b f9f8 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005094:	f107 0308 	add.w	r3, r7, #8
 8005098:	4618      	mov	r0, r3
 800509a:	f7fb f859 	bl	8000150 <strlen>
 800509e:	4603      	mov	r3, r0
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	f107 0108 	add.w	r1, r7, #8
 80050a6:	230a      	movs	r3, #10
 80050a8:	480e      	ldr	r0, [pc, #56]	; (80050e4 <printRadioSettings+0x6c0>)
 80050aa:	f005 ff27 	bl	800aefc <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80050ae:	201c      	movs	r0, #28
 80050b0:	f7ff f894 	bl	80041dc <NRF24_read_register>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80050ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80050be:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	bfcc      	ite	gt
 80050c6:	2301      	movgt	r3, #1
 80050c8:	2300      	movle	r3, #0
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80050ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80050d2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	bfcc      	ite	gt
 80050da:	2301      	movgt	r3, #1
 80050dc:	2300      	movle	r3, #0
 80050de:	e01d      	b.n	800511c <printRadioSettings+0x6f8>
 80050e0:	08010d8c 	.word	0x08010d8c
 80050e4:	20001690 	.word	0x20001690
 80050e8:	08010da0 	.word	0x08010da0
 80050ec:	08010dd0 	.word	0x08010dd0
 80050f0:	08010e00 	.word	0x08010e00
 80050f4:	08010e28 	.word	0x08010e28
 80050f8:	08010e50 	.word	0x08010e50
 80050fc:	08010e78 	.word	0x08010e78
 8005100:	08010ea0 	.word	0x08010ea0
 8005104:	08010ecc 	.word	0x08010ecc
 8005108:	08010ee8 	.word	0x08010ee8
 800510c:	08010f04 	.word	0x08010f04
 8005110:	08010f20 	.word	0x08010f20
 8005114:	08010f3c 	.word	0x08010f3c
 8005118:	08010f58 	.word	0x08010f58
 800511c:	b2db      	uxtb	r3, r3
 800511e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005120:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005124:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005128:	2b00      	cmp	r3, #0
 800512a:	bfcc      	ite	gt
 800512c:	2301      	movgt	r3, #1
 800512e:	2300      	movle	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005134:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005138:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800513c:	2b00      	cmp	r3, #0
 800513e:	bfcc      	ite	gt
 8005140:	2301      	movgt	r3, #1
 8005142:	2300      	movle	r3, #0
 8005144:	b2db      	uxtb	r3, r3
 8005146:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005148:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800514c:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005150:	2b00      	cmp	r3, #0
 8005152:	bfcc      	ite	gt
 8005154:	2301      	movgt	r3, #1
 8005156:	2300      	movle	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800515c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005160:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005164:	2b00      	cmp	r3, #0
 8005166:	bfcc      	ite	gt
 8005168:	2301      	movgt	r3, #1
 800516a:	2300      	movle	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	f107 0008 	add.w	r0, r7, #8
 8005172:	9303      	str	r3, [sp, #12]
 8005174:	9402      	str	r4, [sp, #8]
 8005176:	9101      	str	r1, [sp, #4]
 8005178:	9200      	str	r2, [sp, #0]
 800517a:	4633      	mov	r3, r6
 800517c:	462a      	mov	r2, r5
 800517e:	4936      	ldr	r1, [pc, #216]	; (8005258 <printRadioSettings+0x834>)
 8005180:	f00b f980 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005184:	f107 0308 	add.w	r3, r7, #8
 8005188:	4618      	mov	r0, r3
 800518a:	f7fa ffe1 	bl	8000150 <strlen>
 800518e:	4603      	mov	r3, r0
 8005190:	b29a      	uxth	r2, r3
 8005192:	f107 0108 	add.w	r1, r7, #8
 8005196:	230a      	movs	r3, #10
 8005198:	4830      	ldr	r0, [pc, #192]	; (800525c <printRadioSettings+0x838>)
 800519a:	f005 feaf 	bl	800aefc <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800519e:	201d      	movs	r0, #29
 80051a0:	f7ff f81c 	bl	80041dc <NRF24_read_register>
 80051a4:	4603      	mov	r3, r0
 80051a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80051aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d006      	beq.n	80051c4 <printRadioSettings+0x7a0>
 80051b6:	f107 0308 	add.w	r3, r7, #8
 80051ba:	4929      	ldr	r1, [pc, #164]	; (8005260 <printRadioSettings+0x83c>)
 80051bc:	4618      	mov	r0, r3
 80051be:	f00b f961 	bl	8010484 <siprintf>
 80051c2:	e005      	b.n	80051d0 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80051c4:	f107 0308 	add.w	r3, r7, #8
 80051c8:	4926      	ldr	r1, [pc, #152]	; (8005264 <printRadioSettings+0x840>)
 80051ca:	4618      	mov	r0, r3
 80051cc:	f00b f95a 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80051d0:	f107 0308 	add.w	r3, r7, #8
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7fa ffbb 	bl	8000150 <strlen>
 80051da:	4603      	mov	r3, r0
 80051dc:	b29a      	uxth	r2, r3
 80051de:	f107 0108 	add.w	r1, r7, #8
 80051e2:	230a      	movs	r3, #10
 80051e4:	481d      	ldr	r0, [pc, #116]	; (800525c <printRadioSettings+0x838>)
 80051e6:	f005 fe89 	bl	800aefc <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80051ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d006      	beq.n	8005204 <printRadioSettings+0x7e0>
 80051f6:	f107 0308 	add.w	r3, r7, #8
 80051fa:	491b      	ldr	r1, [pc, #108]	; (8005268 <printRadioSettings+0x844>)
 80051fc:	4618      	mov	r0, r3
 80051fe:	f00b f941 	bl	8010484 <siprintf>
 8005202:	e005      	b.n	8005210 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8005204:	f107 0308 	add.w	r3, r7, #8
 8005208:	4918      	ldr	r1, [pc, #96]	; (800526c <printRadioSettings+0x848>)
 800520a:	4618      	mov	r0, r3
 800520c:	f00b f93a 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005210:	f107 0308 	add.w	r3, r7, #8
 8005214:	4618      	mov	r0, r3
 8005216:	f7fa ff9b 	bl	8000150 <strlen>
 800521a:	4603      	mov	r3, r0
 800521c:	b29a      	uxth	r2, r3
 800521e:	f107 0108 	add.w	r1, r7, #8
 8005222:	230a      	movs	r3, #10
 8005224:	480d      	ldr	r0, [pc, #52]	; (800525c <printRadioSettings+0x838>)
 8005226:	f005 fe69 	bl	800aefc <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800522a:	f107 0308 	add.w	r3, r7, #8
 800522e:	4910      	ldr	r1, [pc, #64]	; (8005270 <printRadioSettings+0x84c>)
 8005230:	4618      	mov	r0, r3
 8005232:	f00b f927 	bl	8010484 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005236:	f107 0308 	add.w	r3, r7, #8
 800523a:	4618      	mov	r0, r3
 800523c:	f7fa ff88 	bl	8000150 <strlen>
 8005240:	4603      	mov	r3, r0
 8005242:	b29a      	uxth	r2, r3
 8005244:	f107 0108 	add.w	r1, r7, #8
 8005248:	230a      	movs	r3, #10
 800524a:	4804      	ldr	r0, [pc, #16]	; (800525c <printRadioSettings+0x838>)
 800524c:	f005 fe56 	bl	800aefc <HAL_UART_Transmit>
}
 8005250:	bf00      	nop
 8005252:	3774      	adds	r7, #116	; 0x74
 8005254:	46bd      	mov	sp, r7
 8005256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005258:	08010f74 	.word	0x08010f74
 800525c:	20001690 	.word	0x20001690
 8005260:	08010fc0 	.word	0x08010fc0
 8005264:	08010fd8 	.word	0x08010fd8
 8005268:	08010ff0 	.word	0x08010ff0
 800526c:	0801100c 	.word	0x0801100c
 8005270:	08010be0 	.word	0x08010be0

08005274 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8005274:	b084      	sub	sp, #16
 8005276:	b4b0      	push	{r4, r5, r7}
 8005278:	af00      	add	r7, sp, #0
 800527a:	f107 040c 	add.w	r4, r7, #12
 800527e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8005282:	4b09      	ldr	r3, [pc, #36]	; (80052a8 <nrf24_DebugUART_Init+0x34>)
 8005284:	461d      	mov	r5, r3
 8005286:	f107 040c 	add.w	r4, r7, #12
 800528a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800528c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800528e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005294:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005296:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800529a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800529e:	bf00      	nop
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bcb0      	pop	{r4, r5, r7}
 80052a4:	b004      	add	sp, #16
 80052a6:	4770      	bx	lr
 80052a8:	20001690 	.word	0x20001690

080052ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80052b0:	4b17      	ldr	r3, [pc, #92]	; (8005310 <MX_SPI1_Init+0x64>)
 80052b2:	4a18      	ldr	r2, [pc, #96]	; (8005314 <MX_SPI1_Init+0x68>)
 80052b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80052b6:	4b16      	ldr	r3, [pc, #88]	; (8005310 <MX_SPI1_Init+0x64>)
 80052b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80052bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80052be:	4b14      	ldr	r3, [pc, #80]	; (8005310 <MX_SPI1_Init+0x64>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80052c4:	4b12      	ldr	r3, [pc, #72]	; (8005310 <MX_SPI1_Init+0x64>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80052ca:	4b11      	ldr	r3, [pc, #68]	; (8005310 <MX_SPI1_Init+0x64>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80052d0:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <MX_SPI1_Init+0x64>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80052d6:	4b0e      	ldr	r3, [pc, #56]	; (8005310 <MX_SPI1_Init+0x64>)
 80052d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80052de:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <MX_SPI1_Init+0x64>)
 80052e0:	2220      	movs	r2, #32
 80052e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80052e4:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <MX_SPI1_Init+0x64>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80052ea:	4b09      	ldr	r3, [pc, #36]	; (8005310 <MX_SPI1_Init+0x64>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052f0:	4b07      	ldr	r3, [pc, #28]	; (8005310 <MX_SPI1_Init+0x64>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80052f6:	4b06      	ldr	r3, [pc, #24]	; (8005310 <MX_SPI1_Init+0x64>)
 80052f8:	220a      	movs	r2, #10
 80052fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80052fc:	4804      	ldr	r0, [pc, #16]	; (8005310 <MX_SPI1_Init+0x64>)
 80052fe:	f003 fc55 	bl	8008bac <HAL_SPI_Init>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005308:	f7fe fec8 	bl	800409c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800530c:	bf00      	nop
 800530e:	bd80      	pop	{r7, pc}
 8005310:	2000173c 	.word	0x2000173c
 8005314:	40013000 	.word	0x40013000

08005318 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b088      	sub	sp, #32
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005320:	f107 0310 	add.w	r3, r7, #16
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	605a      	str	r2, [r3, #4]
 800532a:	609a      	str	r2, [r3, #8]
 800532c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a1b      	ldr	r2, [pc, #108]	; (80053a0 <HAL_SPI_MspInit+0x88>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d12f      	bne.n	8005398 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005338:	4b1a      	ldr	r3, [pc, #104]	; (80053a4 <HAL_SPI_MspInit+0x8c>)
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	4a19      	ldr	r2, [pc, #100]	; (80053a4 <HAL_SPI_MspInit+0x8c>)
 800533e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005342:	6193      	str	r3, [r2, #24]
 8005344:	4b17      	ldr	r3, [pc, #92]	; (80053a4 <HAL_SPI_MspInit+0x8c>)
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005350:	4b14      	ldr	r3, [pc, #80]	; (80053a4 <HAL_SPI_MspInit+0x8c>)
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	4a13      	ldr	r2, [pc, #76]	; (80053a4 <HAL_SPI_MspInit+0x8c>)
 8005356:	f043 0304 	orr.w	r3, r3, #4
 800535a:	6193      	str	r3, [r2, #24]
 800535c:	4b11      	ldr	r3, [pc, #68]	; (80053a4 <HAL_SPI_MspInit+0x8c>)
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	60bb      	str	r3, [r7, #8]
 8005366:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005368:	23a0      	movs	r3, #160	; 0xa0
 800536a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800536c:	2302      	movs	r3, #2
 800536e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005370:	2303      	movs	r3, #3
 8005372:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005374:	f107 0310 	add.w	r3, r7, #16
 8005378:	4619      	mov	r1, r3
 800537a:	480b      	ldr	r0, [pc, #44]	; (80053a8 <HAL_SPI_MspInit+0x90>)
 800537c:	f001 f998 	bl	80066b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005380:	2340      	movs	r3, #64	; 0x40
 8005382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005384:	2300      	movs	r3, #0
 8005386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005388:	2300      	movs	r3, #0
 800538a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800538c:	f107 0310 	add.w	r3, r7, #16
 8005390:	4619      	mov	r1, r3
 8005392:	4805      	ldr	r0, [pc, #20]	; (80053a8 <HAL_SPI_MspInit+0x90>)
 8005394:	f001 f98c 	bl	80066b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005398:	bf00      	nop
 800539a:	3720      	adds	r7, #32
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40013000 	.word	0x40013000
 80053a4:	40021000 	.word	0x40021000
 80053a8:	40010800 	.word	0x40010800

080053ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80053b2:	4b15      	ldr	r3, [pc, #84]	; (8005408 <HAL_MspInit+0x5c>)
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	4a14      	ldr	r2, [pc, #80]	; (8005408 <HAL_MspInit+0x5c>)
 80053b8:	f043 0301 	orr.w	r3, r3, #1
 80053bc:	6193      	str	r3, [r2, #24]
 80053be:	4b12      	ldr	r3, [pc, #72]	; (8005408 <HAL_MspInit+0x5c>)
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	60bb      	str	r3, [r7, #8]
 80053c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053ca:	4b0f      	ldr	r3, [pc, #60]	; (8005408 <HAL_MspInit+0x5c>)
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	4a0e      	ldr	r2, [pc, #56]	; (8005408 <HAL_MspInit+0x5c>)
 80053d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053d4:	61d3      	str	r3, [r2, #28]
 80053d6:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <HAL_MspInit+0x5c>)
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053de:	607b      	str	r3, [r7, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80053e2:	4b0a      	ldr	r3, [pc, #40]	; (800540c <HAL_MspInit+0x60>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	4a04      	ldr	r2, [pc, #16]	; (800540c <HAL_MspInit+0x60>)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053fe:	bf00      	nop
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr
 8005408:	40021000 	.word	0x40021000
 800540c:	40010000 	.word	0x40010000

08005410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005414:	e7fe      	b.n	8005414 <NMI_Handler+0x4>
	...

08005418 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 800541c:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <HardFault_Handler+0x30>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005424:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8005426:	4b08      	ldr	r3, [pc, #32]	; (8005448 <HardFault_Handler+0x30>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800542e:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8005430:	4b05      	ldr	r3, [pc, #20]	; (8005448 <HardFault_Handler+0x30>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005438:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 800543a:	4b03      	ldr	r3, [pc, #12]	; (8005448 <HardFault_Handler+0x30>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005442:	641a      	str	r2, [r3, #64]	; 0x40

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005444:	e7fe      	b.n	8005444 <HardFault_Handler+0x2c>
 8005446:	bf00      	nop
 8005448:	20001824 	.word	0x20001824

0800544c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005450:	e7fe      	b.n	8005450 <MemManage_Handler+0x4>

08005452 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005452:	b480      	push	{r7}
 8005454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005456:	e7fe      	b.n	8005456 <BusFault_Handler+0x4>

08005458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800545c:	e7fe      	b.n	800545c <UsageFault_Handler+0x4>

0800545e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800545e:	b480      	push	{r7}
 8005460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005462:	bf00      	nop
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr

0800546a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800546a:	b480      	push	{r7}
 800546c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800546e:	bf00      	nop
 8005470:	46bd      	mov	sp, r7
 8005472:	bc80      	pop	{r7}
 8005474:	4770      	bx	lr

08005476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005476:	b480      	push	{r7}
 8005478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800547a:	bf00      	nop
 800547c:	46bd      	mov	sp, r7
 800547e:	bc80      	pop	{r7}
 8005480:	4770      	bx	lr
	...

08005484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(timeout >0)  timeout--;
 8005488:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <SysTick_Handler+0x24>)
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d006      	beq.n	80054a0 <SysTick_Handler+0x1c>
 8005492:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <SysTick_Handler+0x24>)
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	4b02      	ldr	r3, [pc, #8]	; (80054a8 <SysTick_Handler+0x24>)
 800549e:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054a0:	f000 fd54 	bl	8005f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054a4:	bf00      	nop
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	200016e4 	.word	0x200016e4

080054ac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80054b0:	4802      	ldr	r0, [pc, #8]	; (80054bc <DMA1_Channel5_IRQHandler+0x10>)
 80054b2:	f000 ffc9 	bl	8006448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80054b6:	bf00      	nop
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	20001938 	.word	0x20001938

080054c0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80054c4:	4802      	ldr	r0, [pc, #8]	; (80054d0 <DMA1_Channel6_IRQHandler+0x10>)
 80054c6:	f000 ffbf 	bl	8006448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80054ca:	bf00      	nop
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	200018b4 	.word	0x200018b4

080054d4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80054d8:	4802      	ldr	r0, [pc, #8]	; (80054e4 <DMA1_Channel7_IRQHandler+0x10>)
 80054da:	f000 ffb5 	bl	8006448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80054de:	bf00      	nop
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	2000197c 	.word	0x2000197c

080054e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80054ec:	4802      	ldr	r0, [pc, #8]	; (80054f8 <TIM2_IRQHandler+0x10>)
 80054ee:	f004 fc05 	bl	8009cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80054f2:	bf00      	nop
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	2000186c 	.word	0x2000186c

080054fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005500:	4802      	ldr	r0, [pc, #8]	; (800550c <TIM3_IRQHandler+0x10>)
 8005502:	f004 fbfb 	bl	8009cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005506:	bf00      	nop
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	200017dc 	.word	0x200017dc

08005510 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005514:	4802      	ldr	r0, [pc, #8]	; (8005520 <USART2_IRQHandler+0x10>)
 8005516:	f005 fe6f 	bl	800b1f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800551a:	bf00      	nop
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	20001a00 	.word	0x20001a00

08005524 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	  Uart_isr (&huart3);
 8005528:	4803      	ldr	r0, [pc, #12]	; (8005538 <USART3_IRQHandler+0x14>)
 800552a:	f7fb ff29 	bl	8001380 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800552e:	4802      	ldr	r0, [pc, #8]	; (8005538 <USART3_IRQHandler+0x14>)
 8005530:	f005 fe62 	bl	800b1f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005534:	bf00      	nop
 8005536:	bd80      	pop	{r7, pc}
 8005538:	200018f8 	.word	0x200018f8

0800553c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005544:	4a14      	ldr	r2, [pc, #80]	; (8005598 <_sbrk+0x5c>)
 8005546:	4b15      	ldr	r3, [pc, #84]	; (800559c <_sbrk+0x60>)
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005550:	4b13      	ldr	r3, [pc, #76]	; (80055a0 <_sbrk+0x64>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d102      	bne.n	800555e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005558:	4b11      	ldr	r3, [pc, #68]	; (80055a0 <_sbrk+0x64>)
 800555a:	4a12      	ldr	r2, [pc, #72]	; (80055a4 <_sbrk+0x68>)
 800555c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800555e:	4b10      	ldr	r3, [pc, #64]	; (80055a0 <_sbrk+0x64>)
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4413      	add	r3, r2
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	429a      	cmp	r2, r3
 800556a:	d207      	bcs.n	800557c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800556c:	f00a fe94 	bl	8010298 <__errno>
 8005570:	4603      	mov	r3, r0
 8005572:	220c      	movs	r2, #12
 8005574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005576:	f04f 33ff 	mov.w	r3, #4294967295
 800557a:	e009      	b.n	8005590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800557c:	4b08      	ldr	r3, [pc, #32]	; (80055a0 <_sbrk+0x64>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005582:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <_sbrk+0x64>)
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4413      	add	r3, r2
 800558a:	4a05      	ldr	r2, [pc, #20]	; (80055a0 <_sbrk+0x64>)
 800558c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800558e:	68fb      	ldr	r3, [r7, #12]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	20005000 	.word	0x20005000
 800559c:	00000400 	.word	0x00000400
 80055a0:	200016d0 	.word	0x200016d0
 80055a4:	20001a58 	.word	0x20001a58

080055a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055ac:	bf00      	nop
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr

080055b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b092      	sub	sp, #72	; 0x48
 80055b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80055c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	605a      	str	r2, [r3, #4]
 80055ce:	609a      	str	r2, [r3, #8]
 80055d0:	60da      	str	r2, [r3, #12]
 80055d2:	611a      	str	r2, [r3, #16]
 80055d4:	615a      	str	r2, [r3, #20]
 80055d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80055d8:	1d3b      	adds	r3, r7, #4
 80055da:	2220      	movs	r2, #32
 80055dc:	2100      	movs	r1, #0
 80055de:	4618      	mov	r0, r3
 80055e0:	f00a fe92 	bl	8010308 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80055e4:	4b45      	ldr	r3, [pc, #276]	; (80056fc <MX_TIM1_Init+0x148>)
 80055e6:	4a46      	ldr	r2, [pc, #280]	; (8005700 <MX_TIM1_Init+0x14c>)
 80055e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80055ea:	4b44      	ldr	r3, [pc, #272]	; (80056fc <MX_TIM1_Init+0x148>)
 80055ec:	2247      	movs	r2, #71	; 0x47
 80055ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055f0:	4b42      	ldr	r3, [pc, #264]	; (80056fc <MX_TIM1_Init+0x148>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80055f6:	4b41      	ldr	r3, [pc, #260]	; (80056fc <MX_TIM1_Init+0x148>)
 80055f8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80055fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055fe:	4b3f      	ldr	r3, [pc, #252]	; (80056fc <MX_TIM1_Init+0x148>)
 8005600:	2200      	movs	r2, #0
 8005602:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005604:	4b3d      	ldr	r3, [pc, #244]	; (80056fc <MX_TIM1_Init+0x148>)
 8005606:	2200      	movs	r2, #0
 8005608:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800560a:	4b3c      	ldr	r3, [pc, #240]	; (80056fc <MX_TIM1_Init+0x148>)
 800560c:	2200      	movs	r2, #0
 800560e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005610:	483a      	ldr	r0, [pc, #232]	; (80056fc <MX_TIM1_Init+0x148>)
 8005612:	f004 f923 	bl	800985c <HAL_TIM_PWM_Init>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800561c:	f7fe fd3e 	bl	800409c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005620:	2300      	movs	r3, #0
 8005622:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005624:	2300      	movs	r3, #0
 8005626:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005628:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800562c:	4619      	mov	r1, r3
 800562e:	4833      	ldr	r0, [pc, #204]	; (80056fc <MX_TIM1_Init+0x148>)
 8005630:	f005 fb32 	bl	800ac98 <HAL_TIMEx_MasterConfigSynchronization>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800563a:	f7fe fd2f 	bl	800409c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800563e:	2360      	movs	r3, #96	; 0x60
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005642:	2300      	movs	r3, #0
 8005644:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005646:	2300      	movs	r3, #0
 8005648:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800564a:	2300      	movs	r3, #0
 800564c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800564e:	2300      	movs	r3, #0
 8005650:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005652:	2300      	movs	r3, #0
 8005654:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005656:	2300      	movs	r3, #0
 8005658:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800565a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800565e:	2200      	movs	r2, #0
 8005660:	4619      	mov	r1, r3
 8005662:	4826      	ldr	r0, [pc, #152]	; (80056fc <MX_TIM1_Init+0x148>)
 8005664:	f004 fce6 	bl	800a034 <HAL_TIM_PWM_ConfigChannel>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800566e:	f7fe fd15 	bl	800409c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005676:	2204      	movs	r2, #4
 8005678:	4619      	mov	r1, r3
 800567a:	4820      	ldr	r0, [pc, #128]	; (80056fc <MX_TIM1_Init+0x148>)
 800567c:	f004 fcda 	bl	800a034 <HAL_TIM_PWM_ConfigChannel>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8005686:	f7fe fd09 	bl	800409c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800568a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800568e:	2208      	movs	r2, #8
 8005690:	4619      	mov	r1, r3
 8005692:	481a      	ldr	r0, [pc, #104]	; (80056fc <MX_TIM1_Init+0x148>)
 8005694:	f004 fcce 	bl	800a034 <HAL_TIM_PWM_ConfigChannel>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800569e:	f7fe fcfd 	bl	800409c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80056a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056a6:	220c      	movs	r2, #12
 80056a8:	4619      	mov	r1, r3
 80056aa:	4814      	ldr	r0, [pc, #80]	; (80056fc <MX_TIM1_Init+0x148>)
 80056ac:	f004 fcc2 	bl	800a034 <HAL_TIM_PWM_ConfigChannel>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80056b6:	f7fe fcf1 	bl	800409c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80056ba:	2300      	movs	r3, #0
 80056bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80056be:	2300      	movs	r3, #0
 80056c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80056ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80056d4:	2300      	movs	r3, #0
 80056d6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80056d8:	1d3b      	adds	r3, r7, #4
 80056da:	4619      	mov	r1, r3
 80056dc:	4807      	ldr	r0, [pc, #28]	; (80056fc <MX_TIM1_Init+0x148>)
 80056de:	f005 fb39 	bl	800ad54 <HAL_TIMEx_ConfigBreakDeadTime>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80056e8:	f7fe fcd8 	bl	800409c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80056ec:	4803      	ldr	r0, [pc, #12]	; (80056fc <MX_TIM1_Init+0x148>)
 80056ee:	f000 f9a5 	bl	8005a3c <HAL_TIM_MspPostInit>

}
 80056f2:	bf00      	nop
 80056f4:	3748      	adds	r7, #72	; 0x48
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20001824 	.word	0x20001824
 8005700:	40012c00 	.word	0x40012c00

08005704 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800570a:	f107 0308 	add.w	r3, r7, #8
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	605a      	str	r2, [r3, #4]
 8005714:	609a      	str	r2, [r3, #8]
 8005716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005718:	463b      	mov	r3, r7
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005720:	4b1d      	ldr	r3, [pc, #116]	; (8005798 <MX_TIM2_Init+0x94>)
 8005722:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005726:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8005728:	4b1b      	ldr	r3, [pc, #108]	; (8005798 <MX_TIM2_Init+0x94>)
 800572a:	2247      	movs	r2, #71	; 0x47
 800572c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800572e:	4b1a      	ldr	r3, [pc, #104]	; (8005798 <MX_TIM2_Init+0x94>)
 8005730:	2200      	movs	r2, #0
 8005732:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8005734:	4b18      	ldr	r3, [pc, #96]	; (8005798 <MX_TIM2_Init+0x94>)
 8005736:	f241 3288 	movw	r2, #5000	; 0x1388
 800573a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800573c:	4b16      	ldr	r3, [pc, #88]	; (8005798 <MX_TIM2_Init+0x94>)
 800573e:	2200      	movs	r2, #0
 8005740:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005742:	4b15      	ldr	r3, [pc, #84]	; (8005798 <MX_TIM2_Init+0x94>)
 8005744:	2200      	movs	r2, #0
 8005746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005748:	4813      	ldr	r0, [pc, #76]	; (8005798 <MX_TIM2_Init+0x94>)
 800574a:	f003 ff9b 	bl	8009684 <HAL_TIM_Base_Init>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005754:	f7fe fca2 	bl	800409c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800575c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800575e:	f107 0308 	add.w	r3, r7, #8
 8005762:	4619      	mov	r1, r3
 8005764:	480c      	ldr	r0, [pc, #48]	; (8005798 <MX_TIM2_Init+0x94>)
 8005766:	f004 fd23 	bl	800a1b0 <HAL_TIM_ConfigClockSource>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005770:	f7fe fc94 	bl	800409c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005774:	2300      	movs	r3, #0
 8005776:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005778:	2300      	movs	r3, #0
 800577a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800577c:	463b      	mov	r3, r7
 800577e:	4619      	mov	r1, r3
 8005780:	4805      	ldr	r0, [pc, #20]	; (8005798 <MX_TIM2_Init+0x94>)
 8005782:	f005 fa89 	bl	800ac98 <HAL_TIMEx_MasterConfigSynchronization>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800578c:	f7fe fc86 	bl	800409c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005790:	bf00      	nop
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	2000186c 	.word	0x2000186c

0800579c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08a      	sub	sp, #40	; 0x28
 80057a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80057a2:	f107 0318 	add.w	r3, r7, #24
 80057a6:	2200      	movs	r2, #0
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	605a      	str	r2, [r3, #4]
 80057ac:	609a      	str	r2, [r3, #8]
 80057ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057b0:	f107 0310 	add.w	r3, r7, #16
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80057ba:	463b      	mov	r3, r7
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	605a      	str	r2, [r3, #4]
 80057c2:	609a      	str	r2, [r3, #8]
 80057c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80057c6:	4b2b      	ldr	r3, [pc, #172]	; (8005874 <MX_TIM3_Init+0xd8>)
 80057c8:	4a2b      	ldr	r2, [pc, #172]	; (8005878 <MX_TIM3_Init+0xdc>)
 80057ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80057cc:	4b29      	ldr	r3, [pc, #164]	; (8005874 <MX_TIM3_Init+0xd8>)
 80057ce:	2247      	movs	r2, #71	; 0x47
 80057d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057d2:	4b28      	ldr	r3, [pc, #160]	; (8005874 <MX_TIM3_Init+0xd8>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80057d8:	4b26      	ldr	r3, [pc, #152]	; (8005874 <MX_TIM3_Init+0xd8>)
 80057da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057e0:	4b24      	ldr	r3, [pc, #144]	; (8005874 <MX_TIM3_Init+0xd8>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057e6:	4b23      	ldr	r3, [pc, #140]	; (8005874 <MX_TIM3_Init+0xd8>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80057ec:	4821      	ldr	r0, [pc, #132]	; (8005874 <MX_TIM3_Init+0xd8>)
 80057ee:	f003 ff49 	bl	8009684 <HAL_TIM_Base_Init>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80057f8:	f7fe fc50 	bl	800409c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005800:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005802:	f107 0318 	add.w	r3, r7, #24
 8005806:	4619      	mov	r1, r3
 8005808:	481a      	ldr	r0, [pc, #104]	; (8005874 <MX_TIM3_Init+0xd8>)
 800580a:	f004 fcd1 	bl	800a1b0 <HAL_TIM_ConfigClockSource>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8005814:	f7fe fc42 	bl	800409c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8005818:	4816      	ldr	r0, [pc, #88]	; (8005874 <MX_TIM3_Init+0xd8>)
 800581a:	f004 f911 	bl	8009a40 <HAL_TIM_IC_Init>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8005824:	f7fe fc3a 	bl	800409c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005828:	2300      	movs	r3, #0
 800582a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005830:	f107 0310 	add.w	r3, r7, #16
 8005834:	4619      	mov	r1, r3
 8005836:	480f      	ldr	r0, [pc, #60]	; (8005874 <MX_TIM3_Init+0xd8>)
 8005838:	f005 fa2e 	bl	800ac98 <HAL_TIMEx_MasterConfigSynchronization>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8005842:	f7fe fc2b 	bl	800409c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005846:	2300      	movs	r3, #0
 8005848:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800584a:	2301      	movs	r3, #1
 800584c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800584e:	2300      	movs	r3, #0
 8005850:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8005856:	463b      	mov	r3, r7
 8005858:	2208      	movs	r2, #8
 800585a:	4619      	mov	r1, r3
 800585c:	4805      	ldr	r0, [pc, #20]	; (8005874 <MX_TIM3_Init+0xd8>)
 800585e:	f004 fb55 	bl	8009f0c <HAL_TIM_IC_ConfigChannel>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8005868:	f7fe fc18 	bl	800409c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800586c:	bf00      	nop
 800586e:	3728      	adds	r7, #40	; 0x28
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	200017dc 	.word	0x200017dc
 8005878:	40000400 	.word	0x40000400

0800587c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005882:	f107 0308 	add.w	r3, r7, #8
 8005886:	2200      	movs	r2, #0
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	605a      	str	r2, [r3, #4]
 800588c:	609a      	str	r2, [r3, #8]
 800588e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005890:	463b      	mov	r3, r7
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005898:	4b1d      	ldr	r3, [pc, #116]	; (8005910 <MX_TIM4_Init+0x94>)
 800589a:	4a1e      	ldr	r2, [pc, #120]	; (8005914 <MX_TIM4_Init+0x98>)
 800589c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 800589e:	4b1c      	ldr	r3, [pc, #112]	; (8005910 <MX_TIM4_Init+0x94>)
 80058a0:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80058a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058a6:	4b1a      	ldr	r3, [pc, #104]	; (8005910 <MX_TIM4_Init+0x94>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80058ac:	4b18      	ldr	r3, [pc, #96]	; (8005910 <MX_TIM4_Init+0x94>)
 80058ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058b4:	4b16      	ldr	r3, [pc, #88]	; (8005910 <MX_TIM4_Init+0x94>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058ba:	4b15      	ldr	r3, [pc, #84]	; (8005910 <MX_TIM4_Init+0x94>)
 80058bc:	2200      	movs	r2, #0
 80058be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80058c0:	4813      	ldr	r0, [pc, #76]	; (8005910 <MX_TIM4_Init+0x94>)
 80058c2:	f003 fedf 	bl	8009684 <HAL_TIM_Base_Init>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80058cc:	f7fe fbe6 	bl	800409c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80058d6:	f107 0308 	add.w	r3, r7, #8
 80058da:	4619      	mov	r1, r3
 80058dc:	480c      	ldr	r0, [pc, #48]	; (8005910 <MX_TIM4_Init+0x94>)
 80058de:	f004 fc67 	bl	800a1b0 <HAL_TIM_ConfigClockSource>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80058e8:	f7fe fbd8 	bl	800409c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058ec:	2300      	movs	r3, #0
 80058ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058f0:	2300      	movs	r3, #0
 80058f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80058f4:	463b      	mov	r3, r7
 80058f6:	4619      	mov	r1, r3
 80058f8:	4805      	ldr	r0, [pc, #20]	; (8005910 <MX_TIM4_Init+0x94>)
 80058fa:	f005 f9cd 	bl	800ac98 <HAL_TIMEx_MasterConfigSynchronization>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8005904:	f7fe fbca 	bl	800409c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005908:	bf00      	nop
 800590a:	3718      	adds	r7, #24
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20001794 	.word	0x20001794
 8005914:	40000800 	.word	0x40000800

08005918 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a09      	ldr	r2, [pc, #36]	; (800594c <HAL_TIM_PWM_MspInit+0x34>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d10b      	bne.n	8005942 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800592a:	4b09      	ldr	r3, [pc, #36]	; (8005950 <HAL_TIM_PWM_MspInit+0x38>)
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	4a08      	ldr	r2, [pc, #32]	; (8005950 <HAL_TIM_PWM_MspInit+0x38>)
 8005930:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005934:	6193      	str	r3, [r2, #24]
 8005936:	4b06      	ldr	r3, [pc, #24]	; (8005950 <HAL_TIM_PWM_MspInit+0x38>)
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005942:	bf00      	nop
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	bc80      	pop	{r7}
 800594a:	4770      	bx	lr
 800594c:	40012c00 	.word	0x40012c00
 8005950:	40021000 	.word	0x40021000

08005954 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b08a      	sub	sp, #40	; 0x28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800595c:	f107 0318 	add.w	r3, r7, #24
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	605a      	str	r2, [r3, #4]
 8005966:	609a      	str	r2, [r3, #8]
 8005968:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005972:	d114      	bne.n	800599e <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005974:	4b2d      	ldr	r3, [pc, #180]	; (8005a2c <HAL_TIM_Base_MspInit+0xd8>)
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	4a2c      	ldr	r2, [pc, #176]	; (8005a2c <HAL_TIM_Base_MspInit+0xd8>)
 800597a:	f043 0301 	orr.w	r3, r3, #1
 800597e:	61d3      	str	r3, [r2, #28]
 8005980:	4b2a      	ldr	r3, [pc, #168]	; (8005a2c <HAL_TIM_Base_MspInit+0xd8>)
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	617b      	str	r3, [r7, #20]
 800598a:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800598c:	2200      	movs	r2, #0
 800598e:	2101      	movs	r1, #1
 8005990:	201c      	movs	r0, #28
 8005992:	f000 fbf2 	bl	800617a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005996:	201c      	movs	r0, #28
 8005998:	f000 fc0b 	bl	80061b2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800599c:	e042      	b.n	8005a24 <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM3)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a23      	ldr	r2, [pc, #140]	; (8005a30 <HAL_TIM_Base_MspInit+0xdc>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d12c      	bne.n	8005a02 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80059a8:	4b20      	ldr	r3, [pc, #128]	; (8005a2c <HAL_TIM_Base_MspInit+0xd8>)
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	4a1f      	ldr	r2, [pc, #124]	; (8005a2c <HAL_TIM_Base_MspInit+0xd8>)
 80059ae:	f043 0302 	orr.w	r3, r3, #2
 80059b2:	61d3      	str	r3, [r2, #28]
 80059b4:	4b1d      	ldr	r3, [pc, #116]	; (8005a2c <HAL_TIM_Base_MspInit+0xd8>)
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059c0:	4b1a      	ldr	r3, [pc, #104]	; (8005a2c <HAL_TIM_Base_MspInit+0xd8>)
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	4a19      	ldr	r2, [pc, #100]	; (8005a2c <HAL_TIM_Base_MspInit+0xd8>)
 80059c6:	f043 0308 	orr.w	r3, r3, #8
 80059ca:	6193      	str	r3, [r2, #24]
 80059cc:	4b17      	ldr	r3, [pc, #92]	; (8005a2c <HAL_TIM_Base_MspInit+0xd8>)
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80059d8:	2301      	movs	r3, #1
 80059da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80059dc:	2300      	movs	r3, #0
 80059de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059e0:	2300      	movs	r3, #0
 80059e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059e4:	f107 0318 	add.w	r3, r7, #24
 80059e8:	4619      	mov	r1, r3
 80059ea:	4812      	ldr	r0, [pc, #72]	; (8005a34 <HAL_TIM_Base_MspInit+0xe0>)
 80059ec:	f000 fe60 	bl	80066b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80059f0:	2200      	movs	r2, #0
 80059f2:	2100      	movs	r1, #0
 80059f4:	201d      	movs	r0, #29
 80059f6:	f000 fbc0 	bl	800617a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80059fa:	201d      	movs	r0, #29
 80059fc:	f000 fbd9 	bl	80061b2 <HAL_NVIC_EnableIRQ>
}
 8005a00:	e010      	b.n	8005a24 <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM4)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a0c      	ldr	r2, [pc, #48]	; (8005a38 <HAL_TIM_Base_MspInit+0xe4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d10b      	bne.n	8005a24 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005a0c:	4b07      	ldr	r3, [pc, #28]	; (8005a2c <HAL_TIM_Base_MspInit+0xd8>)
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	4a06      	ldr	r2, [pc, #24]	; (8005a2c <HAL_TIM_Base_MspInit+0xd8>)
 8005a12:	f043 0304 	orr.w	r3, r3, #4
 8005a16:	61d3      	str	r3, [r2, #28]
 8005a18:	4b04      	ldr	r3, [pc, #16]	; (8005a2c <HAL_TIM_Base_MspInit+0xd8>)
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	60bb      	str	r3, [r7, #8]
 8005a22:	68bb      	ldr	r3, [r7, #8]
}
 8005a24:	bf00      	nop
 8005a26:	3728      	adds	r7, #40	; 0x28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	40000400 	.word	0x40000400
 8005a34:	40010c00 	.word	0x40010c00
 8005a38:	40000800 	.word	0x40000800

08005a3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b088      	sub	sp, #32
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a44:	f107 0310 	add.w	r3, r7, #16
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	605a      	str	r2, [r3, #4]
 8005a4e:	609a      	str	r2, [r3, #8]
 8005a50:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a1c      	ldr	r2, [pc, #112]	; (8005ac8 <HAL_TIM_MspPostInit+0x8c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d131      	bne.n	8005ac0 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a5c:	4b1b      	ldr	r3, [pc, #108]	; (8005acc <HAL_TIM_MspPostInit+0x90>)
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	4a1a      	ldr	r2, [pc, #104]	; (8005acc <HAL_TIM_MspPostInit+0x90>)
 8005a62:	f043 0308 	orr.w	r3, r3, #8
 8005a66:	6193      	str	r3, [r2, #24]
 8005a68:	4b18      	ldr	r3, [pc, #96]	; (8005acc <HAL_TIM_MspPostInit+0x90>)
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	f003 0308 	and.w	r3, r3, #8
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a74:	4b15      	ldr	r3, [pc, #84]	; (8005acc <HAL_TIM_MspPostInit+0x90>)
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	4a14      	ldr	r2, [pc, #80]	; (8005acc <HAL_TIM_MspPostInit+0x90>)
 8005a7a:	f043 0304 	orr.w	r3, r3, #4
 8005a7e:	6193      	str	r3, [r2, #24]
 8005a80:	4b12      	ldr	r3, [pc, #72]	; (8005acc <HAL_TIM_MspPostInit+0x90>)
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	60bb      	str	r3, [r7, #8]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005a8c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005a90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a92:	2302      	movs	r3, #2
 8005a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a96:	2302      	movs	r3, #2
 8005a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a9a:	f107 0310 	add.w	r3, r7, #16
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	480b      	ldr	r0, [pc, #44]	; (8005ad0 <HAL_TIM_MspPostInit+0x94>)
 8005aa2:	f000 fe05 	bl	80066b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8005aa6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8005aaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aac:	2302      	movs	r3, #2
 8005aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ab4:	f107 0310 	add.w	r3, r7, #16
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4806      	ldr	r0, [pc, #24]	; (8005ad4 <HAL_TIM_MspPostInit+0x98>)
 8005abc:	f000 fdf8 	bl	80066b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005ac0:	bf00      	nop
 8005ac2:	3720      	adds	r7, #32
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	40012c00 	.word	0x40012c00
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	40010c00 	.word	0x40010c00
 8005ad4:	40010800 	.word	0x40010800

08005ad8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005adc:	4b11      	ldr	r3, [pc, #68]	; (8005b24 <MX_USART1_UART_Init+0x4c>)
 8005ade:	4a12      	ldr	r2, [pc, #72]	; (8005b28 <MX_USART1_UART_Init+0x50>)
 8005ae0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8005ae2:	4b10      	ldr	r3, [pc, #64]	; (8005b24 <MX_USART1_UART_Init+0x4c>)
 8005ae4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005ae8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005aea:	4b0e      	ldr	r3, [pc, #56]	; (8005b24 <MX_USART1_UART_Init+0x4c>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005af0:	4b0c      	ldr	r3, [pc, #48]	; (8005b24 <MX_USART1_UART_Init+0x4c>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005af6:	4b0b      	ldr	r3, [pc, #44]	; (8005b24 <MX_USART1_UART_Init+0x4c>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005afc:	4b09      	ldr	r3, [pc, #36]	; (8005b24 <MX_USART1_UART_Init+0x4c>)
 8005afe:	220c      	movs	r2, #12
 8005b00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b02:	4b08      	ldr	r3, [pc, #32]	; (8005b24 <MX_USART1_UART_Init+0x4c>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b08:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <MX_USART1_UART_Init+0x4c>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005b0e:	4805      	ldr	r0, [pc, #20]	; (8005b24 <MX_USART1_UART_Init+0x4c>)
 8005b10:	f005 f9a7 	bl	800ae62 <HAL_UART_Init>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005b1a:	f7fe fabf 	bl	800409c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005b1e:	bf00      	nop
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	200019c0 	.word	0x200019c0
 8005b28:	40013800 	.word	0x40013800

08005b2c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005b30:	4b10      	ldr	r3, [pc, #64]	; (8005b74 <MX_USART2_UART_Init+0x48>)
 8005b32:	4a11      	ldr	r2, [pc, #68]	; (8005b78 <MX_USART2_UART_Init+0x4c>)
 8005b34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8005b36:	4b0f      	ldr	r3, [pc, #60]	; (8005b74 <MX_USART2_UART_Init+0x48>)
 8005b38:	4a10      	ldr	r2, [pc, #64]	; (8005b7c <MX_USART2_UART_Init+0x50>)
 8005b3a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005b3c:	4b0d      	ldr	r3, [pc, #52]	; (8005b74 <MX_USART2_UART_Init+0x48>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005b42:	4b0c      	ldr	r3, [pc, #48]	; (8005b74 <MX_USART2_UART_Init+0x48>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005b48:	4b0a      	ldr	r3, [pc, #40]	; (8005b74 <MX_USART2_UART_Init+0x48>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005b4e:	4b09      	ldr	r3, [pc, #36]	; (8005b74 <MX_USART2_UART_Init+0x48>)
 8005b50:	220c      	movs	r2, #12
 8005b52:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b54:	4b07      	ldr	r3, [pc, #28]	; (8005b74 <MX_USART2_UART_Init+0x48>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b5a:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <MX_USART2_UART_Init+0x48>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005b60:	4804      	ldr	r0, [pc, #16]	; (8005b74 <MX_USART2_UART_Init+0x48>)
 8005b62:	f005 f97e 	bl	800ae62 <HAL_UART_Init>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8005b6c:	f7fe fa96 	bl	800409c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005b70:	bf00      	nop
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	20001a00 	.word	0x20001a00
 8005b78:	40004400 	.word	0x40004400
 8005b7c:	000f4240 	.word	0x000f4240

08005b80 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005b84:	4b11      	ldr	r3, [pc, #68]	; (8005bcc <MX_USART3_UART_Init+0x4c>)
 8005b86:	4a12      	ldr	r2, [pc, #72]	; (8005bd0 <MX_USART3_UART_Init+0x50>)
 8005b88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005b8a:	4b10      	ldr	r3, [pc, #64]	; (8005bcc <MX_USART3_UART_Init+0x4c>)
 8005b8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005b92:	4b0e      	ldr	r3, [pc, #56]	; (8005bcc <MX_USART3_UART_Init+0x4c>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005b98:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <MX_USART3_UART_Init+0x4c>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005b9e:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <MX_USART3_UART_Init+0x4c>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005ba4:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <MX_USART3_UART_Init+0x4c>)
 8005ba6:	220c      	movs	r2, #12
 8005ba8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005baa:	4b08      	ldr	r3, [pc, #32]	; (8005bcc <MX_USART3_UART_Init+0x4c>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005bb0:	4b06      	ldr	r3, [pc, #24]	; (8005bcc <MX_USART3_UART_Init+0x4c>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005bb6:	4805      	ldr	r0, [pc, #20]	; (8005bcc <MX_USART3_UART_Init+0x4c>)
 8005bb8:	f005 f953 	bl	800ae62 <HAL_UART_Init>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005bc2:	f7fe fa6b 	bl	800409c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005bc6:	bf00      	nop
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	200018f8 	.word	0x200018f8
 8005bd0:	40004800 	.word	0x40004800

08005bd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08c      	sub	sp, #48	; 0x30
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bdc:	f107 0320 	add.w	r3, r7, #32
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	605a      	str	r2, [r3, #4]
 8005be6:	609a      	str	r2, [r3, #8]
 8005be8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a95      	ldr	r2, [pc, #596]	; (8005e44 <HAL_UART_MspInit+0x270>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d159      	bne.n	8005ca8 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005bf4:	4b94      	ldr	r3, [pc, #592]	; (8005e48 <HAL_UART_MspInit+0x274>)
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	4a93      	ldr	r2, [pc, #588]	; (8005e48 <HAL_UART_MspInit+0x274>)
 8005bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bfe:	6193      	str	r3, [r2, #24]
 8005c00:	4b91      	ldr	r3, [pc, #580]	; (8005e48 <HAL_UART_MspInit+0x274>)
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c08:	61fb      	str	r3, [r7, #28]
 8005c0a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c0c:	4b8e      	ldr	r3, [pc, #568]	; (8005e48 <HAL_UART_MspInit+0x274>)
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	4a8d      	ldr	r2, [pc, #564]	; (8005e48 <HAL_UART_MspInit+0x274>)
 8005c12:	f043 0304 	orr.w	r3, r3, #4
 8005c16:	6193      	str	r3, [r2, #24]
 8005c18:	4b8b      	ldr	r3, [pc, #556]	; (8005e48 <HAL_UART_MspInit+0x274>)
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c32:	f107 0320 	add.w	r3, r7, #32
 8005c36:	4619      	mov	r1, r3
 8005c38:	4884      	ldr	r0, [pc, #528]	; (8005e4c <HAL_UART_MspInit+0x278>)
 8005c3a:	f000 fd39 	bl	80066b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c44:	2300      	movs	r3, #0
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c4c:	f107 0320 	add.w	r3, r7, #32
 8005c50:	4619      	mov	r1, r3
 8005c52:	487e      	ldr	r0, [pc, #504]	; (8005e4c <HAL_UART_MspInit+0x278>)
 8005c54:	f000 fd2c 	bl	80066b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005c58:	4b7d      	ldr	r3, [pc, #500]	; (8005e50 <HAL_UART_MspInit+0x27c>)
 8005c5a:	4a7e      	ldr	r2, [pc, #504]	; (8005e54 <HAL_UART_MspInit+0x280>)
 8005c5c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c5e:	4b7c      	ldr	r3, [pc, #496]	; (8005e50 <HAL_UART_MspInit+0x27c>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c64:	4b7a      	ldr	r3, [pc, #488]	; (8005e50 <HAL_UART_MspInit+0x27c>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005c6a:	4b79      	ldr	r3, [pc, #484]	; (8005e50 <HAL_UART_MspInit+0x27c>)
 8005c6c:	2280      	movs	r2, #128	; 0x80
 8005c6e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c70:	4b77      	ldr	r3, [pc, #476]	; (8005e50 <HAL_UART_MspInit+0x27c>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c76:	4b76      	ldr	r3, [pc, #472]	; (8005e50 <HAL_UART_MspInit+0x27c>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005c7c:	4b74      	ldr	r3, [pc, #464]	; (8005e50 <HAL_UART_MspInit+0x27c>)
 8005c7e:	2220      	movs	r2, #32
 8005c80:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005c82:	4b73      	ldr	r3, [pc, #460]	; (8005e50 <HAL_UART_MspInit+0x27c>)
 8005c84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c88:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005c8a:	4871      	ldr	r0, [pc, #452]	; (8005e50 <HAL_UART_MspInit+0x27c>)
 8005c8c:	f000 faac 	bl	80061e8 <HAL_DMA_Init>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8005c96:	f7fe fa01 	bl	800409c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a6c      	ldr	r2, [pc, #432]	; (8005e50 <HAL_UART_MspInit+0x27c>)
 8005c9e:	635a      	str	r2, [r3, #52]	; 0x34
 8005ca0:	4a6b      	ldr	r2, [pc, #428]	; (8005e50 <HAL_UART_MspInit+0x27c>)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005ca6:	e0c9      	b.n	8005e3c <HAL_UART_MspInit+0x268>
  else if(uartHandle->Instance==USART2)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a6a      	ldr	r2, [pc, #424]	; (8005e58 <HAL_UART_MspInit+0x284>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	f040 8085 	bne.w	8005dbe <HAL_UART_MspInit+0x1ea>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005cb4:	4b64      	ldr	r3, [pc, #400]	; (8005e48 <HAL_UART_MspInit+0x274>)
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	4a63      	ldr	r2, [pc, #396]	; (8005e48 <HAL_UART_MspInit+0x274>)
 8005cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cbe:	61d3      	str	r3, [r2, #28]
 8005cc0:	4b61      	ldr	r3, [pc, #388]	; (8005e48 <HAL_UART_MspInit+0x274>)
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ccc:	4b5e      	ldr	r3, [pc, #376]	; (8005e48 <HAL_UART_MspInit+0x274>)
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	4a5d      	ldr	r2, [pc, #372]	; (8005e48 <HAL_UART_MspInit+0x274>)
 8005cd2:	f043 0304 	orr.w	r3, r3, #4
 8005cd6:	6193      	str	r3, [r2, #24]
 8005cd8:	4b5b      	ldr	r3, [pc, #364]	; (8005e48 <HAL_UART_MspInit+0x274>)
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	613b      	str	r3, [r7, #16]
 8005ce2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ce8:	2302      	movs	r3, #2
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005cec:	2303      	movs	r3, #3
 8005cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cf0:	f107 0320 	add.w	r3, r7, #32
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4855      	ldr	r0, [pc, #340]	; (8005e4c <HAL_UART_MspInit+0x278>)
 8005cf8:	f000 fcda 	bl	80066b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005cfc:	2308      	movs	r3, #8
 8005cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d00:	2300      	movs	r3, #0
 8005d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d04:	2300      	movs	r3, #0
 8005d06:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d08:	f107 0320 	add.w	r3, r7, #32
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	484f      	ldr	r0, [pc, #316]	; (8005e4c <HAL_UART_MspInit+0x278>)
 8005d10:	f000 fcce 	bl	80066b0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005d14:	4b51      	ldr	r3, [pc, #324]	; (8005e5c <HAL_UART_MspInit+0x288>)
 8005d16:	4a52      	ldr	r2, [pc, #328]	; (8005e60 <HAL_UART_MspInit+0x28c>)
 8005d18:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d1a:	4b50      	ldr	r3, [pc, #320]	; (8005e5c <HAL_UART_MspInit+0x288>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d20:	4b4e      	ldr	r3, [pc, #312]	; (8005e5c <HAL_UART_MspInit+0x288>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d26:	4b4d      	ldr	r3, [pc, #308]	; (8005e5c <HAL_UART_MspInit+0x288>)
 8005d28:	2280      	movs	r2, #128	; 0x80
 8005d2a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d2c:	4b4b      	ldr	r3, [pc, #300]	; (8005e5c <HAL_UART_MspInit+0x288>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d32:	4b4a      	ldr	r3, [pc, #296]	; (8005e5c <HAL_UART_MspInit+0x288>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005d38:	4b48      	ldr	r3, [pc, #288]	; (8005e5c <HAL_UART_MspInit+0x288>)
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005d3e:	4b47      	ldr	r3, [pc, #284]	; (8005e5c <HAL_UART_MspInit+0x288>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005d44:	4845      	ldr	r0, [pc, #276]	; (8005e5c <HAL_UART_MspInit+0x288>)
 8005d46:	f000 fa4f 	bl	80061e8 <HAL_DMA_Init>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8005d50:	f7fe f9a4 	bl	800409c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a41      	ldr	r2, [pc, #260]	; (8005e5c <HAL_UART_MspInit+0x288>)
 8005d58:	635a      	str	r2, [r3, #52]	; 0x34
 8005d5a:	4a40      	ldr	r2, [pc, #256]	; (8005e5c <HAL_UART_MspInit+0x288>)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005d60:	4b40      	ldr	r3, [pc, #256]	; (8005e64 <HAL_UART_MspInit+0x290>)
 8005d62:	4a41      	ldr	r2, [pc, #260]	; (8005e68 <HAL_UART_MspInit+0x294>)
 8005d64:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d66:	4b3f      	ldr	r3, [pc, #252]	; (8005e64 <HAL_UART_MspInit+0x290>)
 8005d68:	2210      	movs	r2, #16
 8005d6a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d6c:	4b3d      	ldr	r3, [pc, #244]	; (8005e64 <HAL_UART_MspInit+0x290>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d72:	4b3c      	ldr	r3, [pc, #240]	; (8005e64 <HAL_UART_MspInit+0x290>)
 8005d74:	2280      	movs	r2, #128	; 0x80
 8005d76:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d78:	4b3a      	ldr	r3, [pc, #232]	; (8005e64 <HAL_UART_MspInit+0x290>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d7e:	4b39      	ldr	r3, [pc, #228]	; (8005e64 <HAL_UART_MspInit+0x290>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005d84:	4b37      	ldr	r3, [pc, #220]	; (8005e64 <HAL_UART_MspInit+0x290>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005d8a:	4b36      	ldr	r3, [pc, #216]	; (8005e64 <HAL_UART_MspInit+0x290>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005d90:	4834      	ldr	r0, [pc, #208]	; (8005e64 <HAL_UART_MspInit+0x290>)
 8005d92:	f000 fa29 	bl	80061e8 <HAL_DMA_Init>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <HAL_UART_MspInit+0x1cc>
      Error_Handler();
 8005d9c:	f7fe f97e 	bl	800409c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a30      	ldr	r2, [pc, #192]	; (8005e64 <HAL_UART_MspInit+0x290>)
 8005da4:	631a      	str	r2, [r3, #48]	; 0x30
 8005da6:	4a2f      	ldr	r2, [pc, #188]	; (8005e64 <HAL_UART_MspInit+0x290>)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005dac:	2200      	movs	r2, #0
 8005dae:	2100      	movs	r1, #0
 8005db0:	2026      	movs	r0, #38	; 0x26
 8005db2:	f000 f9e2 	bl	800617a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005db6:	2026      	movs	r0, #38	; 0x26
 8005db8:	f000 f9fb 	bl	80061b2 <HAL_NVIC_EnableIRQ>
}
 8005dbc:	e03e      	b.n	8005e3c <HAL_UART_MspInit+0x268>
  else if(uartHandle->Instance==USART3)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a2a      	ldr	r2, [pc, #168]	; (8005e6c <HAL_UART_MspInit+0x298>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d139      	bne.n	8005e3c <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005dc8:	4b1f      	ldr	r3, [pc, #124]	; (8005e48 <HAL_UART_MspInit+0x274>)
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	4a1e      	ldr	r2, [pc, #120]	; (8005e48 <HAL_UART_MspInit+0x274>)
 8005dce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dd2:	61d3      	str	r3, [r2, #28]
 8005dd4:	4b1c      	ldr	r3, [pc, #112]	; (8005e48 <HAL_UART_MspInit+0x274>)
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005de0:	4b19      	ldr	r3, [pc, #100]	; (8005e48 <HAL_UART_MspInit+0x274>)
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	4a18      	ldr	r2, [pc, #96]	; (8005e48 <HAL_UART_MspInit+0x274>)
 8005de6:	f043 0308 	orr.w	r3, r3, #8
 8005dea:	6193      	str	r3, [r2, #24]
 8005dec:	4b16      	ldr	r3, [pc, #88]	; (8005e48 <HAL_UART_MspInit+0x274>)
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	f003 0308 	and.w	r3, r3, #8
 8005df4:	60bb      	str	r3, [r7, #8]
 8005df6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dfe:	2302      	movs	r3, #2
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e02:	2303      	movs	r3, #3
 8005e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e06:	f107 0320 	add.w	r3, r7, #32
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4818      	ldr	r0, [pc, #96]	; (8005e70 <HAL_UART_MspInit+0x29c>)
 8005e0e:	f000 fc4f 	bl	80066b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005e12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e20:	f107 0320 	add.w	r3, r7, #32
 8005e24:	4619      	mov	r1, r3
 8005e26:	4812      	ldr	r0, [pc, #72]	; (8005e70 <HAL_UART_MspInit+0x29c>)
 8005e28:	f000 fc42 	bl	80066b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2100      	movs	r1, #0
 8005e30:	2027      	movs	r0, #39	; 0x27
 8005e32:	f000 f9a2 	bl	800617a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005e36:	2027      	movs	r0, #39	; 0x27
 8005e38:	f000 f9bb 	bl	80061b2 <HAL_NVIC_EnableIRQ>
}
 8005e3c:	bf00      	nop
 8005e3e:	3730      	adds	r7, #48	; 0x30
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	40013800 	.word	0x40013800
 8005e48:	40021000 	.word	0x40021000
 8005e4c:	40010800 	.word	0x40010800
 8005e50:	20001938 	.word	0x20001938
 8005e54:	40020058 	.word	0x40020058
 8005e58:	40004400 	.word	0x40004400
 8005e5c:	200018b4 	.word	0x200018b4
 8005e60:	4002006c 	.word	0x4002006c
 8005e64:	2000197c 	.word	0x2000197c
 8005e68:	40020080 	.word	0x40020080
 8005e6c:	40004800 	.word	0x40004800
 8005e70:	40010c00 	.word	0x40010c00

08005e74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005e74:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005e76:	e003      	b.n	8005e80 <LoopCopyDataInit>

08005e78 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005e78:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005e7a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005e7c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005e7e:	3104      	adds	r1, #4

08005e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005e80:	480a      	ldr	r0, [pc, #40]	; (8005eac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005e82:	4b0b      	ldr	r3, [pc, #44]	; (8005eb0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005e84:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005e86:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005e88:	d3f6      	bcc.n	8005e78 <CopyDataInit>
  ldr r2, =_sbss
 8005e8a:	4a0a      	ldr	r2, [pc, #40]	; (8005eb4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005e8c:	e002      	b.n	8005e94 <LoopFillZerobss>

08005e8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005e8e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005e90:	f842 3b04 	str.w	r3, [r2], #4

08005e94 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005e94:	4b08      	ldr	r3, [pc, #32]	; (8005eb8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005e96:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005e98:	d3f9      	bcc.n	8005e8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005e9a:	f7ff fb85 	bl	80055a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e9e:	f00a fa01 	bl	80102a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005ea2:	f7fc f81d 	bl	8001ee0 <main>
  bx lr
 8005ea6:	4770      	bx	lr
  ldr r3, =_sidata
 8005ea8:	0801163c 	.word	0x0801163c
  ldr r0, =_sdata
 8005eac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005eb0:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8005eb4:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8005eb8:	20001a54 	.word	0x20001a54

08005ebc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005ebc:	e7fe      	b.n	8005ebc <ADC1_2_IRQHandler>
	...

08005ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ec4:	4b08      	ldr	r3, [pc, #32]	; (8005ee8 <HAL_Init+0x28>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a07      	ldr	r2, [pc, #28]	; (8005ee8 <HAL_Init+0x28>)
 8005eca:	f043 0310 	orr.w	r3, r3, #16
 8005ece:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ed0:	2003      	movs	r0, #3
 8005ed2:	f000 f947 	bl	8006164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	f000 f808 	bl	8005eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005edc:	f7ff fa66 	bl	80053ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	40022000 	.word	0x40022000

08005eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005ef4:	4b12      	ldr	r3, [pc, #72]	; (8005f40 <HAL_InitTick+0x54>)
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	4b12      	ldr	r3, [pc, #72]	; (8005f44 <HAL_InitTick+0x58>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	4619      	mov	r1, r3
 8005efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 f95f 	bl	80061ce <HAL_SYSTICK_Config>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e00e      	b.n	8005f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b0f      	cmp	r3, #15
 8005f1e:	d80a      	bhi.n	8005f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f20:	2200      	movs	r2, #0
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	f04f 30ff 	mov.w	r0, #4294967295
 8005f28:	f000 f927 	bl	800617a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f2c:	4a06      	ldr	r2, [pc, #24]	; (8005f48 <HAL_InitTick+0x5c>)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	e000      	b.n	8005f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	20000010 	.word	0x20000010
 8005f44:	20000018 	.word	0x20000018
 8005f48:	20000014 	.word	0x20000014

08005f4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f50:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <HAL_IncTick+0x1c>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	461a      	mov	r2, r3
 8005f56:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <HAL_IncTick+0x20>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	4a03      	ldr	r2, [pc, #12]	; (8005f6c <HAL_IncTick+0x20>)
 8005f5e:	6013      	str	r3, [r2, #0]
}
 8005f60:	bf00      	nop
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bc80      	pop	{r7}
 8005f66:	4770      	bx	lr
 8005f68:	20000018 	.word	0x20000018
 8005f6c:	20001a40 	.word	0x20001a40

08005f70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f70:	b480      	push	{r7}
 8005f72:	af00      	add	r7, sp, #0
  return uwTick;
 8005f74:	4b02      	ldr	r3, [pc, #8]	; (8005f80 <HAL_GetTick+0x10>)
 8005f76:	681b      	ldr	r3, [r3, #0]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bc80      	pop	{r7}
 8005f7e:	4770      	bx	lr
 8005f80:	20001a40 	.word	0x20001a40

08005f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f8c:	f7ff fff0 	bl	8005f70 <HAL_GetTick>
 8005f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9c:	d005      	beq.n	8005faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f9e:	4b0a      	ldr	r3, [pc, #40]	; (8005fc8 <HAL_Delay+0x44>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005faa:	bf00      	nop
 8005fac:	f7ff ffe0 	bl	8005f70 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d8f7      	bhi.n	8005fac <HAL_Delay+0x28>
  {
  }
}
 8005fbc:	bf00      	nop
 8005fbe:	bf00      	nop
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20000018 	.word	0x20000018

08005fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005fdc:	4b0c      	ldr	r3, [pc, #48]	; (8006010 <__NVIC_SetPriorityGrouping+0x44>)
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005fe8:	4013      	ands	r3, r2
 8005fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ffe:	4a04      	ldr	r2, [pc, #16]	; (8006010 <__NVIC_SetPriorityGrouping+0x44>)
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	60d3      	str	r3, [r2, #12]
}
 8006004:	bf00      	nop
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	bc80      	pop	{r7}
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	e000ed00 	.word	0xe000ed00

08006014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006014:	b480      	push	{r7}
 8006016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006018:	4b04      	ldr	r3, [pc, #16]	; (800602c <__NVIC_GetPriorityGrouping+0x18>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	0a1b      	lsrs	r3, r3, #8
 800601e:	f003 0307 	and.w	r3, r3, #7
}
 8006022:	4618      	mov	r0, r3
 8006024:	46bd      	mov	sp, r7
 8006026:	bc80      	pop	{r7}
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	e000ed00 	.word	0xe000ed00

08006030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	4603      	mov	r3, r0
 8006038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800603a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800603e:	2b00      	cmp	r3, #0
 8006040:	db0b      	blt.n	800605a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006042:	79fb      	ldrb	r3, [r7, #7]
 8006044:	f003 021f 	and.w	r2, r3, #31
 8006048:	4906      	ldr	r1, [pc, #24]	; (8006064 <__NVIC_EnableIRQ+0x34>)
 800604a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800604e:	095b      	lsrs	r3, r3, #5
 8006050:	2001      	movs	r0, #1
 8006052:	fa00 f202 	lsl.w	r2, r0, r2
 8006056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	bc80      	pop	{r7}
 8006062:	4770      	bx	lr
 8006064:	e000e100 	.word	0xe000e100

08006068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	4603      	mov	r3, r0
 8006070:	6039      	str	r1, [r7, #0]
 8006072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006078:	2b00      	cmp	r3, #0
 800607a:	db0a      	blt.n	8006092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	b2da      	uxtb	r2, r3
 8006080:	490c      	ldr	r1, [pc, #48]	; (80060b4 <__NVIC_SetPriority+0x4c>)
 8006082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006086:	0112      	lsls	r2, r2, #4
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	440b      	add	r3, r1
 800608c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006090:	e00a      	b.n	80060a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	b2da      	uxtb	r2, r3
 8006096:	4908      	ldr	r1, [pc, #32]	; (80060b8 <__NVIC_SetPriority+0x50>)
 8006098:	79fb      	ldrb	r3, [r7, #7]
 800609a:	f003 030f 	and.w	r3, r3, #15
 800609e:	3b04      	subs	r3, #4
 80060a0:	0112      	lsls	r2, r2, #4
 80060a2:	b2d2      	uxtb	r2, r2
 80060a4:	440b      	add	r3, r1
 80060a6:	761a      	strb	r2, [r3, #24]
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bc80      	pop	{r7}
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	e000e100 	.word	0xe000e100
 80060b8:	e000ed00 	.word	0xe000ed00

080060bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060bc:	b480      	push	{r7}
 80060be:	b089      	sub	sp, #36	; 0x24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f003 0307 	and.w	r3, r3, #7
 80060ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	f1c3 0307 	rsb	r3, r3, #7
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	bf28      	it	cs
 80060da:	2304      	movcs	r3, #4
 80060dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	3304      	adds	r3, #4
 80060e2:	2b06      	cmp	r3, #6
 80060e4:	d902      	bls.n	80060ec <NVIC_EncodePriority+0x30>
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	3b03      	subs	r3, #3
 80060ea:	e000      	b.n	80060ee <NVIC_EncodePriority+0x32>
 80060ec:	2300      	movs	r3, #0
 80060ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060f0:	f04f 32ff 	mov.w	r2, #4294967295
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	43da      	mvns	r2, r3
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	401a      	ands	r2, r3
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006104:	f04f 31ff 	mov.w	r1, #4294967295
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	fa01 f303 	lsl.w	r3, r1, r3
 800610e:	43d9      	mvns	r1, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006114:	4313      	orrs	r3, r2
         );
}
 8006116:	4618      	mov	r0, r3
 8006118:	3724      	adds	r7, #36	; 0x24
 800611a:	46bd      	mov	sp, r7
 800611c:	bc80      	pop	{r7}
 800611e:	4770      	bx	lr

08006120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	3b01      	subs	r3, #1
 800612c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006130:	d301      	bcc.n	8006136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006132:	2301      	movs	r3, #1
 8006134:	e00f      	b.n	8006156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006136:	4a0a      	ldr	r2, [pc, #40]	; (8006160 <SysTick_Config+0x40>)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3b01      	subs	r3, #1
 800613c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800613e:	210f      	movs	r1, #15
 8006140:	f04f 30ff 	mov.w	r0, #4294967295
 8006144:	f7ff ff90 	bl	8006068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006148:	4b05      	ldr	r3, [pc, #20]	; (8006160 <SysTick_Config+0x40>)
 800614a:	2200      	movs	r2, #0
 800614c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800614e:	4b04      	ldr	r3, [pc, #16]	; (8006160 <SysTick_Config+0x40>)
 8006150:	2207      	movs	r2, #7
 8006152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	e000e010 	.word	0xe000e010

08006164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7ff ff2d 	bl	8005fcc <__NVIC_SetPriorityGrouping>
}
 8006172:	bf00      	nop
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800617a:	b580      	push	{r7, lr}
 800617c:	b086      	sub	sp, #24
 800617e:	af00      	add	r7, sp, #0
 8006180:	4603      	mov	r3, r0
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	607a      	str	r2, [r7, #4]
 8006186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006188:	2300      	movs	r3, #0
 800618a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800618c:	f7ff ff42 	bl	8006014 <__NVIC_GetPriorityGrouping>
 8006190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	68b9      	ldr	r1, [r7, #8]
 8006196:	6978      	ldr	r0, [r7, #20]
 8006198:	f7ff ff90 	bl	80060bc <NVIC_EncodePriority>
 800619c:	4602      	mov	r2, r0
 800619e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061a2:	4611      	mov	r1, r2
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff ff5f 	bl	8006068 <__NVIC_SetPriority>
}
 80061aa:	bf00      	nop
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b082      	sub	sp, #8
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	4603      	mov	r3, r0
 80061ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7ff ff35 	bl	8006030 <__NVIC_EnableIRQ>
}
 80061c6:	bf00      	nop
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b082      	sub	sp, #8
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7ff ffa2 	bl	8006120 <SysTick_Config>
 80061dc:	4603      	mov	r3, r0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e043      	b.n	8006286 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	461a      	mov	r2, r3
 8006204:	4b22      	ldr	r3, [pc, #136]	; (8006290 <HAL_DMA_Init+0xa8>)
 8006206:	4413      	add	r3, r2
 8006208:	4a22      	ldr	r2, [pc, #136]	; (8006294 <HAL_DMA_Init+0xac>)
 800620a:	fba2 2303 	umull	r2, r3, r2, r3
 800620e:	091b      	lsrs	r3, r3, #4
 8006210:	009a      	lsls	r2, r3, #2
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a1f      	ldr	r2, [pc, #124]	; (8006298 <HAL_DMA_Init+0xb0>)
 800621a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006232:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006236:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006240:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800624c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006258:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	bc80      	pop	{r7}
 800628e:	4770      	bx	lr
 8006290:	bffdfff8 	.word	0xbffdfff8
 8006294:	cccccccd 	.word	0xcccccccd
 8006298:	40020000 	.word	0x40020000

0800629c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
 80062a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_DMA_Start_IT+0x20>
 80062b8:	2302      	movs	r3, #2
 80062ba:	e04a      	b.n	8006352 <HAL_DMA_Start_IT+0xb6>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d13a      	bne.n	8006344 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2202      	movs	r2, #2
 80062d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0201 	bic.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 f9ae 	bl	8006654 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d008      	beq.n	8006312 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 020e 	orr.w	r2, r2, #14
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	e00f      	b.n	8006332 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 0204 	bic.w	r2, r2, #4
 8006320:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f042 020a 	orr.w	r2, r2, #10
 8006330:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0201 	orr.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	e005      	b.n	8006350 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800634c:	2302      	movs	r3, #2
 800634e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006350:	7dfb      	ldrb	r3, [r7, #23]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006364:	2300      	movs	r3, #0
 8006366:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800636e:	2b02      	cmp	r3, #2
 8006370:	d005      	beq.n	800637e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2204      	movs	r2, #4
 8006376:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	73fb      	strb	r3, [r7, #15]
 800637c:	e051      	b.n	8006422 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 020e 	bic.w	r2, r2, #14
 800638c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0201 	bic.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a22      	ldr	r2, [pc, #136]	; (800642c <HAL_DMA_Abort_IT+0xd0>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d029      	beq.n	80063fc <HAL_DMA_Abort_IT+0xa0>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a20      	ldr	r2, [pc, #128]	; (8006430 <HAL_DMA_Abort_IT+0xd4>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d022      	beq.n	80063f8 <HAL_DMA_Abort_IT+0x9c>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a1f      	ldr	r2, [pc, #124]	; (8006434 <HAL_DMA_Abort_IT+0xd8>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d01a      	beq.n	80063f2 <HAL_DMA_Abort_IT+0x96>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a1d      	ldr	r2, [pc, #116]	; (8006438 <HAL_DMA_Abort_IT+0xdc>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d012      	beq.n	80063ec <HAL_DMA_Abort_IT+0x90>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a1c      	ldr	r2, [pc, #112]	; (800643c <HAL_DMA_Abort_IT+0xe0>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d00a      	beq.n	80063e6 <HAL_DMA_Abort_IT+0x8a>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a1a      	ldr	r2, [pc, #104]	; (8006440 <HAL_DMA_Abort_IT+0xe4>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d102      	bne.n	80063e0 <HAL_DMA_Abort_IT+0x84>
 80063da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80063de:	e00e      	b.n	80063fe <HAL_DMA_Abort_IT+0xa2>
 80063e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063e4:	e00b      	b.n	80063fe <HAL_DMA_Abort_IT+0xa2>
 80063e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80063ea:	e008      	b.n	80063fe <HAL_DMA_Abort_IT+0xa2>
 80063ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063f0:	e005      	b.n	80063fe <HAL_DMA_Abort_IT+0xa2>
 80063f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063f6:	e002      	b.n	80063fe <HAL_DMA_Abort_IT+0xa2>
 80063f8:	2310      	movs	r3, #16
 80063fa:	e000      	b.n	80063fe <HAL_DMA_Abort_IT+0xa2>
 80063fc:	2301      	movs	r3, #1
 80063fe:	4a11      	ldr	r2, [pc, #68]	; (8006444 <HAL_DMA_Abort_IT+0xe8>)
 8006400:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	4798      	blx	r3
    } 
  }
  return status;
 8006422:	7bfb      	ldrb	r3, [r7, #15]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	40020008 	.word	0x40020008
 8006430:	4002001c 	.word	0x4002001c
 8006434:	40020030 	.word	0x40020030
 8006438:	40020044 	.word	0x40020044
 800643c:	40020058 	.word	0x40020058
 8006440:	4002006c 	.word	0x4002006c
 8006444:	40020000 	.word	0x40020000

08006448 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006464:	2204      	movs	r2, #4
 8006466:	409a      	lsls	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4013      	ands	r3, r2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d04f      	beq.n	8006510 <HAL_DMA_IRQHandler+0xc8>
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f003 0304 	and.w	r3, r3, #4
 8006476:	2b00      	cmp	r3, #0
 8006478:	d04a      	beq.n	8006510 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0320 	and.w	r3, r3, #32
 8006484:	2b00      	cmp	r3, #0
 8006486:	d107      	bne.n	8006498 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0204 	bic.w	r2, r2, #4
 8006496:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a66      	ldr	r2, [pc, #408]	; (8006638 <HAL_DMA_IRQHandler+0x1f0>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d029      	beq.n	80064f6 <HAL_DMA_IRQHandler+0xae>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a65      	ldr	r2, [pc, #404]	; (800663c <HAL_DMA_IRQHandler+0x1f4>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d022      	beq.n	80064f2 <HAL_DMA_IRQHandler+0xaa>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a63      	ldr	r2, [pc, #396]	; (8006640 <HAL_DMA_IRQHandler+0x1f8>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d01a      	beq.n	80064ec <HAL_DMA_IRQHandler+0xa4>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a62      	ldr	r2, [pc, #392]	; (8006644 <HAL_DMA_IRQHandler+0x1fc>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d012      	beq.n	80064e6 <HAL_DMA_IRQHandler+0x9e>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a60      	ldr	r2, [pc, #384]	; (8006648 <HAL_DMA_IRQHandler+0x200>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d00a      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x98>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a5f      	ldr	r2, [pc, #380]	; (800664c <HAL_DMA_IRQHandler+0x204>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d102      	bne.n	80064da <HAL_DMA_IRQHandler+0x92>
 80064d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80064d8:	e00e      	b.n	80064f8 <HAL_DMA_IRQHandler+0xb0>
 80064da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80064de:	e00b      	b.n	80064f8 <HAL_DMA_IRQHandler+0xb0>
 80064e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80064e4:	e008      	b.n	80064f8 <HAL_DMA_IRQHandler+0xb0>
 80064e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064ea:	e005      	b.n	80064f8 <HAL_DMA_IRQHandler+0xb0>
 80064ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064f0:	e002      	b.n	80064f8 <HAL_DMA_IRQHandler+0xb0>
 80064f2:	2340      	movs	r3, #64	; 0x40
 80064f4:	e000      	b.n	80064f8 <HAL_DMA_IRQHandler+0xb0>
 80064f6:	2304      	movs	r3, #4
 80064f8:	4a55      	ldr	r2, [pc, #340]	; (8006650 <HAL_DMA_IRQHandler+0x208>)
 80064fa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 8094 	beq.w	800662e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800650e:	e08e      	b.n	800662e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006514:	2202      	movs	r2, #2
 8006516:	409a      	lsls	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4013      	ands	r3, r2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d056      	beq.n	80065ce <HAL_DMA_IRQHandler+0x186>
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d051      	beq.n	80065ce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0320 	and.w	r3, r3, #32
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10b      	bne.n	8006550 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 020a 	bic.w	r2, r2, #10
 8006546:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a38      	ldr	r2, [pc, #224]	; (8006638 <HAL_DMA_IRQHandler+0x1f0>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d029      	beq.n	80065ae <HAL_DMA_IRQHandler+0x166>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a37      	ldr	r2, [pc, #220]	; (800663c <HAL_DMA_IRQHandler+0x1f4>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d022      	beq.n	80065aa <HAL_DMA_IRQHandler+0x162>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a35      	ldr	r2, [pc, #212]	; (8006640 <HAL_DMA_IRQHandler+0x1f8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d01a      	beq.n	80065a4 <HAL_DMA_IRQHandler+0x15c>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a34      	ldr	r2, [pc, #208]	; (8006644 <HAL_DMA_IRQHandler+0x1fc>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d012      	beq.n	800659e <HAL_DMA_IRQHandler+0x156>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a32      	ldr	r2, [pc, #200]	; (8006648 <HAL_DMA_IRQHandler+0x200>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d00a      	beq.n	8006598 <HAL_DMA_IRQHandler+0x150>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a31      	ldr	r2, [pc, #196]	; (800664c <HAL_DMA_IRQHandler+0x204>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d102      	bne.n	8006592 <HAL_DMA_IRQHandler+0x14a>
 800658c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006590:	e00e      	b.n	80065b0 <HAL_DMA_IRQHandler+0x168>
 8006592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006596:	e00b      	b.n	80065b0 <HAL_DMA_IRQHandler+0x168>
 8006598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800659c:	e008      	b.n	80065b0 <HAL_DMA_IRQHandler+0x168>
 800659e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065a2:	e005      	b.n	80065b0 <HAL_DMA_IRQHandler+0x168>
 80065a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065a8:	e002      	b.n	80065b0 <HAL_DMA_IRQHandler+0x168>
 80065aa:	2320      	movs	r3, #32
 80065ac:	e000      	b.n	80065b0 <HAL_DMA_IRQHandler+0x168>
 80065ae:	2302      	movs	r3, #2
 80065b0:	4a27      	ldr	r2, [pc, #156]	; (8006650 <HAL_DMA_IRQHandler+0x208>)
 80065b2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d034      	beq.n	800662e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80065cc:	e02f      	b.n	800662e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	2208      	movs	r2, #8
 80065d4:	409a      	lsls	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4013      	ands	r3, r2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d028      	beq.n	8006630 <HAL_DMA_IRQHandler+0x1e8>
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f003 0308 	and.w	r3, r3, #8
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d023      	beq.n	8006630 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 020e 	bic.w	r2, r2, #14
 80065f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006600:	2101      	movs	r1, #1
 8006602:	fa01 f202 	lsl.w	r2, r1, r2
 8006606:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006622:	2b00      	cmp	r3, #0
 8006624:	d004      	beq.n	8006630 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	4798      	blx	r3
    }
  }
  return;
 800662e:	bf00      	nop
 8006630:	bf00      	nop
}
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	40020008 	.word	0x40020008
 800663c:	4002001c 	.word	0x4002001c
 8006640:	40020030 	.word	0x40020030
 8006644:	40020044 	.word	0x40020044
 8006648:	40020058 	.word	0x40020058
 800664c:	4002006c 	.word	0x4002006c
 8006650:	40020000 	.word	0x40020000

08006654 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
 8006660:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666a:	2101      	movs	r1, #1
 800666c:	fa01 f202 	lsl.w	r2, r1, r2
 8006670:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	2b10      	cmp	r3, #16
 8006680:	d108      	bne.n	8006694 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006692:	e007      	b.n	80066a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	60da      	str	r2, [r3, #12]
}
 80066a4:	bf00      	nop
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bc80      	pop	{r7}
 80066ac:	4770      	bx	lr
	...

080066b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b08b      	sub	sp, #44	; 0x2c
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80066ba:	2300      	movs	r3, #0
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80066be:	2300      	movs	r3, #0
 80066c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066c2:	e169      	b.n	8006998 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80066c4:	2201      	movs	r2, #1
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	fa02 f303 	lsl.w	r3, r2, r3
 80066cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69fa      	ldr	r2, [r7, #28]
 80066d4:	4013      	ands	r3, r2
 80066d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	429a      	cmp	r2, r3
 80066de:	f040 8158 	bne.w	8006992 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	4a9a      	ldr	r2, [pc, #616]	; (8006950 <HAL_GPIO_Init+0x2a0>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d05e      	beq.n	80067aa <HAL_GPIO_Init+0xfa>
 80066ec:	4a98      	ldr	r2, [pc, #608]	; (8006950 <HAL_GPIO_Init+0x2a0>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d875      	bhi.n	80067de <HAL_GPIO_Init+0x12e>
 80066f2:	4a98      	ldr	r2, [pc, #608]	; (8006954 <HAL_GPIO_Init+0x2a4>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d058      	beq.n	80067aa <HAL_GPIO_Init+0xfa>
 80066f8:	4a96      	ldr	r2, [pc, #600]	; (8006954 <HAL_GPIO_Init+0x2a4>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d86f      	bhi.n	80067de <HAL_GPIO_Init+0x12e>
 80066fe:	4a96      	ldr	r2, [pc, #600]	; (8006958 <HAL_GPIO_Init+0x2a8>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d052      	beq.n	80067aa <HAL_GPIO_Init+0xfa>
 8006704:	4a94      	ldr	r2, [pc, #592]	; (8006958 <HAL_GPIO_Init+0x2a8>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d869      	bhi.n	80067de <HAL_GPIO_Init+0x12e>
 800670a:	4a94      	ldr	r2, [pc, #592]	; (800695c <HAL_GPIO_Init+0x2ac>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d04c      	beq.n	80067aa <HAL_GPIO_Init+0xfa>
 8006710:	4a92      	ldr	r2, [pc, #584]	; (800695c <HAL_GPIO_Init+0x2ac>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d863      	bhi.n	80067de <HAL_GPIO_Init+0x12e>
 8006716:	4a92      	ldr	r2, [pc, #584]	; (8006960 <HAL_GPIO_Init+0x2b0>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d046      	beq.n	80067aa <HAL_GPIO_Init+0xfa>
 800671c:	4a90      	ldr	r2, [pc, #576]	; (8006960 <HAL_GPIO_Init+0x2b0>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d85d      	bhi.n	80067de <HAL_GPIO_Init+0x12e>
 8006722:	2b12      	cmp	r3, #18
 8006724:	d82a      	bhi.n	800677c <HAL_GPIO_Init+0xcc>
 8006726:	2b12      	cmp	r3, #18
 8006728:	d859      	bhi.n	80067de <HAL_GPIO_Init+0x12e>
 800672a:	a201      	add	r2, pc, #4	; (adr r2, 8006730 <HAL_GPIO_Init+0x80>)
 800672c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006730:	080067ab 	.word	0x080067ab
 8006734:	08006785 	.word	0x08006785
 8006738:	08006797 	.word	0x08006797
 800673c:	080067d9 	.word	0x080067d9
 8006740:	080067df 	.word	0x080067df
 8006744:	080067df 	.word	0x080067df
 8006748:	080067df 	.word	0x080067df
 800674c:	080067df 	.word	0x080067df
 8006750:	080067df 	.word	0x080067df
 8006754:	080067df 	.word	0x080067df
 8006758:	080067df 	.word	0x080067df
 800675c:	080067df 	.word	0x080067df
 8006760:	080067df 	.word	0x080067df
 8006764:	080067df 	.word	0x080067df
 8006768:	080067df 	.word	0x080067df
 800676c:	080067df 	.word	0x080067df
 8006770:	080067df 	.word	0x080067df
 8006774:	0800678d 	.word	0x0800678d
 8006778:	080067a1 	.word	0x080067a1
 800677c:	4a79      	ldr	r2, [pc, #484]	; (8006964 <HAL_GPIO_Init+0x2b4>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d013      	beq.n	80067aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006782:	e02c      	b.n	80067de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	623b      	str	r3, [r7, #32]
          break;
 800678a:	e029      	b.n	80067e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	3304      	adds	r3, #4
 8006792:	623b      	str	r3, [r7, #32]
          break;
 8006794:	e024      	b.n	80067e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	3308      	adds	r3, #8
 800679c:	623b      	str	r3, [r7, #32]
          break;
 800679e:	e01f      	b.n	80067e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	330c      	adds	r3, #12
 80067a6:	623b      	str	r3, [r7, #32]
          break;
 80067a8:	e01a      	b.n	80067e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d102      	bne.n	80067b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80067b2:	2304      	movs	r3, #4
 80067b4:	623b      	str	r3, [r7, #32]
          break;
 80067b6:	e013      	b.n	80067e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d105      	bne.n	80067cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80067c0:	2308      	movs	r3, #8
 80067c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	69fa      	ldr	r2, [r7, #28]
 80067c8:	611a      	str	r2, [r3, #16]
          break;
 80067ca:	e009      	b.n	80067e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80067cc:	2308      	movs	r3, #8
 80067ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	69fa      	ldr	r2, [r7, #28]
 80067d4:	615a      	str	r2, [r3, #20]
          break;
 80067d6:	e003      	b.n	80067e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80067d8:	2300      	movs	r3, #0
 80067da:	623b      	str	r3, [r7, #32]
          break;
 80067dc:	e000      	b.n	80067e0 <HAL_GPIO_Init+0x130>
          break;
 80067de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	2bff      	cmp	r3, #255	; 0xff
 80067e4:	d801      	bhi.n	80067ea <HAL_GPIO_Init+0x13a>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	e001      	b.n	80067ee <HAL_GPIO_Init+0x13e>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3304      	adds	r3, #4
 80067ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	2bff      	cmp	r3, #255	; 0xff
 80067f4:	d802      	bhi.n	80067fc <HAL_GPIO_Init+0x14c>
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	e002      	b.n	8006802 <HAL_GPIO_Init+0x152>
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	3b08      	subs	r3, #8
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	210f      	movs	r1, #15
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	fa01 f303 	lsl.w	r3, r1, r3
 8006810:	43db      	mvns	r3, r3
 8006812:	401a      	ands	r2, r3
 8006814:	6a39      	ldr	r1, [r7, #32]
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	fa01 f303 	lsl.w	r3, r1, r3
 800681c:	431a      	orrs	r2, r3
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800682a:	2b00      	cmp	r3, #0
 800682c:	f000 80b1 	beq.w	8006992 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006830:	4b4d      	ldr	r3, [pc, #308]	; (8006968 <HAL_GPIO_Init+0x2b8>)
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	4a4c      	ldr	r2, [pc, #304]	; (8006968 <HAL_GPIO_Init+0x2b8>)
 8006836:	f043 0301 	orr.w	r3, r3, #1
 800683a:	6193      	str	r3, [r2, #24]
 800683c:	4b4a      	ldr	r3, [pc, #296]	; (8006968 <HAL_GPIO_Init+0x2b8>)
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	60bb      	str	r3, [r7, #8]
 8006846:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006848:	4a48      	ldr	r2, [pc, #288]	; (800696c <HAL_GPIO_Init+0x2bc>)
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	089b      	lsrs	r3, r3, #2
 800684e:	3302      	adds	r3, #2
 8006850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006854:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	f003 0303 	and.w	r3, r3, #3
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	220f      	movs	r2, #15
 8006860:	fa02 f303 	lsl.w	r3, r2, r3
 8006864:	43db      	mvns	r3, r3
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4013      	ands	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a40      	ldr	r2, [pc, #256]	; (8006970 <HAL_GPIO_Init+0x2c0>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d013      	beq.n	800689c <HAL_GPIO_Init+0x1ec>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a3f      	ldr	r2, [pc, #252]	; (8006974 <HAL_GPIO_Init+0x2c4>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d00d      	beq.n	8006898 <HAL_GPIO_Init+0x1e8>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a3e      	ldr	r2, [pc, #248]	; (8006978 <HAL_GPIO_Init+0x2c8>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d007      	beq.n	8006894 <HAL_GPIO_Init+0x1e4>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a3d      	ldr	r2, [pc, #244]	; (800697c <HAL_GPIO_Init+0x2cc>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d101      	bne.n	8006890 <HAL_GPIO_Init+0x1e0>
 800688c:	2303      	movs	r3, #3
 800688e:	e006      	b.n	800689e <HAL_GPIO_Init+0x1ee>
 8006890:	2304      	movs	r3, #4
 8006892:	e004      	b.n	800689e <HAL_GPIO_Init+0x1ee>
 8006894:	2302      	movs	r3, #2
 8006896:	e002      	b.n	800689e <HAL_GPIO_Init+0x1ee>
 8006898:	2301      	movs	r3, #1
 800689a:	e000      	b.n	800689e <HAL_GPIO_Init+0x1ee>
 800689c:	2300      	movs	r3, #0
 800689e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a0:	f002 0203 	and.w	r2, r2, #3
 80068a4:	0092      	lsls	r2, r2, #2
 80068a6:	4093      	lsls	r3, r2
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80068ae:	492f      	ldr	r1, [pc, #188]	; (800696c <HAL_GPIO_Init+0x2bc>)
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	089b      	lsrs	r3, r3, #2
 80068b4:	3302      	adds	r3, #2
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d006      	beq.n	80068d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80068c8:	4b2d      	ldr	r3, [pc, #180]	; (8006980 <HAL_GPIO_Init+0x2d0>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	492c      	ldr	r1, [pc, #176]	; (8006980 <HAL_GPIO_Init+0x2d0>)
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	600b      	str	r3, [r1, #0]
 80068d4:	e006      	b.n	80068e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80068d6:	4b2a      	ldr	r3, [pc, #168]	; (8006980 <HAL_GPIO_Init+0x2d0>)
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	43db      	mvns	r3, r3
 80068de:	4928      	ldr	r1, [pc, #160]	; (8006980 <HAL_GPIO_Init+0x2d0>)
 80068e0:	4013      	ands	r3, r2
 80068e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d006      	beq.n	80068fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80068f0:	4b23      	ldr	r3, [pc, #140]	; (8006980 <HAL_GPIO_Init+0x2d0>)
 80068f2:	685a      	ldr	r2, [r3, #4]
 80068f4:	4922      	ldr	r1, [pc, #136]	; (8006980 <HAL_GPIO_Init+0x2d0>)
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	604b      	str	r3, [r1, #4]
 80068fc:	e006      	b.n	800690c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80068fe:	4b20      	ldr	r3, [pc, #128]	; (8006980 <HAL_GPIO_Init+0x2d0>)
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	43db      	mvns	r3, r3
 8006906:	491e      	ldr	r1, [pc, #120]	; (8006980 <HAL_GPIO_Init+0x2d0>)
 8006908:	4013      	ands	r3, r2
 800690a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d006      	beq.n	8006926 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006918:	4b19      	ldr	r3, [pc, #100]	; (8006980 <HAL_GPIO_Init+0x2d0>)
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	4918      	ldr	r1, [pc, #96]	; (8006980 <HAL_GPIO_Init+0x2d0>)
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	4313      	orrs	r3, r2
 8006922:	608b      	str	r3, [r1, #8]
 8006924:	e006      	b.n	8006934 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006926:	4b16      	ldr	r3, [pc, #88]	; (8006980 <HAL_GPIO_Init+0x2d0>)
 8006928:	689a      	ldr	r2, [r3, #8]
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	43db      	mvns	r3, r3
 800692e:	4914      	ldr	r1, [pc, #80]	; (8006980 <HAL_GPIO_Init+0x2d0>)
 8006930:	4013      	ands	r3, r2
 8006932:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d021      	beq.n	8006984 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006940:	4b0f      	ldr	r3, [pc, #60]	; (8006980 <HAL_GPIO_Init+0x2d0>)
 8006942:	68da      	ldr	r2, [r3, #12]
 8006944:	490e      	ldr	r1, [pc, #56]	; (8006980 <HAL_GPIO_Init+0x2d0>)
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	4313      	orrs	r3, r2
 800694a:	60cb      	str	r3, [r1, #12]
 800694c:	e021      	b.n	8006992 <HAL_GPIO_Init+0x2e2>
 800694e:	bf00      	nop
 8006950:	10320000 	.word	0x10320000
 8006954:	10310000 	.word	0x10310000
 8006958:	10220000 	.word	0x10220000
 800695c:	10210000 	.word	0x10210000
 8006960:	10120000 	.word	0x10120000
 8006964:	10110000 	.word	0x10110000
 8006968:	40021000 	.word	0x40021000
 800696c:	40010000 	.word	0x40010000
 8006970:	40010800 	.word	0x40010800
 8006974:	40010c00 	.word	0x40010c00
 8006978:	40011000 	.word	0x40011000
 800697c:	40011400 	.word	0x40011400
 8006980:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006984:	4b0b      	ldr	r3, [pc, #44]	; (80069b4 <HAL_GPIO_Init+0x304>)
 8006986:	68da      	ldr	r2, [r3, #12]
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	43db      	mvns	r3, r3
 800698c:	4909      	ldr	r1, [pc, #36]	; (80069b4 <HAL_GPIO_Init+0x304>)
 800698e:	4013      	ands	r3, r2
 8006990:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	3301      	adds	r3, #1
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	fa22 f303 	lsr.w	r3, r2, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f47f ae8e 	bne.w	80066c4 <HAL_GPIO_Init+0x14>
  }
}
 80069a8:	bf00      	nop
 80069aa:	bf00      	nop
 80069ac:	372c      	adds	r7, #44	; 0x2c
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bc80      	pop	{r7}
 80069b2:	4770      	bx	lr
 80069b4:	40010400 	.word	0x40010400

080069b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	807b      	strh	r3, [r7, #2]
 80069c4:	4613      	mov	r3, r2
 80069c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80069c8:	787b      	ldrb	r3, [r7, #1]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069ce:	887a      	ldrh	r2, [r7, #2]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80069d4:	e003      	b.n	80069de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80069d6:	887b      	ldrh	r3, [r7, #2]
 80069d8:	041a      	lsls	r2, r3, #16
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	611a      	str	r2, [r3, #16]
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr

080069e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80069fa:	887a      	ldrh	r2, [r7, #2]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4013      	ands	r3, r2
 8006a00:	041a      	lsls	r2, r3, #16
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	43d9      	mvns	r1, r3
 8006a06:	887b      	ldrh	r3, [r7, #2]
 8006a08:	400b      	ands	r3, r1
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	611a      	str	r2, [r3, #16]
}
 8006a10:	bf00      	nop
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bc80      	pop	{r7}
 8006a18:	4770      	bx	lr
	...

08006a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e12b      	b.n	8006c86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7fb f974 	bl	8001d30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2224      	movs	r2, #36	; 0x24
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0201 	bic.w	r2, r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006a80:	f002 f84e 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 8006a84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	4a81      	ldr	r2, [pc, #516]	; (8006c90 <HAL_I2C_Init+0x274>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d807      	bhi.n	8006aa0 <HAL_I2C_Init+0x84>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4a80      	ldr	r2, [pc, #512]	; (8006c94 <HAL_I2C_Init+0x278>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	bf94      	ite	ls
 8006a98:	2301      	movls	r3, #1
 8006a9a:	2300      	movhi	r3, #0
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	e006      	b.n	8006aae <HAL_I2C_Init+0x92>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4a7d      	ldr	r2, [pc, #500]	; (8006c98 <HAL_I2C_Init+0x27c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	bf94      	ite	ls
 8006aa8:	2301      	movls	r3, #1
 8006aaa:	2300      	movhi	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e0e7      	b.n	8006c86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4a78      	ldr	r2, [pc, #480]	; (8006c9c <HAL_I2C_Init+0x280>)
 8006aba:	fba2 2303 	umull	r2, r3, r2, r3
 8006abe:	0c9b      	lsrs	r3, r3, #18
 8006ac0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	4a6a      	ldr	r2, [pc, #424]	; (8006c90 <HAL_I2C_Init+0x274>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d802      	bhi.n	8006af0 <HAL_I2C_Init+0xd4>
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	3301      	adds	r3, #1
 8006aee:	e009      	b.n	8006b04 <HAL_I2C_Init+0xe8>
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006af6:	fb02 f303 	mul.w	r3, r2, r3
 8006afa:	4a69      	ldr	r2, [pc, #420]	; (8006ca0 <HAL_I2C_Init+0x284>)
 8006afc:	fba2 2303 	umull	r2, r3, r2, r3
 8006b00:	099b      	lsrs	r3, r3, #6
 8006b02:	3301      	adds	r3, #1
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	6812      	ldr	r2, [r2, #0]
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006b16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	495c      	ldr	r1, [pc, #368]	; (8006c90 <HAL_I2C_Init+0x274>)
 8006b20:	428b      	cmp	r3, r1
 8006b22:	d819      	bhi.n	8006b58 <HAL_I2C_Init+0x13c>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	1e59      	subs	r1, r3, #1
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b32:	1c59      	adds	r1, r3, #1
 8006b34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006b38:	400b      	ands	r3, r1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00a      	beq.n	8006b54 <HAL_I2C_Init+0x138>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	1e59      	subs	r1, r3, #1
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b52:	e051      	b.n	8006bf8 <HAL_I2C_Init+0x1dc>
 8006b54:	2304      	movs	r3, #4
 8006b56:	e04f      	b.n	8006bf8 <HAL_I2C_Init+0x1dc>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d111      	bne.n	8006b84 <HAL_I2C_Init+0x168>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	1e58      	subs	r0, r3, #1
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6859      	ldr	r1, [r3, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	005b      	lsls	r3, r3, #1
 8006b6c:	440b      	add	r3, r1
 8006b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b72:	3301      	adds	r3, #1
 8006b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	bf0c      	ite	eq
 8006b7c:	2301      	moveq	r3, #1
 8006b7e:	2300      	movne	r3, #0
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	e012      	b.n	8006baa <HAL_I2C_Init+0x18e>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	1e58      	subs	r0, r3, #1
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6859      	ldr	r1, [r3, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	440b      	add	r3, r1
 8006b92:	0099      	lsls	r1, r3, #2
 8006b94:	440b      	add	r3, r1
 8006b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	bf0c      	ite	eq
 8006ba4:	2301      	moveq	r3, #1
 8006ba6:	2300      	movne	r3, #0
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <HAL_I2C_Init+0x196>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e022      	b.n	8006bf8 <HAL_I2C_Init+0x1dc>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10e      	bne.n	8006bd8 <HAL_I2C_Init+0x1bc>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	1e58      	subs	r0, r3, #1
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6859      	ldr	r1, [r3, #4]
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	440b      	add	r3, r1
 8006bc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bcc:	3301      	adds	r3, #1
 8006bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd6:	e00f      	b.n	8006bf8 <HAL_I2C_Init+0x1dc>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	1e58      	subs	r0, r3, #1
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6859      	ldr	r1, [r3, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	440b      	add	r3, r1
 8006be6:	0099      	lsls	r1, r3, #2
 8006be8:	440b      	add	r3, r1
 8006bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bee:	3301      	adds	r3, #1
 8006bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bf8:	6879      	ldr	r1, [r7, #4]
 8006bfa:	6809      	ldr	r1, [r1, #0]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	69da      	ldr	r2, [r3, #28]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006c26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	6911      	ldr	r1, [r2, #16]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	68d2      	ldr	r2, [r2, #12]
 8006c32:	4311      	orrs	r1, r2
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	6812      	ldr	r2, [r2, #0]
 8006c38:	430b      	orrs	r3, r1
 8006c3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	695a      	ldr	r2, [r3, #20]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f042 0201 	orr.w	r2, r2, #1
 8006c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	000186a0 	.word	0x000186a0
 8006c94:	001e847f 	.word	0x001e847f
 8006c98:	003d08ff 	.word	0x003d08ff
 8006c9c:	431bde83 	.word	0x431bde83
 8006ca0:	10624dd3 	.word	0x10624dd3

08006ca4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b088      	sub	sp, #32
 8006ca8:	af02      	add	r7, sp, #8
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	607a      	str	r2, [r7, #4]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	817b      	strh	r3, [r7, #10]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006cb8:	f7ff f95a 	bl	8005f70 <HAL_GetTick>
 8006cbc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b20      	cmp	r3, #32
 8006cc8:	f040 80e0 	bne.w	8006e8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	2319      	movs	r3, #25
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	4970      	ldr	r1, [pc, #448]	; (8006e98 <HAL_I2C_Master_Transmit+0x1f4>)
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f001 f972 	bl	8007fc0 <I2C_WaitOnFlagUntilTimeout>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e0d3      	b.n	8006e8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d101      	bne.n	8006cf4 <HAL_I2C_Master_Transmit+0x50>
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	e0cc      	b.n	8006e8e <HAL_I2C_Master_Transmit+0x1ea>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d007      	beq.n	8006d1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f042 0201 	orr.w	r2, r2, #1
 8006d18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2221      	movs	r2, #33	; 0x21
 8006d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2210      	movs	r2, #16
 8006d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	893a      	ldrh	r2, [r7, #8]
 8006d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	4a50      	ldr	r2, [pc, #320]	; (8006e9c <HAL_I2C_Master_Transmit+0x1f8>)
 8006d5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006d5c:	8979      	ldrh	r1, [r7, #10]
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	6a3a      	ldr	r2, [r7, #32]
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f000 fe5e 	bl	8007a24 <I2C_MasterRequestWrite>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e08d      	b.n	8006e8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d72:	2300      	movs	r3, #0
 8006d74:	613b      	str	r3, [r7, #16]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	613b      	str	r3, [r7, #16]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	613b      	str	r3, [r7, #16]
 8006d86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006d88:	e066      	b.n	8006e58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	6a39      	ldr	r1, [r7, #32]
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f001 f9ec 	bl	800816c <I2C_WaitOnTXEFlagUntilTimeout>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00d      	beq.n	8006db6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d107      	bne.n	8006db2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006db0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e06b      	b.n	8006e8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	781a      	ldrb	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dde:	3b01      	subs	r3, #1
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	f003 0304 	and.w	r3, r3, #4
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	d11b      	bne.n	8006e2c <HAL_I2C_Master_Transmit+0x188>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d017      	beq.n	8006e2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	781a      	ldrb	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e24:	3b01      	subs	r3, #1
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	6a39      	ldr	r1, [r7, #32]
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f001 f9dc 	bl	80081ee <I2C_WaitOnBTFFlagUntilTimeout>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00d      	beq.n	8006e58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e40:	2b04      	cmp	r3, #4
 8006e42:	d107      	bne.n	8006e54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e01a      	b.n	8006e8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d194      	bne.n	8006d8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2220      	movs	r2, #32
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	e000      	b.n	8006e8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006e8c:	2302      	movs	r3, #2
  }
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	00100002 	.word	0x00100002
 8006e9c:	ffff0000 	.word	0xffff0000

08006ea0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08c      	sub	sp, #48	; 0x30
 8006ea4:	af02      	add	r7, sp, #8
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	607a      	str	r2, [r7, #4]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	460b      	mov	r3, r1
 8006eae:	817b      	strh	r3, [r7, #10]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006eb8:	f7ff f85a 	bl	8005f70 <HAL_GetTick>
 8006ebc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	f040 823f 	bne.w	800734a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	2319      	movs	r3, #25
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	497f      	ldr	r1, [pc, #508]	; (80070d4 <HAL_I2C_Master_Receive+0x234>)
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f001 f872 	bl	8007fc0 <I2C_WaitOnFlagUntilTimeout>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	e232      	b.n	800734c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d101      	bne.n	8006ef4 <HAL_I2C_Master_Receive+0x54>
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e22b      	b.n	800734c <HAL_I2C_Master_Receive+0x4ac>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d007      	beq.n	8006f1a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f042 0201 	orr.w	r2, r2, #1
 8006f18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2222      	movs	r2, #34	; 0x22
 8006f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2210      	movs	r2, #16
 8006f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	893a      	ldrh	r2, [r7, #8]
 8006f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4a5f      	ldr	r2, [pc, #380]	; (80070d8 <HAL_I2C_Master_Receive+0x238>)
 8006f5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006f5c:	8979      	ldrh	r1, [r7, #10]
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f000 fde0 	bl	8007b28 <I2C_MasterRequestRead>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e1ec      	b.n	800734c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d113      	bne.n	8006fa2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	61fb      	str	r3, [r7, #28]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	61fb      	str	r3, [r7, #28]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	61fb      	str	r3, [r7, #28]
 8006f8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	e1c0      	b.n	8007324 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d11e      	bne.n	8006fe8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fb8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006fba:	b672      	cpsid	i
}
 8006fbc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	61bb      	str	r3, [r7, #24]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	61bb      	str	r3, [r7, #24]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	61bb      	str	r3, [r7, #24]
 8006fd2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fe2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006fe4:	b662      	cpsie	i
}
 8006fe6:	e035      	b.n	8007054 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d11e      	bne.n	800702e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ffe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007000:	b672      	cpsid	i
}
 8007002:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007004:	2300      	movs	r3, #0
 8007006:	617b      	str	r3, [r7, #20]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	617b      	str	r3, [r7, #20]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007028:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800702a:	b662      	cpsie	i
}
 800702c:	e012      	b.n	8007054 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800703c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800703e:	2300      	movs	r3, #0
 8007040:	613b      	str	r3, [r7, #16]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	613b      	str	r3, [r7, #16]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	613b      	str	r3, [r7, #16]
 8007052:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007054:	e166      	b.n	8007324 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800705a:	2b03      	cmp	r3, #3
 800705c:	f200 811f 	bhi.w	800729e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007064:	2b01      	cmp	r3, #1
 8007066:	d123      	bne.n	80070b0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800706a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f001 f8ff 	bl	8008270 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e167      	b.n	800734c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	691a      	ldr	r2, [r3, #16]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007086:	b2d2      	uxtb	r2, r2
 8007088:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708e:	1c5a      	adds	r2, r3, #1
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007098:	3b01      	subs	r3, #1
 800709a:	b29a      	uxth	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	3b01      	subs	r3, #1
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070ae:	e139      	b.n	8007324 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d152      	bne.n	800715e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070be:	2200      	movs	r2, #0
 80070c0:	4906      	ldr	r1, [pc, #24]	; (80070dc <HAL_I2C_Master_Receive+0x23c>)
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 ff7c 	bl	8007fc0 <I2C_WaitOnFlagUntilTimeout>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d008      	beq.n	80070e0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e13c      	b.n	800734c <HAL_I2C_Master_Receive+0x4ac>
 80070d2:	bf00      	nop
 80070d4:	00100002 	.word	0x00100002
 80070d8:	ffff0000 	.word	0xffff0000
 80070dc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80070e0:	b672      	cpsid	i
}
 80070e2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691a      	ldr	r2, [r3, #16]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fe:	b2d2      	uxtb	r2, r2
 8007100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007110:	3b01      	subs	r3, #1
 8007112:	b29a      	uxth	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711c:	b29b      	uxth	r3, r3
 800711e:	3b01      	subs	r3, #1
 8007120:	b29a      	uxth	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007126:	b662      	cpsie	i
}
 8007128:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	691a      	ldr	r2, [r3, #16]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007134:	b2d2      	uxtb	r2, r2
 8007136:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713c:	1c5a      	adds	r2, r3, #1
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007146:	3b01      	subs	r3, #1
 8007148:	b29a      	uxth	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007152:	b29b      	uxth	r3, r3
 8007154:	3b01      	subs	r3, #1
 8007156:	b29a      	uxth	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800715c:	e0e2      	b.n	8007324 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	9300      	str	r3, [sp, #0]
 8007162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007164:	2200      	movs	r2, #0
 8007166:	497b      	ldr	r1, [pc, #492]	; (8007354 <HAL_I2C_Master_Receive+0x4b4>)
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 ff29 	bl	8007fc0 <I2C_WaitOnFlagUntilTimeout>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d001      	beq.n	8007178 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e0e9      	b.n	800734c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007186:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007188:	b672      	cpsid	i
}
 800718a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	691a      	ldr	r2, [r3, #16]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	b2d2      	uxtb	r2, r2
 8007198:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719e:	1c5a      	adds	r2, r3, #1
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071a8:	3b01      	subs	r3, #1
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	3b01      	subs	r3, #1
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80071be:	4b66      	ldr	r3, [pc, #408]	; (8007358 <HAL_I2C_Master_Receive+0x4b8>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	08db      	lsrs	r3, r3, #3
 80071c4:	4a65      	ldr	r2, [pc, #404]	; (800735c <HAL_I2C_Master_Receive+0x4bc>)
 80071c6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ca:	0a1a      	lsrs	r2, r3, #8
 80071cc:	4613      	mov	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	00da      	lsls	r2, r3, #3
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80071d8:	6a3b      	ldr	r3, [r7, #32]
 80071da:	3b01      	subs	r3, #1
 80071dc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d118      	bne.n	8007216 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2220      	movs	r2, #32
 80071ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fe:	f043 0220 	orr.w	r2, r3, #32
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007206:	b662      	cpsie	i
}
 8007208:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e09a      	b.n	800734c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	f003 0304 	and.w	r3, r3, #4
 8007220:	2b04      	cmp	r3, #4
 8007222:	d1d9      	bne.n	80071d8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007232:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	691a      	ldr	r2, [r3, #16]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007250:	3b01      	subs	r3, #1
 8007252:	b29a      	uxth	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800725c:	b29b      	uxth	r3, r3
 800725e:	3b01      	subs	r3, #1
 8007260:	b29a      	uxth	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007266:	b662      	cpsie	i
}
 8007268:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	691a      	ldr	r2, [r3, #16]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	b2d2      	uxtb	r2, r2
 8007276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727c:	1c5a      	adds	r2, r3, #1
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007286:	3b01      	subs	r3, #1
 8007288:	b29a      	uxth	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007292:	b29b      	uxth	r3, r3
 8007294:	3b01      	subs	r3, #1
 8007296:	b29a      	uxth	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800729c:	e042      	b.n	8007324 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800729e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 ffe4 	bl	8008270 <I2C_WaitOnRXNEFlagUntilTimeout>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e04c      	b.n	800734c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691a      	ldr	r2, [r3, #16]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072bc:	b2d2      	uxtb	r2, r2
 80072be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072da:	b29b      	uxth	r3, r3
 80072dc:	3b01      	subs	r3, #1
 80072de:	b29a      	uxth	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	f003 0304 	and.w	r3, r3, #4
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d118      	bne.n	8007324 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	691a      	ldr	r2, [r3, #16]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	b2d2      	uxtb	r2, r2
 80072fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800730e:	3b01      	subs	r3, #1
 8007310:	b29a      	uxth	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800731a:	b29b      	uxth	r3, r3
 800731c:	3b01      	subs	r3, #1
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007328:	2b00      	cmp	r3, #0
 800732a:	f47f ae94 	bne.w	8007056 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2220      	movs	r2, #32
 8007332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	e000      	b.n	800734c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800734a:	2302      	movs	r3, #2
  }
}
 800734c:	4618      	mov	r0, r3
 800734e:	3728      	adds	r7, #40	; 0x28
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	00010004 	.word	0x00010004
 8007358:	20000010 	.word	0x20000010
 800735c:	14f8b589 	.word	0x14f8b589

08007360 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b088      	sub	sp, #32
 8007364:	af02      	add	r7, sp, #8
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	4608      	mov	r0, r1
 800736a:	4611      	mov	r1, r2
 800736c:	461a      	mov	r2, r3
 800736e:	4603      	mov	r3, r0
 8007370:	817b      	strh	r3, [r7, #10]
 8007372:	460b      	mov	r3, r1
 8007374:	813b      	strh	r3, [r7, #8]
 8007376:	4613      	mov	r3, r2
 8007378:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800737a:	f7fe fdf9 	bl	8005f70 <HAL_GetTick>
 800737e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007386:	b2db      	uxtb	r3, r3
 8007388:	2b20      	cmp	r3, #32
 800738a:	f040 80d9 	bne.w	8007540 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	2319      	movs	r3, #25
 8007394:	2201      	movs	r2, #1
 8007396:	496d      	ldr	r1, [pc, #436]	; (800754c <HAL_I2C_Mem_Write+0x1ec>)
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 fe11 	bl	8007fc0 <I2C_WaitOnFlagUntilTimeout>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80073a4:	2302      	movs	r3, #2
 80073a6:	e0cc      	b.n	8007542 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d101      	bne.n	80073b6 <HAL_I2C_Mem_Write+0x56>
 80073b2:	2302      	movs	r3, #2
 80073b4:	e0c5      	b.n	8007542 <HAL_I2C_Mem_Write+0x1e2>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d007      	beq.n	80073dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f042 0201 	orr.w	r2, r2, #1
 80073da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2221      	movs	r2, #33	; 0x21
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2240      	movs	r2, #64	; 0x40
 80073f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6a3a      	ldr	r2, [r7, #32]
 8007406:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800740c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007412:	b29a      	uxth	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4a4d      	ldr	r2, [pc, #308]	; (8007550 <HAL_I2C_Mem_Write+0x1f0>)
 800741c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800741e:	88f8      	ldrh	r0, [r7, #6]
 8007420:	893a      	ldrh	r2, [r7, #8]
 8007422:	8979      	ldrh	r1, [r7, #10]
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	9301      	str	r3, [sp, #4]
 8007428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	4603      	mov	r3, r0
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 fc48 	bl	8007cc4 <I2C_RequestMemoryWrite>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d052      	beq.n	80074e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e081      	b.n	8007542 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f000 fe92 	bl	800816c <I2C_WaitOnTXEFlagUntilTimeout>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00d      	beq.n	800746a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	2b04      	cmp	r3, #4
 8007454:	d107      	bne.n	8007466 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007464:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e06b      	b.n	8007542 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	781a      	ldrb	r2, [r3, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007484:	3b01      	subs	r3, #1
 8007486:	b29a      	uxth	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007490:	b29b      	uxth	r3, r3
 8007492:	3b01      	subs	r3, #1
 8007494:	b29a      	uxth	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	f003 0304 	and.w	r3, r3, #4
 80074a4:	2b04      	cmp	r3, #4
 80074a6:	d11b      	bne.n	80074e0 <HAL_I2C_Mem_Write+0x180>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d017      	beq.n	80074e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	781a      	ldrb	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	1c5a      	adds	r2, r3, #1
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	3b01      	subs	r3, #1
 80074da:	b29a      	uxth	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1aa      	bne.n	800743e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 fe7e 	bl	80081ee <I2C_WaitOnBTFFlagUntilTimeout>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00d      	beq.n	8007514 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fc:	2b04      	cmp	r3, #4
 80074fe:	d107      	bne.n	8007510 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800750e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e016      	b.n	8007542 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2220      	movs	r2, #32
 8007528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	e000      	b.n	8007542 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007540:	2302      	movs	r3, #2
  }
}
 8007542:	4618      	mov	r0, r3
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	00100002 	.word	0x00100002
 8007550:	ffff0000 	.word	0xffff0000

08007554 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b08c      	sub	sp, #48	; 0x30
 8007558:	af02      	add	r7, sp, #8
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	4608      	mov	r0, r1
 800755e:	4611      	mov	r1, r2
 8007560:	461a      	mov	r2, r3
 8007562:	4603      	mov	r3, r0
 8007564:	817b      	strh	r3, [r7, #10]
 8007566:	460b      	mov	r3, r1
 8007568:	813b      	strh	r3, [r7, #8]
 800756a:	4613      	mov	r3, r2
 800756c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007572:	f7fe fcfd 	bl	8005f70 <HAL_GetTick>
 8007576:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b20      	cmp	r3, #32
 8007582:	f040 8244 	bne.w	8007a0e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	2319      	movs	r3, #25
 800758c:	2201      	movs	r2, #1
 800758e:	4982      	ldr	r1, [pc, #520]	; (8007798 <HAL_I2C_Mem_Read+0x244>)
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 fd15 	bl	8007fc0 <I2C_WaitOnFlagUntilTimeout>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800759c:	2302      	movs	r3, #2
 800759e:	e237      	b.n	8007a10 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d101      	bne.n	80075ae <HAL_I2C_Mem_Read+0x5a>
 80075aa:	2302      	movs	r3, #2
 80075ac:	e230      	b.n	8007a10 <HAL_I2C_Mem_Read+0x4bc>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d007      	beq.n	80075d4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f042 0201 	orr.w	r2, r2, #1
 80075d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2222      	movs	r2, #34	; 0x22
 80075e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2240      	movs	r2, #64	; 0x40
 80075f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007604:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800760a:	b29a      	uxth	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4a62      	ldr	r2, [pc, #392]	; (800779c <HAL_I2C_Mem_Read+0x248>)
 8007614:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007616:	88f8      	ldrh	r0, [r7, #6]
 8007618:	893a      	ldrh	r2, [r7, #8]
 800761a:	8979      	ldrh	r1, [r7, #10]
 800761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761e:	9301      	str	r3, [sp, #4]
 8007620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	4603      	mov	r3, r0
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f000 fbe2 	bl	8007df0 <I2C_RequestMemoryRead>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e1ec      	b.n	8007a10 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800763a:	2b00      	cmp	r3, #0
 800763c:	d113      	bne.n	8007666 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800763e:	2300      	movs	r3, #0
 8007640:	61fb      	str	r3, [r7, #28]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	61fb      	str	r3, [r7, #28]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	61fb      	str	r3, [r7, #28]
 8007652:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	e1c0      	b.n	80079e8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800766a:	2b01      	cmp	r3, #1
 800766c:	d11e      	bne.n	80076ac <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800767c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800767e:	b672      	cpsid	i
}
 8007680:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007682:	2300      	movs	r3, #0
 8007684:	61bb      	str	r3, [r7, #24]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	61bb      	str	r3, [r7, #24]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	61bb      	str	r3, [r7, #24]
 8007696:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80076a8:	b662      	cpsie	i
}
 80076aa:	e035      	b.n	8007718 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d11e      	bne.n	80076f2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80076c4:	b672      	cpsid	i
}
 80076c6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076c8:	2300      	movs	r3, #0
 80076ca:	617b      	str	r3, [r7, #20]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	617b      	str	r3, [r7, #20]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	617b      	str	r3, [r7, #20]
 80076dc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80076ee:	b662      	cpsie	i
}
 80076f0:	e012      	b.n	8007718 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007700:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007702:	2300      	movs	r3, #0
 8007704:	613b      	str	r3, [r7, #16]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	613b      	str	r3, [r7, #16]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	613b      	str	r3, [r7, #16]
 8007716:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007718:	e166      	b.n	80079e8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800771e:	2b03      	cmp	r3, #3
 8007720:	f200 811f 	bhi.w	8007962 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007728:	2b01      	cmp	r3, #1
 800772a:	d123      	bne.n	8007774 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800772c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800772e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 fd9d 	bl	8008270 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e167      	b.n	8007a10 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	691a      	ldr	r2, [r3, #16]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774a:	b2d2      	uxtb	r2, r2
 800774c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800775c:	3b01      	subs	r3, #1
 800775e:	b29a      	uxth	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007768:	b29b      	uxth	r3, r3
 800776a:	3b01      	subs	r3, #1
 800776c:	b29a      	uxth	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007772:	e139      	b.n	80079e8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007778:	2b02      	cmp	r3, #2
 800777a:	d152      	bne.n	8007822 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007782:	2200      	movs	r2, #0
 8007784:	4906      	ldr	r1, [pc, #24]	; (80077a0 <HAL_I2C_Mem_Read+0x24c>)
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 fc1a 	bl	8007fc0 <I2C_WaitOnFlagUntilTimeout>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d008      	beq.n	80077a4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e13c      	b.n	8007a10 <HAL_I2C_Mem_Read+0x4bc>
 8007796:	bf00      	nop
 8007798:	00100002 	.word	0x00100002
 800779c:	ffff0000 	.word	0xffff0000
 80077a0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80077a4:	b672      	cpsid	i
}
 80077a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691a      	ldr	r2, [r3, #16]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	b2d2      	uxtb	r2, r2
 80077c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077d4:	3b01      	subs	r3, #1
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	3b01      	subs	r3, #1
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80077ea:	b662      	cpsie	i
}
 80077ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	691a      	ldr	r2, [r3, #16]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	b2d2      	uxtb	r2, r2
 80077fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800780a:	3b01      	subs	r3, #1
 800780c:	b29a      	uxth	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007816:	b29b      	uxth	r3, r3
 8007818:	3b01      	subs	r3, #1
 800781a:	b29a      	uxth	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007820:	e0e2      	b.n	80079e8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007828:	2200      	movs	r2, #0
 800782a:	497b      	ldr	r1, [pc, #492]	; (8007a18 <HAL_I2C_Mem_Read+0x4c4>)
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 fbc7 	bl	8007fc0 <I2C_WaitOnFlagUntilTimeout>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d001      	beq.n	800783c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e0e9      	b.n	8007a10 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800784a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800784c:	b672      	cpsid	i
}
 800784e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	691a      	ldr	r2, [r3, #16]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785a:	b2d2      	uxtb	r2, r2
 800785c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007862:	1c5a      	adds	r2, r3, #1
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800786c:	3b01      	subs	r3, #1
 800786e:	b29a      	uxth	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007878:	b29b      	uxth	r3, r3
 800787a:	3b01      	subs	r3, #1
 800787c:	b29a      	uxth	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007882:	4b66      	ldr	r3, [pc, #408]	; (8007a1c <HAL_I2C_Mem_Read+0x4c8>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	08db      	lsrs	r3, r3, #3
 8007888:	4a65      	ldr	r2, [pc, #404]	; (8007a20 <HAL_I2C_Mem_Read+0x4cc>)
 800788a:	fba2 2303 	umull	r2, r3, r2, r3
 800788e:	0a1a      	lsrs	r2, r3, #8
 8007890:	4613      	mov	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	00da      	lsls	r2, r3, #3
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	3b01      	subs	r3, #1
 80078a0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80078a2:	6a3b      	ldr	r3, [r7, #32]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d118      	bne.n	80078da <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2220      	movs	r2, #32
 80078b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c2:	f043 0220 	orr.w	r2, r3, #32
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80078ca:	b662      	cpsie	i
}
 80078cc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e09a      	b.n	8007a10 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	d1d9      	bne.n	800789c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	691a      	ldr	r2, [r3, #16]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007902:	b2d2      	uxtb	r2, r2
 8007904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790a:	1c5a      	adds	r2, r3, #1
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007914:	3b01      	subs	r3, #1
 8007916:	b29a      	uxth	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007920:	b29b      	uxth	r3, r3
 8007922:	3b01      	subs	r3, #1
 8007924:	b29a      	uxth	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800792a:	b662      	cpsie	i
}
 800792c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	691a      	ldr	r2, [r3, #16]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007938:	b2d2      	uxtb	r2, r2
 800793a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800794a:	3b01      	subs	r3, #1
 800794c:	b29a      	uxth	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007956:	b29b      	uxth	r3, r3
 8007958:	3b01      	subs	r3, #1
 800795a:	b29a      	uxth	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007960:	e042      	b.n	80079e8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007964:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f000 fc82 	bl	8008270 <I2C_WaitOnRXNEFlagUntilTimeout>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e04c      	b.n	8007a10 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	691a      	ldr	r2, [r3, #16]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	b2d2      	uxtb	r2, r2
 8007982:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007992:	3b01      	subs	r3, #1
 8007994:	b29a      	uxth	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800799e:	b29b      	uxth	r3, r3
 80079a0:	3b01      	subs	r3, #1
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	f003 0304 	and.w	r3, r3, #4
 80079b2:	2b04      	cmp	r3, #4
 80079b4:	d118      	bne.n	80079e8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	691a      	ldr	r2, [r3, #16]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	b2d2      	uxtb	r2, r2
 80079c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079d2:	3b01      	subs	r3, #1
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079de:	b29b      	uxth	r3, r3
 80079e0:	3b01      	subs	r3, #1
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f47f ae94 	bne.w	800771a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2220      	movs	r2, #32
 80079f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	e000      	b.n	8007a10 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8007a0e:	2302      	movs	r3, #2
  }
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3728      	adds	r7, #40	; 0x28
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	00010004 	.word	0x00010004
 8007a1c:	20000010 	.word	0x20000010
 8007a20:	14f8b589 	.word	0x14f8b589

08007a24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b088      	sub	sp, #32
 8007a28:	af02      	add	r7, sp, #8
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	607a      	str	r2, [r7, #4]
 8007a2e:	603b      	str	r3, [r7, #0]
 8007a30:	460b      	mov	r3, r1
 8007a32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	2b08      	cmp	r3, #8
 8007a3e:	d006      	beq.n	8007a4e <I2C_MasterRequestWrite+0x2a>
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d003      	beq.n	8007a4e <I2C_MasterRequestWrite+0x2a>
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a4c:	d108      	bne.n	8007a60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	e00b      	b.n	8007a78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a64:	2b12      	cmp	r3, #18
 8007a66:	d107      	bne.n	8007a78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f000 fa9b 	bl	8007fc0 <I2C_WaitOnFlagUntilTimeout>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00d      	beq.n	8007aac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a9e:	d103      	bne.n	8007aa8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007aa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e035      	b.n	8007b18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ab4:	d108      	bne.n	8007ac8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ab6:	897b      	ldrh	r3, [r7, #10]
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	461a      	mov	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ac4:	611a      	str	r2, [r3, #16]
 8007ac6:	e01b      	b.n	8007b00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007ac8:	897b      	ldrh	r3, [r7, #10]
 8007aca:	11db      	asrs	r3, r3, #7
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	f003 0306 	and.w	r3, r3, #6
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	f063 030f 	orn	r3, r3, #15
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	490e      	ldr	r1, [pc, #56]	; (8007b20 <I2C_MasterRequestWrite+0xfc>)
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f000 fac1 	bl	800806e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e010      	b.n	8007b18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007af6:	897b      	ldrh	r3, [r7, #10]
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	4907      	ldr	r1, [pc, #28]	; (8007b24 <I2C_MasterRequestWrite+0x100>)
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f000 fab1 	bl	800806e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e000      	b.n	8007b18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	00010008 	.word	0x00010008
 8007b24:	00010002 	.word	0x00010002

08007b28 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af02      	add	r7, sp, #8
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	607a      	str	r2, [r7, #4]
 8007b32:	603b      	str	r3, [r7, #0]
 8007b34:	460b      	mov	r3, r1
 8007b36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b4c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2b08      	cmp	r3, #8
 8007b52:	d006      	beq.n	8007b62 <I2C_MasterRequestRead+0x3a>
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d003      	beq.n	8007b62 <I2C_MasterRequestRead+0x3a>
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b60:	d108      	bne.n	8007b74 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	e00b      	b.n	8007b8c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b78:	2b11      	cmp	r3, #17
 8007b7a:	d107      	bne.n	8007b8c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 fa11 	bl	8007fc0 <I2C_WaitOnFlagUntilTimeout>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00d      	beq.n	8007bc0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bb2:	d103      	bne.n	8007bbc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e079      	b.n	8007cb4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bc8:	d108      	bne.n	8007bdc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007bca:	897b      	ldrh	r3, [r7, #10]
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	f043 0301 	orr.w	r3, r3, #1
 8007bd2:	b2da      	uxtb	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	611a      	str	r2, [r3, #16]
 8007bda:	e05f      	b.n	8007c9c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007bdc:	897b      	ldrh	r3, [r7, #10]
 8007bde:	11db      	asrs	r3, r3, #7
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	f003 0306 	and.w	r3, r3, #6
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	f063 030f 	orn	r3, r3, #15
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	4930      	ldr	r1, [pc, #192]	; (8007cbc <I2C_MasterRequestRead+0x194>)
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 fa37 	bl	800806e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e054      	b.n	8007cb4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007c0a:	897b      	ldrh	r3, [r7, #10]
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	4929      	ldr	r1, [pc, #164]	; (8007cc0 <I2C_MasterRequestRead+0x198>)
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f000 fa27 	bl	800806e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d001      	beq.n	8007c2a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e044      	b.n	8007cb4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	613b      	str	r3, [r7, #16]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	613b      	str	r3, [r7, #16]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	613b      	str	r3, [r7, #16]
 8007c3e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c4e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f000 f9af 	bl	8007fc0 <I2C_WaitOnFlagUntilTimeout>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00d      	beq.n	8007c84 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c76:	d103      	bne.n	8007c80 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c7e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e017      	b.n	8007cb4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007c84:	897b      	ldrh	r3, [r7, #10]
 8007c86:	11db      	asrs	r3, r3, #7
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	f003 0306 	and.w	r3, r3, #6
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	f063 030e 	orn	r3, r3, #14
 8007c94:	b2da      	uxtb	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	4907      	ldr	r1, [pc, #28]	; (8007cc0 <I2C_MasterRequestRead+0x198>)
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 f9e3 	bl	800806e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d001      	beq.n	8007cb2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e000      	b.n	8007cb4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3718      	adds	r7, #24
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	00010008 	.word	0x00010008
 8007cc0:	00010002 	.word	0x00010002

08007cc4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b088      	sub	sp, #32
 8007cc8:	af02      	add	r7, sp, #8
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	4608      	mov	r0, r1
 8007cce:	4611      	mov	r1, r2
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	817b      	strh	r3, [r7, #10]
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	813b      	strh	r3, [r7, #8]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 f960 	bl	8007fc0 <I2C_WaitOnFlagUntilTimeout>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00d      	beq.n	8007d22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d14:	d103      	bne.n	8007d1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e05f      	b.n	8007de2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d22:	897b      	ldrh	r3, [r7, #10]
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	461a      	mov	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	6a3a      	ldr	r2, [r7, #32]
 8007d36:	492d      	ldr	r1, [pc, #180]	; (8007dec <I2C_RequestMemoryWrite+0x128>)
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f000 f998 	bl	800806e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e04c      	b.n	8007de2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d48:	2300      	movs	r3, #0
 8007d4a:	617b      	str	r3, [r7, #20]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	617b      	str	r3, [r7, #20]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	617b      	str	r3, [r7, #20]
 8007d5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d60:	6a39      	ldr	r1, [r7, #32]
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f000 fa02 	bl	800816c <I2C_WaitOnTXEFlagUntilTimeout>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00d      	beq.n	8007d8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d72:	2b04      	cmp	r3, #4
 8007d74:	d107      	bne.n	8007d86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e02b      	b.n	8007de2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d8a:	88fb      	ldrh	r3, [r7, #6]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d105      	bne.n	8007d9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d90:	893b      	ldrh	r3, [r7, #8]
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	611a      	str	r2, [r3, #16]
 8007d9a:	e021      	b.n	8007de0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d9c:	893b      	ldrh	r3, [r7, #8]
 8007d9e:	0a1b      	lsrs	r3, r3, #8
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	b2da      	uxtb	r2, r3
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dac:	6a39      	ldr	r1, [r7, #32]
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f000 f9dc 	bl	800816c <I2C_WaitOnTXEFlagUntilTimeout>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00d      	beq.n	8007dd6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbe:	2b04      	cmp	r3, #4
 8007dc0:	d107      	bne.n	8007dd2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e005      	b.n	8007de2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007dd6:	893b      	ldrh	r3, [r7, #8]
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3718      	adds	r7, #24
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	00010002 	.word	0x00010002

08007df0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b088      	sub	sp, #32
 8007df4:	af02      	add	r7, sp, #8
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	4608      	mov	r0, r1
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	4603      	mov	r3, r0
 8007e00:	817b      	strh	r3, [r7, #10]
 8007e02:	460b      	mov	r3, r1
 8007e04:	813b      	strh	r3, [r7, #8]
 8007e06:	4613      	mov	r3, r2
 8007e08:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e18:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 f8c2 	bl	8007fc0 <I2C_WaitOnFlagUntilTimeout>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00d      	beq.n	8007e5e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e50:	d103      	bne.n	8007e5a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e0aa      	b.n	8007fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007e5e:	897b      	ldrh	r3, [r7, #10]
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	461a      	mov	r2, r3
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007e6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e70:	6a3a      	ldr	r2, [r7, #32]
 8007e72:	4952      	ldr	r1, [pc, #328]	; (8007fbc <I2C_RequestMemoryRead+0x1cc>)
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f000 f8fa 	bl	800806e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e097      	b.n	8007fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e84:	2300      	movs	r3, #0
 8007e86:	617b      	str	r3, [r7, #20]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	695b      	ldr	r3, [r3, #20]
 8007e8e:	617b      	str	r3, [r7, #20]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	617b      	str	r3, [r7, #20]
 8007e98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e9c:	6a39      	ldr	r1, [r7, #32]
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f000 f964 	bl	800816c <I2C_WaitOnTXEFlagUntilTimeout>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00d      	beq.n	8007ec6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eae:	2b04      	cmp	r3, #4
 8007eb0:	d107      	bne.n	8007ec2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ec0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e076      	b.n	8007fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ec6:	88fb      	ldrh	r3, [r7, #6]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d105      	bne.n	8007ed8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ecc:	893b      	ldrh	r3, [r7, #8]
 8007ece:	b2da      	uxtb	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	611a      	str	r2, [r3, #16]
 8007ed6:	e021      	b.n	8007f1c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007ed8:	893b      	ldrh	r3, [r7, #8]
 8007eda:	0a1b      	lsrs	r3, r3, #8
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ee8:	6a39      	ldr	r1, [r7, #32]
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f000 f93e 	bl	800816c <I2C_WaitOnTXEFlagUntilTimeout>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00d      	beq.n	8007f12 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d107      	bne.n	8007f0e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e050      	b.n	8007fb4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f12:	893b      	ldrh	r3, [r7, #8]
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f1e:	6a39      	ldr	r1, [r7, #32]
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 f923 	bl	800816c <I2C_WaitOnTXEFlagUntilTimeout>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00d      	beq.n	8007f48 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f30:	2b04      	cmp	r3, #4
 8007f32:	d107      	bne.n	8007f44 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f42:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e035      	b.n	8007fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f56:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f000 f82b 	bl	8007fc0 <I2C_WaitOnFlagUntilTimeout>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00d      	beq.n	8007f8c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f7e:	d103      	bne.n	8007f88 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e013      	b.n	8007fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007f8c:	897b      	ldrh	r3, [r7, #10]
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	f043 0301 	orr.w	r3, r3, #1
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	6a3a      	ldr	r2, [r7, #32]
 8007fa0:	4906      	ldr	r1, [pc, #24]	; (8007fbc <I2C_RequestMemoryRead+0x1cc>)
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f000 f863 	bl	800806e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d001      	beq.n	8007fb2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e000      	b.n	8007fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	00010002 	.word	0x00010002

08007fc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	603b      	str	r3, [r7, #0]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fd0:	e025      	b.n	800801e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd8:	d021      	beq.n	800801e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fda:	f7fd ffc9 	bl	8005f70 <HAL_GetTick>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	683a      	ldr	r2, [r7, #0]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d302      	bcc.n	8007ff0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d116      	bne.n	800801e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800a:	f043 0220 	orr.w	r2, r3, #32
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e023      	b.n	8008066 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	0c1b      	lsrs	r3, r3, #16
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b01      	cmp	r3, #1
 8008026:	d10d      	bne.n	8008044 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	43da      	mvns	r2, r3
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	4013      	ands	r3, r2
 8008034:	b29b      	uxth	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	bf0c      	ite	eq
 800803a:	2301      	moveq	r3, #1
 800803c:	2300      	movne	r3, #0
 800803e:	b2db      	uxtb	r3, r3
 8008040:	461a      	mov	r2, r3
 8008042:	e00c      	b.n	800805e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	43da      	mvns	r2, r3
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	4013      	ands	r3, r2
 8008050:	b29b      	uxth	r3, r3
 8008052:	2b00      	cmp	r3, #0
 8008054:	bf0c      	ite	eq
 8008056:	2301      	moveq	r3, #1
 8008058:	2300      	movne	r3, #0
 800805a:	b2db      	uxtb	r3, r3
 800805c:	461a      	mov	r2, r3
 800805e:	79fb      	ldrb	r3, [r7, #7]
 8008060:	429a      	cmp	r2, r3
 8008062:	d0b6      	beq.n	8007fd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b084      	sub	sp, #16
 8008072:	af00      	add	r7, sp, #0
 8008074:	60f8      	str	r0, [r7, #12]
 8008076:	60b9      	str	r1, [r7, #8]
 8008078:	607a      	str	r2, [r7, #4]
 800807a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800807c:	e051      	b.n	8008122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	695b      	ldr	r3, [r3, #20]
 8008084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800808c:	d123      	bne.n	80080d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800809c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80080a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2220      	movs	r2, #32
 80080b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c2:	f043 0204 	orr.w	r2, r3, #4
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e046      	b.n	8008164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080dc:	d021      	beq.n	8008122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080de:	f7fd ff47 	bl	8005f70 <HAL_GetTick>
 80080e2:	4602      	mov	r2, r0
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d302      	bcc.n	80080f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d116      	bne.n	8008122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2220      	movs	r2, #32
 80080fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810e:	f043 0220 	orr.w	r2, r3, #32
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e020      	b.n	8008164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	0c1b      	lsrs	r3, r3, #16
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b01      	cmp	r3, #1
 800812a:	d10c      	bne.n	8008146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	43da      	mvns	r2, r3
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	4013      	ands	r3, r2
 8008138:	b29b      	uxth	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	bf14      	ite	ne
 800813e:	2301      	movne	r3, #1
 8008140:	2300      	moveq	r3, #0
 8008142:	b2db      	uxtb	r3, r3
 8008144:	e00b      	b.n	800815e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	43da      	mvns	r2, r3
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	4013      	ands	r3, r2
 8008152:	b29b      	uxth	r3, r3
 8008154:	2b00      	cmp	r3, #0
 8008156:	bf14      	ite	ne
 8008158:	2301      	movne	r3, #1
 800815a:	2300      	moveq	r3, #0
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d18d      	bne.n	800807e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008178:	e02d      	b.n	80081d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 f8ce 	bl	800831c <I2C_IsAcknowledgeFailed>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e02d      	b.n	80081e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008190:	d021      	beq.n	80081d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008192:	f7fd feed 	bl	8005f70 <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d302      	bcc.n	80081a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d116      	bne.n	80081d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2220      	movs	r2, #32
 80081b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c2:	f043 0220 	orr.w	r2, r3, #32
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e007      	b.n	80081e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e0:	2b80      	cmp	r3, #128	; 0x80
 80081e2:	d1ca      	bne.n	800817a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b084      	sub	sp, #16
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	60f8      	str	r0, [r7, #12]
 80081f6:	60b9      	str	r1, [r7, #8]
 80081f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80081fa:	e02d      	b.n	8008258 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 f88d 	bl	800831c <I2C_IsAcknowledgeFailed>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e02d      	b.n	8008268 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008212:	d021      	beq.n	8008258 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008214:	f7fd feac 	bl	8005f70 <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	429a      	cmp	r2, r3
 8008222:	d302      	bcc.n	800822a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d116      	bne.n	8008258 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2220      	movs	r2, #32
 8008234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008244:	f043 0220 	orr.w	r2, r3, #32
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e007      	b.n	8008268 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	f003 0304 	and.w	r3, r3, #4
 8008262:	2b04      	cmp	r3, #4
 8008264:	d1ca      	bne.n	80081fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800827c:	e042      	b.n	8008304 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	695b      	ldr	r3, [r3, #20]
 8008284:	f003 0310 	and.w	r3, r3, #16
 8008288:	2b10      	cmp	r3, #16
 800828a:	d119      	bne.n	80082c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f06f 0210 	mvn.w	r2, #16
 8008294:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2220      	movs	r2, #32
 80082a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e029      	b.n	8008314 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082c0:	f7fd fe56 	bl	8005f70 <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d302      	bcc.n	80082d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d116      	bne.n	8008304 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2220      	movs	r2, #32
 80082e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f0:	f043 0220 	orr.w	r2, r3, #32
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e007      	b.n	8008314 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800830e:	2b40      	cmp	r3, #64	; 0x40
 8008310:	d1b5      	bne.n	800827e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800832e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008332:	d11b      	bne.n	800836c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800833c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2220      	movs	r2, #32
 8008348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008358:	f043 0204 	orr.w	r2, r3, #4
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	e000      	b.n	800836e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	bc80      	pop	{r7}
 8008376:	4770      	bx	lr

08008378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e26c      	b.n	8008864 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 8087 	beq.w	80084a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008398:	4b92      	ldr	r3, [pc, #584]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	f003 030c 	and.w	r3, r3, #12
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	d00c      	beq.n	80083be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80083a4:	4b8f      	ldr	r3, [pc, #572]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	f003 030c 	and.w	r3, r3, #12
 80083ac:	2b08      	cmp	r3, #8
 80083ae:	d112      	bne.n	80083d6 <HAL_RCC_OscConfig+0x5e>
 80083b0:	4b8c      	ldr	r3, [pc, #560]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083bc:	d10b      	bne.n	80083d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083be:	4b89      	ldr	r3, [pc, #548]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d06c      	beq.n	80084a4 <HAL_RCC_OscConfig+0x12c>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d168      	bne.n	80084a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e246      	b.n	8008864 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083de:	d106      	bne.n	80083ee <HAL_RCC_OscConfig+0x76>
 80083e0:	4b80      	ldr	r3, [pc, #512]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a7f      	ldr	r2, [pc, #508]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 80083e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083ea:	6013      	str	r3, [r2, #0]
 80083ec:	e02e      	b.n	800844c <HAL_RCC_OscConfig+0xd4>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10c      	bne.n	8008410 <HAL_RCC_OscConfig+0x98>
 80083f6:	4b7b      	ldr	r3, [pc, #492]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a7a      	ldr	r2, [pc, #488]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 80083fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008400:	6013      	str	r3, [r2, #0]
 8008402:	4b78      	ldr	r3, [pc, #480]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a77      	ldr	r2, [pc, #476]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 8008408:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800840c:	6013      	str	r3, [r2, #0]
 800840e:	e01d      	b.n	800844c <HAL_RCC_OscConfig+0xd4>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008418:	d10c      	bne.n	8008434 <HAL_RCC_OscConfig+0xbc>
 800841a:	4b72      	ldr	r3, [pc, #456]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a71      	ldr	r2, [pc, #452]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 8008420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008424:	6013      	str	r3, [r2, #0]
 8008426:	4b6f      	ldr	r3, [pc, #444]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a6e      	ldr	r2, [pc, #440]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 800842c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008430:	6013      	str	r3, [r2, #0]
 8008432:	e00b      	b.n	800844c <HAL_RCC_OscConfig+0xd4>
 8008434:	4b6b      	ldr	r3, [pc, #428]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a6a      	ldr	r2, [pc, #424]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 800843a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800843e:	6013      	str	r3, [r2, #0]
 8008440:	4b68      	ldr	r3, [pc, #416]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a67      	ldr	r2, [pc, #412]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 8008446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800844a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d013      	beq.n	800847c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008454:	f7fd fd8c 	bl	8005f70 <HAL_GetTick>
 8008458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800845a:	e008      	b.n	800846e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800845c:	f7fd fd88 	bl	8005f70 <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	2b64      	cmp	r3, #100	; 0x64
 8008468:	d901      	bls.n	800846e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	e1fa      	b.n	8008864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800846e:	4b5d      	ldr	r3, [pc, #372]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d0f0      	beq.n	800845c <HAL_RCC_OscConfig+0xe4>
 800847a:	e014      	b.n	80084a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800847c:	f7fd fd78 	bl	8005f70 <HAL_GetTick>
 8008480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008482:	e008      	b.n	8008496 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008484:	f7fd fd74 	bl	8005f70 <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	2b64      	cmp	r3, #100	; 0x64
 8008490:	d901      	bls.n	8008496 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e1e6      	b.n	8008864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008496:	4b53      	ldr	r3, [pc, #332]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1f0      	bne.n	8008484 <HAL_RCC_OscConfig+0x10c>
 80084a2:	e000      	b.n	80084a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0302 	and.w	r3, r3, #2
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d063      	beq.n	800857a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80084b2:	4b4c      	ldr	r3, [pc, #304]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f003 030c 	and.w	r3, r3, #12
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00b      	beq.n	80084d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80084be:	4b49      	ldr	r3, [pc, #292]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	f003 030c 	and.w	r3, r3, #12
 80084c6:	2b08      	cmp	r3, #8
 80084c8:	d11c      	bne.n	8008504 <HAL_RCC_OscConfig+0x18c>
 80084ca:	4b46      	ldr	r3, [pc, #280]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d116      	bne.n	8008504 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084d6:	4b43      	ldr	r3, [pc, #268]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0302 	and.w	r3, r3, #2
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d005      	beq.n	80084ee <HAL_RCC_OscConfig+0x176>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d001      	beq.n	80084ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e1ba      	b.n	8008864 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084ee:	4b3d      	ldr	r3, [pc, #244]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	00db      	lsls	r3, r3, #3
 80084fc:	4939      	ldr	r1, [pc, #228]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008502:	e03a      	b.n	800857a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d020      	beq.n	800854e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800850c:	4b36      	ldr	r3, [pc, #216]	; (80085e8 <HAL_RCC_OscConfig+0x270>)
 800850e:	2201      	movs	r2, #1
 8008510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008512:	f7fd fd2d 	bl	8005f70 <HAL_GetTick>
 8008516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008518:	e008      	b.n	800852c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800851a:	f7fd fd29 	bl	8005f70 <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	2b02      	cmp	r3, #2
 8008526:	d901      	bls.n	800852c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008528:	2303      	movs	r3, #3
 800852a:	e19b      	b.n	8008864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800852c:	4b2d      	ldr	r3, [pc, #180]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0302 	and.w	r3, r3, #2
 8008534:	2b00      	cmp	r3, #0
 8008536:	d0f0      	beq.n	800851a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008538:	4b2a      	ldr	r3, [pc, #168]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	695b      	ldr	r3, [r3, #20]
 8008544:	00db      	lsls	r3, r3, #3
 8008546:	4927      	ldr	r1, [pc, #156]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 8008548:	4313      	orrs	r3, r2
 800854a:	600b      	str	r3, [r1, #0]
 800854c:	e015      	b.n	800857a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800854e:	4b26      	ldr	r3, [pc, #152]	; (80085e8 <HAL_RCC_OscConfig+0x270>)
 8008550:	2200      	movs	r2, #0
 8008552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008554:	f7fd fd0c 	bl	8005f70 <HAL_GetTick>
 8008558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800855a:	e008      	b.n	800856e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800855c:	f7fd fd08 	bl	8005f70 <HAL_GetTick>
 8008560:	4602      	mov	r2, r0
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	2b02      	cmp	r3, #2
 8008568:	d901      	bls.n	800856e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e17a      	b.n	8008864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800856e:	4b1d      	ldr	r3, [pc, #116]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0302 	and.w	r3, r3, #2
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1f0      	bne.n	800855c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0308 	and.w	r3, r3, #8
 8008582:	2b00      	cmp	r3, #0
 8008584:	d03a      	beq.n	80085fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d019      	beq.n	80085c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800858e:	4b17      	ldr	r3, [pc, #92]	; (80085ec <HAL_RCC_OscConfig+0x274>)
 8008590:	2201      	movs	r2, #1
 8008592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008594:	f7fd fcec 	bl	8005f70 <HAL_GetTick>
 8008598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800859a:	e008      	b.n	80085ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800859c:	f7fd fce8 	bl	8005f70 <HAL_GetTick>
 80085a0:	4602      	mov	r2, r0
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	d901      	bls.n	80085ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	e15a      	b.n	8008864 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085ae:	4b0d      	ldr	r3, [pc, #52]	; (80085e4 <HAL_RCC_OscConfig+0x26c>)
 80085b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b2:	f003 0302 	and.w	r3, r3, #2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d0f0      	beq.n	800859c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80085ba:	2001      	movs	r0, #1
 80085bc:	f000 fad8 	bl	8008b70 <RCC_Delay>
 80085c0:	e01c      	b.n	80085fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085c2:	4b0a      	ldr	r3, [pc, #40]	; (80085ec <HAL_RCC_OscConfig+0x274>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085c8:	f7fd fcd2 	bl	8005f70 <HAL_GetTick>
 80085cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085ce:	e00f      	b.n	80085f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085d0:	f7fd fcce 	bl	8005f70 <HAL_GetTick>
 80085d4:	4602      	mov	r2, r0
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d908      	bls.n	80085f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e140      	b.n	8008864 <HAL_RCC_OscConfig+0x4ec>
 80085e2:	bf00      	nop
 80085e4:	40021000 	.word	0x40021000
 80085e8:	42420000 	.word	0x42420000
 80085ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085f0:	4b9e      	ldr	r3, [pc, #632]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 80085f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f4:	f003 0302 	and.w	r3, r3, #2
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1e9      	bne.n	80085d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0304 	and.w	r3, r3, #4
 8008604:	2b00      	cmp	r3, #0
 8008606:	f000 80a6 	beq.w	8008756 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800860a:	2300      	movs	r3, #0
 800860c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800860e:	4b97      	ldr	r3, [pc, #604]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 8008610:	69db      	ldr	r3, [r3, #28]
 8008612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10d      	bne.n	8008636 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800861a:	4b94      	ldr	r3, [pc, #592]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	4a93      	ldr	r2, [pc, #588]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 8008620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008624:	61d3      	str	r3, [r2, #28]
 8008626:	4b91      	ldr	r3, [pc, #580]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 8008628:	69db      	ldr	r3, [r3, #28]
 800862a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800862e:	60bb      	str	r3, [r7, #8]
 8008630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008632:	2301      	movs	r3, #1
 8008634:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008636:	4b8e      	ldr	r3, [pc, #568]	; (8008870 <HAL_RCC_OscConfig+0x4f8>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800863e:	2b00      	cmp	r3, #0
 8008640:	d118      	bne.n	8008674 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008642:	4b8b      	ldr	r3, [pc, #556]	; (8008870 <HAL_RCC_OscConfig+0x4f8>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a8a      	ldr	r2, [pc, #552]	; (8008870 <HAL_RCC_OscConfig+0x4f8>)
 8008648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800864c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800864e:	f7fd fc8f 	bl	8005f70 <HAL_GetTick>
 8008652:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008654:	e008      	b.n	8008668 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008656:	f7fd fc8b 	bl	8005f70 <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	2b64      	cmp	r3, #100	; 0x64
 8008662:	d901      	bls.n	8008668 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e0fd      	b.n	8008864 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008668:	4b81      	ldr	r3, [pc, #516]	; (8008870 <HAL_RCC_OscConfig+0x4f8>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008670:	2b00      	cmp	r3, #0
 8008672:	d0f0      	beq.n	8008656 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d106      	bne.n	800868a <HAL_RCC_OscConfig+0x312>
 800867c:	4b7b      	ldr	r3, [pc, #492]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 800867e:	6a1b      	ldr	r3, [r3, #32]
 8008680:	4a7a      	ldr	r2, [pc, #488]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 8008682:	f043 0301 	orr.w	r3, r3, #1
 8008686:	6213      	str	r3, [r2, #32]
 8008688:	e02d      	b.n	80086e6 <HAL_RCC_OscConfig+0x36e>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10c      	bne.n	80086ac <HAL_RCC_OscConfig+0x334>
 8008692:	4b76      	ldr	r3, [pc, #472]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	4a75      	ldr	r2, [pc, #468]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 8008698:	f023 0301 	bic.w	r3, r3, #1
 800869c:	6213      	str	r3, [r2, #32]
 800869e:	4b73      	ldr	r3, [pc, #460]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	4a72      	ldr	r2, [pc, #456]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 80086a4:	f023 0304 	bic.w	r3, r3, #4
 80086a8:	6213      	str	r3, [r2, #32]
 80086aa:	e01c      	b.n	80086e6 <HAL_RCC_OscConfig+0x36e>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	2b05      	cmp	r3, #5
 80086b2:	d10c      	bne.n	80086ce <HAL_RCC_OscConfig+0x356>
 80086b4:	4b6d      	ldr	r3, [pc, #436]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 80086b6:	6a1b      	ldr	r3, [r3, #32]
 80086b8:	4a6c      	ldr	r2, [pc, #432]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 80086ba:	f043 0304 	orr.w	r3, r3, #4
 80086be:	6213      	str	r3, [r2, #32]
 80086c0:	4b6a      	ldr	r3, [pc, #424]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 80086c2:	6a1b      	ldr	r3, [r3, #32]
 80086c4:	4a69      	ldr	r2, [pc, #420]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 80086c6:	f043 0301 	orr.w	r3, r3, #1
 80086ca:	6213      	str	r3, [r2, #32]
 80086cc:	e00b      	b.n	80086e6 <HAL_RCC_OscConfig+0x36e>
 80086ce:	4b67      	ldr	r3, [pc, #412]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	4a66      	ldr	r2, [pc, #408]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 80086d4:	f023 0301 	bic.w	r3, r3, #1
 80086d8:	6213      	str	r3, [r2, #32]
 80086da:	4b64      	ldr	r3, [pc, #400]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	4a63      	ldr	r2, [pc, #396]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 80086e0:	f023 0304 	bic.w	r3, r3, #4
 80086e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d015      	beq.n	800871a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086ee:	f7fd fc3f 	bl	8005f70 <HAL_GetTick>
 80086f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086f4:	e00a      	b.n	800870c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086f6:	f7fd fc3b 	bl	8005f70 <HAL_GetTick>
 80086fa:	4602      	mov	r2, r0
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	f241 3288 	movw	r2, #5000	; 0x1388
 8008704:	4293      	cmp	r3, r2
 8008706:	d901      	bls.n	800870c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e0ab      	b.n	8008864 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800870c:	4b57      	ldr	r3, [pc, #348]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 800870e:	6a1b      	ldr	r3, [r3, #32]
 8008710:	f003 0302 	and.w	r3, r3, #2
 8008714:	2b00      	cmp	r3, #0
 8008716:	d0ee      	beq.n	80086f6 <HAL_RCC_OscConfig+0x37e>
 8008718:	e014      	b.n	8008744 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800871a:	f7fd fc29 	bl	8005f70 <HAL_GetTick>
 800871e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008720:	e00a      	b.n	8008738 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008722:	f7fd fc25 	bl	8005f70 <HAL_GetTick>
 8008726:	4602      	mov	r2, r0
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008730:	4293      	cmp	r3, r2
 8008732:	d901      	bls.n	8008738 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e095      	b.n	8008864 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008738:	4b4c      	ldr	r3, [pc, #304]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 800873a:	6a1b      	ldr	r3, [r3, #32]
 800873c:	f003 0302 	and.w	r3, r3, #2
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1ee      	bne.n	8008722 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008744:	7dfb      	ldrb	r3, [r7, #23]
 8008746:	2b01      	cmp	r3, #1
 8008748:	d105      	bne.n	8008756 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800874a:	4b48      	ldr	r3, [pc, #288]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 800874c:	69db      	ldr	r3, [r3, #28]
 800874e:	4a47      	ldr	r2, [pc, #284]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 8008750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008754:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	2b00      	cmp	r3, #0
 800875c:	f000 8081 	beq.w	8008862 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008760:	4b42      	ldr	r3, [pc, #264]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f003 030c 	and.w	r3, r3, #12
 8008768:	2b08      	cmp	r3, #8
 800876a:	d061      	beq.n	8008830 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	69db      	ldr	r3, [r3, #28]
 8008770:	2b02      	cmp	r3, #2
 8008772:	d146      	bne.n	8008802 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008774:	4b3f      	ldr	r3, [pc, #252]	; (8008874 <HAL_RCC_OscConfig+0x4fc>)
 8008776:	2200      	movs	r2, #0
 8008778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800877a:	f7fd fbf9 	bl	8005f70 <HAL_GetTick>
 800877e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008780:	e008      	b.n	8008794 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008782:	f7fd fbf5 	bl	8005f70 <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	2b02      	cmp	r3, #2
 800878e:	d901      	bls.n	8008794 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e067      	b.n	8008864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008794:	4b35      	ldr	r3, [pc, #212]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1f0      	bne.n	8008782 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a1b      	ldr	r3, [r3, #32]
 80087a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087a8:	d108      	bne.n	80087bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80087aa:	4b30      	ldr	r3, [pc, #192]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	492d      	ldr	r1, [pc, #180]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087bc:	4b2b      	ldr	r3, [pc, #172]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a19      	ldr	r1, [r3, #32]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087cc:	430b      	orrs	r3, r1
 80087ce:	4927      	ldr	r1, [pc, #156]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 80087d0:	4313      	orrs	r3, r2
 80087d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087d4:	4b27      	ldr	r3, [pc, #156]	; (8008874 <HAL_RCC_OscConfig+0x4fc>)
 80087d6:	2201      	movs	r2, #1
 80087d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087da:	f7fd fbc9 	bl	8005f70 <HAL_GetTick>
 80087de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80087e0:	e008      	b.n	80087f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087e2:	f7fd fbc5 	bl	8005f70 <HAL_GetTick>
 80087e6:	4602      	mov	r2, r0
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d901      	bls.n	80087f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e037      	b.n	8008864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80087f4:	4b1d      	ldr	r3, [pc, #116]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d0f0      	beq.n	80087e2 <HAL_RCC_OscConfig+0x46a>
 8008800:	e02f      	b.n	8008862 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008802:	4b1c      	ldr	r3, [pc, #112]	; (8008874 <HAL_RCC_OscConfig+0x4fc>)
 8008804:	2200      	movs	r2, #0
 8008806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008808:	f7fd fbb2 	bl	8005f70 <HAL_GetTick>
 800880c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800880e:	e008      	b.n	8008822 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008810:	f7fd fbae 	bl	8005f70 <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	2b02      	cmp	r3, #2
 800881c:	d901      	bls.n	8008822 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e020      	b.n	8008864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008822:	4b12      	ldr	r3, [pc, #72]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1f0      	bne.n	8008810 <HAL_RCC_OscConfig+0x498>
 800882e:	e018      	b.n	8008862 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	69db      	ldr	r3, [r3, #28]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d101      	bne.n	800883c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e013      	b.n	8008864 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800883c:	4b0b      	ldr	r3, [pc, #44]	; (800886c <HAL_RCC_OscConfig+0x4f4>)
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a1b      	ldr	r3, [r3, #32]
 800884c:	429a      	cmp	r2, r3
 800884e:	d106      	bne.n	800885e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800885a:	429a      	cmp	r2, r3
 800885c:	d001      	beq.n	8008862 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e000      	b.n	8008864 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3718      	adds	r7, #24
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	40021000 	.word	0x40021000
 8008870:	40007000 	.word	0x40007000
 8008874:	42420060 	.word	0x42420060

08008878 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d101      	bne.n	800888c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e0d0      	b.n	8008a2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800888c:	4b6a      	ldr	r3, [pc, #424]	; (8008a38 <HAL_RCC_ClockConfig+0x1c0>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0307 	and.w	r3, r3, #7
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	429a      	cmp	r2, r3
 8008898:	d910      	bls.n	80088bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800889a:	4b67      	ldr	r3, [pc, #412]	; (8008a38 <HAL_RCC_ClockConfig+0x1c0>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f023 0207 	bic.w	r2, r3, #7
 80088a2:	4965      	ldr	r1, [pc, #404]	; (8008a38 <HAL_RCC_ClockConfig+0x1c0>)
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088aa:	4b63      	ldr	r3, [pc, #396]	; (8008a38 <HAL_RCC_ClockConfig+0x1c0>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 0307 	and.w	r3, r3, #7
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d001      	beq.n	80088bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e0b8      	b.n	8008a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0302 	and.w	r3, r3, #2
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d020      	beq.n	800890a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0304 	and.w	r3, r3, #4
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d005      	beq.n	80088e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088d4:	4b59      	ldr	r3, [pc, #356]	; (8008a3c <HAL_RCC_ClockConfig+0x1c4>)
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	4a58      	ldr	r2, [pc, #352]	; (8008a3c <HAL_RCC_ClockConfig+0x1c4>)
 80088da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80088de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0308 	and.w	r3, r3, #8
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d005      	beq.n	80088f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80088ec:	4b53      	ldr	r3, [pc, #332]	; (8008a3c <HAL_RCC_ClockConfig+0x1c4>)
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	4a52      	ldr	r2, [pc, #328]	; (8008a3c <HAL_RCC_ClockConfig+0x1c4>)
 80088f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80088f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088f8:	4b50      	ldr	r3, [pc, #320]	; (8008a3c <HAL_RCC_ClockConfig+0x1c4>)
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	494d      	ldr	r1, [pc, #308]	; (8008a3c <HAL_RCC_ClockConfig+0x1c4>)
 8008906:	4313      	orrs	r3, r2
 8008908:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d040      	beq.n	8008998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d107      	bne.n	800892e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800891e:	4b47      	ldr	r3, [pc, #284]	; (8008a3c <HAL_RCC_ClockConfig+0x1c4>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008926:	2b00      	cmp	r3, #0
 8008928:	d115      	bne.n	8008956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	e07f      	b.n	8008a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	2b02      	cmp	r3, #2
 8008934:	d107      	bne.n	8008946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008936:	4b41      	ldr	r3, [pc, #260]	; (8008a3c <HAL_RCC_ClockConfig+0x1c4>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800893e:	2b00      	cmp	r3, #0
 8008940:	d109      	bne.n	8008956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	e073      	b.n	8008a2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008946:	4b3d      	ldr	r3, [pc, #244]	; (8008a3c <HAL_RCC_ClockConfig+0x1c4>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e06b      	b.n	8008a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008956:	4b39      	ldr	r3, [pc, #228]	; (8008a3c <HAL_RCC_ClockConfig+0x1c4>)
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	f023 0203 	bic.w	r2, r3, #3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	4936      	ldr	r1, [pc, #216]	; (8008a3c <HAL_RCC_ClockConfig+0x1c4>)
 8008964:	4313      	orrs	r3, r2
 8008966:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008968:	f7fd fb02 	bl	8005f70 <HAL_GetTick>
 800896c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800896e:	e00a      	b.n	8008986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008970:	f7fd fafe 	bl	8005f70 <HAL_GetTick>
 8008974:	4602      	mov	r2, r0
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	f241 3288 	movw	r2, #5000	; 0x1388
 800897e:	4293      	cmp	r3, r2
 8008980:	d901      	bls.n	8008986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e053      	b.n	8008a2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008986:	4b2d      	ldr	r3, [pc, #180]	; (8008a3c <HAL_RCC_ClockConfig+0x1c4>)
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	f003 020c 	and.w	r2, r3, #12
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	429a      	cmp	r2, r3
 8008996:	d1eb      	bne.n	8008970 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008998:	4b27      	ldr	r3, [pc, #156]	; (8008a38 <HAL_RCC_ClockConfig+0x1c0>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 0307 	and.w	r3, r3, #7
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d210      	bcs.n	80089c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089a6:	4b24      	ldr	r3, [pc, #144]	; (8008a38 <HAL_RCC_ClockConfig+0x1c0>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f023 0207 	bic.w	r2, r3, #7
 80089ae:	4922      	ldr	r1, [pc, #136]	; (8008a38 <HAL_RCC_ClockConfig+0x1c0>)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089b6:	4b20      	ldr	r3, [pc, #128]	; (8008a38 <HAL_RCC_ClockConfig+0x1c0>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 0307 	and.w	r3, r3, #7
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d001      	beq.n	80089c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e032      	b.n	8008a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 0304 	and.w	r3, r3, #4
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d008      	beq.n	80089e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089d4:	4b19      	ldr	r3, [pc, #100]	; (8008a3c <HAL_RCC_ClockConfig+0x1c4>)
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	4916      	ldr	r1, [pc, #88]	; (8008a3c <HAL_RCC_ClockConfig+0x1c4>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0308 	and.w	r3, r3, #8
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d009      	beq.n	8008a06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80089f2:	4b12      	ldr	r3, [pc, #72]	; (8008a3c <HAL_RCC_ClockConfig+0x1c4>)
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	490e      	ldr	r1, [pc, #56]	; (8008a3c <HAL_RCC_ClockConfig+0x1c4>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008a06:	f000 f821 	bl	8008a4c <HAL_RCC_GetSysClockFreq>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	4b0b      	ldr	r3, [pc, #44]	; (8008a3c <HAL_RCC_ClockConfig+0x1c4>)
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	091b      	lsrs	r3, r3, #4
 8008a12:	f003 030f 	and.w	r3, r3, #15
 8008a16:	490a      	ldr	r1, [pc, #40]	; (8008a40 <HAL_RCC_ClockConfig+0x1c8>)
 8008a18:	5ccb      	ldrb	r3, [r1, r3]
 8008a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a1e:	4a09      	ldr	r2, [pc, #36]	; (8008a44 <HAL_RCC_ClockConfig+0x1cc>)
 8008a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008a22:	4b09      	ldr	r3, [pc, #36]	; (8008a48 <HAL_RCC_ClockConfig+0x1d0>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fd fa60 	bl	8005eec <HAL_InitTick>

  return HAL_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	40022000 	.word	0x40022000
 8008a3c:	40021000 	.word	0x40021000
 8008a40:	08011134 	.word	0x08011134
 8008a44:	20000010 	.word	0x20000010
 8008a48:	20000014 	.word	0x20000014

08008a4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a4c:	b490      	push	{r4, r7}
 8008a4e:	b08a      	sub	sp, #40	; 0x28
 8008a50:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008a52:	4b2a      	ldr	r3, [pc, #168]	; (8008afc <HAL_RCC_GetSysClockFreq+0xb0>)
 8008a54:	1d3c      	adds	r4, r7, #4
 8008a56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008a58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008a5c:	f240 2301 	movw	r3, #513	; 0x201
 8008a60:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008a62:	2300      	movs	r3, #0
 8008a64:	61fb      	str	r3, [r7, #28]
 8008a66:	2300      	movs	r3, #0
 8008a68:	61bb      	str	r3, [r7, #24]
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a6e:	2300      	movs	r3, #0
 8008a70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008a72:	2300      	movs	r3, #0
 8008a74:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008a76:	4b22      	ldr	r3, [pc, #136]	; (8008b00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	f003 030c 	and.w	r3, r3, #12
 8008a82:	2b04      	cmp	r3, #4
 8008a84:	d002      	beq.n	8008a8c <HAL_RCC_GetSysClockFreq+0x40>
 8008a86:	2b08      	cmp	r3, #8
 8008a88:	d003      	beq.n	8008a92 <HAL_RCC_GetSysClockFreq+0x46>
 8008a8a:	e02d      	b.n	8008ae8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008a8c:	4b1d      	ldr	r3, [pc, #116]	; (8008b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a8e:	623b      	str	r3, [r7, #32]
      break;
 8008a90:	e02d      	b.n	8008aee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	0c9b      	lsrs	r3, r3, #18
 8008a96:	f003 030f 	and.w	r3, r3, #15
 8008a9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008aa4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d013      	beq.n	8008ad8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008ab0:	4b13      	ldr	r3, [pc, #76]	; (8008b00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	0c5b      	lsrs	r3, r3, #17
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008abe:	4413      	add	r3, r2
 8008ac0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008ac4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	4a0e      	ldr	r2, [pc, #56]	; (8008b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008aca:	fb02 f203 	mul.w	r2, r2, r3
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ad6:	e004      	b.n	8008ae2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	4a0b      	ldr	r2, [pc, #44]	; (8008b08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008adc:	fb02 f303 	mul.w	r3, r2, r3
 8008ae0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	623b      	str	r3, [r7, #32]
      break;
 8008ae6:	e002      	b.n	8008aee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008ae8:	4b06      	ldr	r3, [pc, #24]	; (8008b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008aea:	623b      	str	r3, [r7, #32]
      break;
 8008aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008aee:	6a3b      	ldr	r3, [r7, #32]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3728      	adds	r7, #40	; 0x28
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bc90      	pop	{r4, r7}
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	08011124 	.word	0x08011124
 8008b00:	40021000 	.word	0x40021000
 8008b04:	007a1200 	.word	0x007a1200
 8008b08:	003d0900 	.word	0x003d0900

08008b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b10:	4b02      	ldr	r3, [pc, #8]	; (8008b1c <HAL_RCC_GetHCLKFreq+0x10>)
 8008b12:	681b      	ldr	r3, [r3, #0]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bc80      	pop	{r7}
 8008b1a:	4770      	bx	lr
 8008b1c:	20000010 	.word	0x20000010

08008b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008b24:	f7ff fff2 	bl	8008b0c <HAL_RCC_GetHCLKFreq>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	4b05      	ldr	r3, [pc, #20]	; (8008b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	0a1b      	lsrs	r3, r3, #8
 8008b30:	f003 0307 	and.w	r3, r3, #7
 8008b34:	4903      	ldr	r1, [pc, #12]	; (8008b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b36:	5ccb      	ldrb	r3, [r1, r3]
 8008b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	40021000 	.word	0x40021000
 8008b44:	08011144 	.word	0x08011144

08008b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008b4c:	f7ff ffde 	bl	8008b0c <HAL_RCC_GetHCLKFreq>
 8008b50:	4602      	mov	r2, r0
 8008b52:	4b05      	ldr	r3, [pc, #20]	; (8008b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	0adb      	lsrs	r3, r3, #11
 8008b58:	f003 0307 	and.w	r3, r3, #7
 8008b5c:	4903      	ldr	r1, [pc, #12]	; (8008b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b5e:	5ccb      	ldrb	r3, [r1, r3]
 8008b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	40021000 	.word	0x40021000
 8008b6c:	08011144 	.word	0x08011144

08008b70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008b78:	4b0a      	ldr	r3, [pc, #40]	; (8008ba4 <RCC_Delay+0x34>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a0a      	ldr	r2, [pc, #40]	; (8008ba8 <RCC_Delay+0x38>)
 8008b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b82:	0a5b      	lsrs	r3, r3, #9
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	fb02 f303 	mul.w	r3, r2, r3
 8008b8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008b8c:	bf00      	nop
  }
  while (Delay --);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	1e5a      	subs	r2, r3, #1
 8008b92:	60fa      	str	r2, [r7, #12]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d1f9      	bne.n	8008b8c <RCC_Delay+0x1c>
}
 8008b98:	bf00      	nop
 8008b9a:	bf00      	nop
 8008b9c:	3714      	adds	r7, #20
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bc80      	pop	{r7}
 8008ba2:	4770      	bx	lr
 8008ba4:	20000010 	.word	0x20000010
 8008ba8:	10624dd3 	.word	0x10624dd3

08008bac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e076      	b.n	8008cac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d108      	bne.n	8008bd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bce:	d009      	beq.n	8008be4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	61da      	str	r2, [r3, #28]
 8008bd6:	e005      	b.n	8008be4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d106      	bne.n	8008c04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7fc fb8a 	bl	8005318 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2202      	movs	r2, #2
 8008c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008c2c:	431a      	orrs	r2, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c36:	431a      	orrs	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	f003 0302 	and.w	r3, r3, #2
 8008c40:	431a      	orrs	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	f003 0301 	and.w	r3, r3, #1
 8008c4a:	431a      	orrs	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c54:	431a      	orrs	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	69db      	ldr	r3, [r3, #28]
 8008c5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c5e:	431a      	orrs	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a1b      	ldr	r3, [r3, #32]
 8008c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c68:	ea42 0103 	orr.w	r1, r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	430a      	orrs	r2, r1
 8008c7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	0c1a      	lsrs	r2, r3, #16
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f002 0204 	and.w	r2, r2, #4
 8008c8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	69da      	ldr	r2, [r3, #28]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b088      	sub	sp, #32
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	603b      	str	r3, [r7, #0]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d101      	bne.n	8008cd6 <HAL_SPI_Transmit+0x22>
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	e126      	b.n	8008f24 <HAL_SPI_Transmit+0x270>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008cde:	f7fd f947 	bl	8005f70 <HAL_GetTick>
 8008ce2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008ce4:	88fb      	ldrh	r3, [r7, #6]
 8008ce6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d002      	beq.n	8008cfa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008cf8:	e10b      	b.n	8008f12 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <HAL_SPI_Transmit+0x52>
 8008d00:	88fb      	ldrh	r3, [r7, #6]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d102      	bne.n	8008d0c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008d0a:	e102      	b.n	8008f12 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2203      	movs	r2, #3
 8008d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	88fa      	ldrh	r2, [r7, #6]
 8008d24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	88fa      	ldrh	r2, [r7, #6]
 8008d2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2200      	movs	r2, #0
 8008d48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d52:	d10f      	bne.n	8008d74 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d7e:	2b40      	cmp	r3, #64	; 0x40
 8008d80:	d007      	beq.n	8008d92 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d9a:	d14b      	bne.n	8008e34 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d002      	beq.n	8008daa <HAL_SPI_Transmit+0xf6>
 8008da4:	8afb      	ldrh	r3, [r7, #22]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d13e      	bne.n	8008e28 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dae:	881a      	ldrh	r2, [r3, #0]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dba:	1c9a      	adds	r2, r3, #2
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008dce:	e02b      	b.n	8008e28 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f003 0302 	and.w	r3, r3, #2
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d112      	bne.n	8008e04 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de2:	881a      	ldrh	r2, [r3, #0]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dee:	1c9a      	adds	r2, r3, #2
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	86da      	strh	r2, [r3, #54]	; 0x36
 8008e02:	e011      	b.n	8008e28 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e04:	f7fd f8b4 	bl	8005f70 <HAL_GetTick>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d803      	bhi.n	8008e1c <HAL_SPI_Transmit+0x168>
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1a:	d102      	bne.n	8008e22 <HAL_SPI_Transmit+0x16e>
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d102      	bne.n	8008e28 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008e26:	e074      	b.n	8008f12 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1ce      	bne.n	8008dd0 <HAL_SPI_Transmit+0x11c>
 8008e32:	e04c      	b.n	8008ece <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d002      	beq.n	8008e42 <HAL_SPI_Transmit+0x18e>
 8008e3c:	8afb      	ldrh	r3, [r7, #22]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d140      	bne.n	8008ec4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	330c      	adds	r3, #12
 8008e4c:	7812      	ldrb	r2, [r2, #0]
 8008e4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e54:	1c5a      	adds	r2, r3, #1
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	3b01      	subs	r3, #1
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008e68:	e02c      	b.n	8008ec4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	f003 0302 	and.w	r3, r3, #2
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d113      	bne.n	8008ea0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	330c      	adds	r3, #12
 8008e82:	7812      	ldrb	r2, [r2, #0]
 8008e84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8a:	1c5a      	adds	r2, r3, #1
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	3b01      	subs	r3, #1
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8008e9e:	e011      	b.n	8008ec4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ea0:	f7fd f866 	bl	8005f70 <HAL_GetTick>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d803      	bhi.n	8008eb8 <HAL_SPI_Transmit+0x204>
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb6:	d102      	bne.n	8008ebe <HAL_SPI_Transmit+0x20a>
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d102      	bne.n	8008ec4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008ec2:	e026      	b.n	8008f12 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1cd      	bne.n	8008e6a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ece:	69ba      	ldr	r2, [r7, #24]
 8008ed0:	6839      	ldr	r1, [r7, #0]
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f000 fbb8 	bl	8009648 <SPI_EndRxTxTransaction>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d002      	beq.n	8008ee4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d10a      	bne.n	8008f02 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008eec:	2300      	movs	r3, #0
 8008eee:	613b      	str	r3, [r7, #16]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	613b      	str	r3, [r7, #16]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	613b      	str	r3, [r7, #16]
 8008f00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d002      	beq.n	8008f10 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	77fb      	strb	r3, [r7, #31]
 8008f0e:	e000      	b.n	8008f12 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008f10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f22:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3720      	adds	r7, #32
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b088      	sub	sp, #32
 8008f30:	af02      	add	r7, sp, #8
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	603b      	str	r3, [r7, #0]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f48:	d112      	bne.n	8008f70 <HAL_SPI_Receive+0x44>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d10e      	bne.n	8008f70 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2204      	movs	r2, #4
 8008f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008f5a:	88fa      	ldrh	r2, [r7, #6]
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	4613      	mov	r3, r2
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	68b9      	ldr	r1, [r7, #8]
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f000 f8f1 	bl	800914e <HAL_SPI_TransmitReceive>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	e0ea      	b.n	8009146 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d101      	bne.n	8008f7e <HAL_SPI_Receive+0x52>
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	e0e3      	b.n	8009146 <HAL_SPI_Receive+0x21a>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f86:	f7fc fff3 	bl	8005f70 <HAL_GetTick>
 8008f8a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d002      	beq.n	8008f9e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008f98:	2302      	movs	r3, #2
 8008f9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f9c:	e0ca      	b.n	8009134 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d002      	beq.n	8008faa <HAL_SPI_Receive+0x7e>
 8008fa4:	88fb      	ldrh	r3, [r7, #6]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d102      	bne.n	8008fb0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008fae:	e0c1      	b.n	8009134 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2204      	movs	r2, #4
 8008fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	68ba      	ldr	r2, [r7, #8]
 8008fc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	88fa      	ldrh	r2, [r7, #6]
 8008fc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	88fa      	ldrh	r2, [r7, #6]
 8008fce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2200      	movs	r2, #0
 8008fec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ff6:	d10f      	bne.n	8009018 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009006:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009016:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009022:	2b40      	cmp	r3, #64	; 0x40
 8009024:	d007      	beq.n	8009036 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009034:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d162      	bne.n	8009104 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800903e:	e02e      	b.n	800909e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b01      	cmp	r3, #1
 800904c:	d115      	bne.n	800907a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f103 020c 	add.w	r2, r3, #12
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905a:	7812      	ldrb	r2, [r2, #0]
 800905c:	b2d2      	uxtb	r2, r2
 800905e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009064:	1c5a      	adds	r2, r3, #1
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800906e:	b29b      	uxth	r3, r3
 8009070:	3b01      	subs	r3, #1
 8009072:	b29a      	uxth	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009078:	e011      	b.n	800909e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800907a:	f7fc ff79 	bl	8005f70 <HAL_GetTick>
 800907e:	4602      	mov	r2, r0
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	429a      	cmp	r2, r3
 8009088:	d803      	bhi.n	8009092 <HAL_SPI_Receive+0x166>
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009090:	d102      	bne.n	8009098 <HAL_SPI_Receive+0x16c>
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d102      	bne.n	800909e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009098:	2303      	movs	r3, #3
 800909a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800909c:	e04a      	b.n	8009134 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1cb      	bne.n	8009040 <HAL_SPI_Receive+0x114>
 80090a8:	e031      	b.n	800910e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	f003 0301 	and.w	r3, r3, #1
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d113      	bne.n	80090e0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	68da      	ldr	r2, [r3, #12]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c2:	b292      	uxth	r2, r2
 80090c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ca:	1c9a      	adds	r2, r3, #2
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	3b01      	subs	r3, #1
 80090d8:	b29a      	uxth	r2, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80090de:	e011      	b.n	8009104 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090e0:	f7fc ff46 	bl	8005f70 <HAL_GetTick>
 80090e4:	4602      	mov	r2, r0
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	683a      	ldr	r2, [r7, #0]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d803      	bhi.n	80090f8 <HAL_SPI_Receive+0x1cc>
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f6:	d102      	bne.n	80090fe <HAL_SPI_Receive+0x1d2>
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d102      	bne.n	8009104 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80090fe:	2303      	movs	r3, #3
 8009100:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009102:	e017      	b.n	8009134 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009108:	b29b      	uxth	r3, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1cd      	bne.n	80090aa <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f000 fa46 	bl	80095a4 <SPI_EndRxTransaction>
 8009118:	4603      	mov	r3, r0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d002      	beq.n	8009124 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2220      	movs	r2, #32
 8009122:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009128:	2b00      	cmp	r3, #0
 800912a:	d002      	beq.n	8009132 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	75fb      	strb	r3, [r7, #23]
 8009130:	e000      	b.n	8009134 <HAL_SPI_Receive+0x208>
  }

error :
 8009132:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009144:	7dfb      	ldrb	r3, [r7, #23]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3718      	adds	r7, #24
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b08c      	sub	sp, #48	; 0x30
 8009152:	af00      	add	r7, sp, #0
 8009154:	60f8      	str	r0, [r7, #12]
 8009156:	60b9      	str	r1, [r7, #8]
 8009158:	607a      	str	r2, [r7, #4]
 800915a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800915c:	2301      	movs	r3, #1
 800915e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009160:	2300      	movs	r3, #0
 8009162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800916c:	2b01      	cmp	r3, #1
 800916e:	d101      	bne.n	8009174 <HAL_SPI_TransmitReceive+0x26>
 8009170:	2302      	movs	r3, #2
 8009172:	e18a      	b.n	800948a <HAL_SPI_TransmitReceive+0x33c>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800917c:	f7fc fef8 	bl	8005f70 <HAL_GetTick>
 8009180:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009188:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009192:	887b      	ldrh	r3, [r7, #2]
 8009194:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009196:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800919a:	2b01      	cmp	r3, #1
 800919c:	d00f      	beq.n	80091be <HAL_SPI_TransmitReceive+0x70>
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091a4:	d107      	bne.n	80091b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d103      	bne.n	80091b6 <HAL_SPI_TransmitReceive+0x68>
 80091ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80091b2:	2b04      	cmp	r3, #4
 80091b4:	d003      	beq.n	80091be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80091b6:	2302      	movs	r3, #2
 80091b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80091bc:	e15b      	b.n	8009476 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d005      	beq.n	80091d0 <HAL_SPI_TransmitReceive+0x82>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d002      	beq.n	80091d0 <HAL_SPI_TransmitReceive+0x82>
 80091ca:	887b      	ldrh	r3, [r7, #2]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d103      	bne.n	80091d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80091d6:	e14e      	b.n	8009476 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b04      	cmp	r3, #4
 80091e2:	d003      	beq.n	80091ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2205      	movs	r2, #5
 80091e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2200      	movs	r2, #0
 80091f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	887a      	ldrh	r2, [r7, #2]
 80091fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	887a      	ldrh	r2, [r7, #2]
 8009202:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	887a      	ldrh	r2, [r7, #2]
 800920e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	887a      	ldrh	r2, [r7, #2]
 8009214:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922c:	2b40      	cmp	r3, #64	; 0x40
 800922e:	d007      	beq.n	8009240 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800923e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009248:	d178      	bne.n	800933c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d002      	beq.n	8009258 <HAL_SPI_TransmitReceive+0x10a>
 8009252:	8b7b      	ldrh	r3, [r7, #26]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d166      	bne.n	8009326 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800925c:	881a      	ldrh	r2, [r3, #0]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009268:	1c9a      	adds	r2, r3, #2
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009272:	b29b      	uxth	r3, r3
 8009274:	3b01      	subs	r3, #1
 8009276:	b29a      	uxth	r2, r3
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800927c:	e053      	b.n	8009326 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	f003 0302 	and.w	r3, r3, #2
 8009288:	2b02      	cmp	r3, #2
 800928a:	d11b      	bne.n	80092c4 <HAL_SPI_TransmitReceive+0x176>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009290:	b29b      	uxth	r3, r3
 8009292:	2b00      	cmp	r3, #0
 8009294:	d016      	beq.n	80092c4 <HAL_SPI_TransmitReceive+0x176>
 8009296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009298:	2b01      	cmp	r3, #1
 800929a:	d113      	bne.n	80092c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a0:	881a      	ldrh	r2, [r3, #0]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ac:	1c9a      	adds	r2, r3, #2
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	3b01      	subs	r3, #1
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80092c0:	2300      	movs	r3, #0
 80092c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f003 0301 	and.w	r3, r3, #1
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d119      	bne.n	8009306 <HAL_SPI_TransmitReceive+0x1b8>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d014      	beq.n	8009306 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68da      	ldr	r2, [r3, #12]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e6:	b292      	uxth	r2, r2
 80092e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ee:	1c9a      	adds	r2, r3, #2
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	3b01      	subs	r3, #1
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009302:	2301      	movs	r3, #1
 8009304:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009306:	f7fc fe33 	bl	8005f70 <HAL_GetTick>
 800930a:	4602      	mov	r2, r0
 800930c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009312:	429a      	cmp	r2, r3
 8009314:	d807      	bhi.n	8009326 <HAL_SPI_TransmitReceive+0x1d8>
 8009316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800931c:	d003      	beq.n	8009326 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800931e:	2303      	movs	r3, #3
 8009320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009324:	e0a7      	b.n	8009476 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800932a:	b29b      	uxth	r3, r3
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1a6      	bne.n	800927e <HAL_SPI_TransmitReceive+0x130>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009334:	b29b      	uxth	r3, r3
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1a1      	bne.n	800927e <HAL_SPI_TransmitReceive+0x130>
 800933a:	e07c      	b.n	8009436 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <HAL_SPI_TransmitReceive+0x1fc>
 8009344:	8b7b      	ldrh	r3, [r7, #26]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d16b      	bne.n	8009422 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	330c      	adds	r3, #12
 8009354:	7812      	ldrb	r2, [r2, #0]
 8009356:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800935c:	1c5a      	adds	r2, r3, #1
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009366:	b29b      	uxth	r3, r3
 8009368:	3b01      	subs	r3, #1
 800936a:	b29a      	uxth	r2, r3
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009370:	e057      	b.n	8009422 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	f003 0302 	and.w	r3, r3, #2
 800937c:	2b02      	cmp	r3, #2
 800937e:	d11c      	bne.n	80093ba <HAL_SPI_TransmitReceive+0x26c>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009384:	b29b      	uxth	r3, r3
 8009386:	2b00      	cmp	r3, #0
 8009388:	d017      	beq.n	80093ba <HAL_SPI_TransmitReceive+0x26c>
 800938a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938c:	2b01      	cmp	r3, #1
 800938e:	d114      	bne.n	80093ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	330c      	adds	r3, #12
 800939a:	7812      	ldrb	r2, [r2, #0]
 800939c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a2:	1c5a      	adds	r2, r3, #1
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	3b01      	subs	r3, #1
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80093b6:	2300      	movs	r3, #0
 80093b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	f003 0301 	and.w	r3, r3, #1
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d119      	bne.n	80093fc <HAL_SPI_TransmitReceive+0x2ae>
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d014      	beq.n	80093fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68da      	ldr	r2, [r3, #12]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093dc:	b2d2      	uxtb	r2, r2
 80093de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e4:	1c5a      	adds	r2, r3, #1
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	3b01      	subs	r3, #1
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80093f8:	2301      	movs	r3, #1
 80093fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80093fc:	f7fc fdb8 	bl	8005f70 <HAL_GetTick>
 8009400:	4602      	mov	r2, r0
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009408:	429a      	cmp	r2, r3
 800940a:	d803      	bhi.n	8009414 <HAL_SPI_TransmitReceive+0x2c6>
 800940c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009412:	d102      	bne.n	800941a <HAL_SPI_TransmitReceive+0x2cc>
 8009414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009416:	2b00      	cmp	r3, #0
 8009418:	d103      	bne.n	8009422 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009420:	e029      	b.n	8009476 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009426:	b29b      	uxth	r3, r3
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1a2      	bne.n	8009372 <HAL_SPI_TransmitReceive+0x224>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009430:	b29b      	uxth	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d19d      	bne.n	8009372 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009438:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 f904 	bl	8009648 <SPI_EndRxTxTransaction>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d006      	beq.n	8009454 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2220      	movs	r2, #32
 8009450:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009452:	e010      	b.n	8009476 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d10b      	bne.n	8009474 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800945c:	2300      	movs	r3, #0
 800945e:	617b      	str	r3, [r7, #20]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	617b      	str	r3, [r7, #20]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	617b      	str	r3, [r7, #20]
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	e000      	b.n	8009476 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009474:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2201      	movs	r2, #1
 800947a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009486:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800948a:	4618      	mov	r0, r3
 800948c:	3730      	adds	r7, #48	; 0x30
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
	...

08009494 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b088      	sub	sp, #32
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	603b      	str	r3, [r7, #0]
 80094a0:	4613      	mov	r3, r2
 80094a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80094a4:	f7fc fd64 	bl	8005f70 <HAL_GetTick>
 80094a8:	4602      	mov	r2, r0
 80094aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ac:	1a9b      	subs	r3, r3, r2
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	4413      	add	r3, r2
 80094b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80094b4:	f7fc fd5c 	bl	8005f70 <HAL_GetTick>
 80094b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80094ba:	4b39      	ldr	r3, [pc, #228]	; (80095a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	015b      	lsls	r3, r3, #5
 80094c0:	0d1b      	lsrs	r3, r3, #20
 80094c2:	69fa      	ldr	r2, [r7, #28]
 80094c4:	fb02 f303 	mul.w	r3, r2, r3
 80094c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094ca:	e054      	b.n	8009576 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d2:	d050      	beq.n	8009576 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80094d4:	f7fc fd4c 	bl	8005f70 <HAL_GetTick>
 80094d8:	4602      	mov	r2, r0
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	69fa      	ldr	r2, [r7, #28]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d902      	bls.n	80094ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d13d      	bne.n	8009566 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	685a      	ldr	r2, [r3, #4]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80094f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009502:	d111      	bne.n	8009528 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800950c:	d004      	beq.n	8009518 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009516:	d107      	bne.n	8009528 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009526:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009530:	d10f      	bne.n	8009552 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009540:	601a      	str	r2, [r3, #0]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009550:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e017      	b.n	8009596 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d101      	bne.n	8009570 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800956c:	2300      	movs	r3, #0
 800956e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	3b01      	subs	r3, #1
 8009574:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689a      	ldr	r2, [r3, #8]
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	4013      	ands	r3, r2
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	429a      	cmp	r2, r3
 8009584:	bf0c      	ite	eq
 8009586:	2301      	moveq	r3, #1
 8009588:	2300      	movne	r3, #0
 800958a:	b2db      	uxtb	r3, r3
 800958c:	461a      	mov	r2, r3
 800958e:	79fb      	ldrb	r3, [r7, #7]
 8009590:	429a      	cmp	r2, r3
 8009592:	d19b      	bne.n	80094cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3720      	adds	r7, #32
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	20000010 	.word	0x20000010

080095a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b086      	sub	sp, #24
 80095a8:	af02      	add	r7, sp, #8
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095b8:	d111      	bne.n	80095de <SPI_EndRxTransaction+0x3a>
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095c2:	d004      	beq.n	80095ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095cc:	d107      	bne.n	80095de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095dc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095e6:	d117      	bne.n	8009618 <SPI_EndRxTransaction+0x74>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095f0:	d112      	bne.n	8009618 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	9300      	str	r3, [sp, #0]
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	2200      	movs	r2, #0
 80095fa:	2101      	movs	r1, #1
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f7ff ff49 	bl	8009494 <SPI_WaitFlagStateUntilTimeout>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d01a      	beq.n	800963e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800960c:	f043 0220 	orr.w	r2, r3, #32
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009614:	2303      	movs	r3, #3
 8009616:	e013      	b.n	8009640 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	2200      	movs	r2, #0
 8009620:	2180      	movs	r1, #128	; 0x80
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f7ff ff36 	bl	8009494 <SPI_WaitFlagStateUntilTimeout>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d007      	beq.n	800963e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009632:	f043 0220 	orr.w	r2, r3, #32
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800963a:	2303      	movs	r3, #3
 800963c:	e000      	b.n	8009640 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af02      	add	r7, sp, #8
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	2200      	movs	r2, #0
 800965c:	2180      	movs	r1, #128	; 0x80
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f7ff ff18 	bl	8009494 <SPI_WaitFlagStateUntilTimeout>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d007      	beq.n	800967a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800966e:	f043 0220 	orr.w	r2, r3, #32
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8009676:	2303      	movs	r3, #3
 8009678:	e000      	b.n	800967c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d101      	bne.n	8009696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e041      	b.n	800971a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d106      	bne.n	80096b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f7fc f952 	bl	8005954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2202      	movs	r2, #2
 80096b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	3304      	adds	r3, #4
 80096c0:	4619      	mov	r1, r3
 80096c2:	4610      	mov	r0, r2
 80096c4:	f000 fe98 	bl	800a3f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
	...

08009724 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2b01      	cmp	r3, #1
 8009736:	d001      	beq.n	800973c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	e032      	b.n	80097a2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2202      	movs	r2, #2
 8009740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a18      	ldr	r2, [pc, #96]	; (80097ac <HAL_TIM_Base_Start+0x88>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d00e      	beq.n	800976c <HAL_TIM_Base_Start+0x48>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009756:	d009      	beq.n	800976c <HAL_TIM_Base_Start+0x48>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a14      	ldr	r2, [pc, #80]	; (80097b0 <HAL_TIM_Base_Start+0x8c>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d004      	beq.n	800976c <HAL_TIM_Base_Start+0x48>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a13      	ldr	r2, [pc, #76]	; (80097b4 <HAL_TIM_Base_Start+0x90>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d111      	bne.n	8009790 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	f003 0307 	and.w	r3, r3, #7
 8009776:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2b06      	cmp	r3, #6
 800977c:	d010      	beq.n	80097a0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f042 0201 	orr.w	r2, r2, #1
 800978c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800978e:	e007      	b.n	80097a0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f042 0201 	orr.w	r2, r2, #1
 800979e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3714      	adds	r7, #20
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bc80      	pop	{r7}
 80097aa:	4770      	bx	lr
 80097ac:	40012c00 	.word	0x40012c00
 80097b0:	40000400 	.word	0x40000400
 80097b4:	40000800 	.word	0x40000800

080097b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d001      	beq.n	80097d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e03a      	b.n	8009846 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2202      	movs	r2, #2
 80097d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	68da      	ldr	r2, [r3, #12]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f042 0201 	orr.w	r2, r2, #1
 80097e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a18      	ldr	r2, [pc, #96]	; (8009850 <HAL_TIM_Base_Start_IT+0x98>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d00e      	beq.n	8009810 <HAL_TIM_Base_Start_IT+0x58>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097fa:	d009      	beq.n	8009810 <HAL_TIM_Base_Start_IT+0x58>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a14      	ldr	r2, [pc, #80]	; (8009854 <HAL_TIM_Base_Start_IT+0x9c>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d004      	beq.n	8009810 <HAL_TIM_Base_Start_IT+0x58>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a13      	ldr	r2, [pc, #76]	; (8009858 <HAL_TIM_Base_Start_IT+0xa0>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d111      	bne.n	8009834 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	f003 0307 	and.w	r3, r3, #7
 800981a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2b06      	cmp	r3, #6
 8009820:	d010      	beq.n	8009844 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f042 0201 	orr.w	r2, r2, #1
 8009830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009832:	e007      	b.n	8009844 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f042 0201 	orr.w	r2, r2, #1
 8009842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3714      	adds	r7, #20
 800984a:	46bd      	mov	sp, r7
 800984c:	bc80      	pop	{r7}
 800984e:	4770      	bx	lr
 8009850:	40012c00 	.word	0x40012c00
 8009854:	40000400 	.word	0x40000400
 8009858:	40000800 	.word	0x40000800

0800985c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d101      	bne.n	800986e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	e041      	b.n	80098f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009874:	b2db      	uxtb	r3, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	d106      	bne.n	8009888 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f7fc f848 	bl	8005918 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2202      	movs	r2, #2
 800988c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	3304      	adds	r3, #4
 8009898:	4619      	mov	r1, r3
 800989a:	4610      	mov	r0, r2
 800989c:	f000 fdac 	bl	800a3f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
	...

080098fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d109      	bne.n	8009920 <HAL_TIM_PWM_Start+0x24>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009912:	b2db      	uxtb	r3, r3
 8009914:	2b01      	cmp	r3, #1
 8009916:	bf14      	ite	ne
 8009918:	2301      	movne	r3, #1
 800991a:	2300      	moveq	r3, #0
 800991c:	b2db      	uxtb	r3, r3
 800991e:	e022      	b.n	8009966 <HAL_TIM_PWM_Start+0x6a>
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	2b04      	cmp	r3, #4
 8009924:	d109      	bne.n	800993a <HAL_TIM_PWM_Start+0x3e>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800992c:	b2db      	uxtb	r3, r3
 800992e:	2b01      	cmp	r3, #1
 8009930:	bf14      	ite	ne
 8009932:	2301      	movne	r3, #1
 8009934:	2300      	moveq	r3, #0
 8009936:	b2db      	uxtb	r3, r3
 8009938:	e015      	b.n	8009966 <HAL_TIM_PWM_Start+0x6a>
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	2b08      	cmp	r3, #8
 800993e:	d109      	bne.n	8009954 <HAL_TIM_PWM_Start+0x58>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009946:	b2db      	uxtb	r3, r3
 8009948:	2b01      	cmp	r3, #1
 800994a:	bf14      	ite	ne
 800994c:	2301      	movne	r3, #1
 800994e:	2300      	moveq	r3, #0
 8009950:	b2db      	uxtb	r3, r3
 8009952:	e008      	b.n	8009966 <HAL_TIM_PWM_Start+0x6a>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800995a:	b2db      	uxtb	r3, r3
 800995c:	2b01      	cmp	r3, #1
 800995e:	bf14      	ite	ne
 8009960:	2301      	movne	r3, #1
 8009962:	2300      	moveq	r3, #0
 8009964:	b2db      	uxtb	r3, r3
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	e05e      	b.n	8009a2c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d104      	bne.n	800997e <HAL_TIM_PWM_Start+0x82>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2202      	movs	r2, #2
 8009978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800997c:	e013      	b.n	80099a6 <HAL_TIM_PWM_Start+0xaa>
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	2b04      	cmp	r3, #4
 8009982:	d104      	bne.n	800998e <HAL_TIM_PWM_Start+0x92>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2202      	movs	r2, #2
 8009988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800998c:	e00b      	b.n	80099a6 <HAL_TIM_PWM_Start+0xaa>
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	2b08      	cmp	r3, #8
 8009992:	d104      	bne.n	800999e <HAL_TIM_PWM_Start+0xa2>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2202      	movs	r2, #2
 8009998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800999c:	e003      	b.n	80099a6 <HAL_TIM_PWM_Start+0xaa>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2202      	movs	r2, #2
 80099a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2201      	movs	r2, #1
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f001 f8af 	bl	800ab12 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a1e      	ldr	r2, [pc, #120]	; (8009a34 <HAL_TIM_PWM_Start+0x138>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d107      	bne.n	80099ce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a18      	ldr	r2, [pc, #96]	; (8009a34 <HAL_TIM_PWM_Start+0x138>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d00e      	beq.n	80099f6 <HAL_TIM_PWM_Start+0xfa>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099e0:	d009      	beq.n	80099f6 <HAL_TIM_PWM_Start+0xfa>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a14      	ldr	r2, [pc, #80]	; (8009a38 <HAL_TIM_PWM_Start+0x13c>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d004      	beq.n	80099f6 <HAL_TIM_PWM_Start+0xfa>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a12      	ldr	r2, [pc, #72]	; (8009a3c <HAL_TIM_PWM_Start+0x140>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d111      	bne.n	8009a1a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	f003 0307 	and.w	r3, r3, #7
 8009a00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2b06      	cmp	r3, #6
 8009a06:	d010      	beq.n	8009a2a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f042 0201 	orr.w	r2, r2, #1
 8009a16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a18:	e007      	b.n	8009a2a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f042 0201 	orr.w	r2, r2, #1
 8009a28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	40012c00 	.word	0x40012c00
 8009a38:	40000400 	.word	0x40000400
 8009a3c:	40000800 	.word	0x40000800

08009a40 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d101      	bne.n	8009a52 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e041      	b.n	8009ad6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d106      	bne.n	8009a6c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f839 	bl	8009ade <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2202      	movs	r2, #2
 8009a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	3304      	adds	r3, #4
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	4610      	mov	r0, r2
 8009a80:	f000 fcba 	bl	800a3f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3708      	adds	r7, #8
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009ade:	b480      	push	{r7}
 8009ae0:	b083      	sub	sp, #12
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009ae6:	bf00      	nop
 8009ae8:	370c      	adds	r7, #12
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bc80      	pop	{r7}
 8009aee:	4770      	bx	lr

08009af0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d104      	bne.n	8009b0a <HAL_TIM_IC_Start_IT+0x1a>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	e013      	b.n	8009b32 <HAL_TIM_IC_Start_IT+0x42>
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	2b04      	cmp	r3, #4
 8009b0e:	d104      	bne.n	8009b1a <HAL_TIM_IC_Start_IT+0x2a>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	e00b      	b.n	8009b32 <HAL_TIM_IC_Start_IT+0x42>
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	2b08      	cmp	r3, #8
 8009b1e:	d104      	bne.n	8009b2a <HAL_TIM_IC_Start_IT+0x3a>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	e003      	b.n	8009b32 <HAL_TIM_IC_Start_IT+0x42>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d104      	bne.n	8009b44 <HAL_TIM_IC_Start_IT+0x54>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	e013      	b.n	8009b6c <HAL_TIM_IC_Start_IT+0x7c>
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	2b04      	cmp	r3, #4
 8009b48:	d104      	bne.n	8009b54 <HAL_TIM_IC_Start_IT+0x64>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	e00b      	b.n	8009b6c <HAL_TIM_IC_Start_IT+0x7c>
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	2b08      	cmp	r3, #8
 8009b58:	d104      	bne.n	8009b64 <HAL_TIM_IC_Start_IT+0x74>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	e003      	b.n	8009b6c <HAL_TIM_IC_Start_IT+0x7c>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b6e:	7bfb      	ldrb	r3, [r7, #15]
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d102      	bne.n	8009b7a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d001      	beq.n	8009b7e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e0b3      	b.n	8009ce6 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d104      	bne.n	8009b8e <HAL_TIM_IC_Start_IT+0x9e>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2202      	movs	r2, #2
 8009b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b8c:	e013      	b.n	8009bb6 <HAL_TIM_IC_Start_IT+0xc6>
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	2b04      	cmp	r3, #4
 8009b92:	d104      	bne.n	8009b9e <HAL_TIM_IC_Start_IT+0xae>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2202      	movs	r2, #2
 8009b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b9c:	e00b      	b.n	8009bb6 <HAL_TIM_IC_Start_IT+0xc6>
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	2b08      	cmp	r3, #8
 8009ba2:	d104      	bne.n	8009bae <HAL_TIM_IC_Start_IT+0xbe>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bac:	e003      	b.n	8009bb6 <HAL_TIM_IC_Start_IT+0xc6>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d104      	bne.n	8009bc6 <HAL_TIM_IC_Start_IT+0xd6>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bc4:	e013      	b.n	8009bee <HAL_TIM_IC_Start_IT+0xfe>
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	2b04      	cmp	r3, #4
 8009bca:	d104      	bne.n	8009bd6 <HAL_TIM_IC_Start_IT+0xe6>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2202      	movs	r2, #2
 8009bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009bd4:	e00b      	b.n	8009bee <HAL_TIM_IC_Start_IT+0xfe>
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	2b08      	cmp	r3, #8
 8009bda:	d104      	bne.n	8009be6 <HAL_TIM_IC_Start_IT+0xf6>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2202      	movs	r2, #2
 8009be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009be4:	e003      	b.n	8009bee <HAL_TIM_IC_Start_IT+0xfe>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2202      	movs	r2, #2
 8009bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	2b0c      	cmp	r3, #12
 8009bf2:	d841      	bhi.n	8009c78 <HAL_TIM_IC_Start_IT+0x188>
 8009bf4:	a201      	add	r2, pc, #4	; (adr r2, 8009bfc <HAL_TIM_IC_Start_IT+0x10c>)
 8009bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfa:	bf00      	nop
 8009bfc:	08009c31 	.word	0x08009c31
 8009c00:	08009c79 	.word	0x08009c79
 8009c04:	08009c79 	.word	0x08009c79
 8009c08:	08009c79 	.word	0x08009c79
 8009c0c:	08009c43 	.word	0x08009c43
 8009c10:	08009c79 	.word	0x08009c79
 8009c14:	08009c79 	.word	0x08009c79
 8009c18:	08009c79 	.word	0x08009c79
 8009c1c:	08009c55 	.word	0x08009c55
 8009c20:	08009c79 	.word	0x08009c79
 8009c24:	08009c79 	.word	0x08009c79
 8009c28:	08009c79 	.word	0x08009c79
 8009c2c:	08009c67 	.word	0x08009c67
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	68da      	ldr	r2, [r3, #12]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f042 0202 	orr.w	r2, r2, #2
 8009c3e:	60da      	str	r2, [r3, #12]
      break;
 8009c40:	e01b      	b.n	8009c7a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68da      	ldr	r2, [r3, #12]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f042 0204 	orr.w	r2, r2, #4
 8009c50:	60da      	str	r2, [r3, #12]
      break;
 8009c52:	e012      	b.n	8009c7a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68da      	ldr	r2, [r3, #12]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f042 0208 	orr.w	r2, r2, #8
 8009c62:	60da      	str	r2, [r3, #12]
      break;
 8009c64:	e009      	b.n	8009c7a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	68da      	ldr	r2, [r3, #12]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f042 0210 	orr.w	r2, r2, #16
 8009c74:	60da      	str	r2, [r3, #12]
      break;
 8009c76:	e000      	b.n	8009c7a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8009c78:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	6839      	ldr	r1, [r7, #0]
 8009c82:	4618      	mov	r0, r3
 8009c84:	f000 ff45 	bl	800ab12 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a18      	ldr	r2, [pc, #96]	; (8009cf0 <HAL_TIM_IC_Start_IT+0x200>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d00e      	beq.n	8009cb0 <HAL_TIM_IC_Start_IT+0x1c0>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c9a:	d009      	beq.n	8009cb0 <HAL_TIM_IC_Start_IT+0x1c0>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a14      	ldr	r2, [pc, #80]	; (8009cf4 <HAL_TIM_IC_Start_IT+0x204>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d004      	beq.n	8009cb0 <HAL_TIM_IC_Start_IT+0x1c0>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a13      	ldr	r2, [pc, #76]	; (8009cf8 <HAL_TIM_IC_Start_IT+0x208>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d111      	bne.n	8009cd4 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	f003 0307 	and.w	r3, r3, #7
 8009cba:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	2b06      	cmp	r3, #6
 8009cc0:	d010      	beq.n	8009ce4 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f042 0201 	orr.w	r2, r2, #1
 8009cd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cd2:	e007      	b.n	8009ce4 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f042 0201 	orr.w	r2, r2, #1
 8009ce2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	40012c00 	.word	0x40012c00
 8009cf4:	40000400 	.word	0x40000400
 8009cf8:	40000800 	.word	0x40000800

08009cfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	f003 0302 	and.w	r3, r3, #2
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	d122      	bne.n	8009d58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	f003 0302 	and.w	r3, r3, #2
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d11b      	bne.n	8009d58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f06f 0202 	mvn.w	r2, #2
 8009d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	699b      	ldr	r3, [r3, #24]
 8009d36:	f003 0303 	and.w	r3, r3, #3
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d003      	beq.n	8009d46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7fa f8e6 	bl	8003f10 <HAL_TIM_IC_CaptureCallback>
 8009d44:	e005      	b.n	8009d52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fb3a 	bl	800a3c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 fb40 	bl	800a3d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	f003 0304 	and.w	r3, r3, #4
 8009d62:	2b04      	cmp	r3, #4
 8009d64:	d122      	bne.n	8009dac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	f003 0304 	and.w	r3, r3, #4
 8009d70:	2b04      	cmp	r3, #4
 8009d72:	d11b      	bne.n	8009dac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f06f 0204 	mvn.w	r2, #4
 8009d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2202      	movs	r2, #2
 8009d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	699b      	ldr	r3, [r3, #24]
 8009d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d003      	beq.n	8009d9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f7fa f8bc 	bl	8003f10 <HAL_TIM_IC_CaptureCallback>
 8009d98:	e005      	b.n	8009da6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 fb10 	bl	800a3c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fb16 	bl	800a3d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2200      	movs	r2, #0
 8009daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	f003 0308 	and.w	r3, r3, #8
 8009db6:	2b08      	cmp	r3, #8
 8009db8:	d122      	bne.n	8009e00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	f003 0308 	and.w	r3, r3, #8
 8009dc4:	2b08      	cmp	r3, #8
 8009dc6:	d11b      	bne.n	8009e00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f06f 0208 	mvn.w	r2, #8
 8009dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2204      	movs	r2, #4
 8009dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	69db      	ldr	r3, [r3, #28]
 8009dde:	f003 0303 	and.w	r3, r3, #3
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d003      	beq.n	8009dee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f7fa f892 	bl	8003f10 <HAL_TIM_IC_CaptureCallback>
 8009dec:	e005      	b.n	8009dfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 fae6 	bl	800a3c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 faec 	bl	800a3d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	f003 0310 	and.w	r3, r3, #16
 8009e0a:	2b10      	cmp	r3, #16
 8009e0c:	d122      	bne.n	8009e54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	f003 0310 	and.w	r3, r3, #16
 8009e18:	2b10      	cmp	r3, #16
 8009e1a:	d11b      	bne.n	8009e54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f06f 0210 	mvn.w	r2, #16
 8009e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2208      	movs	r2, #8
 8009e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	69db      	ldr	r3, [r3, #28]
 8009e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d003      	beq.n	8009e42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7fa f868 	bl	8003f10 <HAL_TIM_IC_CaptureCallback>
 8009e40:	e005      	b.n	8009e4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fabc 	bl	800a3c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fac2 	bl	800a3d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	f003 0301 	and.w	r3, r3, #1
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d10e      	bne.n	8009e80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	f003 0301 	and.w	r3, r3, #1
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d107      	bne.n	8009e80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f06f 0201 	mvn.w	r2, #1
 8009e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7f9 fa8c 	bl	8003398 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e8a:	2b80      	cmp	r3, #128	; 0x80
 8009e8c:	d10e      	bne.n	8009eac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e98:	2b80      	cmp	r3, #128	; 0x80
 8009e9a:	d107      	bne.n	8009eac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 ffae 	bl	800ae08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb6:	2b40      	cmp	r3, #64	; 0x40
 8009eb8:	d10e      	bne.n	8009ed8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec4:	2b40      	cmp	r3, #64	; 0x40
 8009ec6:	d107      	bne.n	8009ed8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 fa86 	bl	800a3e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	f003 0320 	and.w	r3, r3, #32
 8009ee2:	2b20      	cmp	r3, #32
 8009ee4:	d10e      	bne.n	8009f04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	f003 0320 	and.w	r3, r3, #32
 8009ef0:	2b20      	cmp	r3, #32
 8009ef2:	d107      	bne.n	8009f04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f06f 0220 	mvn.w	r2, #32
 8009efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 ff79 	bl	800adf6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f04:	bf00      	nop
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d101      	bne.n	8009f26 <HAL_TIM_IC_ConfigChannel+0x1a>
 8009f22:	2302      	movs	r3, #2
 8009f24:	e082      	b.n	800a02c <HAL_TIM_IC_ConfigChannel+0x120>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d11b      	bne.n	8009f6c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6818      	ldr	r0, [r3, #0]
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	6819      	ldr	r1, [r3, #0]
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	685a      	ldr	r2, [r3, #4]
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	f000 fc42 	bl	800a7cc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	699a      	ldr	r2, [r3, #24]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f022 020c 	bic.w	r2, r2, #12
 8009f56:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	6999      	ldr	r1, [r3, #24]
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	689a      	ldr	r2, [r3, #8]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	430a      	orrs	r2, r1
 8009f68:	619a      	str	r2, [r3, #24]
 8009f6a:	e05a      	b.n	800a022 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b04      	cmp	r3, #4
 8009f70:	d11c      	bne.n	8009fac <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6818      	ldr	r0, [r3, #0]
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	6819      	ldr	r1, [r3, #0]
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	685a      	ldr	r2, [r3, #4]
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	f000 fcab 	bl	800a8dc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	699a      	ldr	r2, [r3, #24]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009f94:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	6999      	ldr	r1, [r3, #24]
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	021a      	lsls	r2, r3, #8
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	430a      	orrs	r2, r1
 8009fa8:	619a      	str	r2, [r3, #24]
 8009faa:	e03a      	b.n	800a022 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b08      	cmp	r3, #8
 8009fb0:	d11b      	bne.n	8009fea <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6818      	ldr	r0, [r3, #0]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	6819      	ldr	r1, [r3, #0]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	685a      	ldr	r2, [r3, #4]
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	f000 fcf6 	bl	800a9b2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	69da      	ldr	r2, [r3, #28]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f022 020c 	bic.w	r2, r2, #12
 8009fd4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	69d9      	ldr	r1, [r3, #28]
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	689a      	ldr	r2, [r3, #8]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	61da      	str	r2, [r3, #28]
 8009fe8:	e01b      	b.n	800a022 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6818      	ldr	r0, [r3, #0]
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	6819      	ldr	r1, [r3, #0]
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	685a      	ldr	r2, [r3, #4]
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	f000 fd15 	bl	800aa28 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	69da      	ldr	r2, [r3, #28]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a00c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	69d9      	ldr	r1, [r3, #28]
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	021a      	lsls	r2, r3, #8
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	430a      	orrs	r2, r1
 800a020:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3710      	adds	r7, #16
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a046:	2b01      	cmp	r3, #1
 800a048:	d101      	bne.n	800a04e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a04a:	2302      	movs	r3, #2
 800a04c:	e0ac      	b.n	800a1a8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2201      	movs	r2, #1
 800a052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2b0c      	cmp	r3, #12
 800a05a:	f200 809f 	bhi.w	800a19c <HAL_TIM_PWM_ConfigChannel+0x168>
 800a05e:	a201      	add	r2, pc, #4	; (adr r2, 800a064 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a064:	0800a099 	.word	0x0800a099
 800a068:	0800a19d 	.word	0x0800a19d
 800a06c:	0800a19d 	.word	0x0800a19d
 800a070:	0800a19d 	.word	0x0800a19d
 800a074:	0800a0d9 	.word	0x0800a0d9
 800a078:	0800a19d 	.word	0x0800a19d
 800a07c:	0800a19d 	.word	0x0800a19d
 800a080:	0800a19d 	.word	0x0800a19d
 800a084:	0800a11b 	.word	0x0800a11b
 800a088:	0800a19d 	.word	0x0800a19d
 800a08c:	0800a19d 	.word	0x0800a19d
 800a090:	0800a19d 	.word	0x0800a19d
 800a094:	0800a15b 	.word	0x0800a15b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68b9      	ldr	r1, [r7, #8]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 fa0c 	bl	800a4bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	699a      	ldr	r2, [r3, #24]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f042 0208 	orr.w	r2, r2, #8
 800a0b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	699a      	ldr	r2, [r3, #24]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f022 0204 	bic.w	r2, r2, #4
 800a0c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	6999      	ldr	r1, [r3, #24]
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	691a      	ldr	r2, [r3, #16]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	430a      	orrs	r2, r1
 800a0d4:	619a      	str	r2, [r3, #24]
      break;
 800a0d6:	e062      	b.n	800a19e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	68b9      	ldr	r1, [r7, #8]
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f000 fa52 	bl	800a588 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	699a      	ldr	r2, [r3, #24]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	699a      	ldr	r2, [r3, #24]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6999      	ldr	r1, [r3, #24]
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	021a      	lsls	r2, r3, #8
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	430a      	orrs	r2, r1
 800a116:	619a      	str	r2, [r3, #24]
      break;
 800a118:	e041      	b.n	800a19e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68b9      	ldr	r1, [r7, #8]
 800a120:	4618      	mov	r0, r3
 800a122:	f000 fa9b 	bl	800a65c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	69da      	ldr	r2, [r3, #28]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f042 0208 	orr.w	r2, r2, #8
 800a134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	69da      	ldr	r2, [r3, #28]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f022 0204 	bic.w	r2, r2, #4
 800a144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	69d9      	ldr	r1, [r3, #28]
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	691a      	ldr	r2, [r3, #16]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	430a      	orrs	r2, r1
 800a156:	61da      	str	r2, [r3, #28]
      break;
 800a158:	e021      	b.n	800a19e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	68b9      	ldr	r1, [r7, #8]
 800a160:	4618      	mov	r0, r3
 800a162:	f000 fae5 	bl	800a730 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	69da      	ldr	r2, [r3, #28]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	69da      	ldr	r2, [r3, #28]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	69d9      	ldr	r1, [r3, #28]
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	021a      	lsls	r2, r3, #8
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	430a      	orrs	r2, r1
 800a198:	61da      	str	r2, [r3, #28]
      break;
 800a19a:	e000      	b.n	800a19e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800a19c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3710      	adds	r7, #16
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d101      	bne.n	800a1c8 <HAL_TIM_ConfigClockSource+0x18>
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	e0b3      	b.n	800a330 <HAL_TIM_ConfigClockSource+0x180>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2202      	movs	r2, #2
 800a1d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a1e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a200:	d03e      	beq.n	800a280 <HAL_TIM_ConfigClockSource+0xd0>
 800a202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a206:	f200 8087 	bhi.w	800a318 <HAL_TIM_ConfigClockSource+0x168>
 800a20a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a20e:	f000 8085 	beq.w	800a31c <HAL_TIM_ConfigClockSource+0x16c>
 800a212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a216:	d87f      	bhi.n	800a318 <HAL_TIM_ConfigClockSource+0x168>
 800a218:	2b70      	cmp	r3, #112	; 0x70
 800a21a:	d01a      	beq.n	800a252 <HAL_TIM_ConfigClockSource+0xa2>
 800a21c:	2b70      	cmp	r3, #112	; 0x70
 800a21e:	d87b      	bhi.n	800a318 <HAL_TIM_ConfigClockSource+0x168>
 800a220:	2b60      	cmp	r3, #96	; 0x60
 800a222:	d050      	beq.n	800a2c6 <HAL_TIM_ConfigClockSource+0x116>
 800a224:	2b60      	cmp	r3, #96	; 0x60
 800a226:	d877      	bhi.n	800a318 <HAL_TIM_ConfigClockSource+0x168>
 800a228:	2b50      	cmp	r3, #80	; 0x50
 800a22a:	d03c      	beq.n	800a2a6 <HAL_TIM_ConfigClockSource+0xf6>
 800a22c:	2b50      	cmp	r3, #80	; 0x50
 800a22e:	d873      	bhi.n	800a318 <HAL_TIM_ConfigClockSource+0x168>
 800a230:	2b40      	cmp	r3, #64	; 0x40
 800a232:	d058      	beq.n	800a2e6 <HAL_TIM_ConfigClockSource+0x136>
 800a234:	2b40      	cmp	r3, #64	; 0x40
 800a236:	d86f      	bhi.n	800a318 <HAL_TIM_ConfigClockSource+0x168>
 800a238:	2b30      	cmp	r3, #48	; 0x30
 800a23a:	d064      	beq.n	800a306 <HAL_TIM_ConfigClockSource+0x156>
 800a23c:	2b30      	cmp	r3, #48	; 0x30
 800a23e:	d86b      	bhi.n	800a318 <HAL_TIM_ConfigClockSource+0x168>
 800a240:	2b20      	cmp	r3, #32
 800a242:	d060      	beq.n	800a306 <HAL_TIM_ConfigClockSource+0x156>
 800a244:	2b20      	cmp	r3, #32
 800a246:	d867      	bhi.n	800a318 <HAL_TIM_ConfigClockSource+0x168>
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d05c      	beq.n	800a306 <HAL_TIM_ConfigClockSource+0x156>
 800a24c:	2b10      	cmp	r3, #16
 800a24e:	d05a      	beq.n	800a306 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a250:	e062      	b.n	800a318 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6818      	ldr	r0, [r3, #0]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	6899      	ldr	r1, [r3, #8]
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	685a      	ldr	r2, [r3, #4]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	f000 fc37 	bl	800aad4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a274:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	609a      	str	r2, [r3, #8]
      break;
 800a27e:	e04e      	b.n	800a31e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6818      	ldr	r0, [r3, #0]
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	6899      	ldr	r1, [r3, #8]
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	685a      	ldr	r2, [r3, #4]
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	f000 fc20 	bl	800aad4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	689a      	ldr	r2, [r3, #8]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a2a2:	609a      	str	r2, [r3, #8]
      break;
 800a2a4:	e03b      	b.n	800a31e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6818      	ldr	r0, [r3, #0]
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	6859      	ldr	r1, [r3, #4]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	f000 fae4 	bl	800a880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2150      	movs	r1, #80	; 0x50
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f000 fbee 	bl	800aaa0 <TIM_ITRx_SetConfig>
      break;
 800a2c4:	e02b      	b.n	800a31e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6818      	ldr	r0, [r3, #0]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	6859      	ldr	r1, [r3, #4]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	f000 fb3e 	bl	800a954 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2160      	movs	r1, #96	; 0x60
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 fbde 	bl	800aaa0 <TIM_ITRx_SetConfig>
      break;
 800a2e4:	e01b      	b.n	800a31e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6818      	ldr	r0, [r3, #0]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	6859      	ldr	r1, [r3, #4]
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	f000 fac4 	bl	800a880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2140      	movs	r1, #64	; 0x40
 800a2fe:	4618      	mov	r0, r3
 800a300:	f000 fbce 	bl	800aaa0 <TIM_ITRx_SetConfig>
      break;
 800a304:	e00b      	b.n	800a31e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4619      	mov	r1, r3
 800a310:	4610      	mov	r0, r2
 800a312:	f000 fbc5 	bl	800aaa0 <TIM_ITRx_SetConfig>
        break;
 800a316:	e002      	b.n	800a31e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a318:	bf00      	nop
 800a31a:	e000      	b.n	800a31e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a31c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2201      	movs	r2, #1
 800a322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a342:	2300      	movs	r3, #0
 800a344:	60fb      	str	r3, [r7, #12]
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b0c      	cmp	r3, #12
 800a34a:	d831      	bhi.n	800a3b0 <HAL_TIM_ReadCapturedValue+0x78>
 800a34c:	a201      	add	r2, pc, #4	; (adr r2, 800a354 <HAL_TIM_ReadCapturedValue+0x1c>)
 800a34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a352:	bf00      	nop
 800a354:	0800a389 	.word	0x0800a389
 800a358:	0800a3b1 	.word	0x0800a3b1
 800a35c:	0800a3b1 	.word	0x0800a3b1
 800a360:	0800a3b1 	.word	0x0800a3b1
 800a364:	0800a393 	.word	0x0800a393
 800a368:	0800a3b1 	.word	0x0800a3b1
 800a36c:	0800a3b1 	.word	0x0800a3b1
 800a370:	0800a3b1 	.word	0x0800a3b1
 800a374:	0800a39d 	.word	0x0800a39d
 800a378:	0800a3b1 	.word	0x0800a3b1
 800a37c:	0800a3b1 	.word	0x0800a3b1
 800a380:	0800a3b1 	.word	0x0800a3b1
 800a384:	0800a3a7 	.word	0x0800a3a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38e:	60fb      	str	r3, [r7, #12]

      break;
 800a390:	e00f      	b.n	800a3b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a398:	60fb      	str	r3, [r7, #12]

      break;
 800a39a:	e00a      	b.n	800a3b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3a2:	60fb      	str	r3, [r7, #12]

      break;
 800a3a4:	e005      	b.n	800a3b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ac:	60fb      	str	r3, [r7, #12]

      break;
 800a3ae:	e000      	b.n	800a3b2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a3b0:	bf00      	nop
  }

  return tmpreg;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bc80      	pop	{r7}
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop

0800a3c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a3c8:	bf00      	nop
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bc80      	pop	{r7}
 800a3d0:	4770      	bx	lr

0800a3d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b083      	sub	sp, #12
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3da:	bf00      	nop
 800a3dc:	370c      	adds	r7, #12
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bc80      	pop	{r7}
 800a3e2:	4770      	bx	lr

0800a3e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3ec:	bf00      	nop
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bc80      	pop	{r7}
 800a3f4:	4770      	bx	lr
	...

0800a3f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b085      	sub	sp, #20
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a29      	ldr	r2, [pc, #164]	; (800a4b0 <TIM_Base_SetConfig+0xb8>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d00b      	beq.n	800a428 <TIM_Base_SetConfig+0x30>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a416:	d007      	beq.n	800a428 <TIM_Base_SetConfig+0x30>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a26      	ldr	r2, [pc, #152]	; (800a4b4 <TIM_Base_SetConfig+0xbc>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d003      	beq.n	800a428 <TIM_Base_SetConfig+0x30>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4a25      	ldr	r2, [pc, #148]	; (800a4b8 <TIM_Base_SetConfig+0xc0>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d108      	bne.n	800a43a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a42e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	4313      	orrs	r3, r2
 800a438:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a1c      	ldr	r2, [pc, #112]	; (800a4b0 <TIM_Base_SetConfig+0xb8>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d00b      	beq.n	800a45a <TIM_Base_SetConfig+0x62>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a448:	d007      	beq.n	800a45a <TIM_Base_SetConfig+0x62>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a19      	ldr	r2, [pc, #100]	; (800a4b4 <TIM_Base_SetConfig+0xbc>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d003      	beq.n	800a45a <TIM_Base_SetConfig+0x62>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a18      	ldr	r2, [pc, #96]	; (800a4b8 <TIM_Base_SetConfig+0xc0>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d108      	bne.n	800a46c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	4313      	orrs	r3, r2
 800a46a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	4313      	orrs	r3, r2
 800a478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	689a      	ldr	r2, [r3, #8]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a07      	ldr	r2, [pc, #28]	; (800a4b0 <TIM_Base_SetConfig+0xb8>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d103      	bne.n	800a4a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	691a      	ldr	r2, [r3, #16]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	615a      	str	r2, [r3, #20]
}
 800a4a6:	bf00      	nop
 800a4a8:	3714      	adds	r7, #20
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bc80      	pop	{r7}
 800a4ae:	4770      	bx	lr
 800a4b0:	40012c00 	.word	0x40012c00
 800a4b4:	40000400 	.word	0x40000400
 800a4b8:	40000800 	.word	0x40000800

0800a4bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b087      	sub	sp, #28
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a1b      	ldr	r3, [r3, #32]
 800a4ca:	f023 0201 	bic.w	r2, r3, #1
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a1b      	ldr	r3, [r3, #32]
 800a4d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f023 0303 	bic.w	r3, r3, #3
 800a4f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	f023 0302 	bic.w	r3, r3, #2
 800a504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	697a      	ldr	r2, [r7, #20]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4a1c      	ldr	r2, [pc, #112]	; (800a584 <TIM_OC1_SetConfig+0xc8>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d10c      	bne.n	800a532 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	f023 0308 	bic.w	r3, r3, #8
 800a51e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	697a      	ldr	r2, [r7, #20]
 800a526:	4313      	orrs	r3, r2
 800a528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	f023 0304 	bic.w	r3, r3, #4
 800a530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a13      	ldr	r2, [pc, #76]	; (800a584 <TIM_OC1_SetConfig+0xc8>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d111      	bne.n	800a55e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	695b      	ldr	r3, [r3, #20]
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	4313      	orrs	r3, r2
 800a552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	699b      	ldr	r3, [r3, #24]
 800a558:	693a      	ldr	r2, [r7, #16]
 800a55a:	4313      	orrs	r3, r2
 800a55c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	693a      	ldr	r2, [r7, #16]
 800a562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	685a      	ldr	r2, [r3, #4]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	697a      	ldr	r2, [r7, #20]
 800a576:	621a      	str	r2, [r3, #32]
}
 800a578:	bf00      	nop
 800a57a:	371c      	adds	r7, #28
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bc80      	pop	{r7}
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	40012c00 	.word	0x40012c00

0800a588 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a588:	b480      	push	{r7}
 800a58a:	b087      	sub	sp, #28
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a1b      	ldr	r3, [r3, #32]
 800a596:	f023 0210 	bic.w	r2, r3, #16
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a1b      	ldr	r3, [r3, #32]
 800a5a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	699b      	ldr	r3, [r3, #24]
 800a5ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	021b      	lsls	r3, r3, #8
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	f023 0320 	bic.w	r3, r3, #32
 800a5d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	011b      	lsls	r3, r3, #4
 800a5da:	697a      	ldr	r2, [r7, #20]
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	4a1d      	ldr	r2, [pc, #116]	; (800a658 <TIM_OC2_SetConfig+0xd0>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d10d      	bne.n	800a604 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	011b      	lsls	r3, r3, #4
 800a5f6:	697a      	ldr	r2, [r7, #20]
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a602:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a14      	ldr	r2, [pc, #80]	; (800a658 <TIM_OC2_SetConfig+0xd0>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d113      	bne.n	800a634 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a612:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a61a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	695b      	ldr	r3, [r3, #20]
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	4313      	orrs	r3, r2
 800a626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	699b      	ldr	r3, [r3, #24]
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	693a      	ldr	r2, [r7, #16]
 800a630:	4313      	orrs	r3, r2
 800a632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	693a      	ldr	r2, [r7, #16]
 800a638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	685a      	ldr	r2, [r3, #4]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	697a      	ldr	r2, [r7, #20]
 800a64c:	621a      	str	r2, [r3, #32]
}
 800a64e:	bf00      	nop
 800a650:	371c      	adds	r7, #28
 800a652:	46bd      	mov	sp, r7
 800a654:	bc80      	pop	{r7}
 800a656:	4770      	bx	lr
 800a658:	40012c00 	.word	0x40012c00

0800a65c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b087      	sub	sp, #28
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6a1b      	ldr	r3, [r3, #32]
 800a66a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a1b      	ldr	r3, [r3, #32]
 800a676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	69db      	ldr	r3, [r3, #28]
 800a682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a68a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f023 0303 	bic.w	r3, r3, #3
 800a692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	021b      	lsls	r3, r3, #8
 800a6ac:	697a      	ldr	r2, [r7, #20]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	4a1d      	ldr	r2, [pc, #116]	; (800a72c <TIM_OC3_SetConfig+0xd0>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d10d      	bne.n	800a6d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	021b      	lsls	r3, r3, #8
 800a6c8:	697a      	ldr	r2, [r7, #20]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a6d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	4a14      	ldr	r2, [pc, #80]	; (800a72c <TIM_OC3_SetConfig+0xd0>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d113      	bne.n	800a706 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a6ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	695b      	ldr	r3, [r3, #20]
 800a6f2:	011b      	lsls	r3, r3, #4
 800a6f4:	693a      	ldr	r2, [r7, #16]
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	699b      	ldr	r3, [r3, #24]
 800a6fe:	011b      	lsls	r3, r3, #4
 800a700:	693a      	ldr	r2, [r7, #16]
 800a702:	4313      	orrs	r3, r2
 800a704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	693a      	ldr	r2, [r7, #16]
 800a70a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	685a      	ldr	r2, [r3, #4]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	697a      	ldr	r2, [r7, #20]
 800a71e:	621a      	str	r2, [r3, #32]
}
 800a720:	bf00      	nop
 800a722:	371c      	adds	r7, #28
 800a724:	46bd      	mov	sp, r7
 800a726:	bc80      	pop	{r7}
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	40012c00 	.word	0x40012c00

0800a730 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a730:	b480      	push	{r7}
 800a732:	b087      	sub	sp, #28
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a1b      	ldr	r3, [r3, #32]
 800a73e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	69db      	ldr	r3, [r3, #28]
 800a756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a75e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	021b      	lsls	r3, r3, #8
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	4313      	orrs	r3, r2
 800a772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a77a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	031b      	lsls	r3, r3, #12
 800a782:	693a      	ldr	r2, [r7, #16]
 800a784:	4313      	orrs	r3, r2
 800a786:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a0f      	ldr	r2, [pc, #60]	; (800a7c8 <TIM_OC4_SetConfig+0x98>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d109      	bne.n	800a7a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a796:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	695b      	ldr	r3, [r3, #20]
 800a79c:	019b      	lsls	r3, r3, #6
 800a79e:	697a      	ldr	r2, [r7, #20]
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	697a      	ldr	r2, [r7, #20]
 800a7a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	685a      	ldr	r2, [r3, #4]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	693a      	ldr	r2, [r7, #16]
 800a7bc:	621a      	str	r2, [r3, #32]
}
 800a7be:	bf00      	nop
 800a7c0:	371c      	adds	r7, #28
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bc80      	pop	{r7}
 800a7c6:	4770      	bx	lr
 800a7c8:	40012c00 	.word	0x40012c00

0800a7cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b087      	sub	sp, #28
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]
 800a7d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6a1b      	ldr	r3, [r3, #32]
 800a7de:	f023 0201 	bic.w	r2, r3, #1
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6a1b      	ldr	r3, [r3, #32]
 800a7f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	4a1f      	ldr	r2, [pc, #124]	; (800a874 <TIM_TI1_SetConfig+0xa8>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d00b      	beq.n	800a812 <TIM_TI1_SetConfig+0x46>
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a800:	d007      	beq.n	800a812 <TIM_TI1_SetConfig+0x46>
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	4a1c      	ldr	r2, [pc, #112]	; (800a878 <TIM_TI1_SetConfig+0xac>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d003      	beq.n	800a812 <TIM_TI1_SetConfig+0x46>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	4a1b      	ldr	r2, [pc, #108]	; (800a87c <TIM_TI1_SetConfig+0xb0>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d101      	bne.n	800a816 <TIM_TI1_SetConfig+0x4a>
 800a812:	2301      	movs	r3, #1
 800a814:	e000      	b.n	800a818 <TIM_TI1_SetConfig+0x4c>
 800a816:	2300      	movs	r3, #0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d008      	beq.n	800a82e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	f023 0303 	bic.w	r3, r3, #3
 800a822:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a824:	697a      	ldr	r2, [r7, #20]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4313      	orrs	r3, r2
 800a82a:	617b      	str	r3, [r7, #20]
 800a82c:	e003      	b.n	800a836 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	f043 0301 	orr.w	r3, r3, #1
 800a834:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a83c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	011b      	lsls	r3, r3, #4
 800a842:	b2db      	uxtb	r3, r3
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	4313      	orrs	r3, r2
 800a848:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	f023 030a 	bic.w	r3, r3, #10
 800a850:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	f003 030a 	and.w	r3, r3, #10
 800a858:	693a      	ldr	r2, [r7, #16]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	693a      	ldr	r2, [r7, #16]
 800a868:	621a      	str	r2, [r3, #32]
}
 800a86a:	bf00      	nop
 800a86c:	371c      	adds	r7, #28
 800a86e:	46bd      	mov	sp, r7
 800a870:	bc80      	pop	{r7}
 800a872:	4770      	bx	lr
 800a874:	40012c00 	.word	0x40012c00
 800a878:	40000400 	.word	0x40000400
 800a87c:	40000800 	.word	0x40000800

0800a880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a880:	b480      	push	{r7}
 800a882:	b087      	sub	sp, #28
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6a1b      	ldr	r3, [r3, #32]
 800a890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6a1b      	ldr	r3, [r3, #32]
 800a896:	f023 0201 	bic.w	r2, r3, #1
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	011b      	lsls	r3, r3, #4
 800a8b0:	693a      	ldr	r2, [r7, #16]
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	f023 030a 	bic.w	r3, r3, #10
 800a8bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a8be:	697a      	ldr	r2, [r7, #20]
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	697a      	ldr	r2, [r7, #20]
 800a8d0:	621a      	str	r2, [r3, #32]
}
 800a8d2:	bf00      	nop
 800a8d4:	371c      	adds	r7, #28
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bc80      	pop	{r7}
 800a8da:	4770      	bx	lr

0800a8dc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b087      	sub	sp, #28
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
 800a8e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6a1b      	ldr	r3, [r3, #32]
 800a8ee:	f023 0210 	bic.w	r2, r3, #16
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	699b      	ldr	r3, [r3, #24]
 800a8fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6a1b      	ldr	r3, [r3, #32]
 800a900:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a908:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	021b      	lsls	r3, r3, #8
 800a90e:	697a      	ldr	r2, [r7, #20]
 800a910:	4313      	orrs	r3, r2
 800a912:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a91a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	031b      	lsls	r3, r3, #12
 800a920:	b29b      	uxth	r3, r3
 800a922:	697a      	ldr	r2, [r7, #20]
 800a924:	4313      	orrs	r3, r2
 800a926:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a92e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	011b      	lsls	r3, r3, #4
 800a934:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a938:	693a      	ldr	r2, [r7, #16]
 800a93a:	4313      	orrs	r3, r2
 800a93c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	693a      	ldr	r2, [r7, #16]
 800a948:	621a      	str	r2, [r3, #32]
}
 800a94a:	bf00      	nop
 800a94c:	371c      	adds	r7, #28
 800a94e:	46bd      	mov	sp, r7
 800a950:	bc80      	pop	{r7}
 800a952:	4770      	bx	lr

0800a954 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a954:	b480      	push	{r7}
 800a956:	b087      	sub	sp, #28
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6a1b      	ldr	r3, [r3, #32]
 800a964:	f023 0210 	bic.w	r2, r3, #16
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	699b      	ldr	r3, [r3, #24]
 800a970:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6a1b      	ldr	r3, [r3, #32]
 800a976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a97e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	031b      	lsls	r3, r3, #12
 800a984:	697a      	ldr	r2, [r7, #20]
 800a986:	4313      	orrs	r3, r2
 800a988:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a990:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	011b      	lsls	r3, r3, #4
 800a996:	693a      	ldr	r2, [r7, #16]
 800a998:	4313      	orrs	r3, r2
 800a99a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	697a      	ldr	r2, [r7, #20]
 800a9a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	693a      	ldr	r2, [r7, #16]
 800a9a6:	621a      	str	r2, [r3, #32]
}
 800a9a8:	bf00      	nop
 800a9aa:	371c      	adds	r7, #28
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bc80      	pop	{r7}
 800a9b0:	4770      	bx	lr

0800a9b2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b087      	sub	sp, #28
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	60f8      	str	r0, [r7, #12]
 800a9ba:	60b9      	str	r1, [r7, #8]
 800a9bc:	607a      	str	r2, [r7, #4]
 800a9be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6a1b      	ldr	r3, [r3, #32]
 800a9c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	69db      	ldr	r3, [r3, #28]
 800a9d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6a1b      	ldr	r3, [r3, #32]
 800a9d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	f023 0303 	bic.w	r3, r3, #3
 800a9de:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a9e0:	697a      	ldr	r2, [r7, #20]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	011b      	lsls	r3, r3, #4
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa02:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	021b      	lsls	r3, r3, #8
 800aa08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa0c:	693a      	ldr	r2, [r7, #16]
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	697a      	ldr	r2, [r7, #20]
 800aa16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	693a      	ldr	r2, [r7, #16]
 800aa1c:	621a      	str	r2, [r3, #32]
}
 800aa1e:	bf00      	nop
 800aa20:	371c      	adds	r7, #28
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bc80      	pop	{r7}
 800aa26:	4770      	bx	lr

0800aa28 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b087      	sub	sp, #28
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
 800aa34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	6a1b      	ldr	r3, [r3, #32]
 800aa3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	69db      	ldr	r3, [r3, #28]
 800aa46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6a1b      	ldr	r3, [r3, #32]
 800aa4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	021b      	lsls	r3, r3, #8
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa66:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	031b      	lsls	r3, r3, #12
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	697a      	ldr	r2, [r7, #20]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa7a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	031b      	lsls	r3, r3, #12
 800aa80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	697a      	ldr	r2, [r7, #20]
 800aa8e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	693a      	ldr	r2, [r7, #16]
 800aa94:	621a      	str	r2, [r3, #32]
}
 800aa96:	bf00      	nop
 800aa98:	371c      	adds	r7, #28
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bc80      	pop	{r7}
 800aa9e:	4770      	bx	lr

0800aaa0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aab6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aab8:	683a      	ldr	r2, [r7, #0]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	f043 0307 	orr.w	r3, r3, #7
 800aac2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	68fa      	ldr	r2, [r7, #12]
 800aac8:	609a      	str	r2, [r3, #8]
}
 800aaca:	bf00      	nop
 800aacc:	3714      	adds	r7, #20
 800aace:	46bd      	mov	sp, r7
 800aad0:	bc80      	pop	{r7}
 800aad2:	4770      	bx	lr

0800aad4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b087      	sub	sp, #28
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	607a      	str	r2, [r7, #4]
 800aae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aaee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	021a      	lsls	r2, r3, #8
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	431a      	orrs	r2, r3
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	697a      	ldr	r2, [r7, #20]
 800aafe:	4313      	orrs	r3, r2
 800ab00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	697a      	ldr	r2, [r7, #20]
 800ab06:	609a      	str	r2, [r3, #8]
}
 800ab08:	bf00      	nop
 800ab0a:	371c      	adds	r7, #28
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bc80      	pop	{r7}
 800ab10:	4770      	bx	lr

0800ab12 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab12:	b480      	push	{r7}
 800ab14:	b087      	sub	sp, #28
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	60f8      	str	r0, [r7, #12]
 800ab1a:	60b9      	str	r1, [r7, #8]
 800ab1c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	f003 031f 	and.w	r3, r3, #31
 800ab24:	2201      	movs	r2, #1
 800ab26:	fa02 f303 	lsl.w	r3, r2, r3
 800ab2a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6a1a      	ldr	r2, [r3, #32]
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	43db      	mvns	r3, r3
 800ab34:	401a      	ands	r2, r3
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6a1a      	ldr	r2, [r3, #32]
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	f003 031f 	and.w	r3, r3, #31
 800ab44:	6879      	ldr	r1, [r7, #4]
 800ab46:	fa01 f303 	lsl.w	r3, r1, r3
 800ab4a:	431a      	orrs	r2, r3
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	621a      	str	r2, [r3, #32]
}
 800ab50:	bf00      	nop
 800ab52:	371c      	adds	r7, #28
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bc80      	pop	{r7}
 800ab58:	4770      	bx	lr
	...

0800ab5c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d109      	bne.n	800ab80 <HAL_TIMEx_PWMN_Start+0x24>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	bf14      	ite	ne
 800ab78:	2301      	movne	r3, #1
 800ab7a:	2300      	moveq	r3, #0
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	e022      	b.n	800abc6 <HAL_TIMEx_PWMN_Start+0x6a>
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	2b04      	cmp	r3, #4
 800ab84:	d109      	bne.n	800ab9a <HAL_TIMEx_PWMN_Start+0x3e>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	bf14      	ite	ne
 800ab92:	2301      	movne	r3, #1
 800ab94:	2300      	moveq	r3, #0
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	e015      	b.n	800abc6 <HAL_TIMEx_PWMN_Start+0x6a>
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	2b08      	cmp	r3, #8
 800ab9e:	d109      	bne.n	800abb4 <HAL_TIMEx_PWMN_Start+0x58>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	bf14      	ite	ne
 800abac:	2301      	movne	r3, #1
 800abae:	2300      	moveq	r3, #0
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	e008      	b.n	800abc6 <HAL_TIMEx_PWMN_Start+0x6a>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	bf14      	ite	ne
 800abc0:	2301      	movne	r3, #1
 800abc2:	2300      	moveq	r3, #0
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d001      	beq.n	800abce <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	e059      	b.n	800ac82 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d104      	bne.n	800abde <HAL_TIMEx_PWMN_Start+0x82>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2202      	movs	r2, #2
 800abd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abdc:	e013      	b.n	800ac06 <HAL_TIMEx_PWMN_Start+0xaa>
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	2b04      	cmp	r3, #4
 800abe2:	d104      	bne.n	800abee <HAL_TIMEx_PWMN_Start+0x92>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2202      	movs	r2, #2
 800abe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800abec:	e00b      	b.n	800ac06 <HAL_TIMEx_PWMN_Start+0xaa>
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	2b08      	cmp	r3, #8
 800abf2:	d104      	bne.n	800abfe <HAL_TIMEx_PWMN_Start+0xa2>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2202      	movs	r2, #2
 800abf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abfc:	e003      	b.n	800ac06 <HAL_TIMEx_PWMN_Start+0xaa>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2202      	movs	r2, #2
 800ac02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2204      	movs	r2, #4
 800ac0c:	6839      	ldr	r1, [r7, #0]
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f000 f903 	bl	800ae1a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a18      	ldr	r2, [pc, #96]	; (800ac8c <HAL_TIMEx_PWMN_Start+0x130>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d00e      	beq.n	800ac4c <HAL_TIMEx_PWMN_Start+0xf0>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac36:	d009      	beq.n	800ac4c <HAL_TIMEx_PWMN_Start+0xf0>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a14      	ldr	r2, [pc, #80]	; (800ac90 <HAL_TIMEx_PWMN_Start+0x134>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d004      	beq.n	800ac4c <HAL_TIMEx_PWMN_Start+0xf0>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a13      	ldr	r2, [pc, #76]	; (800ac94 <HAL_TIMEx_PWMN_Start+0x138>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d111      	bne.n	800ac70 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	f003 0307 	and.w	r3, r3, #7
 800ac56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2b06      	cmp	r3, #6
 800ac5c:	d010      	beq.n	800ac80 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f042 0201 	orr.w	r2, r2, #1
 800ac6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac6e:	e007      	b.n	800ac80 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f042 0201 	orr.w	r2, r2, #1
 800ac7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	40012c00 	.word	0x40012c00
 800ac90:	40000400 	.word	0x40000400
 800ac94:	40000800 	.word	0x40000800

0800ac98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d101      	bne.n	800acb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800acac:	2302      	movs	r3, #2
 800acae:	e046      	b.n	800ad3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2202      	movs	r2, #2
 800acbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	4313      	orrs	r3, r2
 800ace0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a16      	ldr	r2, [pc, #88]	; (800ad48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d00e      	beq.n	800ad12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acfc:	d009      	beq.n	800ad12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4a12      	ldr	r2, [pc, #72]	; (800ad4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d004      	beq.n	800ad12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a10      	ldr	r2, [pc, #64]	; (800ad50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d10c      	bne.n	800ad2c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	68ba      	ldr	r2, [r7, #8]
 800ad20:	4313      	orrs	r3, r2
 800ad22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	68ba      	ldr	r2, [r7, #8]
 800ad2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3714      	adds	r7, #20
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bc80      	pop	{r7}
 800ad46:	4770      	bx	lr
 800ad48:	40012c00 	.word	0x40012c00
 800ad4c:	40000400 	.word	0x40000400
 800ad50:	40000800 	.word	0x40000800

0800ad54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d101      	bne.n	800ad70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ad6c:	2302      	movs	r3, #2
 800ad6e:	e03d      	b.n	800adec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2201      	movs	r2, #1
 800ad74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	4313      	orrs	r3, r2
 800ad84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4313      	orrs	r3, r2
 800adae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	691b      	ldr	r3, [r3, #16]
 800adba:	4313      	orrs	r3, r2
 800adbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	695b      	ldr	r3, [r3, #20]
 800adc8:	4313      	orrs	r3, r2
 800adca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	69db      	ldr	r3, [r3, #28]
 800add6:	4313      	orrs	r3, r2
 800add8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3714      	adds	r7, #20
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bc80      	pop	{r7}
 800adf4:	4770      	bx	lr

0800adf6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b083      	sub	sp, #12
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800adfe:	bf00      	nop
 800ae00:	370c      	adds	r7, #12
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bc80      	pop	{r7}
 800ae06:	4770      	bx	lr

0800ae08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae10:	bf00      	nop
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bc80      	pop	{r7}
 800ae18:	4770      	bx	lr

0800ae1a <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b087      	sub	sp, #28
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	60f8      	str	r0, [r7, #12]
 800ae22:	60b9      	str	r1, [r7, #8]
 800ae24:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	f003 031f 	and.w	r3, r3, #31
 800ae2c:	2204      	movs	r2, #4
 800ae2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae32:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6a1a      	ldr	r2, [r3, #32]
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	43db      	mvns	r3, r3
 800ae3c:	401a      	ands	r2, r3
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6a1a      	ldr	r2, [r3, #32]
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	f003 031f 	and.w	r3, r3, #31
 800ae4c:	6879      	ldr	r1, [r7, #4]
 800ae4e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae52:	431a      	orrs	r2, r3
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	621a      	str	r2, [r3, #32]
}
 800ae58:	bf00      	nop
 800ae5a:	371c      	adds	r7, #28
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bc80      	pop	{r7}
 800ae60:	4770      	bx	lr

0800ae62 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b082      	sub	sp, #8
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d101      	bne.n	800ae74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae70:	2301      	movs	r3, #1
 800ae72:	e03f      	b.n	800aef4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d106      	bne.n	800ae8e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f7fa fea3 	bl	8005bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2224      	movs	r2, #36	; 0x24
 800ae92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	68da      	ldr	r2, [r3, #12]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aea4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 fd04 	bl	800b8b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	691a      	ldr	r2, [r3, #16]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aeba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	695a      	ldr	r2, [r3, #20]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aeca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	68da      	ldr	r2, [r3, #12]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aeda:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2220      	movs	r2, #32
 800aee6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2220      	movs	r2, #32
 800aeee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b08a      	sub	sp, #40	; 0x28
 800af00:	af02      	add	r7, sp, #8
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	603b      	str	r3, [r7, #0]
 800af08:	4613      	mov	r3, r2
 800af0a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800af0c:	2300      	movs	r3, #0
 800af0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800af16:	b2db      	uxtb	r3, r3
 800af18:	2b20      	cmp	r3, #32
 800af1a:	d17c      	bne.n	800b016 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d002      	beq.n	800af28 <HAL_UART_Transmit+0x2c>
 800af22:	88fb      	ldrh	r3, [r7, #6]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d101      	bne.n	800af2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	e075      	b.n	800b018 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800af32:	2b01      	cmp	r3, #1
 800af34:	d101      	bne.n	800af3a <HAL_UART_Transmit+0x3e>
 800af36:	2302      	movs	r3, #2
 800af38:	e06e      	b.n	800b018 <HAL_UART_Transmit+0x11c>
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2200      	movs	r2, #0
 800af46:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2221      	movs	r2, #33	; 0x21
 800af4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800af50:	f7fb f80e 	bl	8005f70 <HAL_GetTick>
 800af54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	88fa      	ldrh	r2, [r7, #6]
 800af5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	88fa      	ldrh	r2, [r7, #6]
 800af60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af6a:	d108      	bne.n	800af7e <HAL_UART_Transmit+0x82>
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d104      	bne.n	800af7e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800af74:	2300      	movs	r3, #0
 800af76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	61bb      	str	r3, [r7, #24]
 800af7c:	e003      	b.n	800af86 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800af82:	2300      	movs	r3, #0
 800af84:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800af8e:	e02a      	b.n	800afe6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	9300      	str	r3, [sp, #0]
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	2200      	movs	r2, #0
 800af98:	2180      	movs	r1, #128	; 0x80
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f000 fb13 	bl	800b5c6 <UART_WaitOnFlagUntilTimeout>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d001      	beq.n	800afaa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800afa6:	2303      	movs	r3, #3
 800afa8:	e036      	b.n	800b018 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d10b      	bne.n	800afc8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	881b      	ldrh	r3, [r3, #0]
 800afb4:	461a      	mov	r2, r3
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800afbe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	3302      	adds	r3, #2
 800afc4:	61bb      	str	r3, [r7, #24]
 800afc6:	e007      	b.n	800afd8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800afc8:	69fb      	ldr	r3, [r7, #28]
 800afca:	781a      	ldrb	r2, [r3, #0]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	3301      	adds	r3, #1
 800afd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800afdc:	b29b      	uxth	r3, r3
 800afde:	3b01      	subs	r3, #1
 800afe0:	b29a      	uxth	r2, r3
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800afea:	b29b      	uxth	r3, r3
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1cf      	bne.n	800af90 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	9300      	str	r3, [sp, #0]
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	2200      	movs	r2, #0
 800aff8:	2140      	movs	r1, #64	; 0x40
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f000 fae3 	bl	800b5c6 <UART_WaitOnFlagUntilTimeout>
 800b000:	4603      	mov	r3, r0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d001      	beq.n	800b00a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b006:	2303      	movs	r3, #3
 800b008:	e006      	b.n	800b018 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2220      	movs	r2, #32
 800b00e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800b012:	2300      	movs	r3, #0
 800b014:	e000      	b.n	800b018 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b016:	2302      	movs	r3, #2
  }
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3720      	adds	r7, #32
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	4613      	mov	r3, r2
 800b02c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b034:	b2db      	uxtb	r3, r3
 800b036:	2b20      	cmp	r3, #32
 800b038:	d153      	bne.n	800b0e2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d002      	beq.n	800b046 <HAL_UART_Transmit_DMA+0x26>
 800b040:	88fb      	ldrh	r3, [r7, #6]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d101      	bne.n	800b04a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b046:	2301      	movs	r3, #1
 800b048:	e04c      	b.n	800b0e4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b050:	2b01      	cmp	r3, #1
 800b052:	d101      	bne.n	800b058 <HAL_UART_Transmit_DMA+0x38>
 800b054:	2302      	movs	r3, #2
 800b056:	e045      	b.n	800b0e4 <HAL_UART_Transmit_DMA+0xc4>
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800b060:	68ba      	ldr	r2, [r7, #8]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	88fa      	ldrh	r2, [r7, #6]
 800b06a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	88fa      	ldrh	r2, [r7, #6]
 800b070:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2200      	movs	r2, #0
 800b076:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2221      	movs	r2, #33	; 0x21
 800b07c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b084:	4a19      	ldr	r2, [pc, #100]	; (800b0ec <HAL_UART_Transmit_DMA+0xcc>)
 800b086:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b08c:	4a18      	ldr	r2, [pc, #96]	; (800b0f0 <HAL_UART_Transmit_DMA+0xd0>)
 800b08e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b094:	4a17      	ldr	r2, [pc, #92]	; (800b0f4 <HAL_UART_Transmit_DMA+0xd4>)
 800b096:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b09c:	2200      	movs	r2, #0
 800b09e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 800b0a0:	f107 0308 	add.w	r3, r7, #8
 800b0a4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	6819      	ldr	r1, [r3, #0]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	3304      	adds	r3, #4
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	88fb      	ldrh	r3, [r7, #6]
 800b0b8:	f7fb f8f0 	bl	800629c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b0c4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	695a      	ldr	r2, [r3, #20]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b0dc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	e000      	b.n	800b0e4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800b0e2:	2302      	movs	r3, #2
  }
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3718      	adds	r7, #24
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	0800b441 	.word	0x0800b441
 800b0f0:	0800b493 	.word	0x0800b493
 800b0f4:	0800b533 	.word	0x0800b533

0800b0f8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b086      	sub	sp, #24
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	4613      	mov	r3, r2
 800b104:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	2b20      	cmp	r3, #32
 800b110:	d166      	bne.n	800b1e0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d002      	beq.n	800b11e <HAL_UART_Receive_DMA+0x26>
 800b118:	88fb      	ldrh	r3, [r7, #6]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d101      	bne.n	800b122 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e05f      	b.n	800b1e2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d101      	bne.n	800b130 <HAL_UART_Receive_DMA+0x38>
 800b12c:	2302      	movs	r3, #2
 800b12e:	e058      	b.n	800b1e2 <HAL_UART_Receive_DMA+0xea>
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2201      	movs	r2, #1
 800b134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800b138:	68ba      	ldr	r2, [r7, #8]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	88fa      	ldrh	r2, [r7, #6]
 800b142:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2200      	movs	r2, #0
 800b148:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2222      	movs	r2, #34	; 0x22
 800b14e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b156:	4a25      	ldr	r2, [pc, #148]	; (800b1ec <HAL_UART_Receive_DMA+0xf4>)
 800b158:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b15e:	4a24      	ldr	r2, [pc, #144]	; (800b1f0 <HAL_UART_Receive_DMA+0xf8>)
 800b160:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b166:	4a23      	ldr	r2, [pc, #140]	; (800b1f4 <HAL_UART_Receive_DMA+0xfc>)
 800b168:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b16e:	2200      	movs	r2, #0
 800b170:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800b172:	f107 0308 	add.w	r3, r7, #8
 800b176:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	3304      	adds	r3, #4
 800b182:	4619      	mov	r1, r3
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	88fb      	ldrh	r3, [r7, #6]
 800b18a:	f7fb f887 	bl	800629c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800b18e:	2300      	movs	r3, #0
 800b190:	613b      	str	r3, [r7, #16]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	613b      	str	r3, [r7, #16]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	613b      	str	r3, [r7, #16]
 800b1a2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	68da      	ldr	r2, [r3, #12]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b1ba:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	695a      	ldr	r2, [r3, #20]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f042 0201 	orr.w	r2, r2, #1
 800b1ca:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	695a      	ldr	r2, [r3, #20]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1da:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	e000      	b.n	800b1e2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b1e0:	2302      	movs	r3, #2
  }
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3718      	adds	r7, #24
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	0800b4af 	.word	0x0800b4af
 800b1f0:	0800b517 	.word	0x0800b517
 800b1f4:	0800b533 	.word	0x0800b533

0800b1f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b088      	sub	sp, #32
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	695b      	ldr	r3, [r3, #20]
 800b216:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800b218:	2300      	movs	r3, #0
 800b21a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800b21c:	2300      	movs	r3, #0
 800b21e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b220:	69fb      	ldr	r3, [r7, #28]
 800b222:	f003 030f 	and.w	r3, r3, #15
 800b226:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d10d      	bne.n	800b24a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b22e:	69fb      	ldr	r3, [r7, #28]
 800b230:	f003 0320 	and.w	r3, r3, #32
 800b234:	2b00      	cmp	r3, #0
 800b236:	d008      	beq.n	800b24a <HAL_UART_IRQHandler+0x52>
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	f003 0320 	and.w	r3, r3, #32
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d003      	beq.n	800b24a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 fab6 	bl	800b7b4 <UART_Receive_IT>
      return;
 800b248:	e0d0      	b.n	800b3ec <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	f000 80b0 	beq.w	800b3b2 <HAL_UART_IRQHandler+0x1ba>
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	f003 0301 	and.w	r3, r3, #1
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d105      	bne.n	800b268 <HAL_UART_IRQHandler+0x70>
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b262:	2b00      	cmp	r3, #0
 800b264:	f000 80a5 	beq.w	800b3b2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	f003 0301 	and.w	r3, r3, #1
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00a      	beq.n	800b288 <HAL_UART_IRQHandler+0x90>
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d005      	beq.n	800b288 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b280:	f043 0201 	orr.w	r2, r3, #1
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	f003 0304 	and.w	r3, r3, #4
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d00a      	beq.n	800b2a8 <HAL_UART_IRQHandler+0xb0>
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	f003 0301 	and.w	r3, r3, #1
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d005      	beq.n	800b2a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2a0:	f043 0202 	orr.w	r2, r3, #2
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	f003 0302 	and.w	r3, r3, #2
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00a      	beq.n	800b2c8 <HAL_UART_IRQHandler+0xd0>
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	f003 0301 	and.w	r3, r3, #1
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d005      	beq.n	800b2c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2c0:	f043 0204 	orr.w	r2, r3, #4
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b2c8:	69fb      	ldr	r3, [r7, #28]
 800b2ca:	f003 0308 	and.w	r3, r3, #8
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d00f      	beq.n	800b2f2 <HAL_UART_IRQHandler+0xfa>
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	f003 0320 	and.w	r3, r3, #32
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d104      	bne.n	800b2e6 <HAL_UART_IRQHandler+0xee>
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	f003 0301 	and.w	r3, r3, #1
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d005      	beq.n	800b2f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ea:	f043 0208 	orr.w	r2, r3, #8
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d077      	beq.n	800b3ea <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	f003 0320 	and.w	r3, r3, #32
 800b300:	2b00      	cmp	r3, #0
 800b302:	d007      	beq.n	800b314 <HAL_UART_IRQHandler+0x11c>
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	f003 0320 	and.w	r3, r3, #32
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d002      	beq.n	800b314 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 fa50 	bl	800b7b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	695b      	ldr	r3, [r3, #20]
 800b31a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b31e:	2b00      	cmp	r3, #0
 800b320:	bf14      	ite	ne
 800b322:	2301      	movne	r3, #1
 800b324:	2300      	moveq	r3, #0
 800b326:	b2db      	uxtb	r3, r3
 800b328:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b32e:	f003 0308 	and.w	r3, r3, #8
 800b332:	2b00      	cmp	r3, #0
 800b334:	d102      	bne.n	800b33c <HAL_UART_IRQHandler+0x144>
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d031      	beq.n	800b3a0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 f9a1 	bl	800b684 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	695b      	ldr	r3, [r3, #20]
 800b348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d023      	beq.n	800b398 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	695a      	ldr	r2, [r3, #20]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b35e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b364:	2b00      	cmp	r3, #0
 800b366:	d013      	beq.n	800b390 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b36c:	4a21      	ldr	r2, [pc, #132]	; (800b3f4 <HAL_UART_IRQHandler+0x1fc>)
 800b36e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b374:	4618      	mov	r0, r3
 800b376:	f7fa fff1 	bl	800635c <HAL_DMA_Abort_IT>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d016      	beq.n	800b3ae <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b38a:	4610      	mov	r0, r2
 800b38c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b38e:	e00e      	b.n	800b3ae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 f84c 	bl	800b42e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b396:	e00a      	b.n	800b3ae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 f848 	bl	800b42e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b39e:	e006      	b.n	800b3ae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 f844 	bl	800b42e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800b3ac:	e01d      	b.n	800b3ea <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3ae:	bf00      	nop
    return;
 800b3b0:	e01b      	b.n	800b3ea <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d008      	beq.n	800b3ce <HAL_UART_IRQHandler+0x1d6>
 800b3bc:	69bb      	ldr	r3, [r7, #24]
 800b3be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d003      	beq.n	800b3ce <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f98d 	bl	800b6e6 <UART_Transmit_IT>
    return;
 800b3cc:	e00e      	b.n	800b3ec <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d009      	beq.n	800b3ec <HAL_UART_IRQHandler+0x1f4>
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d004      	beq.n	800b3ec <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 f9ce 	bl	800b784 <UART_EndTransmit_IT>
    return;
 800b3e8:	e000      	b.n	800b3ec <HAL_UART_IRQHandler+0x1f4>
    return;
 800b3ea:	bf00      	nop
  }
}
 800b3ec:	3720      	adds	r7, #32
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	0800b6bf 	.word	0x0800b6bf

0800b3f8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b400:	bf00      	nop
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	bc80      	pop	{r7}
 800b408:	4770      	bx	lr

0800b40a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b40a:	b480      	push	{r7}
 800b40c:	b083      	sub	sp, #12
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b412:	bf00      	nop
 800b414:	370c      	adds	r7, #12
 800b416:	46bd      	mov	sp, r7
 800b418:	bc80      	pop	{r7}
 800b41a:	4770      	bx	lr

0800b41c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b424:	bf00      	nop
 800b426:	370c      	adds	r7, #12
 800b428:	46bd      	mov	sp, r7
 800b42a:	bc80      	pop	{r7}
 800b42c:	4770      	bx	lr

0800b42e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b42e:	b480      	push	{r7}
 800b430:	b083      	sub	sp, #12
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b436:	bf00      	nop
 800b438:	370c      	adds	r7, #12
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bc80      	pop	{r7}
 800b43e:	4770      	bx	lr

0800b440 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 0320 	and.w	r3, r3, #32
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d113      	bne.n	800b484 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2200      	movs	r2, #0
 800b460:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	695a      	ldr	r2, [r3, #20]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b470:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	68da      	ldr	r2, [r3, #12]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b480:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b482:	e002      	b.n	800b48a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800b484:	68f8      	ldr	r0, [r7, #12]
 800b486:	f7f6 fccf 	bl	8001e28 <HAL_UART_TxCpltCallback>
}
 800b48a:	bf00      	nop
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b084      	sub	sp, #16
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b4a0:	68f8      	ldr	r0, [r7, #12]
 800b4a2:	f7ff ffa9 	bl	800b3f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4a6:	bf00      	nop
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b084      	sub	sp, #16
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ba:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f003 0320 	and.w	r3, r3, #32
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d11e      	bne.n	800b508 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	68da      	ldr	r2, [r3, #12]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b4de:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	695a      	ldr	r2, [r3, #20]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f022 0201 	bic.w	r2, r2, #1
 800b4ee:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	695a      	ldr	r2, [r3, #20]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4fe:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2220      	movs	r2, #32
 800b504:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f7ff ff7e 	bl	800b40a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b50e:	bf00      	nop
 800b510:	3710      	adds	r7, #16
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b084      	sub	sp, #16
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b522:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800b524:	68f8      	ldr	r0, [r7, #12]
 800b526:	f7ff ff79 	bl	800b41c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b52a:	bf00      	nop
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b084      	sub	sp, #16
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b53a:	2300      	movs	r3, #0
 800b53c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b542:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	695b      	ldr	r3, [r3, #20]
 800b54a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b54e:	2b00      	cmp	r3, #0
 800b550:	bf14      	ite	ne
 800b552:	2301      	movne	r3, #1
 800b554:	2300      	moveq	r3, #0
 800b556:	b2db      	uxtb	r3, r3
 800b558:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b560:	b2db      	uxtb	r3, r3
 800b562:	2b21      	cmp	r3, #33	; 0x21
 800b564:	d108      	bne.n	800b578 <UART_DMAError+0x46>
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d005      	beq.n	800b578 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	2200      	movs	r2, #0
 800b570:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b572:	68b8      	ldr	r0, [r7, #8]
 800b574:	f000 f871 	bl	800b65a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	695b      	ldr	r3, [r3, #20]
 800b57e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b582:	2b00      	cmp	r3, #0
 800b584:	bf14      	ite	ne
 800b586:	2301      	movne	r3, #1
 800b588:	2300      	moveq	r3, #0
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b594:	b2db      	uxtb	r3, r3
 800b596:	2b22      	cmp	r3, #34	; 0x22
 800b598:	d108      	bne.n	800b5ac <UART_DMAError+0x7a>
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d005      	beq.n	800b5ac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b5a6:	68b8      	ldr	r0, [r7, #8]
 800b5a8:	f000 f86c 	bl	800b684 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5b0:	f043 0210 	orr.w	r2, r3, #16
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5b8:	68b8      	ldr	r0, [r7, #8]
 800b5ba:	f7ff ff38 	bl	800b42e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5be:	bf00      	nop
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b084      	sub	sp, #16
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	60f8      	str	r0, [r7, #12]
 800b5ce:	60b9      	str	r1, [r7, #8]
 800b5d0:	603b      	str	r3, [r7, #0]
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5d6:	e02c      	b.n	800b632 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5d8:	69bb      	ldr	r3, [r7, #24]
 800b5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5de:	d028      	beq.n	800b632 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b5e0:	69bb      	ldr	r3, [r7, #24]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d007      	beq.n	800b5f6 <UART_WaitOnFlagUntilTimeout+0x30>
 800b5e6:	f7fa fcc3 	bl	8005f70 <HAL_GetTick>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	1ad3      	subs	r3, r2, r3
 800b5f0:	69ba      	ldr	r2, [r7, #24]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d21d      	bcs.n	800b632 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	68da      	ldr	r2, [r3, #12]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b604:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	695a      	ldr	r2, [r3, #20]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f022 0201 	bic.w	r2, r2, #1
 800b614:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2220      	movs	r2, #32
 800b61a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2220      	movs	r2, #32
 800b622:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2200      	movs	r2, #0
 800b62a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800b62e:	2303      	movs	r3, #3
 800b630:	e00f      	b.n	800b652 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	4013      	ands	r3, r2
 800b63c:	68ba      	ldr	r2, [r7, #8]
 800b63e:	429a      	cmp	r2, r3
 800b640:	bf0c      	ite	eq
 800b642:	2301      	moveq	r3, #1
 800b644:	2300      	movne	r3, #0
 800b646:	b2db      	uxtb	r3, r3
 800b648:	461a      	mov	r2, r3
 800b64a:	79fb      	ldrb	r3, [r7, #7]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d0c3      	beq.n	800b5d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b650:	2300      	movs	r3, #0
}
 800b652:	4618      	mov	r0, r3
 800b654:	3710      	adds	r7, #16
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b65a:	b480      	push	{r7}
 800b65c:	b083      	sub	sp, #12
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	68da      	ldr	r2, [r3, #12]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b670:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2220      	movs	r2, #32
 800b676:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800b67a:	bf00      	nop
 800b67c:	370c      	adds	r7, #12
 800b67e:	46bd      	mov	sp, r7
 800b680:	bc80      	pop	{r7}
 800b682:	4770      	bx	lr

0800b684 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	68da      	ldr	r2, [r3, #12]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b69a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	695a      	ldr	r2, [r3, #20]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f022 0201 	bic.w	r2, r2, #1
 800b6aa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2220      	movs	r2, #32
 800b6b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800b6b4:	bf00      	nop
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bc80      	pop	{r7}
 800b6bc:	4770      	bx	lr

0800b6be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b084      	sub	sp, #16
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f7ff fea8 	bl	800b42e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6de:	bf00      	nop
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b085      	sub	sp, #20
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	2b21      	cmp	r3, #33	; 0x21
 800b6f8:	d13e      	bne.n	800b778 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b702:	d114      	bne.n	800b72e <UART_Transmit_IT+0x48>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	691b      	ldr	r3, [r3, #16]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d110      	bne.n	800b72e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6a1b      	ldr	r3, [r3, #32]
 800b710:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	881b      	ldrh	r3, [r3, #0]
 800b716:	461a      	mov	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b720:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6a1b      	ldr	r3, [r3, #32]
 800b726:	1c9a      	adds	r2, r3, #2
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	621a      	str	r2, [r3, #32]
 800b72c:	e008      	b.n	800b740 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	1c59      	adds	r1, r3, #1
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	6211      	str	r1, [r2, #32]
 800b738:	781a      	ldrb	r2, [r3, #0]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b744:	b29b      	uxth	r3, r3
 800b746:	3b01      	subs	r3, #1
 800b748:	b29b      	uxth	r3, r3
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	4619      	mov	r1, r3
 800b74e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b750:	2b00      	cmp	r3, #0
 800b752:	d10f      	bne.n	800b774 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	68da      	ldr	r2, [r3, #12]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b762:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	68da      	ldr	r2, [r3, #12]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b772:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b774:	2300      	movs	r3, #0
 800b776:	e000      	b.n	800b77a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b778:	2302      	movs	r3, #2
  }
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3714      	adds	r7, #20
 800b77e:	46bd      	mov	sp, r7
 800b780:	bc80      	pop	{r7}
 800b782:	4770      	bx	lr

0800b784 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68da      	ldr	r2, [r3, #12]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b79a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2220      	movs	r2, #32
 800b7a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f7f6 fb3f 	bl	8001e28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	2b22      	cmp	r3, #34	; 0x22
 800b7c6:	d170      	bne.n	800b8aa <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7d0:	d117      	bne.n	800b802 <UART_Receive_IT+0x4e>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	691b      	ldr	r3, [r3, #16]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d113      	bne.n	800b802 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7fa:	1c9a      	adds	r2, r3, #2
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	629a      	str	r2, [r3, #40]	; 0x28
 800b800:	e026      	b.n	800b850 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b806:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800b808:	2300      	movs	r3, #0
 800b80a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b814:	d007      	beq.n	800b826 <UART_Receive_IT+0x72>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d10a      	bne.n	800b834 <UART_Receive_IT+0x80>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d106      	bne.n	800b834 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	b2da      	uxtb	r2, r3
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	701a      	strb	r2, [r3, #0]
 800b832:	e008      	b.n	800b846 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b840:	b2da      	uxtb	r2, r3
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b84a:	1c5a      	adds	r2, r3, #1
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b854:	b29b      	uxth	r3, r3
 800b856:	3b01      	subs	r3, #1
 800b858:	b29b      	uxth	r3, r3
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	4619      	mov	r1, r3
 800b85e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b860:	2b00      	cmp	r3, #0
 800b862:	d120      	bne.n	800b8a6 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	68da      	ldr	r2, [r3, #12]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f022 0220 	bic.w	r2, r2, #32
 800b872:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	68da      	ldr	r2, [r3, #12]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b882:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	695a      	ldr	r2, [r3, #20]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f022 0201 	bic.w	r2, r2, #1
 800b892:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2220      	movs	r2, #32
 800b898:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f7ff fdb4 	bl	800b40a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	e002      	b.n	800b8ac <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	e000      	b.n	800b8ac <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800b8aa:	2302      	movs	r3, #2
  }
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3710      	adds	r7, #16
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	691b      	ldr	r3, [r3, #16]
 800b8c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	68da      	ldr	r2, [r3, #12]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	430a      	orrs	r2, r1
 800b8d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	689a      	ldr	r2, [r3, #8]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	431a      	orrs	r2, r3
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	695b      	ldr	r3, [r3, #20]
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b8ee:	f023 030c 	bic.w	r3, r3, #12
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	6812      	ldr	r2, [r2, #0]
 800b8f6:	68b9      	ldr	r1, [r7, #8]
 800b8f8:	430b      	orrs	r3, r1
 800b8fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	695b      	ldr	r3, [r3, #20]
 800b902:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	699a      	ldr	r2, [r3, #24]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	430a      	orrs	r2, r1
 800b910:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a2c      	ldr	r2, [pc, #176]	; (800b9c8 <UART_SetConfig+0x114>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d103      	bne.n	800b924 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b91c:	f7fd f914 	bl	8008b48 <HAL_RCC_GetPCLK2Freq>
 800b920:	60f8      	str	r0, [r7, #12]
 800b922:	e002      	b.n	800b92a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b924:	f7fd f8fc 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 800b928:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	4613      	mov	r3, r2
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	4413      	add	r3, r2
 800b932:	009a      	lsls	r2, r3, #2
 800b934:	441a      	add	r2, r3
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b940:	4a22      	ldr	r2, [pc, #136]	; (800b9cc <UART_SetConfig+0x118>)
 800b942:	fba2 2303 	umull	r2, r3, r2, r3
 800b946:	095b      	lsrs	r3, r3, #5
 800b948:	0119      	lsls	r1, r3, #4
 800b94a:	68fa      	ldr	r2, [r7, #12]
 800b94c:	4613      	mov	r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	4413      	add	r3, r2
 800b952:	009a      	lsls	r2, r3, #2
 800b954:	441a      	add	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b960:	4b1a      	ldr	r3, [pc, #104]	; (800b9cc <UART_SetConfig+0x118>)
 800b962:	fba3 0302 	umull	r0, r3, r3, r2
 800b966:	095b      	lsrs	r3, r3, #5
 800b968:	2064      	movs	r0, #100	; 0x64
 800b96a:	fb00 f303 	mul.w	r3, r0, r3
 800b96e:	1ad3      	subs	r3, r2, r3
 800b970:	011b      	lsls	r3, r3, #4
 800b972:	3332      	adds	r3, #50	; 0x32
 800b974:	4a15      	ldr	r2, [pc, #84]	; (800b9cc <UART_SetConfig+0x118>)
 800b976:	fba2 2303 	umull	r2, r3, r2, r3
 800b97a:	095b      	lsrs	r3, r3, #5
 800b97c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b980:	4419      	add	r1, r3
 800b982:	68fa      	ldr	r2, [r7, #12]
 800b984:	4613      	mov	r3, r2
 800b986:	009b      	lsls	r3, r3, #2
 800b988:	4413      	add	r3, r2
 800b98a:	009a      	lsls	r2, r3, #2
 800b98c:	441a      	add	r2, r3
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	fbb2 f2f3 	udiv	r2, r2, r3
 800b998:	4b0c      	ldr	r3, [pc, #48]	; (800b9cc <UART_SetConfig+0x118>)
 800b99a:	fba3 0302 	umull	r0, r3, r3, r2
 800b99e:	095b      	lsrs	r3, r3, #5
 800b9a0:	2064      	movs	r0, #100	; 0x64
 800b9a2:	fb00 f303 	mul.w	r3, r0, r3
 800b9a6:	1ad3      	subs	r3, r2, r3
 800b9a8:	011b      	lsls	r3, r3, #4
 800b9aa:	3332      	adds	r3, #50	; 0x32
 800b9ac:	4a07      	ldr	r2, [pc, #28]	; (800b9cc <UART_SetConfig+0x118>)
 800b9ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b9b2:	095b      	lsrs	r3, r3, #5
 800b9b4:	f003 020f 	and.w	r2, r3, #15
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	440a      	add	r2, r1
 800b9be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b9c0:	bf00      	nop
 800b9c2:	3710      	adds	r7, #16
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	40013800 	.word	0x40013800
 800b9cc:	51eb851f 	.word	0x51eb851f

0800b9d0 <_ZN10ControllerC1Ev>:
#include "Controller.hpp"



Controller::Controller() {}
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b086      	sub	sp, #24
 800b9d4:	af04      	add	r7, sp, #16
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	4a6b      	ldr	r2, [pc, #428]	; (800bb88 <_ZN10ControllerC1Ev+0x1b8>)
 800b9dc:	639a      	str	r2, [r3, #56]	; 0x38
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4a6a      	ldr	r2, [pc, #424]	; (800bb8c <_ZN10ControllerC1Ev+0x1bc>)
 800b9e2:	63da      	str	r2, [r3, #60]	; 0x3c
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	22c8      	movs	r2, #200	; 0xc8
 800b9e8:	641a      	str	r2, [r3, #64]	; 0x40
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7f5 f954 	bl	8000c9c <__aeabi_i2f>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b9fc:	f7f5 fa56 	bl	8000eac <__aeabi_fdiv>
 800ba00:	4603      	mov	r3, r0
 800ba02:	461a      	mov	r2, r3
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	645a      	str	r2, [r3, #68]	; 0x44
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4a61      	ldr	r2, [pc, #388]	; (800bb90 <_ZN10ControllerC1Ev+0x1c0>)
 800ba0c:	649a      	str	r2, [r3, #72]	; 0x48
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	4a60      	ldr	r2, [pc, #384]	; (800bb94 <_ZN10ControllerC1Ev+0x1c4>)
 800ba12:	64da      	str	r2, [r3, #76]	; 0x4c
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	4a60      	ldr	r2, [pc, #384]	; (800bb98 <_ZN10ControllerC1Ev+0x1c8>)
 800ba18:	651a      	str	r2, [r3, #80]	; 0x50
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f04f 0200 	mov.w	r2, #0
 800ba20:	655a      	str	r2, [r3, #84]	; 0x54
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	4a5d      	ldr	r2, [pc, #372]	; (800bb9c <_ZN10ControllerC1Ev+0x1cc>)
 800ba26:	659a      	str	r2, [r3, #88]	; 0x58
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	4a5d      	ldr	r2, [pc, #372]	; (800bba0 <_ZN10ControllerC1Ev+0x1d0>)
 800ba2c:	65da      	str	r2, [r3, #92]	; 0x5c
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4a5c      	ldr	r2, [pc, #368]	; (800bba4 <_ZN10ControllerC1Ev+0x1d4>)
 800ba32:	661a      	str	r2, [r3, #96]	; 0x60
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	665a      	str	r2, [r3, #100]	; 0x64
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	669a      	str	r2, [r3, #104]	; 0x68
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	66da      	str	r2, [r3, #108]	; 0x6c
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	4a56      	ldr	r2, [pc, #344]	; (800bba8 <_ZN10ControllerC1Ev+0x1d8>)
 800ba50:	671a      	str	r2, [r3, #112]	; 0x70
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4a55      	ldr	r2, [pc, #340]	; (800bbac <_ZN10ControllerC1Ev+0x1dc>)
 800ba56:	675a      	str	r2, [r3, #116]	; 0x74
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a55      	ldr	r2, [pc, #340]	; (800bbb0 <_ZN10ControllerC1Ev+0x1e0>)
 800ba5c:	679a      	str	r2, [r3, #120]	; 0x78
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4a54      	ldr	r2, [pc, #336]	; (800bbb4 <_ZN10ControllerC1Ev+0x1e4>)
 800ba62:	67da      	str	r2, [r3, #124]	; 0x7c
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	4a54      	ldr	r2, [pc, #336]	; (800bbb8 <_ZN10ControllerC1Ev+0x1e8>)
 800ba68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	4a53      	ldr	r2, [pc, #332]	; (800bbbc <_ZN10ControllerC1Ev+0x1ec>)
 800ba70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	4a52      	ldr	r2, [pc, #328]	; (800bbc0 <_ZN10ControllerC1Ev+0x1f0>)
 800ba78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f04f 0200 	mov.w	r2, #0
 800ba82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f04f 0200 	mov.w	r2, #0
 800ba8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800ba96:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f04f 0200 	mov.w	r2, #0
 800baa0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f04f 0200 	mov.w	r2, #0
 800baaa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800bab4:	a330      	add	r3, pc, #192	; (adr r3, 800bb78 <_ZN10ControllerC1Ev+0x1a8>)
 800bab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800babe:	a32e      	add	r3, pc, #184	; (adr r3, 800bb78 <_ZN10ControllerC1Ev+0x1a8>)
 800bac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac4:	e9cd 2300 	strd	r2, r3, [sp]
 800bac8:	a32d      	add	r3, pc, #180	; (adr r3, 800bb80 <_ZN10ControllerC1Ev+0x1b0>)
 800baca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bace:	4608      	mov	r0, r1
 800bad0:	f002 fa2c 	bl	800df2c <_ZN3lpfC1Eddd>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f103 01c8 	add.w	r1, r3, #200	; 0xc8
 800bada:	a327      	add	r3, pc, #156	; (adr r3, 800bb78 <_ZN10ControllerC1Ev+0x1a8>)
 800badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bae4:	a324      	add	r3, pc, #144	; (adr r3, 800bb78 <_ZN10ControllerC1Ev+0x1a8>)
 800bae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baea:	e9cd 2300 	strd	r2, r3, [sp]
 800baee:	a324      	add	r3, pc, #144	; (adr r3, 800bb80 <_ZN10ControllerC1Ev+0x1b0>)
 800baf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf4:	4608      	mov	r0, r1
 800baf6:	f002 fa19 	bl	800df2c <_ZN3lpfC1Eddd>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800bb00:	a31d      	add	r3, pc, #116	; (adr r3, 800bb78 <_ZN10ControllerC1Ev+0x1a8>)
 800bb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bb0a:	a31b      	add	r3, pc, #108	; (adr r3, 800bb78 <_ZN10ControllerC1Ev+0x1a8>)
 800bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb10:	e9cd 2300 	strd	r2, r3, [sp]
 800bb14:	a31a      	add	r3, pc, #104	; (adr r3, 800bb80 <_ZN10ControllerC1Ev+0x1b0>)
 800bb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1a:	4608      	mov	r0, r1
 800bb1c:	f002 fa06 	bl	800df2c <_ZN3lpfC1Eddd>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800bb26:	4618      	mov	r0, r3
 800bb28:	f001 fdfa 	bl	800d720 <_ZN3PIDC1Ev>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800bb32:	4618      	mov	r0, r3
 800bb34:	f001 fdf4 	bl	800d720 <_ZN3PIDC1Ev>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f001 fdee 	bl	800d720 <_ZN3PIDC1Ev>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f001 fde8 	bl	800d720 <_ZN3PIDC1Ev>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800bb56:	4618      	mov	r0, r3
 800bb58:	f001 fde2 	bl	800d720 <_ZN3PIDC1Ev>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 800bb62:	4618      	mov	r0, r3
 800bb64:	f001 fddc 	bl	800d720 <_ZN3PIDC1Ev>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3708      	adds	r7, #8
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	f3af 8000 	nop.w
 800bb78:	fc3b4f61 	.word	0xfc3b4f61
 800bb7c:	3fa35935 	.word	0x3fa35935
 800bb80:	4f0d844d 	.word	0x4f0d844d
 800bb84:	3fed94af 	.word	0x3fed94af
 800bb88:	44c1c000 	.word	0x44c1c000
 800bb8c:	42654ca3 	.word	0x42654ca3
 800bb90:	3fb33333 	.word	0x3fb33333
 800bb94:	411cf5c3 	.word	0x411cf5c3
 800bb98:	41f9d70a 	.word	0x41f9d70a
 800bb9c:	3e6147ae 	.word	0x3e6147ae
 800bba0:	3d4ccccd 	.word	0x3d4ccccd
 800bba4:	3cf5c28f 	.word	0x3cf5c28f
 800bba8:	40a00000 	.word	0x40a00000
 800bbac:	41100000 	.word	0x41100000
 800bbb0:	41400000 	.word	0x41400000
 800bbb4:	40400000 	.word	0x40400000
 800bbb8:	41200000 	.word	0x41200000
 800bbbc:	41700000 	.word	0x41700000
 800bbc0:	c0800000 	.word	0xc0800000

0800bbc4 <_ZN10Controller3RunEv>:

void Controller::Run (void) {
 800bbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbc8:	b092      	sub	sp, #72	; 0x48
 800bbca:	af04      	add	r7, sp, #16
 800bbcc:	6078      	str	r0, [r7, #4]
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);
		vel_controller_counter++;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd2:	1c5a      	adds	r2, r3, #1
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	625a      	str	r2, [r3, #36]	; 0x24

        roll  = state.angles[0];
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	60da      	str	r2, [r3, #12]
        pitch = state.angles[1];
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	611a      	str	r2, [r3, #16]
        yaw    = state.angles[2];
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	615a      	str	r2, [r3, #20]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	619a      	str	r2, [r3, #24]
        pitch_rate = state.rates[1];
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	61da      	str	r2, [r3, #28]
        yaw_rate   = state.rates[2];
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	621a      	str	r2, [r3, #32]

        roll_bias = state.bias[0];
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	609a      	str	r2, [r3, #8]
        
    if(!swarm) {
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800bc38:	f083 0301 	eor.w	r3, r3, #1
 800bc3c:	b2db      	uxtb	r3, r3
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d01b      	beq.n	800bc7a <_ZN10Controller3RunEv+0xb6>
         Kp_roll = 0.28; //0.3
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4a52      	ldr	r2, [pc, #328]	; (800bd90 <_ZN10Controller3RunEv+0x1cc>)
 800bc46:	659a      	str	r2, [r3, #88]	; 0x58
         Ki_roll = 0.02;  //0.008
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4a52      	ldr	r2, [pc, #328]	; (800bd94 <_ZN10Controller3RunEv+0x1d0>)
 800bc4c:	65da      	str	r2, [r3, #92]	; 0x5c
         Kd_roll = 0.03; //0.007 0.01
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4a51      	ldr	r2, [pc, #324]	; (800bd98 <_ZN10Controller3RunEv+0x1d4>)
 800bc52:	661a      	str	r2, [r3, #96]	; 0x60

         Kp_pitch = Kp_roll;	//0.8
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	665a      	str	r2, [r3, #100]	; 0x64
         Ki_pitch = Ki_roll;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	669a      	str	r2, [r3, #104]	; 0x68
         Kd_pitch = Kd_roll;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	66da      	str	r2, [r3, #108]	; 0x6c

         Kp_yaw = 5.0;// 1;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4a4b      	ldr	r2, [pc, #300]	; (800bd9c <_ZN10Controller3RunEv+0x1d8>)
 800bc70:	671a      	str	r2, [r3, #112]	; 0x70
         Ki_yaw = 12;// 1;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4a4a      	ldr	r2, [pc, #296]	; (800bda0 <_ZN10Controller3RunEv+0x1dc>)
 800bc76:	675a      	str	r2, [r3, #116]	; 0x74
 800bc78:	e01b      	b.n	800bcb2 <_ZN10Controller3RunEv+0xee>
    }

    else {
        Kp_roll = 0.9; //0.3
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4a49      	ldr	r2, [pc, #292]	; (800bda4 <_ZN10Controller3RunEv+0x1e0>)
 800bc7e:	659a      	str	r2, [r3, #88]	; 0x58
        Ki_roll = 0.00;  //0.008
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f04f 0200 	mov.w	r2, #0
 800bc86:	65da      	str	r2, [r3, #92]	; 0x5c
        Kd_roll = 0.03; //0.007 0.01
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	4a43      	ldr	r2, [pc, #268]	; (800bd98 <_ZN10Controller3RunEv+0x1d4>)
 800bc8c:	661a      	str	r2, [r3, #96]	; 0x60

        Kp_pitch = Kp_roll;	//0.8
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	665a      	str	r2, [r3, #100]	; 0x64
        Ki_pitch = Ki_roll;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	669a      	str	r2, [r3, #104]	; 0x68
        Kd_pitch = Kd_roll;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	66da      	str	r2, [r3, #108]	; 0x6c

        Kp_yaw = 5.0;// 1;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	4a3c      	ldr	r2, [pc, #240]	; (800bd9c <_ZN10Controller3RunEv+0x1d8>)
 800bcaa:	671a      	str	r2, [r3, #112]	; 0x70
        Ki_yaw = 12;// 1;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	4a3c      	ldr	r2, [pc, #240]	; (800bda0 <_ZN10Controller3RunEv+0x1dc>)
 800bcb0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    int thr;
    int thr2 = pid_roll.Sat(ch3, 2000, 1000);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 800bcbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bcc2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bcc6:	f002 f8bb 	bl	800de40 <_ZN3PID3SatEfii>
 800bcca:	4603      	mov	r3, r0
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7f5 fa15 	bl	80010fc <__aeabi_f2iz>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	633b      	str	r3, [r7, #48]	; 0x30

    switch(mod) {
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800bcdc:	2b02      	cmp	r3, #2
 800bcde:	f000 8153 	beq.w	800bf88 <_ZN10Controller3RunEv+0x3c4>
 800bce2:	2b02      	cmp	r3, #2
 800bce4:	f300 81d4 	bgt.w	800c090 <_ZN10Controller3RunEv+0x4cc>
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d002      	beq.n	800bcf2 <_ZN10Controller3RunEv+0x12e>
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d05b      	beq.n	800bda8 <_ZN10Controller3RunEv+0x1e4>
 800bcf0:	e1ce      	b.n	800c090 <_ZN10Controller3RunEv+0x4cc>
    	case STABILIZE:
    	{
    	    thr = pid_roll.Sat(ch3, 1800, 1000);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 800bcfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bd02:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800bd06:	f002 f89b 	bl	800de40 <_ZN3PID3SatEfii>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7f5 f9f5 	bl	80010fc <__aeabi_f2iz>
 800bd12:	4603      	mov	r3, r0
 800bd14:	637b      	str	r3, [r7, #52]	; 0x34
            roll_des     = state_des.angles[0];
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 	 = state_des.angles[1];
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des = state_des.rates[2];
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

            roll_des 	  	= roll_des_filt.Run(roll_des);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bd46:	4619      	mov	r1, r3
 800bd48:	4610      	mov	r0, r2
 800bd4a:	f002 f90a 	bl	800df62 <_ZN3lpf3RunEf>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800bd62:	4619      	mov	r1, r3
 800bd64:	4610      	mov	r0, r2
 800bd66:	f002 f8fc 	bl	800df62 <_ZN3lpf3RunEf>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800bd7e:	4619      	mov	r1, r3
 800bd80:	4610      	mov	r0, r2
 800bd82:	f002 f8ee 	bl	800df62 <_ZN3lpf3RunEf>
 800bd86:	4602      	mov	r2, r0
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    	    break;
 800bd8e:	e17f      	b.n	800c090 <_ZN10Controller3RunEv+0x4cc>
 800bd90:	3e8f5c29 	.word	0x3e8f5c29
 800bd94:	3ca3d70a 	.word	0x3ca3d70a
 800bd98:	3cf5c28f 	.word	0x3cf5c28f
 800bd9c:	40a00000 	.word	0x40a00000
 800bda0:	41400000 	.word	0x41400000
 800bda4:	3f666666 	.word	0x3f666666
    	}

    	case ALT_HOLD:
    	{
    		F = p_alt.PI_Vel(z0, z, z_vel, Kp_alt, Ki_alt, ch3) + m*g;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f503 6680 	add.w	r6, r3, #1024	; 0x400
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8d3 819c 	ldr.w	r8, [r3, #412]	; 0x19c
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 91a0 	ldr.w	r9, [r3, #416]	; 0x1a0
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8d3 a198 	ldr.w	sl, [r3, #408]	; 0x198
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7f5 f9b8 	bl	8001148 <__aeabi_f2uiz>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	9302      	str	r3, [sp, #8]
 800bddc:	9501      	str	r5, [sp, #4]
 800bdde:	9400      	str	r4, [sp, #0]
 800bde0:	4653      	mov	r3, sl
 800bde2:	464a      	mov	r2, r9
 800bde4:	4641      	mov	r1, r8
 800bde6:	4630      	mov	r0, r6
 800bde8:	f001 fd34 	bl	800d854 <_ZN3PID6PI_VelEfffffj>
 800bdec:	4604      	mov	r4, r0
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	4610      	mov	r0, r2
 800bdfa:	f7f4 ffa3 	bl	8000d44 <__aeabi_fmul>
 800bdfe:	4603      	mov	r3, r0
 800be00:	4619      	mov	r1, r3
 800be02:	4620      	mov	r0, r4
 800be04:	f7f4 fe96 	bl	8000b34 <__addsf3>
 800be08:	4603      	mov	r3, r0
 800be0a:	461a      	mov	r2, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			float deg2rad = 0.0175;
 800be12:	4b5c      	ldr	r3, [pc, #368]	; (800bf84 <_ZN10Controller3RunEv+0x3c0>)
 800be14:	62fb      	str	r3, [r7, #44]	; 0x2c
			float roll_r = roll * deg2rad;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	68db      	ldr	r3, [r3, #12]
 800be1a:	4619      	mov	r1, r3
 800be1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be1e:	f7f4 ff91 	bl	8000d44 <__aeabi_fmul>
 800be22:	4603      	mov	r3, r0
 800be24:	62bb      	str	r3, [r7, #40]	; 0x28
			float pitch_r = pitch * deg2rad;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	691b      	ldr	r3, [r3, #16]
 800be2a:	4619      	mov	r1, r3
 800be2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be2e:	f7f4 ff89 	bl	8000d44 <__aeabi_fmul>
 800be32:	4603      	mov	r3, r0
 800be34:	627b      	str	r3, [r7, #36]	; 0x24
			float b2e = 1 / cos(roll_r) / cos(pitch_r);
 800be36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be38:	f7f5 fe22 	bl	8001a80 <_ZSt3cosf>
 800be3c:	4603      	mov	r3, r0
 800be3e:	4619      	mov	r1, r3
 800be40:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800be44:	f7f5 f832 	bl	8000eac <__aeabi_fdiv>
 800be48:	4603      	mov	r3, r0
 800be4a:	461c      	mov	r4, r3
 800be4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be4e:	f7f5 fe17 	bl	8001a80 <_ZSt3cosf>
 800be52:	4603      	mov	r3, r0
 800be54:	4619      	mov	r1, r3
 800be56:	4620      	mov	r0, r4
 800be58:	f7f5 f828 	bl	8000eac <__aeabi_fdiv>
 800be5c:	4603      	mov	r3, r0
 800be5e:	623b      	str	r3, [r7, #32]

			F = F * b2e ; // Body to Earth
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800be66:	6a39      	ldr	r1, [r7, #32]
 800be68:	4618      	mov	r0, r3
 800be6a:	f7f4 ff6b 	bl	8000d44 <__aeabi_fmul>
 800be6e:	4603      	mov	r3, r0
 800be70:	461a      	mov	r2, r3
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			F = p_alt.Sat(F, F_max, F_min);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8d3 514c 	ldr.w	r5, [r3, #332]	; 0x14c
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be88:	4618      	mov	r0, r3
 800be8a:	f7f5 f937 	bl	80010fc <__aeabi_f2iz>
 800be8e:	4606      	mov	r6, r0
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be94:	4618      	mov	r0, r3
 800be96:	f7f5 f931 	bl	80010fc <__aeabi_f2iz>
 800be9a:	4603      	mov	r3, r0
 800be9c:	4632      	mov	r2, r6
 800be9e:	4629      	mov	r1, r5
 800bea0:	4620      	mov	r0, r4
 800bea2:	f001 ffcd 	bl	800de40 <_ZN3PID3SatEfii>
 800bea6:	4602      	mov	r2, r0
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			thr = p_alt.F2thr(F);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800beba:	4619      	mov	r1, r3
 800bebc:	4610      	mov	r0, r2
 800bebe:	f001 ffef 	bl	800dea0 <_ZN3PID5F2thrEf>
 800bec2:	4603      	mov	r3, r0
 800bec4:	637b      	str	r3, [r7, #52]	; 0x34
			thr = p_alt.Sat(thr, 1800, 1100);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 800becc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bece:	f7f4 fee5 	bl	8000c9c <__aeabi_i2f>
 800bed2:	4601      	mov	r1, r0
 800bed4:	f240 434c 	movw	r3, #1100	; 0x44c
 800bed8:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800bedc:	4620      	mov	r0, r4
 800bede:	f001 ffaf 	bl	800de40 <_ZN3PID3SatEfii>
 800bee2:	4603      	mov	r3, r0
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7f5 f909 	bl	80010fc <__aeabi_f2iz>
 800beea:	4603      	mov	r3, r0
 800beec:	637b      	str	r3, [r7, #52]	; 0x34
			alt_thr = thr;
 800beee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bef0:	f7f4 fed4 	bl	8000c9c <__aeabi_i2f>
 800bef4:	4602      	mov	r2, r0
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
			z0 = p_alt.zi;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 24ac 	ldr.w	r2, [r3, #1196]	; 0x4ac
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

            roll_des     = state_des.angles[0];
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 	 = state_des.angles[1];
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des = state_des.rates[2];
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

            roll_des 	  	= roll_des_filt.Run(roll_des);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bf38:	4619      	mov	r1, r3
 800bf3a:	4610      	mov	r0, r2
 800bf3c:	f002 f811 	bl	800df62 <_ZN3lpf3RunEf>
 800bf40:	4602      	mov	r2, r0
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
            pitch_des 		= pitch_des_filt.Run(pitch_des);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800bf54:	4619      	mov	r1, r3
 800bf56:	4610      	mov	r0, r2
 800bf58:	f002 f803 	bl	800df62 <_ZN3lpf3RunEf>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800bf70:	4619      	mov	r1, r3
 800bf72:	4610      	mov	r0, r2
 800bf74:	f001 fff5 	bl	800df62 <_ZN3lpf3RunEf>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
			break;
 800bf80:	e086      	b.n	800c090 <_ZN10Controller3RunEv+0x4cc>
 800bf82:	bf00      	nop
 800bf84:	3c8f5c29 	.word	0x3c8f5c29
    	}

    	case LOITER:
    	{
    	    thr = pid_roll.Sat(ch3, 1800, 1000);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 800bf94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bf98:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800bf9c:	f001 ff50 	bl	800de40 <_ZN3PID3SatEfii>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7f5 f8aa 	bl	80010fc <__aeabi_f2iz>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	637b      	str	r3, [r7, #52]	; 0x34

    		//roll_des  = p_velx.PI_Vel(0, y, vy, Kp_vel, Ki_vel, ch1);

    	    if(vel_controller_counter >= 10) {
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb0:	2b09      	cmp	r3, #9
 800bfb2:	d958      	bls.n	800c066 <_ZN10Controller3RunEv+0x4a2>
    	    	//PID_Pos(float pos_des, float pos, float Kp, float Ki, float Kd)
    	    	vel_controller_counter = 0;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	625a      	str	r2, [r3, #36]	; 0x24
        		pitch_des = p_velx.PID_Pos(x0,x,Kp_velx,Ki_velx,Kd_velx);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f503 6097 	add.w	r0, r3, #1208	; 0x4b8
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800bfde:	9201      	str	r2, [sp, #4]
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	462b      	mov	r3, r5
 800bfe4:	4622      	mov	r2, r4
 800bfe6:	f001 fd8b 	bl	800db00 <_ZN3PID7PID_PosEfffff>
 800bfea:	4602      	mov	r2, r0
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        		roll_des  = p_vely.PID_Pos(y0,y,Kp_vely,Ki_vely,Kd_vely);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f503 60ae 	add.w	r0, r3, #1392	; 0x570
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 41c0 	ldr.w	r4, [r3, #448]	; 0x1c0
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 800c016:	9201      	str	r2, [sp, #4]
 800c018:	9300      	str	r3, [sp, #0]
 800c01a:	462b      	mov	r3, r5
 800c01c:	4622      	mov	r2, r4
 800c01e:	f001 fd6f 	bl	800db00 <_ZN3PID7PID_PosEfffff>
 800c022:	4602      	mov	r2, r0
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc

        		pitch_des = p_velx.Sat(pitch_des, 20, -20);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f503 6097 	add.w	r0, r3, #1208	; 0x4b8
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 800c036:	f06f 0313 	mvn.w	r3, #19
 800c03a:	2214      	movs	r2, #20
 800c03c:	f001 ff00 	bl	800de40 <_ZN3PID3SatEfii>
 800c040:	4602      	mov	r2, r0
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
        		roll_des = p_vely.Sat(roll_des, 20, -20);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f503 60ae 	add.w	r0, r3, #1392	; 0x570
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
 800c054:	f06f 0313 	mvn.w	r3, #19
 800c058:	2214      	movs	r2, #20
 800c05a:	f001 fef1 	bl	800de40 <_ZN3PID3SatEfii>
 800c05e:	4602      	mov	r2, r0
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc

    	    }

            yaw_rate_des = state_des.rates[2];
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
            yaw_rate_des  	= yaw_des_filt.Run(yaw_rate_des);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800c07e:	4619      	mov	r1, r3
 800c080:	4610      	mov	r0, r2
 800c082:	f001 ff6e 	bl	800df62 <_ZN3lpf3RunEf>
 800c086:	4602      	mov	r2, r0
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

    		break;
 800c08e:	bf00      	nop
    	}

    }

	roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle,Ki_angle) + roll_des;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	68da      	ldr	r2, [r3, #12]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0a8:	9300      	str	r3, [sp, #0]
 800c0aa:	4623      	mov	r3, r4
 800c0ac:	f001 fb94 	bl	800d7d8 <_ZN3PID7P_AngleEffff>
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	4610      	mov	r0, r2
 800c0bc:	f7f4 fd3a 	bl	8000b34 <__addsf3>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle,Ki_angle) + pitch_des;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f503 7024 	add.w	r0, r3, #656	; 0x290
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	691a      	ldr	r2, [r3, #16]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0e2:	9300      	str	r3, [sp, #0]
 800c0e4:	4623      	mov	r3, r4
 800c0e6:	f001 fb77 	bl	800d7d8 <_ZN3PID7P_AngleEffff>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	4610      	mov	r0, r2
 800c0f6:	f7f4 fd1d 	bl	8000b34 <__addsf3>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

	float pd_roll_ff  = pid_roll.RateFF(roll_rate_des);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c110:	4619      	mov	r1, r3
 800c112:	4610      	mov	r0, r2
 800c114:	f001 fbfc 	bl	800d910 <_ZN3PID6RateFFEf>
 800c118:	61f8      	str	r0, [r7, #28]
	float pd_pitch_ff = pid_roll.RateFF(pitch_rate_des);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800c126:	4619      	mov	r1, r3
 800c128:	4610      	mov	r0, r2
 800c12a:	f001 fbf1 	bl	800d910 <_ZN3PID6RateFFEf>
 800c12e:	61b8      	str	r0, [r7, #24]

	pd_roll  = pid_roll.PID_Rate2(roll_rate_des,roll_rate, roll, Kp_roll, Ki_roll, Kd_roll, Kp_angle);// + pd_roll_ff;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	699e      	ldr	r6, [r3, #24]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c14a:	687a      	ldr	r2, [r7, #4]
 800c14c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800c14e:	6879      	ldr	r1, [r7, #4]
 800c150:	6e09      	ldr	r1, [r1, #96]	; 0x60
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800c156:	9003      	str	r0, [sp, #12]
 800c158:	9102      	str	r1, [sp, #8]
 800c15a:	9201      	str	r2, [sp, #4]
 800c15c:	9300      	str	r3, [sp, #0]
 800c15e:	4663      	mov	r3, ip
 800c160:	4632      	mov	r2, r6
 800c162:	4629      	mov	r1, r5
 800c164:	4620      	mov	r0, r4
 800c166:	f001 fc23 	bl	800d9b0 <_ZN3PID9PID_Rate2Efffffff>
 800c16a:	4602      	mov	r2, r0
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	pd_pitch = pid_pitch.PID_Rate2(pitch_rate_des,pitch_rate, pitch, Kp_pitch,Ki_pitch,Kd_pitch, Kp_angle);// + pd_pitch_ff;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f503 7424 	add.w	r4, r3, #656	; 0x290
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 5148 	ldr.w	r5, [r3, #328]	; 0x148
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	69de      	ldr	r6, [r3, #28]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c190:	6879      	ldr	r1, [r7, #4]
 800c192:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800c198:	9003      	str	r0, [sp, #12]
 800c19a:	9102      	str	r1, [sp, #8]
 800c19c:	9201      	str	r2, [sp, #4]
 800c19e:	9300      	str	r3, [sp, #0]
 800c1a0:	4663      	mov	r3, ip
 800c1a2:	4632      	mov	r2, r6
 800c1a4:	4629      	mov	r1, r5
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f001 fc02 	bl	800d9b0 <_ZN3PID9PID_Rate2Efffffff>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	p_yaw    = pid_yaw.PD_Rate(yaw_rate_des,yaw_rate,Kp_yaw,Ki_yaw,0);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f503 7052 	add.w	r0, r3, #840	; 0x348
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8d3 11d4 	ldr.w	r1, [r3, #468]	; 0x1d4
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6a1a      	ldr	r2, [r3, #32]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1cc:	f04f 0500 	mov.w	r5, #0
 800c1d0:	9501      	str	r5, [sp, #4]
 800c1d2:	9300      	str	r3, [sp, #0]
 800c1d4:	4623      	mov	r3, r4
 800c1d6:	f001 fcd1 	bl	800db7c <_ZN3PID7PD_RateEfffff>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140


#ifdef UAV1


    int pwm1 = thr + pd_pitch - pd_roll  - p_yaw + PITCH_TRIM - ROLL_TRIM;
 800c1e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c1e4:	f7f4 fd5a 	bl	8000c9c <__aeabi_i2f>
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	4610      	mov	r0, r2
 800c1f4:	f7f4 fc9e 	bl	8000b34 <__addsf3>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800c202:	4619      	mov	r1, r3
 800c204:	4610      	mov	r0, r2
 800c206:	f7f4 fc93 	bl	8000b30 <__aeabi_fsub>
 800c20a:	4603      	mov	r3, r0
 800c20c:	461a      	mov	r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c214:	4619      	mov	r1, r3
 800c216:	4610      	mov	r0, r2
 800c218:	f7f4 fc8a 	bl	8000b30 <__aeabi_fsub>
 800c21c:	4603      	mov	r3, r0
 800c21e:	4982      	ldr	r1, [pc, #520]	; (800c428 <_ZN10Controller3RunEv+0x864>)
 800c220:	4618      	mov	r0, r3
 800c222:	f7f4 fc87 	bl	8000b34 <__addsf3>
 800c226:	4603      	mov	r3, r0
 800c228:	4980      	ldr	r1, [pc, #512]	; (800c42c <_ZN10Controller3RunEv+0x868>)
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7f4 fc80 	bl	8000b30 <__aeabi_fsub>
 800c230:	4603      	mov	r3, r0
 800c232:	4618      	mov	r0, r3
 800c234:	f7f4 ff62 	bl	80010fc <__aeabi_f2iz>
 800c238:	4603      	mov	r3, r0
 800c23a:	617b      	str	r3, [r7, #20]
    int pwm2 = thr - pd_pitch + pd_roll  - p_yaw - PITCH_TRIM + ROLL_TRIM;
 800c23c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c23e:	f7f4 fd2d 	bl	8000c9c <__aeabi_i2f>
 800c242:	4602      	mov	r2, r0
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c24a:	4619      	mov	r1, r3
 800c24c:	4610      	mov	r0, r2
 800c24e:	f7f4 fc6f 	bl	8000b30 <__aeabi_fsub>
 800c252:	4603      	mov	r3, r0
 800c254:	461a      	mov	r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800c25c:	4619      	mov	r1, r3
 800c25e:	4610      	mov	r0, r2
 800c260:	f7f4 fc68 	bl	8000b34 <__addsf3>
 800c264:	4603      	mov	r3, r0
 800c266:	461a      	mov	r2, r3
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c26e:	4619      	mov	r1, r3
 800c270:	4610      	mov	r0, r2
 800c272:	f7f4 fc5d 	bl	8000b30 <__aeabi_fsub>
 800c276:	4603      	mov	r3, r0
 800c278:	496b      	ldr	r1, [pc, #428]	; (800c428 <_ZN10Controller3RunEv+0x864>)
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7f4 fc58 	bl	8000b30 <__aeabi_fsub>
 800c280:	4603      	mov	r3, r0
 800c282:	496a      	ldr	r1, [pc, #424]	; (800c42c <_ZN10Controller3RunEv+0x868>)
 800c284:	4618      	mov	r0, r3
 800c286:	f7f4 fc55 	bl	8000b34 <__addsf3>
 800c28a:	4603      	mov	r3, r0
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7f4 ff35 	bl	80010fc <__aeabi_f2iz>
 800c292:	4603      	mov	r3, r0
 800c294:	613b      	str	r3, [r7, #16]
    int pwm3 = thr + pd_pitch + pd_roll  + p_yaw + PITCH_TRIM + ROLL_TRIM;
 800c296:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c298:	f7f4 fd00 	bl	8000c9c <__aeabi_i2f>
 800c29c:	4602      	mov	r2, r0
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	4610      	mov	r0, r2
 800c2a8:	f7f4 fc44 	bl	8000b34 <__addsf3>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	4610      	mov	r0, r2
 800c2ba:	f7f4 fc3b 	bl	8000b34 <__addsf3>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	4610      	mov	r0, r2
 800c2cc:	f7f4 fc32 	bl	8000b34 <__addsf3>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	4955      	ldr	r1, [pc, #340]	; (800c428 <_ZN10Controller3RunEv+0x864>)
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7f4 fc2d 	bl	8000b34 <__addsf3>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	4953      	ldr	r1, [pc, #332]	; (800c42c <_ZN10Controller3RunEv+0x868>)
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7f4 fc28 	bl	8000b34 <__addsf3>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7f4 ff08 	bl	80010fc <__aeabi_f2iz>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	60fb      	str	r3, [r7, #12]
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw - PITCH_TRIM - ROLL_TRIM;
 800c2f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c2f2:	f7f4 fcd3 	bl	8000c9c <__aeabi_i2f>
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c2fe:	4619      	mov	r1, r3
 800c300:	4610      	mov	r0, r2
 800c302:	f7f4 fc15 	bl	8000b30 <__aeabi_fsub>
 800c306:	4603      	mov	r3, r0
 800c308:	461a      	mov	r2, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800c310:	4619      	mov	r1, r3
 800c312:	4610      	mov	r0, r2
 800c314:	f7f4 fc0c 	bl	8000b30 <__aeabi_fsub>
 800c318:	4603      	mov	r3, r0
 800c31a:	461a      	mov	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c322:	4619      	mov	r1, r3
 800c324:	4610      	mov	r0, r2
 800c326:	f7f4 fc05 	bl	8000b34 <__addsf3>
 800c32a:	4603      	mov	r3, r0
 800c32c:	493e      	ldr	r1, [pc, #248]	; (800c428 <_ZN10Controller3RunEv+0x864>)
 800c32e:	4618      	mov	r0, r3
 800c330:	f7f4 fbfe 	bl	8000b30 <__aeabi_fsub>
 800c334:	4603      	mov	r3, r0
 800c336:	493d      	ldr	r1, [pc, #244]	; (800c42c <_ZN10Controller3RunEv+0x868>)
 800c338:	4618      	mov	r0, r3
 800c33a:	f7f4 fbf9 	bl	8000b30 <__aeabi_fsub>
 800c33e:	4603      	mov	r3, r0
 800c340:	4618      	mov	r0, r3
 800c342:	f7f4 fedb 	bl	80010fc <__aeabi_f2iz>
 800c346:	4603      	mov	r3, r0
 800c348:	60bb      	str	r3, [r7, #8]
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw - PITCH_TRIM - ROLL_TRIM;

#endif

    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800c350:	6978      	ldr	r0, [r7, #20]
 800c352:	f7f4 fca3 	bl	8000c9c <__aeabi_i2f>
 800c356:	4601      	mov	r1, r0
 800c358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c35a:	9300      	str	r3, [sp, #0]
 800c35c:	f240 434c 	movw	r3, #1100	; 0x44c
 800c360:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c364:	4620      	mov	r0, r4
 800c366:	f001 fd31 	bl	800ddcc <_ZN3PID3SatEfiii>
 800c36a:	4603      	mov	r3, r0
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7f4 fec5 	bl	80010fc <__aeabi_f2iz>
 800c372:	4603      	mov	r3, r0
 800c374:	617b      	str	r3, [r7, #20]
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800c37c:	6938      	ldr	r0, [r7, #16]
 800c37e:	f7f4 fc8d 	bl	8000c9c <__aeabi_i2f>
 800c382:	4601      	mov	r1, r0
 800c384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c386:	9300      	str	r3, [sp, #0]
 800c388:	f240 434c 	movw	r3, #1100	; 0x44c
 800c38c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c390:	4620      	mov	r0, r4
 800c392:	f001 fd1b 	bl	800ddcc <_ZN3PID3SatEfiii>
 800c396:	4603      	mov	r3, r0
 800c398:	4618      	mov	r0, r3
 800c39a:	f7f4 feaf 	bl	80010fc <__aeabi_f2iz>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	613b      	str	r3, [r7, #16]
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800c3a8:	68f8      	ldr	r0, [r7, #12]
 800c3aa:	f7f4 fc77 	bl	8000c9c <__aeabi_i2f>
 800c3ae:	4601      	mov	r1, r0
 800c3b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3b2:	9300      	str	r3, [sp, #0]
 800c3b4:	f240 434c 	movw	r3, #1100	; 0x44c
 800c3b8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c3bc:	4620      	mov	r0, r4
 800c3be:	f001 fd05 	bl	800ddcc <_ZN3PID3SatEfiii>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7f4 fe99 	bl	80010fc <__aeabi_f2iz>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	60fb      	str	r3, [r7, #12]
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800c3d4:	68b8      	ldr	r0, [r7, #8]
 800c3d6:	f7f4 fc61 	bl	8000c9c <__aeabi_i2f>
 800c3da:	4601      	mov	r1, r0
 800c3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3de:	9300      	str	r3, [sp, #0]
 800c3e0:	f240 434c 	movw	r3, #1100	; 0x44c
 800c3e4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f001 fcef 	bl	800ddcc <_ZN3PID3SatEfiii>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7f4 fe83 	bl	80010fc <__aeabi_f2iz>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	60bb      	str	r3, [r7, #8]
    controller_output_pwm2[1] = thr - pd_pitch + pd_roll  + p_yaw;
    controller_output_pwm2[2] = thr + pd_pitch + pd_roll  - p_yaw;
    controller_output_pwm2[3] = thr - pd_pitch - pd_roll  - p_yaw;
    */

    if(swarm) {
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800c400:	2b00      	cmp	r3, #0
 800c402:	d015      	beq.n	800c430 <_ZN10Controller3RunEv+0x86c>
        controller_output_pwm2[0] = pwm1;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	697a      	ldr	r2, [r7, #20]
 800c408:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        controller_output_pwm2[1] = pwm2;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	693a      	ldr	r2, [r7, #16]
 800c410:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
        controller_output_pwm2[2] = pwm3;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	68fa      	ldr	r2, [r7, #12]
 800c418:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        controller_output_pwm2[3] = pwm4;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	68ba      	ldr	r2, [r7, #8]
 800c420:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 800c424:	e018      	b.n	800c458 <_ZN10Controller3RunEv+0x894>
 800c426:	bf00      	nop
 800c428:	41f00000 	.word	0x41f00000
 800c42c:	41500000 	.word	0x41500000
    }

    else {
        controller_output_pwm2[0] = 1000;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c436:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        controller_output_pwm2[1] = 1000;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c440:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
        controller_output_pwm2[2] = 1000;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c44a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        controller_output_pwm2[3] = 1000;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c454:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    }



    //Saturate pwm values
    controller_output_pwm2[0] = (int)pid_roll.Sat(controller_output_pwm2[0],PWM_UPPER,1000,thr);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800c464:	4618      	mov	r0, r3
 800c466:	f7f4 fc19 	bl	8000c9c <__aeabi_i2f>
 800c46a:	4601      	mov	r1, r0
 800c46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c46e:	9300      	str	r3, [sp, #0]
 800c470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c474:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c478:	4620      	mov	r0, r4
 800c47a:	f001 fca7 	bl	800ddcc <_ZN3PID3SatEfiii>
 800c47e:	4603      	mov	r3, r0
 800c480:	4618      	mov	r0, r3
 800c482:	f7f4 fe3b 	bl	80010fc <__aeabi_f2iz>
 800c486:	4602      	mov	r2, r0
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    controller_output_pwm2[1] = (int)pid_roll.Sat(controller_output_pwm2[1],PWM_UPPER,1000,thr);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7f4 fbfe 	bl	8000c9c <__aeabi_i2f>
 800c4a0:	4601      	mov	r1, r0
 800c4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a4:	9300      	str	r3, [sp, #0]
 800c4a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c4aa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	f001 fc8c 	bl	800ddcc <_ZN3PID3SatEfiii>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7f4 fe20 	bl	80010fc <__aeabi_f2iz>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    controller_output_pwm2[2] = (int)pid_roll.Sat(controller_output_pwm2[2],PWM_UPPER,1000,thr);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7f4 fbe3 	bl	8000c9c <__aeabi_i2f>
 800c4d6:	4601      	mov	r1, r0
 800c4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4da:	9300      	str	r3, [sp, #0]
 800c4dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c4e0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	f001 fc71 	bl	800ddcc <_ZN3PID3SatEfiii>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7f4 fe05 	bl	80010fc <__aeabi_f2iz>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    controller_output_pwm2[3] = (int)pid_roll.Sat(controller_output_pwm2[3],PWM_UPPER,1000,thr);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c506:	4618      	mov	r0, r3
 800c508:	f7f4 fbc8 	bl	8000c9c <__aeabi_i2f>
 800c50c:	4601      	mov	r1, r0
 800c50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c510:	9300      	str	r3, [sp, #0]
 800c512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c516:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c51a:	4620      	mov	r0, r4
 800c51c:	f001 fc56 	bl	800ddcc <_ZN3PID3SatEfiii>
 800c520:	4603      	mov	r3, r0
 800c522:	4618      	mov	r0, r3
 800c524:	f7f4 fdea 	bl	80010fc <__aeabi_f2iz>
 800c528:	4602      	mov	r2, r0
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    w3 = pid_roll.pwm2mot(pwm3,-1);
    w4 = pid_roll.pwm2mot(pwm4,-1);
*/

   // std::vector<float> controller_output = 	{w1,w2,w3,w4};
    controller_output_pwm[0] = pwm1;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	697a      	ldr	r2, [r7, #20]
 800c534:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    controller_output_pwm[1] = pwm2;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	693a      	ldr	r2, [r7, #16]
 800c53c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    controller_output_pwm[2] = pwm3;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	68fa      	ldr	r2, [r7, #12]
 800c544:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    controller_output_pwm[3] = pwm4;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	68ba      	ldr	r2, [r7, #8]
 800c54c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

  //  return controller_output;
}
 800c550:	bf00      	nop
 800c552:	3738      	adds	r7, #56	; 0x38
 800c554:	46bd      	mov	sp, r7
 800c556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c55a:	bf00      	nop

0800c55c <_ZN10ControllerD1Ev>:

Controller::~Controller() {}
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 800c56a:	4618      	mov	r0, r3
 800c56c:	f001 fcd0 	bl	800df10 <_ZN3PIDD1Ev>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800c576:	4618      	mov	r0, r3
 800c578:	f001 fcca 	bl	800df10 <_ZN3PIDD1Ev>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c582:	4618      	mov	r0, r3
 800c584:	f001 fcc4 	bl	800df10 <_ZN3PIDD1Ev>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800c58e:	4618      	mov	r0, r3
 800c590:	f001 fcbe 	bl	800df10 <_ZN3PIDD1Ev>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800c59a:	4618      	mov	r0, r3
 800c59c:	f001 fcb8 	bl	800df10 <_ZN3PIDD1Ev>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f001 fcb2 	bl	800df10 <_ZN3PIDD1Ev>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	33f0      	adds	r3, #240	; 0xf0
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f001 fd2c 	bl	800e00e <_ZN3lpfD1Ev>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	33c8      	adds	r3, #200	; 0xc8
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f001 fd27 	bl	800e00e <_ZN3lpfD1Ev>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	33a0      	adds	r3, #160	; 0xa0
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f001 fd22 	bl	800e00e <_ZN3lpfD1Ev>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	0000      	movs	r0, r0
	...

0800c5d8 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi()  {
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b086      	sub	sp, #24
 800c5dc:	af04      	add	r7, sp, #16
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f04f 0200 	mov.w	r2, #0
 800c5e6:	611a      	str	r2, [r3, #16]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4a89      	ldr	r2, [pc, #548]	; (800c810 <_ZN15Kalman_FiltresiC1Ev+0x238>)
 800c5ec:	615a      	str	r2, [r3, #20]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f04f 0200 	mov.w	r2, #0
 800c5f4:	631a      	str	r2, [r3, #48]	; 0x30
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f04f 0200 	mov.w	r2, #0
 800c5fc:	635a      	str	r2, [r3, #52]	; 0x34
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f04f 0200 	mov.w	r2, #0
 800c604:	639a      	str	r2, [r3, #56]	; 0x38
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	4a82      	ldr	r2, [pc, #520]	; (800c814 <_ZN15Kalman_FiltresiC1Ev+0x23c>)
 800c60a:	63da      	str	r2, [r3, #60]	; 0x3c
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	4a82      	ldr	r2, [pc, #520]	; (800c818 <_ZN15Kalman_FiltresiC1Ev+0x240>)
 800c610:	655a      	str	r2, [r3, #84]	; 0x54
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4a80      	ldr	r2, [pc, #512]	; (800c818 <_ZN15Kalman_FiltresiC1Ev+0x240>)
 800c616:	659a      	str	r2, [r3, #88]	; 0x58
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800c61e:	65da      	str	r2, [r3, #92]	; 0x5c
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f04f 0200 	mov.w	r2, #0
 800c626:	661a      	str	r2, [r3, #96]	; 0x60
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f04f 0200 	mov.w	r2, #0
 800c62e:	665a      	str	r2, [r3, #100]	; 0x64
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f04f 0200 	mov.w	r2, #0
 800c636:	669a      	str	r2, [r3, #104]	; 0x68
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	4a76      	ldr	r2, [pc, #472]	; (800c814 <_ZN15Kalman_FiltresiC1Ev+0x23c>)
 800c63c:	66da      	str	r2, [r3, #108]	; 0x6c
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	4a76      	ldr	r2, [pc, #472]	; (800c81c <_ZN15Kalman_FiltresiC1Ev+0x244>)
 800c642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f04f 0200 	mov.w	r2, #0
 800c64c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f04f 0200 	mov.w	r2, #0
 800c656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	4a6d      	ldr	r2, [pc, #436]	; (800c814 <_ZN15Kalman_FiltresiC1Ev+0x23c>)
 800c65e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4a6e      	ldr	r2, [pc, #440]	; (800c820 <_ZN15Kalman_FiltresiC1Ev+0x248>)
 800c666:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4a6d      	ldr	r2, [pc, #436]	; (800c824 <_ZN15Kalman_FiltresiC1Ev+0x24c>)
 800c66e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4a6b      	ldr	r2, [pc, #428]	; (800c824 <_ZN15Kalman_FiltresiC1Ev+0x24c>)
 800c676:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4a6a      	ldr	r2, [pc, #424]	; (800c828 <_ZN15Kalman_FiltresiC1Ev+0x250>)
 800c67e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4a69      	ldr	r2, [pc, #420]	; (800c82c <_ZN15Kalman_FiltresiC1Ev+0x254>)
 800c686:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c690:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4a66      	ldr	r2, [pc, #408]	; (800c830 <_ZN15Kalman_FiltresiC1Ev+0x258>)
 800c698:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a65      	ldr	r2, [pc, #404]	; (800c834 <_ZN15Kalman_FiltresiC1Ev+0x25c>)
 800c6a0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c6aa:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	4a61      	ldr	r2, [pc, #388]	; (800c838 <_ZN15Kalman_FiltresiC1Ev+0x260>)
 800c6b2:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	22c8      	movs	r2, #200	; 0xc8
 800c6ba:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7f4 fae9 	bl	8000c9c <__aeabi_i2f>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c6d2:	f7f4 fbeb 	bl	8000eac <__aeabi_fdiv>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7f3 fea5 	bl	8000428 <__aeabi_f2d>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	6879      	ldr	r1, [r7, #4]
 800c6e4:	e9c1 2360 	strd	r2, r3, [r1, #384]	; 0x180
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	4a54      	ldr	r2, [pc, #336]	; (800c83c <_ZN15Kalman_FiltresiC1Ev+0x264>)
 800c6ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	4a53      	ldr	r2, [pc, #332]	; (800c840 <_ZN15Kalman_FiltresiC1Ev+0x268>)
 800c6f4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	4a52      	ldr	r2, [pc, #328]	; (800c844 <_ZN15Kalman_FiltresiC1Ev+0x26c>)
 800c6fc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	4a51      	ldr	r2, [pc, #324]	; (800c848 <_ZN15Kalman_FiltresiC1Ev+0x270>)
 800c704:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	4a4f      	ldr	r2, [pc, #316]	; (800c848 <_ZN15Kalman_FiltresiC1Ev+0x270>)
 800c70c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	4a4e      	ldr	r2, [pc, #312]	; (800c84c <_ZN15Kalman_FiltresiC1Ev+0x274>)
 800c714:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800c71e:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	4a4a      	ldr	r2, [pc, #296]	; (800c850 <_ZN15Kalman_FiltresiC1Ev+0x278>)
 800c726:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c730:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	4a47      	ldr	r2, [pc, #284]	; (800c854 <_ZN15Kalman_FiltresiC1Ev+0x27c>)
 800c738:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	4a46      	ldr	r2, [pc, #280]	; (800c858 <_ZN15Kalman_FiltresiC1Ev+0x280>)
 800c740:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	4a34      	ldr	r2, [pc, #208]	; (800c818 <_ZN15Kalman_FiltresiC1Ev+0x240>)
 800c748:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c752:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c75c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f503 7134 	add.w	r1, r3, #720	; 0x2d0
 800c766:	a31e      	add	r3, pc, #120	; (adr r3, 800c7e0 <_ZN15Kalman_FiltresiC1Ev+0x208>)
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c770:	a31b      	add	r3, pc, #108	; (adr r3, 800c7e0 <_ZN15Kalman_FiltresiC1Ev+0x208>)
 800c772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c776:	e9cd 2300 	strd	r2, r3, [sp]
 800c77a:	a31b      	add	r3, pc, #108	; (adr r3, 800c7e8 <_ZN15Kalman_FiltresiC1Ev+0x210>)
 800c77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c780:	4608      	mov	r0, r1
 800c782:	f001 fbd3 	bl	800df2c <_ZN3lpfC1Eddd>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f503 713e 	add.w	r1, r3, #760	; 0x2f8
 800c78c:	a318      	add	r3, pc, #96	; (adr r3, 800c7f0 <_ZN15Kalman_FiltresiC1Ev+0x218>)
 800c78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c792:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c796:	a316      	add	r3, pc, #88	; (adr r3, 800c7f0 <_ZN15Kalman_FiltresiC1Ev+0x218>)
 800c798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79c:	e9cd 2300 	strd	r2, r3, [sp]
 800c7a0:	a315      	add	r3, pc, #84	; (adr r3, 800c7f8 <_ZN15Kalman_FiltresiC1Ev+0x220>)
 800c7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a6:	4608      	mov	r0, r1
 800c7a8:	f001 fbc0 	bl	800df2c <_ZN3lpfC1Eddd>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f503 7148 	add.w	r1, r3, #800	; 0x320
 800c7b2:	a313      	add	r3, pc, #76	; (adr r3, 800c800 <_ZN15Kalman_FiltresiC1Ev+0x228>)
 800c7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c7bc:	a310      	add	r3, pc, #64	; (adr r3, 800c800 <_ZN15Kalman_FiltresiC1Ev+0x228>)
 800c7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c2:	e9cd 2300 	strd	r2, r3, [sp]
 800c7c6:	a310      	add	r3, pc, #64	; (adr r3, 800c808 <_ZN15Kalman_FiltresiC1Ev+0x230>)
 800c7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7cc:	4608      	mov	r0, r1
 800c7ce:	f001 fbad 	bl	800df2c <_ZN3lpfC1Eddd>

}
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3708      	adds	r7, #8
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	f3af 8000 	nop.w
 800c7e0:	de7ea5f8 	.word	0xde7ea5f8
 800c7e4:	3fb2a454 	.word	0x3fb2a454
 800c7e8:	ab367a10 	.word	0xab367a10
 800c7ec:	3feb573e 	.word	0x3feb573e
 800c7f0:	fc3b4f61 	.word	0xfc3b4f61
 800c7f4:	3fa35935 	.word	0x3fa35935
 800c7f8:	4f0d844d 	.word	0x4f0d844d
 800c7fc:	3fed94af 	.word	0x3fed94af
 800c800:	e5c91d15 	.word	0xe5c91d15
 800c804:	3feda43f 	.word	0x3feda43f
 800c808:	cb923a2a 	.word	0xcb923a2a
 800c80c:	bfeb487f 	.word	0xbfeb487f
 800c810:	3ca3d70a 	.word	0x3ca3d70a
 800c814:	3c23d70a 	.word	0x3c23d70a
 800c818:	322bcc77 	.word	0x322bcc77
 800c81c:	47c35000 	.word	0x47c35000
 800c820:	461c4000 	.word	0x461c4000
 800c824:	4e6e6b28 	.word	0x4e6e6b28
 800c828:	41200000 	.word	0x41200000
 800c82c:	4b189680 	.word	0x4b189680
 800c830:	40a00000 	.word	0x40a00000
 800c834:	42480000 	.word	0x42480000
 800c838:	42654ca3 	.word	0x42654ca3
 800c83c:	bd824c8c 	.word	0xbd824c8c
 800c840:	3c8d8029 	.word	0x3c8d8029
 800c844:	3c16a355 	.word	0x3c16a355
 800c848:	40400000 	.word	0x40400000
 800c84c:	41a00000 	.word	0x41a00000
 800c850:	3cdd2f1b 	.word	0x3cdd2f1b
 800c854:	48f42400 	.word	0x48f42400
 800c858:	3727c5ac 	.word	0x3727c5ac

0800c85c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>:
	}


}

void Kalman_Filtresi::EKF_Attitude(euler_angle euler_angle) {
 800c85c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c860:	b0aa      	sub	sp, #168	; 0xa8
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
 800c866:	460b      	mov	r3, r1
 800c868:	70fb      	strb	r3, [r7, #3]
	  float accX = acc[0];
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c870:	66fb      	str	r3, [r7, #108]	; 0x6c
	  float accY = acc[1];
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c878:	66bb      	str	r3, [r7, #104]	; 0x68
	  float accZ = acc[2];
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c880:	667b      	str	r3, [r7, #100]	; 0x64

	  float gyroX = gyro[0];
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800c888:	663b      	str	r3, [r7, #96]	; 0x60
	  float gyroY = gyro[1];
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c890:	65fb      	str	r3, [r7, #92]	; 0x5c
	  float gyroZ = gyro[2];
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c898:	65bb      	str	r3, [r7, #88]	; 0x58

	  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 800c89a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c89c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c89e:	f7f4 fa51 	bl	8000d44 <__aeabi_fmul>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	461c      	mov	r4, r3
 800c8a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c8a8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800c8aa:	f7f4 fa4b 	bl	8000d44 <__aeabi_fmul>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	4620      	mov	r0, r4
 800c8b4:	f7f4 f93e 	bl	8000b34 <__addsf3>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	461c      	mov	r4, r3
 800c8bc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c8be:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c8c0:	f7f4 fa40 	bl	8000d44 <__aeabi_fmul>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	f7f4 f933 	bl	8000b34 <__addsf3>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f7f5 fa9d 	bl	8001e10 <_ZSt4sqrtf>
 800c8d6:	6578      	str	r0, [r7, #84]	; 0x54

	  pitch_acc =  asin(accX/acctop)*rad2deg + PITCH_OFFSET;
 800c8d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c8da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c8dc:	f7f4 fae6 	bl	8000eac <__aeabi_fdiv>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f7f5 fa6e 	bl	8001dc4 <_ZSt4asinf>
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	4610      	mov	r0, r2
 800c8f4:	f7f4 fa26 	bl	8000d44 <__aeabi_fmul>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c902:	4619      	mov	r1, r3
 800c904:	4610      	mov	r0, r2
 800c906:	f7f4 f915 	bl	8000b34 <__addsf3>
 800c90a:	4603      	mov	r3, r0
 800c90c:	461a      	mov	r2, r3
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	  roll_acc  =  asin(accY/acctop)*rad2deg + ROLL_OFFSET;
 800c914:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c916:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800c918:	f7f4 fac8 	bl	8000eac <__aeabi_fdiv>
 800c91c:	4603      	mov	r3, r0
 800c91e:	4618      	mov	r0, r3
 800c920:	f7f5 fa50 	bl	8001dc4 <_ZSt4asinf>
 800c924:	4602      	mov	r2, r0
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800c92c:	4619      	mov	r1, r3
 800c92e:	4610      	mov	r0, r2
 800c930:	f7f4 fa08 	bl	8000d44 <__aeabi_fmul>
 800c934:	4603      	mov	r3, r0
 800c936:	461a      	mov	r2, r3
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c93e:	4619      	mov	r1, r3
 800c940:	4610      	mov	r0, r2
 800c942:	f7f4 f8f7 	bl	8000b34 <__addsf3>
 800c946:	4603      	mov	r3, r0
 800c948:	461a      	mov	r2, r3
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8

	float angle_ekf, angle_rate, angle_bias, angle_acc, gyro;
	float S11_angle, S12_angle, S13_angle, S21_angle, S22_angle, S23_angle, S31_angle, S32_angle, S33_angle ;

	if(!armed) {
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 800c956:	f083 0301 	eor.w	r3, r3, #1
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d008      	beq.n	800c972 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x116>
	    Qa = 3;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	4a78      	ldr	r2, [pc, #480]	; (800cb44 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2e8>)
 800c964:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	    Qg = 1e-2;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	4a77      	ldr	r2, [pc, #476]	; (800cb48 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2ec>)
 800c96c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 800c970:	e007      	b.n	800c982 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x126>

	}

	else {
	    Qa = 2e2;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	4a75      	ldr	r2, [pc, #468]	; (800cb4c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f0>)
 800c976:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	    Qg = 3e1;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	4a74      	ldr	r2, [pc, #464]	; (800cb50 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f4>)
 800c97e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

	}


	//ANGLE PREDICTION
	switch(euler_angle) {
 800c982:	78fb      	ldrb	r3, [r7, #3]
 800c984:	2b02      	cmp	r3, #2
 800c986:	f000 809d 	beq.w	800cac4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x268>
 800c98a:	2b02      	cmp	r3, #2
 800c98c:	f300 80e3 	bgt.w	800cb56 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2fa>
 800c990:	2b00      	cmp	r3, #0
 800c992:	d002      	beq.n	800c99a <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x13e>
 800c994:	2b01      	cmp	r3, #1
 800c996:	d05e      	beq.n	800ca56 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x1fa>
 800c998:	e0dd      	b.n	800cb56 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2fa>
		case ROLL:
			angle_ekf = roll_ekf;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800c9a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			angle_rate = roll_rate;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			angle_bias = roll_bias;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c9b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			angle_acc = roll_acc;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800c9bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			gyro = gyroX;
 800c9c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

			S11_angle = S11_roll;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			S12_angle = S12_roll;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			S13_angle = S13_roll;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			S21_angle = S21_roll;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			S22_angle = S22_roll;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			S23_angle = S23_roll;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9f2:	67fb      	str	r3, [r7, #124]	; 0x7c
			S31_angle = S31_roll;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9f8:	67bb      	str	r3, [r7, #120]	; 0x78
			S32_angle = S32_roll;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9fe:	677b      	str	r3, [r7, #116]	; 0x74
			S33_angle = S33_roll;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca06:	673b      	str	r3, [r7, #112]	; 0x70
			if(armed) {
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	f000 80a0 	beq.w	800cb54 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f8>
				roll_int = roll_int + roll_rate*st;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7f3 fd05 	bl	8000428 <__aeabi_f2d>
 800ca1e:	4604      	mov	r4, r0
 800ca20:	460d      	mov	r5, r1
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7f3 fcfe 	bl	8000428 <__aeabi_f2d>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 800ca32:	f7f3 fd51 	bl	80004d8 <__aeabi_dmul>
 800ca36:	4602      	mov	r2, r0
 800ca38:	460b      	mov	r3, r1
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	4629      	mov	r1, r5
 800ca3e:	f7f3 fb95 	bl	800016c <__adddf3>
 800ca42:	4602      	mov	r2, r0
 800ca44:	460b      	mov	r3, r1
 800ca46:	4610      	mov	r0, r2
 800ca48:	4619      	mov	r1, r3
 800ca4a:	f7f4 f81d 	bl	8000a88 <__aeabi_d2f>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	601a      	str	r2, [r3, #0]
			}
			break;
 800ca54:	e07e      	b.n	800cb54 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2f8>

		case PITCH:
			angle_ekf = pitch_ekf;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800ca5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			angle_rate = pitch_rate;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			angle_bias = pitch_bias;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ca6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			angle_acc = pitch_acc;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800ca78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			gyro = gyroY;
 800ca7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

			S11_angle = S11_pitch;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			S12_angle = S12_pitch;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			S13_angle = S13_pitch;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			S21_angle = S21_pitch;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			S22_angle = S22_pitch;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caa6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			S23_angle = S23_pitch;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caae:	67fb      	str	r3, [r7, #124]	; 0x7c
			S31_angle = S31_pitch;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cab4:	67bb      	str	r3, [r7, #120]	; 0x78
			S32_angle = S32_pitch;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800caba:	677b      	str	r3, [r7, #116]	; 0x74
			S33_angle = S33_pitch;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cac0:	673b      	str	r3, [r7, #112]	; 0x70
			break;
 800cac2:	e048      	b.n	800cb56 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2fa>

		case YAW:
			angle_ekf = yaw_ekf;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800caca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			angle_rate = yaw_rate;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			angle_bias = yaw_bias;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800cadc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			angle_acc = yaw_acc;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800cae6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			gyro = gyroZ;
 800caea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800caec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94


			S11_angle = S11_yaw;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800caf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			S12_angle = S12_yaw;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			S13_angle = S13_yaw;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			S21_angle = S21_yaw;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			S22_angle = S22_yaw;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			S23_angle = S23_yaw;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cb28:	67fb      	str	r3, [r7, #124]	; 0x7c
			S31_angle = S31_yaw;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cb30:	67bb      	str	r3, [r7, #120]	; 0x78
			S32_angle = S32_yaw;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cb38:	677b      	str	r3, [r7, #116]	; 0x74
			S33_angle = S33_yaw;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cb40:	673b      	str	r3, [r7, #112]	; 0x70
			break;
 800cb42:	e008      	b.n	800cb56 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0x2fa>
 800cb44:	40400000 	.word	0x40400000
 800cb48:	3c23d70a 	.word	0x3c23d70a
 800cb4c:	43480000 	.word	0x43480000
 800cb50:	41f00000 	.word	0x41f00000
			break;
 800cb54:	bf00      	nop

	}

    angle_ekf = (angle_ekf) + st*(angle_rate);
 800cb56:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800cb5a:	f7f3 fc65 	bl	8000428 <__aeabi_f2d>
 800cb5e:	4680      	mov	r8, r0
 800cb60:	4689      	mov	r9, r1
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	e9d3 4560 	ldrd	r4, r5, [r3, #384]	; 0x180
 800cb68:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800cb6c:	f7f3 fc5c 	bl	8000428 <__aeabi_f2d>
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	4620      	mov	r0, r4
 800cb76:	4629      	mov	r1, r5
 800cb78:	f7f3 fcae 	bl	80004d8 <__aeabi_dmul>
 800cb7c:	4602      	mov	r2, r0
 800cb7e:	460b      	mov	r3, r1
 800cb80:	4640      	mov	r0, r8
 800cb82:	4649      	mov	r1, r9
 800cb84:	f7f3 faf2 	bl	800016c <__adddf3>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	4610      	mov	r0, r2
 800cb8e:	4619      	mov	r1, r3
 800cb90:	f7f3 ff7a 	bl	8000a88 <__aeabi_d2f>
 800cb94:	4603      	mov	r3, r0
 800cb96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    float CS_m11 = S13_angle + S33_angle*st;
 800cb9a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800cb9e:	f7f3 fc43 	bl	8000428 <__aeabi_f2d>
 800cba2:	4604      	mov	r4, r0
 800cba4:	460d      	mov	r5, r1
 800cba6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800cba8:	f7f3 fc3e 	bl	8000428 <__aeabi_f2d>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 800cbb2:	f7f3 fc91 	bl	80004d8 <__aeabi_dmul>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	460b      	mov	r3, r1
 800cbba:	4620      	mov	r0, r4
 800cbbc:	4629      	mov	r1, r5
 800cbbe:	f7f3 fad5 	bl	800016c <__adddf3>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	4610      	mov	r0, r2
 800cbc8:	4619      	mov	r1, r3
 800cbca:	f7f3 ff5d 	bl	8000a88 <__aeabi_d2f>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	653b      	str	r3, [r7, #80]	; 0x50

    S11_angle = S11_angle + sa + CS_m11*st + S31_angle*st;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7f3 ffaa 	bl	8000b34 <__addsf3>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7f3 fc20 	bl	8000428 <__aeabi_f2d>
 800cbe8:	4604      	mov	r4, r0
 800cbea:	460d      	mov	r5, r1
 800cbec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cbee:	f7f3 fc1b 	bl	8000428 <__aeabi_f2d>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 800cbf8:	f7f3 fc6e 	bl	80004d8 <__aeabi_dmul>
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	460b      	mov	r3, r1
 800cc00:	4620      	mov	r0, r4
 800cc02:	4629      	mov	r1, r5
 800cc04:	f7f3 fab2 	bl	800016c <__adddf3>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	4614      	mov	r4, r2
 800cc0e:	461d      	mov	r5, r3
 800cc10:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800cc12:	f7f3 fc09 	bl	8000428 <__aeabi_f2d>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 800cc1c:	f7f3 fc5c 	bl	80004d8 <__aeabi_dmul>
 800cc20:	4602      	mov	r2, r0
 800cc22:	460b      	mov	r3, r1
 800cc24:	4620      	mov	r0, r4
 800cc26:	4629      	mov	r1, r5
 800cc28:	f7f3 faa0 	bl	800016c <__adddf3>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	460b      	mov	r3, r1
 800cc30:	4610      	mov	r0, r2
 800cc32:	4619      	mov	r1, r3
 800cc34:	f7f3 ff28 	bl	8000a88 <__aeabi_d2f>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    S12_angle = S12_angle + S32_angle*st;
 800cc3e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800cc42:	f7f3 fbf1 	bl	8000428 <__aeabi_f2d>
 800cc46:	4604      	mov	r4, r0
 800cc48:	460d      	mov	r5, r1
 800cc4a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800cc4c:	f7f3 fbec 	bl	8000428 <__aeabi_f2d>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 800cc56:	f7f3 fc3f 	bl	80004d8 <__aeabi_dmul>
 800cc5a:	4602      	mov	r2, r0
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	4620      	mov	r0, r4
 800cc60:	4629      	mov	r1, r5
 800cc62:	f7f3 fa83 	bl	800016c <__adddf3>
 800cc66:	4602      	mov	r2, r0
 800cc68:	460b      	mov	r3, r1
 800cc6a:	4610      	mov	r0, r2
 800cc6c:	4619      	mov	r1, r3
 800cc6e:	f7f3 ff0b 	bl	8000a88 <__aeabi_d2f>
 800cc72:	4603      	mov	r3, r0
 800cc74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    S13_angle = CS_m11;
 800cc78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    S21_angle = S21_angle + S23_angle*st;
 800cc7e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800cc82:	f7f3 fbd1 	bl	8000428 <__aeabi_f2d>
 800cc86:	4604      	mov	r4, r0
 800cc88:	460d      	mov	r5, r1
 800cc8a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cc8c:	f7f3 fbcc 	bl	8000428 <__aeabi_f2d>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 800cc96:	f7f3 fc1f 	bl	80004d8 <__aeabi_dmul>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	4620      	mov	r0, r4
 800cca0:	4629      	mov	r1, r5
 800cca2:	f7f3 fa63 	bl	800016c <__adddf3>
 800cca6:	4602      	mov	r2, r0
 800cca8:	460b      	mov	r3, r1
 800ccaa:	4610      	mov	r0, r2
 800ccac:	4619      	mov	r1, r3
 800ccae:	f7f3 feeb 	bl	8000a88 <__aeabi_d2f>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    S22_angle = S22_angle + sb;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800ccc2:	f7f3 ff37 	bl	8000b34 <__addsf3>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    S23_angle = S23_angle;
    S31_angle = S31_angle + S33_angle*st;
 800cccc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800ccce:	f7f3 fbab 	bl	8000428 <__aeabi_f2d>
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	460d      	mov	r5, r1
 800ccd6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ccd8:	f7f3 fba6 	bl	8000428 <__aeabi_f2d>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 800cce2:	f7f3 fbf9 	bl	80004d8 <__aeabi_dmul>
 800cce6:	4602      	mov	r2, r0
 800cce8:	460b      	mov	r3, r1
 800ccea:	4620      	mov	r0, r4
 800ccec:	4629      	mov	r1, r5
 800ccee:	f7f3 fa3d 	bl	800016c <__adddf3>
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	4610      	mov	r0, r2
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	f7f3 fec5 	bl	8000a88 <__aeabi_d2f>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	67bb      	str	r3, [r7, #120]	; 0x78
    S32_angle = S32_angle;
    S33_angle = S33_angle + sr;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd06:	4619      	mov	r1, r3
 800cd08:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800cd0a:	f7f3 ff13 	bl	8000b34 <__addsf3>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	673b      	str	r3, [r7, #112]	; 0x70

    //ANGLE CORRECTION
    float CK11 = 1/(Qa*Qg + Qa*S22_angle + Qa*S23_angle + Qa*S32_angle + Qa*S33_angle + Qg*S11_angle + S11_angle*S22_angle - S12_angle*S21_angle + S11_angle*S23_angle - S13_angle*S21_angle + S11_angle*S32_angle - S12_angle*S31_angle + S11_angle*S33_angle - S13_angle*S31_angle);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800cd1e:	4619      	mov	r1, r3
 800cd20:	4610      	mov	r0, r2
 800cd22:	f7f4 f80f 	bl	8000d44 <__aeabi_fmul>
 800cd26:	4603      	mov	r3, r0
 800cd28:	461c      	mov	r4, r3
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800cd30:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7f4 f805 	bl	8000d44 <__aeabi_fmul>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	4620      	mov	r0, r4
 800cd40:	f7f3 fef8 	bl	8000b34 <__addsf3>
 800cd44:	4603      	mov	r3, r0
 800cd46:	461c      	mov	r4, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800cd4e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7f3 fff7 	bl	8000d44 <__aeabi_fmul>
 800cd56:	4603      	mov	r3, r0
 800cd58:	4619      	mov	r1, r3
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f7f3 feea 	bl	8000b34 <__addsf3>
 800cd60:	4603      	mov	r3, r0
 800cd62:	461c      	mov	r4, r3
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800cd6a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f7f3 ffe9 	bl	8000d44 <__aeabi_fmul>
 800cd72:	4603      	mov	r3, r0
 800cd74:	4619      	mov	r1, r3
 800cd76:	4620      	mov	r0, r4
 800cd78:	f7f3 fedc 	bl	8000b34 <__addsf3>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	461c      	mov	r4, r3
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800cd86:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7f3 ffdb 	bl	8000d44 <__aeabi_fmul>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	4619      	mov	r1, r3
 800cd92:	4620      	mov	r0, r4
 800cd94:	f7f3 fece 	bl	8000b34 <__addsf3>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	461c      	mov	r4, r3
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800cda2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7f3 ffcc 	bl	8000d44 <__aeabi_fmul>
 800cdac:	4603      	mov	r3, r0
 800cdae:	4619      	mov	r1, r3
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	f7f3 febf 	bl	8000b34 <__addsf3>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	461c      	mov	r4, r3
 800cdba:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cdbe:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800cdc2:	f7f3 ffbf 	bl	8000d44 <__aeabi_fmul>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	4619      	mov	r1, r3
 800cdca:	4620      	mov	r0, r4
 800cdcc:	f7f3 feb2 	bl	8000b34 <__addsf3>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	461c      	mov	r4, r3
 800cdd4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800cdd8:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800cddc:	f7f3 ffb2 	bl	8000d44 <__aeabi_fmul>
 800cde0:	4603      	mov	r3, r0
 800cde2:	4619      	mov	r1, r3
 800cde4:	4620      	mov	r0, r4
 800cde6:	f7f3 fea3 	bl	8000b30 <__aeabi_fsub>
 800cdea:	4603      	mov	r3, r0
 800cdec:	461c      	mov	r4, r3
 800cdee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cdf0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800cdf4:	f7f3 ffa6 	bl	8000d44 <__aeabi_fmul>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f7f3 fe99 	bl	8000b34 <__addsf3>
 800ce02:	4603      	mov	r3, r0
 800ce04:	461c      	mov	r4, r3
 800ce06:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ce0a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800ce0e:	f7f3 ff99 	bl	8000d44 <__aeabi_fmul>
 800ce12:	4603      	mov	r3, r0
 800ce14:	4619      	mov	r1, r3
 800ce16:	4620      	mov	r0, r4
 800ce18:	f7f3 fe8a 	bl	8000b30 <__aeabi_fsub>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	461c      	mov	r4, r3
 800ce20:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ce22:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800ce26:	f7f3 ff8d 	bl	8000d44 <__aeabi_fmul>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	4620      	mov	r0, r4
 800ce30:	f7f3 fe80 	bl	8000b34 <__addsf3>
 800ce34:	4603      	mov	r3, r0
 800ce36:	461c      	mov	r4, r3
 800ce38:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ce3a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800ce3e:	f7f3 ff81 	bl	8000d44 <__aeabi_fmul>
 800ce42:	4603      	mov	r3, r0
 800ce44:	4619      	mov	r1, r3
 800ce46:	4620      	mov	r0, r4
 800ce48:	f7f3 fe72 	bl	8000b30 <__aeabi_fsub>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	461c      	mov	r4, r3
 800ce50:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ce52:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800ce56:	f7f3 ff75 	bl	8000d44 <__aeabi_fmul>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	4620      	mov	r0, r4
 800ce60:	f7f3 fe68 	bl	8000b34 <__addsf3>
 800ce64:	4603      	mov	r3, r0
 800ce66:	461c      	mov	r4, r3
 800ce68:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ce6a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800ce6e:	f7f3 ff69 	bl	8000d44 <__aeabi_fmul>
 800ce72:	4603      	mov	r3, r0
 800ce74:	4619      	mov	r1, r3
 800ce76:	4620      	mov	r0, r4
 800ce78:	f7f3 fe5a 	bl	8000b30 <__aeabi_fsub>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	4619      	mov	r1, r3
 800ce80:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ce84:	f7f4 f812 	bl	8000eac <__aeabi_fdiv>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	64fb      	str	r3, [r7, #76]	; 0x4c
    float CK12 = Qg + S22_angle + S23_angle + S32_angle + S33_angle;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800ce92:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7f3 fe4c 	bl	8000b34 <__addsf3>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7f3 fe47 	bl	8000b34 <__addsf3>
 800cea6:	4603      	mov	r3, r0
 800cea8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7f3 fe42 	bl	8000b34 <__addsf3>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ceb6:	f7f3 fe3d 	bl	8000b34 <__addsf3>
 800ceba:	4603      	mov	r3, r0
 800cebc:	64bb      	str	r3, [r7, #72]	; 0x48
    float CK13 = S12_angle + S13_angle;
 800cebe:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800cec2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800cec6:	f7f3 fe35 	bl	8000b34 <__addsf3>
 800ceca:	4603      	mov	r3, r0
 800cecc:	647b      	str	r3, [r7, #68]	; 0x44
    float CK14 = S21_angle + S31_angle;
 800cece:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ced0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800ced4:	f7f3 fe2e 	bl	8000b34 <__addsf3>
 800ced8:	4603      	mov	r3, r0
 800ceda:	643b      	str	r3, [r7, #64]	; 0x40
    float CK15 = Qa + S11_angle;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800cee2:	4619      	mov	r1, r3
 800cee4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800cee8:	f7f3 fe24 	bl	8000b34 <__addsf3>
 800ceec:	4603      	mov	r3, r0
 800ceee:	63fb      	str	r3, [r7, #60]	; 0x3c
    float CK16 = S32_angle + S33_angle;
 800cef0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cef2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800cef4:	f7f3 fe1e 	bl	8000b34 <__addsf3>
 800cef8:	4603      	mov	r3, r0
 800cefa:	63bb      	str	r3, [r7, #56]	; 0x38
    float CK17 = S22_angle + S23_angle;
 800cefc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cefe:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800cf02:	f7f3 fe17 	bl	8000b34 <__addsf3>
 800cf06:	4603      	mov	r3, r0
 800cf08:	637b      	str	r3, [r7, #52]	; 0x34

    float Kt11 = CK11*CK12*S11_angle - CK11*CK13*CK14;
 800cf0a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cf0c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cf0e:	f7f3 ff19 	bl	8000d44 <__aeabi_fmul>
 800cf12:	4603      	mov	r3, r0
 800cf14:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7f3 ff13 	bl	8000d44 <__aeabi_fmul>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	461c      	mov	r4, r3
 800cf22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cf24:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cf26:	f7f3 ff0d 	bl	8000d44 <__aeabi_fmul>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7f3 ff08 	bl	8000d44 <__aeabi_fmul>
 800cf34:	4603      	mov	r3, r0
 800cf36:	4619      	mov	r1, r3
 800cf38:	4620      	mov	r0, r4
 800cf3a:	f7f3 fdf9 	bl	8000b30 <__aeabi_fsub>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	633b      	str	r3, [r7, #48]	; 0x30
    float Kt12 = CK11*CK13*CK15 - CK11*CK13*S11_angle;
 800cf42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cf44:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cf46:	f7f3 fefd 	bl	8000d44 <__aeabi_fmul>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7f3 fef8 	bl	8000d44 <__aeabi_fmul>
 800cf54:	4603      	mov	r3, r0
 800cf56:	461c      	mov	r4, r3
 800cf58:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cf5a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cf5c:	f7f3 fef2 	bl	8000d44 <__aeabi_fmul>
 800cf60:	4603      	mov	r3, r0
 800cf62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7f3 feec 	bl	8000d44 <__aeabi_fmul>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	4619      	mov	r1, r3
 800cf70:	4620      	mov	r0, r4
 800cf72:	f7f3 fddd 	bl	8000b30 <__aeabi_fsub>
 800cf76:	4603      	mov	r3, r0
 800cf78:	62fb      	str	r3, [r7, #44]	; 0x2c
    float Kt21 = CK11*CK12*S21_angle - CK11*CK14*CK17;
 800cf7a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cf7c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cf7e:	f7f3 fee1 	bl	8000d44 <__aeabi_fmul>
 800cf82:	4603      	mov	r3, r0
 800cf84:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f7f3 fedb 	bl	8000d44 <__aeabi_fmul>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	461c      	mov	r4, r3
 800cf92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cf94:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cf96:	f7f3 fed5 	bl	8000d44 <__aeabi_fmul>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7f3 fed0 	bl	8000d44 <__aeabi_fmul>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	f7f3 fdc1 	bl	8000b30 <__aeabi_fsub>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	62bb      	str	r3, [r7, #40]	; 0x28
    float Kt22 = CK11*CK15*CK17 - CK11*CK13*S21_angle;
 800cfb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cfb4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cfb6:	f7f3 fec5 	bl	8000d44 <__aeabi_fmul>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7f3 fec0 	bl	8000d44 <__aeabi_fmul>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	461c      	mov	r4, r3
 800cfc8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cfca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cfcc:	f7f3 feba 	bl	8000d44 <__aeabi_fmul>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7f3 feb4 	bl	8000d44 <__aeabi_fmul>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	4619      	mov	r1, r3
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f7f3 fda5 	bl	8000b30 <__aeabi_fsub>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	627b      	str	r3, [r7, #36]	; 0x24
    float Kt31 = CK11*CK12*S31_angle - CK11*CK14*CK16;
 800cfea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cfec:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cfee:	f7f3 fea9 	bl	8000d44 <__aeabi_fmul>
 800cff2:	4603      	mov	r3, r0
 800cff4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7f3 fea4 	bl	8000d44 <__aeabi_fmul>
 800cffc:	4603      	mov	r3, r0
 800cffe:	461c      	mov	r4, r3
 800d000:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d002:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d004:	f7f3 fe9e 	bl	8000d44 <__aeabi_fmul>
 800d008:	4603      	mov	r3, r0
 800d00a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d00c:	4618      	mov	r0, r3
 800d00e:	f7f3 fe99 	bl	8000d44 <__aeabi_fmul>
 800d012:	4603      	mov	r3, r0
 800d014:	4619      	mov	r1, r3
 800d016:	4620      	mov	r0, r4
 800d018:	f7f3 fd8a 	bl	8000b30 <__aeabi_fsub>
 800d01c:	4603      	mov	r3, r0
 800d01e:	623b      	str	r3, [r7, #32]
    float Kt32 = CK11*CK15*CK16 - CK11*CK13*S31_angle;
 800d020:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d022:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d024:	f7f3 fe8e 	bl	8000d44 <__aeabi_fmul>
 800d028:	4603      	mov	r3, r0
 800d02a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7f3 fe89 	bl	8000d44 <__aeabi_fmul>
 800d032:	4603      	mov	r3, r0
 800d034:	461c      	mov	r4, r3
 800d036:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d038:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d03a:	f7f3 fe83 	bl	8000d44 <__aeabi_fmul>
 800d03e:	4603      	mov	r3, r0
 800d040:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d042:	4618      	mov	r0, r3
 800d044:	f7f3 fe7e 	bl	8000d44 <__aeabi_fmul>
 800d048:	4603      	mov	r3, r0
 800d04a:	4619      	mov	r1, r3
 800d04c:	4620      	mov	r0, r4
 800d04e:	f7f3 fd6f 	bl	8000b30 <__aeabi_fsub>
 800d052:	4603      	mov	r3, r0
 800d054:	61fb      	str	r3, [r7, #28]

    float Cx11 = angle_bias - gyro + angle_rate;
 800d056:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800d05a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800d05e:	f7f3 fd67 	bl	8000b30 <__aeabi_fsub>
 800d062:	4603      	mov	r3, r0
 800d064:	4619      	mov	r1, r3
 800d066:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800d06a:	f7f3 fd63 	bl	8000b34 <__addsf3>
 800d06e:	4603      	mov	r3, r0
 800d070:	61bb      	str	r3, [r7, #24]
    float Cx12 = angle_acc - angle_ekf;
 800d072:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d076:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800d07a:	f7f3 fd59 	bl	8000b30 <__aeabi_fsub>
 800d07e:	4603      	mov	r3, r0
 800d080:	617b      	str	r3, [r7, #20]

    angle_ekf = angle_ekf - Cx11*Kt12 + Cx12*Kt11;
 800d082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d084:	69b8      	ldr	r0, [r7, #24]
 800d086:	f7f3 fe5d 	bl	8000d44 <__aeabi_fmul>
 800d08a:	4603      	mov	r3, r0
 800d08c:	4619      	mov	r1, r3
 800d08e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800d092:	f7f3 fd4d 	bl	8000b30 <__aeabi_fsub>
 800d096:	4603      	mov	r3, r0
 800d098:	461c      	mov	r4, r3
 800d09a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d09c:	6978      	ldr	r0, [r7, #20]
 800d09e:	f7f3 fe51 	bl	8000d44 <__aeabi_fmul>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	f7f3 fd44 	bl	8000b34 <__addsf3>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    angle_bias = angle_bias - Cx11*Kt22 + Cx12*Kt21;
 800d0b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0b4:	69b8      	ldr	r0, [r7, #24]
 800d0b6:	f7f3 fe45 	bl	8000d44 <__aeabi_fmul>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	4619      	mov	r1, r3
 800d0be:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800d0c2:	f7f3 fd35 	bl	8000b30 <__aeabi_fsub>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	461c      	mov	r4, r3
 800d0ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0cc:	6978      	ldr	r0, [r7, #20]
 800d0ce:	f7f3 fe39 	bl	8000d44 <__aeabi_fmul>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	f7f3 fd2c 	bl	8000b34 <__addsf3>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    angle_rate = angle_rate - Cx11*Kt32 + Cx12*Kt31;
 800d0e2:	69f9      	ldr	r1, [r7, #28]
 800d0e4:	69b8      	ldr	r0, [r7, #24]
 800d0e6:	f7f3 fe2d 	bl	8000d44 <__aeabi_fmul>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800d0f2:	f7f3 fd1d 	bl	8000b30 <__aeabi_fsub>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	461c      	mov	r4, r3
 800d0fa:	6a39      	ldr	r1, [r7, #32]
 800d0fc:	6978      	ldr	r0, [r7, #20]
 800d0fe:	f7f3 fe21 	bl	8000d44 <__aeabi_fmul>
 800d102:	4603      	mov	r3, r0
 800d104:	4619      	mov	r1, r3
 800d106:	4620      	mov	r0, r4
 800d108:	f7f3 fd14 	bl	8000b34 <__addsf3>
 800d10c:	4603      	mov	r3, r0
 800d10e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    float CS11 = Kt32 - 1;
 800d112:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d116:	69f8      	ldr	r0, [r7, #28]
 800d118:	f7f3 fd0a 	bl	8000b30 <__aeabi_fsub>
 800d11c:	4603      	mov	r3, r0
 800d11e:	613b      	str	r3, [r7, #16]
    float CS12 = Kt22 - 1;
 800d120:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d126:	f7f3 fd03 	bl	8000b30 <__aeabi_fsub>
 800d12a:	4603      	mov	r3, r0
 800d12c:	60fb      	str	r3, [r7, #12]
    float CS13 = Kt11 - 1;
 800d12e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d132:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d134:	f7f3 fcfc 	bl	8000b30 <__aeabi_fsub>
 800d138:	4603      	mov	r3, r0
 800d13a:	60bb      	str	r3, [r7, #8]

    S11_angle = - CS13*S11_angle - Kt12*S21_angle - Kt12*S31_angle;
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d142:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d146:	4618      	mov	r0, r3
 800d148:	f7f3 fdfc 	bl	8000d44 <__aeabi_fmul>
 800d14c:	4603      	mov	r3, r0
 800d14e:	461c      	mov	r4, r3
 800d150:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d154:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d156:	f7f3 fdf5 	bl	8000d44 <__aeabi_fmul>
 800d15a:	4603      	mov	r3, r0
 800d15c:	4619      	mov	r1, r3
 800d15e:	4620      	mov	r0, r4
 800d160:	f7f3 fce6 	bl	8000b30 <__aeabi_fsub>
 800d164:	4603      	mov	r3, r0
 800d166:	461c      	mov	r4, r3
 800d168:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d16a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d16c:	f7f3 fdea 	bl	8000d44 <__aeabi_fmul>
 800d170:	4603      	mov	r3, r0
 800d172:	4619      	mov	r1, r3
 800d174:	4620      	mov	r0, r4
 800d176:	f7f3 fcdb 	bl	8000b30 <__aeabi_fsub>
 800d17a:	4603      	mov	r3, r0
 800d17c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    S12_angle = - CS13*S12_angle - Kt12*S22_angle - Kt12*S32_angle;
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d186:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7f3 fdda 	bl	8000d44 <__aeabi_fmul>
 800d190:	4603      	mov	r3, r0
 800d192:	461c      	mov	r4, r3
 800d194:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d198:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d19a:	f7f3 fdd3 	bl	8000d44 <__aeabi_fmul>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f7f3 fcc4 	bl	8000b30 <__aeabi_fsub>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	461c      	mov	r4, r3
 800d1ac:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d1ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1b0:	f7f3 fdc8 	bl	8000d44 <__aeabi_fmul>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	4620      	mov	r0, r4
 800d1ba:	f7f3 fcb9 	bl	8000b30 <__aeabi_fsub>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    S13_angle = - CS13*S13_angle - Kt12*S23_angle - Kt12*S33_angle;
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d1ca:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7f3 fdb8 	bl	8000d44 <__aeabi_fmul>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	461c      	mov	r4, r3
 800d1d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d1da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1dc:	f7f3 fdb2 	bl	8000d44 <__aeabi_fmul>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	f7f3 fca3 	bl	8000b30 <__aeabi_fsub>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	461c      	mov	r4, r3
 800d1ee:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d1f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1f2:	f7f3 fda7 	bl	8000d44 <__aeabi_fmul>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	f7f3 fc98 	bl	8000b30 <__aeabi_fsub>
 800d200:	4603      	mov	r3, r0
 800d202:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    S21_angle = - CS12*S21_angle - Kt21*S11_angle - Kt22*S31_angle;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d20c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d210:	4618      	mov	r0, r3
 800d212:	f7f3 fd97 	bl	8000d44 <__aeabi_fmul>
 800d216:	4603      	mov	r3, r0
 800d218:	461c      	mov	r4, r3
 800d21a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d21e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d220:	f7f3 fd90 	bl	8000d44 <__aeabi_fmul>
 800d224:	4603      	mov	r3, r0
 800d226:	4619      	mov	r1, r3
 800d228:	4620      	mov	r0, r4
 800d22a:	f7f3 fc81 	bl	8000b30 <__aeabi_fsub>
 800d22e:	4603      	mov	r3, r0
 800d230:	461c      	mov	r4, r3
 800d232:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d236:	f7f3 fd85 	bl	8000d44 <__aeabi_fmul>
 800d23a:	4603      	mov	r3, r0
 800d23c:	4619      	mov	r1, r3
 800d23e:	4620      	mov	r0, r4
 800d240:	f7f3 fc76 	bl	8000b30 <__aeabi_fsub>
 800d244:	4603      	mov	r3, r0
 800d246:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    S22_angle = - CS12*S22_angle - Kt21*S12_angle - Kt22*S32_angle;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d250:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d254:	4618      	mov	r0, r3
 800d256:	f7f3 fd75 	bl	8000d44 <__aeabi_fmul>
 800d25a:	4603      	mov	r3, r0
 800d25c:	461c      	mov	r4, r3
 800d25e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d264:	f7f3 fd6e 	bl	8000d44 <__aeabi_fmul>
 800d268:	4603      	mov	r3, r0
 800d26a:	4619      	mov	r1, r3
 800d26c:	4620      	mov	r0, r4
 800d26e:	f7f3 fc5f 	bl	8000b30 <__aeabi_fsub>
 800d272:	4603      	mov	r3, r0
 800d274:	461c      	mov	r4, r3
 800d276:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d278:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d27a:	f7f3 fd63 	bl	8000d44 <__aeabi_fmul>
 800d27e:	4603      	mov	r3, r0
 800d280:	4619      	mov	r1, r3
 800d282:	4620      	mov	r0, r4
 800d284:	f7f3 fc54 	bl	8000b30 <__aeabi_fsub>
 800d288:	4603      	mov	r3, r0
 800d28a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    S23_angle = - CS12*S23_angle - Kt21*S13_angle - Kt22*S33_angle;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d294:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d296:	4618      	mov	r0, r3
 800d298:	f7f3 fd54 	bl	8000d44 <__aeabi_fmul>
 800d29c:	4603      	mov	r3, r0
 800d29e:	461c      	mov	r4, r3
 800d2a0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d2a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2a6:	f7f3 fd4d 	bl	8000d44 <__aeabi_fmul>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f7f3 fc3e 	bl	8000b30 <__aeabi_fsub>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	461c      	mov	r4, r3
 800d2b8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d2ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2bc:	f7f3 fd42 	bl	8000d44 <__aeabi_fmul>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	f7f3 fc33 	bl	8000b30 <__aeabi_fsub>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	67fb      	str	r3, [r7, #124]	; 0x7c
    S31_angle = - CS11*S31_angle - Kt31*S11_angle - Kt32*S21_angle;
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d2d4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7f3 fd34 	bl	8000d44 <__aeabi_fmul>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	461c      	mov	r4, r3
 800d2e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d2e4:	6a38      	ldr	r0, [r7, #32]
 800d2e6:	f7f3 fd2d 	bl	8000d44 <__aeabi_fmul>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	f7f3 fc1e 	bl	8000b30 <__aeabi_fsub>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	461c      	mov	r4, r3
 800d2f8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d2fc:	69f8      	ldr	r0, [r7, #28]
 800d2fe:	f7f3 fd21 	bl	8000d44 <__aeabi_fmul>
 800d302:	4603      	mov	r3, r0
 800d304:	4619      	mov	r1, r3
 800d306:	4620      	mov	r0, r4
 800d308:	f7f3 fc12 	bl	8000b30 <__aeabi_fsub>
 800d30c:	4603      	mov	r3, r0
 800d30e:	67bb      	str	r3, [r7, #120]	; 0x78
    S32_angle = - CS11*S32_angle - Kt31*S12_angle - Kt32*S22_angle;
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d316:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d318:	4618      	mov	r0, r3
 800d31a:	f7f3 fd13 	bl	8000d44 <__aeabi_fmul>
 800d31e:	4603      	mov	r3, r0
 800d320:	461c      	mov	r4, r3
 800d322:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d326:	6a38      	ldr	r0, [r7, #32]
 800d328:	f7f3 fd0c 	bl	8000d44 <__aeabi_fmul>
 800d32c:	4603      	mov	r3, r0
 800d32e:	4619      	mov	r1, r3
 800d330:	4620      	mov	r0, r4
 800d332:	f7f3 fbfd 	bl	8000b30 <__aeabi_fsub>
 800d336:	4603      	mov	r3, r0
 800d338:	461c      	mov	r4, r3
 800d33a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d33e:	69f8      	ldr	r0, [r7, #28]
 800d340:	f7f3 fd00 	bl	8000d44 <__aeabi_fmul>
 800d344:	4603      	mov	r3, r0
 800d346:	4619      	mov	r1, r3
 800d348:	4620      	mov	r0, r4
 800d34a:	f7f3 fbf1 	bl	8000b30 <__aeabi_fsub>
 800d34e:	4603      	mov	r3, r0
 800d350:	677b      	str	r3, [r7, #116]	; 0x74
    S33_angle = - CS11*S33_angle - Kt31*S13_angle - Kt32*S23_angle;
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d358:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7f3 fcf2 	bl	8000d44 <__aeabi_fmul>
 800d360:	4603      	mov	r3, r0
 800d362:	461c      	mov	r4, r3
 800d364:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d368:	6a38      	ldr	r0, [r7, #32]
 800d36a:	f7f3 fceb 	bl	8000d44 <__aeabi_fmul>
 800d36e:	4603      	mov	r3, r0
 800d370:	4619      	mov	r1, r3
 800d372:	4620      	mov	r0, r4
 800d374:	f7f3 fbdc 	bl	8000b30 <__aeabi_fsub>
 800d378:	4603      	mov	r3, r0
 800d37a:	461c      	mov	r4, r3
 800d37c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d37e:	69f8      	ldr	r0, [r7, #28]
 800d380:	f7f3 fce0 	bl	8000d44 <__aeabi_fmul>
 800d384:	4603      	mov	r3, r0
 800d386:	4619      	mov	r1, r3
 800d388:	4620      	mov	r0, r4
 800d38a:	f7f3 fbd1 	bl	8000b30 <__aeabi_fsub>
 800d38e:	4603      	mov	r3, r0
 800d390:	673b      	str	r3, [r7, #112]	; 0x70

    switch(euler_angle) {
 800d392:	78fb      	ldrb	r3, [r7, #3]
 800d394:	2b02      	cmp	r3, #2
 800d396:	d070      	beq.n	800d47a <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xc1e>
 800d398:	2b02      	cmp	r3, #2
 800d39a:	f300 80ab 	bgt.w	800d4f4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xc98>
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d002      	beq.n	800d3a8 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xb4c>
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d035      	beq.n	800d412 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xbb6>
    			 S32_yaw = S32_angle;
    			 S33_yaw = S33_angle;
    			break;

    }
}
 800d3a6:	e0a5      	b.n	800d4f4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xc98>
    			 roll_ekf = angle_ekf ;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d3ae:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
    			 roll_rate = angle_rate;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d3b8:	625a      	str	r2, [r3, #36]	; 0x24
    			 roll_bias = angle_bias;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d3c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    			 roll_acc = angle_acc ;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d3ca:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
    			 S11_roll = S11_angle;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d3d4:	661a      	str	r2, [r3, #96]	; 0x60
    			 S12_roll = S12_angle;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d3dc:	665a      	str	r2, [r3, #100]	; 0x64
    			 S13_roll = S13_angle;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d3e4:	671a      	str	r2, [r3, #112]	; 0x70
    			 S21_roll = S21_angle;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d3ec:	669a      	str	r2, [r3, #104]	; 0x68
    			 S22_roll = S22_angle;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d3f4:	66da      	str	r2, [r3, #108]	; 0x6c
    			 S23_roll = S23_angle;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d3fa:	675a      	str	r2, [r3, #116]	; 0x74
    			 S31_roll = S31_angle;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d400:	679a      	str	r2, [r3, #120]	; 0x78
    			 S32_roll = S32_angle;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d406:	67da      	str	r2, [r3, #124]	; 0x7c
    			 S33_roll = S33_angle;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d40c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    			break;
 800d410:	e070      	b.n	800d4f4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xc98>
    			 pitch_ekf = angle_ekf ;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d418:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
    			 pitch_rate = angle_rate;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d422:	629a      	str	r2, [r3, #40]	; 0x28
    			 pitch_bias = angle_bias;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d42a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    			 pitch_acc = angle_acc ;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d434:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    			 S11_pitch = S11_angle;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d43e:	631a      	str	r2, [r3, #48]	; 0x30
    			 S12_pitch = S12_angle;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d446:	635a      	str	r2, [r3, #52]	; 0x34
    			 S13_pitch = S13_angle;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d44e:	641a      	str	r2, [r3, #64]	; 0x40
    			 S21_pitch = S21_angle;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d456:	639a      	str	r2, [r3, #56]	; 0x38
    			 S22_pitch = S22_angle;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d45e:	63da      	str	r2, [r3, #60]	; 0x3c
    			 S23_pitch = S23_angle;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d464:	645a      	str	r2, [r3, #68]	; 0x44
    			 S31_pitch = S31_angle;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d46a:	649a      	str	r2, [r3, #72]	; 0x48
    			 S32_pitch = S32_angle;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d470:	64da      	str	r2, [r3, #76]	; 0x4c
    			 S33_pitch = S33_angle;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d476:	651a      	str	r2, [r3, #80]	; 0x50
    			break;
 800d478:	e03c      	b.n	800d4f4 <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle+0xc98>
    			 yaw_ekf = angle_ekf ;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d480:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
    			 yaw_rate = angle_rate;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d48a:	62da      	str	r2, [r3, #44]	; 0x2c
    			 yaw_bias = angle_bias;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d492:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    			 yaw_acc = angle_acc ;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d49c:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
    			 S11_yaw = S11_angle;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d4a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    			 S12_yaw = S12_angle;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d4b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    			 S13_yaw = S13_angle;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d4ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    			 S21_yaw = S21_angle;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d4c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    			 S22_yaw = S22_angle;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d4ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    			 S23_yaw = S23_angle;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d4d6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    			 S31_yaw = S31_angle;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d4de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    			 S32_yaw = S32_angle;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d4e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    			 S33_yaw = S33_angle;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d4ee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    			break;
 800d4f2:	bf00      	nop
}
 800d4f4:	bf00      	nop
 800d4f6:	37a8      	adds	r7, #168	; 0xa8
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d4fe:	bf00      	nop

0800d500 <_ZN15Kalman_Filtresi3RunEv>:

	xgps = xbody;
	ygps = ybody;

}
void Kalman_Filtresi::Run() {
 800d500:	b590      	push	{r4, r7, lr}
 800d502:	b08b      	sub	sp, #44	; 0x2c
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]

  acc_pos_x_med += acc_pos_x;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	685a      	ldr	r2, [r3, #4]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800d512:	4619      	mov	r1, r3
 800d514:	4610      	mov	r0, r2
 800d516:	f7f3 fb0d 	bl	8000b34 <__addsf3>
 800d51a:	4603      	mov	r3, r0
 800d51c:	461a      	mov	r2, r3
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	605a      	str	r2, [r3, #4]
  float accX = acc[0];
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d528:	623b      	str	r3, [r7, #32]
  float accY = acc[1];
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d530:	61fb      	str	r3, [r7, #28]
  float accZ = acc[2];
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d538:	61bb      	str	r3, [r7, #24]




    if(gyro_ready) {
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 800d540:	2b00      	cmp	r3, #0
 800d542:	d011      	beq.n	800d568 <_ZN15Kalman_Filtresi3RunEv+0x68>

    pos_ekf_counter++;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	689b      	ldr	r3, [r3, #8]
 800d548:	1c5a      	adds	r2, r3, #1
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	609a      	str	r2, [r3, #8]
    EKF_Attitude(ROLL);
 800d54e:	2100      	movs	r1, #0
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f7ff f983 	bl	800c85c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
    EKF_Attitude(PITCH);
 800d556:	2101      	movs	r1, #1
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f7ff f97f 	bl	800c85c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
    EKF_Attitude(YAW);
 800d55e:	2102      	movs	r1, #2
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f7ff f97b 	bl	800c85c <_ZN15Kalman_Filtresi12EKF_AttitudeE11euler_angle>
 800d566:	e084      	b.n	800d672 <_ZN15Kalman_Filtresi3RunEv+0x172>
    }


    else {

    	for(int i=0; i<2000; i++) {
 800d568:	2300      	movs	r3, #0
 800d56a:	627b      	str	r3, [r7, #36]	; 0x24
 800d56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d572:	da5e      	bge.n	800d632 <_ZN15Kalman_Filtresi3RunEv+0x132>
    		  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 800d574:	6a39      	ldr	r1, [r7, #32]
 800d576:	6a38      	ldr	r0, [r7, #32]
 800d578:	f7f3 fbe4 	bl	8000d44 <__aeabi_fmul>
 800d57c:	4603      	mov	r3, r0
 800d57e:	461c      	mov	r4, r3
 800d580:	69f9      	ldr	r1, [r7, #28]
 800d582:	69f8      	ldr	r0, [r7, #28]
 800d584:	f7f3 fbde 	bl	8000d44 <__aeabi_fmul>
 800d588:	4603      	mov	r3, r0
 800d58a:	4619      	mov	r1, r3
 800d58c:	4620      	mov	r0, r4
 800d58e:	f7f3 fad1 	bl	8000b34 <__addsf3>
 800d592:	4603      	mov	r3, r0
 800d594:	461c      	mov	r4, r3
 800d596:	69b9      	ldr	r1, [r7, #24]
 800d598:	69b8      	ldr	r0, [r7, #24]
 800d59a:	f7f3 fbd3 	bl	8000d44 <__aeabi_fmul>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	4620      	mov	r0, r4
 800d5a4:	f7f3 fac6 	bl	8000b34 <__addsf3>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7f4 fc30 	bl	8001e10 <_ZSt4sqrtf>
 800d5b0:	6178      	str	r0, [r7, #20]

    		  float pitch_acc =  asin(accX/acctop)*rad2deg;
 800d5b2:	6979      	ldr	r1, [r7, #20]
 800d5b4:	6a38      	ldr	r0, [r7, #32]
 800d5b6:	f7f3 fc79 	bl	8000eac <__aeabi_fdiv>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7f4 fc01 	bl	8001dc4 <_ZSt4asinf>
 800d5c2:	4602      	mov	r2, r0
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	4610      	mov	r0, r2
 800d5ce:	f7f3 fbb9 	bl	8000d44 <__aeabi_fmul>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	613b      	str	r3, [r7, #16]
    		  float roll_acc  =  asin(accY/acctop)*rad2deg ;
 800d5d6:	6979      	ldr	r1, [r7, #20]
 800d5d8:	69f8      	ldr	r0, [r7, #28]
 800d5da:	f7f3 fc67 	bl	8000eac <__aeabi_fdiv>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7f4 fbef 	bl	8001dc4 <_ZSt4asinf>
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	4610      	mov	r0, r2
 800d5f2:	f7f3 fba7 	bl	8000d44 <__aeabi_fmul>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	60fb      	str	r3, [r7, #12]

        	ROLL_OFFSET += roll_acc;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d600:	68f9      	ldr	r1, [r7, #12]
 800d602:	4618      	mov	r0, r3
 800d604:	f7f3 fa96 	bl	8000b34 <__addsf3>
 800d608:	4603      	mov	r3, r0
 800d60a:	461a      	mov	r2, r3
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
        	PITCH_OFFSET += pitch_acc;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d618:	6939      	ldr	r1, [r7, #16]
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7f3 fa8a 	bl	8000b34 <__addsf3>
 800d620:	4603      	mov	r3, r0
 800d622:	461a      	mov	r2, r3
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
    	for(int i=0; i<2000; i++) {
 800d62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62c:	3301      	adds	r3, #1
 800d62e:	627b      	str	r3, [r7, #36]	; 0x24
 800d630:	e79c      	b.n	800d56c <_ZN15Kalman_Filtresi3RunEv+0x6c>
    	}

    	ROLL_OFFSET  = -1*  ROLL_OFFSET  / 2000;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d638:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d63c:	4929      	ldr	r1, [pc, #164]	; (800d6e4 <_ZN15Kalman_Filtresi3RunEv+0x1e4>)
 800d63e:	4618      	mov	r0, r3
 800d640:	f7f3 fc34 	bl	8000eac <__aeabi_fdiv>
 800d644:	4603      	mov	r3, r0
 800d646:	461a      	mov	r2, r3
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
    	PITCH_OFFSET = -1 * PITCH_OFFSET / 2000;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d654:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d658:	4922      	ldr	r1, [pc, #136]	; (800d6e4 <_ZN15Kalman_Filtresi3RunEv+0x1e4>)
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7f3 fc26 	bl	8000eac <__aeabi_fdiv>
 800d660:	4603      	mov	r3, r0
 800d662:	461a      	mov	r2, r3
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

    	gyro_ready = true;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2201      	movs	r2, #1
 800d66e:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188


	//pitch_eski=pitch_comp;
	//roll_eski=roll_comp;

    state.angles[0] = roll_ekf;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    state.angles[1] = pitch_ekf;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f8d3 21f4 	ldr.w	r2, [r3, #500]	; 0x1f4
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    state.angles[2] = -1*yaw_ekf;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800d690:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

    state.rates[0] = roll_rate;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    state.rates[1] = pitch_rate;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    state.rates[2] = yaw_rate;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

    state.bias[0] = roll_bias;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    state.bias[1] = pitch_bias;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    state.bias[2] = yaw_bias;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc

}
 800d6dc:	bf00      	nop
 800d6de:	372c      	adds	r7, #44	; 0x2c
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd90      	pop	{r4, r7, pc}
 800d6e4:	44fa0000 	.word	0x44fa0000

0800d6e8 <_ZN15Kalman_FiltresiD1Ev>:

Kalman_Filtresi::~Kalman_Filtresi() {}
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f503 7348 	add.w	r3, r3, #800	; 0x320
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f000 fc89 	bl	800e00e <_ZN3lpfD1Ev>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 800d702:	4618      	mov	r0, r3
 800d704:	f000 fc83 	bl	800e00e <_ZN3lpfD1Ev>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800d70e:	4618      	mov	r0, r3
 800d710:	f000 fc7d 	bl	800e00e <_ZN3lpfD1Ev>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	4618      	mov	r0, r3
 800d718:	3708      	adds	r7, #8
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
	...

0800d720 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID() {};
 800d720:	b580      	push	{r7, lr}
 800d722:	b086      	sub	sp, #24
 800d724:	af04      	add	r7, sp, #16
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	4a27      	ldr	r2, [pc, #156]	; (800d7c8 <_ZN3PIDC1Ev+0xa8>)
 800d72c:	609a      	str	r2, [r3, #8]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	4a26      	ldr	r2, [pc, #152]	; (800d7cc <_ZN3PIDC1Ev+0xac>)
 800d732:	60da      	str	r2, [r3, #12]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	4a26      	ldr	r2, [pc, #152]	; (800d7d0 <_ZN3PIDC1Ev+0xb0>)
 800d738:	611a      	str	r2, [r3, #16]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	22c8      	movs	r2, #200	; 0xc8
 800d73e:	615a      	str	r2, [r3, #20]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	695b      	ldr	r3, [r3, #20]
 800d744:	4618      	mov	r0, r3
 800d746:	f7f3 faa9 	bl	8000c9c <__aeabi_i2f>
 800d74a:	4603      	mov	r3, r0
 800d74c:	4619      	mov	r1, r3
 800d74e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d752:	f7f3 fbab 	bl	8000eac <__aeabi_fdiv>
 800d756:	4603      	mov	r3, r0
 800d758:	461a      	mov	r2, r3
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	619a      	str	r2, [r3, #24]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	4a1c      	ldr	r2, [pc, #112]	; (800d7d4 <_ZN3PIDC1Ev+0xb4>)
 800d762:	61da      	str	r2, [r3, #28]
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	69da      	ldr	r2, [r3, #28]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	699b      	ldr	r3, [r3, #24]
 800d76c:	4619      	mov	r1, r3
 800d76e:	4610      	mov	r0, r2
 800d770:	f7f3 fae8 	bl	8000d44 <__aeabi_fmul>
 800d774:	4603      	mov	r3, r0
 800d776:	461a      	mov	r2, r3
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	621a      	str	r2, [r3, #32]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d782:	a30d      	add	r3, pc, #52	; (adr r3, 800d7b8 <_ZN3PIDC1Ev+0x98>)
 800d784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d788:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d78c:	a30a      	add	r3, pc, #40	; (adr r3, 800d7b8 <_ZN3PIDC1Ev+0x98>)
 800d78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d792:	e9cd 2300 	strd	r2, r3, [sp]
 800d796:	a30a      	add	r3, pc, #40	; (adr r3, 800d7c0 <_ZN3PIDC1Ev+0xa0>)
 800d798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79c:	4608      	mov	r0, r1
 800d79e:	f000 fbc5 	bl	800df2c <_ZN3lpfC1Eddd>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d7a8:	669a      	str	r2, [r3, #104]	; 0x68
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3708      	adds	r7, #8
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}
 800d7b4:	f3af 8000 	nop.w
 800d7b8:	de7ea5f8 	.word	0xde7ea5f8
 800d7bc:	3fb2a454 	.word	0x3fb2a454
 800d7c0:	ab367a10 	.word	0xab367a10
 800d7c4:	3feb573e 	.word	0x3feb573e
 800d7c8:	3d4ccccd 	.word	0x3d4ccccd
 800d7cc:	42f00000 	.word	0x42f00000
 800d7d0:	c2f00000 	.word	0xc2f00000
 800d7d4:	3e99999a 	.word	0x3e99999a

0800d7d8 <_ZN3PID7P_AngleEffff>:

float PID::P_Angle(float alpha_des, float alpha, float Kp_angle, float Ki_angle) {
 800d7d8:	b590      	push	{r4, r7, lr}
 800d7da:	b087      	sub	sp, #28
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	60f8      	str	r0, [r7, #12]
 800d7e0:	60b9      	str	r1, [r7, #8]
 800d7e2:	607a      	str	r2, [r7, #4]
 800d7e4:	603b      	str	r3, [r7, #0]
	float P,I;
	e_angle = alpha_des - alpha;
 800d7e6:	6879      	ldr	r1, [r7, #4]
 800d7e8:	68b8      	ldr	r0, [r7, #8]
 800d7ea:	f7f3 f9a1 	bl	8000b30 <__aeabi_fsub>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	ie_roll += e_angle*st;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	699b      	ldr	r3, [r3, #24]
 800d806:	4619      	mov	r1, r3
 800d808:	4610      	mov	r0, r2
 800d80a:	f7f3 fa9b 	bl	8000d44 <__aeabi_fmul>
 800d80e:	4603      	mov	r3, r0
 800d810:	4619      	mov	r1, r3
 800d812:	4620      	mov	r0, r4
 800d814:	f7f3 f98e 	bl	8000b34 <__addsf3>
 800d818:	4603      	mov	r3, r0
 800d81a:	461a      	mov	r2, r3
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	67da      	str	r2, [r3, #124]	; 0x7c
	P = Kp_angle*e_angle;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d826:	4619      	mov	r1, r3
 800d828:	6838      	ldr	r0, [r7, #0]
 800d82a:	f7f3 fa8b 	bl	8000d44 <__aeabi_fmul>
 800d82e:	4603      	mov	r3, r0
 800d830:	617b      	str	r3, [r7, #20]
	I = Ki_angle*ie_roll;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d836:	4619      	mov	r1, r3
 800d838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d83a:	f7f3 fa83 	bl	8000d44 <__aeabi_fmul>
 800d83e:	4603      	mov	r3, r0
 800d840:	613b      	str	r3, [r7, #16]
    return P+I;
 800d842:	6939      	ldr	r1, [r7, #16]
 800d844:	6978      	ldr	r0, [r7, #20]
 800d846:	f7f3 f975 	bl	8000b34 <__addsf3>
 800d84a:	4603      	mov	r3, r0

}
 800d84c:	4618      	mov	r0, r3
 800d84e:	371c      	adds	r7, #28
 800d850:	46bd      	mov	sp, r7
 800d852:	bd90      	pop	{r4, r7, pc}

0800d854 <_ZN3PID6PI_VelEfffffj>:
	float P = Kp_angle * sqrt_e + alpha_des;
	P = P * sign_e;
	return P;
}

float PID::PI_Vel(float z0, float z, float v, float Kp_alt, float Ki_alt, unsigned int ch) {
 800d854:	b580      	push	{r7, lr}
 800d856:	b08a      	sub	sp, #40	; 0x28
 800d858:	af00      	add	r7, sp, #0
 800d85a:	60f8      	str	r0, [r7, #12]
 800d85c:	60b9      	str	r1, [r7, #8]
 800d85e:	607a      	str	r2, [r7, #4]
 800d860:	603b      	str	r3, [r7, #0]
	float P;
	float I;
	float v_des;

	if(ch > 1700) {
 800d862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d864:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800d868:	4293      	cmp	r3, r2
 800d86a:	d90e      	bls.n	800d88a <_ZN3PID6PI_VelEfffffj+0x36>
		zi = z0 + x_inc;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	6a1b      	ldr	r3, [r3, #32]
 800d870:	68b9      	ldr	r1, [r7, #8]
 800d872:	4618      	mov	r0, r3
 800d874:	f7f3 f95e 	bl	8000b34 <__addsf3>
 800d878:	4603      	mov	r3, r0
 800d87a:	461a      	mov	r2, r3
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		v_des = vz_def;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	69db      	ldr	r3, [r3, #28]
 800d886:	627b      	str	r3, [r7, #36]	; 0x24
 800d888:	e01c      	b.n	800d8c4 <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else if (ch < 1300) {
 800d88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d88c:	f240 5213 	movw	r2, #1299	; 0x513
 800d890:	4293      	cmp	r3, r2
 800d892:	d810      	bhi.n	800d8b6 <_ZN3PID6PI_VelEfffffj+0x62>
		zi = z0 - x_inc;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	6a1b      	ldr	r3, [r3, #32]
 800d898:	4619      	mov	r1, r3
 800d89a:	68b8      	ldr	r0, [r7, #8]
 800d89c:	f7f3 f948 	bl	8000b30 <__aeabi_fsub>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		v_des = -1 * vz_def;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	69db      	ldr	r3, [r3, #28]
 800d8ae:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d8b2:	627b      	str	r3, [r7, #36]	; 0x24
 800d8b4:	e006      	b.n	800d8c4 <_ZN3PID6PI_VelEfffffj+0x70>
	}

	else {
		zi = z0;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	68ba      	ldr	r2, [r7, #8]
 800d8ba:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		v_des = 0;
 800d8be:	f04f 0300 	mov.w	r3, #0
 800d8c2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	float e = v_des - v;
 800d8c4:	6839      	ldr	r1, [r7, #0]
 800d8c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8c8:	f7f3 f932 	bl	8000b30 <__aeabi_fsub>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	623b      	str	r3, [r7, #32]
	P = Kp_alt*e;
 800d8d0:	6a39      	ldr	r1, [r7, #32]
 800d8d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8d4:	f7f3 fa36 	bl	8000d44 <__aeabi_fmul>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	61fb      	str	r3, [r7, #28]

	float ei = z0 - z;
 800d8dc:	6879      	ldr	r1, [r7, #4]
 800d8de:	68b8      	ldr	r0, [r7, #8]
 800d8e0:	f7f3 f926 	bl	8000b30 <__aeabi_fsub>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	61bb      	str	r3, [r7, #24]
	I = Ki_alt * ei;
 800d8e8:	69b9      	ldr	r1, [r7, #24]
 800d8ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d8ec:	f7f3 fa2a 	bl	8000d44 <__aeabi_fmul>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	617b      	str	r3, [r7, #20]

	float PI = P + I;
 800d8f4:	6979      	ldr	r1, [r7, #20]
 800d8f6:	69f8      	ldr	r0, [r7, #28]
 800d8f8:	f7f3 f91c 	bl	8000b34 <__addsf3>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	613b      	str	r3, [r7, #16]
    return PI;
 800d900:	693b      	ldr	r3, [r7, #16]

}
 800d902:	4618      	mov	r0, r3
 800d904:	3728      	adds	r7, #40	; 0x28
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	0000      	movs	r0, r0
 800d90c:	0000      	movs	r0, r0
	...

0800d910 <_ZN3PID6RateFFEf>:

float PID::RateFF(float rate_des) {
 800d910:	b5b0      	push	{r4, r5, r7, lr}
 800d912:	b084      	sub	sp, #16
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	6039      	str	r1, [r7, #0]
	float ff = 0.9975*ff_ + 0.0904*rate_des - 0.0904*rate_des_;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d91e:	4618      	mov	r0, r3
 800d920:	f7f2 fd82 	bl	8000428 <__aeabi_f2d>
 800d924:	a31e      	add	r3, pc, #120	; (adr r3, 800d9a0 <_ZN3PID6RateFFEf+0x90>)
 800d926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92a:	f7f2 fdd5 	bl	80004d8 <__aeabi_dmul>
 800d92e:	4602      	mov	r2, r0
 800d930:	460b      	mov	r3, r1
 800d932:	4614      	mov	r4, r2
 800d934:	461d      	mov	r5, r3
 800d936:	6838      	ldr	r0, [r7, #0]
 800d938:	f7f2 fd76 	bl	8000428 <__aeabi_f2d>
 800d93c:	a31a      	add	r3, pc, #104	; (adr r3, 800d9a8 <_ZN3PID6RateFFEf+0x98>)
 800d93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d942:	f7f2 fdc9 	bl	80004d8 <__aeabi_dmul>
 800d946:	4602      	mov	r2, r0
 800d948:	460b      	mov	r3, r1
 800d94a:	4620      	mov	r0, r4
 800d94c:	4629      	mov	r1, r5
 800d94e:	f7f2 fc0d 	bl	800016c <__adddf3>
 800d952:	4602      	mov	r2, r0
 800d954:	460b      	mov	r3, r1
 800d956:	4614      	mov	r4, r2
 800d958:	461d      	mov	r5, r3
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d95e:	4618      	mov	r0, r3
 800d960:	f7f2 fd62 	bl	8000428 <__aeabi_f2d>
 800d964:	a310      	add	r3, pc, #64	; (adr r3, 800d9a8 <_ZN3PID6RateFFEf+0x98>)
 800d966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96a:	f7f2 fdb5 	bl	80004d8 <__aeabi_dmul>
 800d96e:	4602      	mov	r2, r0
 800d970:	460b      	mov	r3, r1
 800d972:	4620      	mov	r0, r4
 800d974:	4629      	mov	r1, r5
 800d976:	f7f2 fbf7 	bl	8000168 <__aeabi_dsub>
 800d97a:	4602      	mov	r2, r0
 800d97c:	460b      	mov	r3, r1
 800d97e:	4610      	mov	r0, r2
 800d980:	4619      	mov	r1, r3
 800d982:	f7f3 f881 	bl	8000a88 <__aeabi_d2f>
 800d986:	4603      	mov	r3, r0
 800d988:	60fb      	str	r3, [r7, #12]
	return K_ff*ff;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d98e:	68f9      	ldr	r1, [r7, #12]
 800d990:	4618      	mov	r0, r3
 800d992:	f7f3 f9d7 	bl	8000d44 <__aeabi_fmul>
 800d996:	4603      	mov	r3, r0
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3710      	adds	r7, #16
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bdb0      	pop	{r4, r5, r7, pc}
 800d9a0:	1eb851ec 	.word	0x1eb851ec
 800d9a4:	3fefeb85 	.word	0x3fefeb85
 800d9a8:	538ef34d 	.word	0x538ef34d
 800d9ac:	3fb72474 	.word	0x3fb72474

0800d9b0 <_ZN3PID9PID_Rate2Efffffff>:


float PID::PID_Rate2(float alpha_dot_des, float alpha_dot, float alpha, float Kp, float Ki, float Kd, float Kp_angle) {
 800d9b0:	b590      	push	{r4, r7, lr}
 800d9b2:	b087      	sub	sp, #28
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	60b9      	str	r1, [r7, #8]
 800d9ba:	607a      	str	r2, [r7, #4]
 800d9bc:	603b      	str	r3, [r7, #0]
	e_roll = alpha_dot_des - alpha_dot;
 800d9be:	6879      	ldr	r1, [r7, #4]
 800d9c0:	68b8      	ldr	r0, [r7, #8]
 800d9c2:	f7f3 f8b5 	bl	8000b30 <__aeabi_fsub>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	66da      	str	r2, [r3, #108]	; 0x6c
	ie_roll_rate += e_roll*st;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	699b      	ldr	r3, [r3, #24]
 800d9dc:	4619      	mov	r1, r3
 800d9de:	4610      	mov	r0, r2
 800d9e0:	f7f3 f9b0 	bl	8000d44 <__aeabi_fmul>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	f7f3 f8a3 	bl	8000b34 <__addsf3>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	P = Kp * e_roll;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7f3 f9a0 	bl	8000d44 <__aeabi_fmul>
 800da04:	4603      	mov	r3, r0
 800da06:	461a      	mov	r2, r3
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c



	//I = Ki * (ie_roll * Kp_angle - alpha);
	I = Ki * ie_roll_rate;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da16:	4618      	mov	r0, r3
 800da18:	f7f3 f994 	bl	8000d44 <__aeabi_fmul>
 800da1c:	4603      	mov	r3, r0
 800da1e:	461a      	mov	r2, r3
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	//float alpha_dot_dot_des = alpha_dot_des - alpha_dot_des_;
	float alpha_dot_dot = (alpha_dot - alpha_dot_) / st;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da2a:	4619      	mov	r1, r3
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f7f3 f87f 	bl	8000b30 <__aeabi_fsub>
 800da32:	4603      	mov	r3, r0
 800da34:	461a      	mov	r2, r3
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	699b      	ldr	r3, [r3, #24]
 800da3a:	4619      	mov	r1, r3
 800da3c:	4610      	mov	r0, r2
 800da3e:	f7f3 fa35 	bl	8000eac <__aeabi_fdiv>
 800da42:	4603      	mov	r3, r0
 800da44:	617b      	str	r3, [r7, #20]
	//alpha_dot_dot_des = alpha_dot_dot_des / st;
	alpha_dot_dot = d_filt.Run(alpha_dot_dot);
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	3338      	adds	r3, #56	; 0x38
 800da4a:	6979      	ldr	r1, [r7, #20]
 800da4c:	4618      	mov	r0, r3
 800da4e:	f000 fa88 	bl	800df62 <_ZN3lpf3RunEf>
 800da52:	6178      	str	r0, [r7, #20]

	D = Kd * (-alpha_dot * Kp_angle - alpha_dot_dot);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800da5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7f3 f971 	bl	8000d44 <__aeabi_fmul>
 800da62:	4603      	mov	r3, r0
 800da64:	6979      	ldr	r1, [r7, #20]
 800da66:	4618      	mov	r0, r3
 800da68:	f7f3 f862 	bl	8000b30 <__aeabi_fsub>
 800da6c:	4603      	mov	r3, r0
 800da6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800da70:	4618      	mov	r0, r3
 800da72:	f7f3 f967 	bl	8000d44 <__aeabi_fmul>
 800da76:	4603      	mov	r3, r0
 800da78:	461a      	mov	r2, r3
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  	de_filt = N * (Kd * alpha_dot_des - de_int);
  	de_int += de_filt*st;
  	D = de_filt;
*/

	pd = P + I + D;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800da8c:	4619      	mov	r1, r3
 800da8e:	4610      	mov	r0, r2
 800da90:	f7f3 f850 	bl	8000b34 <__addsf3>
 800da94:	4603      	mov	r3, r0
 800da96:	461a      	mov	r2, r3
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800da9e:	4619      	mov	r1, r3
 800daa0:	4610      	mov	r0, r2
 800daa2:	f7f3 f847 	bl	8000b34 <__addsf3>
 800daa6:	4603      	mov	r3, r0
 800daa8:	461a      	mov	r2, r3
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  	pd_roll_buf = pd;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	625a      	str	r2, [r3, #36]	; 0x24
	pd  = Sat(pd,  300, -300);
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800dac0:	4b0e      	ldr	r3, [pc, #56]	; (800dafc <_ZN3PID9PID_Rate2Efffffff+0x14c>)
 800dac2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	f000 f9ba 	bl	800de40 <_ZN3PID3SatEfii>
 800dacc:	4602      	mov	r2, r0
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pd_roll_sat_buf = pd;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	alpha_dot_des_ = alpha_dot_des;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	68ba      	ldr	r2, [r7, #8]
 800dae4:	62da      	str	r2, [r3, #44]	; 0x2c
	alpha_dot_ = alpha_dot;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	687a      	ldr	r2, [r7, #4]
 800daea:	631a      	str	r2, [r3, #48]	; 0x30
	return pd;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	371c      	adds	r7, #28
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd90      	pop	{r4, r7, pc}
 800dafa:	bf00      	nop
 800dafc:	fffffed4 	.word	0xfffffed4

0800db00 <_ZN3PID7PID_PosEfffff>:

float PID::PID_Pos(float pos_des, float pos, float Kp, float Ki, float Kd) {
 800db00:	b580      	push	{r7, lr}
 800db02:	b088      	sub	sp, #32
 800db04:	af00      	add	r7, sp, #0
 800db06:	60f8      	str	r0, [r7, #12]
 800db08:	60b9      	str	r1, [r7, #8]
 800db0a:	607a      	str	r2, [r7, #4]
 800db0c:	603b      	str	r3, [r7, #0]
	_e_pos = e_pos;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	685a      	ldr	r2, [r3, #4]
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	601a      	str	r2, [r3, #0]
	e_pos = pos_des - pos;
 800db16:	6879      	ldr	r1, [r7, #4]
 800db18:	68b8      	ldr	r0, [r7, #8]
 800db1a:	f7f3 f809 	bl	8000b30 <__aeabi_fsub>
 800db1e:	4603      	mov	r3, r0
 800db20:	461a      	mov	r2, r3
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	605a      	str	r2, [r3, #4]
	float P = Kp * e_pos;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	685b      	ldr	r3, [r3, #4]
 800db2a:	4619      	mov	r1, r3
 800db2c:	6838      	ldr	r0, [r7, #0]
 800db2e:	f7f3 f909 	bl	8000d44 <__aeabi_fmul>
 800db32:	4603      	mov	r3, r0
 800db34:	61fb      	str	r3, [r7, #28]

	float e_pos_dot = (e_pos - _e_pos)/st_pos;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	685a      	ldr	r2, [r3, #4]
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4619      	mov	r1, r3
 800db40:	4610      	mov	r0, r2
 800db42:	f7f2 fff5 	bl	8000b30 <__aeabi_fsub>
 800db46:	4603      	mov	r3, r0
 800db48:	461a      	mov	r2, r3
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	689b      	ldr	r3, [r3, #8]
 800db4e:	4619      	mov	r1, r3
 800db50:	4610      	mov	r0, r2
 800db52:	f7f3 f9ab 	bl	8000eac <__aeabi_fdiv>
 800db56:	4603      	mov	r3, r0
 800db58:	61bb      	str	r3, [r7, #24]
	//alpha_dot_dot_des = alpha_dot_dot_des / st;
	//alpha_dot_dot = d_filt.Run(alpha_dot_dot);

	float D = Kd * e_pos_dot;
 800db5a:	69b9      	ldr	r1, [r7, #24]
 800db5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db5e:	f7f3 f8f1 	bl	8000d44 <__aeabi_fmul>
 800db62:	4603      	mov	r3, r0
 800db64:	617b      	str	r3, [r7, #20]
  	de_filt = N * (Kd * alpha_dot_des - de_int);
  	de_int += de_filt*st;
  	D = de_filt;
*/

	float pd = P + D;
 800db66:	6979      	ldr	r1, [r7, #20]
 800db68:	69f8      	ldr	r0, [r7, #28]
 800db6a:	f7f2 ffe3 	bl	8000b34 <__addsf3>
 800db6e:	4603      	mov	r3, r0
 800db70:	613b      	str	r3, [r7, #16]
	return pd;
 800db72:	693b      	ldr	r3, [r7, #16]
}
 800db74:	4618      	mov	r0, r3
 800db76:	3720      	adds	r7, #32
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <_ZN3PID7PD_RateEfffff>:

float PID::PD_Rate(float alpha_dot_des, float alpha_dot, float Kp, float Ki, float Kd) {
 800db7c:	b590      	push	{r4, r7, lr}
 800db7e:	b087      	sub	sp, #28
 800db80:	af00      	add	r7, sp, #0
 800db82:	60f8      	str	r0, [r7, #12]
 800db84:	60b9      	str	r1, [r7, #8]
 800db86:	607a      	str	r2, [r7, #4]
 800db88:	603b      	str	r3, [r7, #0]

	e_roll = alpha_dot_des - alpha_dot;
 800db8a:	6879      	ldr	r1, [r7, #4]
 800db8c:	68b8      	ldr	r0, [r7, #8]
 800db8e:	f7f2 ffcf 	bl	8000b30 <__aeabi_fsub>
 800db92:	4603      	mov	r3, r0
 800db94:	461a      	mov	r2, r3
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	66da      	str	r2, [r3, #108]	; 0x6c
  float e_roll_der = - alpha_dot;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800dba0:	613b      	str	r3, [r7, #16]
  float e_roll_int = e_roll;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dba6:	617b      	str	r3, [r7, #20]

  if((int)pd_roll_buf != (int)pd_roll_sat_buf) {
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7f3 faa5 	bl	80010fc <__aeabi_f2iz>
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7f3 fa9e 	bl	80010fc <__aeabi_f2iz>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	429c      	cmp	r4, r3
 800dbc4:	d019      	beq.n	800dbfa <_ZN3PID7PD_RateEfffff+0x7e>
    if(sgn(e_roll) == sgn(pd_roll_sat_buf)) {
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbca:	4619      	mov	r1, r3
 800dbcc:	68f8      	ldr	r0, [r7, #12]
 800dbce:	f000 f8df 	bl	800dd90 <_ZN3PID3sgnEf>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	461c      	mov	r4, r3
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbdc:	4619      	mov	r1, r3
 800dbde:	68f8      	ldr	r0, [r7, #12]
 800dbe0:	f000 f8d6 	bl	800dd90 <_ZN3PID3sgnEf>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	429c      	cmp	r4, r3
 800dbe8:	bf0c      	ite	eq
 800dbea:	2301      	moveq	r3, #1
 800dbec:	2300      	movne	r3, #0
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d002      	beq.n	800dbfa <_ZN3PID7PD_RateEfffff+0x7e>
      e_roll_int = 0;
 800dbf4:	f04f 0300 	mov.w	r3, #0
 800dbf8:	617b      	str	r3, [r7, #20]
    }
  }

  	de_filt = N * (Kd * e_roll - de_int);
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7f3 f89f 	bl	8000d44 <__aeabi_fmul>
 800dc06:	4603      	mov	r3, r0
 800dc08:	461a      	mov	r2, r3
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dc10:	4619      	mov	r1, r3
 800dc12:	4610      	mov	r0, r2
 800dc14:	f7f2 ff8c 	bl	8000b30 <__aeabi_fsub>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	494d      	ldr	r1, [pc, #308]	; (800dd50 <_ZN3PID7PD_RateEfffff+0x1d4>)
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7f3 f891 	bl	8000d44 <__aeabi_fmul>
 800dc22:	4603      	mov	r3, r0
 800dc24:	461a      	mov	r2, r3
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  	de_int += de_filt*st;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f8d3 4098 	ldr.w	r4, [r3, #152]	; 0x98
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	699b      	ldr	r3, [r3, #24]
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	4610      	mov	r0, r2
 800dc40:	f7f3 f880 	bl	8000d44 <__aeabi_fmul>
 800dc44:	4603      	mov	r3, r0
 800dc46:	4619      	mov	r1, r3
 800dc48:	4620      	mov	r0, r4
 800dc4a:	f7f2 ff73 	bl	8000b34 <__addsf3>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	461a      	mov	r2, r3
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	de = e_roll - e_eski_roll;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc60:	4619      	mov	r1, r3
 800dc62:	4610      	mov	r0, r2
 800dc64:	f7f2 ff64 	bl	8000b30 <__aeabi_fsub>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	e_eski_roll = e_roll;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	675a      	str	r2, [r3, #116]	; 0x74

  ie_roll += e_roll_int*st;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	699b      	ldr	r3, [r3, #24]
 800dc82:	6979      	ldr	r1, [r7, #20]
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7f3 f85d 	bl	8000d44 <__aeabi_fmul>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	4620      	mov	r0, r4
 800dc90:	f7f2 ff50 	bl	8000b34 <__addsf3>
 800dc94:	4603      	mov	r3, r0
 800dc96:	461a      	mov	r2, r3
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	67da      	str	r2, [r3, #124]	; 0x7c

  ie_roll_sat = ie_roll;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	

	P = Kp*e_roll; D = de_filt; I = Ki * ie_roll_sat;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcaa:	6839      	ldr	r1, [r7, #0]
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7f3 f849 	bl	8000d44 <__aeabi_fmul>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7f3 f837 	bl	8000d44 <__aeabi_fmul>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	461a      	mov	r2, r3
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	//D = lpf.update(D);
	pd = P + I + D;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800dcec:	4619      	mov	r1, r3
 800dcee:	4610      	mov	r0, r2
 800dcf0:	f7f2 ff20 	bl	8000b34 <__addsf3>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800dcfe:	4619      	mov	r1, r3
 800dd00:	4610      	mov	r0, r2
 800dd02:	f7f2 ff17 	bl	8000b34 <__addsf3>
 800dd06:	4603      	mov	r3, r0
 800dd08:	461a      	mov	r2, r3
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  	pd_roll_buf = pd;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	625a      	str	r2, [r3, #36]	; 0x24
	pd  = Sat(pd,  300, -300);
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800dd20:	4b0c      	ldr	r3, [pc, #48]	; (800dd54 <_ZN3PID7PD_RateEfffff+0x1d8>)
 800dd22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800dd26:	68f8      	ldr	r0, [r7, #12]
 800dd28:	f000 f88a 	bl	800de40 <_ZN3PID3SatEfii>
 800dd2c:	4602      	mov	r2, r0
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pd_roll_sat_buf = pd;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    return pd;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8

}
 800dd46:	4618      	mov	r0, r3
 800dd48:	371c      	adds	r7, #28
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd90      	pop	{r4, r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	42c80000 	.word	0x42c80000
 800dd54:	fffffed4 	.word	0xfffffed4

0800dd58 <_ZN3PID5resetEv>:

void PID::reset() {
 800dd58:	b480      	push	{r7}
 800dd5a:	b083      	sub	sp, #12
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
	ie_roll = 0;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f04f 0200 	mov.w	r2, #0
 800dd66:	67da      	str	r2, [r3, #124]	; 0x7c
	ie_roll_rate = 0;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f04f 0200 	mov.w	r2, #0
 800dd6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	de_filt = 0;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f04f 0200 	mov.w	r2, #0
 800dd78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	de_int = 0;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f04f 0200 	mov.w	r2, #0
 800dd82:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 800dd86:	bf00      	nop
 800dd88:	370c      	adds	r7, #12
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bc80      	pop	{r7}
 800dd8e:	4770      	bx	lr

0800dd90 <_ZN3PID3sgnEf>:

    return P;

}

uint8_t PID::sgn(float v) {
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
  if (v < 0) return -1;
 800dd9a:	f04f 0100 	mov.w	r1, #0
 800dd9e:	6838      	ldr	r0, [r7, #0]
 800dda0:	f7f3 f96e 	bl	8001080 <__aeabi_fcmplt>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d001      	beq.n	800ddae <_ZN3PID3sgnEf+0x1e>
 800ddaa:	23ff      	movs	r3, #255	; 0xff
 800ddac:	e00a      	b.n	800ddc4 <_ZN3PID3sgnEf+0x34>
  if (v > 0) return 1;
 800ddae:	f04f 0100 	mov.w	r1, #0
 800ddb2:	6838      	ldr	r0, [r7, #0]
 800ddb4:	f7f3 f982 	bl	80010bc <__aeabi_fcmpgt>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d001      	beq.n	800ddc2 <_ZN3PID3sgnEf+0x32>
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	e000      	b.n	800ddc4 <_ZN3PID3sgnEf+0x34>
  return 0;
 800ddc2:	2300      	movs	r3, #0
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3708      	adds	r7, #8
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <_ZN3PID3SatEfiii>:

 float PID::Sat(float pwm, int max, int min, int thr) {
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b086      	sub	sp, #24
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	60f8      	str	r0, [r7, #12]
 800ddd4:	60b9      	str	r1, [r7, #8]
 800ddd6:	607a      	str	r2, [r7, #4]
 800ddd8:	603b      	str	r3, [r7, #0]
	float pwm_out;

	if(thr > 1020) {
 800ddda:	6a3b      	ldr	r3, [r7, #32]
 800dddc:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800dde0:	dd24      	ble.n	800de2c <_ZN3PID3SatEfiii+0x60>
		if(pwm > max) {
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f7f2 ff5a 	bl	8000c9c <__aeabi_i2f>
 800dde8:	4603      	mov	r3, r0
 800ddea:	4619      	mov	r1, r3
 800ddec:	68b8      	ldr	r0, [r7, #8]
 800ddee:	f7f3 f965 	bl	80010bc <__aeabi_fcmpgt>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d005      	beq.n	800de04 <_ZN3PID3SatEfiii+0x38>
			pwm_out = max;
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f7f2 ff4f 	bl	8000c9c <__aeabi_i2f>
 800ddfe:	4603      	mov	r3, r0
 800de00:	617b      	str	r3, [r7, #20]
 800de02:	e015      	b.n	800de30 <_ZN3PID3SatEfiii+0x64>
		}

		else if (pwm < min) {
 800de04:	6838      	ldr	r0, [r7, #0]
 800de06:	f7f2 ff49 	bl	8000c9c <__aeabi_i2f>
 800de0a:	4603      	mov	r3, r0
 800de0c:	4619      	mov	r1, r3
 800de0e:	68b8      	ldr	r0, [r7, #8]
 800de10:	f7f3 f936 	bl	8001080 <__aeabi_fcmplt>
 800de14:	4603      	mov	r3, r0
 800de16:	2b00      	cmp	r3, #0
 800de18:	d005      	beq.n	800de26 <_ZN3PID3SatEfiii+0x5a>
			pwm_out = min;
 800de1a:	6838      	ldr	r0, [r7, #0]
 800de1c:	f7f2 ff3e 	bl	8000c9c <__aeabi_i2f>
 800de20:	4603      	mov	r3, r0
 800de22:	617b      	str	r3, [r7, #20]
 800de24:	e004      	b.n	800de30 <_ZN3PID3SatEfiii+0x64>
		}

		else {
			pwm_out = pwm;
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	617b      	str	r3, [r7, #20]
 800de2a:	e001      	b.n	800de30 <_ZN3PID3SatEfiii+0x64>


	}

	else {
		pwm_out = 1000;
 800de2c:	4b03      	ldr	r3, [pc, #12]	; (800de3c <_ZN3PID3SatEfiii+0x70>)
 800de2e:	617b      	str	r3, [r7, #20]
	}
	return pwm_out;
 800de30:	697b      	ldr	r3, [r7, #20]
}
 800de32:	4618      	mov	r0, r3
 800de34:	3718      	adds	r7, #24
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	447a0000 	.word	0x447a0000

0800de40 <_ZN3PID3SatEfii>:

 float PID::Sat(float pwm, int max, int min) {
 800de40:	b580      	push	{r7, lr}
 800de42:	b086      	sub	sp, #24
 800de44:	af00      	add	r7, sp, #0
 800de46:	60f8      	str	r0, [r7, #12]
 800de48:	60b9      	str	r1, [r7, #8]
 800de4a:	607a      	str	r2, [r7, #4]
 800de4c:	603b      	str	r3, [r7, #0]
	float pwm_out;

		if(pwm > max) {
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f7f2 ff24 	bl	8000c9c <__aeabi_i2f>
 800de54:	4603      	mov	r3, r0
 800de56:	4619      	mov	r1, r3
 800de58:	68b8      	ldr	r0, [r7, #8]
 800de5a:	f7f3 f92f 	bl	80010bc <__aeabi_fcmpgt>
 800de5e:	4603      	mov	r3, r0
 800de60:	2b00      	cmp	r3, #0
 800de62:	d005      	beq.n	800de70 <_ZN3PID3SatEfii+0x30>
			pwm_out = max;
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f7f2 ff19 	bl	8000c9c <__aeabi_i2f>
 800de6a:	4603      	mov	r3, r0
 800de6c:	617b      	str	r3, [r7, #20]
 800de6e:	e012      	b.n	800de96 <_ZN3PID3SatEfii+0x56>
		}

		else if (pwm < min) {
 800de70:	6838      	ldr	r0, [r7, #0]
 800de72:	f7f2 ff13 	bl	8000c9c <__aeabi_i2f>
 800de76:	4603      	mov	r3, r0
 800de78:	4619      	mov	r1, r3
 800de7a:	68b8      	ldr	r0, [r7, #8]
 800de7c:	f7f3 f900 	bl	8001080 <__aeabi_fcmplt>
 800de80:	4603      	mov	r3, r0
 800de82:	2b00      	cmp	r3, #0
 800de84:	d005      	beq.n	800de92 <_ZN3PID3SatEfii+0x52>
			pwm_out = min;
 800de86:	6838      	ldr	r0, [r7, #0]
 800de88:	f7f2 ff08 	bl	8000c9c <__aeabi_i2f>
 800de8c:	4603      	mov	r3, r0
 800de8e:	617b      	str	r3, [r7, #20]
 800de90:	e001      	b.n	800de96 <_ZN3PID3SatEfii+0x56>
		}

		else {
			pwm_out = pwm;
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	617b      	str	r3, [r7, #20]
		}




	return pwm_out;
 800de96:	697b      	ldr	r3, [r7, #20]
}
 800de98:	4618      	mov	r0, r3
 800de9a:	3718      	adds	r7, #24
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <_ZN3PID5F2thrEf>:
	float out_max  = 1326;

	return (float)(dir) * ((float)pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int PID::F2thr(float F) {
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b088      	sub	sp, #32
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	6039      	str	r1, [r7, #0]
	float kf = 5.074714371861032e-08;
 800deaa:	4b16      	ldr	r3, [pc, #88]	; (800df04 <_ZN3PID5F2thrEf+0x64>)
 800deac:	61fb      	str	r3, [r7, #28]
	float max_rpm = 17591;
 800deae:	4b16      	ldr	r3, [pc, #88]	; (800df08 <_ZN3PID5F2thrEf+0x68>)
 800deb0:	61bb      	str	r3, [r7, #24]
	float Fm = F/4;
 800deb2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800deb6:	6838      	ldr	r0, [r7, #0]
 800deb8:	f7f2 fff8 	bl	8000eac <__aeabi_fdiv>
 800debc:	4603      	mov	r3, r0
 800debe:	617b      	str	r3, [r7, #20]
	float wh = sqrt(Fm/kf);
 800dec0:	69f9      	ldr	r1, [r7, #28]
 800dec2:	6978      	ldr	r0, [r7, #20]
 800dec4:	f7f2 fff2 	bl	8000eac <__aeabi_fdiv>
 800dec8:	4603      	mov	r3, r0
 800deca:	4618      	mov	r0, r3
 800decc:	f7f3 ffa0 	bl	8001e10 <_ZSt4sqrtf>
 800ded0:	6138      	str	r0, [r7, #16]

	unsigned int thr = (wh - 0) * (2000 - 1000) / (max_rpm - 0) + 1000;
 800ded2:	490e      	ldr	r1, [pc, #56]	; (800df0c <_ZN3PID5F2thrEf+0x6c>)
 800ded4:	6938      	ldr	r0, [r7, #16]
 800ded6:	f7f2 ff35 	bl	8000d44 <__aeabi_fmul>
 800deda:	4603      	mov	r3, r0
 800dedc:	69b9      	ldr	r1, [r7, #24]
 800dede:	4618      	mov	r0, r3
 800dee0:	f7f2 ffe4 	bl	8000eac <__aeabi_fdiv>
 800dee4:	4603      	mov	r3, r0
 800dee6:	4909      	ldr	r1, [pc, #36]	; (800df0c <_ZN3PID5F2thrEf+0x6c>)
 800dee8:	4618      	mov	r0, r3
 800deea:	f7f2 fe23 	bl	8000b34 <__addsf3>
 800deee:	4603      	mov	r3, r0
 800def0:	4618      	mov	r0, r3
 800def2:	f7f3 f929 	bl	8001148 <__aeabi_f2uiz>
 800def6:	4603      	mov	r3, r0
 800def8:	60fb      	str	r3, [r7, #12]
	return thr;
 800defa:	68fb      	ldr	r3, [r7, #12]
}
 800defc:	4618      	mov	r0, r3
 800defe:	3720      	adds	r7, #32
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}
 800df04:	3359f513 	.word	0x3359f513
 800df08:	46896e00 	.word	0x46896e00
 800df0c:	447a0000 	.word	0x447a0000

0800df10 <_ZN3PIDD1Ev>:

PID::~PID() {};
 800df10:	b580      	push	{r7, lr}
 800df12:	b082      	sub	sp, #8
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	3338      	adds	r3, #56	; 0x38
 800df1c:	4618      	mov	r0, r3
 800df1e:	f000 f876 	bl	800e00e <_ZN3lpfD1Ev>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	4618      	mov	r0, r3
 800df26:	3708      	adds	r7, #8
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}

0800df2c <_ZN3lpfC1Eddd>:
#include "lpf.hpp"

lpf::lpf(double a, double b, double c)  {
 800df2c:	b480      	push	{r7}
 800df2e:	b085      	sub	sp, #20
 800df30:	af00      	add	r7, sp, #0
 800df32:	60f8      	str	r0, [r7, #12]
 800df34:	e9c7 2300 	strd	r2, r3, [r7]
	a_f = a;
 800df38:	68f9      	ldr	r1, [r7, #12]
 800df3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df3e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	b_f = b;
 800df42:	68f9      	ldr	r1, [r7, #12]
 800df44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800df48:	e9c1 2304 	strd	r2, r3, [r1, #16]
	c_f = c;
 800df4c:	68f9      	ldr	r1, [r7, #12]
 800df4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800df52:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	4618      	mov	r0, r3
 800df5a:	3714      	adds	r7, #20
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bc80      	pop	{r7}
 800df60:	4770      	bx	lr

0800df62 <_ZN3lpf3RunEf>:


float lpf::Run(float x) {
 800df62:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800df66:	b084      	sub	sp, #16
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]


	//float y = 0.8544*y_ + 0.07282 * x + 0.07282 * x_;
	float y = a_f*y_ + b_f * x + c_f * x_;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	4618      	mov	r0, r3
 800df7a:	f7f2 fa55 	bl	8000428 <__aeabi_f2d>
 800df7e:	4602      	mov	r2, r0
 800df80:	460b      	mov	r3, r1
 800df82:	4620      	mov	r0, r4
 800df84:	4629      	mov	r1, r5
 800df86:	f7f2 faa7 	bl	80004d8 <__aeabi_dmul>
 800df8a:	4602      	mov	r2, r0
 800df8c:	460b      	mov	r3, r1
 800df8e:	4690      	mov	r8, r2
 800df90:	4699      	mov	r9, r3
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800df98:	6838      	ldr	r0, [r7, #0]
 800df9a:	f7f2 fa45 	bl	8000428 <__aeabi_f2d>
 800df9e:	4602      	mov	r2, r0
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	4629      	mov	r1, r5
 800dfa6:	f7f2 fa97 	bl	80004d8 <__aeabi_dmul>
 800dfaa:	4602      	mov	r2, r0
 800dfac:	460b      	mov	r3, r1
 800dfae:	4640      	mov	r0, r8
 800dfb0:	4649      	mov	r1, r9
 800dfb2:	f7f2 f8db 	bl	800016c <__adddf3>
 800dfb6:	4602      	mov	r2, r0
 800dfb8:	460b      	mov	r3, r1
 800dfba:	4690      	mov	r8, r2
 800dfbc:	4699      	mov	r9, r3
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7f2 fa2d 	bl	8000428 <__aeabi_f2d>
 800dfce:	4602      	mov	r2, r0
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	4620      	mov	r0, r4
 800dfd4:	4629      	mov	r1, r5
 800dfd6:	f7f2 fa7f 	bl	80004d8 <__aeabi_dmul>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	460b      	mov	r3, r1
 800dfde:	4640      	mov	r0, r8
 800dfe0:	4649      	mov	r1, r9
 800dfe2:	f7f2 f8c3 	bl	800016c <__adddf3>
 800dfe6:	4602      	mov	r2, r0
 800dfe8:	460b      	mov	r3, r1
 800dfea:	4610      	mov	r0, r2
 800dfec:	4619      	mov	r1, r3
 800dfee:	f7f2 fd4b 	bl	8000a88 <__aeabi_d2f>
 800dff2:	4603      	mov	r3, r0
 800dff4:	60fb      	str	r3, [r7, #12]
	x_ = x;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	683a      	ldr	r2, [r7, #0]
 800dffa:	601a      	str	r2, [r3, #0]
	y_ = y;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	68fa      	ldr	r2, [r7, #12]
 800e000:	605a      	str	r2, [r3, #4]
	return y;
 800e002:	68fb      	ldr	r3, [r7, #12]

}
 800e004:	4618      	mov	r0, r3
 800e006:	3710      	adds	r7, #16
 800e008:	46bd      	mov	sp, r7
 800e00a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800e00e <_ZN3lpfD1Ev>:

lpf::~lpf() {}
 800e00e:	b480      	push	{r7}
 800e010:	b083      	sub	sp, #12
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	4618      	mov	r0, r3
 800e01a:	370c      	adds	r7, #12
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bc80      	pop	{r7}
 800e020:	4770      	bx	lr
	...

0800e024 <atanf>:
 800e024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e028:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800e02c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800e030:	4604      	mov	r4, r0
 800e032:	4680      	mov	r8, r0
 800e034:	db0e      	blt.n	800e054 <atanf+0x30>
 800e036:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e03a:	dd04      	ble.n	800e046 <atanf+0x22>
 800e03c:	4601      	mov	r1, r0
 800e03e:	f7f2 fd79 	bl	8000b34 <__addsf3>
 800e042:	4604      	mov	r4, r0
 800e044:	e003      	b.n	800e04e <atanf+0x2a>
 800e046:	2800      	cmp	r0, #0
 800e048:	f300 80ce 	bgt.w	800e1e8 <atanf+0x1c4>
 800e04c:	4c67      	ldr	r4, [pc, #412]	; (800e1ec <atanf+0x1c8>)
 800e04e:	4620      	mov	r0, r4
 800e050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e054:	4b66      	ldr	r3, [pc, #408]	; (800e1f0 <atanf+0x1cc>)
 800e056:	429d      	cmp	r5, r3
 800e058:	dc0e      	bgt.n	800e078 <atanf+0x54>
 800e05a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800e05e:	da08      	bge.n	800e072 <atanf+0x4e>
 800e060:	4964      	ldr	r1, [pc, #400]	; (800e1f4 <atanf+0x1d0>)
 800e062:	f7f2 fd67 	bl	8000b34 <__addsf3>
 800e066:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e06a:	f7f3 f827 	bl	80010bc <__aeabi_fcmpgt>
 800e06e:	2800      	cmp	r0, #0
 800e070:	d1ed      	bne.n	800e04e <atanf+0x2a>
 800e072:	f04f 36ff 	mov.w	r6, #4294967295
 800e076:	e01c      	b.n	800e0b2 <atanf+0x8e>
 800e078:	f000 f914 	bl	800e2a4 <fabsf>
 800e07c:	4b5e      	ldr	r3, [pc, #376]	; (800e1f8 <atanf+0x1d4>)
 800e07e:	4604      	mov	r4, r0
 800e080:	429d      	cmp	r5, r3
 800e082:	dc7c      	bgt.n	800e17e <atanf+0x15a>
 800e084:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800e088:	429d      	cmp	r5, r3
 800e08a:	dc67      	bgt.n	800e15c <atanf+0x138>
 800e08c:	4601      	mov	r1, r0
 800e08e:	f7f2 fd51 	bl	8000b34 <__addsf3>
 800e092:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e096:	f7f2 fd4b 	bl	8000b30 <__aeabi_fsub>
 800e09a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e09e:	4605      	mov	r5, r0
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	f7f2 fd47 	bl	8000b34 <__addsf3>
 800e0a6:	4601      	mov	r1, r0
 800e0a8:	4628      	mov	r0, r5
 800e0aa:	f7f2 feff 	bl	8000eac <__aeabi_fdiv>
 800e0ae:	2600      	movs	r6, #0
 800e0b0:	4604      	mov	r4, r0
 800e0b2:	4621      	mov	r1, r4
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	f7f2 fe45 	bl	8000d44 <__aeabi_fmul>
 800e0ba:	4601      	mov	r1, r0
 800e0bc:	4607      	mov	r7, r0
 800e0be:	f7f2 fe41 	bl	8000d44 <__aeabi_fmul>
 800e0c2:	4605      	mov	r5, r0
 800e0c4:	494d      	ldr	r1, [pc, #308]	; (800e1fc <atanf+0x1d8>)
 800e0c6:	f7f2 fe3d 	bl	8000d44 <__aeabi_fmul>
 800e0ca:	494d      	ldr	r1, [pc, #308]	; (800e200 <atanf+0x1dc>)
 800e0cc:	f7f2 fd32 	bl	8000b34 <__addsf3>
 800e0d0:	4629      	mov	r1, r5
 800e0d2:	f7f2 fe37 	bl	8000d44 <__aeabi_fmul>
 800e0d6:	494b      	ldr	r1, [pc, #300]	; (800e204 <atanf+0x1e0>)
 800e0d8:	f7f2 fd2c 	bl	8000b34 <__addsf3>
 800e0dc:	4629      	mov	r1, r5
 800e0de:	f7f2 fe31 	bl	8000d44 <__aeabi_fmul>
 800e0e2:	4949      	ldr	r1, [pc, #292]	; (800e208 <atanf+0x1e4>)
 800e0e4:	f7f2 fd26 	bl	8000b34 <__addsf3>
 800e0e8:	4629      	mov	r1, r5
 800e0ea:	f7f2 fe2b 	bl	8000d44 <__aeabi_fmul>
 800e0ee:	4947      	ldr	r1, [pc, #284]	; (800e20c <atanf+0x1e8>)
 800e0f0:	f7f2 fd20 	bl	8000b34 <__addsf3>
 800e0f4:	4629      	mov	r1, r5
 800e0f6:	f7f2 fe25 	bl	8000d44 <__aeabi_fmul>
 800e0fa:	4945      	ldr	r1, [pc, #276]	; (800e210 <atanf+0x1ec>)
 800e0fc:	f7f2 fd1a 	bl	8000b34 <__addsf3>
 800e100:	4639      	mov	r1, r7
 800e102:	f7f2 fe1f 	bl	8000d44 <__aeabi_fmul>
 800e106:	4943      	ldr	r1, [pc, #268]	; (800e214 <atanf+0x1f0>)
 800e108:	4607      	mov	r7, r0
 800e10a:	4628      	mov	r0, r5
 800e10c:	f7f2 fe1a 	bl	8000d44 <__aeabi_fmul>
 800e110:	4941      	ldr	r1, [pc, #260]	; (800e218 <atanf+0x1f4>)
 800e112:	f7f2 fd0d 	bl	8000b30 <__aeabi_fsub>
 800e116:	4629      	mov	r1, r5
 800e118:	f7f2 fe14 	bl	8000d44 <__aeabi_fmul>
 800e11c:	493f      	ldr	r1, [pc, #252]	; (800e21c <atanf+0x1f8>)
 800e11e:	f7f2 fd07 	bl	8000b30 <__aeabi_fsub>
 800e122:	4629      	mov	r1, r5
 800e124:	f7f2 fe0e 	bl	8000d44 <__aeabi_fmul>
 800e128:	493d      	ldr	r1, [pc, #244]	; (800e220 <atanf+0x1fc>)
 800e12a:	f7f2 fd01 	bl	8000b30 <__aeabi_fsub>
 800e12e:	4629      	mov	r1, r5
 800e130:	f7f2 fe08 	bl	8000d44 <__aeabi_fmul>
 800e134:	493b      	ldr	r1, [pc, #236]	; (800e224 <atanf+0x200>)
 800e136:	f7f2 fcfb 	bl	8000b30 <__aeabi_fsub>
 800e13a:	4629      	mov	r1, r5
 800e13c:	f7f2 fe02 	bl	8000d44 <__aeabi_fmul>
 800e140:	4601      	mov	r1, r0
 800e142:	4638      	mov	r0, r7
 800e144:	f7f2 fcf6 	bl	8000b34 <__addsf3>
 800e148:	4621      	mov	r1, r4
 800e14a:	f7f2 fdfb 	bl	8000d44 <__aeabi_fmul>
 800e14e:	1c73      	adds	r3, r6, #1
 800e150:	4601      	mov	r1, r0
 800e152:	d133      	bne.n	800e1bc <atanf+0x198>
 800e154:	4620      	mov	r0, r4
 800e156:	f7f2 fceb 	bl	8000b30 <__aeabi_fsub>
 800e15a:	e772      	b.n	800e042 <atanf+0x1e>
 800e15c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e160:	f7f2 fce6 	bl	8000b30 <__aeabi_fsub>
 800e164:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e168:	4605      	mov	r5, r0
 800e16a:	4620      	mov	r0, r4
 800e16c:	f7f2 fce2 	bl	8000b34 <__addsf3>
 800e170:	4601      	mov	r1, r0
 800e172:	4628      	mov	r0, r5
 800e174:	f7f2 fe9a 	bl	8000eac <__aeabi_fdiv>
 800e178:	2601      	movs	r6, #1
 800e17a:	4604      	mov	r4, r0
 800e17c:	e799      	b.n	800e0b2 <atanf+0x8e>
 800e17e:	4b2a      	ldr	r3, [pc, #168]	; (800e228 <atanf+0x204>)
 800e180:	429d      	cmp	r5, r3
 800e182:	dc14      	bgt.n	800e1ae <atanf+0x18a>
 800e184:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800e188:	f7f2 fcd2 	bl	8000b30 <__aeabi_fsub>
 800e18c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800e190:	4605      	mov	r5, r0
 800e192:	4620      	mov	r0, r4
 800e194:	f7f2 fdd6 	bl	8000d44 <__aeabi_fmul>
 800e198:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e19c:	f7f2 fcca 	bl	8000b34 <__addsf3>
 800e1a0:	4601      	mov	r1, r0
 800e1a2:	4628      	mov	r0, r5
 800e1a4:	f7f2 fe82 	bl	8000eac <__aeabi_fdiv>
 800e1a8:	2602      	movs	r6, #2
 800e1aa:	4604      	mov	r4, r0
 800e1ac:	e781      	b.n	800e0b2 <atanf+0x8e>
 800e1ae:	4601      	mov	r1, r0
 800e1b0:	481e      	ldr	r0, [pc, #120]	; (800e22c <atanf+0x208>)
 800e1b2:	f7f2 fe7b 	bl	8000eac <__aeabi_fdiv>
 800e1b6:	2603      	movs	r6, #3
 800e1b8:	4604      	mov	r4, r0
 800e1ba:	e77a      	b.n	800e0b2 <atanf+0x8e>
 800e1bc:	4b1c      	ldr	r3, [pc, #112]	; (800e230 <atanf+0x20c>)
 800e1be:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800e1c2:	f7f2 fcb5 	bl	8000b30 <__aeabi_fsub>
 800e1c6:	4621      	mov	r1, r4
 800e1c8:	f7f2 fcb2 	bl	8000b30 <__aeabi_fsub>
 800e1cc:	4b19      	ldr	r3, [pc, #100]	; (800e234 <atanf+0x210>)
 800e1ce:	4601      	mov	r1, r0
 800e1d0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e1d4:	f7f2 fcac 	bl	8000b30 <__aeabi_fsub>
 800e1d8:	f1b8 0f00 	cmp.w	r8, #0
 800e1dc:	4604      	mov	r4, r0
 800e1de:	f6bf af36 	bge.w	800e04e <atanf+0x2a>
 800e1e2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e1e6:	e72c      	b.n	800e042 <atanf+0x1e>
 800e1e8:	4c13      	ldr	r4, [pc, #76]	; (800e238 <atanf+0x214>)
 800e1ea:	e730      	b.n	800e04e <atanf+0x2a>
 800e1ec:	bfc90fdb 	.word	0xbfc90fdb
 800e1f0:	3edfffff 	.word	0x3edfffff
 800e1f4:	7149f2ca 	.word	0x7149f2ca
 800e1f8:	3f97ffff 	.word	0x3f97ffff
 800e1fc:	3c8569d7 	.word	0x3c8569d7
 800e200:	3d4bda59 	.word	0x3d4bda59
 800e204:	3d886b35 	.word	0x3d886b35
 800e208:	3dba2e6e 	.word	0x3dba2e6e
 800e20c:	3e124925 	.word	0x3e124925
 800e210:	3eaaaaab 	.word	0x3eaaaaab
 800e214:	bd15a221 	.word	0xbd15a221
 800e218:	3d6ef16b 	.word	0x3d6ef16b
 800e21c:	3d9d8795 	.word	0x3d9d8795
 800e220:	3de38e38 	.word	0x3de38e38
 800e224:	3e4ccccd 	.word	0x3e4ccccd
 800e228:	401bffff 	.word	0x401bffff
 800e22c:	bf800000 	.word	0xbf800000
 800e230:	0801115c 	.word	0x0801115c
 800e234:	0801114c 	.word	0x0801114c
 800e238:	3fc90fdb 	.word	0x3fc90fdb

0800e23c <cosf>:
 800e23c:	b507      	push	{r0, r1, r2, lr}
 800e23e:	4a18      	ldr	r2, [pc, #96]	; (800e2a0 <cosf+0x64>)
 800e240:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e244:	4293      	cmp	r3, r2
 800e246:	4601      	mov	r1, r0
 800e248:	dc03      	bgt.n	800e252 <cosf+0x16>
 800e24a:	2100      	movs	r1, #0
 800e24c:	f001 fac4 	bl	800f7d8 <__kernel_cosf>
 800e250:	e004      	b.n	800e25c <cosf+0x20>
 800e252:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e256:	db04      	blt.n	800e262 <cosf+0x26>
 800e258:	f7f2 fc6a 	bl	8000b30 <__aeabi_fsub>
 800e25c:	b003      	add	sp, #12
 800e25e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e262:	4669      	mov	r1, sp
 800e264:	f001 f908 	bl	800f478 <__ieee754_rem_pio2f>
 800e268:	f000 0203 	and.w	r2, r0, #3
 800e26c:	2a01      	cmp	r2, #1
 800e26e:	d005      	beq.n	800e27c <cosf+0x40>
 800e270:	2a02      	cmp	r2, #2
 800e272:	d00a      	beq.n	800e28a <cosf+0x4e>
 800e274:	b972      	cbnz	r2, 800e294 <cosf+0x58>
 800e276:	9901      	ldr	r1, [sp, #4]
 800e278:	9800      	ldr	r0, [sp, #0]
 800e27a:	e7e7      	b.n	800e24c <cosf+0x10>
 800e27c:	9901      	ldr	r1, [sp, #4]
 800e27e:	9800      	ldr	r0, [sp, #0]
 800e280:	f001 fde0 	bl	800fe44 <__kernel_sinf>
 800e284:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e288:	e7e8      	b.n	800e25c <cosf+0x20>
 800e28a:	9901      	ldr	r1, [sp, #4]
 800e28c:	9800      	ldr	r0, [sp, #0]
 800e28e:	f001 faa3 	bl	800f7d8 <__kernel_cosf>
 800e292:	e7f7      	b.n	800e284 <cosf+0x48>
 800e294:	2201      	movs	r2, #1
 800e296:	9901      	ldr	r1, [sp, #4]
 800e298:	9800      	ldr	r0, [sp, #0]
 800e29a:	f001 fdd3 	bl	800fe44 <__kernel_sinf>
 800e29e:	e7dd      	b.n	800e25c <cosf+0x20>
 800e2a0:	3f490fd8 	.word	0x3f490fd8

0800e2a4 <fabsf>:
 800e2a4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e2a8:	4770      	bx	lr
	...

0800e2ac <sinf>:
 800e2ac:	b507      	push	{r0, r1, r2, lr}
 800e2ae:	4a19      	ldr	r2, [pc, #100]	; (800e314 <sinf+0x68>)
 800e2b0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	4601      	mov	r1, r0
 800e2b8:	dc04      	bgt.n	800e2c4 <sinf+0x18>
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	2100      	movs	r1, #0
 800e2be:	f001 fdc1 	bl	800fe44 <__kernel_sinf>
 800e2c2:	e004      	b.n	800e2ce <sinf+0x22>
 800e2c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e2c8:	db04      	blt.n	800e2d4 <sinf+0x28>
 800e2ca:	f7f2 fc31 	bl	8000b30 <__aeabi_fsub>
 800e2ce:	b003      	add	sp, #12
 800e2d0:	f85d fb04 	ldr.w	pc, [sp], #4
 800e2d4:	4669      	mov	r1, sp
 800e2d6:	f001 f8cf 	bl	800f478 <__ieee754_rem_pio2f>
 800e2da:	f000 0003 	and.w	r0, r0, #3
 800e2de:	2801      	cmp	r0, #1
 800e2e0:	d006      	beq.n	800e2f0 <sinf+0x44>
 800e2e2:	2802      	cmp	r0, #2
 800e2e4:	d009      	beq.n	800e2fa <sinf+0x4e>
 800e2e6:	b980      	cbnz	r0, 800e30a <sinf+0x5e>
 800e2e8:	2201      	movs	r2, #1
 800e2ea:	9901      	ldr	r1, [sp, #4]
 800e2ec:	9800      	ldr	r0, [sp, #0]
 800e2ee:	e7e6      	b.n	800e2be <sinf+0x12>
 800e2f0:	9901      	ldr	r1, [sp, #4]
 800e2f2:	9800      	ldr	r0, [sp, #0]
 800e2f4:	f001 fa70 	bl	800f7d8 <__kernel_cosf>
 800e2f8:	e7e9      	b.n	800e2ce <sinf+0x22>
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	9901      	ldr	r1, [sp, #4]
 800e2fe:	9800      	ldr	r0, [sp, #0]
 800e300:	f001 fda0 	bl	800fe44 <__kernel_sinf>
 800e304:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e308:	e7e1      	b.n	800e2ce <sinf+0x22>
 800e30a:	9901      	ldr	r1, [sp, #4]
 800e30c:	9800      	ldr	r0, [sp, #0]
 800e30e:	f001 fa63 	bl	800f7d8 <__kernel_cosf>
 800e312:	e7f7      	b.n	800e304 <sinf+0x58>
 800e314:	3f490fd8 	.word	0x3f490fd8

0800e318 <pow>:
 800e318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e31c:	461f      	mov	r7, r3
 800e31e:	4680      	mov	r8, r0
 800e320:	4689      	mov	r9, r1
 800e322:	4616      	mov	r6, r2
 800e324:	f000 f91c 	bl	800e560 <__ieee754_pow>
 800e328:	4b4d      	ldr	r3, [pc, #308]	; (800e460 <pow+0x148>)
 800e32a:	4604      	mov	r4, r0
 800e32c:	f993 3000 	ldrsb.w	r3, [r3]
 800e330:	460d      	mov	r5, r1
 800e332:	3301      	adds	r3, #1
 800e334:	d015      	beq.n	800e362 <pow+0x4a>
 800e336:	4632      	mov	r2, r6
 800e338:	463b      	mov	r3, r7
 800e33a:	4630      	mov	r0, r6
 800e33c:	4639      	mov	r1, r7
 800e33e:	f7f2 fb65 	bl	8000a0c <__aeabi_dcmpun>
 800e342:	b970      	cbnz	r0, 800e362 <pow+0x4a>
 800e344:	4642      	mov	r2, r8
 800e346:	464b      	mov	r3, r9
 800e348:	4640      	mov	r0, r8
 800e34a:	4649      	mov	r1, r9
 800e34c:	f7f2 fb5e 	bl	8000a0c <__aeabi_dcmpun>
 800e350:	2200      	movs	r2, #0
 800e352:	2300      	movs	r3, #0
 800e354:	b148      	cbz	r0, 800e36a <pow+0x52>
 800e356:	4630      	mov	r0, r6
 800e358:	4639      	mov	r1, r7
 800e35a:	f7f2 fb25 	bl	80009a8 <__aeabi_dcmpeq>
 800e35e:	2800      	cmp	r0, #0
 800e360:	d17b      	bne.n	800e45a <pow+0x142>
 800e362:	4620      	mov	r0, r4
 800e364:	4629      	mov	r1, r5
 800e366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e36a:	4640      	mov	r0, r8
 800e36c:	4649      	mov	r1, r9
 800e36e:	f7f2 fb1b 	bl	80009a8 <__aeabi_dcmpeq>
 800e372:	b1e0      	cbz	r0, 800e3ae <pow+0x96>
 800e374:	2200      	movs	r2, #0
 800e376:	2300      	movs	r3, #0
 800e378:	4630      	mov	r0, r6
 800e37a:	4639      	mov	r1, r7
 800e37c:	f7f2 fb14 	bl	80009a8 <__aeabi_dcmpeq>
 800e380:	2800      	cmp	r0, #0
 800e382:	d16a      	bne.n	800e45a <pow+0x142>
 800e384:	4630      	mov	r0, r6
 800e386:	4639      	mov	r1, r7
 800e388:	f001 fdd5 	bl	800ff36 <finite>
 800e38c:	2800      	cmp	r0, #0
 800e38e:	d0e8      	beq.n	800e362 <pow+0x4a>
 800e390:	2200      	movs	r2, #0
 800e392:	2300      	movs	r3, #0
 800e394:	4630      	mov	r0, r6
 800e396:	4639      	mov	r1, r7
 800e398:	f7f2 fb10 	bl	80009bc <__aeabi_dcmplt>
 800e39c:	2800      	cmp	r0, #0
 800e39e:	d0e0      	beq.n	800e362 <pow+0x4a>
 800e3a0:	f001 ff7a 	bl	8010298 <__errno>
 800e3a4:	2321      	movs	r3, #33	; 0x21
 800e3a6:	2400      	movs	r4, #0
 800e3a8:	6003      	str	r3, [r0, #0]
 800e3aa:	4d2e      	ldr	r5, [pc, #184]	; (800e464 <pow+0x14c>)
 800e3ac:	e7d9      	b.n	800e362 <pow+0x4a>
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	4629      	mov	r1, r5
 800e3b2:	f001 fdc0 	bl	800ff36 <finite>
 800e3b6:	bba8      	cbnz	r0, 800e424 <pow+0x10c>
 800e3b8:	4640      	mov	r0, r8
 800e3ba:	4649      	mov	r1, r9
 800e3bc:	f001 fdbb 	bl	800ff36 <finite>
 800e3c0:	b380      	cbz	r0, 800e424 <pow+0x10c>
 800e3c2:	4630      	mov	r0, r6
 800e3c4:	4639      	mov	r1, r7
 800e3c6:	f001 fdb6 	bl	800ff36 <finite>
 800e3ca:	b358      	cbz	r0, 800e424 <pow+0x10c>
 800e3cc:	4622      	mov	r2, r4
 800e3ce:	462b      	mov	r3, r5
 800e3d0:	4620      	mov	r0, r4
 800e3d2:	4629      	mov	r1, r5
 800e3d4:	f7f2 fb1a 	bl	8000a0c <__aeabi_dcmpun>
 800e3d8:	b160      	cbz	r0, 800e3f4 <pow+0xdc>
 800e3da:	f001 ff5d 	bl	8010298 <__errno>
 800e3de:	2321      	movs	r3, #33	; 0x21
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	6003      	str	r3, [r0, #0]
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	4610      	mov	r0, r2
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	f7f2 f99f 	bl	800072c <__aeabi_ddiv>
 800e3ee:	4604      	mov	r4, r0
 800e3f0:	460d      	mov	r5, r1
 800e3f2:	e7b6      	b.n	800e362 <pow+0x4a>
 800e3f4:	f001 ff50 	bl	8010298 <__errno>
 800e3f8:	2322      	movs	r3, #34	; 0x22
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	6003      	str	r3, [r0, #0]
 800e3fe:	4649      	mov	r1, r9
 800e400:	2300      	movs	r3, #0
 800e402:	4640      	mov	r0, r8
 800e404:	f7f2 fada 	bl	80009bc <__aeabi_dcmplt>
 800e408:	2400      	movs	r4, #0
 800e40a:	b148      	cbz	r0, 800e420 <pow+0x108>
 800e40c:	4630      	mov	r0, r6
 800e40e:	4639      	mov	r1, r7
 800e410:	f001 fd9e 	bl	800ff50 <rint>
 800e414:	4632      	mov	r2, r6
 800e416:	463b      	mov	r3, r7
 800e418:	f7f2 fac6 	bl	80009a8 <__aeabi_dcmpeq>
 800e41c:	2800      	cmp	r0, #0
 800e41e:	d0c4      	beq.n	800e3aa <pow+0x92>
 800e420:	4d11      	ldr	r5, [pc, #68]	; (800e468 <pow+0x150>)
 800e422:	e79e      	b.n	800e362 <pow+0x4a>
 800e424:	2200      	movs	r2, #0
 800e426:	2300      	movs	r3, #0
 800e428:	4620      	mov	r0, r4
 800e42a:	4629      	mov	r1, r5
 800e42c:	f7f2 fabc 	bl	80009a8 <__aeabi_dcmpeq>
 800e430:	2800      	cmp	r0, #0
 800e432:	d096      	beq.n	800e362 <pow+0x4a>
 800e434:	4640      	mov	r0, r8
 800e436:	4649      	mov	r1, r9
 800e438:	f001 fd7d 	bl	800ff36 <finite>
 800e43c:	2800      	cmp	r0, #0
 800e43e:	d090      	beq.n	800e362 <pow+0x4a>
 800e440:	4630      	mov	r0, r6
 800e442:	4639      	mov	r1, r7
 800e444:	f001 fd77 	bl	800ff36 <finite>
 800e448:	2800      	cmp	r0, #0
 800e44a:	d08a      	beq.n	800e362 <pow+0x4a>
 800e44c:	f001 ff24 	bl	8010298 <__errno>
 800e450:	2322      	movs	r3, #34	; 0x22
 800e452:	2400      	movs	r4, #0
 800e454:	2500      	movs	r5, #0
 800e456:	6003      	str	r3, [r0, #0]
 800e458:	e783      	b.n	800e362 <pow+0x4a>
 800e45a:	2400      	movs	r4, #0
 800e45c:	4d03      	ldr	r5, [pc, #12]	; (800e46c <pow+0x154>)
 800e45e:	e780      	b.n	800e362 <pow+0x4a>
 800e460:	20000019 	.word	0x20000019
 800e464:	fff00000 	.word	0xfff00000
 800e468:	7ff00000 	.word	0x7ff00000
 800e46c:	3ff00000 	.word	0x3ff00000

0800e470 <sqrt>:
 800e470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e472:	4606      	mov	r6, r0
 800e474:	460f      	mov	r7, r1
 800e476:	f000 fd89 	bl	800ef8c <__ieee754_sqrt>
 800e47a:	4b12      	ldr	r3, [pc, #72]	; (800e4c4 <sqrt+0x54>)
 800e47c:	4604      	mov	r4, r0
 800e47e:	f993 3000 	ldrsb.w	r3, [r3]
 800e482:	460d      	mov	r5, r1
 800e484:	3301      	adds	r3, #1
 800e486:	d019      	beq.n	800e4bc <sqrt+0x4c>
 800e488:	4632      	mov	r2, r6
 800e48a:	463b      	mov	r3, r7
 800e48c:	4630      	mov	r0, r6
 800e48e:	4639      	mov	r1, r7
 800e490:	f7f2 fabc 	bl	8000a0c <__aeabi_dcmpun>
 800e494:	b990      	cbnz	r0, 800e4bc <sqrt+0x4c>
 800e496:	2200      	movs	r2, #0
 800e498:	2300      	movs	r3, #0
 800e49a:	4630      	mov	r0, r6
 800e49c:	4639      	mov	r1, r7
 800e49e:	f7f2 fa8d 	bl	80009bc <__aeabi_dcmplt>
 800e4a2:	b158      	cbz	r0, 800e4bc <sqrt+0x4c>
 800e4a4:	f001 fef8 	bl	8010298 <__errno>
 800e4a8:	2321      	movs	r3, #33	; 0x21
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	6003      	str	r3, [r0, #0]
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	4610      	mov	r0, r2
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	f7f2 f93a 	bl	800072c <__aeabi_ddiv>
 800e4b8:	4604      	mov	r4, r0
 800e4ba:	460d      	mov	r5, r1
 800e4bc:	4620      	mov	r0, r4
 800e4be:	4629      	mov	r1, r5
 800e4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4c2:	bf00      	nop
 800e4c4:	20000019 	.word	0x20000019

0800e4c8 <asinf>:
 800e4c8:	b538      	push	{r3, r4, r5, lr}
 800e4ca:	4604      	mov	r4, r0
 800e4cc:	f000 fe0a 	bl	800f0e4 <__ieee754_asinf>
 800e4d0:	4b0e      	ldr	r3, [pc, #56]	; (800e50c <asinf+0x44>)
 800e4d2:	4605      	mov	r5, r0
 800e4d4:	f993 3000 	ldrsb.w	r3, [r3]
 800e4d8:	3301      	adds	r3, #1
 800e4da:	d015      	beq.n	800e508 <asinf+0x40>
 800e4dc:	4621      	mov	r1, r4
 800e4de:	4620      	mov	r0, r4
 800e4e0:	f7f2 fdf6 	bl	80010d0 <__aeabi_fcmpun>
 800e4e4:	b980      	cbnz	r0, 800e508 <asinf+0x40>
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	f7ff fedc 	bl	800e2a4 <fabsf>
 800e4ec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e4f0:	f7f2 fde4 	bl	80010bc <__aeabi_fcmpgt>
 800e4f4:	b140      	cbz	r0, 800e508 <asinf+0x40>
 800e4f6:	f001 fecf 	bl	8010298 <__errno>
 800e4fa:	2321      	movs	r3, #33	; 0x21
 800e4fc:	6003      	str	r3, [r0, #0]
 800e4fe:	4804      	ldr	r0, [pc, #16]	; (800e510 <asinf+0x48>)
 800e500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e504:	f001 be78 	b.w	80101f8 <nanf>
 800e508:	4628      	mov	r0, r5
 800e50a:	bd38      	pop	{r3, r4, r5, pc}
 800e50c:	20000019 	.word	0x20000019
 800e510:	080115fd 	.word	0x080115fd

0800e514 <atan2f>:
 800e514:	f000 bf2a 	b.w	800f36c <__ieee754_atan2f>

0800e518 <sqrtf>:
 800e518:	b538      	push	{r3, r4, r5, lr}
 800e51a:	4605      	mov	r5, r0
 800e51c:	f001 f90a 	bl	800f734 <__ieee754_sqrtf>
 800e520:	4b0d      	ldr	r3, [pc, #52]	; (800e558 <sqrtf+0x40>)
 800e522:	4604      	mov	r4, r0
 800e524:	f993 3000 	ldrsb.w	r3, [r3]
 800e528:	3301      	adds	r3, #1
 800e52a:	d012      	beq.n	800e552 <sqrtf+0x3a>
 800e52c:	4629      	mov	r1, r5
 800e52e:	4628      	mov	r0, r5
 800e530:	f7f2 fdce 	bl	80010d0 <__aeabi_fcmpun>
 800e534:	b968      	cbnz	r0, 800e552 <sqrtf+0x3a>
 800e536:	2100      	movs	r1, #0
 800e538:	4628      	mov	r0, r5
 800e53a:	f7f2 fda1 	bl	8001080 <__aeabi_fcmplt>
 800e53e:	b140      	cbz	r0, 800e552 <sqrtf+0x3a>
 800e540:	f001 feaa 	bl	8010298 <__errno>
 800e544:	2321      	movs	r3, #33	; 0x21
 800e546:	2100      	movs	r1, #0
 800e548:	6003      	str	r3, [r0, #0]
 800e54a:	4608      	mov	r0, r1
 800e54c:	f7f2 fcae 	bl	8000eac <__aeabi_fdiv>
 800e550:	4604      	mov	r4, r0
 800e552:	4620      	mov	r0, r4
 800e554:	bd38      	pop	{r3, r4, r5, pc}
 800e556:	bf00      	nop
 800e558:	20000019 	.word	0x20000019
 800e55c:	00000000 	.word	0x00000000

0800e560 <__ieee754_pow>:
 800e560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e564:	b093      	sub	sp, #76	; 0x4c
 800e566:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e56a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800e56e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800e572:	ea55 0302 	orrs.w	r3, r5, r2
 800e576:	4607      	mov	r7, r0
 800e578:	4688      	mov	r8, r1
 800e57a:	f000 84bf 	beq.w	800eefc <__ieee754_pow+0x99c>
 800e57e:	4b7e      	ldr	r3, [pc, #504]	; (800e778 <__ieee754_pow+0x218>)
 800e580:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800e584:	429c      	cmp	r4, r3
 800e586:	4689      	mov	r9, r1
 800e588:	4682      	mov	sl, r0
 800e58a:	dc09      	bgt.n	800e5a0 <__ieee754_pow+0x40>
 800e58c:	d103      	bne.n	800e596 <__ieee754_pow+0x36>
 800e58e:	b978      	cbnz	r0, 800e5b0 <__ieee754_pow+0x50>
 800e590:	42a5      	cmp	r5, r4
 800e592:	dd02      	ble.n	800e59a <__ieee754_pow+0x3a>
 800e594:	e00c      	b.n	800e5b0 <__ieee754_pow+0x50>
 800e596:	429d      	cmp	r5, r3
 800e598:	dc02      	bgt.n	800e5a0 <__ieee754_pow+0x40>
 800e59a:	429d      	cmp	r5, r3
 800e59c:	d10e      	bne.n	800e5bc <__ieee754_pow+0x5c>
 800e59e:	b16a      	cbz	r2, 800e5bc <__ieee754_pow+0x5c>
 800e5a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e5a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e5a8:	ea54 030a 	orrs.w	r3, r4, sl
 800e5ac:	f000 84a6 	beq.w	800eefc <__ieee754_pow+0x99c>
 800e5b0:	4872      	ldr	r0, [pc, #456]	; (800e77c <__ieee754_pow+0x21c>)
 800e5b2:	b013      	add	sp, #76	; 0x4c
 800e5b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b8:	f001 bcc4 	b.w	800ff44 <nan>
 800e5bc:	f1b9 0f00 	cmp.w	r9, #0
 800e5c0:	da39      	bge.n	800e636 <__ieee754_pow+0xd6>
 800e5c2:	4b6f      	ldr	r3, [pc, #444]	; (800e780 <__ieee754_pow+0x220>)
 800e5c4:	429d      	cmp	r5, r3
 800e5c6:	dc54      	bgt.n	800e672 <__ieee754_pow+0x112>
 800e5c8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e5cc:	429d      	cmp	r5, r3
 800e5ce:	f340 84a6 	ble.w	800ef1e <__ieee754_pow+0x9be>
 800e5d2:	152b      	asrs	r3, r5, #20
 800e5d4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e5d8:	2b14      	cmp	r3, #20
 800e5da:	dd0f      	ble.n	800e5fc <__ieee754_pow+0x9c>
 800e5dc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e5e0:	fa22 f103 	lsr.w	r1, r2, r3
 800e5e4:	fa01 f303 	lsl.w	r3, r1, r3
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	f040 8498 	bne.w	800ef1e <__ieee754_pow+0x9be>
 800e5ee:	f001 0101 	and.w	r1, r1, #1
 800e5f2:	f1c1 0302 	rsb	r3, r1, #2
 800e5f6:	9300      	str	r3, [sp, #0]
 800e5f8:	b182      	cbz	r2, 800e61c <__ieee754_pow+0xbc>
 800e5fa:	e05e      	b.n	800e6ba <__ieee754_pow+0x15a>
 800e5fc:	2a00      	cmp	r2, #0
 800e5fe:	d15a      	bne.n	800e6b6 <__ieee754_pow+0x156>
 800e600:	f1c3 0314 	rsb	r3, r3, #20
 800e604:	fa45 f103 	asr.w	r1, r5, r3
 800e608:	fa01 f303 	lsl.w	r3, r1, r3
 800e60c:	42ab      	cmp	r3, r5
 800e60e:	f040 8483 	bne.w	800ef18 <__ieee754_pow+0x9b8>
 800e612:	f001 0101 	and.w	r1, r1, #1
 800e616:	f1c1 0302 	rsb	r3, r1, #2
 800e61a:	9300      	str	r3, [sp, #0]
 800e61c:	4b59      	ldr	r3, [pc, #356]	; (800e784 <__ieee754_pow+0x224>)
 800e61e:	429d      	cmp	r5, r3
 800e620:	d130      	bne.n	800e684 <__ieee754_pow+0x124>
 800e622:	2e00      	cmp	r6, #0
 800e624:	f280 8474 	bge.w	800ef10 <__ieee754_pow+0x9b0>
 800e628:	463a      	mov	r2, r7
 800e62a:	4643      	mov	r3, r8
 800e62c:	2000      	movs	r0, #0
 800e62e:	4955      	ldr	r1, [pc, #340]	; (800e784 <__ieee754_pow+0x224>)
 800e630:	f7f2 f87c 	bl	800072c <__aeabi_ddiv>
 800e634:	e02f      	b.n	800e696 <__ieee754_pow+0x136>
 800e636:	2300      	movs	r3, #0
 800e638:	9300      	str	r3, [sp, #0]
 800e63a:	2a00      	cmp	r2, #0
 800e63c:	d13d      	bne.n	800e6ba <__ieee754_pow+0x15a>
 800e63e:	4b4e      	ldr	r3, [pc, #312]	; (800e778 <__ieee754_pow+0x218>)
 800e640:	429d      	cmp	r5, r3
 800e642:	d1eb      	bne.n	800e61c <__ieee754_pow+0xbc>
 800e644:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e648:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e64c:	ea53 030a 	orrs.w	r3, r3, sl
 800e650:	f000 8454 	beq.w	800eefc <__ieee754_pow+0x99c>
 800e654:	4b4c      	ldr	r3, [pc, #304]	; (800e788 <__ieee754_pow+0x228>)
 800e656:	429c      	cmp	r4, r3
 800e658:	dd0d      	ble.n	800e676 <__ieee754_pow+0x116>
 800e65a:	2e00      	cmp	r6, #0
 800e65c:	f280 8454 	bge.w	800ef08 <__ieee754_pow+0x9a8>
 800e660:	f04f 0b00 	mov.w	fp, #0
 800e664:	f04f 0c00 	mov.w	ip, #0
 800e668:	4658      	mov	r0, fp
 800e66a:	4661      	mov	r1, ip
 800e66c:	b013      	add	sp, #76	; 0x4c
 800e66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e672:	2302      	movs	r3, #2
 800e674:	e7e0      	b.n	800e638 <__ieee754_pow+0xd8>
 800e676:	2e00      	cmp	r6, #0
 800e678:	daf2      	bge.n	800e660 <__ieee754_pow+0x100>
 800e67a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800e67e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800e682:	e7f1      	b.n	800e668 <__ieee754_pow+0x108>
 800e684:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800e688:	d108      	bne.n	800e69c <__ieee754_pow+0x13c>
 800e68a:	463a      	mov	r2, r7
 800e68c:	4643      	mov	r3, r8
 800e68e:	4638      	mov	r0, r7
 800e690:	4641      	mov	r1, r8
 800e692:	f7f1 ff21 	bl	80004d8 <__aeabi_dmul>
 800e696:	4683      	mov	fp, r0
 800e698:	468c      	mov	ip, r1
 800e69a:	e7e5      	b.n	800e668 <__ieee754_pow+0x108>
 800e69c:	4b3b      	ldr	r3, [pc, #236]	; (800e78c <__ieee754_pow+0x22c>)
 800e69e:	429e      	cmp	r6, r3
 800e6a0:	d10b      	bne.n	800e6ba <__ieee754_pow+0x15a>
 800e6a2:	f1b9 0f00 	cmp.w	r9, #0
 800e6a6:	db08      	blt.n	800e6ba <__ieee754_pow+0x15a>
 800e6a8:	4638      	mov	r0, r7
 800e6aa:	4641      	mov	r1, r8
 800e6ac:	b013      	add	sp, #76	; 0x4c
 800e6ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b2:	f000 bc6b 	b.w	800ef8c <__ieee754_sqrt>
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	9300      	str	r3, [sp, #0]
 800e6ba:	4638      	mov	r0, r7
 800e6bc:	4641      	mov	r1, r8
 800e6be:	f001 fc37 	bl	800ff30 <fabs>
 800e6c2:	4683      	mov	fp, r0
 800e6c4:	468c      	mov	ip, r1
 800e6c6:	f1ba 0f00 	cmp.w	sl, #0
 800e6ca:	d129      	bne.n	800e720 <__ieee754_pow+0x1c0>
 800e6cc:	b124      	cbz	r4, 800e6d8 <__ieee754_pow+0x178>
 800e6ce:	4b2d      	ldr	r3, [pc, #180]	; (800e784 <__ieee754_pow+0x224>)
 800e6d0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d123      	bne.n	800e720 <__ieee754_pow+0x1c0>
 800e6d8:	2e00      	cmp	r6, #0
 800e6da:	da07      	bge.n	800e6ec <__ieee754_pow+0x18c>
 800e6dc:	465a      	mov	r2, fp
 800e6de:	4663      	mov	r3, ip
 800e6e0:	2000      	movs	r0, #0
 800e6e2:	4928      	ldr	r1, [pc, #160]	; (800e784 <__ieee754_pow+0x224>)
 800e6e4:	f7f2 f822 	bl	800072c <__aeabi_ddiv>
 800e6e8:	4683      	mov	fp, r0
 800e6ea:	468c      	mov	ip, r1
 800e6ec:	f1b9 0f00 	cmp.w	r9, #0
 800e6f0:	daba      	bge.n	800e668 <__ieee754_pow+0x108>
 800e6f2:	9b00      	ldr	r3, [sp, #0]
 800e6f4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e6f8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e6fc:	4323      	orrs	r3, r4
 800e6fe:	d108      	bne.n	800e712 <__ieee754_pow+0x1b2>
 800e700:	465a      	mov	r2, fp
 800e702:	4663      	mov	r3, ip
 800e704:	4658      	mov	r0, fp
 800e706:	4661      	mov	r1, ip
 800e708:	f7f1 fd2e 	bl	8000168 <__aeabi_dsub>
 800e70c:	4602      	mov	r2, r0
 800e70e:	460b      	mov	r3, r1
 800e710:	e78e      	b.n	800e630 <__ieee754_pow+0xd0>
 800e712:	9b00      	ldr	r3, [sp, #0]
 800e714:	2b01      	cmp	r3, #1
 800e716:	d1a7      	bne.n	800e668 <__ieee754_pow+0x108>
 800e718:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800e71c:	469c      	mov	ip, r3
 800e71e:	e7a3      	b.n	800e668 <__ieee754_pow+0x108>
 800e720:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800e724:	3b01      	subs	r3, #1
 800e726:	930c      	str	r3, [sp, #48]	; 0x30
 800e728:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e72a:	9b00      	ldr	r3, [sp, #0]
 800e72c:	4313      	orrs	r3, r2
 800e72e:	d104      	bne.n	800e73a <__ieee754_pow+0x1da>
 800e730:	463a      	mov	r2, r7
 800e732:	4643      	mov	r3, r8
 800e734:	4638      	mov	r0, r7
 800e736:	4641      	mov	r1, r8
 800e738:	e7e6      	b.n	800e708 <__ieee754_pow+0x1a8>
 800e73a:	4b15      	ldr	r3, [pc, #84]	; (800e790 <__ieee754_pow+0x230>)
 800e73c:	429d      	cmp	r5, r3
 800e73e:	f340 80f9 	ble.w	800e934 <__ieee754_pow+0x3d4>
 800e742:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e746:	429d      	cmp	r5, r3
 800e748:	4b0f      	ldr	r3, [pc, #60]	; (800e788 <__ieee754_pow+0x228>)
 800e74a:	dd09      	ble.n	800e760 <__ieee754_pow+0x200>
 800e74c:	429c      	cmp	r4, r3
 800e74e:	dc0c      	bgt.n	800e76a <__ieee754_pow+0x20a>
 800e750:	2e00      	cmp	r6, #0
 800e752:	da85      	bge.n	800e660 <__ieee754_pow+0x100>
 800e754:	a306      	add	r3, pc, #24	; (adr r3, 800e770 <__ieee754_pow+0x210>)
 800e756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e75a:	4610      	mov	r0, r2
 800e75c:	4619      	mov	r1, r3
 800e75e:	e798      	b.n	800e692 <__ieee754_pow+0x132>
 800e760:	429c      	cmp	r4, r3
 800e762:	dbf5      	blt.n	800e750 <__ieee754_pow+0x1f0>
 800e764:	4b07      	ldr	r3, [pc, #28]	; (800e784 <__ieee754_pow+0x224>)
 800e766:	429c      	cmp	r4, r3
 800e768:	dd14      	ble.n	800e794 <__ieee754_pow+0x234>
 800e76a:	2e00      	cmp	r6, #0
 800e76c:	dcf2      	bgt.n	800e754 <__ieee754_pow+0x1f4>
 800e76e:	e777      	b.n	800e660 <__ieee754_pow+0x100>
 800e770:	8800759c 	.word	0x8800759c
 800e774:	7e37e43c 	.word	0x7e37e43c
 800e778:	7ff00000 	.word	0x7ff00000
 800e77c:	080115fd 	.word	0x080115fd
 800e780:	433fffff 	.word	0x433fffff
 800e784:	3ff00000 	.word	0x3ff00000
 800e788:	3fefffff 	.word	0x3fefffff
 800e78c:	3fe00000 	.word	0x3fe00000
 800e790:	41e00000 	.word	0x41e00000
 800e794:	4661      	mov	r1, ip
 800e796:	2200      	movs	r2, #0
 800e798:	4658      	mov	r0, fp
 800e79a:	4b61      	ldr	r3, [pc, #388]	; (800e920 <__ieee754_pow+0x3c0>)
 800e79c:	f7f1 fce4 	bl	8000168 <__aeabi_dsub>
 800e7a0:	a355      	add	r3, pc, #340	; (adr r3, 800e8f8 <__ieee754_pow+0x398>)
 800e7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a6:	4604      	mov	r4, r0
 800e7a8:	460d      	mov	r5, r1
 800e7aa:	f7f1 fe95 	bl	80004d8 <__aeabi_dmul>
 800e7ae:	a354      	add	r3, pc, #336	; (adr r3, 800e900 <__ieee754_pow+0x3a0>)
 800e7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b4:	4606      	mov	r6, r0
 800e7b6:	460f      	mov	r7, r1
 800e7b8:	4620      	mov	r0, r4
 800e7ba:	4629      	mov	r1, r5
 800e7bc:	f7f1 fe8c 	bl	80004d8 <__aeabi_dmul>
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	4682      	mov	sl, r0
 800e7c4:	468b      	mov	fp, r1
 800e7c6:	4620      	mov	r0, r4
 800e7c8:	4629      	mov	r1, r5
 800e7ca:	4b56      	ldr	r3, [pc, #344]	; (800e924 <__ieee754_pow+0x3c4>)
 800e7cc:	f7f1 fe84 	bl	80004d8 <__aeabi_dmul>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	a14c      	add	r1, pc, #304	; (adr r1, 800e908 <__ieee754_pow+0x3a8>)
 800e7d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7da:	f7f1 fcc5 	bl	8000168 <__aeabi_dsub>
 800e7de:	4622      	mov	r2, r4
 800e7e0:	462b      	mov	r3, r5
 800e7e2:	f7f1 fe79 	bl	80004d8 <__aeabi_dmul>
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	2000      	movs	r0, #0
 800e7ec:	494e      	ldr	r1, [pc, #312]	; (800e928 <__ieee754_pow+0x3c8>)
 800e7ee:	f7f1 fcbb 	bl	8000168 <__aeabi_dsub>
 800e7f2:	4622      	mov	r2, r4
 800e7f4:	462b      	mov	r3, r5
 800e7f6:	4680      	mov	r8, r0
 800e7f8:	4689      	mov	r9, r1
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	4629      	mov	r1, r5
 800e7fe:	f7f1 fe6b 	bl	80004d8 <__aeabi_dmul>
 800e802:	4602      	mov	r2, r0
 800e804:	460b      	mov	r3, r1
 800e806:	4640      	mov	r0, r8
 800e808:	4649      	mov	r1, r9
 800e80a:	f7f1 fe65 	bl	80004d8 <__aeabi_dmul>
 800e80e:	a340      	add	r3, pc, #256	; (adr r3, 800e910 <__ieee754_pow+0x3b0>)
 800e810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e814:	f7f1 fe60 	bl	80004d8 <__aeabi_dmul>
 800e818:	4602      	mov	r2, r0
 800e81a:	460b      	mov	r3, r1
 800e81c:	4650      	mov	r0, sl
 800e81e:	4659      	mov	r1, fp
 800e820:	f7f1 fca2 	bl	8000168 <__aeabi_dsub>
 800e824:	f04f 0a00 	mov.w	sl, #0
 800e828:	4602      	mov	r2, r0
 800e82a:	460b      	mov	r3, r1
 800e82c:	4604      	mov	r4, r0
 800e82e:	460d      	mov	r5, r1
 800e830:	4630      	mov	r0, r6
 800e832:	4639      	mov	r1, r7
 800e834:	f7f1 fc9a 	bl	800016c <__adddf3>
 800e838:	4632      	mov	r2, r6
 800e83a:	463b      	mov	r3, r7
 800e83c:	4650      	mov	r0, sl
 800e83e:	468b      	mov	fp, r1
 800e840:	f7f1 fc92 	bl	8000168 <__aeabi_dsub>
 800e844:	4602      	mov	r2, r0
 800e846:	460b      	mov	r3, r1
 800e848:	4620      	mov	r0, r4
 800e84a:	4629      	mov	r1, r5
 800e84c:	f7f1 fc8c 	bl	8000168 <__aeabi_dsub>
 800e850:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e854:	9b00      	ldr	r3, [sp, #0]
 800e856:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e858:	3b01      	subs	r3, #1
 800e85a:	4313      	orrs	r3, r2
 800e85c:	f04f 0600 	mov.w	r6, #0
 800e860:	f04f 0200 	mov.w	r2, #0
 800e864:	bf0c      	ite	eq
 800e866:	4b31      	ldreq	r3, [pc, #196]	; (800e92c <__ieee754_pow+0x3cc>)
 800e868:	4b2d      	ldrne	r3, [pc, #180]	; (800e920 <__ieee754_pow+0x3c0>)
 800e86a:	4604      	mov	r4, r0
 800e86c:	460d      	mov	r5, r1
 800e86e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e872:	e9cd 2300 	strd	r2, r3, [sp]
 800e876:	4632      	mov	r2, r6
 800e878:	463b      	mov	r3, r7
 800e87a:	f7f1 fc75 	bl	8000168 <__aeabi_dsub>
 800e87e:	4652      	mov	r2, sl
 800e880:	465b      	mov	r3, fp
 800e882:	f7f1 fe29 	bl	80004d8 <__aeabi_dmul>
 800e886:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e88a:	4680      	mov	r8, r0
 800e88c:	4689      	mov	r9, r1
 800e88e:	4620      	mov	r0, r4
 800e890:	4629      	mov	r1, r5
 800e892:	f7f1 fe21 	bl	80004d8 <__aeabi_dmul>
 800e896:	4602      	mov	r2, r0
 800e898:	460b      	mov	r3, r1
 800e89a:	4640      	mov	r0, r8
 800e89c:	4649      	mov	r1, r9
 800e89e:	f7f1 fc65 	bl	800016c <__adddf3>
 800e8a2:	4632      	mov	r2, r6
 800e8a4:	463b      	mov	r3, r7
 800e8a6:	4680      	mov	r8, r0
 800e8a8:	4689      	mov	r9, r1
 800e8aa:	4650      	mov	r0, sl
 800e8ac:	4659      	mov	r1, fp
 800e8ae:	f7f1 fe13 	bl	80004d8 <__aeabi_dmul>
 800e8b2:	4604      	mov	r4, r0
 800e8b4:	460d      	mov	r5, r1
 800e8b6:	460b      	mov	r3, r1
 800e8b8:	4602      	mov	r2, r0
 800e8ba:	4649      	mov	r1, r9
 800e8bc:	4640      	mov	r0, r8
 800e8be:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800e8c2:	f7f1 fc53 	bl	800016c <__adddf3>
 800e8c6:	4b1a      	ldr	r3, [pc, #104]	; (800e930 <__ieee754_pow+0x3d0>)
 800e8c8:	4682      	mov	sl, r0
 800e8ca:	4299      	cmp	r1, r3
 800e8cc:	460f      	mov	r7, r1
 800e8ce:	460e      	mov	r6, r1
 800e8d0:	f340 82ed 	ble.w	800eeae <__ieee754_pow+0x94e>
 800e8d4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e8d8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e8dc:	4303      	orrs	r3, r0
 800e8de:	f000 81e7 	beq.w	800ecb0 <__ieee754_pow+0x750>
 800e8e2:	a30d      	add	r3, pc, #52	; (adr r3, 800e918 <__ieee754_pow+0x3b8>)
 800e8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8ec:	f7f1 fdf4 	bl	80004d8 <__aeabi_dmul>
 800e8f0:	a309      	add	r3, pc, #36	; (adr r3, 800e918 <__ieee754_pow+0x3b8>)
 800e8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f6:	e6cc      	b.n	800e692 <__ieee754_pow+0x132>
 800e8f8:	60000000 	.word	0x60000000
 800e8fc:	3ff71547 	.word	0x3ff71547
 800e900:	f85ddf44 	.word	0xf85ddf44
 800e904:	3e54ae0b 	.word	0x3e54ae0b
 800e908:	55555555 	.word	0x55555555
 800e90c:	3fd55555 	.word	0x3fd55555
 800e910:	652b82fe 	.word	0x652b82fe
 800e914:	3ff71547 	.word	0x3ff71547
 800e918:	8800759c 	.word	0x8800759c
 800e91c:	7e37e43c 	.word	0x7e37e43c
 800e920:	3ff00000 	.word	0x3ff00000
 800e924:	3fd00000 	.word	0x3fd00000
 800e928:	3fe00000 	.word	0x3fe00000
 800e92c:	bff00000 	.word	0xbff00000
 800e930:	408fffff 	.word	0x408fffff
 800e934:	4bd4      	ldr	r3, [pc, #848]	; (800ec88 <__ieee754_pow+0x728>)
 800e936:	2200      	movs	r2, #0
 800e938:	ea09 0303 	and.w	r3, r9, r3
 800e93c:	b943      	cbnz	r3, 800e950 <__ieee754_pow+0x3f0>
 800e93e:	4658      	mov	r0, fp
 800e940:	4661      	mov	r1, ip
 800e942:	4bd2      	ldr	r3, [pc, #840]	; (800ec8c <__ieee754_pow+0x72c>)
 800e944:	f7f1 fdc8 	bl	80004d8 <__aeabi_dmul>
 800e948:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e94c:	4683      	mov	fp, r0
 800e94e:	460c      	mov	r4, r1
 800e950:	1523      	asrs	r3, r4, #20
 800e952:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e956:	4413      	add	r3, r2
 800e958:	930b      	str	r3, [sp, #44]	; 0x2c
 800e95a:	4bcd      	ldr	r3, [pc, #820]	; (800ec90 <__ieee754_pow+0x730>)
 800e95c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e960:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e964:	429c      	cmp	r4, r3
 800e966:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e96a:	dd08      	ble.n	800e97e <__ieee754_pow+0x41e>
 800e96c:	4bc9      	ldr	r3, [pc, #804]	; (800ec94 <__ieee754_pow+0x734>)
 800e96e:	429c      	cmp	r4, r3
 800e970:	f340 819c 	ble.w	800ecac <__ieee754_pow+0x74c>
 800e974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e976:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e97a:	3301      	adds	r3, #1
 800e97c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e97e:	2600      	movs	r6, #0
 800e980:	00f3      	lsls	r3, r6, #3
 800e982:	930d      	str	r3, [sp, #52]	; 0x34
 800e984:	4bc4      	ldr	r3, [pc, #784]	; (800ec98 <__ieee754_pow+0x738>)
 800e986:	4658      	mov	r0, fp
 800e988:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e98c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e990:	4629      	mov	r1, r5
 800e992:	461a      	mov	r2, r3
 800e994:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800e998:	4623      	mov	r3, r4
 800e99a:	f7f1 fbe5 	bl	8000168 <__aeabi_dsub>
 800e99e:	46da      	mov	sl, fp
 800e9a0:	462b      	mov	r3, r5
 800e9a2:	4652      	mov	r2, sl
 800e9a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e9a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e9ac:	f7f1 fbde 	bl	800016c <__adddf3>
 800e9b0:	4602      	mov	r2, r0
 800e9b2:	460b      	mov	r3, r1
 800e9b4:	2000      	movs	r0, #0
 800e9b6:	49b9      	ldr	r1, [pc, #740]	; (800ec9c <__ieee754_pow+0x73c>)
 800e9b8:	f7f1 feb8 	bl	800072c <__aeabi_ddiv>
 800e9bc:	4602      	mov	r2, r0
 800e9be:	460b      	mov	r3, r1
 800e9c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e9c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e9c8:	f7f1 fd86 	bl	80004d8 <__aeabi_dmul>
 800e9cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e9d0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e9d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e9d8:	2300      	movs	r3, #0
 800e9da:	2200      	movs	r2, #0
 800e9dc:	46ab      	mov	fp, r5
 800e9de:	106d      	asrs	r5, r5, #1
 800e9e0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e9e4:	9304      	str	r3, [sp, #16]
 800e9e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e9ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e9ee:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800e9f2:	4640      	mov	r0, r8
 800e9f4:	4649      	mov	r1, r9
 800e9f6:	4614      	mov	r4, r2
 800e9f8:	461d      	mov	r5, r3
 800e9fa:	f7f1 fd6d 	bl	80004d8 <__aeabi_dmul>
 800e9fe:	4602      	mov	r2, r0
 800ea00:	460b      	mov	r3, r1
 800ea02:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ea06:	f7f1 fbaf 	bl	8000168 <__aeabi_dsub>
 800ea0a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ea0e:	4606      	mov	r6, r0
 800ea10:	460f      	mov	r7, r1
 800ea12:	4620      	mov	r0, r4
 800ea14:	4629      	mov	r1, r5
 800ea16:	f7f1 fba7 	bl	8000168 <__aeabi_dsub>
 800ea1a:	4602      	mov	r2, r0
 800ea1c:	460b      	mov	r3, r1
 800ea1e:	4650      	mov	r0, sl
 800ea20:	4659      	mov	r1, fp
 800ea22:	f7f1 fba1 	bl	8000168 <__aeabi_dsub>
 800ea26:	4642      	mov	r2, r8
 800ea28:	464b      	mov	r3, r9
 800ea2a:	f7f1 fd55 	bl	80004d8 <__aeabi_dmul>
 800ea2e:	4602      	mov	r2, r0
 800ea30:	460b      	mov	r3, r1
 800ea32:	4630      	mov	r0, r6
 800ea34:	4639      	mov	r1, r7
 800ea36:	f7f1 fb97 	bl	8000168 <__aeabi_dsub>
 800ea3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ea3e:	f7f1 fd4b 	bl	80004d8 <__aeabi_dmul>
 800ea42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ea4a:	4610      	mov	r0, r2
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	f7f1 fd43 	bl	80004d8 <__aeabi_dmul>
 800ea52:	a37b      	add	r3, pc, #492	; (adr r3, 800ec40 <__ieee754_pow+0x6e0>)
 800ea54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea58:	4604      	mov	r4, r0
 800ea5a:	460d      	mov	r5, r1
 800ea5c:	f7f1 fd3c 	bl	80004d8 <__aeabi_dmul>
 800ea60:	a379      	add	r3, pc, #484	; (adr r3, 800ec48 <__ieee754_pow+0x6e8>)
 800ea62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea66:	f7f1 fb81 	bl	800016c <__adddf3>
 800ea6a:	4622      	mov	r2, r4
 800ea6c:	462b      	mov	r3, r5
 800ea6e:	f7f1 fd33 	bl	80004d8 <__aeabi_dmul>
 800ea72:	a377      	add	r3, pc, #476	; (adr r3, 800ec50 <__ieee754_pow+0x6f0>)
 800ea74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea78:	f7f1 fb78 	bl	800016c <__adddf3>
 800ea7c:	4622      	mov	r2, r4
 800ea7e:	462b      	mov	r3, r5
 800ea80:	f7f1 fd2a 	bl	80004d8 <__aeabi_dmul>
 800ea84:	a374      	add	r3, pc, #464	; (adr r3, 800ec58 <__ieee754_pow+0x6f8>)
 800ea86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8a:	f7f1 fb6f 	bl	800016c <__adddf3>
 800ea8e:	4622      	mov	r2, r4
 800ea90:	462b      	mov	r3, r5
 800ea92:	f7f1 fd21 	bl	80004d8 <__aeabi_dmul>
 800ea96:	a372      	add	r3, pc, #456	; (adr r3, 800ec60 <__ieee754_pow+0x700>)
 800ea98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea9c:	f7f1 fb66 	bl	800016c <__adddf3>
 800eaa0:	4622      	mov	r2, r4
 800eaa2:	462b      	mov	r3, r5
 800eaa4:	f7f1 fd18 	bl	80004d8 <__aeabi_dmul>
 800eaa8:	a36f      	add	r3, pc, #444	; (adr r3, 800ec68 <__ieee754_pow+0x708>)
 800eaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaae:	f7f1 fb5d 	bl	800016c <__adddf3>
 800eab2:	4622      	mov	r2, r4
 800eab4:	4606      	mov	r6, r0
 800eab6:	460f      	mov	r7, r1
 800eab8:	462b      	mov	r3, r5
 800eaba:	4620      	mov	r0, r4
 800eabc:	4629      	mov	r1, r5
 800eabe:	f7f1 fd0b 	bl	80004d8 <__aeabi_dmul>
 800eac2:	4602      	mov	r2, r0
 800eac4:	460b      	mov	r3, r1
 800eac6:	4630      	mov	r0, r6
 800eac8:	4639      	mov	r1, r7
 800eaca:	f7f1 fd05 	bl	80004d8 <__aeabi_dmul>
 800eace:	4604      	mov	r4, r0
 800ead0:	460d      	mov	r5, r1
 800ead2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ead6:	4642      	mov	r2, r8
 800ead8:	464b      	mov	r3, r9
 800eada:	f7f1 fb47 	bl	800016c <__adddf3>
 800eade:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800eae2:	f7f1 fcf9 	bl	80004d8 <__aeabi_dmul>
 800eae6:	4622      	mov	r2, r4
 800eae8:	462b      	mov	r3, r5
 800eaea:	f7f1 fb3f 	bl	800016c <__adddf3>
 800eaee:	4642      	mov	r2, r8
 800eaf0:	4606      	mov	r6, r0
 800eaf2:	460f      	mov	r7, r1
 800eaf4:	464b      	mov	r3, r9
 800eaf6:	4640      	mov	r0, r8
 800eaf8:	4649      	mov	r1, r9
 800eafa:	f7f1 fced 	bl	80004d8 <__aeabi_dmul>
 800eafe:	2200      	movs	r2, #0
 800eb00:	4b67      	ldr	r3, [pc, #412]	; (800eca0 <__ieee754_pow+0x740>)
 800eb02:	4682      	mov	sl, r0
 800eb04:	468b      	mov	fp, r1
 800eb06:	f7f1 fb31 	bl	800016c <__adddf3>
 800eb0a:	4632      	mov	r2, r6
 800eb0c:	463b      	mov	r3, r7
 800eb0e:	f7f1 fb2d 	bl	800016c <__adddf3>
 800eb12:	9c04      	ldr	r4, [sp, #16]
 800eb14:	460d      	mov	r5, r1
 800eb16:	4622      	mov	r2, r4
 800eb18:	460b      	mov	r3, r1
 800eb1a:	4640      	mov	r0, r8
 800eb1c:	4649      	mov	r1, r9
 800eb1e:	f7f1 fcdb 	bl	80004d8 <__aeabi_dmul>
 800eb22:	2200      	movs	r2, #0
 800eb24:	4680      	mov	r8, r0
 800eb26:	4689      	mov	r9, r1
 800eb28:	4620      	mov	r0, r4
 800eb2a:	4629      	mov	r1, r5
 800eb2c:	4b5c      	ldr	r3, [pc, #368]	; (800eca0 <__ieee754_pow+0x740>)
 800eb2e:	f7f1 fb1b 	bl	8000168 <__aeabi_dsub>
 800eb32:	4652      	mov	r2, sl
 800eb34:	465b      	mov	r3, fp
 800eb36:	f7f1 fb17 	bl	8000168 <__aeabi_dsub>
 800eb3a:	4602      	mov	r2, r0
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	4630      	mov	r0, r6
 800eb40:	4639      	mov	r1, r7
 800eb42:	f7f1 fb11 	bl	8000168 <__aeabi_dsub>
 800eb46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb4a:	f7f1 fcc5 	bl	80004d8 <__aeabi_dmul>
 800eb4e:	4622      	mov	r2, r4
 800eb50:	4606      	mov	r6, r0
 800eb52:	460f      	mov	r7, r1
 800eb54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eb58:	462b      	mov	r3, r5
 800eb5a:	f7f1 fcbd 	bl	80004d8 <__aeabi_dmul>
 800eb5e:	4602      	mov	r2, r0
 800eb60:	460b      	mov	r3, r1
 800eb62:	4630      	mov	r0, r6
 800eb64:	4639      	mov	r1, r7
 800eb66:	f7f1 fb01 	bl	800016c <__adddf3>
 800eb6a:	4606      	mov	r6, r0
 800eb6c:	460f      	mov	r7, r1
 800eb6e:	4602      	mov	r2, r0
 800eb70:	460b      	mov	r3, r1
 800eb72:	4640      	mov	r0, r8
 800eb74:	4649      	mov	r1, r9
 800eb76:	f7f1 faf9 	bl	800016c <__adddf3>
 800eb7a:	a33d      	add	r3, pc, #244	; (adr r3, 800ec70 <__ieee754_pow+0x710>)
 800eb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb80:	9c04      	ldr	r4, [sp, #16]
 800eb82:	460d      	mov	r5, r1
 800eb84:	4620      	mov	r0, r4
 800eb86:	f7f1 fca7 	bl	80004d8 <__aeabi_dmul>
 800eb8a:	4642      	mov	r2, r8
 800eb8c:	464b      	mov	r3, r9
 800eb8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eb92:	4620      	mov	r0, r4
 800eb94:	4629      	mov	r1, r5
 800eb96:	f7f1 fae7 	bl	8000168 <__aeabi_dsub>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	4630      	mov	r0, r6
 800eba0:	4639      	mov	r1, r7
 800eba2:	f7f1 fae1 	bl	8000168 <__aeabi_dsub>
 800eba6:	a334      	add	r3, pc, #208	; (adr r3, 800ec78 <__ieee754_pow+0x718>)
 800eba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebac:	f7f1 fc94 	bl	80004d8 <__aeabi_dmul>
 800ebb0:	a333      	add	r3, pc, #204	; (adr r3, 800ec80 <__ieee754_pow+0x720>)
 800ebb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb6:	4606      	mov	r6, r0
 800ebb8:	460f      	mov	r7, r1
 800ebba:	4620      	mov	r0, r4
 800ebbc:	4629      	mov	r1, r5
 800ebbe:	f7f1 fc8b 	bl	80004d8 <__aeabi_dmul>
 800ebc2:	4602      	mov	r2, r0
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	4639      	mov	r1, r7
 800ebca:	f7f1 facf 	bl	800016c <__adddf3>
 800ebce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ebd0:	4b34      	ldr	r3, [pc, #208]	; (800eca4 <__ieee754_pow+0x744>)
 800ebd2:	4413      	add	r3, r2
 800ebd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd8:	f7f1 fac8 	bl	800016c <__adddf3>
 800ebdc:	4680      	mov	r8, r0
 800ebde:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ebe0:	4689      	mov	r9, r1
 800ebe2:	f7f1 fc0f 	bl	8000404 <__aeabi_i2d>
 800ebe6:	4604      	mov	r4, r0
 800ebe8:	460d      	mov	r5, r1
 800ebea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ebec:	4b2e      	ldr	r3, [pc, #184]	; (800eca8 <__ieee754_pow+0x748>)
 800ebee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ebf2:	4413      	add	r3, r2
 800ebf4:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ebf8:	4642      	mov	r2, r8
 800ebfa:	464b      	mov	r3, r9
 800ebfc:	f7f1 fab6 	bl	800016c <__adddf3>
 800ec00:	4632      	mov	r2, r6
 800ec02:	463b      	mov	r3, r7
 800ec04:	f7f1 fab2 	bl	800016c <__adddf3>
 800ec08:	4622      	mov	r2, r4
 800ec0a:	462b      	mov	r3, r5
 800ec0c:	f7f1 faae 	bl	800016c <__adddf3>
 800ec10:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ec14:	4622      	mov	r2, r4
 800ec16:	462b      	mov	r3, r5
 800ec18:	4650      	mov	r0, sl
 800ec1a:	468b      	mov	fp, r1
 800ec1c:	f7f1 faa4 	bl	8000168 <__aeabi_dsub>
 800ec20:	4632      	mov	r2, r6
 800ec22:	463b      	mov	r3, r7
 800ec24:	f7f1 faa0 	bl	8000168 <__aeabi_dsub>
 800ec28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ec2c:	f7f1 fa9c 	bl	8000168 <__aeabi_dsub>
 800ec30:	4602      	mov	r2, r0
 800ec32:	460b      	mov	r3, r1
 800ec34:	4640      	mov	r0, r8
 800ec36:	4649      	mov	r1, r9
 800ec38:	e608      	b.n	800e84c <__ieee754_pow+0x2ec>
 800ec3a:	bf00      	nop
 800ec3c:	f3af 8000 	nop.w
 800ec40:	4a454eef 	.word	0x4a454eef
 800ec44:	3fca7e28 	.word	0x3fca7e28
 800ec48:	93c9db65 	.word	0x93c9db65
 800ec4c:	3fcd864a 	.word	0x3fcd864a
 800ec50:	a91d4101 	.word	0xa91d4101
 800ec54:	3fd17460 	.word	0x3fd17460
 800ec58:	518f264d 	.word	0x518f264d
 800ec5c:	3fd55555 	.word	0x3fd55555
 800ec60:	db6fabff 	.word	0xdb6fabff
 800ec64:	3fdb6db6 	.word	0x3fdb6db6
 800ec68:	33333303 	.word	0x33333303
 800ec6c:	3fe33333 	.word	0x3fe33333
 800ec70:	e0000000 	.word	0xe0000000
 800ec74:	3feec709 	.word	0x3feec709
 800ec78:	dc3a03fd 	.word	0xdc3a03fd
 800ec7c:	3feec709 	.word	0x3feec709
 800ec80:	145b01f5 	.word	0x145b01f5
 800ec84:	be3e2fe0 	.word	0xbe3e2fe0
 800ec88:	7ff00000 	.word	0x7ff00000
 800ec8c:	43400000 	.word	0x43400000
 800ec90:	0003988e 	.word	0x0003988e
 800ec94:	000bb679 	.word	0x000bb679
 800ec98:	08011170 	.word	0x08011170
 800ec9c:	3ff00000 	.word	0x3ff00000
 800eca0:	40080000 	.word	0x40080000
 800eca4:	08011190 	.word	0x08011190
 800eca8:	08011180 	.word	0x08011180
 800ecac:	2601      	movs	r6, #1
 800ecae:	e667      	b.n	800e980 <__ieee754_pow+0x420>
 800ecb0:	a39d      	add	r3, pc, #628	; (adr r3, 800ef28 <__ieee754_pow+0x9c8>)
 800ecb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb6:	4640      	mov	r0, r8
 800ecb8:	4649      	mov	r1, r9
 800ecba:	f7f1 fa57 	bl	800016c <__adddf3>
 800ecbe:	4622      	mov	r2, r4
 800ecc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ecc4:	462b      	mov	r3, r5
 800ecc6:	4650      	mov	r0, sl
 800ecc8:	4639      	mov	r1, r7
 800ecca:	f7f1 fa4d 	bl	8000168 <__aeabi_dsub>
 800ecce:	4602      	mov	r2, r0
 800ecd0:	460b      	mov	r3, r1
 800ecd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ecd6:	f7f1 fe8f 	bl	80009f8 <__aeabi_dcmpgt>
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	f47f ae01 	bne.w	800e8e2 <__ieee754_pow+0x382>
 800ece0:	4aa5      	ldr	r2, [pc, #660]	; (800ef78 <__ieee754_pow+0xa18>)
 800ece2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800ece6:	4293      	cmp	r3, r2
 800ece8:	f340 8103 	ble.w	800eef2 <__ieee754_pow+0x992>
 800ecec:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ecf0:	2000      	movs	r0, #0
 800ecf2:	151b      	asrs	r3, r3, #20
 800ecf4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ecf8:	fa4a f303 	asr.w	r3, sl, r3
 800ecfc:	4433      	add	r3, r6
 800ecfe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ed02:	4f9e      	ldr	r7, [pc, #632]	; (800ef7c <__ieee754_pow+0xa1c>)
 800ed04:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ed08:	4117      	asrs	r7, r2
 800ed0a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ed0e:	ea23 0107 	bic.w	r1, r3, r7
 800ed12:	f1c2 0214 	rsb	r2, r2, #20
 800ed16:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ed1a:	460b      	mov	r3, r1
 800ed1c:	fa4a fa02 	asr.w	sl, sl, r2
 800ed20:	2e00      	cmp	r6, #0
 800ed22:	4602      	mov	r2, r0
 800ed24:	4629      	mov	r1, r5
 800ed26:	4620      	mov	r0, r4
 800ed28:	bfb8      	it	lt
 800ed2a:	f1ca 0a00 	rsblt	sl, sl, #0
 800ed2e:	f7f1 fa1b 	bl	8000168 <__aeabi_dsub>
 800ed32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed3a:	2400      	movs	r4, #0
 800ed3c:	4642      	mov	r2, r8
 800ed3e:	464b      	mov	r3, r9
 800ed40:	f7f1 fa14 	bl	800016c <__adddf3>
 800ed44:	a37a      	add	r3, pc, #488	; (adr r3, 800ef30 <__ieee754_pow+0x9d0>)
 800ed46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4a:	4620      	mov	r0, r4
 800ed4c:	460d      	mov	r5, r1
 800ed4e:	f7f1 fbc3 	bl	80004d8 <__aeabi_dmul>
 800ed52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed56:	4606      	mov	r6, r0
 800ed58:	460f      	mov	r7, r1
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	4629      	mov	r1, r5
 800ed5e:	f7f1 fa03 	bl	8000168 <__aeabi_dsub>
 800ed62:	4602      	mov	r2, r0
 800ed64:	460b      	mov	r3, r1
 800ed66:	4640      	mov	r0, r8
 800ed68:	4649      	mov	r1, r9
 800ed6a:	f7f1 f9fd 	bl	8000168 <__aeabi_dsub>
 800ed6e:	a372      	add	r3, pc, #456	; (adr r3, 800ef38 <__ieee754_pow+0x9d8>)
 800ed70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed74:	f7f1 fbb0 	bl	80004d8 <__aeabi_dmul>
 800ed78:	a371      	add	r3, pc, #452	; (adr r3, 800ef40 <__ieee754_pow+0x9e0>)
 800ed7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed7e:	4680      	mov	r8, r0
 800ed80:	4689      	mov	r9, r1
 800ed82:	4620      	mov	r0, r4
 800ed84:	4629      	mov	r1, r5
 800ed86:	f7f1 fba7 	bl	80004d8 <__aeabi_dmul>
 800ed8a:	4602      	mov	r2, r0
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	4640      	mov	r0, r8
 800ed90:	4649      	mov	r1, r9
 800ed92:	f7f1 f9eb 	bl	800016c <__adddf3>
 800ed96:	4604      	mov	r4, r0
 800ed98:	460d      	mov	r5, r1
 800ed9a:	4602      	mov	r2, r0
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	4630      	mov	r0, r6
 800eda0:	4639      	mov	r1, r7
 800eda2:	f7f1 f9e3 	bl	800016c <__adddf3>
 800eda6:	4632      	mov	r2, r6
 800eda8:	463b      	mov	r3, r7
 800edaa:	4680      	mov	r8, r0
 800edac:	4689      	mov	r9, r1
 800edae:	f7f1 f9db 	bl	8000168 <__aeabi_dsub>
 800edb2:	4602      	mov	r2, r0
 800edb4:	460b      	mov	r3, r1
 800edb6:	4620      	mov	r0, r4
 800edb8:	4629      	mov	r1, r5
 800edba:	f7f1 f9d5 	bl	8000168 <__aeabi_dsub>
 800edbe:	4642      	mov	r2, r8
 800edc0:	4606      	mov	r6, r0
 800edc2:	460f      	mov	r7, r1
 800edc4:	464b      	mov	r3, r9
 800edc6:	4640      	mov	r0, r8
 800edc8:	4649      	mov	r1, r9
 800edca:	f7f1 fb85 	bl	80004d8 <__aeabi_dmul>
 800edce:	a35e      	add	r3, pc, #376	; (adr r3, 800ef48 <__ieee754_pow+0x9e8>)
 800edd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd4:	4604      	mov	r4, r0
 800edd6:	460d      	mov	r5, r1
 800edd8:	f7f1 fb7e 	bl	80004d8 <__aeabi_dmul>
 800eddc:	a35c      	add	r3, pc, #368	; (adr r3, 800ef50 <__ieee754_pow+0x9f0>)
 800edde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede2:	f7f1 f9c1 	bl	8000168 <__aeabi_dsub>
 800ede6:	4622      	mov	r2, r4
 800ede8:	462b      	mov	r3, r5
 800edea:	f7f1 fb75 	bl	80004d8 <__aeabi_dmul>
 800edee:	a35a      	add	r3, pc, #360	; (adr r3, 800ef58 <__ieee754_pow+0x9f8>)
 800edf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf4:	f7f1 f9ba 	bl	800016c <__adddf3>
 800edf8:	4622      	mov	r2, r4
 800edfa:	462b      	mov	r3, r5
 800edfc:	f7f1 fb6c 	bl	80004d8 <__aeabi_dmul>
 800ee00:	a357      	add	r3, pc, #348	; (adr r3, 800ef60 <__ieee754_pow+0xa00>)
 800ee02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee06:	f7f1 f9af 	bl	8000168 <__aeabi_dsub>
 800ee0a:	4622      	mov	r2, r4
 800ee0c:	462b      	mov	r3, r5
 800ee0e:	f7f1 fb63 	bl	80004d8 <__aeabi_dmul>
 800ee12:	a355      	add	r3, pc, #340	; (adr r3, 800ef68 <__ieee754_pow+0xa08>)
 800ee14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee18:	f7f1 f9a8 	bl	800016c <__adddf3>
 800ee1c:	4622      	mov	r2, r4
 800ee1e:	462b      	mov	r3, r5
 800ee20:	f7f1 fb5a 	bl	80004d8 <__aeabi_dmul>
 800ee24:	4602      	mov	r2, r0
 800ee26:	460b      	mov	r3, r1
 800ee28:	4640      	mov	r0, r8
 800ee2a:	4649      	mov	r1, r9
 800ee2c:	f7f1 f99c 	bl	8000168 <__aeabi_dsub>
 800ee30:	4604      	mov	r4, r0
 800ee32:	460d      	mov	r5, r1
 800ee34:	4602      	mov	r2, r0
 800ee36:	460b      	mov	r3, r1
 800ee38:	4640      	mov	r0, r8
 800ee3a:	4649      	mov	r1, r9
 800ee3c:	f7f1 fb4c 	bl	80004d8 <__aeabi_dmul>
 800ee40:	2200      	movs	r2, #0
 800ee42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ee4a:	4620      	mov	r0, r4
 800ee4c:	4629      	mov	r1, r5
 800ee4e:	f7f1 f98b 	bl	8000168 <__aeabi_dsub>
 800ee52:	4602      	mov	r2, r0
 800ee54:	460b      	mov	r3, r1
 800ee56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee5a:	f7f1 fc67 	bl	800072c <__aeabi_ddiv>
 800ee5e:	4632      	mov	r2, r6
 800ee60:	4604      	mov	r4, r0
 800ee62:	460d      	mov	r5, r1
 800ee64:	463b      	mov	r3, r7
 800ee66:	4640      	mov	r0, r8
 800ee68:	4649      	mov	r1, r9
 800ee6a:	f7f1 fb35 	bl	80004d8 <__aeabi_dmul>
 800ee6e:	4632      	mov	r2, r6
 800ee70:	463b      	mov	r3, r7
 800ee72:	f7f1 f97b 	bl	800016c <__adddf3>
 800ee76:	4602      	mov	r2, r0
 800ee78:	460b      	mov	r3, r1
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	4629      	mov	r1, r5
 800ee7e:	f7f1 f973 	bl	8000168 <__aeabi_dsub>
 800ee82:	4642      	mov	r2, r8
 800ee84:	464b      	mov	r3, r9
 800ee86:	f7f1 f96f 	bl	8000168 <__aeabi_dsub>
 800ee8a:	4602      	mov	r2, r0
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	2000      	movs	r0, #0
 800ee90:	493b      	ldr	r1, [pc, #236]	; (800ef80 <__ieee754_pow+0xa20>)
 800ee92:	f7f1 f969 	bl	8000168 <__aeabi_dsub>
 800ee96:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ee9a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ee9e:	da2b      	bge.n	800eef8 <__ieee754_pow+0x998>
 800eea0:	4652      	mov	r2, sl
 800eea2:	f001 f8e1 	bl	8010068 <scalbn>
 800eea6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eeaa:	f7ff bbf2 	b.w	800e692 <__ieee754_pow+0x132>
 800eeae:	4b35      	ldr	r3, [pc, #212]	; (800ef84 <__ieee754_pow+0xa24>)
 800eeb0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800eeb4:	429f      	cmp	r7, r3
 800eeb6:	f77f af13 	ble.w	800ece0 <__ieee754_pow+0x780>
 800eeba:	4b33      	ldr	r3, [pc, #204]	; (800ef88 <__ieee754_pow+0xa28>)
 800eebc:	440b      	add	r3, r1
 800eebe:	4303      	orrs	r3, r0
 800eec0:	d00b      	beq.n	800eeda <__ieee754_pow+0x97a>
 800eec2:	a32b      	add	r3, pc, #172	; (adr r3, 800ef70 <__ieee754_pow+0xa10>)
 800eec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eecc:	f7f1 fb04 	bl	80004d8 <__aeabi_dmul>
 800eed0:	a327      	add	r3, pc, #156	; (adr r3, 800ef70 <__ieee754_pow+0xa10>)
 800eed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed6:	f7ff bbdc 	b.w	800e692 <__ieee754_pow+0x132>
 800eeda:	4622      	mov	r2, r4
 800eedc:	462b      	mov	r3, r5
 800eede:	f7f1 f943 	bl	8000168 <__aeabi_dsub>
 800eee2:	4642      	mov	r2, r8
 800eee4:	464b      	mov	r3, r9
 800eee6:	f7f1 fd7d 	bl	80009e4 <__aeabi_dcmpge>
 800eeea:	2800      	cmp	r0, #0
 800eeec:	f43f aef8 	beq.w	800ece0 <__ieee754_pow+0x780>
 800eef0:	e7e7      	b.n	800eec2 <__ieee754_pow+0x962>
 800eef2:	f04f 0a00 	mov.w	sl, #0
 800eef6:	e71e      	b.n	800ed36 <__ieee754_pow+0x7d6>
 800eef8:	4621      	mov	r1, r4
 800eefa:	e7d4      	b.n	800eea6 <__ieee754_pow+0x946>
 800eefc:	f04f 0b00 	mov.w	fp, #0
 800ef00:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ef80 <__ieee754_pow+0xa20>
 800ef04:	f7ff bbb0 	b.w	800e668 <__ieee754_pow+0x108>
 800ef08:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800ef0c:	f7ff bbac 	b.w	800e668 <__ieee754_pow+0x108>
 800ef10:	4638      	mov	r0, r7
 800ef12:	4641      	mov	r1, r8
 800ef14:	f7ff bbbf 	b.w	800e696 <__ieee754_pow+0x136>
 800ef18:	9200      	str	r2, [sp, #0]
 800ef1a:	f7ff bb7f 	b.w	800e61c <__ieee754_pow+0xbc>
 800ef1e:	2300      	movs	r3, #0
 800ef20:	f7ff bb69 	b.w	800e5f6 <__ieee754_pow+0x96>
 800ef24:	f3af 8000 	nop.w
 800ef28:	652b82fe 	.word	0x652b82fe
 800ef2c:	3c971547 	.word	0x3c971547
 800ef30:	00000000 	.word	0x00000000
 800ef34:	3fe62e43 	.word	0x3fe62e43
 800ef38:	fefa39ef 	.word	0xfefa39ef
 800ef3c:	3fe62e42 	.word	0x3fe62e42
 800ef40:	0ca86c39 	.word	0x0ca86c39
 800ef44:	be205c61 	.word	0xbe205c61
 800ef48:	72bea4d0 	.word	0x72bea4d0
 800ef4c:	3e663769 	.word	0x3e663769
 800ef50:	c5d26bf1 	.word	0xc5d26bf1
 800ef54:	3ebbbd41 	.word	0x3ebbbd41
 800ef58:	af25de2c 	.word	0xaf25de2c
 800ef5c:	3f11566a 	.word	0x3f11566a
 800ef60:	16bebd93 	.word	0x16bebd93
 800ef64:	3f66c16c 	.word	0x3f66c16c
 800ef68:	5555553e 	.word	0x5555553e
 800ef6c:	3fc55555 	.word	0x3fc55555
 800ef70:	c2f8f359 	.word	0xc2f8f359
 800ef74:	01a56e1f 	.word	0x01a56e1f
 800ef78:	3fe00000 	.word	0x3fe00000
 800ef7c:	000fffff 	.word	0x000fffff
 800ef80:	3ff00000 	.word	0x3ff00000
 800ef84:	4090cbff 	.word	0x4090cbff
 800ef88:	3f6f3400 	.word	0x3f6f3400

0800ef8c <__ieee754_sqrt>:
 800ef8c:	f8df c150 	ldr.w	ip, [pc, #336]	; 800f0e0 <__ieee754_sqrt+0x154>
 800ef90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef94:	ea3c 0c01 	bics.w	ip, ip, r1
 800ef98:	460b      	mov	r3, r1
 800ef9a:	4606      	mov	r6, r0
 800ef9c:	460d      	mov	r5, r1
 800ef9e:	460a      	mov	r2, r1
 800efa0:	4607      	mov	r7, r0
 800efa2:	4604      	mov	r4, r0
 800efa4:	d10e      	bne.n	800efc4 <__ieee754_sqrt+0x38>
 800efa6:	4602      	mov	r2, r0
 800efa8:	f7f1 fa96 	bl	80004d8 <__aeabi_dmul>
 800efac:	4602      	mov	r2, r0
 800efae:	460b      	mov	r3, r1
 800efb0:	4630      	mov	r0, r6
 800efb2:	4629      	mov	r1, r5
 800efb4:	f7f1 f8da 	bl	800016c <__adddf3>
 800efb8:	4606      	mov	r6, r0
 800efba:	460d      	mov	r5, r1
 800efbc:	4630      	mov	r0, r6
 800efbe:	4629      	mov	r1, r5
 800efc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efc4:	2900      	cmp	r1, #0
 800efc6:	dc0d      	bgt.n	800efe4 <__ieee754_sqrt+0x58>
 800efc8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800efcc:	ea5c 0707 	orrs.w	r7, ip, r7
 800efd0:	d0f4      	beq.n	800efbc <__ieee754_sqrt+0x30>
 800efd2:	b139      	cbz	r1, 800efe4 <__ieee754_sqrt+0x58>
 800efd4:	4602      	mov	r2, r0
 800efd6:	f7f1 f8c7 	bl	8000168 <__aeabi_dsub>
 800efda:	4602      	mov	r2, r0
 800efdc:	460b      	mov	r3, r1
 800efde:	f7f1 fba5 	bl	800072c <__aeabi_ddiv>
 800efe2:	e7e9      	b.n	800efb8 <__ieee754_sqrt+0x2c>
 800efe4:	1512      	asrs	r2, r2, #20
 800efe6:	d074      	beq.n	800f0d2 <__ieee754_sqrt+0x146>
 800efe8:	2000      	movs	r0, #0
 800efea:	07d5      	lsls	r5, r2, #31
 800efec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eff0:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800eff4:	bf5e      	ittt	pl
 800eff6:	0fe3      	lsrpl	r3, r4, #31
 800eff8:	0064      	lslpl	r4, r4, #1
 800effa:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800effe:	0fe3      	lsrs	r3, r4, #31
 800f000:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f004:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800f008:	2516      	movs	r5, #22
 800f00a:	4601      	mov	r1, r0
 800f00c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f010:	1076      	asrs	r6, r6, #1
 800f012:	0064      	lsls	r4, r4, #1
 800f014:	188f      	adds	r7, r1, r2
 800f016:	429f      	cmp	r7, r3
 800f018:	bfde      	ittt	le
 800f01a:	1bdb      	suble	r3, r3, r7
 800f01c:	18b9      	addle	r1, r7, r2
 800f01e:	1880      	addle	r0, r0, r2
 800f020:	005b      	lsls	r3, r3, #1
 800f022:	3d01      	subs	r5, #1
 800f024:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800f028:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f02c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800f030:	d1f0      	bne.n	800f014 <__ieee754_sqrt+0x88>
 800f032:	462a      	mov	r2, r5
 800f034:	f04f 0e20 	mov.w	lr, #32
 800f038:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800f03c:	428b      	cmp	r3, r1
 800f03e:	eb07 0c05 	add.w	ip, r7, r5
 800f042:	dc02      	bgt.n	800f04a <__ieee754_sqrt+0xbe>
 800f044:	d113      	bne.n	800f06e <__ieee754_sqrt+0xe2>
 800f046:	45a4      	cmp	ip, r4
 800f048:	d811      	bhi.n	800f06e <__ieee754_sqrt+0xe2>
 800f04a:	f1bc 0f00 	cmp.w	ip, #0
 800f04e:	eb0c 0507 	add.w	r5, ip, r7
 800f052:	da43      	bge.n	800f0dc <__ieee754_sqrt+0x150>
 800f054:	2d00      	cmp	r5, #0
 800f056:	db41      	blt.n	800f0dc <__ieee754_sqrt+0x150>
 800f058:	f101 0801 	add.w	r8, r1, #1
 800f05c:	1a5b      	subs	r3, r3, r1
 800f05e:	4641      	mov	r1, r8
 800f060:	45a4      	cmp	ip, r4
 800f062:	bf88      	it	hi
 800f064:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f068:	eba4 040c 	sub.w	r4, r4, ip
 800f06c:	443a      	add	r2, r7
 800f06e:	005b      	lsls	r3, r3, #1
 800f070:	f1be 0e01 	subs.w	lr, lr, #1
 800f074:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800f078:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800f07c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800f080:	d1dc      	bne.n	800f03c <__ieee754_sqrt+0xb0>
 800f082:	4323      	orrs	r3, r4
 800f084:	d006      	beq.n	800f094 <__ieee754_sqrt+0x108>
 800f086:	1c54      	adds	r4, r2, #1
 800f088:	bf0b      	itete	eq
 800f08a:	4672      	moveq	r2, lr
 800f08c:	3201      	addne	r2, #1
 800f08e:	3001      	addeq	r0, #1
 800f090:	f022 0201 	bicne.w	r2, r2, #1
 800f094:	1043      	asrs	r3, r0, #1
 800f096:	07c1      	lsls	r1, r0, #31
 800f098:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f09c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f0a0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f0a4:	bf48      	it	mi
 800f0a6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f0aa:	4610      	mov	r0, r2
 800f0ac:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800f0b0:	e782      	b.n	800efb8 <__ieee754_sqrt+0x2c>
 800f0b2:	0ae3      	lsrs	r3, r4, #11
 800f0b4:	3915      	subs	r1, #21
 800f0b6:	0564      	lsls	r4, r4, #21
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d0fa      	beq.n	800f0b2 <__ieee754_sqrt+0x126>
 800f0bc:	02de      	lsls	r6, r3, #11
 800f0be:	d50a      	bpl.n	800f0d6 <__ieee754_sqrt+0x14a>
 800f0c0:	f1c2 0020 	rsb	r0, r2, #32
 800f0c4:	fa24 f000 	lsr.w	r0, r4, r0
 800f0c8:	1e55      	subs	r5, r2, #1
 800f0ca:	4094      	lsls	r4, r2
 800f0cc:	4303      	orrs	r3, r0
 800f0ce:	1b4a      	subs	r2, r1, r5
 800f0d0:	e78a      	b.n	800efe8 <__ieee754_sqrt+0x5c>
 800f0d2:	4611      	mov	r1, r2
 800f0d4:	e7f0      	b.n	800f0b8 <__ieee754_sqrt+0x12c>
 800f0d6:	005b      	lsls	r3, r3, #1
 800f0d8:	3201      	adds	r2, #1
 800f0da:	e7ef      	b.n	800f0bc <__ieee754_sqrt+0x130>
 800f0dc:	4688      	mov	r8, r1
 800f0de:	e7bd      	b.n	800f05c <__ieee754_sqrt+0xd0>
 800f0e0:	7ff00000 	.word	0x7ff00000

0800f0e4 <__ieee754_asinf>:
 800f0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0e8:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800f0ec:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800f0f0:	4604      	mov	r4, r0
 800f0f2:	4605      	mov	r5, r0
 800f0f4:	d10c      	bne.n	800f110 <__ieee754_asinf+0x2c>
 800f0f6:	498d      	ldr	r1, [pc, #564]	; (800f32c <__ieee754_asinf+0x248>)
 800f0f8:	f7f1 fe24 	bl	8000d44 <__aeabi_fmul>
 800f0fc:	498c      	ldr	r1, [pc, #560]	; (800f330 <__ieee754_asinf+0x24c>)
 800f0fe:	4605      	mov	r5, r0
 800f100:	4620      	mov	r0, r4
 800f102:	f7f1 fe1f 	bl	8000d44 <__aeabi_fmul>
 800f106:	4601      	mov	r1, r0
 800f108:	4628      	mov	r0, r5
 800f10a:	f7f1 fd13 	bl	8000b34 <__addsf3>
 800f10e:	e006      	b.n	800f11e <__ieee754_asinf+0x3a>
 800f110:	dd07      	ble.n	800f122 <__ieee754_asinf+0x3e>
 800f112:	4601      	mov	r1, r0
 800f114:	f7f1 fd0c 	bl	8000b30 <__aeabi_fsub>
 800f118:	4601      	mov	r1, r0
 800f11a:	f7f1 fec7 	bl	8000eac <__aeabi_fdiv>
 800f11e:	4604      	mov	r4, r0
 800f120:	e00e      	b.n	800f140 <__ieee754_asinf+0x5c>
 800f122:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800f126:	da58      	bge.n	800f1da <__ieee754_asinf+0xf6>
 800f128:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800f12c:	da0b      	bge.n	800f146 <__ieee754_asinf+0x62>
 800f12e:	4981      	ldr	r1, [pc, #516]	; (800f334 <__ieee754_asinf+0x250>)
 800f130:	f7f1 fd00 	bl	8000b34 <__addsf3>
 800f134:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f138:	f7f1 ffc0 	bl	80010bc <__aeabi_fcmpgt>
 800f13c:	2800      	cmp	r0, #0
 800f13e:	d04c      	beq.n	800f1da <__ieee754_asinf+0xf6>
 800f140:	4620      	mov	r0, r4
 800f142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f146:	4601      	mov	r1, r0
 800f148:	f7f1 fdfc 	bl	8000d44 <__aeabi_fmul>
 800f14c:	4605      	mov	r5, r0
 800f14e:	497a      	ldr	r1, [pc, #488]	; (800f338 <__ieee754_asinf+0x254>)
 800f150:	f7f1 fdf8 	bl	8000d44 <__aeabi_fmul>
 800f154:	4979      	ldr	r1, [pc, #484]	; (800f33c <__ieee754_asinf+0x258>)
 800f156:	f7f1 fced 	bl	8000b34 <__addsf3>
 800f15a:	4629      	mov	r1, r5
 800f15c:	f7f1 fdf2 	bl	8000d44 <__aeabi_fmul>
 800f160:	4977      	ldr	r1, [pc, #476]	; (800f340 <__ieee754_asinf+0x25c>)
 800f162:	f7f1 fce5 	bl	8000b30 <__aeabi_fsub>
 800f166:	4629      	mov	r1, r5
 800f168:	f7f1 fdec 	bl	8000d44 <__aeabi_fmul>
 800f16c:	4975      	ldr	r1, [pc, #468]	; (800f344 <__ieee754_asinf+0x260>)
 800f16e:	f7f1 fce1 	bl	8000b34 <__addsf3>
 800f172:	4629      	mov	r1, r5
 800f174:	f7f1 fde6 	bl	8000d44 <__aeabi_fmul>
 800f178:	4973      	ldr	r1, [pc, #460]	; (800f348 <__ieee754_asinf+0x264>)
 800f17a:	f7f1 fcd9 	bl	8000b30 <__aeabi_fsub>
 800f17e:	4629      	mov	r1, r5
 800f180:	f7f1 fde0 	bl	8000d44 <__aeabi_fmul>
 800f184:	4971      	ldr	r1, [pc, #452]	; (800f34c <__ieee754_asinf+0x268>)
 800f186:	f7f1 fcd5 	bl	8000b34 <__addsf3>
 800f18a:	4629      	mov	r1, r5
 800f18c:	f7f1 fdda 	bl	8000d44 <__aeabi_fmul>
 800f190:	496f      	ldr	r1, [pc, #444]	; (800f350 <__ieee754_asinf+0x26c>)
 800f192:	4606      	mov	r6, r0
 800f194:	4628      	mov	r0, r5
 800f196:	f7f1 fdd5 	bl	8000d44 <__aeabi_fmul>
 800f19a:	496e      	ldr	r1, [pc, #440]	; (800f354 <__ieee754_asinf+0x270>)
 800f19c:	f7f1 fcc8 	bl	8000b30 <__aeabi_fsub>
 800f1a0:	4629      	mov	r1, r5
 800f1a2:	f7f1 fdcf 	bl	8000d44 <__aeabi_fmul>
 800f1a6:	496c      	ldr	r1, [pc, #432]	; (800f358 <__ieee754_asinf+0x274>)
 800f1a8:	f7f1 fcc4 	bl	8000b34 <__addsf3>
 800f1ac:	4629      	mov	r1, r5
 800f1ae:	f7f1 fdc9 	bl	8000d44 <__aeabi_fmul>
 800f1b2:	496a      	ldr	r1, [pc, #424]	; (800f35c <__ieee754_asinf+0x278>)
 800f1b4:	f7f1 fcbc 	bl	8000b30 <__aeabi_fsub>
 800f1b8:	4629      	mov	r1, r5
 800f1ba:	f7f1 fdc3 	bl	8000d44 <__aeabi_fmul>
 800f1be:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f1c2:	f7f1 fcb7 	bl	8000b34 <__addsf3>
 800f1c6:	4601      	mov	r1, r0
 800f1c8:	4630      	mov	r0, r6
 800f1ca:	f7f1 fe6f 	bl	8000eac <__aeabi_fdiv>
 800f1ce:	4621      	mov	r1, r4
 800f1d0:	f7f1 fdb8 	bl	8000d44 <__aeabi_fmul>
 800f1d4:	4601      	mov	r1, r0
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	e797      	b.n	800f10a <__ieee754_asinf+0x26>
 800f1da:	4620      	mov	r0, r4
 800f1dc:	f7ff f862 	bl	800e2a4 <fabsf>
 800f1e0:	4601      	mov	r1, r0
 800f1e2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f1e6:	f7f1 fca3 	bl	8000b30 <__aeabi_fsub>
 800f1ea:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f1ee:	f7f1 fda9 	bl	8000d44 <__aeabi_fmul>
 800f1f2:	4606      	mov	r6, r0
 800f1f4:	4950      	ldr	r1, [pc, #320]	; (800f338 <__ieee754_asinf+0x254>)
 800f1f6:	f7f1 fda5 	bl	8000d44 <__aeabi_fmul>
 800f1fa:	4950      	ldr	r1, [pc, #320]	; (800f33c <__ieee754_asinf+0x258>)
 800f1fc:	f7f1 fc9a 	bl	8000b34 <__addsf3>
 800f200:	4631      	mov	r1, r6
 800f202:	f7f1 fd9f 	bl	8000d44 <__aeabi_fmul>
 800f206:	494e      	ldr	r1, [pc, #312]	; (800f340 <__ieee754_asinf+0x25c>)
 800f208:	f7f1 fc92 	bl	8000b30 <__aeabi_fsub>
 800f20c:	4631      	mov	r1, r6
 800f20e:	f7f1 fd99 	bl	8000d44 <__aeabi_fmul>
 800f212:	494c      	ldr	r1, [pc, #304]	; (800f344 <__ieee754_asinf+0x260>)
 800f214:	f7f1 fc8e 	bl	8000b34 <__addsf3>
 800f218:	4631      	mov	r1, r6
 800f21a:	f7f1 fd93 	bl	8000d44 <__aeabi_fmul>
 800f21e:	494a      	ldr	r1, [pc, #296]	; (800f348 <__ieee754_asinf+0x264>)
 800f220:	f7f1 fc86 	bl	8000b30 <__aeabi_fsub>
 800f224:	4631      	mov	r1, r6
 800f226:	f7f1 fd8d 	bl	8000d44 <__aeabi_fmul>
 800f22a:	4948      	ldr	r1, [pc, #288]	; (800f34c <__ieee754_asinf+0x268>)
 800f22c:	f7f1 fc82 	bl	8000b34 <__addsf3>
 800f230:	4631      	mov	r1, r6
 800f232:	f7f1 fd87 	bl	8000d44 <__aeabi_fmul>
 800f236:	4946      	ldr	r1, [pc, #280]	; (800f350 <__ieee754_asinf+0x26c>)
 800f238:	4681      	mov	r9, r0
 800f23a:	4630      	mov	r0, r6
 800f23c:	f7f1 fd82 	bl	8000d44 <__aeabi_fmul>
 800f240:	4944      	ldr	r1, [pc, #272]	; (800f354 <__ieee754_asinf+0x270>)
 800f242:	f7f1 fc75 	bl	8000b30 <__aeabi_fsub>
 800f246:	4631      	mov	r1, r6
 800f248:	f7f1 fd7c 	bl	8000d44 <__aeabi_fmul>
 800f24c:	4942      	ldr	r1, [pc, #264]	; (800f358 <__ieee754_asinf+0x274>)
 800f24e:	f7f1 fc71 	bl	8000b34 <__addsf3>
 800f252:	4631      	mov	r1, r6
 800f254:	f7f1 fd76 	bl	8000d44 <__aeabi_fmul>
 800f258:	4940      	ldr	r1, [pc, #256]	; (800f35c <__ieee754_asinf+0x278>)
 800f25a:	f7f1 fc69 	bl	8000b30 <__aeabi_fsub>
 800f25e:	4631      	mov	r1, r6
 800f260:	f7f1 fd70 	bl	8000d44 <__aeabi_fmul>
 800f264:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f268:	f7f1 fc64 	bl	8000b34 <__addsf3>
 800f26c:	4682      	mov	sl, r0
 800f26e:	4630      	mov	r0, r6
 800f270:	f000 fa60 	bl	800f734 <__ieee754_sqrtf>
 800f274:	4b3a      	ldr	r3, [pc, #232]	; (800f360 <__ieee754_asinf+0x27c>)
 800f276:	4607      	mov	r7, r0
 800f278:	4598      	cmp	r8, r3
 800f27a:	dd1a      	ble.n	800f2b2 <__ieee754_asinf+0x1ce>
 800f27c:	4651      	mov	r1, sl
 800f27e:	4648      	mov	r0, r9
 800f280:	f7f1 fe14 	bl	8000eac <__aeabi_fdiv>
 800f284:	4639      	mov	r1, r7
 800f286:	f7f1 fd5d 	bl	8000d44 <__aeabi_fmul>
 800f28a:	4639      	mov	r1, r7
 800f28c:	f7f1 fc52 	bl	8000b34 <__addsf3>
 800f290:	4601      	mov	r1, r0
 800f292:	f7f1 fc4f 	bl	8000b34 <__addsf3>
 800f296:	4933      	ldr	r1, [pc, #204]	; (800f364 <__ieee754_asinf+0x280>)
 800f298:	f7f1 fc4c 	bl	8000b34 <__addsf3>
 800f29c:	4601      	mov	r1, r0
 800f29e:	4823      	ldr	r0, [pc, #140]	; (800f32c <__ieee754_asinf+0x248>)
 800f2a0:	f7f1 fc46 	bl	8000b30 <__aeabi_fsub>
 800f2a4:	2d00      	cmp	r5, #0
 800f2a6:	4604      	mov	r4, r0
 800f2a8:	f73f af4a 	bgt.w	800f140 <__ieee754_asinf+0x5c>
 800f2ac:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f2b0:	e735      	b.n	800f11e <__ieee754_asinf+0x3a>
 800f2b2:	4601      	mov	r1, r0
 800f2b4:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800f2b8:	f7f1 fc3c 	bl	8000b34 <__addsf3>
 800f2bc:	4651      	mov	r1, sl
 800f2be:	4604      	mov	r4, r0
 800f2c0:	4648      	mov	r0, r9
 800f2c2:	f7f1 fdf3 	bl	8000eac <__aeabi_fdiv>
 800f2c6:	4601      	mov	r1, r0
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	f7f1 fd3b 	bl	8000d44 <__aeabi_fmul>
 800f2ce:	f028 080f 	bic.w	r8, r8, #15
 800f2d2:	4681      	mov	r9, r0
 800f2d4:	4641      	mov	r1, r8
 800f2d6:	4640      	mov	r0, r8
 800f2d8:	f7f1 fd34 	bl	8000d44 <__aeabi_fmul>
 800f2dc:	4601      	mov	r1, r0
 800f2de:	4630      	mov	r0, r6
 800f2e0:	f7f1 fc26 	bl	8000b30 <__aeabi_fsub>
 800f2e4:	4641      	mov	r1, r8
 800f2e6:	4604      	mov	r4, r0
 800f2e8:	4638      	mov	r0, r7
 800f2ea:	f7f1 fc23 	bl	8000b34 <__addsf3>
 800f2ee:	4601      	mov	r1, r0
 800f2f0:	4620      	mov	r0, r4
 800f2f2:	f7f1 fddb 	bl	8000eac <__aeabi_fdiv>
 800f2f6:	4601      	mov	r1, r0
 800f2f8:	f7f1 fc1c 	bl	8000b34 <__addsf3>
 800f2fc:	4601      	mov	r1, r0
 800f2fe:	480c      	ldr	r0, [pc, #48]	; (800f330 <__ieee754_asinf+0x24c>)
 800f300:	f7f1 fc16 	bl	8000b30 <__aeabi_fsub>
 800f304:	4601      	mov	r1, r0
 800f306:	4648      	mov	r0, r9
 800f308:	f7f1 fc12 	bl	8000b30 <__aeabi_fsub>
 800f30c:	4641      	mov	r1, r8
 800f30e:	4604      	mov	r4, r0
 800f310:	4640      	mov	r0, r8
 800f312:	f7f1 fc0f 	bl	8000b34 <__addsf3>
 800f316:	4601      	mov	r1, r0
 800f318:	4813      	ldr	r0, [pc, #76]	; (800f368 <__ieee754_asinf+0x284>)
 800f31a:	f7f1 fc09 	bl	8000b30 <__aeabi_fsub>
 800f31e:	4601      	mov	r1, r0
 800f320:	4620      	mov	r0, r4
 800f322:	f7f1 fc05 	bl	8000b30 <__aeabi_fsub>
 800f326:	4601      	mov	r1, r0
 800f328:	480f      	ldr	r0, [pc, #60]	; (800f368 <__ieee754_asinf+0x284>)
 800f32a:	e7b9      	b.n	800f2a0 <__ieee754_asinf+0x1bc>
 800f32c:	3fc90fdb 	.word	0x3fc90fdb
 800f330:	b33bbd2e 	.word	0xb33bbd2e
 800f334:	7149f2ca 	.word	0x7149f2ca
 800f338:	3811ef08 	.word	0x3811ef08
 800f33c:	3a4f7f04 	.word	0x3a4f7f04
 800f340:	3d241146 	.word	0x3d241146
 800f344:	3e4e0aa8 	.word	0x3e4e0aa8
 800f348:	3ea6b090 	.word	0x3ea6b090
 800f34c:	3e2aaaab 	.word	0x3e2aaaab
 800f350:	3d9dc62e 	.word	0x3d9dc62e
 800f354:	3f303361 	.word	0x3f303361
 800f358:	4001572d 	.word	0x4001572d
 800f35c:	4019d139 	.word	0x4019d139
 800f360:	3f799999 	.word	0x3f799999
 800f364:	333bbd2e 	.word	0x333bbd2e
 800f368:	3f490fdb 	.word	0x3f490fdb

0800f36c <__ieee754_atan2f>:
 800f36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f36e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f372:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800f376:	4603      	mov	r3, r0
 800f378:	dc05      	bgt.n	800f386 <__ieee754_atan2f+0x1a>
 800f37a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800f37e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f382:	4607      	mov	r7, r0
 800f384:	dd04      	ble.n	800f390 <__ieee754_atan2f+0x24>
 800f386:	4618      	mov	r0, r3
 800f388:	f7f1 fbd4 	bl	8000b34 <__addsf3>
 800f38c:	4603      	mov	r3, r0
 800f38e:	e011      	b.n	800f3b4 <__ieee754_atan2f+0x48>
 800f390:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800f394:	d103      	bne.n	800f39e <__ieee754_atan2f+0x32>
 800f396:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f39a:	f7fe be43 	b.w	800e024 <atanf>
 800f39e:	178c      	asrs	r4, r1, #30
 800f3a0:	f004 0402 	and.w	r4, r4, #2
 800f3a4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f3a8:	b932      	cbnz	r2, 800f3b8 <__ieee754_atan2f+0x4c>
 800f3aa:	2c02      	cmp	r4, #2
 800f3ac:	d04c      	beq.n	800f448 <__ieee754_atan2f+0xdc>
 800f3ae:	2c03      	cmp	r4, #3
 800f3b0:	d100      	bne.n	800f3b4 <__ieee754_atan2f+0x48>
 800f3b2:	4b29      	ldr	r3, [pc, #164]	; (800f458 <__ieee754_atan2f+0xec>)
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3b8:	b91e      	cbnz	r6, 800f3c2 <__ieee754_atan2f+0x56>
 800f3ba:	2f00      	cmp	r7, #0
 800f3bc:	da4a      	bge.n	800f454 <__ieee754_atan2f+0xe8>
 800f3be:	4b27      	ldr	r3, [pc, #156]	; (800f45c <__ieee754_atan2f+0xf0>)
 800f3c0:	e7f8      	b.n	800f3b4 <__ieee754_atan2f+0x48>
 800f3c2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800f3c6:	d10e      	bne.n	800f3e6 <__ieee754_atan2f+0x7a>
 800f3c8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f3cc:	f104 34ff 	add.w	r4, r4, #4294967295
 800f3d0:	d105      	bne.n	800f3de <__ieee754_atan2f+0x72>
 800f3d2:	2c02      	cmp	r4, #2
 800f3d4:	d83a      	bhi.n	800f44c <__ieee754_atan2f+0xe0>
 800f3d6:	4b22      	ldr	r3, [pc, #136]	; (800f460 <__ieee754_atan2f+0xf4>)
 800f3d8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f3dc:	e7ea      	b.n	800f3b4 <__ieee754_atan2f+0x48>
 800f3de:	2c02      	cmp	r4, #2
 800f3e0:	d836      	bhi.n	800f450 <__ieee754_atan2f+0xe4>
 800f3e2:	4b20      	ldr	r3, [pc, #128]	; (800f464 <__ieee754_atan2f+0xf8>)
 800f3e4:	e7f8      	b.n	800f3d8 <__ieee754_atan2f+0x6c>
 800f3e6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f3ea:	d0e6      	beq.n	800f3ba <__ieee754_atan2f+0x4e>
 800f3ec:	1b92      	subs	r2, r2, r6
 800f3ee:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800f3f2:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800f3f6:	da17      	bge.n	800f428 <__ieee754_atan2f+0xbc>
 800f3f8:	2900      	cmp	r1, #0
 800f3fa:	da01      	bge.n	800f400 <__ieee754_atan2f+0x94>
 800f3fc:	303c      	adds	r0, #60	; 0x3c
 800f3fe:	db15      	blt.n	800f42c <__ieee754_atan2f+0xc0>
 800f400:	4618      	mov	r0, r3
 800f402:	f7f1 fd53 	bl	8000eac <__aeabi_fdiv>
 800f406:	f7fe ff4d 	bl	800e2a4 <fabsf>
 800f40a:	f7fe fe0b 	bl	800e024 <atanf>
 800f40e:	4603      	mov	r3, r0
 800f410:	2c01      	cmp	r4, #1
 800f412:	d00d      	beq.n	800f430 <__ieee754_atan2f+0xc4>
 800f414:	2c02      	cmp	r4, #2
 800f416:	d00e      	beq.n	800f436 <__ieee754_atan2f+0xca>
 800f418:	2c00      	cmp	r4, #0
 800f41a:	d0cb      	beq.n	800f3b4 <__ieee754_atan2f+0x48>
 800f41c:	4912      	ldr	r1, [pc, #72]	; (800f468 <__ieee754_atan2f+0xfc>)
 800f41e:	4618      	mov	r0, r3
 800f420:	f7f1 fb88 	bl	8000b34 <__addsf3>
 800f424:	4911      	ldr	r1, [pc, #68]	; (800f46c <__ieee754_atan2f+0x100>)
 800f426:	e00c      	b.n	800f442 <__ieee754_atan2f+0xd6>
 800f428:	4b11      	ldr	r3, [pc, #68]	; (800f470 <__ieee754_atan2f+0x104>)
 800f42a:	e7f1      	b.n	800f410 <__ieee754_atan2f+0xa4>
 800f42c:	2300      	movs	r3, #0
 800f42e:	e7ef      	b.n	800f410 <__ieee754_atan2f+0xa4>
 800f430:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f434:	e7be      	b.n	800f3b4 <__ieee754_atan2f+0x48>
 800f436:	490c      	ldr	r1, [pc, #48]	; (800f468 <__ieee754_atan2f+0xfc>)
 800f438:	4618      	mov	r0, r3
 800f43a:	f7f1 fb7b 	bl	8000b34 <__addsf3>
 800f43e:	4601      	mov	r1, r0
 800f440:	480a      	ldr	r0, [pc, #40]	; (800f46c <__ieee754_atan2f+0x100>)
 800f442:	f7f1 fb75 	bl	8000b30 <__aeabi_fsub>
 800f446:	e7a1      	b.n	800f38c <__ieee754_atan2f+0x20>
 800f448:	4b08      	ldr	r3, [pc, #32]	; (800f46c <__ieee754_atan2f+0x100>)
 800f44a:	e7b3      	b.n	800f3b4 <__ieee754_atan2f+0x48>
 800f44c:	4b09      	ldr	r3, [pc, #36]	; (800f474 <__ieee754_atan2f+0x108>)
 800f44e:	e7b1      	b.n	800f3b4 <__ieee754_atan2f+0x48>
 800f450:	2300      	movs	r3, #0
 800f452:	e7af      	b.n	800f3b4 <__ieee754_atan2f+0x48>
 800f454:	4b06      	ldr	r3, [pc, #24]	; (800f470 <__ieee754_atan2f+0x104>)
 800f456:	e7ad      	b.n	800f3b4 <__ieee754_atan2f+0x48>
 800f458:	c0490fdb 	.word	0xc0490fdb
 800f45c:	bfc90fdb 	.word	0xbfc90fdb
 800f460:	080111a0 	.word	0x080111a0
 800f464:	080111ac 	.word	0x080111ac
 800f468:	33bbbd2e 	.word	0x33bbbd2e
 800f46c:	40490fdb 	.word	0x40490fdb
 800f470:	3fc90fdb 	.word	0x3fc90fdb
 800f474:	3f490fdb 	.word	0x3f490fdb

0800f478 <__ieee754_rem_pio2f>:
 800f478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f47c:	4aa0      	ldr	r2, [pc, #640]	; (800f700 <__ieee754_rem_pio2f+0x288>)
 800f47e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800f482:	4296      	cmp	r6, r2
 800f484:	460c      	mov	r4, r1
 800f486:	4682      	mov	sl, r0
 800f488:	b087      	sub	sp, #28
 800f48a:	dc04      	bgt.n	800f496 <__ieee754_rem_pio2f+0x1e>
 800f48c:	2300      	movs	r3, #0
 800f48e:	6008      	str	r0, [r1, #0]
 800f490:	604b      	str	r3, [r1, #4]
 800f492:	2500      	movs	r5, #0
 800f494:	e01a      	b.n	800f4cc <__ieee754_rem_pio2f+0x54>
 800f496:	4a9b      	ldr	r2, [pc, #620]	; (800f704 <__ieee754_rem_pio2f+0x28c>)
 800f498:	4296      	cmp	r6, r2
 800f49a:	dc4b      	bgt.n	800f534 <__ieee754_rem_pio2f+0xbc>
 800f49c:	2800      	cmp	r0, #0
 800f49e:	499a      	ldr	r1, [pc, #616]	; (800f708 <__ieee754_rem_pio2f+0x290>)
 800f4a0:	4f9a      	ldr	r7, [pc, #616]	; (800f70c <__ieee754_rem_pio2f+0x294>)
 800f4a2:	f026 060f 	bic.w	r6, r6, #15
 800f4a6:	dd23      	ble.n	800f4f0 <__ieee754_rem_pio2f+0x78>
 800f4a8:	f7f1 fb42 	bl	8000b30 <__aeabi_fsub>
 800f4ac:	42be      	cmp	r6, r7
 800f4ae:	4605      	mov	r5, r0
 800f4b0:	d010      	beq.n	800f4d4 <__ieee754_rem_pio2f+0x5c>
 800f4b2:	4997      	ldr	r1, [pc, #604]	; (800f710 <__ieee754_rem_pio2f+0x298>)
 800f4b4:	f7f1 fb3c 	bl	8000b30 <__aeabi_fsub>
 800f4b8:	4601      	mov	r1, r0
 800f4ba:	6020      	str	r0, [r4, #0]
 800f4bc:	4628      	mov	r0, r5
 800f4be:	f7f1 fb37 	bl	8000b30 <__aeabi_fsub>
 800f4c2:	4993      	ldr	r1, [pc, #588]	; (800f710 <__ieee754_rem_pio2f+0x298>)
 800f4c4:	f7f1 fb34 	bl	8000b30 <__aeabi_fsub>
 800f4c8:	2501      	movs	r5, #1
 800f4ca:	6060      	str	r0, [r4, #4]
 800f4cc:	4628      	mov	r0, r5
 800f4ce:	b007      	add	sp, #28
 800f4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4d4:	498f      	ldr	r1, [pc, #572]	; (800f714 <__ieee754_rem_pio2f+0x29c>)
 800f4d6:	f7f1 fb2b 	bl	8000b30 <__aeabi_fsub>
 800f4da:	498f      	ldr	r1, [pc, #572]	; (800f718 <__ieee754_rem_pio2f+0x2a0>)
 800f4dc:	4605      	mov	r5, r0
 800f4de:	f7f1 fb27 	bl	8000b30 <__aeabi_fsub>
 800f4e2:	4601      	mov	r1, r0
 800f4e4:	6020      	str	r0, [r4, #0]
 800f4e6:	4628      	mov	r0, r5
 800f4e8:	f7f1 fb22 	bl	8000b30 <__aeabi_fsub>
 800f4ec:	498a      	ldr	r1, [pc, #552]	; (800f718 <__ieee754_rem_pio2f+0x2a0>)
 800f4ee:	e7e9      	b.n	800f4c4 <__ieee754_rem_pio2f+0x4c>
 800f4f0:	f7f1 fb20 	bl	8000b34 <__addsf3>
 800f4f4:	42be      	cmp	r6, r7
 800f4f6:	4605      	mov	r5, r0
 800f4f8:	d00e      	beq.n	800f518 <__ieee754_rem_pio2f+0xa0>
 800f4fa:	4985      	ldr	r1, [pc, #532]	; (800f710 <__ieee754_rem_pio2f+0x298>)
 800f4fc:	f7f1 fb1a 	bl	8000b34 <__addsf3>
 800f500:	4601      	mov	r1, r0
 800f502:	6020      	str	r0, [r4, #0]
 800f504:	4628      	mov	r0, r5
 800f506:	f7f1 fb13 	bl	8000b30 <__aeabi_fsub>
 800f50a:	4981      	ldr	r1, [pc, #516]	; (800f710 <__ieee754_rem_pio2f+0x298>)
 800f50c:	f7f1 fb12 	bl	8000b34 <__addsf3>
 800f510:	f04f 35ff 	mov.w	r5, #4294967295
 800f514:	6060      	str	r0, [r4, #4]
 800f516:	e7d9      	b.n	800f4cc <__ieee754_rem_pio2f+0x54>
 800f518:	497e      	ldr	r1, [pc, #504]	; (800f714 <__ieee754_rem_pio2f+0x29c>)
 800f51a:	f7f1 fb0b 	bl	8000b34 <__addsf3>
 800f51e:	497e      	ldr	r1, [pc, #504]	; (800f718 <__ieee754_rem_pio2f+0x2a0>)
 800f520:	4605      	mov	r5, r0
 800f522:	f7f1 fb07 	bl	8000b34 <__addsf3>
 800f526:	4601      	mov	r1, r0
 800f528:	6020      	str	r0, [r4, #0]
 800f52a:	4628      	mov	r0, r5
 800f52c:	f7f1 fb00 	bl	8000b30 <__aeabi_fsub>
 800f530:	4979      	ldr	r1, [pc, #484]	; (800f718 <__ieee754_rem_pio2f+0x2a0>)
 800f532:	e7eb      	b.n	800f50c <__ieee754_rem_pio2f+0x94>
 800f534:	4a79      	ldr	r2, [pc, #484]	; (800f71c <__ieee754_rem_pio2f+0x2a4>)
 800f536:	4296      	cmp	r6, r2
 800f538:	f300 8091 	bgt.w	800f65e <__ieee754_rem_pio2f+0x1e6>
 800f53c:	f7fe feb2 	bl	800e2a4 <fabsf>
 800f540:	4977      	ldr	r1, [pc, #476]	; (800f720 <__ieee754_rem_pio2f+0x2a8>)
 800f542:	4607      	mov	r7, r0
 800f544:	f7f1 fbfe 	bl	8000d44 <__aeabi_fmul>
 800f548:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f54c:	f7f1 faf2 	bl	8000b34 <__addsf3>
 800f550:	f7f1 fdd4 	bl	80010fc <__aeabi_f2iz>
 800f554:	4605      	mov	r5, r0
 800f556:	f7f1 fba1 	bl	8000c9c <__aeabi_i2f>
 800f55a:	496b      	ldr	r1, [pc, #428]	; (800f708 <__ieee754_rem_pio2f+0x290>)
 800f55c:	4681      	mov	r9, r0
 800f55e:	f7f1 fbf1 	bl	8000d44 <__aeabi_fmul>
 800f562:	4601      	mov	r1, r0
 800f564:	4638      	mov	r0, r7
 800f566:	f7f1 fae3 	bl	8000b30 <__aeabi_fsub>
 800f56a:	4969      	ldr	r1, [pc, #420]	; (800f710 <__ieee754_rem_pio2f+0x298>)
 800f56c:	4680      	mov	r8, r0
 800f56e:	4648      	mov	r0, r9
 800f570:	f7f1 fbe8 	bl	8000d44 <__aeabi_fmul>
 800f574:	2d1f      	cmp	r5, #31
 800f576:	4607      	mov	r7, r0
 800f578:	dc0c      	bgt.n	800f594 <__ieee754_rem_pio2f+0x11c>
 800f57a:	4a6a      	ldr	r2, [pc, #424]	; (800f724 <__ieee754_rem_pio2f+0x2ac>)
 800f57c:	1e69      	subs	r1, r5, #1
 800f57e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f582:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800f586:	4293      	cmp	r3, r2
 800f588:	d004      	beq.n	800f594 <__ieee754_rem_pio2f+0x11c>
 800f58a:	4639      	mov	r1, r7
 800f58c:	4640      	mov	r0, r8
 800f58e:	f7f1 facf 	bl	8000b30 <__aeabi_fsub>
 800f592:	e00b      	b.n	800f5ac <__ieee754_rem_pio2f+0x134>
 800f594:	4639      	mov	r1, r7
 800f596:	4640      	mov	r0, r8
 800f598:	f7f1 faca 	bl	8000b30 <__aeabi_fsub>
 800f59c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f5a0:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800f5a4:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800f5a8:	2e08      	cmp	r6, #8
 800f5aa:	dc01      	bgt.n	800f5b0 <__ieee754_rem_pio2f+0x138>
 800f5ac:	6020      	str	r0, [r4, #0]
 800f5ae:	e026      	b.n	800f5fe <__ieee754_rem_pio2f+0x186>
 800f5b0:	4958      	ldr	r1, [pc, #352]	; (800f714 <__ieee754_rem_pio2f+0x29c>)
 800f5b2:	4648      	mov	r0, r9
 800f5b4:	f7f1 fbc6 	bl	8000d44 <__aeabi_fmul>
 800f5b8:	4607      	mov	r7, r0
 800f5ba:	4601      	mov	r1, r0
 800f5bc:	4640      	mov	r0, r8
 800f5be:	f7f1 fab7 	bl	8000b30 <__aeabi_fsub>
 800f5c2:	4601      	mov	r1, r0
 800f5c4:	4606      	mov	r6, r0
 800f5c6:	4640      	mov	r0, r8
 800f5c8:	f7f1 fab2 	bl	8000b30 <__aeabi_fsub>
 800f5cc:	4639      	mov	r1, r7
 800f5ce:	f7f1 faaf 	bl	8000b30 <__aeabi_fsub>
 800f5d2:	4607      	mov	r7, r0
 800f5d4:	4950      	ldr	r1, [pc, #320]	; (800f718 <__ieee754_rem_pio2f+0x2a0>)
 800f5d6:	4648      	mov	r0, r9
 800f5d8:	f7f1 fbb4 	bl	8000d44 <__aeabi_fmul>
 800f5dc:	4639      	mov	r1, r7
 800f5de:	f7f1 faa7 	bl	8000b30 <__aeabi_fsub>
 800f5e2:	4601      	mov	r1, r0
 800f5e4:	4607      	mov	r7, r0
 800f5e6:	4630      	mov	r0, r6
 800f5e8:	f7f1 faa2 	bl	8000b30 <__aeabi_fsub>
 800f5ec:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f5f0:	ebab 0b03 	sub.w	fp, fp, r3
 800f5f4:	f1bb 0f19 	cmp.w	fp, #25
 800f5f8:	dc16      	bgt.n	800f628 <__ieee754_rem_pio2f+0x1b0>
 800f5fa:	46b0      	mov	r8, r6
 800f5fc:	6020      	str	r0, [r4, #0]
 800f5fe:	6826      	ldr	r6, [r4, #0]
 800f600:	4640      	mov	r0, r8
 800f602:	4631      	mov	r1, r6
 800f604:	f7f1 fa94 	bl	8000b30 <__aeabi_fsub>
 800f608:	4639      	mov	r1, r7
 800f60a:	f7f1 fa91 	bl	8000b30 <__aeabi_fsub>
 800f60e:	f1ba 0f00 	cmp.w	sl, #0
 800f612:	6060      	str	r0, [r4, #4]
 800f614:	f6bf af5a 	bge.w	800f4cc <__ieee754_rem_pio2f+0x54>
 800f618:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800f61c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f620:	6026      	str	r6, [r4, #0]
 800f622:	6060      	str	r0, [r4, #4]
 800f624:	426d      	negs	r5, r5
 800f626:	e751      	b.n	800f4cc <__ieee754_rem_pio2f+0x54>
 800f628:	493f      	ldr	r1, [pc, #252]	; (800f728 <__ieee754_rem_pio2f+0x2b0>)
 800f62a:	4648      	mov	r0, r9
 800f62c:	f7f1 fb8a 	bl	8000d44 <__aeabi_fmul>
 800f630:	4607      	mov	r7, r0
 800f632:	4601      	mov	r1, r0
 800f634:	4630      	mov	r0, r6
 800f636:	f7f1 fa7b 	bl	8000b30 <__aeabi_fsub>
 800f63a:	4601      	mov	r1, r0
 800f63c:	4680      	mov	r8, r0
 800f63e:	4630      	mov	r0, r6
 800f640:	f7f1 fa76 	bl	8000b30 <__aeabi_fsub>
 800f644:	4639      	mov	r1, r7
 800f646:	f7f1 fa73 	bl	8000b30 <__aeabi_fsub>
 800f64a:	4606      	mov	r6, r0
 800f64c:	4937      	ldr	r1, [pc, #220]	; (800f72c <__ieee754_rem_pio2f+0x2b4>)
 800f64e:	4648      	mov	r0, r9
 800f650:	f7f1 fb78 	bl	8000d44 <__aeabi_fmul>
 800f654:	4631      	mov	r1, r6
 800f656:	f7f1 fa6b 	bl	8000b30 <__aeabi_fsub>
 800f65a:	4607      	mov	r7, r0
 800f65c:	e795      	b.n	800f58a <__ieee754_rem_pio2f+0x112>
 800f65e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800f662:	db05      	blt.n	800f670 <__ieee754_rem_pio2f+0x1f8>
 800f664:	4601      	mov	r1, r0
 800f666:	f7f1 fa63 	bl	8000b30 <__aeabi_fsub>
 800f66a:	6060      	str	r0, [r4, #4]
 800f66c:	6020      	str	r0, [r4, #0]
 800f66e:	e710      	b.n	800f492 <__ieee754_rem_pio2f+0x1a>
 800f670:	15f7      	asrs	r7, r6, #23
 800f672:	3f86      	subs	r7, #134	; 0x86
 800f674:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800f678:	4630      	mov	r0, r6
 800f67a:	f7f1 fd3f 	bl	80010fc <__aeabi_f2iz>
 800f67e:	f7f1 fb0d 	bl	8000c9c <__aeabi_i2f>
 800f682:	4601      	mov	r1, r0
 800f684:	9003      	str	r0, [sp, #12]
 800f686:	4630      	mov	r0, r6
 800f688:	f7f1 fa52 	bl	8000b30 <__aeabi_fsub>
 800f68c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800f690:	f7f1 fb58 	bl	8000d44 <__aeabi_fmul>
 800f694:	4606      	mov	r6, r0
 800f696:	f7f1 fd31 	bl	80010fc <__aeabi_f2iz>
 800f69a:	f7f1 faff 	bl	8000c9c <__aeabi_i2f>
 800f69e:	4601      	mov	r1, r0
 800f6a0:	9004      	str	r0, [sp, #16]
 800f6a2:	4605      	mov	r5, r0
 800f6a4:	4630      	mov	r0, r6
 800f6a6:	f7f1 fa43 	bl	8000b30 <__aeabi_fsub>
 800f6aa:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800f6ae:	f7f1 fb49 	bl	8000d44 <__aeabi_fmul>
 800f6b2:	2100      	movs	r1, #0
 800f6b4:	9005      	str	r0, [sp, #20]
 800f6b6:	f7f1 fcd9 	bl	800106c <__aeabi_fcmpeq>
 800f6ba:	b1f0      	cbz	r0, 800f6fa <__ieee754_rem_pio2f+0x282>
 800f6bc:	2100      	movs	r1, #0
 800f6be:	4628      	mov	r0, r5
 800f6c0:	f7f1 fcd4 	bl	800106c <__aeabi_fcmpeq>
 800f6c4:	2800      	cmp	r0, #0
 800f6c6:	bf14      	ite	ne
 800f6c8:	2301      	movne	r3, #1
 800f6ca:	2302      	moveq	r3, #2
 800f6cc:	4a18      	ldr	r2, [pc, #96]	; (800f730 <__ieee754_rem_pio2f+0x2b8>)
 800f6ce:	4621      	mov	r1, r4
 800f6d0:	9201      	str	r2, [sp, #4]
 800f6d2:	2202      	movs	r2, #2
 800f6d4:	a803      	add	r0, sp, #12
 800f6d6:	9200      	str	r2, [sp, #0]
 800f6d8:	463a      	mov	r2, r7
 800f6da:	f000 f8fd 	bl	800f8d8 <__kernel_rem_pio2f>
 800f6de:	f1ba 0f00 	cmp.w	sl, #0
 800f6e2:	4605      	mov	r5, r0
 800f6e4:	f6bf aef2 	bge.w	800f4cc <__ieee754_rem_pio2f+0x54>
 800f6e8:	6823      	ldr	r3, [r4, #0]
 800f6ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f6ee:	6023      	str	r3, [r4, #0]
 800f6f0:	6863      	ldr	r3, [r4, #4]
 800f6f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f6f6:	6063      	str	r3, [r4, #4]
 800f6f8:	e794      	b.n	800f624 <__ieee754_rem_pio2f+0x1ac>
 800f6fa:	2303      	movs	r3, #3
 800f6fc:	e7e6      	b.n	800f6cc <__ieee754_rem_pio2f+0x254>
 800f6fe:	bf00      	nop
 800f700:	3f490fd8 	.word	0x3f490fd8
 800f704:	4016cbe3 	.word	0x4016cbe3
 800f708:	3fc90f80 	.word	0x3fc90f80
 800f70c:	3fc90fd0 	.word	0x3fc90fd0
 800f710:	37354443 	.word	0x37354443
 800f714:	37354400 	.word	0x37354400
 800f718:	2e85a308 	.word	0x2e85a308
 800f71c:	43490f80 	.word	0x43490f80
 800f720:	3f22f984 	.word	0x3f22f984
 800f724:	080111b8 	.word	0x080111b8
 800f728:	2e85a300 	.word	0x2e85a300
 800f72c:	248d3132 	.word	0x248d3132
 800f730:	08011238 	.word	0x08011238

0800f734 <__ieee754_sqrtf>:
 800f734:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800f738:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f73c:	b570      	push	{r4, r5, r6, lr}
 800f73e:	4603      	mov	r3, r0
 800f740:	4604      	mov	r4, r0
 800f742:	d309      	bcc.n	800f758 <__ieee754_sqrtf+0x24>
 800f744:	4601      	mov	r1, r0
 800f746:	f7f1 fafd 	bl	8000d44 <__aeabi_fmul>
 800f74a:	4601      	mov	r1, r0
 800f74c:	4620      	mov	r0, r4
 800f74e:	f7f1 f9f1 	bl	8000b34 <__addsf3>
 800f752:	4604      	mov	r4, r0
 800f754:	4620      	mov	r0, r4
 800f756:	bd70      	pop	{r4, r5, r6, pc}
 800f758:	2a00      	cmp	r2, #0
 800f75a:	d0fb      	beq.n	800f754 <__ieee754_sqrtf+0x20>
 800f75c:	2800      	cmp	r0, #0
 800f75e:	da06      	bge.n	800f76e <__ieee754_sqrtf+0x3a>
 800f760:	4601      	mov	r1, r0
 800f762:	f7f1 f9e5 	bl	8000b30 <__aeabi_fsub>
 800f766:	4601      	mov	r1, r0
 800f768:	f7f1 fba0 	bl	8000eac <__aeabi_fdiv>
 800f76c:	e7f1      	b.n	800f752 <__ieee754_sqrtf+0x1e>
 800f76e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800f772:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800f776:	d029      	beq.n	800f7cc <__ieee754_sqrtf+0x98>
 800f778:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800f77c:	07cb      	lsls	r3, r1, #31
 800f77e:	f04f 0300 	mov.w	r3, #0
 800f782:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800f786:	f04f 0419 	mov.w	r4, #25
 800f78a:	461e      	mov	r6, r3
 800f78c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800f790:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800f794:	bf58      	it	pl
 800f796:	0052      	lslpl	r2, r2, #1
 800f798:	1040      	asrs	r0, r0, #1
 800f79a:	0052      	lsls	r2, r2, #1
 800f79c:	1875      	adds	r5, r6, r1
 800f79e:	4295      	cmp	r5, r2
 800f7a0:	bfde      	ittt	le
 800f7a2:	186e      	addle	r6, r5, r1
 800f7a4:	1b52      	suble	r2, r2, r5
 800f7a6:	185b      	addle	r3, r3, r1
 800f7a8:	3c01      	subs	r4, #1
 800f7aa:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f7ae:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f7b2:	d1f3      	bne.n	800f79c <__ieee754_sqrtf+0x68>
 800f7b4:	b112      	cbz	r2, 800f7bc <__ieee754_sqrtf+0x88>
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	f023 0301 	bic.w	r3, r3, #1
 800f7bc:	105c      	asrs	r4, r3, #1
 800f7be:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800f7c2:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800f7c6:	e7c5      	b.n	800f754 <__ieee754_sqrtf+0x20>
 800f7c8:	005b      	lsls	r3, r3, #1
 800f7ca:	3201      	adds	r2, #1
 800f7cc:	0218      	lsls	r0, r3, #8
 800f7ce:	d5fb      	bpl.n	800f7c8 <__ieee754_sqrtf+0x94>
 800f7d0:	3a01      	subs	r2, #1
 800f7d2:	1a89      	subs	r1, r1, r2
 800f7d4:	e7d0      	b.n	800f778 <__ieee754_sqrtf+0x44>
	...

0800f7d8 <__kernel_cosf>:
 800f7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7dc:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800f7e0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800f7e4:	4606      	mov	r6, r0
 800f7e6:	4688      	mov	r8, r1
 800f7e8:	da03      	bge.n	800f7f2 <__kernel_cosf+0x1a>
 800f7ea:	f7f1 fc87 	bl	80010fc <__aeabi_f2iz>
 800f7ee:	2800      	cmp	r0, #0
 800f7f0:	d05c      	beq.n	800f8ac <__kernel_cosf+0xd4>
 800f7f2:	4631      	mov	r1, r6
 800f7f4:	4630      	mov	r0, r6
 800f7f6:	f7f1 faa5 	bl	8000d44 <__aeabi_fmul>
 800f7fa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f7fe:	4605      	mov	r5, r0
 800f800:	f7f1 faa0 	bl	8000d44 <__aeabi_fmul>
 800f804:	492b      	ldr	r1, [pc, #172]	; (800f8b4 <__kernel_cosf+0xdc>)
 800f806:	4607      	mov	r7, r0
 800f808:	4628      	mov	r0, r5
 800f80a:	f7f1 fa9b 	bl	8000d44 <__aeabi_fmul>
 800f80e:	492a      	ldr	r1, [pc, #168]	; (800f8b8 <__kernel_cosf+0xe0>)
 800f810:	f7f1 f990 	bl	8000b34 <__addsf3>
 800f814:	4629      	mov	r1, r5
 800f816:	f7f1 fa95 	bl	8000d44 <__aeabi_fmul>
 800f81a:	4928      	ldr	r1, [pc, #160]	; (800f8bc <__kernel_cosf+0xe4>)
 800f81c:	f7f1 f988 	bl	8000b30 <__aeabi_fsub>
 800f820:	4629      	mov	r1, r5
 800f822:	f7f1 fa8f 	bl	8000d44 <__aeabi_fmul>
 800f826:	4926      	ldr	r1, [pc, #152]	; (800f8c0 <__kernel_cosf+0xe8>)
 800f828:	f7f1 f984 	bl	8000b34 <__addsf3>
 800f82c:	4629      	mov	r1, r5
 800f82e:	f7f1 fa89 	bl	8000d44 <__aeabi_fmul>
 800f832:	4924      	ldr	r1, [pc, #144]	; (800f8c4 <__kernel_cosf+0xec>)
 800f834:	f7f1 f97c 	bl	8000b30 <__aeabi_fsub>
 800f838:	4629      	mov	r1, r5
 800f83a:	f7f1 fa83 	bl	8000d44 <__aeabi_fmul>
 800f83e:	4922      	ldr	r1, [pc, #136]	; (800f8c8 <__kernel_cosf+0xf0>)
 800f840:	f7f1 f978 	bl	8000b34 <__addsf3>
 800f844:	4629      	mov	r1, r5
 800f846:	f7f1 fa7d 	bl	8000d44 <__aeabi_fmul>
 800f84a:	4629      	mov	r1, r5
 800f84c:	f7f1 fa7a 	bl	8000d44 <__aeabi_fmul>
 800f850:	4641      	mov	r1, r8
 800f852:	4605      	mov	r5, r0
 800f854:	4630      	mov	r0, r6
 800f856:	f7f1 fa75 	bl	8000d44 <__aeabi_fmul>
 800f85a:	4601      	mov	r1, r0
 800f85c:	4628      	mov	r0, r5
 800f85e:	f7f1 f967 	bl	8000b30 <__aeabi_fsub>
 800f862:	4b1a      	ldr	r3, [pc, #104]	; (800f8cc <__kernel_cosf+0xf4>)
 800f864:	4605      	mov	r5, r0
 800f866:	429c      	cmp	r4, r3
 800f868:	dc0a      	bgt.n	800f880 <__kernel_cosf+0xa8>
 800f86a:	4601      	mov	r1, r0
 800f86c:	4638      	mov	r0, r7
 800f86e:	f7f1 f95f 	bl	8000b30 <__aeabi_fsub>
 800f872:	4601      	mov	r1, r0
 800f874:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f878:	f7f1 f95a 	bl	8000b30 <__aeabi_fsub>
 800f87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f880:	4b13      	ldr	r3, [pc, #76]	; (800f8d0 <__kernel_cosf+0xf8>)
 800f882:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f886:	429c      	cmp	r4, r3
 800f888:	bfcc      	ite	gt
 800f88a:	4c12      	ldrgt	r4, [pc, #72]	; (800f8d4 <__kernel_cosf+0xfc>)
 800f88c:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800f890:	4621      	mov	r1, r4
 800f892:	f7f1 f94d 	bl	8000b30 <__aeabi_fsub>
 800f896:	4621      	mov	r1, r4
 800f898:	4606      	mov	r6, r0
 800f89a:	4638      	mov	r0, r7
 800f89c:	f7f1 f948 	bl	8000b30 <__aeabi_fsub>
 800f8a0:	4629      	mov	r1, r5
 800f8a2:	f7f1 f945 	bl	8000b30 <__aeabi_fsub>
 800f8a6:	4601      	mov	r1, r0
 800f8a8:	4630      	mov	r0, r6
 800f8aa:	e7e5      	b.n	800f878 <__kernel_cosf+0xa0>
 800f8ac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f8b0:	e7e4      	b.n	800f87c <__kernel_cosf+0xa4>
 800f8b2:	bf00      	nop
 800f8b4:	ad47d74e 	.word	0xad47d74e
 800f8b8:	310f74f6 	.word	0x310f74f6
 800f8bc:	3493f27c 	.word	0x3493f27c
 800f8c0:	37d00d01 	.word	0x37d00d01
 800f8c4:	3ab60b61 	.word	0x3ab60b61
 800f8c8:	3d2aaaab 	.word	0x3d2aaaab
 800f8cc:	3e999999 	.word	0x3e999999
 800f8d0:	3f480000 	.word	0x3f480000
 800f8d4:	3e900000 	.word	0x3e900000

0800f8d8 <__kernel_rem_pio2f>:
 800f8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8dc:	b0db      	sub	sp, #364	; 0x16c
 800f8de:	9202      	str	r2, [sp, #8]
 800f8e0:	9304      	str	r3, [sp, #16]
 800f8e2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f8e4:	4bc5      	ldr	r3, [pc, #788]	; (800fbfc <__kernel_rem_pio2f+0x324>)
 800f8e6:	9005      	str	r0, [sp, #20]
 800f8e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8ec:	9100      	str	r1, [sp, #0]
 800f8ee:	9301      	str	r3, [sp, #4]
 800f8f0:	9b04      	ldr	r3, [sp, #16]
 800f8f2:	3b01      	subs	r3, #1
 800f8f4:	9303      	str	r3, [sp, #12]
 800f8f6:	9b02      	ldr	r3, [sp, #8]
 800f8f8:	1d1a      	adds	r2, r3, #4
 800f8fa:	f2c0 809b 	blt.w	800fa34 <__kernel_rem_pio2f+0x15c>
 800f8fe:	1edc      	subs	r4, r3, #3
 800f900:	bf48      	it	mi
 800f902:	1d1c      	addmi	r4, r3, #4
 800f904:	10e4      	asrs	r4, r4, #3
 800f906:	2500      	movs	r5, #0
 800f908:	f04f 0a00 	mov.w	sl, #0
 800f90c:	1c67      	adds	r7, r4, #1
 800f90e:	00fb      	lsls	r3, r7, #3
 800f910:	9306      	str	r3, [sp, #24]
 800f912:	9b02      	ldr	r3, [sp, #8]
 800f914:	9a03      	ldr	r2, [sp, #12]
 800f916:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800f91a:	9b01      	ldr	r3, [sp, #4]
 800f91c:	1aa6      	subs	r6, r4, r2
 800f91e:	eb03 0802 	add.w	r8, r3, r2
 800f922:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800f924:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800f928:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800f92c:	4545      	cmp	r5, r8
 800f92e:	f340 8083 	ble.w	800fa38 <__kernel_rem_pio2f+0x160>
 800f932:	f04f 0800 	mov.w	r8, #0
 800f936:	f04f 0b00 	mov.w	fp, #0
 800f93a:	9b04      	ldr	r3, [sp, #16]
 800f93c:	aa1e      	add	r2, sp, #120	; 0x78
 800f93e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800f942:	ab46      	add	r3, sp, #280	; 0x118
 800f944:	9a01      	ldr	r2, [sp, #4]
 800f946:	4590      	cmp	r8, r2
 800f948:	f340 809c 	ble.w	800fa84 <__kernel_rem_pio2f+0x1ac>
 800f94c:	4613      	mov	r3, r2
 800f94e:	aa0a      	add	r2, sp, #40	; 0x28
 800f950:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f954:	9308      	str	r3, [sp, #32]
 800f956:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800f958:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f95c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f960:	9307      	str	r3, [sp, #28]
 800f962:	ad0a      	add	r5, sp, #40	; 0x28
 800f964:	462e      	mov	r6, r5
 800f966:	46c3      	mov	fp, r8
 800f968:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800f96c:	ab5a      	add	r3, sp, #360	; 0x168
 800f96e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800f972:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800f976:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800f97a:	f1bb 0f00 	cmp.w	fp, #0
 800f97e:	f300 8086 	bgt.w	800fa8e <__kernel_rem_pio2f+0x1b6>
 800f982:	4639      	mov	r1, r7
 800f984:	4620      	mov	r0, r4
 800f986:	f000 fc3b 	bl	8010200 <scalbnf>
 800f98a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800f98e:	4604      	mov	r4, r0
 800f990:	f7f1 f9d8 	bl	8000d44 <__aeabi_fmul>
 800f994:	f000 fbee 	bl	8010174 <floorf>
 800f998:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800f99c:	f7f1 f9d2 	bl	8000d44 <__aeabi_fmul>
 800f9a0:	4601      	mov	r1, r0
 800f9a2:	4620      	mov	r0, r4
 800f9a4:	f7f1 f8c4 	bl	8000b30 <__aeabi_fsub>
 800f9a8:	4604      	mov	r4, r0
 800f9aa:	f7f1 fba7 	bl	80010fc <__aeabi_f2iz>
 800f9ae:	4606      	mov	r6, r0
 800f9b0:	f7f1 f974 	bl	8000c9c <__aeabi_i2f>
 800f9b4:	4601      	mov	r1, r0
 800f9b6:	4620      	mov	r0, r4
 800f9b8:	f7f1 f8ba 	bl	8000b30 <__aeabi_fsub>
 800f9bc:	2f00      	cmp	r7, #0
 800f9be:	4681      	mov	r9, r0
 800f9c0:	f340 8084 	ble.w	800facc <__kernel_rem_pio2f+0x1f4>
 800f9c4:	f108 32ff 	add.w	r2, r8, #4294967295
 800f9c8:	ab0a      	add	r3, sp, #40	; 0x28
 800f9ca:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800f9ce:	f1c7 0108 	rsb	r1, r7, #8
 800f9d2:	fa44 f301 	asr.w	r3, r4, r1
 800f9d6:	441e      	add	r6, r3
 800f9d8:	408b      	lsls	r3, r1
 800f9da:	1ae4      	subs	r4, r4, r3
 800f9dc:	f1c7 0007 	rsb	r0, r7, #7
 800f9e0:	ab0a      	add	r3, sp, #40	; 0x28
 800f9e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f9e6:	4104      	asrs	r4, r0
 800f9e8:	2c00      	cmp	r4, #0
 800f9ea:	dd7e      	ble.n	800faea <__kernel_rem_pio2f+0x212>
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	4692      	mov	sl, r2
 800f9f0:	3601      	adds	r6, #1
 800f9f2:	4590      	cmp	r8, r2
 800f9f4:	f300 80b0 	bgt.w	800fb58 <__kernel_rem_pio2f+0x280>
 800f9f8:	2f00      	cmp	r7, #0
 800f9fa:	dd05      	ble.n	800fa08 <__kernel_rem_pio2f+0x130>
 800f9fc:	2f01      	cmp	r7, #1
 800f9fe:	f000 80bd 	beq.w	800fb7c <__kernel_rem_pio2f+0x2a4>
 800fa02:	2f02      	cmp	r7, #2
 800fa04:	f000 80c5 	beq.w	800fb92 <__kernel_rem_pio2f+0x2ba>
 800fa08:	2c02      	cmp	r4, #2
 800fa0a:	d16e      	bne.n	800faea <__kernel_rem_pio2f+0x212>
 800fa0c:	4649      	mov	r1, r9
 800fa0e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800fa12:	f7f1 f88d 	bl	8000b30 <__aeabi_fsub>
 800fa16:	4681      	mov	r9, r0
 800fa18:	f1ba 0f00 	cmp.w	sl, #0
 800fa1c:	d065      	beq.n	800faea <__kernel_rem_pio2f+0x212>
 800fa1e:	4639      	mov	r1, r7
 800fa20:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800fa24:	f000 fbec 	bl	8010200 <scalbnf>
 800fa28:	4601      	mov	r1, r0
 800fa2a:	4648      	mov	r0, r9
 800fa2c:	f7f1 f880 	bl	8000b30 <__aeabi_fsub>
 800fa30:	4681      	mov	r9, r0
 800fa32:	e05a      	b.n	800faea <__kernel_rem_pio2f+0x212>
 800fa34:	2400      	movs	r4, #0
 800fa36:	e766      	b.n	800f906 <__kernel_rem_pio2f+0x2e>
 800fa38:	42ee      	cmn	r6, r5
 800fa3a:	d407      	bmi.n	800fa4c <__kernel_rem_pio2f+0x174>
 800fa3c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fa40:	f7f1 f92c 	bl	8000c9c <__aeabi_i2f>
 800fa44:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800fa48:	3501      	adds	r5, #1
 800fa4a:	e76f      	b.n	800f92c <__kernel_rem_pio2f+0x54>
 800fa4c:	4650      	mov	r0, sl
 800fa4e:	e7f9      	b.n	800fa44 <__kernel_rem_pio2f+0x16c>
 800fa50:	9b05      	ldr	r3, [sp, #20]
 800fa52:	f8da 1000 	ldr.w	r1, [sl]
 800fa56:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800fa5a:	f7f1 f973 	bl	8000d44 <__aeabi_fmul>
 800fa5e:	4601      	mov	r1, r0
 800fa60:	4630      	mov	r0, r6
 800fa62:	f7f1 f867 	bl	8000b34 <__addsf3>
 800fa66:	4606      	mov	r6, r0
 800fa68:	f109 0901 	add.w	r9, r9, #1
 800fa6c:	ab46      	add	r3, sp, #280	; 0x118
 800fa6e:	9a03      	ldr	r2, [sp, #12]
 800fa70:	f1aa 0a04 	sub.w	sl, sl, #4
 800fa74:	4591      	cmp	r9, r2
 800fa76:	ddeb      	ble.n	800fa50 <__kernel_rem_pio2f+0x178>
 800fa78:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800fa7c:	3504      	adds	r5, #4
 800fa7e:	f108 0801 	add.w	r8, r8, #1
 800fa82:	e75f      	b.n	800f944 <__kernel_rem_pio2f+0x6c>
 800fa84:	46aa      	mov	sl, r5
 800fa86:	465e      	mov	r6, fp
 800fa88:	f04f 0900 	mov.w	r9, #0
 800fa8c:	e7ef      	b.n	800fa6e <__kernel_rem_pio2f+0x196>
 800fa8e:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800fa92:	4620      	mov	r0, r4
 800fa94:	f7f1 f956 	bl	8000d44 <__aeabi_fmul>
 800fa98:	f7f1 fb30 	bl	80010fc <__aeabi_f2iz>
 800fa9c:	f7f1 f8fe 	bl	8000c9c <__aeabi_i2f>
 800faa0:	4649      	mov	r1, r9
 800faa2:	9009      	str	r0, [sp, #36]	; 0x24
 800faa4:	f7f1 f94e 	bl	8000d44 <__aeabi_fmul>
 800faa8:	4601      	mov	r1, r0
 800faaa:	4620      	mov	r0, r4
 800faac:	f7f1 f840 	bl	8000b30 <__aeabi_fsub>
 800fab0:	f7f1 fb24 	bl	80010fc <__aeabi_f2iz>
 800fab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fab6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800faba:	f846 0b04 	str.w	r0, [r6], #4
 800fabe:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7f1 f836 	bl	8000b34 <__addsf3>
 800fac8:	4604      	mov	r4, r0
 800faca:	e756      	b.n	800f97a <__kernel_rem_pio2f+0xa2>
 800facc:	d106      	bne.n	800fadc <__kernel_rem_pio2f+0x204>
 800face:	f108 33ff 	add.w	r3, r8, #4294967295
 800fad2:	aa0a      	add	r2, sp, #40	; 0x28
 800fad4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fad8:	1224      	asrs	r4, r4, #8
 800fada:	e785      	b.n	800f9e8 <__kernel_rem_pio2f+0x110>
 800fadc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800fae0:	f7f1 fae2 	bl	80010a8 <__aeabi_fcmpge>
 800fae4:	4604      	mov	r4, r0
 800fae6:	2800      	cmp	r0, #0
 800fae8:	d134      	bne.n	800fb54 <__kernel_rem_pio2f+0x27c>
 800faea:	2100      	movs	r1, #0
 800faec:	4648      	mov	r0, r9
 800faee:	f7f1 fabd 	bl	800106c <__aeabi_fcmpeq>
 800faf2:	2800      	cmp	r0, #0
 800faf4:	f000 809a 	beq.w	800fc2c <__kernel_rem_pio2f+0x354>
 800faf8:	f108 35ff 	add.w	r5, r8, #4294967295
 800fafc:	462b      	mov	r3, r5
 800fafe:	2200      	movs	r2, #0
 800fb00:	9901      	ldr	r1, [sp, #4]
 800fb02:	428b      	cmp	r3, r1
 800fb04:	da4d      	bge.n	800fba2 <__kernel_rem_pio2f+0x2ca>
 800fb06:	2a00      	cmp	r2, #0
 800fb08:	d07c      	beq.n	800fc04 <__kernel_rem_pio2f+0x32c>
 800fb0a:	ab0a      	add	r3, sp, #40	; 0x28
 800fb0c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800fb10:	3f08      	subs	r7, #8
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	f000 8088 	beq.w	800fc28 <__kernel_rem_pio2f+0x350>
 800fb18:	4639      	mov	r1, r7
 800fb1a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800fb1e:	f000 fb6f 	bl	8010200 <scalbnf>
 800fb22:	46aa      	mov	sl, r5
 800fb24:	4681      	mov	r9, r0
 800fb26:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800fb2a:	af46      	add	r7, sp, #280	; 0x118
 800fb2c:	f1ba 0f00 	cmp.w	sl, #0
 800fb30:	f280 80b1 	bge.w	800fc96 <__kernel_rem_pio2f+0x3be>
 800fb34:	46a9      	mov	r9, r5
 800fb36:	f04f 0a00 	mov.w	sl, #0
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	f1b9 0f00 	cmp.w	r9, #0
 800fb40:	f2c0 80db 	blt.w	800fcfa <__kernel_rem_pio2f+0x422>
 800fb44:	a946      	add	r1, sp, #280	; 0x118
 800fb46:	4617      	mov	r7, r2
 800fb48:	f04f 0800 	mov.w	r8, #0
 800fb4c:	4b2c      	ldr	r3, [pc, #176]	; (800fc00 <__kernel_rem_pio2f+0x328>)
 800fb4e:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800fb52:	e0c3      	b.n	800fcdc <__kernel_rem_pio2f+0x404>
 800fb54:	2402      	movs	r4, #2
 800fb56:	e749      	b.n	800f9ec <__kernel_rem_pio2f+0x114>
 800fb58:	682b      	ldr	r3, [r5, #0]
 800fb5a:	f1ba 0f00 	cmp.w	sl, #0
 800fb5e:	d108      	bne.n	800fb72 <__kernel_rem_pio2f+0x29a>
 800fb60:	b11b      	cbz	r3, 800fb6a <__kernel_rem_pio2f+0x292>
 800fb62:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800fb66:	602b      	str	r3, [r5, #0]
 800fb68:	2301      	movs	r3, #1
 800fb6a:	469a      	mov	sl, r3
 800fb6c:	3201      	adds	r2, #1
 800fb6e:	3504      	adds	r5, #4
 800fb70:	e73f      	b.n	800f9f2 <__kernel_rem_pio2f+0x11a>
 800fb72:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800fb76:	602b      	str	r3, [r5, #0]
 800fb78:	4653      	mov	r3, sl
 800fb7a:	e7f6      	b.n	800fb6a <__kernel_rem_pio2f+0x292>
 800fb7c:	f108 32ff 	add.w	r2, r8, #4294967295
 800fb80:	ab0a      	add	r3, sp, #40	; 0x28
 800fb82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb8a:	a90a      	add	r1, sp, #40	; 0x28
 800fb8c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fb90:	e73a      	b.n	800fa08 <__kernel_rem_pio2f+0x130>
 800fb92:	f108 32ff 	add.w	r2, r8, #4294967295
 800fb96:	ab0a      	add	r3, sp, #40	; 0x28
 800fb98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fba0:	e7f3      	b.n	800fb8a <__kernel_rem_pio2f+0x2b2>
 800fba2:	a90a      	add	r1, sp, #40	; 0x28
 800fba4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fba8:	3b01      	subs	r3, #1
 800fbaa:	430a      	orrs	r2, r1
 800fbac:	e7a8      	b.n	800fb00 <__kernel_rem_pio2f+0x228>
 800fbae:	3301      	adds	r3, #1
 800fbb0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800fbb4:	2900      	cmp	r1, #0
 800fbb6:	d0fa      	beq.n	800fbae <__kernel_rem_pio2f+0x2d6>
 800fbb8:	9a04      	ldr	r2, [sp, #16]
 800fbba:	f108 0501 	add.w	r5, r8, #1
 800fbbe:	eb08 0402 	add.w	r4, r8, r2
 800fbc2:	aa1e      	add	r2, sp, #120	; 0x78
 800fbc4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800fbc8:	4498      	add	r8, r3
 800fbca:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800fbce:	45a8      	cmp	r8, r5
 800fbd0:	f6ff aec7 	blt.w	800f962 <__kernel_rem_pio2f+0x8a>
 800fbd4:	9b07      	ldr	r3, [sp, #28]
 800fbd6:	46a3      	mov	fp, r4
 800fbd8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fbdc:	f7f1 f85e 	bl	8000c9c <__aeabi_i2f>
 800fbe0:	f04f 0a00 	mov.w	sl, #0
 800fbe4:	2600      	movs	r6, #0
 800fbe6:	f84b 0b04 	str.w	r0, [fp], #4
 800fbea:	9b03      	ldr	r3, [sp, #12]
 800fbec:	459a      	cmp	sl, r3
 800fbee:	dd0c      	ble.n	800fc0a <__kernel_rem_pio2f+0x332>
 800fbf0:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800fbf4:	465c      	mov	r4, fp
 800fbf6:	3501      	adds	r5, #1
 800fbf8:	e7e9      	b.n	800fbce <__kernel_rem_pio2f+0x2f6>
 800fbfa:	bf00      	nop
 800fbfc:	0801157c 	.word	0x0801157c
 800fc00:	08011550 	.word	0x08011550
 800fc04:	2301      	movs	r3, #1
 800fc06:	9a08      	ldr	r2, [sp, #32]
 800fc08:	e7d2      	b.n	800fbb0 <__kernel_rem_pio2f+0x2d8>
 800fc0a:	9b05      	ldr	r3, [sp, #20]
 800fc0c:	f854 0904 	ldr.w	r0, [r4], #-4
 800fc10:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800fc14:	f7f1 f896 	bl	8000d44 <__aeabi_fmul>
 800fc18:	4601      	mov	r1, r0
 800fc1a:	4630      	mov	r0, r6
 800fc1c:	f7f0 ff8a 	bl	8000b34 <__addsf3>
 800fc20:	f10a 0a01 	add.w	sl, sl, #1
 800fc24:	4606      	mov	r6, r0
 800fc26:	e7e0      	b.n	800fbea <__kernel_rem_pio2f+0x312>
 800fc28:	3d01      	subs	r5, #1
 800fc2a:	e76e      	b.n	800fb0a <__kernel_rem_pio2f+0x232>
 800fc2c:	9b06      	ldr	r3, [sp, #24]
 800fc2e:	9a02      	ldr	r2, [sp, #8]
 800fc30:	4648      	mov	r0, r9
 800fc32:	1a99      	subs	r1, r3, r2
 800fc34:	f000 fae4 	bl	8010200 <scalbnf>
 800fc38:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800fc3c:	4605      	mov	r5, r0
 800fc3e:	f7f1 fa33 	bl	80010a8 <__aeabi_fcmpge>
 800fc42:	b300      	cbz	r0, 800fc86 <__kernel_rem_pio2f+0x3ae>
 800fc44:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800fc48:	4628      	mov	r0, r5
 800fc4a:	f7f1 f87b 	bl	8000d44 <__aeabi_fmul>
 800fc4e:	f7f1 fa55 	bl	80010fc <__aeabi_f2iz>
 800fc52:	f7f1 f823 	bl	8000c9c <__aeabi_i2f>
 800fc56:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800fc5a:	4681      	mov	r9, r0
 800fc5c:	f7f1 f872 	bl	8000d44 <__aeabi_fmul>
 800fc60:	4601      	mov	r1, r0
 800fc62:	4628      	mov	r0, r5
 800fc64:	f7f0 ff64 	bl	8000b30 <__aeabi_fsub>
 800fc68:	f7f1 fa48 	bl	80010fc <__aeabi_f2iz>
 800fc6c:	ab0a      	add	r3, sp, #40	; 0x28
 800fc6e:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800fc72:	4648      	mov	r0, r9
 800fc74:	f7f1 fa42 	bl	80010fc <__aeabi_f2iz>
 800fc78:	f108 0501 	add.w	r5, r8, #1
 800fc7c:	ab0a      	add	r3, sp, #40	; 0x28
 800fc7e:	3708      	adds	r7, #8
 800fc80:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800fc84:	e748      	b.n	800fb18 <__kernel_rem_pio2f+0x240>
 800fc86:	4628      	mov	r0, r5
 800fc88:	f7f1 fa38 	bl	80010fc <__aeabi_f2iz>
 800fc8c:	ab0a      	add	r3, sp, #40	; 0x28
 800fc8e:	4645      	mov	r5, r8
 800fc90:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800fc94:	e740      	b.n	800fb18 <__kernel_rem_pio2f+0x240>
 800fc96:	ab0a      	add	r3, sp, #40	; 0x28
 800fc98:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800fc9c:	f7f0 fffe 	bl	8000c9c <__aeabi_i2f>
 800fca0:	4649      	mov	r1, r9
 800fca2:	f7f1 f84f 	bl	8000d44 <__aeabi_fmul>
 800fca6:	4641      	mov	r1, r8
 800fca8:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800fcac:	4648      	mov	r0, r9
 800fcae:	f7f1 f849 	bl	8000d44 <__aeabi_fmul>
 800fcb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fcb6:	4681      	mov	r9, r0
 800fcb8:	e738      	b.n	800fb2c <__kernel_rem_pio2f+0x254>
 800fcba:	f853 0b04 	ldr.w	r0, [r3], #4
 800fcbe:	f85b 1b04 	ldr.w	r1, [fp], #4
 800fcc2:	9203      	str	r2, [sp, #12]
 800fcc4:	9302      	str	r3, [sp, #8]
 800fcc6:	f7f1 f83d 	bl	8000d44 <__aeabi_fmul>
 800fcca:	4601      	mov	r1, r0
 800fccc:	4638      	mov	r0, r7
 800fcce:	f7f0 ff31 	bl	8000b34 <__addsf3>
 800fcd2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fcd6:	4607      	mov	r7, r0
 800fcd8:	f108 0801 	add.w	r8, r8, #1
 800fcdc:	9901      	ldr	r1, [sp, #4]
 800fcde:	4588      	cmp	r8, r1
 800fce0:	dc01      	bgt.n	800fce6 <__kernel_rem_pio2f+0x40e>
 800fce2:	45c2      	cmp	sl, r8
 800fce4:	dae9      	bge.n	800fcba <__kernel_rem_pio2f+0x3e2>
 800fce6:	ab5a      	add	r3, sp, #360	; 0x168
 800fce8:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800fcec:	f843 7ca0 	str.w	r7, [r3, #-160]
 800fcf0:	f109 39ff 	add.w	r9, r9, #4294967295
 800fcf4:	f10a 0a01 	add.w	sl, sl, #1
 800fcf8:	e720      	b.n	800fb3c <__kernel_rem_pio2f+0x264>
 800fcfa:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800fcfc:	2b02      	cmp	r3, #2
 800fcfe:	dc07      	bgt.n	800fd10 <__kernel_rem_pio2f+0x438>
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	dc4d      	bgt.n	800fda0 <__kernel_rem_pio2f+0x4c8>
 800fd04:	d02e      	beq.n	800fd64 <__kernel_rem_pio2f+0x48c>
 800fd06:	f006 0007 	and.w	r0, r6, #7
 800fd0a:	b05b      	add	sp, #364	; 0x16c
 800fd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd10:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800fd12:	2b03      	cmp	r3, #3
 800fd14:	d1f7      	bne.n	800fd06 <__kernel_rem_pio2f+0x42e>
 800fd16:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800fd1a:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800fd1e:	46b8      	mov	r8, r7
 800fd20:	46aa      	mov	sl, r5
 800fd22:	f1ba 0f00 	cmp.w	sl, #0
 800fd26:	dc48      	bgt.n	800fdba <__kernel_rem_pio2f+0x4e2>
 800fd28:	46a9      	mov	r9, r5
 800fd2a:	f1b9 0f01 	cmp.w	r9, #1
 800fd2e:	dc5f      	bgt.n	800fdf0 <__kernel_rem_pio2f+0x518>
 800fd30:	2000      	movs	r0, #0
 800fd32:	2d01      	cmp	r5, #1
 800fd34:	dc75      	bgt.n	800fe22 <__kernel_rem_pio2f+0x54a>
 800fd36:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800fd38:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800fd3a:	2c00      	cmp	r4, #0
 800fd3c:	d177      	bne.n	800fe2e <__kernel_rem_pio2f+0x556>
 800fd3e:	9900      	ldr	r1, [sp, #0]
 800fd40:	600a      	str	r2, [r1, #0]
 800fd42:	460a      	mov	r2, r1
 800fd44:	604b      	str	r3, [r1, #4]
 800fd46:	6090      	str	r0, [r2, #8]
 800fd48:	e7dd      	b.n	800fd06 <__kernel_rem_pio2f+0x42e>
 800fd4a:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800fd4e:	f7f0 fef1 	bl	8000b34 <__addsf3>
 800fd52:	3d01      	subs	r5, #1
 800fd54:	2d00      	cmp	r5, #0
 800fd56:	daf8      	bge.n	800fd4a <__kernel_rem_pio2f+0x472>
 800fd58:	b10c      	cbz	r4, 800fd5e <__kernel_rem_pio2f+0x486>
 800fd5a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800fd5e:	9b00      	ldr	r3, [sp, #0]
 800fd60:	6018      	str	r0, [r3, #0]
 800fd62:	e7d0      	b.n	800fd06 <__kernel_rem_pio2f+0x42e>
 800fd64:	2000      	movs	r0, #0
 800fd66:	af32      	add	r7, sp, #200	; 0xc8
 800fd68:	e7f4      	b.n	800fd54 <__kernel_rem_pio2f+0x47c>
 800fd6a:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800fd6e:	f7f0 fee1 	bl	8000b34 <__addsf3>
 800fd72:	3f01      	subs	r7, #1
 800fd74:	2f00      	cmp	r7, #0
 800fd76:	daf8      	bge.n	800fd6a <__kernel_rem_pio2f+0x492>
 800fd78:	b1bc      	cbz	r4, 800fdaa <__kernel_rem_pio2f+0x4d2>
 800fd7a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800fd7e:	9a00      	ldr	r2, [sp, #0]
 800fd80:	4601      	mov	r1, r0
 800fd82:	6013      	str	r3, [r2, #0]
 800fd84:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800fd86:	f7f0 fed3 	bl	8000b30 <__aeabi_fsub>
 800fd8a:	2701      	movs	r7, #1
 800fd8c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800fd90:	42bd      	cmp	r5, r7
 800fd92:	da0c      	bge.n	800fdae <__kernel_rem_pio2f+0x4d6>
 800fd94:	b10c      	cbz	r4, 800fd9a <__kernel_rem_pio2f+0x4c2>
 800fd96:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800fd9a:	9b00      	ldr	r3, [sp, #0]
 800fd9c:	6058      	str	r0, [r3, #4]
 800fd9e:	e7b2      	b.n	800fd06 <__kernel_rem_pio2f+0x42e>
 800fda0:	462f      	mov	r7, r5
 800fda2:	2000      	movs	r0, #0
 800fda4:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800fda8:	e7e4      	b.n	800fd74 <__kernel_rem_pio2f+0x49c>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	e7e7      	b.n	800fd7e <__kernel_rem_pio2f+0x4a6>
 800fdae:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800fdb2:	f7f0 febf 	bl	8000b34 <__addsf3>
 800fdb6:	3701      	adds	r7, #1
 800fdb8:	e7ea      	b.n	800fd90 <__kernel_rem_pio2f+0x4b8>
 800fdba:	f8d8 3000 	ldr.w	r3, [r8]
 800fdbe:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800fdc2:	4619      	mov	r1, r3
 800fdc4:	4610      	mov	r0, r2
 800fdc6:	9302      	str	r3, [sp, #8]
 800fdc8:	9201      	str	r2, [sp, #4]
 800fdca:	f7f0 feb3 	bl	8000b34 <__addsf3>
 800fdce:	9a01      	ldr	r2, [sp, #4]
 800fdd0:	4601      	mov	r1, r0
 800fdd2:	4681      	mov	r9, r0
 800fdd4:	4610      	mov	r0, r2
 800fdd6:	f7f0 feab 	bl	8000b30 <__aeabi_fsub>
 800fdda:	9b02      	ldr	r3, [sp, #8]
 800fddc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fde0:	4619      	mov	r1, r3
 800fde2:	f7f0 fea7 	bl	8000b34 <__addsf3>
 800fde6:	f848 0904 	str.w	r0, [r8], #-4
 800fdea:	f8c8 9000 	str.w	r9, [r8]
 800fdee:	e798      	b.n	800fd22 <__kernel_rem_pio2f+0x44a>
 800fdf0:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800fdf4:	f8d7 a000 	ldr.w	sl, [r7]
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	4651      	mov	r1, sl
 800fdfc:	9301      	str	r3, [sp, #4]
 800fdfe:	f7f0 fe99 	bl	8000b34 <__addsf3>
 800fe02:	9b01      	ldr	r3, [sp, #4]
 800fe04:	4601      	mov	r1, r0
 800fe06:	4680      	mov	r8, r0
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7f0 fe91 	bl	8000b30 <__aeabi_fsub>
 800fe0e:	4651      	mov	r1, sl
 800fe10:	f7f0 fe90 	bl	8000b34 <__addsf3>
 800fe14:	f847 0904 	str.w	r0, [r7], #-4
 800fe18:	f109 39ff 	add.w	r9, r9, #4294967295
 800fe1c:	f8c7 8000 	str.w	r8, [r7]
 800fe20:	e783      	b.n	800fd2a <__kernel_rem_pio2f+0x452>
 800fe22:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800fe26:	f7f0 fe85 	bl	8000b34 <__addsf3>
 800fe2a:	3d01      	subs	r5, #1
 800fe2c:	e781      	b.n	800fd32 <__kernel_rem_pio2f+0x45a>
 800fe2e:	9900      	ldr	r1, [sp, #0]
 800fe30:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800fe34:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fe38:	600a      	str	r2, [r1, #0]
 800fe3a:	604b      	str	r3, [r1, #4]
 800fe3c:	460a      	mov	r2, r1
 800fe3e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800fe42:	e780      	b.n	800fd46 <__kernel_rem_pio2f+0x46e>

0800fe44 <__kernel_sinf>:
 800fe44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe48:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800fe4c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800fe50:	4604      	mov	r4, r0
 800fe52:	460f      	mov	r7, r1
 800fe54:	4691      	mov	r9, r2
 800fe56:	da03      	bge.n	800fe60 <__kernel_sinf+0x1c>
 800fe58:	f7f1 f950 	bl	80010fc <__aeabi_f2iz>
 800fe5c:	2800      	cmp	r0, #0
 800fe5e:	d035      	beq.n	800fecc <__kernel_sinf+0x88>
 800fe60:	4621      	mov	r1, r4
 800fe62:	4620      	mov	r0, r4
 800fe64:	f7f0 ff6e 	bl	8000d44 <__aeabi_fmul>
 800fe68:	4605      	mov	r5, r0
 800fe6a:	4601      	mov	r1, r0
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	f7f0 ff69 	bl	8000d44 <__aeabi_fmul>
 800fe72:	4929      	ldr	r1, [pc, #164]	; (800ff18 <__kernel_sinf+0xd4>)
 800fe74:	4606      	mov	r6, r0
 800fe76:	4628      	mov	r0, r5
 800fe78:	f7f0 ff64 	bl	8000d44 <__aeabi_fmul>
 800fe7c:	4927      	ldr	r1, [pc, #156]	; (800ff1c <__kernel_sinf+0xd8>)
 800fe7e:	f7f0 fe57 	bl	8000b30 <__aeabi_fsub>
 800fe82:	4629      	mov	r1, r5
 800fe84:	f7f0 ff5e 	bl	8000d44 <__aeabi_fmul>
 800fe88:	4925      	ldr	r1, [pc, #148]	; (800ff20 <__kernel_sinf+0xdc>)
 800fe8a:	f7f0 fe53 	bl	8000b34 <__addsf3>
 800fe8e:	4629      	mov	r1, r5
 800fe90:	f7f0 ff58 	bl	8000d44 <__aeabi_fmul>
 800fe94:	4923      	ldr	r1, [pc, #140]	; (800ff24 <__kernel_sinf+0xe0>)
 800fe96:	f7f0 fe4b 	bl	8000b30 <__aeabi_fsub>
 800fe9a:	4629      	mov	r1, r5
 800fe9c:	f7f0 ff52 	bl	8000d44 <__aeabi_fmul>
 800fea0:	4921      	ldr	r1, [pc, #132]	; (800ff28 <__kernel_sinf+0xe4>)
 800fea2:	f7f0 fe47 	bl	8000b34 <__addsf3>
 800fea6:	4680      	mov	r8, r0
 800fea8:	f1b9 0f00 	cmp.w	r9, #0
 800feac:	d111      	bne.n	800fed2 <__kernel_sinf+0x8e>
 800feae:	4601      	mov	r1, r0
 800feb0:	4628      	mov	r0, r5
 800feb2:	f7f0 ff47 	bl	8000d44 <__aeabi_fmul>
 800feb6:	491d      	ldr	r1, [pc, #116]	; (800ff2c <__kernel_sinf+0xe8>)
 800feb8:	f7f0 fe3a 	bl	8000b30 <__aeabi_fsub>
 800febc:	4631      	mov	r1, r6
 800febe:	f7f0 ff41 	bl	8000d44 <__aeabi_fmul>
 800fec2:	4601      	mov	r1, r0
 800fec4:	4620      	mov	r0, r4
 800fec6:	f7f0 fe35 	bl	8000b34 <__addsf3>
 800feca:	4604      	mov	r4, r0
 800fecc:	4620      	mov	r0, r4
 800fece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fed2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800fed6:	4638      	mov	r0, r7
 800fed8:	f7f0 ff34 	bl	8000d44 <__aeabi_fmul>
 800fedc:	4641      	mov	r1, r8
 800fede:	4681      	mov	r9, r0
 800fee0:	4630      	mov	r0, r6
 800fee2:	f7f0 ff2f 	bl	8000d44 <__aeabi_fmul>
 800fee6:	4601      	mov	r1, r0
 800fee8:	4648      	mov	r0, r9
 800feea:	f7f0 fe21 	bl	8000b30 <__aeabi_fsub>
 800feee:	4629      	mov	r1, r5
 800fef0:	f7f0 ff28 	bl	8000d44 <__aeabi_fmul>
 800fef4:	4639      	mov	r1, r7
 800fef6:	f7f0 fe1b 	bl	8000b30 <__aeabi_fsub>
 800fefa:	490c      	ldr	r1, [pc, #48]	; (800ff2c <__kernel_sinf+0xe8>)
 800fefc:	4605      	mov	r5, r0
 800fefe:	4630      	mov	r0, r6
 800ff00:	f7f0 ff20 	bl	8000d44 <__aeabi_fmul>
 800ff04:	4601      	mov	r1, r0
 800ff06:	4628      	mov	r0, r5
 800ff08:	f7f0 fe14 	bl	8000b34 <__addsf3>
 800ff0c:	4601      	mov	r1, r0
 800ff0e:	4620      	mov	r0, r4
 800ff10:	f7f0 fe0e 	bl	8000b30 <__aeabi_fsub>
 800ff14:	e7d9      	b.n	800feca <__kernel_sinf+0x86>
 800ff16:	bf00      	nop
 800ff18:	2f2ec9d3 	.word	0x2f2ec9d3
 800ff1c:	32d72f34 	.word	0x32d72f34
 800ff20:	3638ef1b 	.word	0x3638ef1b
 800ff24:	39500d01 	.word	0x39500d01
 800ff28:	3c088889 	.word	0x3c088889
 800ff2c:	3e2aaaab 	.word	0x3e2aaaab

0800ff30 <fabs>:
 800ff30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ff34:	4770      	bx	lr

0800ff36 <finite>:
 800ff36:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800ff3a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ff3e:	0fc0      	lsrs	r0, r0, #31
 800ff40:	4770      	bx	lr
	...

0800ff44 <nan>:
 800ff44:	2000      	movs	r0, #0
 800ff46:	4901      	ldr	r1, [pc, #4]	; (800ff4c <nan+0x8>)
 800ff48:	4770      	bx	lr
 800ff4a:	bf00      	nop
 800ff4c:	7ff80000 	.word	0x7ff80000

0800ff50 <rint>:
 800ff50:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800ff54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff56:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800ff5a:	2f13      	cmp	r7, #19
 800ff5c:	4602      	mov	r2, r0
 800ff5e:	460b      	mov	r3, r1
 800ff60:	460c      	mov	r4, r1
 800ff62:	4605      	mov	r5, r0
 800ff64:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800ff68:	dc59      	bgt.n	801001e <rint+0xce>
 800ff6a:	2f00      	cmp	r7, #0
 800ff6c:	da2a      	bge.n	800ffc4 <rint+0x74>
 800ff6e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ff72:	4301      	orrs	r1, r0
 800ff74:	d022      	beq.n	800ffbc <rint+0x6c>
 800ff76:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800ff7a:	4301      	orrs	r1, r0
 800ff7c:	424d      	negs	r5, r1
 800ff7e:	430d      	orrs	r5, r1
 800ff80:	4936      	ldr	r1, [pc, #216]	; (801005c <rint+0x10c>)
 800ff82:	0c5c      	lsrs	r4, r3, #17
 800ff84:	0b2d      	lsrs	r5, r5, #12
 800ff86:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800ff8a:	0464      	lsls	r4, r4, #17
 800ff8c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ff90:	ea45 0304 	orr.w	r3, r5, r4
 800ff94:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ff98:	4620      	mov	r0, r4
 800ff9a:	4629      	mov	r1, r5
 800ff9c:	f7f0 f8e6 	bl	800016c <__adddf3>
 800ffa0:	e9cd 0100 	strd	r0, r1, [sp]
 800ffa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffa8:	462b      	mov	r3, r5
 800ffaa:	4622      	mov	r2, r4
 800ffac:	f7f0 f8dc 	bl	8000168 <__aeabi_dsub>
 800ffb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ffb4:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800ffb8:	4602      	mov	r2, r0
 800ffba:	460b      	mov	r3, r1
 800ffbc:	4610      	mov	r0, r2
 800ffbe:	4619      	mov	r1, r3
 800ffc0:	b003      	add	sp, #12
 800ffc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffc4:	4926      	ldr	r1, [pc, #152]	; (8010060 <rint+0x110>)
 800ffc6:	4139      	asrs	r1, r7
 800ffc8:	ea03 0001 	and.w	r0, r3, r1
 800ffcc:	4310      	orrs	r0, r2
 800ffce:	d0f5      	beq.n	800ffbc <rint+0x6c>
 800ffd0:	084b      	lsrs	r3, r1, #1
 800ffd2:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800ffd6:	ea52 0501 	orrs.w	r5, r2, r1
 800ffda:	d00c      	beq.n	800fff6 <rint+0xa6>
 800ffdc:	ea24 0303 	bic.w	r3, r4, r3
 800ffe0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800ffe4:	2f13      	cmp	r7, #19
 800ffe6:	bf0c      	ite	eq
 800ffe8:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800ffec:	2500      	movne	r5, #0
 800ffee:	fa44 f707 	asr.w	r7, r4, r7
 800fff2:	ea43 0407 	orr.w	r4, r3, r7
 800fff6:	4919      	ldr	r1, [pc, #100]	; (801005c <rint+0x10c>)
 800fff8:	4623      	mov	r3, r4
 800fffa:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800fffe:	462a      	mov	r2, r5
 8010000:	e9d6 4500 	ldrd	r4, r5, [r6]
 8010004:	4620      	mov	r0, r4
 8010006:	4629      	mov	r1, r5
 8010008:	f7f0 f8b0 	bl	800016c <__adddf3>
 801000c:	e9cd 0100 	strd	r0, r1, [sp]
 8010010:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010014:	4622      	mov	r2, r4
 8010016:	462b      	mov	r3, r5
 8010018:	f7f0 f8a6 	bl	8000168 <__aeabi_dsub>
 801001c:	e7cc      	b.n	800ffb8 <rint+0x68>
 801001e:	2f33      	cmp	r7, #51	; 0x33
 8010020:	dd05      	ble.n	801002e <rint+0xde>
 8010022:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8010026:	d1c9      	bne.n	800ffbc <rint+0x6c>
 8010028:	f7f0 f8a0 	bl	800016c <__adddf3>
 801002c:	e7c4      	b.n	800ffb8 <rint+0x68>
 801002e:	f04f 31ff 	mov.w	r1, #4294967295
 8010032:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8010036:	fa21 f10c 	lsr.w	r1, r1, ip
 801003a:	4208      	tst	r0, r1
 801003c:	d0be      	beq.n	800ffbc <rint+0x6c>
 801003e:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8010042:	bf18      	it	ne
 8010044:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8010048:	ea4f 0351 	mov.w	r3, r1, lsr #1
 801004c:	bf1e      	ittt	ne
 801004e:	ea20 0303 	bicne.w	r3, r0, r3
 8010052:	fa45 fc0c 	asrne.w	ip, r5, ip
 8010056:	ea43 050c 	orrne.w	r5, r3, ip
 801005a:	e7cc      	b.n	800fff6 <rint+0xa6>
 801005c:	08011588 	.word	0x08011588
 8010060:	000fffff 	.word	0x000fffff
 8010064:	00000000 	.word	0x00000000

08010068 <scalbn>:
 8010068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801006a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 801006e:	4604      	mov	r4, r0
 8010070:	460d      	mov	r5, r1
 8010072:	4617      	mov	r7, r2
 8010074:	460b      	mov	r3, r1
 8010076:	b996      	cbnz	r6, 801009e <scalbn+0x36>
 8010078:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801007c:	4303      	orrs	r3, r0
 801007e:	d039      	beq.n	80100f4 <scalbn+0x8c>
 8010080:	4b35      	ldr	r3, [pc, #212]	; (8010158 <scalbn+0xf0>)
 8010082:	2200      	movs	r2, #0
 8010084:	f7f0 fa28 	bl	80004d8 <__aeabi_dmul>
 8010088:	4b34      	ldr	r3, [pc, #208]	; (801015c <scalbn+0xf4>)
 801008a:	4604      	mov	r4, r0
 801008c:	429f      	cmp	r7, r3
 801008e:	460d      	mov	r5, r1
 8010090:	da0f      	bge.n	80100b2 <scalbn+0x4a>
 8010092:	a32d      	add	r3, pc, #180	; (adr r3, 8010148 <scalbn+0xe0>)
 8010094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010098:	f7f0 fa1e 	bl	80004d8 <__aeabi_dmul>
 801009c:	e006      	b.n	80100ac <scalbn+0x44>
 801009e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80100a2:	4296      	cmp	r6, r2
 80100a4:	d10a      	bne.n	80100bc <scalbn+0x54>
 80100a6:	4602      	mov	r2, r0
 80100a8:	f7f0 f860 	bl	800016c <__adddf3>
 80100ac:	4604      	mov	r4, r0
 80100ae:	460d      	mov	r5, r1
 80100b0:	e020      	b.n	80100f4 <scalbn+0x8c>
 80100b2:	460b      	mov	r3, r1
 80100b4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80100b8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80100bc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80100c0:	19b9      	adds	r1, r7, r6
 80100c2:	4291      	cmp	r1, r2
 80100c4:	dd0e      	ble.n	80100e4 <scalbn+0x7c>
 80100c6:	a322      	add	r3, pc, #136	; (adr r3, 8010150 <scalbn+0xe8>)
 80100c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100cc:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80100d0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80100d4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80100d8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80100dc:	4820      	ldr	r0, [pc, #128]	; (8010160 <scalbn+0xf8>)
 80100de:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80100e2:	e7d9      	b.n	8010098 <scalbn+0x30>
 80100e4:	2900      	cmp	r1, #0
 80100e6:	dd08      	ble.n	80100fa <scalbn+0x92>
 80100e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80100ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80100f0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80100f4:	4620      	mov	r0, r4
 80100f6:	4629      	mov	r1, r5
 80100f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100fa:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80100fe:	da16      	bge.n	801012e <scalbn+0xc6>
 8010100:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010104:	429f      	cmp	r7, r3
 8010106:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 801010a:	dd08      	ble.n	801011e <scalbn+0xb6>
 801010c:	4c15      	ldr	r4, [pc, #84]	; (8010164 <scalbn+0xfc>)
 801010e:	4814      	ldr	r0, [pc, #80]	; (8010160 <scalbn+0xf8>)
 8010110:	f363 74df 	bfi	r4, r3, #31, #1
 8010114:	a30e      	add	r3, pc, #56	; (adr r3, 8010150 <scalbn+0xe8>)
 8010116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011a:	4621      	mov	r1, r4
 801011c:	e7bc      	b.n	8010098 <scalbn+0x30>
 801011e:	4c12      	ldr	r4, [pc, #72]	; (8010168 <scalbn+0x100>)
 8010120:	4812      	ldr	r0, [pc, #72]	; (801016c <scalbn+0x104>)
 8010122:	f363 74df 	bfi	r4, r3, #31, #1
 8010126:	a308      	add	r3, pc, #32	; (adr r3, 8010148 <scalbn+0xe0>)
 8010128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801012c:	e7f5      	b.n	801011a <scalbn+0xb2>
 801012e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010132:	3136      	adds	r1, #54	; 0x36
 8010134:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010138:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 801013c:	4620      	mov	r0, r4
 801013e:	4629      	mov	r1, r5
 8010140:	2200      	movs	r2, #0
 8010142:	4b0b      	ldr	r3, [pc, #44]	; (8010170 <scalbn+0x108>)
 8010144:	e7a8      	b.n	8010098 <scalbn+0x30>
 8010146:	bf00      	nop
 8010148:	c2f8f359 	.word	0xc2f8f359
 801014c:	01a56e1f 	.word	0x01a56e1f
 8010150:	8800759c 	.word	0x8800759c
 8010154:	7e37e43c 	.word	0x7e37e43c
 8010158:	43500000 	.word	0x43500000
 801015c:	ffff3cb0 	.word	0xffff3cb0
 8010160:	8800759c 	.word	0x8800759c
 8010164:	7e37e43c 	.word	0x7e37e43c
 8010168:	01a56e1f 	.word	0x01a56e1f
 801016c:	c2f8f359 	.word	0xc2f8f359
 8010170:	3c900000 	.word	0x3c900000

08010174 <floorf>:
 8010174:	b570      	push	{r4, r5, r6, lr}
 8010176:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 801017a:	3d7f      	subs	r5, #127	; 0x7f
 801017c:	2d16      	cmp	r5, #22
 801017e:	4601      	mov	r1, r0
 8010180:	4604      	mov	r4, r0
 8010182:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8010186:	dc26      	bgt.n	80101d6 <floorf+0x62>
 8010188:	2d00      	cmp	r5, #0
 801018a:	da0e      	bge.n	80101aa <floorf+0x36>
 801018c:	4917      	ldr	r1, [pc, #92]	; (80101ec <floorf+0x78>)
 801018e:	f7f0 fcd1 	bl	8000b34 <__addsf3>
 8010192:	2100      	movs	r1, #0
 8010194:	f7f0 ff92 	bl	80010bc <__aeabi_fcmpgt>
 8010198:	b128      	cbz	r0, 80101a6 <floorf+0x32>
 801019a:	2c00      	cmp	r4, #0
 801019c:	da23      	bge.n	80101e6 <floorf+0x72>
 801019e:	4b14      	ldr	r3, [pc, #80]	; (80101f0 <floorf+0x7c>)
 80101a0:	2e00      	cmp	r6, #0
 80101a2:	bf18      	it	ne
 80101a4:	461c      	movne	r4, r3
 80101a6:	4621      	mov	r1, r4
 80101a8:	e01b      	b.n	80101e2 <floorf+0x6e>
 80101aa:	4e12      	ldr	r6, [pc, #72]	; (80101f4 <floorf+0x80>)
 80101ac:	412e      	asrs	r6, r5
 80101ae:	4230      	tst	r0, r6
 80101b0:	d017      	beq.n	80101e2 <floorf+0x6e>
 80101b2:	490e      	ldr	r1, [pc, #56]	; (80101ec <floorf+0x78>)
 80101b4:	f7f0 fcbe 	bl	8000b34 <__addsf3>
 80101b8:	2100      	movs	r1, #0
 80101ba:	f7f0 ff7f 	bl	80010bc <__aeabi_fcmpgt>
 80101be:	2800      	cmp	r0, #0
 80101c0:	d0f1      	beq.n	80101a6 <floorf+0x32>
 80101c2:	2c00      	cmp	r4, #0
 80101c4:	bfbe      	ittt	lt
 80101c6:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 80101ca:	fa43 f505 	asrlt.w	r5, r3, r5
 80101ce:	1964      	addlt	r4, r4, r5
 80101d0:	ea24 0406 	bic.w	r4, r4, r6
 80101d4:	e7e7      	b.n	80101a6 <floorf+0x32>
 80101d6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80101da:	d302      	bcc.n	80101e2 <floorf+0x6e>
 80101dc:	f7f0 fcaa 	bl	8000b34 <__addsf3>
 80101e0:	4601      	mov	r1, r0
 80101e2:	4608      	mov	r0, r1
 80101e4:	bd70      	pop	{r4, r5, r6, pc}
 80101e6:	2400      	movs	r4, #0
 80101e8:	e7dd      	b.n	80101a6 <floorf+0x32>
 80101ea:	bf00      	nop
 80101ec:	7149f2ca 	.word	0x7149f2ca
 80101f0:	bf800000 	.word	0xbf800000
 80101f4:	007fffff 	.word	0x007fffff

080101f8 <nanf>:
 80101f8:	4800      	ldr	r0, [pc, #0]	; (80101fc <nanf+0x4>)
 80101fa:	4770      	bx	lr
 80101fc:	7fc00000 	.word	0x7fc00000

08010200 <scalbnf>:
 8010200:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8010204:	b538      	push	{r3, r4, r5, lr}
 8010206:	4603      	mov	r3, r0
 8010208:	460d      	mov	r5, r1
 801020a:	4604      	mov	r4, r0
 801020c:	d02a      	beq.n	8010264 <scalbnf+0x64>
 801020e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8010212:	d304      	bcc.n	801021e <scalbnf+0x1e>
 8010214:	4601      	mov	r1, r0
 8010216:	f7f0 fc8d 	bl	8000b34 <__addsf3>
 801021a:	4603      	mov	r3, r0
 801021c:	e022      	b.n	8010264 <scalbnf+0x64>
 801021e:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8010222:	d117      	bne.n	8010254 <scalbnf+0x54>
 8010224:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8010228:	f7f0 fd8c 	bl	8000d44 <__aeabi_fmul>
 801022c:	4a17      	ldr	r2, [pc, #92]	; (801028c <scalbnf+0x8c>)
 801022e:	4603      	mov	r3, r0
 8010230:	4295      	cmp	r5, r2
 8010232:	db0b      	blt.n	801024c <scalbnf+0x4c>
 8010234:	4604      	mov	r4, r0
 8010236:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801023a:	3a19      	subs	r2, #25
 801023c:	442a      	add	r2, r5
 801023e:	2afe      	cmp	r2, #254	; 0xfe
 8010240:	dd0a      	ble.n	8010258 <scalbnf+0x58>
 8010242:	4913      	ldr	r1, [pc, #76]	; (8010290 <scalbnf+0x90>)
 8010244:	4618      	mov	r0, r3
 8010246:	f361 001e 	bfi	r0, r1, #0, #31
 801024a:	e000      	b.n	801024e <scalbnf+0x4e>
 801024c:	4911      	ldr	r1, [pc, #68]	; (8010294 <scalbnf+0x94>)
 801024e:	f7f0 fd79 	bl	8000d44 <__aeabi_fmul>
 8010252:	e7e2      	b.n	801021a <scalbnf+0x1a>
 8010254:	0dd2      	lsrs	r2, r2, #23
 8010256:	e7f1      	b.n	801023c <scalbnf+0x3c>
 8010258:	2a00      	cmp	r2, #0
 801025a:	dd05      	ble.n	8010268 <scalbnf+0x68>
 801025c:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8010260:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8010264:	4618      	mov	r0, r3
 8010266:	bd38      	pop	{r3, r4, r5, pc}
 8010268:	f112 0f16 	cmn.w	r2, #22
 801026c:	da05      	bge.n	801027a <scalbnf+0x7a>
 801026e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8010272:	4295      	cmp	r5, r2
 8010274:	dce5      	bgt.n	8010242 <scalbnf+0x42>
 8010276:	4907      	ldr	r1, [pc, #28]	; (8010294 <scalbnf+0x94>)
 8010278:	e7e4      	b.n	8010244 <scalbnf+0x44>
 801027a:	3219      	adds	r2, #25
 801027c:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8010280:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8010284:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8010288:	e7e1      	b.n	801024e <scalbnf+0x4e>
 801028a:	bf00      	nop
 801028c:	ffff3cb0 	.word	0xffff3cb0
 8010290:	7149f2ca 	.word	0x7149f2ca
 8010294:	0da24260 	.word	0x0da24260

08010298 <__errno>:
 8010298:	4b01      	ldr	r3, [pc, #4]	; (80102a0 <__errno+0x8>)
 801029a:	6818      	ldr	r0, [r3, #0]
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop
 80102a0:	2000001c 	.word	0x2000001c

080102a4 <__libc_init_array>:
 80102a4:	b570      	push	{r4, r5, r6, lr}
 80102a6:	2600      	movs	r6, #0
 80102a8:	4d0c      	ldr	r5, [pc, #48]	; (80102dc <__libc_init_array+0x38>)
 80102aa:	4c0d      	ldr	r4, [pc, #52]	; (80102e0 <__libc_init_array+0x3c>)
 80102ac:	1b64      	subs	r4, r4, r5
 80102ae:	10a4      	asrs	r4, r4, #2
 80102b0:	42a6      	cmp	r6, r4
 80102b2:	d109      	bne.n	80102c8 <__libc_init_array+0x24>
 80102b4:	f000 fc5c 	bl	8010b70 <_init>
 80102b8:	2600      	movs	r6, #0
 80102ba:	4d0a      	ldr	r5, [pc, #40]	; (80102e4 <__libc_init_array+0x40>)
 80102bc:	4c0a      	ldr	r4, [pc, #40]	; (80102e8 <__libc_init_array+0x44>)
 80102be:	1b64      	subs	r4, r4, r5
 80102c0:	10a4      	asrs	r4, r4, #2
 80102c2:	42a6      	cmp	r6, r4
 80102c4:	d105      	bne.n	80102d2 <__libc_init_array+0x2e>
 80102c6:	bd70      	pop	{r4, r5, r6, pc}
 80102c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80102cc:	4798      	blx	r3
 80102ce:	3601      	adds	r6, #1
 80102d0:	e7ee      	b.n	80102b0 <__libc_init_array+0xc>
 80102d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80102d6:	4798      	blx	r3
 80102d8:	3601      	adds	r6, #1
 80102da:	e7f2      	b.n	80102c2 <__libc_init_array+0x1e>
 80102dc:	0801162c 	.word	0x0801162c
 80102e0:	0801162c 	.word	0x0801162c
 80102e4:	0801162c 	.word	0x0801162c
 80102e8:	08011634 	.word	0x08011634

080102ec <memcpy>:
 80102ec:	440a      	add	r2, r1
 80102ee:	4291      	cmp	r1, r2
 80102f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80102f4:	d100      	bne.n	80102f8 <memcpy+0xc>
 80102f6:	4770      	bx	lr
 80102f8:	b510      	push	{r4, lr}
 80102fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102fe:	4291      	cmp	r1, r2
 8010300:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010304:	d1f9      	bne.n	80102fa <memcpy+0xe>
 8010306:	bd10      	pop	{r4, pc}

08010308 <memset>:
 8010308:	4603      	mov	r3, r0
 801030a:	4402      	add	r2, r0
 801030c:	4293      	cmp	r3, r2
 801030e:	d100      	bne.n	8010312 <memset+0xa>
 8010310:	4770      	bx	lr
 8010312:	f803 1b01 	strb.w	r1, [r3], #1
 8010316:	e7f9      	b.n	801030c <memset+0x4>

08010318 <_free_r>:
 8010318:	b538      	push	{r3, r4, r5, lr}
 801031a:	4605      	mov	r5, r0
 801031c:	2900      	cmp	r1, #0
 801031e:	d043      	beq.n	80103a8 <_free_r+0x90>
 8010320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010324:	1f0c      	subs	r4, r1, #4
 8010326:	2b00      	cmp	r3, #0
 8010328:	bfb8      	it	lt
 801032a:	18e4      	addlt	r4, r4, r3
 801032c:	f000 f8cc 	bl	80104c8 <__malloc_lock>
 8010330:	4a1e      	ldr	r2, [pc, #120]	; (80103ac <_free_r+0x94>)
 8010332:	6813      	ldr	r3, [r2, #0]
 8010334:	4610      	mov	r0, r2
 8010336:	b933      	cbnz	r3, 8010346 <_free_r+0x2e>
 8010338:	6063      	str	r3, [r4, #4]
 801033a:	6014      	str	r4, [r2, #0]
 801033c:	4628      	mov	r0, r5
 801033e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010342:	f000 b8c7 	b.w	80104d4 <__malloc_unlock>
 8010346:	42a3      	cmp	r3, r4
 8010348:	d90a      	bls.n	8010360 <_free_r+0x48>
 801034a:	6821      	ldr	r1, [r4, #0]
 801034c:	1862      	adds	r2, r4, r1
 801034e:	4293      	cmp	r3, r2
 8010350:	bf01      	itttt	eq
 8010352:	681a      	ldreq	r2, [r3, #0]
 8010354:	685b      	ldreq	r3, [r3, #4]
 8010356:	1852      	addeq	r2, r2, r1
 8010358:	6022      	streq	r2, [r4, #0]
 801035a:	6063      	str	r3, [r4, #4]
 801035c:	6004      	str	r4, [r0, #0]
 801035e:	e7ed      	b.n	801033c <_free_r+0x24>
 8010360:	461a      	mov	r2, r3
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	b10b      	cbz	r3, 801036a <_free_r+0x52>
 8010366:	42a3      	cmp	r3, r4
 8010368:	d9fa      	bls.n	8010360 <_free_r+0x48>
 801036a:	6811      	ldr	r1, [r2, #0]
 801036c:	1850      	adds	r0, r2, r1
 801036e:	42a0      	cmp	r0, r4
 8010370:	d10b      	bne.n	801038a <_free_r+0x72>
 8010372:	6820      	ldr	r0, [r4, #0]
 8010374:	4401      	add	r1, r0
 8010376:	1850      	adds	r0, r2, r1
 8010378:	4283      	cmp	r3, r0
 801037a:	6011      	str	r1, [r2, #0]
 801037c:	d1de      	bne.n	801033c <_free_r+0x24>
 801037e:	6818      	ldr	r0, [r3, #0]
 8010380:	685b      	ldr	r3, [r3, #4]
 8010382:	4401      	add	r1, r0
 8010384:	6011      	str	r1, [r2, #0]
 8010386:	6053      	str	r3, [r2, #4]
 8010388:	e7d8      	b.n	801033c <_free_r+0x24>
 801038a:	d902      	bls.n	8010392 <_free_r+0x7a>
 801038c:	230c      	movs	r3, #12
 801038e:	602b      	str	r3, [r5, #0]
 8010390:	e7d4      	b.n	801033c <_free_r+0x24>
 8010392:	6820      	ldr	r0, [r4, #0]
 8010394:	1821      	adds	r1, r4, r0
 8010396:	428b      	cmp	r3, r1
 8010398:	bf01      	itttt	eq
 801039a:	6819      	ldreq	r1, [r3, #0]
 801039c:	685b      	ldreq	r3, [r3, #4]
 801039e:	1809      	addeq	r1, r1, r0
 80103a0:	6021      	streq	r1, [r4, #0]
 80103a2:	6063      	str	r3, [r4, #4]
 80103a4:	6054      	str	r4, [r2, #4]
 80103a6:	e7c9      	b.n	801033c <_free_r+0x24>
 80103a8:	bd38      	pop	{r3, r4, r5, pc}
 80103aa:	bf00      	nop
 80103ac:	200016d4 	.word	0x200016d4

080103b0 <_malloc_r>:
 80103b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103b2:	1ccd      	adds	r5, r1, #3
 80103b4:	f025 0503 	bic.w	r5, r5, #3
 80103b8:	3508      	adds	r5, #8
 80103ba:	2d0c      	cmp	r5, #12
 80103bc:	bf38      	it	cc
 80103be:	250c      	movcc	r5, #12
 80103c0:	2d00      	cmp	r5, #0
 80103c2:	4606      	mov	r6, r0
 80103c4:	db01      	blt.n	80103ca <_malloc_r+0x1a>
 80103c6:	42a9      	cmp	r1, r5
 80103c8:	d903      	bls.n	80103d2 <_malloc_r+0x22>
 80103ca:	230c      	movs	r3, #12
 80103cc:	6033      	str	r3, [r6, #0]
 80103ce:	2000      	movs	r0, #0
 80103d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103d2:	f000 f879 	bl	80104c8 <__malloc_lock>
 80103d6:	4921      	ldr	r1, [pc, #132]	; (801045c <_malloc_r+0xac>)
 80103d8:	680a      	ldr	r2, [r1, #0]
 80103da:	4614      	mov	r4, r2
 80103dc:	b99c      	cbnz	r4, 8010406 <_malloc_r+0x56>
 80103de:	4f20      	ldr	r7, [pc, #128]	; (8010460 <_malloc_r+0xb0>)
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	b923      	cbnz	r3, 80103ee <_malloc_r+0x3e>
 80103e4:	4621      	mov	r1, r4
 80103e6:	4630      	mov	r0, r6
 80103e8:	f000 f83c 	bl	8010464 <_sbrk_r>
 80103ec:	6038      	str	r0, [r7, #0]
 80103ee:	4629      	mov	r1, r5
 80103f0:	4630      	mov	r0, r6
 80103f2:	f000 f837 	bl	8010464 <_sbrk_r>
 80103f6:	1c43      	adds	r3, r0, #1
 80103f8:	d123      	bne.n	8010442 <_malloc_r+0x92>
 80103fa:	230c      	movs	r3, #12
 80103fc:	4630      	mov	r0, r6
 80103fe:	6033      	str	r3, [r6, #0]
 8010400:	f000 f868 	bl	80104d4 <__malloc_unlock>
 8010404:	e7e3      	b.n	80103ce <_malloc_r+0x1e>
 8010406:	6823      	ldr	r3, [r4, #0]
 8010408:	1b5b      	subs	r3, r3, r5
 801040a:	d417      	bmi.n	801043c <_malloc_r+0x8c>
 801040c:	2b0b      	cmp	r3, #11
 801040e:	d903      	bls.n	8010418 <_malloc_r+0x68>
 8010410:	6023      	str	r3, [r4, #0]
 8010412:	441c      	add	r4, r3
 8010414:	6025      	str	r5, [r4, #0]
 8010416:	e004      	b.n	8010422 <_malloc_r+0x72>
 8010418:	6863      	ldr	r3, [r4, #4]
 801041a:	42a2      	cmp	r2, r4
 801041c:	bf0c      	ite	eq
 801041e:	600b      	streq	r3, [r1, #0]
 8010420:	6053      	strne	r3, [r2, #4]
 8010422:	4630      	mov	r0, r6
 8010424:	f000 f856 	bl	80104d4 <__malloc_unlock>
 8010428:	f104 000b 	add.w	r0, r4, #11
 801042c:	1d23      	adds	r3, r4, #4
 801042e:	f020 0007 	bic.w	r0, r0, #7
 8010432:	1ac2      	subs	r2, r0, r3
 8010434:	d0cc      	beq.n	80103d0 <_malloc_r+0x20>
 8010436:	1a1b      	subs	r3, r3, r0
 8010438:	50a3      	str	r3, [r4, r2]
 801043a:	e7c9      	b.n	80103d0 <_malloc_r+0x20>
 801043c:	4622      	mov	r2, r4
 801043e:	6864      	ldr	r4, [r4, #4]
 8010440:	e7cc      	b.n	80103dc <_malloc_r+0x2c>
 8010442:	1cc4      	adds	r4, r0, #3
 8010444:	f024 0403 	bic.w	r4, r4, #3
 8010448:	42a0      	cmp	r0, r4
 801044a:	d0e3      	beq.n	8010414 <_malloc_r+0x64>
 801044c:	1a21      	subs	r1, r4, r0
 801044e:	4630      	mov	r0, r6
 8010450:	f000 f808 	bl	8010464 <_sbrk_r>
 8010454:	3001      	adds	r0, #1
 8010456:	d1dd      	bne.n	8010414 <_malloc_r+0x64>
 8010458:	e7cf      	b.n	80103fa <_malloc_r+0x4a>
 801045a:	bf00      	nop
 801045c:	200016d4 	.word	0x200016d4
 8010460:	200016d8 	.word	0x200016d8

08010464 <_sbrk_r>:
 8010464:	b538      	push	{r3, r4, r5, lr}
 8010466:	2300      	movs	r3, #0
 8010468:	4d05      	ldr	r5, [pc, #20]	; (8010480 <_sbrk_r+0x1c>)
 801046a:	4604      	mov	r4, r0
 801046c:	4608      	mov	r0, r1
 801046e:	602b      	str	r3, [r5, #0]
 8010470:	f7f5 f864 	bl	800553c <_sbrk>
 8010474:	1c43      	adds	r3, r0, #1
 8010476:	d102      	bne.n	801047e <_sbrk_r+0x1a>
 8010478:	682b      	ldr	r3, [r5, #0]
 801047a:	b103      	cbz	r3, 801047e <_sbrk_r+0x1a>
 801047c:	6023      	str	r3, [r4, #0]
 801047e:	bd38      	pop	{r3, r4, r5, pc}
 8010480:	20001a50 	.word	0x20001a50

08010484 <siprintf>:
 8010484:	b40e      	push	{r1, r2, r3}
 8010486:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801048a:	b500      	push	{lr}
 801048c:	b09c      	sub	sp, #112	; 0x70
 801048e:	ab1d      	add	r3, sp, #116	; 0x74
 8010490:	9002      	str	r0, [sp, #8]
 8010492:	9006      	str	r0, [sp, #24]
 8010494:	9107      	str	r1, [sp, #28]
 8010496:	9104      	str	r1, [sp, #16]
 8010498:	4808      	ldr	r0, [pc, #32]	; (80104bc <siprintf+0x38>)
 801049a:	4909      	ldr	r1, [pc, #36]	; (80104c0 <siprintf+0x3c>)
 801049c:	f853 2b04 	ldr.w	r2, [r3], #4
 80104a0:	9105      	str	r1, [sp, #20]
 80104a2:	6800      	ldr	r0, [r0, #0]
 80104a4:	a902      	add	r1, sp, #8
 80104a6:	9301      	str	r3, [sp, #4]
 80104a8:	f000 f876 	bl	8010598 <_svfiprintf_r>
 80104ac:	2200      	movs	r2, #0
 80104ae:	9b02      	ldr	r3, [sp, #8]
 80104b0:	701a      	strb	r2, [r3, #0]
 80104b2:	b01c      	add	sp, #112	; 0x70
 80104b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80104b8:	b003      	add	sp, #12
 80104ba:	4770      	bx	lr
 80104bc:	2000001c 	.word	0x2000001c
 80104c0:	ffff0208 	.word	0xffff0208

080104c4 <__retarget_lock_acquire_recursive>:
 80104c4:	4770      	bx	lr

080104c6 <__retarget_lock_release_recursive>:
 80104c6:	4770      	bx	lr

080104c8 <__malloc_lock>:
 80104c8:	4801      	ldr	r0, [pc, #4]	; (80104d0 <__malloc_lock+0x8>)
 80104ca:	f7ff bffb 	b.w	80104c4 <__retarget_lock_acquire_recursive>
 80104ce:	bf00      	nop
 80104d0:	20001a48 	.word	0x20001a48

080104d4 <__malloc_unlock>:
 80104d4:	4801      	ldr	r0, [pc, #4]	; (80104dc <__malloc_unlock+0x8>)
 80104d6:	f7ff bff6 	b.w	80104c6 <__retarget_lock_release_recursive>
 80104da:	bf00      	nop
 80104dc:	20001a48 	.word	0x20001a48

080104e0 <__ssputs_r>:
 80104e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104e4:	688e      	ldr	r6, [r1, #8]
 80104e6:	4682      	mov	sl, r0
 80104e8:	429e      	cmp	r6, r3
 80104ea:	460c      	mov	r4, r1
 80104ec:	4690      	mov	r8, r2
 80104ee:	461f      	mov	r7, r3
 80104f0:	d838      	bhi.n	8010564 <__ssputs_r+0x84>
 80104f2:	898a      	ldrh	r2, [r1, #12]
 80104f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80104f8:	d032      	beq.n	8010560 <__ssputs_r+0x80>
 80104fa:	6825      	ldr	r5, [r4, #0]
 80104fc:	6909      	ldr	r1, [r1, #16]
 80104fe:	3301      	adds	r3, #1
 8010500:	eba5 0901 	sub.w	r9, r5, r1
 8010504:	6965      	ldr	r5, [r4, #20]
 8010506:	444b      	add	r3, r9
 8010508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801050c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010510:	106d      	asrs	r5, r5, #1
 8010512:	429d      	cmp	r5, r3
 8010514:	bf38      	it	cc
 8010516:	461d      	movcc	r5, r3
 8010518:	0553      	lsls	r3, r2, #21
 801051a:	d531      	bpl.n	8010580 <__ssputs_r+0xa0>
 801051c:	4629      	mov	r1, r5
 801051e:	f7ff ff47 	bl	80103b0 <_malloc_r>
 8010522:	4606      	mov	r6, r0
 8010524:	b950      	cbnz	r0, 801053c <__ssputs_r+0x5c>
 8010526:	230c      	movs	r3, #12
 8010528:	f04f 30ff 	mov.w	r0, #4294967295
 801052c:	f8ca 3000 	str.w	r3, [sl]
 8010530:	89a3      	ldrh	r3, [r4, #12]
 8010532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010536:	81a3      	strh	r3, [r4, #12]
 8010538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801053c:	464a      	mov	r2, r9
 801053e:	6921      	ldr	r1, [r4, #16]
 8010540:	f7ff fed4 	bl	80102ec <memcpy>
 8010544:	89a3      	ldrh	r3, [r4, #12]
 8010546:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801054a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801054e:	81a3      	strh	r3, [r4, #12]
 8010550:	6126      	str	r6, [r4, #16]
 8010552:	444e      	add	r6, r9
 8010554:	6026      	str	r6, [r4, #0]
 8010556:	463e      	mov	r6, r7
 8010558:	6165      	str	r5, [r4, #20]
 801055a:	eba5 0509 	sub.w	r5, r5, r9
 801055e:	60a5      	str	r5, [r4, #8]
 8010560:	42be      	cmp	r6, r7
 8010562:	d900      	bls.n	8010566 <__ssputs_r+0x86>
 8010564:	463e      	mov	r6, r7
 8010566:	4632      	mov	r2, r6
 8010568:	4641      	mov	r1, r8
 801056a:	6820      	ldr	r0, [r4, #0]
 801056c:	f000 fab8 	bl	8010ae0 <memmove>
 8010570:	68a3      	ldr	r3, [r4, #8]
 8010572:	6822      	ldr	r2, [r4, #0]
 8010574:	1b9b      	subs	r3, r3, r6
 8010576:	4432      	add	r2, r6
 8010578:	2000      	movs	r0, #0
 801057a:	60a3      	str	r3, [r4, #8]
 801057c:	6022      	str	r2, [r4, #0]
 801057e:	e7db      	b.n	8010538 <__ssputs_r+0x58>
 8010580:	462a      	mov	r2, r5
 8010582:	f000 fac7 	bl	8010b14 <_realloc_r>
 8010586:	4606      	mov	r6, r0
 8010588:	2800      	cmp	r0, #0
 801058a:	d1e1      	bne.n	8010550 <__ssputs_r+0x70>
 801058c:	4650      	mov	r0, sl
 801058e:	6921      	ldr	r1, [r4, #16]
 8010590:	f7ff fec2 	bl	8010318 <_free_r>
 8010594:	e7c7      	b.n	8010526 <__ssputs_r+0x46>
	...

08010598 <_svfiprintf_r>:
 8010598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801059c:	4698      	mov	r8, r3
 801059e:	898b      	ldrh	r3, [r1, #12]
 80105a0:	4607      	mov	r7, r0
 80105a2:	061b      	lsls	r3, r3, #24
 80105a4:	460d      	mov	r5, r1
 80105a6:	4614      	mov	r4, r2
 80105a8:	b09d      	sub	sp, #116	; 0x74
 80105aa:	d50e      	bpl.n	80105ca <_svfiprintf_r+0x32>
 80105ac:	690b      	ldr	r3, [r1, #16]
 80105ae:	b963      	cbnz	r3, 80105ca <_svfiprintf_r+0x32>
 80105b0:	2140      	movs	r1, #64	; 0x40
 80105b2:	f7ff fefd 	bl	80103b0 <_malloc_r>
 80105b6:	6028      	str	r0, [r5, #0]
 80105b8:	6128      	str	r0, [r5, #16]
 80105ba:	b920      	cbnz	r0, 80105c6 <_svfiprintf_r+0x2e>
 80105bc:	230c      	movs	r3, #12
 80105be:	603b      	str	r3, [r7, #0]
 80105c0:	f04f 30ff 	mov.w	r0, #4294967295
 80105c4:	e0d1      	b.n	801076a <_svfiprintf_r+0x1d2>
 80105c6:	2340      	movs	r3, #64	; 0x40
 80105c8:	616b      	str	r3, [r5, #20]
 80105ca:	2300      	movs	r3, #0
 80105cc:	9309      	str	r3, [sp, #36]	; 0x24
 80105ce:	2320      	movs	r3, #32
 80105d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80105d4:	2330      	movs	r3, #48	; 0x30
 80105d6:	f04f 0901 	mov.w	r9, #1
 80105da:	f8cd 800c 	str.w	r8, [sp, #12]
 80105de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010784 <_svfiprintf_r+0x1ec>
 80105e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80105e6:	4623      	mov	r3, r4
 80105e8:	469a      	mov	sl, r3
 80105ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105ee:	b10a      	cbz	r2, 80105f4 <_svfiprintf_r+0x5c>
 80105f0:	2a25      	cmp	r2, #37	; 0x25
 80105f2:	d1f9      	bne.n	80105e8 <_svfiprintf_r+0x50>
 80105f4:	ebba 0b04 	subs.w	fp, sl, r4
 80105f8:	d00b      	beq.n	8010612 <_svfiprintf_r+0x7a>
 80105fa:	465b      	mov	r3, fp
 80105fc:	4622      	mov	r2, r4
 80105fe:	4629      	mov	r1, r5
 8010600:	4638      	mov	r0, r7
 8010602:	f7ff ff6d 	bl	80104e0 <__ssputs_r>
 8010606:	3001      	adds	r0, #1
 8010608:	f000 80aa 	beq.w	8010760 <_svfiprintf_r+0x1c8>
 801060c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801060e:	445a      	add	r2, fp
 8010610:	9209      	str	r2, [sp, #36]	; 0x24
 8010612:	f89a 3000 	ldrb.w	r3, [sl]
 8010616:	2b00      	cmp	r3, #0
 8010618:	f000 80a2 	beq.w	8010760 <_svfiprintf_r+0x1c8>
 801061c:	2300      	movs	r3, #0
 801061e:	f04f 32ff 	mov.w	r2, #4294967295
 8010622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010626:	f10a 0a01 	add.w	sl, sl, #1
 801062a:	9304      	str	r3, [sp, #16]
 801062c:	9307      	str	r3, [sp, #28]
 801062e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010632:	931a      	str	r3, [sp, #104]	; 0x68
 8010634:	4654      	mov	r4, sl
 8010636:	2205      	movs	r2, #5
 8010638:	f814 1b01 	ldrb.w	r1, [r4], #1
 801063c:	4851      	ldr	r0, [pc, #324]	; (8010784 <_svfiprintf_r+0x1ec>)
 801063e:	f000 fa41 	bl	8010ac4 <memchr>
 8010642:	9a04      	ldr	r2, [sp, #16]
 8010644:	b9d8      	cbnz	r0, 801067e <_svfiprintf_r+0xe6>
 8010646:	06d0      	lsls	r0, r2, #27
 8010648:	bf44      	itt	mi
 801064a:	2320      	movmi	r3, #32
 801064c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010650:	0711      	lsls	r1, r2, #28
 8010652:	bf44      	itt	mi
 8010654:	232b      	movmi	r3, #43	; 0x2b
 8010656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801065a:	f89a 3000 	ldrb.w	r3, [sl]
 801065e:	2b2a      	cmp	r3, #42	; 0x2a
 8010660:	d015      	beq.n	801068e <_svfiprintf_r+0xf6>
 8010662:	4654      	mov	r4, sl
 8010664:	2000      	movs	r0, #0
 8010666:	f04f 0c0a 	mov.w	ip, #10
 801066a:	9a07      	ldr	r2, [sp, #28]
 801066c:	4621      	mov	r1, r4
 801066e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010672:	3b30      	subs	r3, #48	; 0x30
 8010674:	2b09      	cmp	r3, #9
 8010676:	d94e      	bls.n	8010716 <_svfiprintf_r+0x17e>
 8010678:	b1b0      	cbz	r0, 80106a8 <_svfiprintf_r+0x110>
 801067a:	9207      	str	r2, [sp, #28]
 801067c:	e014      	b.n	80106a8 <_svfiprintf_r+0x110>
 801067e:	eba0 0308 	sub.w	r3, r0, r8
 8010682:	fa09 f303 	lsl.w	r3, r9, r3
 8010686:	4313      	orrs	r3, r2
 8010688:	46a2      	mov	sl, r4
 801068a:	9304      	str	r3, [sp, #16]
 801068c:	e7d2      	b.n	8010634 <_svfiprintf_r+0x9c>
 801068e:	9b03      	ldr	r3, [sp, #12]
 8010690:	1d19      	adds	r1, r3, #4
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	9103      	str	r1, [sp, #12]
 8010696:	2b00      	cmp	r3, #0
 8010698:	bfbb      	ittet	lt
 801069a:	425b      	neglt	r3, r3
 801069c:	f042 0202 	orrlt.w	r2, r2, #2
 80106a0:	9307      	strge	r3, [sp, #28]
 80106a2:	9307      	strlt	r3, [sp, #28]
 80106a4:	bfb8      	it	lt
 80106a6:	9204      	strlt	r2, [sp, #16]
 80106a8:	7823      	ldrb	r3, [r4, #0]
 80106aa:	2b2e      	cmp	r3, #46	; 0x2e
 80106ac:	d10c      	bne.n	80106c8 <_svfiprintf_r+0x130>
 80106ae:	7863      	ldrb	r3, [r4, #1]
 80106b0:	2b2a      	cmp	r3, #42	; 0x2a
 80106b2:	d135      	bne.n	8010720 <_svfiprintf_r+0x188>
 80106b4:	9b03      	ldr	r3, [sp, #12]
 80106b6:	3402      	adds	r4, #2
 80106b8:	1d1a      	adds	r2, r3, #4
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	9203      	str	r2, [sp, #12]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	bfb8      	it	lt
 80106c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80106c6:	9305      	str	r3, [sp, #20]
 80106c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010794 <_svfiprintf_r+0x1fc>
 80106cc:	2203      	movs	r2, #3
 80106ce:	4650      	mov	r0, sl
 80106d0:	7821      	ldrb	r1, [r4, #0]
 80106d2:	f000 f9f7 	bl	8010ac4 <memchr>
 80106d6:	b140      	cbz	r0, 80106ea <_svfiprintf_r+0x152>
 80106d8:	2340      	movs	r3, #64	; 0x40
 80106da:	eba0 000a 	sub.w	r0, r0, sl
 80106de:	fa03 f000 	lsl.w	r0, r3, r0
 80106e2:	9b04      	ldr	r3, [sp, #16]
 80106e4:	3401      	adds	r4, #1
 80106e6:	4303      	orrs	r3, r0
 80106e8:	9304      	str	r3, [sp, #16]
 80106ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106ee:	2206      	movs	r2, #6
 80106f0:	4825      	ldr	r0, [pc, #148]	; (8010788 <_svfiprintf_r+0x1f0>)
 80106f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80106f6:	f000 f9e5 	bl	8010ac4 <memchr>
 80106fa:	2800      	cmp	r0, #0
 80106fc:	d038      	beq.n	8010770 <_svfiprintf_r+0x1d8>
 80106fe:	4b23      	ldr	r3, [pc, #140]	; (801078c <_svfiprintf_r+0x1f4>)
 8010700:	bb1b      	cbnz	r3, 801074a <_svfiprintf_r+0x1b2>
 8010702:	9b03      	ldr	r3, [sp, #12]
 8010704:	3307      	adds	r3, #7
 8010706:	f023 0307 	bic.w	r3, r3, #7
 801070a:	3308      	adds	r3, #8
 801070c:	9303      	str	r3, [sp, #12]
 801070e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010710:	4433      	add	r3, r6
 8010712:	9309      	str	r3, [sp, #36]	; 0x24
 8010714:	e767      	b.n	80105e6 <_svfiprintf_r+0x4e>
 8010716:	460c      	mov	r4, r1
 8010718:	2001      	movs	r0, #1
 801071a:	fb0c 3202 	mla	r2, ip, r2, r3
 801071e:	e7a5      	b.n	801066c <_svfiprintf_r+0xd4>
 8010720:	2300      	movs	r3, #0
 8010722:	f04f 0c0a 	mov.w	ip, #10
 8010726:	4619      	mov	r1, r3
 8010728:	3401      	adds	r4, #1
 801072a:	9305      	str	r3, [sp, #20]
 801072c:	4620      	mov	r0, r4
 801072e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010732:	3a30      	subs	r2, #48	; 0x30
 8010734:	2a09      	cmp	r2, #9
 8010736:	d903      	bls.n	8010740 <_svfiprintf_r+0x1a8>
 8010738:	2b00      	cmp	r3, #0
 801073a:	d0c5      	beq.n	80106c8 <_svfiprintf_r+0x130>
 801073c:	9105      	str	r1, [sp, #20]
 801073e:	e7c3      	b.n	80106c8 <_svfiprintf_r+0x130>
 8010740:	4604      	mov	r4, r0
 8010742:	2301      	movs	r3, #1
 8010744:	fb0c 2101 	mla	r1, ip, r1, r2
 8010748:	e7f0      	b.n	801072c <_svfiprintf_r+0x194>
 801074a:	ab03      	add	r3, sp, #12
 801074c:	9300      	str	r3, [sp, #0]
 801074e:	462a      	mov	r2, r5
 8010750:	4638      	mov	r0, r7
 8010752:	4b0f      	ldr	r3, [pc, #60]	; (8010790 <_svfiprintf_r+0x1f8>)
 8010754:	a904      	add	r1, sp, #16
 8010756:	f3af 8000 	nop.w
 801075a:	1c42      	adds	r2, r0, #1
 801075c:	4606      	mov	r6, r0
 801075e:	d1d6      	bne.n	801070e <_svfiprintf_r+0x176>
 8010760:	89ab      	ldrh	r3, [r5, #12]
 8010762:	065b      	lsls	r3, r3, #25
 8010764:	f53f af2c 	bmi.w	80105c0 <_svfiprintf_r+0x28>
 8010768:	9809      	ldr	r0, [sp, #36]	; 0x24
 801076a:	b01d      	add	sp, #116	; 0x74
 801076c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010770:	ab03      	add	r3, sp, #12
 8010772:	9300      	str	r3, [sp, #0]
 8010774:	462a      	mov	r2, r5
 8010776:	4638      	mov	r0, r7
 8010778:	4b05      	ldr	r3, [pc, #20]	; (8010790 <_svfiprintf_r+0x1f8>)
 801077a:	a904      	add	r1, sp, #16
 801077c:	f000 f87c 	bl	8010878 <_printf_i>
 8010780:	e7eb      	b.n	801075a <_svfiprintf_r+0x1c2>
 8010782:	bf00      	nop
 8010784:	080115f8 	.word	0x080115f8
 8010788:	08011602 	.word	0x08011602
 801078c:	00000000 	.word	0x00000000
 8010790:	080104e1 	.word	0x080104e1
 8010794:	080115fe 	.word	0x080115fe

08010798 <_printf_common>:
 8010798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801079c:	4616      	mov	r6, r2
 801079e:	4699      	mov	r9, r3
 80107a0:	688a      	ldr	r2, [r1, #8]
 80107a2:	690b      	ldr	r3, [r1, #16]
 80107a4:	4607      	mov	r7, r0
 80107a6:	4293      	cmp	r3, r2
 80107a8:	bfb8      	it	lt
 80107aa:	4613      	movlt	r3, r2
 80107ac:	6033      	str	r3, [r6, #0]
 80107ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80107b2:	460c      	mov	r4, r1
 80107b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80107b8:	b10a      	cbz	r2, 80107be <_printf_common+0x26>
 80107ba:	3301      	adds	r3, #1
 80107bc:	6033      	str	r3, [r6, #0]
 80107be:	6823      	ldr	r3, [r4, #0]
 80107c0:	0699      	lsls	r1, r3, #26
 80107c2:	bf42      	ittt	mi
 80107c4:	6833      	ldrmi	r3, [r6, #0]
 80107c6:	3302      	addmi	r3, #2
 80107c8:	6033      	strmi	r3, [r6, #0]
 80107ca:	6825      	ldr	r5, [r4, #0]
 80107cc:	f015 0506 	ands.w	r5, r5, #6
 80107d0:	d106      	bne.n	80107e0 <_printf_common+0x48>
 80107d2:	f104 0a19 	add.w	sl, r4, #25
 80107d6:	68e3      	ldr	r3, [r4, #12]
 80107d8:	6832      	ldr	r2, [r6, #0]
 80107da:	1a9b      	subs	r3, r3, r2
 80107dc:	42ab      	cmp	r3, r5
 80107de:	dc28      	bgt.n	8010832 <_printf_common+0x9a>
 80107e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80107e4:	1e13      	subs	r3, r2, #0
 80107e6:	6822      	ldr	r2, [r4, #0]
 80107e8:	bf18      	it	ne
 80107ea:	2301      	movne	r3, #1
 80107ec:	0692      	lsls	r2, r2, #26
 80107ee:	d42d      	bmi.n	801084c <_printf_common+0xb4>
 80107f0:	4649      	mov	r1, r9
 80107f2:	4638      	mov	r0, r7
 80107f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80107f8:	47c0      	blx	r8
 80107fa:	3001      	adds	r0, #1
 80107fc:	d020      	beq.n	8010840 <_printf_common+0xa8>
 80107fe:	6823      	ldr	r3, [r4, #0]
 8010800:	68e5      	ldr	r5, [r4, #12]
 8010802:	f003 0306 	and.w	r3, r3, #6
 8010806:	2b04      	cmp	r3, #4
 8010808:	bf18      	it	ne
 801080a:	2500      	movne	r5, #0
 801080c:	6832      	ldr	r2, [r6, #0]
 801080e:	f04f 0600 	mov.w	r6, #0
 8010812:	68a3      	ldr	r3, [r4, #8]
 8010814:	bf08      	it	eq
 8010816:	1aad      	subeq	r5, r5, r2
 8010818:	6922      	ldr	r2, [r4, #16]
 801081a:	bf08      	it	eq
 801081c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010820:	4293      	cmp	r3, r2
 8010822:	bfc4      	itt	gt
 8010824:	1a9b      	subgt	r3, r3, r2
 8010826:	18ed      	addgt	r5, r5, r3
 8010828:	341a      	adds	r4, #26
 801082a:	42b5      	cmp	r5, r6
 801082c:	d11a      	bne.n	8010864 <_printf_common+0xcc>
 801082e:	2000      	movs	r0, #0
 8010830:	e008      	b.n	8010844 <_printf_common+0xac>
 8010832:	2301      	movs	r3, #1
 8010834:	4652      	mov	r2, sl
 8010836:	4649      	mov	r1, r9
 8010838:	4638      	mov	r0, r7
 801083a:	47c0      	blx	r8
 801083c:	3001      	adds	r0, #1
 801083e:	d103      	bne.n	8010848 <_printf_common+0xb0>
 8010840:	f04f 30ff 	mov.w	r0, #4294967295
 8010844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010848:	3501      	adds	r5, #1
 801084a:	e7c4      	b.n	80107d6 <_printf_common+0x3e>
 801084c:	2030      	movs	r0, #48	; 0x30
 801084e:	18e1      	adds	r1, r4, r3
 8010850:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010854:	1c5a      	adds	r2, r3, #1
 8010856:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801085a:	4422      	add	r2, r4
 801085c:	3302      	adds	r3, #2
 801085e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010862:	e7c5      	b.n	80107f0 <_printf_common+0x58>
 8010864:	2301      	movs	r3, #1
 8010866:	4622      	mov	r2, r4
 8010868:	4649      	mov	r1, r9
 801086a:	4638      	mov	r0, r7
 801086c:	47c0      	blx	r8
 801086e:	3001      	adds	r0, #1
 8010870:	d0e6      	beq.n	8010840 <_printf_common+0xa8>
 8010872:	3601      	adds	r6, #1
 8010874:	e7d9      	b.n	801082a <_printf_common+0x92>
	...

08010878 <_printf_i>:
 8010878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801087c:	460c      	mov	r4, r1
 801087e:	7e27      	ldrb	r7, [r4, #24]
 8010880:	4691      	mov	r9, r2
 8010882:	2f78      	cmp	r7, #120	; 0x78
 8010884:	4680      	mov	r8, r0
 8010886:	469a      	mov	sl, r3
 8010888:	990c      	ldr	r1, [sp, #48]	; 0x30
 801088a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801088e:	d807      	bhi.n	80108a0 <_printf_i+0x28>
 8010890:	2f62      	cmp	r7, #98	; 0x62
 8010892:	d80a      	bhi.n	80108aa <_printf_i+0x32>
 8010894:	2f00      	cmp	r7, #0
 8010896:	f000 80d9 	beq.w	8010a4c <_printf_i+0x1d4>
 801089a:	2f58      	cmp	r7, #88	; 0x58
 801089c:	f000 80a4 	beq.w	80109e8 <_printf_i+0x170>
 80108a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80108a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80108a8:	e03a      	b.n	8010920 <_printf_i+0xa8>
 80108aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80108ae:	2b15      	cmp	r3, #21
 80108b0:	d8f6      	bhi.n	80108a0 <_printf_i+0x28>
 80108b2:	a001      	add	r0, pc, #4	; (adr r0, 80108b8 <_printf_i+0x40>)
 80108b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80108b8:	08010911 	.word	0x08010911
 80108bc:	08010925 	.word	0x08010925
 80108c0:	080108a1 	.word	0x080108a1
 80108c4:	080108a1 	.word	0x080108a1
 80108c8:	080108a1 	.word	0x080108a1
 80108cc:	080108a1 	.word	0x080108a1
 80108d0:	08010925 	.word	0x08010925
 80108d4:	080108a1 	.word	0x080108a1
 80108d8:	080108a1 	.word	0x080108a1
 80108dc:	080108a1 	.word	0x080108a1
 80108e0:	080108a1 	.word	0x080108a1
 80108e4:	08010a33 	.word	0x08010a33
 80108e8:	08010955 	.word	0x08010955
 80108ec:	08010a15 	.word	0x08010a15
 80108f0:	080108a1 	.word	0x080108a1
 80108f4:	080108a1 	.word	0x080108a1
 80108f8:	08010a55 	.word	0x08010a55
 80108fc:	080108a1 	.word	0x080108a1
 8010900:	08010955 	.word	0x08010955
 8010904:	080108a1 	.word	0x080108a1
 8010908:	080108a1 	.word	0x080108a1
 801090c:	08010a1d 	.word	0x08010a1d
 8010910:	680b      	ldr	r3, [r1, #0]
 8010912:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010916:	1d1a      	adds	r2, r3, #4
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	600a      	str	r2, [r1, #0]
 801091c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010920:	2301      	movs	r3, #1
 8010922:	e0a4      	b.n	8010a6e <_printf_i+0x1f6>
 8010924:	6825      	ldr	r5, [r4, #0]
 8010926:	6808      	ldr	r0, [r1, #0]
 8010928:	062e      	lsls	r6, r5, #24
 801092a:	f100 0304 	add.w	r3, r0, #4
 801092e:	d50a      	bpl.n	8010946 <_printf_i+0xce>
 8010930:	6805      	ldr	r5, [r0, #0]
 8010932:	600b      	str	r3, [r1, #0]
 8010934:	2d00      	cmp	r5, #0
 8010936:	da03      	bge.n	8010940 <_printf_i+0xc8>
 8010938:	232d      	movs	r3, #45	; 0x2d
 801093a:	426d      	negs	r5, r5
 801093c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010940:	230a      	movs	r3, #10
 8010942:	485e      	ldr	r0, [pc, #376]	; (8010abc <_printf_i+0x244>)
 8010944:	e019      	b.n	801097a <_printf_i+0x102>
 8010946:	f015 0f40 	tst.w	r5, #64	; 0x40
 801094a:	6805      	ldr	r5, [r0, #0]
 801094c:	600b      	str	r3, [r1, #0]
 801094e:	bf18      	it	ne
 8010950:	b22d      	sxthne	r5, r5
 8010952:	e7ef      	b.n	8010934 <_printf_i+0xbc>
 8010954:	680b      	ldr	r3, [r1, #0]
 8010956:	6825      	ldr	r5, [r4, #0]
 8010958:	1d18      	adds	r0, r3, #4
 801095a:	6008      	str	r0, [r1, #0]
 801095c:	0628      	lsls	r0, r5, #24
 801095e:	d501      	bpl.n	8010964 <_printf_i+0xec>
 8010960:	681d      	ldr	r5, [r3, #0]
 8010962:	e002      	b.n	801096a <_printf_i+0xf2>
 8010964:	0669      	lsls	r1, r5, #25
 8010966:	d5fb      	bpl.n	8010960 <_printf_i+0xe8>
 8010968:	881d      	ldrh	r5, [r3, #0]
 801096a:	2f6f      	cmp	r7, #111	; 0x6f
 801096c:	bf0c      	ite	eq
 801096e:	2308      	moveq	r3, #8
 8010970:	230a      	movne	r3, #10
 8010972:	4852      	ldr	r0, [pc, #328]	; (8010abc <_printf_i+0x244>)
 8010974:	2100      	movs	r1, #0
 8010976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801097a:	6866      	ldr	r6, [r4, #4]
 801097c:	2e00      	cmp	r6, #0
 801097e:	bfa8      	it	ge
 8010980:	6821      	ldrge	r1, [r4, #0]
 8010982:	60a6      	str	r6, [r4, #8]
 8010984:	bfa4      	itt	ge
 8010986:	f021 0104 	bicge.w	r1, r1, #4
 801098a:	6021      	strge	r1, [r4, #0]
 801098c:	b90d      	cbnz	r5, 8010992 <_printf_i+0x11a>
 801098e:	2e00      	cmp	r6, #0
 8010990:	d04d      	beq.n	8010a2e <_printf_i+0x1b6>
 8010992:	4616      	mov	r6, r2
 8010994:	fbb5 f1f3 	udiv	r1, r5, r3
 8010998:	fb03 5711 	mls	r7, r3, r1, r5
 801099c:	5dc7      	ldrb	r7, [r0, r7]
 801099e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80109a2:	462f      	mov	r7, r5
 80109a4:	42bb      	cmp	r3, r7
 80109a6:	460d      	mov	r5, r1
 80109a8:	d9f4      	bls.n	8010994 <_printf_i+0x11c>
 80109aa:	2b08      	cmp	r3, #8
 80109ac:	d10b      	bne.n	80109c6 <_printf_i+0x14e>
 80109ae:	6823      	ldr	r3, [r4, #0]
 80109b0:	07df      	lsls	r7, r3, #31
 80109b2:	d508      	bpl.n	80109c6 <_printf_i+0x14e>
 80109b4:	6923      	ldr	r3, [r4, #16]
 80109b6:	6861      	ldr	r1, [r4, #4]
 80109b8:	4299      	cmp	r1, r3
 80109ba:	bfde      	ittt	le
 80109bc:	2330      	movle	r3, #48	; 0x30
 80109be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80109c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80109c6:	1b92      	subs	r2, r2, r6
 80109c8:	6122      	str	r2, [r4, #16]
 80109ca:	464b      	mov	r3, r9
 80109cc:	4621      	mov	r1, r4
 80109ce:	4640      	mov	r0, r8
 80109d0:	f8cd a000 	str.w	sl, [sp]
 80109d4:	aa03      	add	r2, sp, #12
 80109d6:	f7ff fedf 	bl	8010798 <_printf_common>
 80109da:	3001      	adds	r0, #1
 80109dc:	d14c      	bne.n	8010a78 <_printf_i+0x200>
 80109de:	f04f 30ff 	mov.w	r0, #4294967295
 80109e2:	b004      	add	sp, #16
 80109e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109e8:	4834      	ldr	r0, [pc, #208]	; (8010abc <_printf_i+0x244>)
 80109ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80109ee:	680e      	ldr	r6, [r1, #0]
 80109f0:	6823      	ldr	r3, [r4, #0]
 80109f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80109f6:	061f      	lsls	r7, r3, #24
 80109f8:	600e      	str	r6, [r1, #0]
 80109fa:	d514      	bpl.n	8010a26 <_printf_i+0x1ae>
 80109fc:	07d9      	lsls	r1, r3, #31
 80109fe:	bf44      	itt	mi
 8010a00:	f043 0320 	orrmi.w	r3, r3, #32
 8010a04:	6023      	strmi	r3, [r4, #0]
 8010a06:	b91d      	cbnz	r5, 8010a10 <_printf_i+0x198>
 8010a08:	6823      	ldr	r3, [r4, #0]
 8010a0a:	f023 0320 	bic.w	r3, r3, #32
 8010a0e:	6023      	str	r3, [r4, #0]
 8010a10:	2310      	movs	r3, #16
 8010a12:	e7af      	b.n	8010974 <_printf_i+0xfc>
 8010a14:	6823      	ldr	r3, [r4, #0]
 8010a16:	f043 0320 	orr.w	r3, r3, #32
 8010a1a:	6023      	str	r3, [r4, #0]
 8010a1c:	2378      	movs	r3, #120	; 0x78
 8010a1e:	4828      	ldr	r0, [pc, #160]	; (8010ac0 <_printf_i+0x248>)
 8010a20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010a24:	e7e3      	b.n	80109ee <_printf_i+0x176>
 8010a26:	065e      	lsls	r6, r3, #25
 8010a28:	bf48      	it	mi
 8010a2a:	b2ad      	uxthmi	r5, r5
 8010a2c:	e7e6      	b.n	80109fc <_printf_i+0x184>
 8010a2e:	4616      	mov	r6, r2
 8010a30:	e7bb      	b.n	80109aa <_printf_i+0x132>
 8010a32:	680b      	ldr	r3, [r1, #0]
 8010a34:	6826      	ldr	r6, [r4, #0]
 8010a36:	1d1d      	adds	r5, r3, #4
 8010a38:	6960      	ldr	r0, [r4, #20]
 8010a3a:	600d      	str	r5, [r1, #0]
 8010a3c:	0635      	lsls	r5, r6, #24
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	d501      	bpl.n	8010a46 <_printf_i+0x1ce>
 8010a42:	6018      	str	r0, [r3, #0]
 8010a44:	e002      	b.n	8010a4c <_printf_i+0x1d4>
 8010a46:	0671      	lsls	r1, r6, #25
 8010a48:	d5fb      	bpl.n	8010a42 <_printf_i+0x1ca>
 8010a4a:	8018      	strh	r0, [r3, #0]
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	4616      	mov	r6, r2
 8010a50:	6123      	str	r3, [r4, #16]
 8010a52:	e7ba      	b.n	80109ca <_printf_i+0x152>
 8010a54:	680b      	ldr	r3, [r1, #0]
 8010a56:	1d1a      	adds	r2, r3, #4
 8010a58:	600a      	str	r2, [r1, #0]
 8010a5a:	681e      	ldr	r6, [r3, #0]
 8010a5c:	2100      	movs	r1, #0
 8010a5e:	4630      	mov	r0, r6
 8010a60:	6862      	ldr	r2, [r4, #4]
 8010a62:	f000 f82f 	bl	8010ac4 <memchr>
 8010a66:	b108      	cbz	r0, 8010a6c <_printf_i+0x1f4>
 8010a68:	1b80      	subs	r0, r0, r6
 8010a6a:	6060      	str	r0, [r4, #4]
 8010a6c:	6863      	ldr	r3, [r4, #4]
 8010a6e:	6123      	str	r3, [r4, #16]
 8010a70:	2300      	movs	r3, #0
 8010a72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a76:	e7a8      	b.n	80109ca <_printf_i+0x152>
 8010a78:	4632      	mov	r2, r6
 8010a7a:	4649      	mov	r1, r9
 8010a7c:	4640      	mov	r0, r8
 8010a7e:	6923      	ldr	r3, [r4, #16]
 8010a80:	47d0      	blx	sl
 8010a82:	3001      	adds	r0, #1
 8010a84:	d0ab      	beq.n	80109de <_printf_i+0x166>
 8010a86:	6823      	ldr	r3, [r4, #0]
 8010a88:	079b      	lsls	r3, r3, #30
 8010a8a:	d413      	bmi.n	8010ab4 <_printf_i+0x23c>
 8010a8c:	68e0      	ldr	r0, [r4, #12]
 8010a8e:	9b03      	ldr	r3, [sp, #12]
 8010a90:	4298      	cmp	r0, r3
 8010a92:	bfb8      	it	lt
 8010a94:	4618      	movlt	r0, r3
 8010a96:	e7a4      	b.n	80109e2 <_printf_i+0x16a>
 8010a98:	2301      	movs	r3, #1
 8010a9a:	4632      	mov	r2, r6
 8010a9c:	4649      	mov	r1, r9
 8010a9e:	4640      	mov	r0, r8
 8010aa0:	47d0      	blx	sl
 8010aa2:	3001      	adds	r0, #1
 8010aa4:	d09b      	beq.n	80109de <_printf_i+0x166>
 8010aa6:	3501      	adds	r5, #1
 8010aa8:	68e3      	ldr	r3, [r4, #12]
 8010aaa:	9903      	ldr	r1, [sp, #12]
 8010aac:	1a5b      	subs	r3, r3, r1
 8010aae:	42ab      	cmp	r3, r5
 8010ab0:	dcf2      	bgt.n	8010a98 <_printf_i+0x220>
 8010ab2:	e7eb      	b.n	8010a8c <_printf_i+0x214>
 8010ab4:	2500      	movs	r5, #0
 8010ab6:	f104 0619 	add.w	r6, r4, #25
 8010aba:	e7f5      	b.n	8010aa8 <_printf_i+0x230>
 8010abc:	08011609 	.word	0x08011609
 8010ac0:	0801161a 	.word	0x0801161a

08010ac4 <memchr>:
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	b510      	push	{r4, lr}
 8010ac8:	b2c9      	uxtb	r1, r1
 8010aca:	4402      	add	r2, r0
 8010acc:	4293      	cmp	r3, r2
 8010ace:	4618      	mov	r0, r3
 8010ad0:	d101      	bne.n	8010ad6 <memchr+0x12>
 8010ad2:	2000      	movs	r0, #0
 8010ad4:	e003      	b.n	8010ade <memchr+0x1a>
 8010ad6:	7804      	ldrb	r4, [r0, #0]
 8010ad8:	3301      	adds	r3, #1
 8010ada:	428c      	cmp	r4, r1
 8010adc:	d1f6      	bne.n	8010acc <memchr+0x8>
 8010ade:	bd10      	pop	{r4, pc}

08010ae0 <memmove>:
 8010ae0:	4288      	cmp	r0, r1
 8010ae2:	b510      	push	{r4, lr}
 8010ae4:	eb01 0402 	add.w	r4, r1, r2
 8010ae8:	d902      	bls.n	8010af0 <memmove+0x10>
 8010aea:	4284      	cmp	r4, r0
 8010aec:	4623      	mov	r3, r4
 8010aee:	d807      	bhi.n	8010b00 <memmove+0x20>
 8010af0:	1e43      	subs	r3, r0, #1
 8010af2:	42a1      	cmp	r1, r4
 8010af4:	d008      	beq.n	8010b08 <memmove+0x28>
 8010af6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010afa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010afe:	e7f8      	b.n	8010af2 <memmove+0x12>
 8010b00:	4601      	mov	r1, r0
 8010b02:	4402      	add	r2, r0
 8010b04:	428a      	cmp	r2, r1
 8010b06:	d100      	bne.n	8010b0a <memmove+0x2a>
 8010b08:	bd10      	pop	{r4, pc}
 8010b0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010b0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010b12:	e7f7      	b.n	8010b04 <memmove+0x24>

08010b14 <_realloc_r>:
 8010b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b16:	4607      	mov	r7, r0
 8010b18:	4614      	mov	r4, r2
 8010b1a:	460e      	mov	r6, r1
 8010b1c:	b921      	cbnz	r1, 8010b28 <_realloc_r+0x14>
 8010b1e:	4611      	mov	r1, r2
 8010b20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010b24:	f7ff bc44 	b.w	80103b0 <_malloc_r>
 8010b28:	b922      	cbnz	r2, 8010b34 <_realloc_r+0x20>
 8010b2a:	f7ff fbf5 	bl	8010318 <_free_r>
 8010b2e:	4625      	mov	r5, r4
 8010b30:	4628      	mov	r0, r5
 8010b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b34:	f000 f814 	bl	8010b60 <_malloc_usable_size_r>
 8010b38:	42a0      	cmp	r0, r4
 8010b3a:	d20f      	bcs.n	8010b5c <_realloc_r+0x48>
 8010b3c:	4621      	mov	r1, r4
 8010b3e:	4638      	mov	r0, r7
 8010b40:	f7ff fc36 	bl	80103b0 <_malloc_r>
 8010b44:	4605      	mov	r5, r0
 8010b46:	2800      	cmp	r0, #0
 8010b48:	d0f2      	beq.n	8010b30 <_realloc_r+0x1c>
 8010b4a:	4631      	mov	r1, r6
 8010b4c:	4622      	mov	r2, r4
 8010b4e:	f7ff fbcd 	bl	80102ec <memcpy>
 8010b52:	4631      	mov	r1, r6
 8010b54:	4638      	mov	r0, r7
 8010b56:	f7ff fbdf 	bl	8010318 <_free_r>
 8010b5a:	e7e9      	b.n	8010b30 <_realloc_r+0x1c>
 8010b5c:	4635      	mov	r5, r6
 8010b5e:	e7e7      	b.n	8010b30 <_realloc_r+0x1c>

08010b60 <_malloc_usable_size_r>:
 8010b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b64:	1f18      	subs	r0, r3, #4
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	bfbc      	itt	lt
 8010b6a:	580b      	ldrlt	r3, [r1, r0]
 8010b6c:	18c0      	addlt	r0, r0, r3
 8010b6e:	4770      	bx	lr

08010b70 <_init>:
 8010b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b72:	bf00      	nop
 8010b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b76:	bc08      	pop	{r3}
 8010b78:	469e      	mov	lr, r3
 8010b7a:	4770      	bx	lr

08010b7c <_fini>:
 8010b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b7e:	bf00      	nop
 8010b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b82:	bc08      	pop	{r3}
 8010b84:	469e      	mov	lr, r3
 8010b86:	4770      	bx	lr
