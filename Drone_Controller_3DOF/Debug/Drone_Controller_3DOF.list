
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae48  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800af58  0800af58  0001af58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b090  0800b090  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800b090  0800b090  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b090  0800b090  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b090  0800b090  0001b090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800b098  0800b098  0001b098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b0a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  20000070  0800b110  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000850  0800b110  00020850  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed20  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ea8  00000000  00000000  0003edb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  00042c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001220  00000000  00000000  00043fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cf8e  00000000  00000000  000451c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015607  00000000  00000000  00062156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000963ef  00000000  00000000  0007775d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010db4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f34  00000000  00000000  0010dba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800af40 	.word	0x0800af40

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800af40 	.word	0x0800af40

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpun>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010cc:	d102      	bne.n	80010d4 <__aeabi_fcmpun+0x14>
 80010ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010d2:	d108      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d8:	d102      	bne.n	80010e0 <__aeabi_fcmpun+0x20>
 80010da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010de:	d102      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0001 	mov.w	r0, #1
 80010ea:	4770      	bx	lr

080010ec <__aeabi_f2iz>:
 80010ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010f4:	d30f      	bcc.n	8001116 <__aeabi_f2iz+0x2a>
 80010f6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010fe:	d90d      	bls.n	800111c <__aeabi_f2iz+0x30>
 8001100:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001108:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800110c:	fa23 f002 	lsr.w	r0, r3, r2
 8001110:	bf18      	it	ne
 8001112:	4240      	negne	r0, r0
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr
 800111c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001120:	d101      	bne.n	8001126 <__aeabi_f2iz+0x3a>
 8001122:	0242      	lsls	r2, r0, #9
 8001124:	d105      	bne.n	8001132 <__aeabi_f2iz+0x46>
 8001126:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800112a:	bf08      	it	eq
 800112c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr

08001138 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8001142:	2300      	movs	r3, #0
 8001144:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 8001146:	2332      	movs	r3, #50	; 0x32
 8001148:	9302      	str	r3, [sp, #8]
 800114a:	2301      	movs	r3, #1
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	1dbb      	adds	r3, r7, #6
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2301      	movs	r3, #1
 8001154:	22d0      	movs	r2, #208	; 0xd0
 8001156:	21ef      	movs	r1, #239	; 0xef
 8001158:	4806      	ldr	r0, [pc, #24]	; (8001174 <read_chip_id+0x3c>)
 800115a:	f003 f9a1 	bl	80044a0 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	2b55      	cmp	r3, #85	; 0x55
 8001162:	d001      	beq.n	8001168 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8001164:	2301      	movs	r3, #1
 8001166:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8001168:	79fb      	ldrb	r3, [r7, #7]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	2000008c 	.word	0x2000008c

08001178 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af04      	add	r7, sp, #16
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8001184:	2300      	movs	r3, #0
 8001186:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	2b03      	cmp	r3, #3
 800118c:	d81a      	bhi.n	80011c4 <set_oss+0x4c>
 800118e:	a201      	add	r2, pc, #4	; (adr r2, 8001194 <set_oss+0x1c>)
 8001190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001194:	080011a5 	.word	0x080011a5
 8001198:	080011ad 	.word	0x080011ad
 800119c:	080011b5 	.word	0x080011b5
 80011a0:	080011bd 	.word	0x080011bd
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2205      	movs	r2, #5
 80011a8:	705a      	strb	r2, [r3, #1]
			break;
 80011aa:	e00f      	b.n	80011cc <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2208      	movs	r2, #8
 80011b0:	705a      	strb	r2, [r3, #1]
			break;
 80011b2:	e00b      	b.n	80011cc <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	220e      	movs	r2, #14
 80011b8:	705a      	strb	r2, [r3, #1]
			break;
 80011ba:	e007      	b.n	80011cc <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	221a      	movs	r2, #26
 80011c0:	705a      	strb	r2, [r3, #1]
			break;
 80011c2:	e003      	b.n	80011cc <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2208      	movs	r2, #8
 80011c8:	705a      	strb	r2, [r3, #1]
			break;
 80011ca:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	78fa      	ldrb	r2, [r7, #3]
 80011d0:	701a      	strb	r2, [r3, #0]

	//BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));

	ratio = (ratio & 0x3) << 6;
 80011d2:	78fb      	ldrb	r3, [r7, #3]
 80011d4:	019b      	lsls	r3, r3, #6
 80011d6:	70fb      	strb	r3, [r7, #3]
	in_buff[1] = ratio;
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 80011dc:	2332      	movs	r3, #50	; 0x32
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	2302      	movs	r3, #2
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	22f4      	movs	r2, #244	; 0xf4
 80011ee:	21ee      	movs	r1, #238	; 0xee
 80011f0:	4803      	ldr	r0, [pc, #12]	; (8001200 <set_oss+0x88>)
 80011f2:	f003 f85b 	bl	80042ac <HAL_I2C_Mem_Write>
}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000008c 	.word	0x2000008c

08001204 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	; 0x38
 8001208:	af04      	add	r7, sp, #16
 800120a:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 800120c:	2300      	movs	r3, #0
 800120e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 800122c:	2301      	movs	r3, #1
 800122e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 8001232:	2332      	movs	r3, #50	; 0x32
 8001234:	9302      	str	r3, [sp, #8]
 8001236:	2316      	movs	r3, #22
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2301      	movs	r3, #1
 8001242:	22aa      	movs	r2, #170	; 0xaa
 8001244:	21ef      	movs	r1, #239	; 0xef
 8001246:	4828      	ldr	r0, [pc, #160]	; (80012e8 <read_calib_data+0xe4>)
 8001248:	f003 f92a 	bl	80044a0 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 800124c:	2300      	movs	r3, #0
 800124e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001252:	e03e      	b.n	80012d2 <read_calib_data+0xce>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 8001254:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800125e:	4413      	add	r3, r2
 8001260:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b219      	sxth	r1, r3
 8001268:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800126c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001270:	4413      	add	r3, r2
 8001272:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001276:	b21a      	sxth	r2, r3
 8001278:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	4403      	add	r3, r0
 8001282:	430a      	orrs	r2, r1
 8001284:	b212      	sxth	r2, r2
 8001286:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 8001288:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001296:	2b00      	cmp	r3, #0
 8001298:	bf0c      	ite	eq
 800129a:	2301      	moveq	r3, #1
 800129c:	2300      	movne	r3, #0
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	440b      	add	r3, r1
 80012aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b2:	bf0c      	ite	eq
 80012b4:	2301      	moveq	r3, #1
 80012b6:	2300      	movne	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	4313      	orrs	r3, r2
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d002      	beq.n	80012c8 <read_calib_data+0xc4>
		{
			ret_val = GET_CALIB_ERR;
 80012c2:	2302      	movs	r3, #2
 80012c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80012c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012cc:	3301      	adds	r3, #1
 80012ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80012d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012d6:	2b0b      	cmp	r3, #11
 80012d8:	d9bc      	bls.n	8001254 <read_calib_data+0x50>
		}
	}

	return ret_val;
 80012da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3728      	adds	r7, #40	; 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000008c 	.word	0x2000008c

080012ec <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2204      	movs	r2, #4
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f009 fd10 	bl	800ad20 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8001300:	687c      	ldr	r4, [r7, #4]
 8001302:	f7ff ff19 	bl	8001138 <read_chip_id>
 8001306:	4603      	mov	r3, r0
 8001308:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	bmp->err = read_calib_data ((short *)&bmp->calib);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	687c      	ldr	r4, [r7, #4]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff77 	bl	8001204 <read_calib_data>
 8001316:	4603      	mov	r3, r0
 8001318:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3338      	adds	r3, #56	; 0x38
 8001320:	2101      	movs	r1, #1
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff28 	bl	8001178 <set_oss>
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	bd90      	pop	{r4, r7, pc}

08001330 <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
	out_buff[0] = BMP_SET_TEMP_CONV;
 8001336:	232e      	movs	r3, #46	; 0x2e
 8001338:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800133a:	2332      	movs	r3, #50	; 0x32
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	2301      	movs	r3, #1
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2301      	movs	r3, #1
 8001348:	22f4      	movs	r2, #244	; 0xf4
 800134a:	21ee      	movs	r1, #238	; 0xee
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <get_ut+0x50>)
 800134e:	f002 ffad 	bl	80042ac <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 8001352:	2005      	movs	r0, #5
 8001354:	f002 f820 	bl	8003398 <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 8001358:	2332      	movs	r3, #50	; 0x32
 800135a:	9302      	str	r3, [sp, #8]
 800135c:	2302      	movs	r3, #2
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	22f6      	movs	r2, #246	; 0xf6
 8001368:	21ef      	movs	r1, #239	; 0xef
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <get_ut+0x50>)
 800136c:	f003 f898 	bl	80044a0 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 8001370:	793b      	ldrb	r3, [r7, #4]
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	797a      	ldrb	r2, [r7, #5]
 8001376:	4313      	orrs	r3, r2
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	2000008c 	.word	0x2000008c

08001384 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
	float temp = 0;
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fea4 	bl	80010ec <__aeabi_f2iz>
 80013a4:	4602      	mov	r2, r0
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	895b      	ldrh	r3, [r3, #10]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	8912      	ldrh	r2, [r2, #8]
 80013b0:	fb02 f303 	mul.w	r3, r2, r3
 80013b4:	13db      	asrs	r3, r3, #15
 80013b6:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80013be:	02da      	lsls	r2, r3, #11
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80013c6:	4619      	mov	r1, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	440b      	add	r3, r1
 80013cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80013d0:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	441a      	add	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	631a      	str	r2, [r3, #48]	; 0x30
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	3308      	adds	r3, #8
 80013e2:	111b      	asrs	r3, r3, #4
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fc51 	bl	8000c8c <__aeabi_i2f>
 80013ea:	4603      	mov	r3, r0
 80013ec:	490e      	ldr	r1, [pc, #56]	; (8001428 <get_temp+0xa4>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fca0 	bl	8000d34 <__aeabi_fmul>
 80013f4:	4603      	mov	r3, r0
 80013f6:	60fb      	str	r3, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 80013f8:	490c      	ldr	r1, [pc, #48]	; (800142c <get_temp+0xa8>)
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f7ff fe42 	bl	8001084 <__aeabi_fcmple>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d106      	bne.n	8001414 <get_temp+0x90>
 8001406:	490a      	ldr	r1, [pc, #40]	; (8001430 <get_temp+0xac>)
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f7ff fe45 	bl	8001098 <__aeabi_fcmpge>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <get_temp+0x98>
	{
		bmp->err = GET_TEMP_ERR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2203      	movs	r2, #3
 8001418:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return temp;
 800141c:	68fb      	ldr	r3, [r7, #12]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	3dcccccd 	.word	0x3dcccccd
 800142c:	c2200000 	.word	0xc2200000
 8001430:	42aa0000 	.word	0x42aa0000

08001434 <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af04      	add	r7, sp, #16
 800143a:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <get_up+0x7c>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	813b      	strh	r3, [r7, #8]
 8001442:	2300      	movs	r3, #0
 8001444:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]

	//BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
	out_buff[0] = BMP_SET_PRESS_CONV;
 800144a:	2334      	movs	r3, #52	; 0x34
 800144c:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800144e:	2332      	movs	r3, #50	; 0x32
 8001450:	9302      	str	r3, [sp, #8]
 8001452:	2301      	movs	r3, #1
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2301      	movs	r3, #1
 800145e:	22f4      	movs	r2, #244	; 0xf4
 8001460:	21ee      	movs	r1, #238	; 0xee
 8001462:	4814      	ldr	r0, [pc, #80]	; (80014b4 <get_up+0x80>)
 8001464:	f002 ff22 	bl	80042ac <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 8001468:	797b      	ldrb	r3, [r7, #5]
 800146a:	4618      	mov	r0, r3
 800146c:	f001 ff94 	bl	8003398 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 8001470:	2332      	movs	r3, #50	; 0x32
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	2303      	movs	r3, #3
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2301      	movs	r3, #1
 8001480:	22f6      	movs	r2, #246	; 0xf6
 8001482:	21ef      	movs	r1, #239	; 0xef
 8001484:	480b      	ldr	r0, [pc, #44]	; (80014b4 <get_up+0x80>)
 8001486:	f003 f80b 	bl	80044a0 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 800148a:	7a3b      	ldrb	r3, [r7, #8]
 800148c:	041a      	lsls	r2, r3, #16
 800148e:	7a7b      	ldrb	r3, [r7, #9]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	4413      	add	r3, r2
 8001494:	7aba      	ldrb	r2, [r7, #10]
 8001496:	441a      	add	r2, r3
 8001498:	793b      	ldrb	r3, [r7, #4]
 800149a:	f1c3 0308 	rsb	r3, r3, #8
 800149e:	fa42 f303 	asr.w	r3, r2, r3
 80014a2:	60fb      	str	r3, [r7, #12]
	return up;
 80014a4:	68fb      	ldr	r3, [r7, #12]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	0800af58 	.word	0x0800af58
 80014b4:	2000008c 	.word	0x2000008c

080014b8 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 80014b8:	b084      	sub	sp, #16
 80014ba:	b480      	push	{r7}
 80014bc:	b089      	sub	sp, #36	; 0x24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80014c4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 80014d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014d2:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80014d6:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 80014d8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80014dc:	461a      	mov	r2, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	fb03 f303 	mul.w	r3, r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	da01      	bge.n	80014ec <get_pressure+0x34>
 80014e8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80014ec:	131b      	asrs	r3, r3, #12
 80014ee:	fb03 f302 	mul.w	r3, r3, r2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	da01      	bge.n	80014fa <get_pressure+0x42>
 80014f6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80014fa:	12db      	asrs	r3, r3, #11
 80014fc:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 80014fe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001502:	461a      	mov	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fb03 f302 	mul.w	r3, r3, r2
 800150a:	2b00      	cmp	r3, #0
 800150c:	da01      	bge.n	8001512 <get_pressure+0x5a>
 800150e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001512:	12db      	asrs	r3, r3, #11
 8001514:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 800151e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001522:	009a      	lsls	r2, r3, #2
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4413      	add	r3, r2
 8001528:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800152c:	4093      	lsls	r3, r2
 800152e:	3302      	adds	r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	da00      	bge.n	8001536 <get_pressure+0x7e>
 8001534:	3303      	adds	r3, #3
 8001536:	109b      	asrs	r3, r3, #2
 8001538:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 800153a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800153e:	461a      	mov	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fb03 f302 	mul.w	r3, r3, r2
 8001546:	2b00      	cmp	r3, #0
 8001548:	da02      	bge.n	8001550 <get_pressure+0x98>
 800154a:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800154e:	331f      	adds	r3, #31
 8001550:	135b      	asrs	r3, r3, #13
 8001552:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001554:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001558:	461a      	mov	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	fb03 f303 	mul.w	r3, r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	da01      	bge.n	8001568 <get_pressure+0xb0>
 8001564:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001568:	131b      	asrs	r3, r3, #12
 800156a:	fb03 f302 	mul.w	r3, r3, r2
 800156e:	2b00      	cmp	r3, #0
 8001570:	da02      	bge.n	8001578 <get_pressure+0xc0>
 8001572:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001576:	33ff      	adds	r3, #255	; 0xff
 8001578:	141b      	asrs	r3, r3, #16
 800157a:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4413      	add	r3, r2
 8001582:	3302      	adds	r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	da00      	bge.n	800158a <get_pressure+0xd2>
 8001588:	3303      	adds	r3, #3
 800158a:	109b      	asrs	r3, r3, #2
 800158c:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 800158e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001590:	461a      	mov	r2, r3
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001598:	fb03 f302 	mul.w	r3, r3, r2
 800159c:	0bdb      	lsrs	r3, r3, #15
 800159e:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80015a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015a2:	461a      	mov	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80015ac:	4611      	mov	r1, r2
 80015ae:	f24c 3250 	movw	r2, #50000	; 0xc350
 80015b2:	410a      	asrs	r2, r1
 80015b4:	fb02 f303 	mul.w	r3, r2, r3
 80015b8:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	db06      	blt.n	80015ce <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	005a      	lsls	r2, r3, #1
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ca:	61fb      	str	r3, [r7, #28]
 80015cc:	e005      	b.n	80015da <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	da00      	bge.n	80015e2 <get_pressure+0x12a>
 80015e0:	33ff      	adds	r3, #255	; 0xff
 80015e2:	121b      	asrs	r3, r3, #8
 80015e4:	461a      	mov	r2, r3
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	da00      	bge.n	80015ee <get_pressure+0x136>
 80015ec:	33ff      	adds	r3, #255	; 0xff
 80015ee:	121b      	asrs	r3, r3, #8
 80015f0:	fb03 f302 	mul.w	r3, r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	f640 32de 	movw	r2, #3038	; 0xbde
 80015fc:	fb02 f303 	mul.w	r3, r2, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	da02      	bge.n	800160a <get_pressure+0x152>
 8001604:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001608:	33ff      	adds	r3, #255	; 0xff
 800160a:	141b      	asrs	r3, r3, #16
 800160c:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	4a0e      	ldr	r2, [pc, #56]	; (800164c <get_pressure+0x194>)
 8001612:	fb02 f303 	mul.w	r3, r2, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	da02      	bge.n	8001620 <get_pressure+0x168>
 800161a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800161e:	33ff      	adds	r3, #255	; 0xff
 8001620:	141b      	asrs	r3, r3, #16
 8001622:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4413      	add	r3, r2
 800162a:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800162e:	2b00      	cmp	r3, #0
 8001630:	da00      	bge.n	8001634 <get_pressure+0x17c>
 8001632:	330f      	adds	r3, #15
 8001634:	111b      	asrs	r3, r3, #4
 8001636:	461a      	mov	r2, r3
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	4413      	add	r3, r2
 800163c:	61fb      	str	r3, [r7, #28]

	return p;
 800163e:	69fb      	ldr	r3, [r7, #28]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3724      	adds	r7, #36	; 0x24
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	b004      	add	sp, #16
 800164a:	4770      	bx	lr
 800164c:	ffffe343 	.word	0xffffe343

08001650 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fb12 	bl	8000c8c <__aeabi_i2f>
 8001668:	4603      	mov	r3, r0
 800166a:	4923      	ldr	r1, [pc, #140]	; (80016f8 <get_altitude+0xa8>)
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fc15 	bl	8000e9c <__aeabi_fdiv>
 8001672:	4603      	mov	r3, r0
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe fecf 	bl	8000418 <__aeabi_f2d>
 800167a:	a31b      	add	r3, pc, #108	; (adr r3, 80016e8 <get_altitude+0x98>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f008 f806 	bl	8009690 <pow>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	f04f 0000 	mov.w	r0, #0
 800168c:	491b      	ldr	r1, [pc, #108]	; (80016fc <get_altitude+0xac>)
 800168e:	f7fe fd63 	bl	8000158 <__aeabi_dsub>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	a315      	add	r3, pc, #84	; (adr r3, 80016f0 <get_altitude+0xa0>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7fe ff12 	bl	80004c8 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f7ff f9e4 	bl	8000a78 <__aeabi_d2f>
 80016b0:	4603      	mov	r3, r0
 80016b2:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 80016b4:	4912      	ldr	r1, [pc, #72]	; (8001700 <get_altitude+0xb0>)
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f7ff fce4 	bl	8001084 <__aeabi_fcmple>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d106      	bne.n	80016d0 <get_altitude+0x80>
 80016c2:	4910      	ldr	r1, [pc, #64]	; (8001704 <get_altitude+0xb4>)
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f7ff fce7 	bl	8001098 <__aeabi_fcmpge>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <get_altitude+0x88>
	{
		bmp->err = GET_ALTITUDE_ERR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2205      	movs	r2, #5
 80016d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}

	return altitude;
 80016d8:	68fb      	ldr	r3, [r7, #12]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	f3af 8000 	nop.w
 80016e8:	ccd9456c 	.word	0xccd9456c
 80016ec:	3fc85b95 	.word	0x3fc85b95
 80016f0:	00000000 	.word	0x00000000
 80016f4:	40e5a540 	.word	0x40e5a540
 80016f8:	47c5e680 	.word	0x47c5e680
 80016fc:	3ff00000 	.word	0x3ff00000
 8001700:	c3fa0000 	.word	0xc3fa0000
 8001704:	460ca000 	.word	0x460ca000

08001708 <getRange>:
#include "stm32f1xx_hal.h"

extern I2C_HandleTypeDef hi2c1;

int getRange (void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af02      	add	r7, sp, #8

	char error = 1;
 800170e:	2301      	movs	r3, #1
 8001710:	71fb      	strb	r3, [r7, #7]

	unsigned char command = 0x51;
 8001712:	2351      	movs	r3, #81	; 0x51
 8001714:	71bb      	strb	r3, [r7, #6]
	error = HAL_I2C_Master_Transmit(&hi2c1, 224, &command, 1, I2C_TIMEOUT);
 8001716:	1dba      	adds	r2, r7, #6
 8001718:	2364      	movs	r3, #100	; 0x64
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	2301      	movs	r3, #1
 800171e:	21e0      	movs	r1, #224	; 0xe0
 8001720:	480e      	ldr	r0, [pc, #56]	; (800175c <getRange+0x54>)
 8001722:	f002 fa65 	bl	8003bf0 <HAL_I2C_Master_Transmit>
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]

	HAL_Delay(50);
 800172a:	2032      	movs	r0, #50	; 0x32
 800172c:	f001 fe34 	bl	8003398 <HAL_Delay>

	if (!error) {
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10c      	bne.n	8001750 <getRange+0x48>
		unsigned char range[2];
		HAL_I2C_Master_Receive(&hi2c1, 225, range, 2, I2C_TIMEOUT);
 8001736:	1d3a      	adds	r2, r7, #4
 8001738:	2364      	movs	r3, #100	; 0x64
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	2302      	movs	r3, #2
 800173e:	21e1      	movs	r1, #225	; 0xe1
 8001740:	4806      	ldr	r0, [pc, #24]	; (800175c <getRange+0x54>)
 8001742:	f002 fb53 	bl	8003dec <HAL_I2C_Master_Receive>
		return (range[0] << BYTE_SHIFT) | range[1];
 8001746:	793b      	ldrb	r3, [r7, #4]
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	797a      	ldrb	r2, [r7, #5]
 800174c:	4313      	orrs	r3, r2
 800174e:	e001      	b.n	8001754 <getRange+0x4c>
	}

	return -1;
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	2000008c 	.word	0x2000008c

08001760 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f008 f83d 	bl	80097e8 <asinf>
 800176e:	4603      	mov	r3, r0
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f008 f857 	bl	8009834 <sqrtf>
 8001786:	4603      	mov	r3, r0
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f001 f926 	bl	80029ea <_ZNSaIdED1Ev>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_ZNSt12_Vector_baseIdSaIdEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f001 f909 	bl	80029ca <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <_ZNSt6vectorIdSaIdEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ffeb 	bl	80017a8 <_ZNSt12_Vector_baseIdSaIdEEC1Ev>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017e2:	f001 fd77 	bl	80032d4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 80017e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017ea:	f001 fdd5 	bl	8003398 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ee:	f000 f89d 	bl	800192c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f2:	f000 fb5b 	bl	8001eac <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80017f6:	f000 f8e7 	bl	80019c8 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 80017fa:	f000 f9e3 	bl	8001bc4 <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 80017fe:	f000 f917 	bl	8001a30 <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 8001802:	f000 fb23 	bl	8001e4c <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 8001806:	f000 fa39 	bl	8001c7c <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 800180a:	f000 fac1 	bl	8001d90 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */

  MPU6050_Baslat();
 800180e:	f000 fbd1 	bl	8001fb4 <_Z14MPU6050_Baslatv>
  bmp_init(&bmp);
 8001812:	483b      	ldr	r0, [pc, #236]	; (8001900 <main+0x124>)
 8001814:	f7ff fd6a 	bl	80012ec <bmp_init>
  //Gyro kalibrasyon hatalarını hesapla.
  HAL_Delay(2000);
 8001818:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800181c:	f001 fdbc 	bl	8003398 <HAL_Delay>
  GyroXh=GyroErr(GYRO_X_ADDR)/65.5; GyroYh=GyroErr(GYRO_Y_ADDR)/65.5; GyroZh=GyroErr(GYRO_Z_ADDR)/65.5;
 8001820:	2043      	movs	r0, #67	; 0x43
 8001822:	f000 fdc5 	bl	80023b0 <_Z7GyroErrh>
 8001826:	4603      	mov	r3, r0
 8001828:	4936      	ldr	r1, [pc, #216]	; (8001904 <main+0x128>)
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fb36 	bl	8000e9c <__aeabi_fdiv>
 8001830:	4603      	mov	r3, r0
 8001832:	461a      	mov	r2, r3
 8001834:	4b34      	ldr	r3, [pc, #208]	; (8001908 <main+0x12c>)
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	2045      	movs	r0, #69	; 0x45
 800183a:	f000 fdb9 	bl	80023b0 <_Z7GyroErrh>
 800183e:	4603      	mov	r3, r0
 8001840:	4930      	ldr	r1, [pc, #192]	; (8001904 <main+0x128>)
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fb2a 	bl	8000e9c <__aeabi_fdiv>
 8001848:	4603      	mov	r3, r0
 800184a:	461a      	mov	r2, r3
 800184c:	4b2f      	ldr	r3, [pc, #188]	; (800190c <main+0x130>)
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	2047      	movs	r0, #71	; 0x47
 8001852:	f000 fdad 	bl	80023b0 <_Z7GyroErrh>
 8001856:	4603      	mov	r3, r0
 8001858:	492a      	ldr	r1, [pc, #168]	; (8001904 <main+0x128>)
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fb1e 	bl	8000e9c <__aeabi_fdiv>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <main+0x134>)
 8001866:	601a      	str	r2, [r3, #0]
  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 8001868:	482a      	ldr	r0, [pc, #168]	; (8001914 <main+0x138>)
 800186a:	f004 f9df 	bl	8005c2c <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 800186e:	482a      	ldr	r0, [pc, #168]	; (8001918 <main+0x13c>)
 8001870:	f004 f992 	bl	8005b98 <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001874:	2100      	movs	r1, #0
 8001876:	4829      	ldr	r0, [pc, #164]	; (800191c <main+0x140>)
 8001878:	f004 fa7a 	bl	8005d70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800187c:	2104      	movs	r1, #4
 800187e:	4827      	ldr	r0, [pc, #156]	; (800191c <main+0x140>)
 8001880:	f004 fa76 	bl	8005d70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001884:	2108      	movs	r1, #8
 8001886:	4825      	ldr	r0, [pc, #148]	; (800191c <main+0x140>)
 8001888:	f004 fa72 	bl	8005d70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800188c:	210c      	movs	r1, #12
 800188e:	4823      	ldr	r0, [pc, #140]	; (800191c <main+0x140>)
 8001890:	f004 fa6e 	bl	8005d70 <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8001894:	2108      	movs	r1, #8
 8001896:	4820      	ldr	r0, [pc, #128]	; (8001918 <main+0x13c>)
 8001898:	f004 fb64 	bl	8005f64 <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //micros = __HAL_TIM_GET_COUNTER(&htim3);
	  //sprintf(buf,"%d\r\n",int(roll)); // @suppress("Float formatting support")
	  if(HAL_GetTick()- sent_time > 1) {
 800189c:	f001 fd72 	bl	8003384 <HAL_GetTick>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4a1f      	ldr	r2, [pc, #124]	; (8001920 <main+0x144>)
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	1a9b      	subs	r3, r3, r2
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	bf8c      	ite	hi
 80018ac:	2301      	movhi	r3, #1
 80018ae:	2300      	movls	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d01e      	beq.n	80018f4 <main+0x118>
		  TelemPack();
 80018b6:	f000 fc63 	bl	8002180 <_Z9TelemPackv>
		  HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(struct telem_pack), 1000);
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	2270      	movs	r2, #112	; 0x70
 80018c0:	4918      	ldr	r1, [pc, #96]	; (8001924 <main+0x148>)
 80018c2:	4819      	ldr	r0, [pc, #100]	; (8001928 <main+0x14c>)
 80018c4:	f005 fc92 	bl	80071ec <HAL_UART_Transmit>
		  char end_char = '@';
 80018c8:	2340      	movs	r3, #64	; 0x40
 80018ca:	71fb      	strb	r3, [r7, #7]
		  HAL_UART_Transmit(&huart2, (uint8_t*)&end_char, sizeof(end_char), 1000);
 80018cc:	1df9      	adds	r1, r7, #7
 80018ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d2:	2201      	movs	r2, #1
 80018d4:	4814      	ldr	r0, [pc, #80]	; (8001928 <main+0x14c>)
 80018d6:	f005 fc89 	bl	80071ec <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t*)&end_char, sizeof(end_char), 1000);
 80018da:	1df9      	adds	r1, r7, #7
 80018dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e0:	2201      	movs	r2, #1
 80018e2:	4811      	ldr	r0, [pc, #68]	; (8001928 <main+0x14c>)
 80018e4:	f005 fc82 	bl	80071ec <HAL_UART_Transmit>
		  sent_time = HAL_GetTick();
 80018e8:	f001 fd4c 	bl	8003384 <HAL_GetTick>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <main+0x144>)
 80018f2:	601a      	str	r2, [r3, #0]

	  }
	  //sprintf(buf,"%s\n","test");

	  Check_Arm();
 80018f4:	f000 fba0 	bl	8002038 <_Z9Check_Armv>
	  Check_Disarm();
 80018f8:	f000 fbf6 	bl	80020e8 <_Z12Check_Disarmv>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80018fc:	e7ce      	b.n	800189c <main+0xc0>
 80018fe:	bf00      	nop
 8001900:	200007f0 	.word	0x200007f0
 8001904:	42830000 	.word	0x42830000
 8001908:	20000258 	.word	0x20000258
 800190c:	2000025c 	.word	0x2000025c
 8001910:	20000260 	.word	0x20000260
 8001914:	20000128 	.word	0x20000128
 8001918:	20000170 	.word	0x20000170
 800191c:	200000e0 	.word	0x200000e0
 8001920:	200007d4 	.word	0x200007d4
 8001924:	20000324 	.word	0x20000324
 8001928:	20000200 	.word	0x20000200

0800192c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b090      	sub	sp, #64	; 0x40
 8001930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001932:	f107 0318 	add.w	r3, r7, #24
 8001936:	2228      	movs	r2, #40	; 0x28
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f009 f9f0 	bl	800ad20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
 800194c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800194e:	2301      	movs	r3, #1
 8001950:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001952:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001956:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800195c:	2301      	movs	r3, #1
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001960:	2302      	movs	r3, #2
 8001962:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001964:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001968:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800196a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800196e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001970:	f107 0318 	add.w	r3, r7, #24
 8001974:	4618      	mov	r0, r3
 8001976:	f003 fca5 	bl	80052c4 <HAL_RCC_OscConfig>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf14      	ite	ne
 8001980:	2301      	movne	r3, #1
 8001982:	2300      	moveq	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800198a:	f001 f819 	bl	80029c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800198e:	230f      	movs	r3, #15
 8001990:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001992:	2302      	movs	r3, #2
 8001994:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	2101      	movs	r1, #1
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 ff0c 	bl	80057c4 <HAL_RCC_ClockConfig>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	bf14      	ite	ne
 80019b2:	2301      	movne	r3, #1
 80019b4:	2300      	moveq	r3, #0
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 80019bc:	f001 f800 	bl	80029c0 <Error_Handler>
  }
}
 80019c0:	bf00      	nop
 80019c2:	3740      	adds	r7, #64	; 0x40
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <_ZL12MX_I2C1_Initv+0x5c>)
 80019ce:	4a16      	ldr	r2, [pc, #88]	; (8001a28 <_ZL12MX_I2C1_Initv+0x60>)
 80019d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <_ZL12MX_I2C1_Initv+0x5c>)
 80019d4:	4a15      	ldr	r2, [pc, #84]	; (8001a2c <_ZL12MX_I2C1_Initv+0x64>)
 80019d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <_ZL12MX_I2C1_Initv+0x5c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <_ZL12MX_I2C1_Initv+0x5c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <_ZL12MX_I2C1_Initv+0x5c>)
 80019e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <_ZL12MX_I2C1_Initv+0x5c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <_ZL12MX_I2C1_Initv+0x5c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019f8:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <_ZL12MX_I2C1_Initv+0x5c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <_ZL12MX_I2C1_Initv+0x5c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a04:	4807      	ldr	r0, [pc, #28]	; (8001a24 <_ZL12MX_I2C1_Initv+0x5c>)
 8001a06:	f001 ffaf 	bl	8003968 <HAL_I2C_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	bf14      	ite	ne
 8001a10:	2301      	movne	r3, #1
 8001a12:	2300      	moveq	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001a1a:	f000 ffd1 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2000008c 	.word	0x2000008c
 8001a28:	40005400 	.word	0x40005400
 8001a2c:	00061a80 	.word	0x00061a80

08001a30 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b092      	sub	sp, #72	; 0x48
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
 8001a50:	615a      	str	r2, [r3, #20]
 8001a52:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	2220      	movs	r2, #32
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f009 f960 	bl	800ad20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a60:	4b56      	ldr	r3, [pc, #344]	; (8001bbc <_ZL12MX_TIM1_Initv+0x18c>)
 8001a62:	4a57      	ldr	r2, [pc, #348]	; (8001bc0 <_ZL12MX_TIM1_Initv+0x190>)
 8001a64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 8001a66:	4b55      	ldr	r3, [pc, #340]	; (8001bbc <_ZL12MX_TIM1_Initv+0x18c>)
 8001a68:	221f      	movs	r2, #31
 8001a6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6c:	4b53      	ldr	r3, [pc, #332]	; (8001bbc <_ZL12MX_TIM1_Initv+0x18c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8001a72:	4b52      	ldr	r3, [pc, #328]	; (8001bbc <_ZL12MX_TIM1_Initv+0x18c>)
 8001a74:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7a:	4b50      	ldr	r3, [pc, #320]	; (8001bbc <_ZL12MX_TIM1_Initv+0x18c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a80:	4b4e      	ldr	r3, [pc, #312]	; (8001bbc <_ZL12MX_TIM1_Initv+0x18c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a86:	4b4d      	ldr	r3, [pc, #308]	; (8001bbc <_ZL12MX_TIM1_Initv+0x18c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a8c:	484b      	ldr	r0, [pc, #300]	; (8001bbc <_ZL12MX_TIM1_Initv+0x18c>)
 8001a8e:	f004 f91f 	bl	8005cd0 <HAL_TIM_PWM_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8001aa2:	f000 ff8d 	bl	80029c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4841      	ldr	r0, [pc, #260]	; (8001bbc <_ZL12MX_TIM1_Initv+0x18c>)
 8001ab6:	f005 fa8b 	bl	8006fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf14      	ite	ne
 8001ac0:	2301      	movne	r3, #1
 8001ac2:	2300      	moveq	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8001aca:	f000 ff79 	bl	80029c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ace:	2360      	movs	r3, #96	; 0x60
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ada:	2300      	movs	r3, #0
 8001adc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aee:	2200      	movs	r2, #0
 8001af0:	4619      	mov	r1, r3
 8001af2:	4832      	ldr	r0, [pc, #200]	; (8001bbc <_ZL12MX_TIM1_Initv+0x18c>)
 8001af4:	f004 fcd8 	bl	80064a8 <HAL_TIM_PWM_ConfigChannel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	bf14      	ite	ne
 8001afe:	2301      	movne	r3, #1
 8001b00:	2300      	moveq	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001b08:	f000 ff5a 	bl	80029c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b10:	2204      	movs	r2, #4
 8001b12:	4619      	mov	r1, r3
 8001b14:	4829      	ldr	r0, [pc, #164]	; (8001bbc <_ZL12MX_TIM1_Initv+0x18c>)
 8001b16:	f004 fcc7 	bl	80064a8 <HAL_TIM_PWM_ConfigChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	bf14      	ite	ne
 8001b20:	2301      	movne	r3, #1
 8001b22:	2300      	moveq	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8001b2a:	f000 ff49 	bl	80029c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b32:	2208      	movs	r2, #8
 8001b34:	4619      	mov	r1, r3
 8001b36:	4821      	ldr	r0, [pc, #132]	; (8001bbc <_ZL12MX_TIM1_Initv+0x18c>)
 8001b38:	f004 fcb6 	bl	80064a8 <HAL_TIM_PWM_ConfigChannel>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	bf14      	ite	ne
 8001b42:	2301      	movne	r3, #1
 8001b44:	2300      	moveq	r3, #0
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8001b4c:	f000 ff38 	bl	80029c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b54:	220c      	movs	r2, #12
 8001b56:	4619      	mov	r1, r3
 8001b58:	4818      	ldr	r0, [pc, #96]	; (8001bbc <_ZL12MX_TIM1_Initv+0x18c>)
 8001b5a:	f004 fca5 	bl	80064a8 <HAL_TIM_PWM_ConfigChannel>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bf14      	ite	ne
 8001b64:	2301      	movne	r3, #1
 8001b66:	2300      	moveq	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 8001b6e:	f000 ff27 	bl	80029c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b8a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	4619      	mov	r1, r3
 8001b94:	4809      	ldr	r0, [pc, #36]	; (8001bbc <_ZL12MX_TIM1_Initv+0x18c>)
 8001b96:	f005 fa79 	bl	800708c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	bf14      	ite	ne
 8001ba0:	2301      	movne	r3, #1
 8001ba2:	2300      	moveq	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <_ZL12MX_TIM1_Initv+0x17e>
  {
    Error_Handler();
 8001baa:	f000 ff09 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bae:	4803      	ldr	r0, [pc, #12]	; (8001bbc <_ZL12MX_TIM1_Initv+0x18c>)
 8001bb0:	f001 fa52 	bl	8003058 <HAL_TIM_MspPostInit>

}
 8001bb4:	bf00      	nop
 8001bb6:	3748      	adds	r7, #72	; 0x48
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	200000e0 	.word	0x200000e0
 8001bc0:	40012c00 	.word	0x40012c00

08001bc4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bca:	f107 0308 	add.w	r3, r7, #8
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd8:	463b      	mov	r3, r7
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001be0:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <_ZL12MX_TIM2_Initv+0xb4>)
 8001be2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001be6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8001be8:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <_ZL12MX_TIM2_Initv+0xb4>)
 8001bea:	221f      	movs	r2, #31
 8001bec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bee:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <_ZL12MX_TIM2_Initv+0xb4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8001bf4:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <_ZL12MX_TIM2_Initv+0xb4>)
 8001bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <_ZL12MX_TIM2_Initv+0xb4>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <_ZL12MX_TIM2_Initv+0xb4>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c08:	481b      	ldr	r0, [pc, #108]	; (8001c78 <_ZL12MX_TIM2_Initv+0xb4>)
 8001c0a:	f003 ff75 	bl	8005af8 <HAL_TIM_Base_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf14      	ite	ne
 8001c14:	2301      	movne	r3, #1
 8001c16:	2300      	moveq	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001c1e:	f000 fecf 	bl	80029c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c28:	f107 0308 	add.w	r3, r7, #8
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4812      	ldr	r0, [pc, #72]	; (8001c78 <_ZL12MX_TIM2_Initv+0xb4>)
 8001c30:	f004 fcf8 	bl	8006624 <HAL_TIM_ConfigClockSource>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	bf14      	ite	ne
 8001c3a:	2301      	movne	r3, #1
 8001c3c:	2300      	moveq	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8001c44:	f000 febc 	bl	80029c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c50:	463b      	mov	r3, r7
 8001c52:	4619      	mov	r1, r3
 8001c54:	4808      	ldr	r0, [pc, #32]	; (8001c78 <_ZL12MX_TIM2_Initv+0xb4>)
 8001c56:	f005 f9bb 	bl	8006fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	bf14      	ite	ne
 8001c60:	2301      	movne	r3, #1
 8001c62:	2300      	moveq	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001c6a:	f000 fea9 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c6e:	bf00      	nop
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000128 	.word	0x20000128

08001c7c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c82:	f107 0318 	add.w	r3, r7, #24
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ca6:	4b38      	ldr	r3, [pc, #224]	; (8001d88 <_ZL12MX_TIM3_Initv+0x10c>)
 8001ca8:	4a38      	ldr	r2, [pc, #224]	; (8001d8c <_ZL12MX_TIM3_Initv+0x110>)
 8001caa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8001cac:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <_ZL12MX_TIM3_Initv+0x10c>)
 8001cae:	221f      	movs	r2, #31
 8001cb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb2:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <_ZL12MX_TIM3_Initv+0x10c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001cb8:	4b33      	ldr	r3, [pc, #204]	; (8001d88 <_ZL12MX_TIM3_Initv+0x10c>)
 8001cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc0:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <_ZL12MX_TIM3_Initv+0x10c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc6:	4b30      	ldr	r3, [pc, #192]	; (8001d88 <_ZL12MX_TIM3_Initv+0x10c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ccc:	482e      	ldr	r0, [pc, #184]	; (8001d88 <_ZL12MX_TIM3_Initv+0x10c>)
 8001cce:	f003 ff13 	bl	8005af8 <HAL_TIM_Base_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	bf14      	ite	ne
 8001cd8:	2301      	movne	r3, #1
 8001cda:	2300      	moveq	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <_ZL12MX_TIM3_Initv+0x6a>
  {
    Error_Handler();
 8001ce2:	f000 fe6d 	bl	80029c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cea:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cec:	f107 0318 	add.w	r3, r7, #24
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4825      	ldr	r0, [pc, #148]	; (8001d88 <_ZL12MX_TIM3_Initv+0x10c>)
 8001cf4:	f004 fc96 	bl	8006624 <HAL_TIM_ConfigClockSource>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	bf14      	ite	ne
 8001cfe:	2301      	movne	r3, #1
 8001d00:	2300      	moveq	r3, #0
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <_ZL12MX_TIM3_Initv+0x90>
  {
    Error_Handler();
 8001d08:	f000 fe5a 	bl	80029c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001d0c:	481e      	ldr	r0, [pc, #120]	; (8001d88 <_ZL12MX_TIM3_Initv+0x10c>)
 8001d0e:	f004 f8d1 	bl	8005eb4 <HAL_TIM_IC_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bf14      	ite	ne
 8001d18:	2301      	movne	r3, #1
 8001d1a:	2300      	moveq	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 8001d22:	f000 fe4d 	bl	80029c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d2e:	f107 0310 	add.w	r3, r7, #16
 8001d32:	4619      	mov	r1, r3
 8001d34:	4814      	ldr	r0, [pc, #80]	; (8001d88 <_ZL12MX_TIM3_Initv+0x10c>)
 8001d36:	f005 f94b 	bl	8006fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf14      	ite	ne
 8001d40:	2301      	movne	r3, #1
 8001d42:	2300      	moveq	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <_ZL12MX_TIM3_Initv+0xd2>
  {
    Error_Handler();
 8001d4a:	f000 fe39 	bl	80029c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d52:	2301      	movs	r3, #1
 8001d54:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001d5e:	463b      	mov	r3, r7
 8001d60:	2208      	movs	r2, #8
 8001d62:	4619      	mov	r1, r3
 8001d64:	4808      	ldr	r0, [pc, #32]	; (8001d88 <_ZL12MX_TIM3_Initv+0x10c>)
 8001d66:	f004 fb0b 	bl	8006380 <HAL_TIM_IC_ConfigChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bf14      	ite	ne
 8001d70:	2301      	movne	r3, #1
 8001d72:	2300      	moveq	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <_ZL12MX_TIM3_Initv+0x102>
  {
    Error_Handler();
 8001d7a:	f000 fe21 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	3728      	adds	r7, #40	; 0x28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000170 	.word	0x20000170
 8001d8c:	40000400 	.word	0x40000400

08001d90 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da4:	463b      	mov	r3, r7
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <_ZL12MX_TIM4_Initv+0xb4>)
 8001dae:	4a26      	ldr	r2, [pc, #152]	; (8001e48 <_ZL12MX_TIM4_Initv+0xb8>)
 8001db0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 8001db2:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <_ZL12MX_TIM4_Initv+0xb4>)
 8001db4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001db8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dba:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <_ZL12MX_TIM4_Initv+0xb4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001dc0:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <_ZL12MX_TIM4_Initv+0xb4>)
 8001dc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dc6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc8:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <_ZL12MX_TIM4_Initv+0xb4>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dce:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <_ZL12MX_TIM4_Initv+0xb4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001dd4:	481b      	ldr	r0, [pc, #108]	; (8001e44 <_ZL12MX_TIM4_Initv+0xb4>)
 8001dd6:	f003 fe8f 	bl	8005af8 <HAL_TIM_Base_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	bf14      	ite	ne
 8001de0:	2301      	movne	r3, #1
 8001de2:	2300      	moveq	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <_ZL12MX_TIM4_Initv+0x5e>
  {
    Error_Handler();
 8001dea:	f000 fde9 	bl	80029c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001df4:	f107 0308 	add.w	r3, r7, #8
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4812      	ldr	r0, [pc, #72]	; (8001e44 <_ZL12MX_TIM4_Initv+0xb4>)
 8001dfc:	f004 fc12 	bl	8006624 <HAL_TIM_ConfigClockSource>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	bf14      	ite	ne
 8001e06:	2301      	movne	r3, #1
 8001e08:	2300      	moveq	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 8001e10:	f000 fdd6 	bl	80029c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e14:	2300      	movs	r3, #0
 8001e16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4808      	ldr	r0, [pc, #32]	; (8001e44 <_ZL12MX_TIM4_Initv+0xb4>)
 8001e22:	f005 f8d5 	bl	8006fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf14      	ite	ne
 8001e2c:	2301      	movne	r3, #1
 8001e2e:	2300      	moveq	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <_ZL12MX_TIM4_Initv+0xaa>
  {
    Error_Handler();
 8001e36:	f000 fdc3 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200001b8 	.word	0x200001b8
 8001e48:	40000800 	.word	0x40000800

08001e4c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001e52:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001e54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001e58:	4a13      	ldr	r2, [pc, #76]	; (8001ea8 <_ZL19MX_USART2_UART_Initv+0x5c>)
 8001e5a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e5c:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e68:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001e70:	220c      	movs	r2, #12
 8001e72:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e80:	4807      	ldr	r0, [pc, #28]	; (8001ea0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001e82:	f005 f966 	bl	8007152 <HAL_UART_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 8001e96:	f000 fd93 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000200 	.word	0x20000200
 8001ea4:	40004400 	.word	0x40004400
 8001ea8:	000f4240 	.word	0x000f4240

08001eac <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb2:	f107 0310 	add.w	r3, r7, #16
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec0:	4b38      	ldr	r3, [pc, #224]	; (8001fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a37      	ldr	r2, [pc, #220]	; (8001fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001ec6:	f043 0310 	orr.w	r3, r3, #16
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b35      	ldr	r3, [pc, #212]	; (8001fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed8:	4b32      	ldr	r3, [pc, #200]	; (8001fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	4a31      	ldr	r2, [pc, #196]	; (8001fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001ede:	f043 0320 	orr.w	r3, r3, #32
 8001ee2:	6193      	str	r3, [r2, #24]
 8001ee4:	4b2f      	ldr	r3, [pc, #188]	; (8001fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0320 	and.w	r3, r3, #32
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef0:	4b2c      	ldr	r3, [pc, #176]	; (8001fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	4a2b      	ldr	r2, [pc, #172]	; (8001fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	6193      	str	r3, [r2, #24]
 8001efc:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f08:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a25      	ldr	r2, [pc, #148]	; (8001fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001f0e:	f043 0308 	orr.w	r3, r3, #8
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f20:	2200      	movs	r2, #0
 8001f22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f26:	4820      	ldr	r0, [pc, #128]	; (8001fa8 <_ZL12MX_GPIO_Initv+0xfc>)
 8001f28:	f001 fcec 	bl	8003904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2102      	movs	r1, #2
 8001f30:	481e      	ldr	r0, [pc, #120]	; (8001fac <_ZL12MX_GPIO_Initv+0x100>)
 8001f32:	f001 fce7 	bl	8003904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f3c:	481c      	ldr	r0, [pc, #112]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x104>)
 8001f3e:	f001 fce1 	bl	8003904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001f42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2302      	movs	r3, #2
 8001f52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001f54:	f107 0310 	add.w	r3, r7, #16
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4813      	ldr	r0, [pc, #76]	; (8001fa8 <_ZL12MX_GPIO_Initv+0xfc>)
 8001f5c:	f001 fb4e 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f60:	2302      	movs	r3, #2
 8001f62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f64:	2301      	movs	r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f70:	f107 0310 	add.w	r3, r7, #16
 8001f74:	4619      	mov	r1, r3
 8001f76:	480d      	ldr	r0, [pc, #52]	; (8001fac <_ZL12MX_GPIO_Initv+0x100>)
 8001f78:	f001 fb40 	bl	80035fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f82:	2301      	movs	r3, #1
 8001f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f107 0310 	add.w	r3, r7, #16
 8001f92:	4619      	mov	r1, r3
 8001f94:	4806      	ldr	r0, [pc, #24]	; (8001fb0 <_ZL12MX_GPIO_Initv+0x104>)
 8001f96:	f001 fb31 	bl	80035fc <HAL_GPIO_Init>

}
 8001f9a:	bf00      	nop
 8001f9c:	3720      	adds	r7, #32
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40011000 	.word	0x40011000
 8001fac:	40010c00 	.word	0x40010c00
 8001fb0:	40010800 	.word	0x40010800

08001fb4 <_Z14MPU6050_Baslatv>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 8001fbe:	2305      	movs	r3, #5
 8001fc0:	9302      	str	r3, [sp, #8]
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	9301      	str	r3, [sp, #4]
 8001fc6:	1dfb      	adds	r3, r7, #7
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2301      	movs	r3, #1
 8001fcc:	226b      	movs	r2, #107	; 0x6b
 8001fce:	21d0      	movs	r1, #208	; 0xd0
 8001fd0:	4818      	ldr	r0, [pc, #96]	; (8002034 <_Z14MPU6050_Baslatv+0x80>)
 8001fd2:	f002 f96b 	bl	80042ac <HAL_I2C_Mem_Write>
	config = 0x08;
 8001fd6:	2308      	movs	r3, #8
 8001fd8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 250 d/s'ye ayarlandi.
 8001fda:	2305      	movs	r3, #5
 8001fdc:	9302      	str	r3, [sp, #8]
 8001fde:	2301      	movs	r3, #1
 8001fe0:	9301      	str	r3, [sp, #4]
 8001fe2:	1dfb      	adds	r3, r7, #7
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	221b      	movs	r2, #27
 8001fea:	21d0      	movs	r1, #208	; 0xd0
 8001fec:	4811      	ldr	r0, [pc, #68]	; (8002034 <_Z14MPU6050_Baslatv+0x80>)
 8001fee:	f002 f95d 	bl	80042ac <HAL_I2C_Mem_Write>
	config = 0x10;
 8001ff2:	2310      	movs	r3, #16
 8001ff4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, ACC_CONF_REG, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 8001ff6:	2305      	movs	r3, #5
 8001ff8:	9302      	str	r3, [sp, #8]
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	9301      	str	r3, [sp, #4]
 8001ffe:	1dfb      	adds	r3, r7, #7
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	2301      	movs	r3, #1
 8002004:	221c      	movs	r2, #28
 8002006:	21d0      	movs	r1, #208	; 0xd0
 8002008:	480a      	ldr	r0, [pc, #40]	; (8002034 <_Z14MPU6050_Baslatv+0x80>)
 800200a:	f002 f94f 	bl	80042ac <HAL_I2C_Mem_Write>
	config = 0x04; //0x04
 800200e:	2304      	movs	r3, #4
 8002010:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_DLPF_REG, 1, &config, 1, 5); //Low Pass Filter 94 Hz'e ayarlandı
 8002012:	2305      	movs	r3, #5
 8002014:	9302      	str	r3, [sp, #8]
 8002016:	2301      	movs	r3, #1
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	1dfb      	adds	r3, r7, #7
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	2301      	movs	r3, #1
 8002020:	221a      	movs	r2, #26
 8002022:	21d0      	movs	r1, #208	; 0xd0
 8002024:	4803      	ldr	r0, [pc, #12]	; (8002034 <_Z14MPU6050_Baslatv+0x80>)
 8002026:	f002 f941 	bl	80042ac <HAL_I2C_Mem_Write>


}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	2000008c 	.word	0x2000008c

08002038 <_Z9Check_Armv>:


void Check_Arm() {
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
	if(!armed) {
 800203c:	4b23      	ldr	r3, [pc, #140]	; (80020cc <_Z9Check_Armv+0x94>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	f083 0301 	eor.w	r3, r3, #1
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d03e      	beq.n	80020c8 <_Z9Check_Armv+0x90>
		if((ch[2] < 1100) && (ch[3] > 1700)) {
 800204a:	4b21      	ldr	r3, [pc, #132]	; (80020d0 <_Z9Check_Armv+0x98>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f240 424b 	movw	r2, #1099	; 0x44b
 8002052:	4293      	cmp	r3, r2
 8002054:	dc34      	bgt.n	80020c0 <_Z9Check_Armv+0x88>
 8002056:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <_Z9Check_Armv+0x98>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800205e:	4293      	cmp	r3, r2
 8002060:	dd2e      	ble.n	80020c0 <_Z9Check_Armv+0x88>
				if(!arm_start){
 8002062:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <_Z9Check_Armv+0x9c>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	f083 0301 	eor.w	r3, r3, #1
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 8002070:	f001 f988 	bl	8003384 <HAL_GetTick>
 8002074:	4603      	mov	r3, r0
 8002076:	461a      	mov	r2, r3
 8002078:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <_Z9Check_Armv+0xa0>)
 800207a:	601a      	str	r2, [r3, #0]
					arm_start = true;
 800207c:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <_Z9Check_Armv+0x9c>)
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 8002082:	f001 f97f 	bl	8003384 <HAL_GetTick>
 8002086:	4603      	mov	r3, r0
 8002088:	4a13      	ldr	r2, [pc, #76]	; (80020d8 <_Z9Check_Armv+0xa0>)
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	1a9b      	subs	r3, r3, r2
 800208e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002092:	4293      	cmp	r3, r2
 8002094:	bf8c      	ite	hi
 8002096:	2301      	movhi	r3, #1
 8002098:	2300      	movls	r3, #0
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d013      	beq.n	80020c8 <_Z9Check_Armv+0x90>
					controller.pid_roll.reset();
 80020a0:	480e      	ldr	r0, [pc, #56]	; (80020dc <_Z9Check_Armv+0xa4>)
 80020a2:	f007 f8fd 	bl	80092a0 <_ZN3PID5resetEv>
					controller.pid_pitch.reset();
 80020a6:	480e      	ldr	r0, [pc, #56]	; (80020e0 <_Z9Check_Armv+0xa8>)
 80020a8:	f007 f8fa 	bl	80092a0 <_ZN3PID5resetEv>
					armed = true;
 80020ac:	4b07      	ldr	r3, [pc, #28]	; (80020cc <_Z9Check_Armv+0x94>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80020b2:	2201      	movs	r2, #1
 80020b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020b8:	480a      	ldr	r0, [pc, #40]	; (80020e4 <_Z9Check_Armv+0xac>)
 80020ba:	f001 fc23 	bl	8003904 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - arm_timer > 3000) {
 80020be:	e003      	b.n	80020c8 <_Z9Check_Armv+0x90>
				}

		}

		else {
			arm_start = false;
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <_Z9Check_Armv+0x9c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80020c6:	e7ff      	b.n	80020c8 <_Z9Check_Armv+0x90>
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	200007d9 	.word	0x200007d9
 80020d0:	200007a4 	.word	0x200007a4
 80020d4:	200007d8 	.word	0x200007d8
 80020d8:	200007cc 	.word	0x200007cc
 80020dc:	20000620 	.word	0x20000620
 80020e0:	20000690 	.word	0x20000690
 80020e4:	40010800 	.word	0x40010800

080020e8 <_Z12Check_Disarmv>:

void Check_Disarm() {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	if(armed) {
 80020ec:	4b1f      	ldr	r3, [pc, #124]	; (800216c <_Z12Check_Disarmv+0x84>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d038      	beq.n	8002166 <_Z12Check_Disarmv+0x7e>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 80020f4:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <_Z12Check_Disarmv+0x88>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f240 424b 	movw	r2, #1099	; 0x44b
 80020fc:	4293      	cmp	r3, r2
 80020fe:	dc2e      	bgt.n	800215e <_Z12Check_Disarmv+0x76>
 8002100:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <_Z12Check_Disarmv+0x88>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f240 424b 	movw	r2, #1099	; 0x44b
 8002108:	4293      	cmp	r3, r2
 800210a:	dc28      	bgt.n	800215e <_Z12Check_Disarmv+0x76>
				if(!disarm_start){
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <_Z12Check_Disarmv+0x8c>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	f083 0301 	eor.w	r3, r3, #1
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d008      	beq.n	800212c <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 800211a:	f001 f933 	bl	8003384 <HAL_GetTick>
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <_Z12Check_Disarmv+0x90>)
 8002124:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <_Z12Check_Disarmv+0x8c>)
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 800212c:	f001 f92a 	bl	8003384 <HAL_GetTick>
 8002130:	4603      	mov	r3, r0
 8002132:	4a11      	ldr	r2, [pc, #68]	; (8002178 <_Z12Check_Disarmv+0x90>)
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	1a9b      	subs	r3, r3, r2
 8002138:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800213c:	4293      	cmp	r3, r2
 800213e:	bf8c      	ite	hi
 8002140:	2301      	movhi	r3, #1
 8002142:	2300      	movls	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00d      	beq.n	8002166 <_Z12Check_Disarmv+0x7e>
					armed = false;
 800214a:	4b08      	ldr	r3, [pc, #32]	; (800216c <_Z12Check_Disarmv+0x84>)
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8002150:	2200      	movs	r2, #0
 8002152:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002156:	4809      	ldr	r0, [pc, #36]	; (800217c <_Z12Check_Disarmv+0x94>)
 8002158:	f001 fbd4 	bl	8003904 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 800215c:	e003      	b.n	8002166 <_Z12Check_Disarmv+0x7e>
				}

		}

		else {
			disarm_start = false;
 800215e:	4b05      	ldr	r3, [pc, #20]	; (8002174 <_Z12Check_Disarmv+0x8c>)
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002164:	e7ff      	b.n	8002166 <_Z12Check_Disarmv+0x7e>
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200007d9 	.word	0x200007d9
 8002170:	200007a4 	.word	0x200007a4
 8002174:	200007db 	.word	0x200007db
 8002178:	200007d0 	.word	0x200007d0
 800217c:	40010800 	.word	0x40010800

08002180 <_Z9TelemPackv>:

void TelemPack() {
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 8002184:	4b54      	ldr	r3, [pc, #336]	; (80022d8 <_Z9TelemPackv+0x158>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a54      	ldr	r2, [pc, #336]	; (80022dc <_Z9TelemPackv+0x15c>)
 800218a:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 800218c:	4b52      	ldr	r3, [pc, #328]	; (80022d8 <_Z9TelemPackv+0x158>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4a52      	ldr	r2, [pc, #328]	; (80022dc <_Z9TelemPackv+0x15c>)
 8002192:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 8002194:	4b50      	ldr	r3, [pc, #320]	; (80022d8 <_Z9TelemPackv+0x158>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	4a50      	ldr	r2, [pc, #320]	; (80022dc <_Z9TelemPackv+0x15c>)
 800219a:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 800219c:	4b50      	ldr	r3, [pc, #320]	; (80022e0 <_Z9TelemPackv+0x160>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	4b4e      	ldr	r3, [pc, #312]	; (80022dc <_Z9TelemPackv+0x15c>)
 80021a4:	861a      	strh	r2, [r3, #48]	; 0x30
	  telem_pack.pwm.w2 = controller_output[1];
 80021a6:	4b4e      	ldr	r3, [pc, #312]	; (80022e0 <_Z9TelemPackv+0x160>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	4b4b      	ldr	r3, [pc, #300]	; (80022dc <_Z9TelemPackv+0x15c>)
 80021ae:	865a      	strh	r2, [r3, #50]	; 0x32
	  telem_pack.pwm.w3 = controller_output[2];
 80021b0:	4b4b      	ldr	r3, [pc, #300]	; (80022e0 <_Z9TelemPackv+0x160>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	4b49      	ldr	r3, [pc, #292]	; (80022dc <_Z9TelemPackv+0x15c>)
 80021b8:	869a      	strh	r2, [r3, #52]	; 0x34
	  telem_pack.pwm.w4 = controller_output[3];
 80021ba:	4b49      	ldr	r3, [pc, #292]	; (80022e0 <_Z9TelemPackv+0x160>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	b29a      	uxth	r2, r3
 80021c0:	4b46      	ldr	r3, [pc, #280]	; (80022dc <_Z9TelemPackv+0x15c>)
 80021c2:	86da      	strh	r2, [r3, #54]	; 0x36

	  telem_pack.attitude_des.roll  = state_des.angles[0];
 80021c4:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <_Z9TelemPackv+0x164>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a44      	ldr	r2, [pc, #272]	; (80022dc <_Z9TelemPackv+0x15c>)
 80021ca:	60d3      	str	r3, [r2, #12]
	  telem_pack.attitude_des.pitch = state_des.angles[1];
 80021cc:	4b45      	ldr	r3, [pc, #276]	; (80022e4 <_Z9TelemPackv+0x164>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a42      	ldr	r2, [pc, #264]	; (80022dc <_Z9TelemPackv+0x15c>)
 80021d2:	6113      	str	r3, [r2, #16]
	  telem_pack.attitude_des.yaw   = state_des.angles[2];
 80021d4:	4b43      	ldr	r3, [pc, #268]	; (80022e4 <_Z9TelemPackv+0x164>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	4a40      	ldr	r2, [pc, #256]	; (80022dc <_Z9TelemPackv+0x15c>)
 80021da:	6153      	str	r3, [r2, #20]

	  telem_pack.attitude_rate.roll =  state.rates[0];
 80021dc:	4b3e      	ldr	r3, [pc, #248]	; (80022d8 <_Z9TelemPackv+0x158>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4a3e      	ldr	r2, [pc, #248]	; (80022dc <_Z9TelemPackv+0x15c>)
 80021e2:	6193      	str	r3, [r2, #24]
	  telem_pack.attitude_rate.pitch = state.rates[1];
 80021e4:	4b3c      	ldr	r3, [pc, #240]	; (80022d8 <_Z9TelemPackv+0x158>)
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	4a3c      	ldr	r2, [pc, #240]	; (80022dc <_Z9TelemPackv+0x15c>)
 80021ea:	61d3      	str	r3, [r2, #28]

	  telem_pack.attitude_rate_des.roll =  state_des.rates[0];
 80021ec:	4b3d      	ldr	r3, [pc, #244]	; (80022e4 <_Z9TelemPackv+0x164>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4a3a      	ldr	r2, [pc, #232]	; (80022dc <_Z9TelemPackv+0x15c>)
 80021f2:	6253      	str	r3, [r2, #36]	; 0x24
	  telem_pack.attitude_rate_des.pitch = state_des.rates[1];
 80021f4:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <_Z9TelemPackv+0x164>)
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	4a38      	ldr	r2, [pc, #224]	; (80022dc <_Z9TelemPackv+0x15c>)
 80021fa:	6293      	str	r3, [r2, #40]	; 0x28

	  telem_pack.ekf.roll_acc  = EKF.roll_acc;
 80021fc:	4b3a      	ldr	r3, [pc, #232]	; (80022e8 <_Z9TelemPackv+0x168>)
 80021fe:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8002202:	4a36      	ldr	r2, [pc, #216]	; (80022dc <_Z9TelemPackv+0x15c>)
 8002204:	6393      	str	r3, [r2, #56]	; 0x38
	  telem_pack.ekf.pitch_acc = EKF.pitch_acc;
 8002206:	4b38      	ldr	r3, [pc, #224]	; (80022e8 <_Z9TelemPackv+0x168>)
 8002208:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800220c:	4a33      	ldr	r2, [pc, #204]	; (80022dc <_Z9TelemPackv+0x15c>)
 800220e:	63d3      	str	r3, [r2, #60]	; 0x3c
	  telem_pack.ekf.yaw_acc   = EKF.yaw_acc;
 8002210:	4b35      	ldr	r3, [pc, #212]	; (80022e8 <_Z9TelemPackv+0x168>)
 8002212:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8002216:	4a31      	ldr	r2, [pc, #196]	; (80022dc <_Z9TelemPackv+0x15c>)
 8002218:	6413      	str	r3, [r2, #64]	; 0x40

	  telem_pack.ekf.roll_gyro =  EKF.roll_comp;
 800221a:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <_Z9TelemPackv+0x168>)
 800221c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002220:	4a2e      	ldr	r2, [pc, #184]	; (80022dc <_Z9TelemPackv+0x15c>)
 8002222:	6453      	str	r3, [r2, #68]	; 0x44
	  telem_pack.ekf.pitch_gyro = EKF.pitch_comp;
 8002224:	4b30      	ldr	r3, [pc, #192]	; (80022e8 <_Z9TelemPackv+0x168>)
 8002226:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800222a:	4a2c      	ldr	r2, [pc, #176]	; (80022dc <_Z9TelemPackv+0x15c>)
 800222c:	6493      	str	r3, [r2, #72]	; 0x48

	  telem_pack.pid_roll.P = controller.pid_roll.P;
 800222e:	4b2f      	ldr	r3, [pc, #188]	; (80022ec <_Z9TelemPackv+0x16c>)
 8002230:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	f7fe fc1e 	bl	8000a78 <__aeabi_d2f>
 800223c:	4603      	mov	r3, r0
 800223e:	4a27      	ldr	r2, [pc, #156]	; (80022dc <_Z9TelemPackv+0x15c>)
 8002240:	64d3      	str	r3, [r2, #76]	; 0x4c
	  telem_pack.pid_roll.I = controller.pid_roll.I;
 8002242:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <_Z9TelemPackv+0x16c>)
 8002244:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	f7fe fc14 	bl	8000a78 <__aeabi_d2f>
 8002250:	4603      	mov	r3, r0
 8002252:	4a22      	ldr	r2, [pc, #136]	; (80022dc <_Z9TelemPackv+0x15c>)
 8002254:	6513      	str	r3, [r2, #80]	; 0x50
	  telem_pack.pid_roll.D = controller.pid_roll.D;
 8002256:	4b25      	ldr	r3, [pc, #148]	; (80022ec <_Z9TelemPackv+0x16c>)
 8002258:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 800225c:	4610      	mov	r0, r2
 800225e:	4619      	mov	r1, r3
 8002260:	f7fe fc0a 	bl	8000a78 <__aeabi_d2f>
 8002264:	4603      	mov	r3, r0
 8002266:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <_Z9TelemPackv+0x15c>)
 8002268:	6553      	str	r3, [r2, #84]	; 0x54
	  telem_pack.pid_roll.pd_roll_sat_buf = controller.pid_roll.pd_roll_sat_buf;
 800226a:	4b20      	ldr	r3, [pc, #128]	; (80022ec <_Z9TelemPackv+0x16c>)
 800226c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002270:	4a1a      	ldr	r2, [pc, #104]	; (80022dc <_Z9TelemPackv+0x15c>)
 8002272:	6593      	str	r3, [r2, #88]	; 0x58

	  telem_pack.pid_pitch.P = controller.pid_pitch.P;
 8002274:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <_Z9TelemPackv+0x16c>)
 8002276:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 800227a:	4610      	mov	r0, r2
 800227c:	4619      	mov	r1, r3
 800227e:	f7fe fbfb 	bl	8000a78 <__aeabi_d2f>
 8002282:	4603      	mov	r3, r0
 8002284:	4a15      	ldr	r2, [pc, #84]	; (80022dc <_Z9TelemPackv+0x15c>)
 8002286:	65d3      	str	r3, [r2, #92]	; 0x5c
	  telem_pack.pid_pitch.I = controller.pid_pitch.I;
 8002288:	4b18      	ldr	r3, [pc, #96]	; (80022ec <_Z9TelemPackv+0x16c>)
 800228a:	e9d3 2366 	ldrd	r2, r3, [r3, #408]	; 0x198
 800228e:	4610      	mov	r0, r2
 8002290:	4619      	mov	r1, r3
 8002292:	f7fe fbf1 	bl	8000a78 <__aeabi_d2f>
 8002296:	4603      	mov	r3, r0
 8002298:	4a10      	ldr	r2, [pc, #64]	; (80022dc <_Z9TelemPackv+0x15c>)
 800229a:	6613      	str	r3, [r2, #96]	; 0x60
	  telem_pack.pid_pitch.D = controller.pid_pitch.D;
 800229c:	4b13      	ldr	r3, [pc, #76]	; (80022ec <_Z9TelemPackv+0x16c>)
 800229e:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 80022a2:	4610      	mov	r0, r2
 80022a4:	4619      	mov	r1, r3
 80022a6:	f7fe fbe7 	bl	8000a78 <__aeabi_d2f>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4a0b      	ldr	r2, [pc, #44]	; (80022dc <_Z9TelemPackv+0x15c>)
 80022ae:	6653      	str	r3, [r2, #100]	; 0x64
	  telem_pack.pid_pitch.pd_roll_sat_buf = controller.pid_pitch.pd_roll_sat_buf;
 80022b0:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <_Z9TelemPackv+0x16c>)
 80022b2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80022b6:	4a09      	ldr	r2, [pc, #36]	; (80022dc <_Z9TelemPackv+0x15c>)
 80022b8:	6693      	str	r3, [r2, #104]	; 0x68
	  telem_pack.time_millis = HAL_GetTick();
 80022ba:	f001 f863 	bl	8003384 <HAL_GetTick>
 80022be:	4603      	mov	r3, r0
 80022c0:	4a06      	ldr	r2, [pc, #24]	; (80022dc <_Z9TelemPackv+0x15c>)
 80022c2:	66d3      	str	r3, [r2, #108]	; 0x6c
	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 80022c4:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <_Z9TelemPackv+0x170>)
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <_Z9TelemPackv+0x15c>)
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	2370      	movs	r3, #112	; 0x70
 80022ce:	461a      	mov	r2, r3
 80022d0:	f008 fcfe 	bl	800acd0 <memcpy>
}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000290 	.word	0x20000290
 80022dc:	200002b4 	.word	0x200002b4
 80022e0:	20000770 	.word	0x20000770
 80022e4:	2000026c 	.word	0x2000026c
 80022e8:	20000398 	.word	0x20000398
 80022ec:	20000550 	.word	0x20000550
 80022f0:	20000324 	.word	0x20000324

080022f4 <_Z7GyroOkuh>:

int16_t GyroOku (uint8_t addr) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af04      	add	r7, sp, #16
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	b29a      	uxth	r2, r3
 8002302:	2301      	movs	r3, #1
 8002304:	9302      	str	r3, [sp, #8]
 8002306:	2302      	movs	r3, #2
 8002308:	9301      	str	r3, [sp, #4]
 800230a:	f107 030c 	add.w	r3, r7, #12
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	2301      	movs	r3, #1
 8002312:	21d1      	movs	r1, #209	; 0xd1
 8002314:	4807      	ldr	r0, [pc, #28]	; (8002334 <_Z7GyroOkuh+0x40>)
 8002316:	f002 f8c3 	bl	80044a0 <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 800231a:	7b3b      	ldrb	r3, [r7, #12]
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	b21a      	sxth	r2, r3
 8002320:	7b7b      	ldrb	r3, [r7, #13]
 8002322:	b21b      	sxth	r3, r3
 8002324:	4313      	orrs	r3, r2
 8002326:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8002328:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	2000008c 	.word	0x2000008c

08002338 <_Z6PWMYazv>:




void PWMYaz() {
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
	  if(ch[EMERGENCY_CH-1] < 1500) {
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <_Z6PWMYazv+0x6c>)
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	f240 52db 	movw	r2, #1499	; 0x5db
 8002344:	4293      	cmp	r3, r2
 8002346:	dc14      	bgt.n	8002372 <_Z6PWMYazv+0x3a>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output[0]);
 8002348:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <_Z6PWMYazv+0x70>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b17      	ldr	r3, [pc, #92]	; (80023ac <_Z6PWMYazv+0x74>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output[1]);
 8002352:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <_Z6PWMYazv+0x70>)
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	4b15      	ldr	r3, [pc, #84]	; (80023ac <_Z6PWMYazv+0x74>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output[2]);
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <_Z6PWMYazv+0x70>)
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	4b12      	ldr	r3, [pc, #72]	; (80023ac <_Z6PWMYazv+0x74>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output[3]);
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <_Z6PWMYazv+0x70>)
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <_Z6PWMYazv+0x74>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
	  }
}
 8002370:	e013      	b.n	800239a <_Z6PWMYazv+0x62>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <_Z6PWMYazv+0x74>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800237a:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <_Z6PWMYazv+0x74>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002384:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8002386:	4b09      	ldr	r3, [pc, #36]	; (80023ac <_Z6PWMYazv+0x74>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800238e:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <_Z6PWMYazv+0x74>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002398:	641a      	str	r2, [r3, #64]	; 0x40
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	200007a4 	.word	0x200007a4
 80023a8:	20000770 	.word	0x20000770
 80023ac:	200000e0 	.word	0x200000e0

080023b0 <_Z7GyroErrh>:


float GyroErr(uint8_t addr) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
	float GyroXh=0;
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 80023c0:	2300      	movs	r3, #0
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80023ca:	da0c      	bge.n	80023e6 <_Z7GyroErrh+0x36>
	{
		GyroXh = (GyroOku(GYRO_X_ADDR));
 80023cc:	2043      	movs	r0, #67	; 0x43
 80023ce:	f7ff ff91 	bl	80022f4 <_Z7GyroOkuh>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe fc59 	bl	8000c8c <__aeabi_i2f>
 80023da:	4603      	mov	r3, r0
 80023dc:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	3301      	adds	r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	e7ee      	b.n	80023c4 <_Z7GyroErrh+0x14>

	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
 80023e6:	4905      	ldr	r1, [pc, #20]	; (80023fc <_Z7GyroErrh+0x4c>)
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f7fe fd57 	bl	8000e9c <__aeabi_fdiv>
 80023ee:	4603      	mov	r3, r0
 80023f0:	60fb      	str	r3, [r7, #12]
	return GyroXh;
 80023f2:	68fb      	ldr	r3, [r7, #12]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	44fa0000 	.word	0x44fa0000

08002400 <_Z11MotorBaslatv>:

void MotorBaslat(void) {
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <_Z11MotorBaslatv+0x38>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800240c:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <_Z11MotorBaslatv+0x38>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002416:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8002418:	4b07      	ldr	r3, [pc, #28]	; (8002438 <_Z11MotorBaslatv+0x38>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002420:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <_Z11MotorBaslatv+0x38>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800242a:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 800242c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002430:	f000 ffb2 	bl	8003398 <HAL_Delay>
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	200000e0 	.word	0x200000e0
 800243c:	00000000 	.word	0x00000000

08002440 <HAL_TIM_PeriodElapsedCallback>:
		ITM_SendChar((*ptr++));
	}
	return len;
}

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8002440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002442:	b09f      	sub	sp, #124	; 0x7c
 8002444:	af12      	add	r7, sp, #72	; 0x48
 8002446:	6078      	str	r0, [r7, #4]

	if(htim == &htim2) {
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4ab1      	ldr	r2, [pc, #708]	; (8002710 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	f040 81f8 	bne.w	8002842 <HAL_TIM_PeriodElapsedCallback+0x402>


		  gyroX = (GyroOku(GYRO_X_ADDR))/65.5 - GyroXh;
 8002452:	2043      	movs	r0, #67	; 0x43
 8002454:	f7ff ff4e 	bl	80022f4 <_Z7GyroOkuh>
 8002458:	4603      	mov	r3, r0
 800245a:	4618      	mov	r0, r3
 800245c:	f7fd ffca 	bl	80003f4 <__aeabi_i2d>
 8002460:	a3a7      	add	r3, pc, #668	; (adr r3, 8002700 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	f7fe f959 	bl	800071c <__aeabi_ddiv>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4614      	mov	r4, r2
 8002470:	461d      	mov	r5, r3
 8002472:	4ba8      	ldr	r3, [pc, #672]	; (8002714 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7fd ffce 	bl	8000418 <__aeabi_f2d>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4620      	mov	r0, r4
 8002482:	4629      	mov	r1, r5
 8002484:	f7fd fe68 	bl	8000158 <__aeabi_dsub>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4610      	mov	r0, r2
 800248e:	4619      	mov	r1, r3
 8002490:	f7fe faf2 	bl	8000a78 <__aeabi_d2f>
 8002494:	4603      	mov	r3, r0
 8002496:	4aa0      	ldr	r2, [pc, #640]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002498:	6013      	str	r3, [r2, #0]
		  gyroY = (GyroOku(GYRO_Y_ADDR))/65.5 - GyroYh;
 800249a:	2045      	movs	r0, #69	; 0x45
 800249c:	f7ff ff2a 	bl	80022f4 <_Z7GyroOkuh>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fd ffa6 	bl	80003f4 <__aeabi_i2d>
 80024a8:	a395      	add	r3, pc, #596	; (adr r3, 8002700 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80024aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ae:	f7fe f935 	bl	800071c <__aeabi_ddiv>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4614      	mov	r4, r2
 80024b8:	461d      	mov	r5, r3
 80024ba:	4b98      	ldr	r3, [pc, #608]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fd ffaa 	bl	8000418 <__aeabi_f2d>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4620      	mov	r0, r4
 80024ca:	4629      	mov	r1, r5
 80024cc:	f7fd fe44 	bl	8000158 <__aeabi_dsub>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4610      	mov	r0, r2
 80024d6:	4619      	mov	r1, r3
 80024d8:	f7fe face 	bl	8000a78 <__aeabi_d2f>
 80024dc:	4603      	mov	r3, r0
 80024de:	4a90      	ldr	r2, [pc, #576]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80024e0:	6013      	str	r3, [r2, #0]
		  gyroZ = (GyroOku(GYRO_Z_ADDR))/65.5 - GyroZh;
 80024e2:	2047      	movs	r0, #71	; 0x47
 80024e4:	f7ff ff06 	bl	80022f4 <_Z7GyroOkuh>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fd ff82 	bl	80003f4 <__aeabi_i2d>
 80024f0:	a383      	add	r3, pc, #524	; (adr r3, 8002700 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80024f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f6:	f7fe f911 	bl	800071c <__aeabi_ddiv>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4614      	mov	r4, r2
 8002500:	461d      	mov	r5, r3
 8002502:	4b88      	ldr	r3, [pc, #544]	; (8002724 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fd ff86 	bl	8000418 <__aeabi_f2d>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4620      	mov	r0, r4
 8002512:	4629      	mov	r1, r5
 8002514:	f7fd fe20 	bl	8000158 <__aeabi_dsub>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4610      	mov	r0, r2
 800251e:	4619      	mov	r1, r3
 8002520:	f7fe faaa 	bl	8000a78 <__aeabi_d2f>
 8002524:	4603      	mov	r3, r0
 8002526:	4a80      	ldr	r2, [pc, #512]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002528:	6013      	str	r3, [r2, #0]
		  //gyroX_a_x = (GyroOku(GYRO_X_ADDR)-gyro_e_x)/65.5;
		  //gyroX_a += gyroX_a_x * st;

		  float gyro[3];
		  gyro[0] = gyroX;
 800252a:	4b7b      	ldr	r3, [pc, #492]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	617b      	str	r3, [r7, #20]
		  gyro[1] = -1*gyroY;
 8002530:	4b7b      	ldr	r3, [pc, #492]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002538:	61bb      	str	r3, [r7, #24]
		  gyro[2] = gyroZ;
 800253a:	4b7b      	ldr	r3, [pc, #492]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	61fb      	str	r3, [r7, #28]

		  //İvmeölçer degerlerini oku
		  accX = GyroOku(ACC_X_ADDR);
 8002540:	203b      	movs	r0, #59	; 0x3b
 8002542:	f7ff fed7 	bl	80022f4 <_Z7GyroOkuh>
 8002546:	4603      	mov	r3, r0
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe fb9f 	bl	8000c8c <__aeabi_i2f>
 800254e:	4603      	mov	r3, r0
 8002550:	4a76      	ldr	r2, [pc, #472]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002552:	6013      	str	r3, [r2, #0]
		  accY = GyroOku(ACC_Y_ADDR);
 8002554:	203d      	movs	r0, #61	; 0x3d
 8002556:	f7ff fecd 	bl	80022f4 <_Z7GyroOkuh>
 800255a:	4603      	mov	r3, r0
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe fb95 	bl	8000c8c <__aeabi_i2f>
 8002562:	4603      	mov	r3, r0
 8002564:	4a72      	ldr	r2, [pc, #456]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002566:	6013      	str	r3, [r2, #0]
		  accZ = GyroOku(ACC_Z_ADDR);
 8002568:	203f      	movs	r0, #63	; 0x3f
 800256a:	f7ff fec3 	bl	80022f4 <_Z7GyroOkuh>
 800256e:	4603      	mov	r3, r0
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe fb8b 	bl	8000c8c <__aeabi_i2f>
 8002576:	4603      	mov	r3, r0
 8002578:	4a6e      	ldr	r2, [pc, #440]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800257a:	6013      	str	r3, [r2, #0]

		  float acc[3];
		  acc[0] = accX;
 800257c:	4b6b      	ldr	r3, [pc, #428]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60bb      	str	r3, [r7, #8]
		  acc[1] = accY;
 8002582:	4b6b      	ldr	r3, [pc, #428]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	60fb      	str	r3, [r7, #12]
		  acc[2] = accZ;
 8002588:	4b6a      	ldr	r3, [pc, #424]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	613b      	str	r3, [r7, #16]

		  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
 800258e:	4b67      	ldr	r3, [pc, #412]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a66      	ldr	r2, [pc, #408]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe fbcb 	bl	8000d34 <__aeabi_fmul>
 800259e:	4603      	mov	r3, r0
 80025a0:	461c      	mov	r4, r3
 80025a2:	4b63      	ldr	r3, [pc, #396]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a62      	ldr	r2, [pc, #392]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fe fbc1 	bl	8000d34 <__aeabi_fmul>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4619      	mov	r1, r3
 80025b6:	4620      	mov	r0, r4
 80025b8:	f7fe fab4 	bl	8000b24 <__addsf3>
 80025bc:	4603      	mov	r3, r0
 80025be:	461c      	mov	r4, r3
 80025c0:	4b5c      	ldr	r3, [pc, #368]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a5b      	ldr	r2, [pc, #364]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fbb2 	bl	8000d34 <__aeabi_fmul>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4619      	mov	r1, r3
 80025d4:	4620      	mov	r0, r4
 80025d6:	f7fe faa5 	bl	8000b24 <__addsf3>
 80025da:	4603      	mov	r3, r0
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff f8cb 	bl	8001778 <_ZSt4sqrtf>
 80025e2:	62f8      	str	r0, [r7, #44]	; 0x2c
		  pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı
 80025e4:	4b52      	ldr	r3, [pc, #328]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe fc56 	bl	8000e9c <__aeabi_fdiv>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff f8b4 	bl	8001760 <_ZSt4asinf>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fd ff0c 	bl	8000418 <__aeabi_f2d>
 8002600:	a341      	add	r3, pc, #260	; (adr r3, 8002708 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002606:	f7fd ff5f 	bl	80004c8 <__aeabi_dmul>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4610      	mov	r0, r2
 8002610:	4619      	mov	r1, r3
 8002612:	f7fe fa31 	bl	8000a78 <__aeabi_d2f>
 8002616:	4603      	mov	r3, r0
 8002618:	4a47      	ldr	r2, [pc, #284]	; (8002738 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800261a:	6013      	str	r3, [r2, #0]

		  EKF.Run(gyro,acc);
 800261c:	f107 0208 	add.w	r2, r7, #8
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	4619      	mov	r1, r3
 8002626:	4845      	ldr	r0, [pc, #276]	; (800273c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002628:	f005 fd22 	bl	8008070 <_ZN15Kalman_Filtresi3RunEPfS0_>
		  state.angles[0]  	  = EKF.state.angles[0];
 800262c:	4b43      	ldr	r3, [pc, #268]	; (800273c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800262e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002632:	4a43      	ldr	r2, [pc, #268]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002634:	6013      	str	r3, [r2, #0]
		  state.angles[1] 	  = EKF.state.angles[1];
 8002636:	4b41      	ldr	r3, [pc, #260]	; (800273c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002638:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800263c:	4a40      	ldr	r2, [pc, #256]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800263e:	6053      	str	r3, [r2, #4]
		  state.angles[2]     = EKF.state.angles[2];
 8002640:	4b3e      	ldr	r3, [pc, #248]	; (800273c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002642:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002646:	4a3e      	ldr	r2, [pc, #248]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002648:	6093      	str	r3, [r2, #8]

		  state.rates[0] = gyroX;
 800264a:	4b33      	ldr	r3, [pc, #204]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a3c      	ldr	r2, [pc, #240]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002650:	60d3      	str	r3, [r2, #12]
		  state.rates[1] = -1*gyroY;
 8002652:	4b33      	ldr	r3, [pc, #204]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800265a:	4a39      	ldr	r2, [pc, #228]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800265c:	6113      	str	r3, [r2, #16]
		  state.rates[2] = gyroZ;
 800265e:	4b32      	ldr	r3, [pc, #200]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a37      	ldr	r2, [pc, #220]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002664:	6153      	str	r3, [r2, #20]

		  bmp.uncomp.temp = get_ut ();
 8002666:	f7fe fe63 	bl	8001330 <get_ut>
 800266a:	4603      	mov	r3, r0
 800266c:	4618      	mov	r0, r3
 800266e:	f7fe fb0d 	bl	8000c8c <__aeabi_i2f>
 8002672:	4603      	mov	r3, r0
 8002674:	4a33      	ldr	r2, [pc, #204]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002676:	6193      	str	r3, [r2, #24]
		  bmp.data.temp = get_temp (&bmp);
 8002678:	4832      	ldr	r0, [pc, #200]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800267a:	f7fe fe83 	bl	8001384 <get_temp>
 800267e:	4603      	mov	r3, r0
 8002680:	4a30      	ldr	r2, [pc, #192]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002682:	6293      	str	r3, [r2, #40]	; 0x28
		  bmp.uncomp.press = get_up (bmp.oss);
 8002684:	4b2f      	ldr	r3, [pc, #188]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002686:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002688:	f7fe fed4 	bl	8001434 <get_up>
 800268c:	4603      	mov	r3, r0
 800268e:	4a2d      	ldr	r2, [pc, #180]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002690:	61d3      	str	r3, [r2, #28]
		  bmp.data.press = get_pressure (bmp);
 8002692:	4e2c      	ldr	r6, [pc, #176]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002694:	466d      	mov	r5, sp
 8002696:	f106 0410 	add.w	r4, r6, #16
 800269a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800269c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800269e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80026a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80026aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80026ae:	f7fe ff03 	bl	80014b8 <get_pressure>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4a23      	ldr	r2, [pc, #140]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80026b6:	62d3      	str	r3, [r2, #44]	; 0x2c
		  bmp.data.altitude = get_altitude (&bmp);
 80026b8:	4822      	ldr	r0, [pc, #136]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80026ba:	f7fe ffc9 	bl	8001650 <get_altitude>
 80026be:	4603      	mov	r3, r0
 80026c0:	4a20      	ldr	r2, [pc, #128]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80026c2:	6353      	str	r3, [r2, #52]	; 0x34

		  alt = bmp.data.altitude;
 80026c4:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80026c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c8:	4a1f      	ldr	r2, [pc, #124]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80026ca:	6013      	str	r3, [r2, #0]
		  sonar_alt = (float)getRange()/100.0;
 80026cc:	f7ff f81c 	bl	8001708 <getRange>
 80026d0:	4603      	mov	r3, r0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fada 	bl	8000c8c <__aeabi_i2f>
 80026d8:	4603      	mov	r3, r0
 80026da:	491c      	ldr	r1, [pc, #112]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe fbdd 	bl	8000e9c <__aeabi_fdiv>
 80026e2:	4603      	mov	r3, r0
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80026e8:	601a      	str	r2, [r3, #0]
		 // alpha_des = 0;
		 // printf("roll: %d\r\n",int(roll));


		  controller_output_ang = controller.Run(state, state_des, ch[2]);
 80026ea:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f107 0c20 	add.w	ip, r7, #32
 80026f2:	4e13      	ldr	r6, [pc, #76]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80026f4:	9310      	str	r3, [sp, #64]	; 0x40
 80026f6:	4b18      	ldr	r3, [pc, #96]	; (8002758 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80026f8:	ac07      	add	r4, sp, #28
 80026fa:	461d      	mov	r5, r3
 80026fc:	e02e      	b.n	800275c <HAL_TIM_PeriodElapsedCallback+0x31c>
 80026fe:	bf00      	nop
 8002700:	00000000 	.word	0x00000000
 8002704:	40506000 	.word	0x40506000
 8002708:	d4fdf3b6 	.word	0xd4fdf3b6
 800270c:	404ca978 	.word	0x404ca978
 8002710:	20000128 	.word	0x20000128
 8002714:	20000258 	.word	0x20000258
 8002718:	20000240 	.word	0x20000240
 800271c:	2000025c 	.word	0x2000025c
 8002720:	20000244 	.word	0x20000244
 8002724:	20000260 	.word	0x20000260
 8002728:	20000248 	.word	0x20000248
 800272c:	2000024c 	.word	0x2000024c
 8002730:	20000250 	.word	0x20000250
 8002734:	20000254 	.word	0x20000254
 8002738:	20000264 	.word	0x20000264
 800273c:	20000398 	.word	0x20000398
 8002740:	20000290 	.word	0x20000290
 8002744:	200007f0 	.word	0x200007f0
 8002748:	200007e8 	.word	0x200007e8
 800274c:	42c80000 	.word	0x42c80000
 8002750:	200007ec 	.word	0x200007ec
 8002754:	200007a4 	.word	0x200007a4
 8002758:	2000026c 	.word	0x2000026c
 800275c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800275e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002764:	682b      	ldr	r3, [r5, #0]
 8002766:	6023      	str	r3, [r4, #0]
 8002768:	466d      	mov	r5, sp
 800276a:	f106 0408 	add.w	r4, r6, #8
 800276e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002772:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002776:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800277a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800277e:	4933      	ldr	r1, [pc, #204]	; (800284c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002780:	4660      	mov	r0, ip
 8002782:	f004 ff23 	bl	80075cc <_ZN10Controller3RunE5stateS0_i>
 8002786:	f107 0320 	add.w	r3, r7, #32
 800278a:	4619      	mov	r1, r3
 800278c:	4830      	ldr	r0, [pc, #192]	; (8002850 <HAL_TIM_PeriodElapsedCallback+0x410>)
 800278e:	f000 f96c 	bl	8002a6a <_ZNSt6vectorIdSaIdEEaSEOS1_>
 8002792:	f107 0320 	add.w	r3, r7, #32
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f94c 	bl	8002a34 <_ZNSt6vectorIdSaIdEED1Ev>
		  controller_output[0] = controller.controller_output_pwm[0];
 800279c:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 800279e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027a2:	4a2c      	ldr	r2, [pc, #176]	; (8002854 <HAL_TIM_PeriodElapsedCallback+0x414>)
 80027a4:	6013      	str	r3, [r2, #0]
		  controller_output[1] = controller.controller_output_pwm[1];
 80027a6:	4b29      	ldr	r3, [pc, #164]	; (800284c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80027a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80027ac:	4a29      	ldr	r2, [pc, #164]	; (8002854 <HAL_TIM_PeriodElapsedCallback+0x414>)
 80027ae:	6053      	str	r3, [r2, #4]
		  controller_output[2] = controller.controller_output_pwm[2];
 80027b0:	4b26      	ldr	r3, [pc, #152]	; (800284c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80027b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80027b6:	4a27      	ldr	r2, [pc, #156]	; (8002854 <HAL_TIM_PeriodElapsedCallback+0x414>)
 80027b8:	6093      	str	r3, [r2, #8]
		  controller_output[3] = controller.controller_output_pwm[3];
 80027ba:	4b24      	ldr	r3, [pc, #144]	; (800284c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80027bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80027c0:	4a24      	ldr	r2, [pc, #144]	; (8002854 <HAL_TIM_PeriodElapsedCallback+0x414>)
 80027c2:	60d3      	str	r3, [r2, #12]

		  state_des.rates[0] = controller.roll_rate_des;
 80027c4:	4b21      	ldr	r3, [pc, #132]	; (800284c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80027c6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80027ca:	4a23      	ldr	r2, [pc, #140]	; (8002858 <HAL_TIM_PeriodElapsedCallback+0x418>)
 80027cc:	60d3      	str	r3, [r2, #12]
		  state_des.rates[1] = controller.pitch_rate_des;
 80027ce:	4b1f      	ldr	r3, [pc, #124]	; (800284c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80027d0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80027d4:	4a20      	ldr	r2, [pc, #128]	; (8002858 <HAL_TIM_PeriodElapsedCallback+0x418>)
 80027d6:	6113      	str	r3, [r2, #16]

		  ie_roll_sat = controller.pid_roll.ie_roll_sat;
 80027d8:	4b1c      	ldr	r3, [pc, #112]	; (800284c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80027da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80027de:	4a1f      	ldr	r2, [pc, #124]	; (800285c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80027e0:	6013      	str	r3, [r2, #0]

		  w_ang = controller.pd_roll;
 80027e2:	4b1a      	ldr	r3, [pc, #104]	; (800284c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80027e4:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 80027e8:	491d      	ldr	r1, [pc, #116]	; (8002860 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80027ea:	e9c1 2300 	strd	r2, r3, [r1]


		  w1 = controller_output[0];
 80027ee:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_TIM_PeriodElapsedCallback+0x414>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <HAL_TIM_PeriodElapsedCallback+0x424>)
 80027f6:	801a      	strh	r2, [r3, #0]
		  w2 = controller_output[1];
 80027f8:	4b16      	ldr	r3, [pc, #88]	; (8002854 <HAL_TIM_PeriodElapsedCallback+0x414>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8002800:	801a      	strh	r2, [r3, #0]
		  w3 = controller_output[2];
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	b29a      	uxth	r2, r3
 8002808:	4b18      	ldr	r3, [pc, #96]	; (800286c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 800280a:	801a      	strh	r2, [r3, #0]
		  w4 = controller_output[3];
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <HAL_TIM_PeriodElapsedCallback+0x414>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	b29a      	uxth	r2, r3
 8002812:	4b17      	ldr	r3, [pc, #92]	; (8002870 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8002814:	801a      	strh	r2, [r3, #0]

		  if(armed) {
 8002816:	4b17      	ldr	r3, [pc, #92]	; (8002874 <HAL_TIM_PeriodElapsedCallback+0x434>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00d      	beq.n	800283a <HAL_TIM_PeriodElapsedCallback+0x3fa>
			  if(!motor_start) {
 800281e:	4b16      	ldr	r3, [pc, #88]	; (8002878 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	f083 0301 	eor.w	r3, r3, #1
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d004      	beq.n	8002836 <HAL_TIM_PeriodElapsedCallback+0x3f6>
				  MotorBaslat();
 800282c:	f7ff fde8 	bl	8002400 <_Z11MotorBaslatv>
				  motor_start = true;
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8002832:	2201      	movs	r2, #1
 8002834:	701a      	strb	r2, [r3, #0]
			  }

			  PWMYaz();
 8002836:	f7ff fd7f 	bl	8002338 <_Z6PWMYazv>
		  }

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800283a:	2102      	movs	r1, #2
 800283c:	480f      	ldr	r0, [pc, #60]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x43c>)
 800283e:	f001 f879 	bl	8003934 <HAL_GPIO_TogglePin>

		}
	}
 8002842:	bf00      	nop
 8002844:	3734      	adds	r7, #52	; 0x34
 8002846:	46bd      	mov	sp, r7
 8002848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800284a:	bf00      	nop
 800284c:	20000550 	.word	0x20000550
 8002850:	20000780 	.word	0x20000780
 8002854:	20000770 	.word	0x20000770
 8002858:	2000026c 	.word	0x2000026c
 800285c:	20000268 	.word	0x20000268
 8002860:	200007e0 	.word	0x200007e0
 8002864:	2000078c 	.word	0x2000078c
 8002868:	2000078e 	.word	0x2000078e
 800286c:	20000790 	.word	0x20000790
 8002870:	20000792 	.word	0x20000792
 8002874:	200007d9 	.word	0x200007d9
 8002878:	200007da 	.word	0x200007da
 800287c:	40010c00 	.word	0x40010c00

08002880 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a43      	ldr	r2, [pc, #268]	; (8002998 <HAL_TIM_IC_CaptureCallback+0x118>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d17f      	bne.n	8002990 <HAL_TIM_IC_CaptureCallback+0x110>

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	7f1b      	ldrb	r3, [r3, #28]
 8002894:	2b04      	cmp	r3, #4
 8002896:	d17b      	bne.n	8002990 <HAL_TIM_IC_CaptureCallback+0x110>
	{
				IC_Val1 = IC_Val2;
 8002898:	4b40      	ldr	r3, [pc, #256]	; (800299c <HAL_TIM_IC_CaptureCallback+0x11c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a40      	ldr	r2, [pc, #256]	; (80029a0 <HAL_TIM_IC_CaptureCallback+0x120>)
 800289e:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 80028a0:	2108      	movs	r1, #8
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f003 ff82 	bl	80067ac <HAL_TIM_ReadCapturedValue>
 80028a8:	4603      	mov	r3, r0
 80028aa:	461a      	mov	r2, r3
 80028ac:	4b3b      	ldr	r3, [pc, #236]	; (800299c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80028ae:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 80028b0:	4b3a      	ldr	r3, [pc, #232]	; (800299c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <HAL_TIM_IC_CaptureCallback+0x120>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	4a3a      	ldr	r2, [pc, #232]	; (80029a4 <HAL_TIM_IC_CaptureCallback+0x124>)
 80028bc:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 80028be:	4b39      	ldr	r3, [pc, #228]	; (80029a4 <HAL_TIM_IC_CaptureCallback+0x124>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	0fdb      	lsrs	r3, r3, #31
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d006      	beq.n	80028d8 <HAL_TIM_IC_CaptureCallback+0x58>
					Diff+=65535;
 80028ca:	4b36      	ldr	r3, [pc, #216]	; (80029a4 <HAL_TIM_IC_CaptureCallback+0x124>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80028d2:	33ff      	adds	r3, #255	; 0xff
 80028d4:	4a33      	ldr	r2, [pc, #204]	; (80029a4 <HAL_TIM_IC_CaptureCallback+0x124>)
 80028d6:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
				ch[i] = Diff;
 80028d8:	4b33      	ldr	r3, [pc, #204]	; (80029a8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	b21b      	sxth	r3, r3
 80028de:	4619      	mov	r1, r3
 80028e0:	4b30      	ldr	r3, [pc, #192]	; (80029a4 <HAL_TIM_IC_CaptureCallback+0x124>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a31      	ldr	r2, [pc, #196]	; (80029ac <HAL_TIM_IC_CaptureCallback+0x12c>)
 80028e6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				if(1) {
					if(ch[i] > CH0) {
 80028ea:	4b2f      	ldr	r3, [pc, #188]	; (80029a8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	b21b      	sxth	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b2e      	ldr	r3, [pc, #184]	; (80029ac <HAL_TIM_IC_CaptureCallback+0x12c>)
 80028f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fc:	4293      	cmp	r3, r2
 80028fe:	bfcc      	ite	gt
 8002900:	2301      	movgt	r3, #1
 8002902:	2300      	movle	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d006      	beq.n	8002918 <HAL_TIM_IC_CaptureCallback+0x98>
						//ch[CH_NUM] = ch[i];
						i = -1;
 800290a:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <HAL_TIM_IC_CaptureCallback+0x128>)
 800290c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002910:	801a      	strh	r2, [r3, #0]
						sync = 1;
 8002912:	4b27      	ldr	r3, [pc, #156]	; (80029b0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002914:	2201      	movs	r2, #1
 8002916:	801a      	strh	r2, [r3, #0]
					}
				}



				state_des.angles[0] =  pid.pwm2ang(ch[0]);
 8002918:	4b24      	ldr	r3, [pc, #144]	; (80029ac <HAL_TIM_IC_CaptureCallback+0x12c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	b29b      	uxth	r3, r3
 800291e:	4619      	mov	r1, r3
 8002920:	4824      	ldr	r0, [pc, #144]	; (80029b4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002922:	f006 fdb0 	bl	8009486 <_ZN3PID7pwm2angEt>
 8002926:	4603      	mov	r3, r0
 8002928:	4a23      	ldr	r2, [pc, #140]	; (80029b8 <HAL_TIM_IC_CaptureCallback+0x138>)
 800292a:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pid.pwm2ang(ch[1]);
 800292c:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <HAL_TIM_IC_CaptureCallback+0x12c>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	b29b      	uxth	r3, r3
 8002932:	4619      	mov	r1, r3
 8002934:	481f      	ldr	r0, [pc, #124]	; (80029b4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002936:	f006 fda6 	bl	8009486 <_ZN3PID7pwm2angEt>
 800293a:	4603      	mov	r3, r0
 800293c:	4a1e      	ldr	r2, [pc, #120]	; (80029b8 <HAL_TIM_IC_CaptureCallback+0x138>)
 800293e:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 8002940:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pid.pwm2rate(ch[3]);
 8002948:	4b18      	ldr	r3, [pc, #96]	; (80029ac <HAL_TIM_IC_CaptureCallback+0x12c>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	b29b      	uxth	r3, r3
 800294e:	4619      	mov	r1, r3
 8002950:	4818      	ldr	r0, [pc, #96]	; (80029b4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002952:	f006 fdc0 	bl	80094d6 <_ZN3PID8pwm2rateEt>
 8002956:	4603      	mov	r3, r0
 8002958:	4a17      	ldr	r2, [pc, #92]	; (80029b8 <HAL_TIM_IC_CaptureCallback+0x138>)
 800295a:	6153      	str	r3, [r2, #20]

				i++;
 800295c:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_TIM_IC_CaptureCallback+0x128>)
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	b21b      	sxth	r3, r3
 8002962:	b29b      	uxth	r3, r3
 8002964:	3301      	adds	r3, #1
 8002966:	b29b      	uxth	r3, r3
 8002968:	b21a      	sxth	r2, r3
 800296a:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <HAL_TIM_IC_CaptureCallback+0x128>)
 800296c:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 800296e:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	b21b      	sxth	r3, r3
 8002974:	4619      	mov	r1, r3
 8002976:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002978:	fb83 2301 	smull	r2, r3, r3, r1
 800297c:	105a      	asrs	r2, r3, #1
 800297e:	17cb      	asrs	r3, r1, #31
 8002980:	1ad2      	subs	r2, r2, r3
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4413      	add	r3, r2
 8002988:	1aca      	subs	r2, r1, r3
 800298a:	b212      	sxth	r2, r2
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_TIM_IC_CaptureCallback+0x128>)
 800298e:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000170 	.word	0x20000170
 800299c:	20000794 	.word	0x20000794
 80029a0:	20000798 	.word	0x20000798
 80029a4:	2000079c 	.word	0x2000079c
 80029a8:	200007a0 	.word	0x200007a0
 80029ac:	200007a4 	.word	0x200007a4
 80029b0:	200007c8 	.word	0x200007c8
 80029b4:	200004e0 	.word	0x200004e0
 80029b8:	2000026c 	.word	0x2000026c
 80029bc:	38e38e39 	.word	0x38e38e39

080029c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029c4:	b672      	cpsid	i
}
 80029c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029c8:	e7fe      	b.n	80029c8 <Error_Handler+0x8>

080029ca <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f85e 	bl	8002a94 <_ZNSaIdEC1Ev>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 f866 	bl	8002aac <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	{ }
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <_ZNSaIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f86d 	bl	8002ad2 <_ZN9__gnu_cxx13new_allocatorIdED1Ev>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <_ZNSt12_Vector_baseIdSaIdEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f862 	bl	8002ae6 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
      }
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe feb3 	bl	8001790 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <_ZNSt6vectorIdSaIdEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8002a34:	b5b0      	push	{r4, r5, r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681c      	ldr	r4, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f860 	bl	8002b0c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002a4c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002a4e:	461a      	mov	r2, r3
 8002a50:	4629      	mov	r1, r5
 8002a52:	4620      	mov	r0, r4
 8002a54:	f000 f864 	bl	8002b20 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff ffd1 	bl	8002a02 <_ZNSt12_Vector_baseIdSaIdEED1Ev>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bdb0      	pop	{r4, r5, r7, pc}

08002a6a <_ZNSt6vectorIdSaIdEEaSEOS1_>:
       *  Afterwards @a __x is a valid, but unspecified %vector.
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8002a6a:	b590      	push	{r4, r7, lr}
 8002a6c:	b085      	sub	sp, #20
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	6039      	str	r1, [r7, #0]
      {
	constexpr bool __move_storage =
 8002a74:	2301      	movs	r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8002a78:	6838      	ldr	r0, [r7, #0]
 8002a7a:	f000 f85f 	bl	8002b3c <_ZSt4moveIRSt6vectorIdSaIdEEEONSt16remove_referenceIT_E4typeEOS5_>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4622      	mov	r2, r4
 8002a82:	4619      	mov	r1, r3
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f863 	bl	8002b50 <_ZNSt6vectorIdSaIdEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 8002a8a:	687b      	ldr	r3, [r7, #4]
      }
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd90      	pop	{r4, r7, pc}

08002a94 <_ZNSaIdEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f895 	bl	8002bcc <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
	{ }
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <_ZN9__gnu_cxx13new_allocatorIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>:
      _M_deallocate(pointer __p, size_t __n)
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
	if (__p)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f86e 	bl	8002be0 <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>
      }
 8002b04:	bf00      	nop
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f865 	bl	8002bfe <_ZSt8_DestroyIPdEvT_S1_>
    }
 8002b34:	bf00      	nop
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <_ZSt4moveIRSt6vectorIdSaIdEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <_ZNSt6vectorIdSaIdEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b089      	sub	sp, #36	; 0x24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	f107 031c 	add.w	r3, r7, #28
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 f857 	bl	8002c18 <_ZNKSt12_Vector_baseIdSaIdEE13get_allocatorEv>
 8002b6a:	f107 021c 	add.w	r2, r7, #28
 8002b6e:	f107 0310 	add.w	r3, r7, #16
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 f860 	bl	8002c3a <_ZNSt6vectorIdSaIdEEC1ERKS0_>
 8002b7a:	f107 031c 	add.w	r3, r7, #28
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff ff33 	bl	80029ea <_ZNSaIdED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	4611      	mov	r1, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 f864 	bl	8002c58 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	f107 0310 	add.w	r3, r7, #16
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 f85d 	bl	8002c58 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ffb3 	bl	8002b0c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff ffae 	bl	8002b0c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f000 f86d 	bl	8002c94 <_ZSt15__alloc_on_moveISaIdEEvRT_S2_>
	vector __tmp(get_allocator());
 8002bba:	f107 0310 	add.w	r3, r7, #16
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff38 	bl	8002a34 <_ZNSt6vectorIdSaIdEED1Ev>
      }
 8002bc4:	bf00      	nop
 8002bc6:	3724      	adds	r7, #36	; 0x24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd90      	pop	{r4, r7, pc}

08002bcc <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f85d 	bl	8002cb0 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <_ZSt8_DestroyIPdEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002c08:	6839      	ldr	r1, [r7, #0]
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f85d 	bl	8002cca <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>
    }
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <_ZNKSt12_Vector_baseIdSaIdEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8002c22:	6838      	ldr	r0, [r7, #0]
 8002c24:	f000 f85b 	bl	8002cde <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f860 	bl	8002cf2 <_ZNSaIdEC1ERKS_>
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <_ZNSt6vectorIdSaIdEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6839      	ldr	r1, [r7, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 f860 	bl	8002d0e <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 8002c62:	f107 030c 	add.w	r3, r7, #12
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff ff20 	bl	8002aac <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 8002c6c:	f107 030c 	add.w	r3, r7, #12
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 f85a 	bl	8002d2c <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 8002c78:	6839      	ldr	r1, [r7, #0]
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f856 	bl	8002d2c <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 8002c80:	f107 030c 	add.w	r3, r7, #12
 8002c84:	4619      	mov	r1, r3
 8002c86:	6838      	ldr	r0, [r7, #0]
 8002c88:	f000 f850 	bl	8002d2c <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 8002c8c:	bf00      	nop
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <_ZSt15__alloc_on_moveISaIdEEvRT_S2_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	6839      	ldr	r1, [r7, #0]
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f858 	bl	8002d58 <_ZSt18__do_alloc_on_moveISaIdEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8002ca8:	bf00      	nop
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8002cbc:	68b8      	ldr	r0, [r7, #8]
 8002cbe:	f006 fc85 	bl	80095cc <_ZdlPv>
      }
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <_ZNSaIdEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002cfc:	6839      	ldr	r1, [r7, #0]
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f837 	bl	8002d72 <_ZN9__gnu_cxx13new_allocatorIdEC1ERKS1_>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6839      	ldr	r1, [r7, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 f833 	bl	8002d88 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1ERKS0_>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	609a      	str	r2, [r3, #8]
	}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <_ZSt18__do_alloc_on_moveISaIdEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8002d64:	68b8      	ldr	r0, [r7, #8]
 8002d66:	f000 f821 	bl	8002dac <_ZSt4moveIRSaIdEEONSt16remove_referenceIT_E4typeEOS3_>
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <_ZN9__gnu_cxx13new_allocatorIdEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	6039      	str	r1, [r7, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8002d92:	6839      	ldr	r1, [r7, #0]
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff ffac 	bl	8002cf2 <_ZNSaIdEC1ERKS_>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fe85 	bl	8002aac <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	{ }
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <_ZSt4moveIRSaIdEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4618      	mov	r0, r3
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d110      	bne.n	8002df2 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d10b      	bne.n	8002df2 <_Z41__static_initialization_and_destruction_0ii+0x32>
Kalman_Filtresi EKF;
 8002dda:	4812      	ldr	r0, [pc, #72]	; (8002e24 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002ddc:	f005 f8e8 	bl	8007fb0 <_ZN15Kalman_FiltresiC1Ev>
PID pid;
 8002de0:	4811      	ldr	r0, [pc, #68]	; (8002e28 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002de2:	f006 f8d7 	bl	8008f94 <_ZN3PIDC1Ev>
Controller controller;
 8002de6:	4811      	ldr	r0, [pc, #68]	; (8002e2c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002de8:	f004 fb6a 	bl	80074c0 <_ZN10ControllerC1Ev>
std::vector<double> controller_output_ang;
 8002dec:	4810      	ldr	r0, [pc, #64]	; (8002e30 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002dee:	f7fe fce8 	bl	80017c2 <_ZNSt6vectorIdSaIdEEC1Ev>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d110      	bne.n	8002e1a <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d10b      	bne.n	8002e1a <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8002e02:	480b      	ldr	r0, [pc, #44]	; (8002e30 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002e04:	f7ff fe16 	bl	8002a34 <_ZNSt6vectorIdSaIdEED1Ev>
Controller controller;
 8002e08:	4808      	ldr	r0, [pc, #32]	; (8002e2c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002e0a:	f004 fe92 	bl	8007b32 <_ZN10ControllerD1Ev>
PID pid;
 8002e0e:	4806      	ldr	r0, [pc, #24]	; (8002e28 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002e10:	f006 fbd2 	bl	80095b8 <_ZN3PIDD1Ev>
Kalman_Filtresi EKF;
 8002e14:	4803      	ldr	r0, [pc, #12]	; (8002e24 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002e16:	f006 f867 	bl	8008ee8 <_ZN15Kalman_FiltresiD1Ev>
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000398 	.word	0x20000398
 8002e28:	200004e0 	.word	0x200004e0
 8002e2c:	20000550 	.word	0x20000550
 8002e30:	20000780 	.word	0x20000780

08002e34 <_GLOBAL__sub_I_hi2c1>:
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e3c:	2001      	movs	r0, #1
 8002e3e:	f7ff ffbf 	bl	8002dc0 <_Z41__static_initialization_and_destruction_0ii>
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <_GLOBAL__sub_D_hi2c1>:
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f7ff ffb7 	bl	8002dc0 <_Z41__static_initialization_and_destruction_0ii>
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e5a:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <HAL_MspInit+0x5c>)
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	4a14      	ldr	r2, [pc, #80]	; (8002eb0 <HAL_MspInit+0x5c>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	6193      	str	r3, [r2, #24]
 8002e66:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <HAL_MspInit+0x5c>)
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <HAL_MspInit+0x5c>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	4a0e      	ldr	r2, [pc, #56]	; (8002eb0 <HAL_MspInit+0x5c>)
 8002e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	61d3      	str	r3, [r2, #28]
 8002e7e:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <HAL_MspInit+0x5c>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <HAL_MspInit+0x60>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	4a04      	ldr	r2, [pc, #16]	; (8002eb4 <HAL_MspInit+0x60>)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40010000 	.word	0x40010000

08002eb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec0:	f107 0310 	add.w	r3, r7, #16
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a15      	ldr	r2, [pc, #84]	; (8002f28 <HAL_I2C_MspInit+0x70>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d123      	bne.n	8002f20 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed8:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <HAL_I2C_MspInit+0x74>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	4a13      	ldr	r2, [pc, #76]	; (8002f2c <HAL_I2C_MspInit+0x74>)
 8002ede:	f043 0308 	orr.w	r3, r3, #8
 8002ee2:	6193      	str	r3, [r2, #24]
 8002ee4:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <HAL_I2C_MspInit+0x74>)
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ef0:	23c0      	movs	r3, #192	; 0xc0
 8002ef2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ef4:	2312      	movs	r3, #18
 8002ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efc:	f107 0310 	add.w	r3, r7, #16
 8002f00:	4619      	mov	r1, r3
 8002f02:	480b      	ldr	r0, [pc, #44]	; (8002f30 <HAL_I2C_MspInit+0x78>)
 8002f04:	f000 fb7a 	bl	80035fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f08:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <HAL_I2C_MspInit+0x74>)
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	4a07      	ldr	r2, [pc, #28]	; (8002f2c <HAL_I2C_MspInit+0x74>)
 8002f0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f12:	61d3      	str	r3, [r2, #28]
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <HAL_I2C_MspInit+0x74>)
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f20:	bf00      	nop
 8002f22:	3720      	adds	r7, #32
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40005400 	.word	0x40005400
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40010c00 	.word	0x40010c00

08002f34 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a09      	ldr	r2, [pc, #36]	; (8002f68 <HAL_TIM_PWM_MspInit+0x34>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d10b      	bne.n	8002f5e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_TIM_PWM_MspInit+0x38>)
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	4a08      	ldr	r2, [pc, #32]	; (8002f6c <HAL_TIM_PWM_MspInit+0x38>)
 8002f4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f50:	6193      	str	r3, [r2, #24]
 8002f52:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_TIM_PWM_MspInit+0x38>)
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	40012c00 	.word	0x40012c00
 8002f6c:	40021000 	.word	0x40021000

08002f70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	; 0x28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 0318 	add.w	r3, r7, #24
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8e:	d114      	bne.n	8002fba <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f90:	4b2d      	ldr	r3, [pc, #180]	; (8003048 <HAL_TIM_Base_MspInit+0xd8>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	4a2c      	ldr	r2, [pc, #176]	; (8003048 <HAL_TIM_Base_MspInit+0xd8>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	61d3      	str	r3, [r2, #28]
 8002f9c:	4b2a      	ldr	r3, [pc, #168]	; (8003048 <HAL_TIM_Base_MspInit+0xd8>)
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2101      	movs	r1, #1
 8002fac:	201c      	movs	r0, #28
 8002fae:	f000 faee 	bl	800358e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002fb2:	201c      	movs	r0, #28
 8002fb4:	f000 fb07 	bl	80035c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002fb8:	e042      	b.n	8003040 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a23      	ldr	r2, [pc, #140]	; (800304c <HAL_TIM_Base_MspInit+0xdc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d12c      	bne.n	800301e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fc4:	4b20      	ldr	r3, [pc, #128]	; (8003048 <HAL_TIM_Base_MspInit+0xd8>)
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	4a1f      	ldr	r2, [pc, #124]	; (8003048 <HAL_TIM_Base_MspInit+0xd8>)
 8002fca:	f043 0302 	orr.w	r3, r3, #2
 8002fce:	61d3      	str	r3, [r2, #28]
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <HAL_TIM_Base_MspInit+0xd8>)
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fdc:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <HAL_TIM_Base_MspInit+0xd8>)
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	4a19      	ldr	r2, [pc, #100]	; (8003048 <HAL_TIM_Base_MspInit+0xd8>)
 8002fe2:	f043 0308 	orr.w	r3, r3, #8
 8002fe6:	6193      	str	r3, [r2, #24]
 8002fe8:	4b17      	ldr	r3, [pc, #92]	; (8003048 <HAL_TIM_Base_MspInit+0xd8>)
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003000:	f107 0318 	add.w	r3, r7, #24
 8003004:	4619      	mov	r1, r3
 8003006:	4812      	ldr	r0, [pc, #72]	; (8003050 <HAL_TIM_Base_MspInit+0xe0>)
 8003008:	f000 faf8 	bl	80035fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800300c:	2200      	movs	r2, #0
 800300e:	2100      	movs	r1, #0
 8003010:	201d      	movs	r0, #29
 8003012:	f000 fabc 	bl	800358e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003016:	201d      	movs	r0, #29
 8003018:	f000 fad5 	bl	80035c6 <HAL_NVIC_EnableIRQ>
}
 800301c:	e010      	b.n	8003040 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a0c      	ldr	r2, [pc, #48]	; (8003054 <HAL_TIM_Base_MspInit+0xe4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d10b      	bne.n	8003040 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003028:	4b07      	ldr	r3, [pc, #28]	; (8003048 <HAL_TIM_Base_MspInit+0xd8>)
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	4a06      	ldr	r2, [pc, #24]	; (8003048 <HAL_TIM_Base_MspInit+0xd8>)
 800302e:	f043 0304 	orr.w	r3, r3, #4
 8003032:	61d3      	str	r3, [r2, #28]
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <HAL_TIM_Base_MspInit+0xd8>)
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	68bb      	ldr	r3, [r7, #8]
}
 8003040:	bf00      	nop
 8003042:	3728      	adds	r7, #40	; 0x28
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40021000 	.word	0x40021000
 800304c:	40000400 	.word	0x40000400
 8003050:	40010c00 	.word	0x40010c00
 8003054:	40000800 	.word	0x40000800

08003058 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003060:	f107 0310 	add.w	r3, r7, #16
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a10      	ldr	r2, [pc, #64]	; (80030b4 <HAL_TIM_MspPostInit+0x5c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d118      	bne.n	80030aa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <HAL_TIM_MspPostInit+0x60>)
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <HAL_TIM_MspPostInit+0x60>)
 800307e:	f043 0304 	orr.w	r3, r3, #4
 8003082:	6193      	str	r3, [r2, #24]
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <HAL_TIM_MspPostInit+0x60>)
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003090:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003094:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003096:	2302      	movs	r3, #2
 8003098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309a:	2302      	movs	r3, #2
 800309c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800309e:	f107 0310 	add.w	r3, r7, #16
 80030a2:	4619      	mov	r1, r3
 80030a4:	4805      	ldr	r0, [pc, #20]	; (80030bc <HAL_TIM_MspPostInit+0x64>)
 80030a6:	f000 faa9 	bl	80035fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80030aa:	bf00      	nop
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40012c00 	.word	0x40012c00
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40010800 	.word	0x40010800

080030c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c8:	f107 0310 	add.w	r3, r7, #16
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <HAL_UART_MspInit+0x88>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d12f      	bne.n	8003140 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030e0:	4b1a      	ldr	r3, [pc, #104]	; (800314c <HAL_UART_MspInit+0x8c>)
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	4a19      	ldr	r2, [pc, #100]	; (800314c <HAL_UART_MspInit+0x8c>)
 80030e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ea:	61d3      	str	r3, [r2, #28]
 80030ec:	4b17      	ldr	r3, [pc, #92]	; (800314c <HAL_UART_MspInit+0x8c>)
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f8:	4b14      	ldr	r3, [pc, #80]	; (800314c <HAL_UART_MspInit+0x8c>)
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	4a13      	ldr	r2, [pc, #76]	; (800314c <HAL_UART_MspInit+0x8c>)
 80030fe:	f043 0304 	orr.w	r3, r3, #4
 8003102:	6193      	str	r3, [r2, #24]
 8003104:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_UART_MspInit+0x8c>)
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003110:	2304      	movs	r3, #4
 8003112:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003114:	2302      	movs	r3, #2
 8003116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003118:	2303      	movs	r3, #3
 800311a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311c:	f107 0310 	add.w	r3, r7, #16
 8003120:	4619      	mov	r1, r3
 8003122:	480b      	ldr	r0, [pc, #44]	; (8003150 <HAL_UART_MspInit+0x90>)
 8003124:	f000 fa6a 	bl	80035fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003128:	2308      	movs	r3, #8
 800312a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	2300      	movs	r3, #0
 8003132:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003134:	f107 0310 	add.w	r3, r7, #16
 8003138:	4619      	mov	r1, r3
 800313a:	4805      	ldr	r0, [pc, #20]	; (8003150 <HAL_UART_MspInit+0x90>)
 800313c:	f000 fa5e 	bl	80035fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003140:	bf00      	nop
 8003142:	3720      	adds	r7, #32
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40004400 	.word	0x40004400
 800314c:	40021000 	.word	0x40021000
 8003150:	40010800 	.word	0x40010800

08003154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003158:	e7fe      	b.n	8003158 <NMI_Handler+0x4>

0800315a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800315e:	e7fe      	b.n	800315e <HardFault_Handler+0x4>

08003160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003164:	e7fe      	b.n	8003164 <MemManage_Handler+0x4>

08003166 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800316a:	e7fe      	b.n	800316a <BusFault_Handler+0x4>

0800316c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003170:	e7fe      	b.n	8003170 <UsageFault_Handler+0x4>

08003172 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800317e:	b480      	push	{r7}
 8003180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr

0800318a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800318a:	b480      	push	{r7}
 800318c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr

08003196 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800319a:	f000 f8e1 	bl	8003360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80031a8:	4802      	ldr	r0, [pc, #8]	; (80031b4 <TIM2_IRQHandler+0x10>)
 80031aa:	f002 ffe1 	bl	8006170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000128 	.word	0x20000128

080031b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031bc:	4802      	ldr	r0, [pc, #8]	; (80031c8 <TIM3_IRQHandler+0x10>)
 80031be:	f002 ffd7 	bl	8006170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000170 	.word	0x20000170

080031cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
	return 1;
 80031d0:	2301      	movs	r3, #1
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr

080031da <_kill>:

int _kill(int pid, int sig)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80031e4:	f007 fd3a 	bl	800ac5c <__errno>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2216      	movs	r2, #22
 80031ec:	601a      	str	r2, [r3, #0]
	return -1;
 80031ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <_exit>:

void _exit (int status)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003202:	f04f 31ff 	mov.w	r1, #4294967295
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff ffe7 	bl	80031da <_kill>
	while (1) {}		/* Make sure we hang here */
 800320c:	e7fe      	b.n	800320c <_exit+0x12>
	...

08003210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003218:	4a14      	ldr	r2, [pc, #80]	; (800326c <_sbrk+0x5c>)
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <_sbrk+0x60>)
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003224:	4b13      	ldr	r3, [pc, #76]	; (8003274 <_sbrk+0x64>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d102      	bne.n	8003232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800322c:	4b11      	ldr	r3, [pc, #68]	; (8003274 <_sbrk+0x64>)
 800322e:	4a12      	ldr	r2, [pc, #72]	; (8003278 <_sbrk+0x68>)
 8003230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003232:	4b10      	ldr	r3, [pc, #64]	; (8003274 <_sbrk+0x64>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	429a      	cmp	r2, r3
 800323e:	d207      	bcs.n	8003250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003240:	f007 fd0c 	bl	800ac5c <__errno>
 8003244:	4603      	mov	r3, r0
 8003246:	220c      	movs	r2, #12
 8003248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800324a:	f04f 33ff 	mov.w	r3, #4294967295
 800324e:	e009      	b.n	8003264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <_sbrk+0x64>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003256:	4b07      	ldr	r3, [pc, #28]	; (8003274 <_sbrk+0x64>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	4a05      	ldr	r2, [pc, #20]	; (8003274 <_sbrk+0x64>)
 8003260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003262:	68fb      	ldr	r3, [r7, #12]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20005000 	.word	0x20005000
 8003270:	00000400 	.word	0x00000400
 8003274:	2000082c 	.word	0x2000082c
 8003278:	20000850 	.word	0x20000850

0800327c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr

08003288 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003288:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800328a:	e003      	b.n	8003294 <LoopCopyDataInit>

0800328c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800328c:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800328e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003290:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003292:	3104      	adds	r1, #4

08003294 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003294:	480a      	ldr	r0, [pc, #40]	; (80032c0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003296:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003298:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800329a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800329c:	d3f6      	bcc.n	800328c <CopyDataInit>
  ldr r2, =_sbss
 800329e:	4a0a      	ldr	r2, [pc, #40]	; (80032c8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80032a0:	e002      	b.n	80032a8 <LoopFillZerobss>

080032a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80032a2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80032a4:	f842 3b04 	str.w	r3, [r2], #4

080032a8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80032a8:	4b08      	ldr	r3, [pc, #32]	; (80032cc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80032aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80032ac:	d3f9      	bcc.n	80032a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80032ae:	f7ff ffe5 	bl	800327c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032b2:	f007 fcd9 	bl	800ac68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032b6:	f7fe fa91 	bl	80017dc <main>
  bx lr
 80032ba:	4770      	bx	lr
  ldr r3, =_sidata
 80032bc:	0800b0a0 	.word	0x0800b0a0
  ldr r0, =_sdata
 80032c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80032c4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80032c8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80032cc:	20000850 	.word	0x20000850

080032d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032d0:	e7fe      	b.n	80032d0 <ADC1_2_IRQHandler>
	...

080032d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <HAL_Init+0x28>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a07      	ldr	r2, [pc, #28]	; (80032fc <HAL_Init+0x28>)
 80032de:	f043 0310 	orr.w	r3, r3, #16
 80032e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032e4:	2003      	movs	r0, #3
 80032e6:	f000 f947 	bl	8003578 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ea:	2000      	movs	r0, #0
 80032ec:	f000 f808 	bl	8003300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032f0:	f7ff fdb0 	bl	8002e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40022000 	.word	0x40022000

08003300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003308:	4b12      	ldr	r3, [pc, #72]	; (8003354 <HAL_InitTick+0x54>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4b12      	ldr	r3, [pc, #72]	; (8003358 <HAL_InitTick+0x58>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	4619      	mov	r1, r3
 8003312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003316:	fbb3 f3f1 	udiv	r3, r3, r1
 800331a:	fbb2 f3f3 	udiv	r3, r2, r3
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f95f 	bl	80035e2 <HAL_SYSTICK_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e00e      	b.n	800334c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b0f      	cmp	r3, #15
 8003332:	d80a      	bhi.n	800334a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003334:	2200      	movs	r2, #0
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	f04f 30ff 	mov.w	r0, #4294967295
 800333c:	f000 f927 	bl	800358e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003340:	4a06      	ldr	r2, [pc, #24]	; (800335c <HAL_InitTick+0x5c>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	e000      	b.n	800334c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20000000 	.word	0x20000000
 8003358:	20000008 	.word	0x20000008
 800335c:	20000004 	.word	0x20000004

08003360 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_IncTick+0x1c>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_IncTick+0x20>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4413      	add	r3, r2
 8003370:	4a03      	ldr	r2, [pc, #12]	; (8003380 <HAL_IncTick+0x20>)
 8003372:	6013      	str	r3, [r2, #0]
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	20000008 	.word	0x20000008
 8003380:	2000083c 	.word	0x2000083c

08003384 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return uwTick;
 8003388:	4b02      	ldr	r3, [pc, #8]	; (8003394 <HAL_GetTick+0x10>)
 800338a:	681b      	ldr	r3, [r3, #0]
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	2000083c 	.word	0x2000083c

08003398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033a0:	f7ff fff0 	bl	8003384 <HAL_GetTick>
 80033a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d005      	beq.n	80033be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033b2:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <HAL_Delay+0x44>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4413      	add	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033be:	bf00      	nop
 80033c0:	f7ff ffe0 	bl	8003384 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d8f7      	bhi.n	80033c0 <HAL_Delay+0x28>
  {
  }
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20000008 	.word	0x20000008

080033e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033f0:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <__NVIC_SetPriorityGrouping+0x44>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033fc:	4013      	ands	r3, r2
 80033fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800340c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003412:	4a04      	ldr	r2, [pc, #16]	; (8003424 <__NVIC_SetPriorityGrouping+0x44>)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	60d3      	str	r3, [r2, #12]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800342c:	4b04      	ldr	r3, [pc, #16]	; (8003440 <__NVIC_GetPriorityGrouping+0x18>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	0a1b      	lsrs	r3, r3, #8
 8003432:	f003 0307 	and.w	r3, r3, #7
}
 8003436:	4618      	mov	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	2b00      	cmp	r3, #0
 8003454:	db0b      	blt.n	800346e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	f003 021f 	and.w	r2, r3, #31
 800345c:	4906      	ldr	r1, [pc, #24]	; (8003478 <__NVIC_EnableIRQ+0x34>)
 800345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	2001      	movs	r0, #1
 8003466:	fa00 f202 	lsl.w	r2, r0, r2
 800346a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr
 8003478:	e000e100 	.word	0xe000e100

0800347c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	6039      	str	r1, [r7, #0]
 8003486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348c:	2b00      	cmp	r3, #0
 800348e:	db0a      	blt.n	80034a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	b2da      	uxtb	r2, r3
 8003494:	490c      	ldr	r1, [pc, #48]	; (80034c8 <__NVIC_SetPriority+0x4c>)
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	0112      	lsls	r2, r2, #4
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	440b      	add	r3, r1
 80034a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034a4:	e00a      	b.n	80034bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	4908      	ldr	r1, [pc, #32]	; (80034cc <__NVIC_SetPriority+0x50>)
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	3b04      	subs	r3, #4
 80034b4:	0112      	lsls	r2, r2, #4
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	440b      	add	r3, r1
 80034ba:	761a      	strb	r2, [r3, #24]
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	e000e100 	.word	0xe000e100
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b089      	sub	sp, #36	; 0x24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f1c3 0307 	rsb	r3, r3, #7
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	bf28      	it	cs
 80034ee:	2304      	movcs	r3, #4
 80034f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	3304      	adds	r3, #4
 80034f6:	2b06      	cmp	r3, #6
 80034f8:	d902      	bls.n	8003500 <NVIC_EncodePriority+0x30>
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	3b03      	subs	r3, #3
 80034fe:	e000      	b.n	8003502 <NVIC_EncodePriority+0x32>
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003504:	f04f 32ff 	mov.w	r2, #4294967295
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43da      	mvns	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	401a      	ands	r2, r3
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003518:	f04f 31ff 	mov.w	r1, #4294967295
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	fa01 f303 	lsl.w	r3, r1, r3
 8003522:	43d9      	mvns	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003528:	4313      	orrs	r3, r2
         );
}
 800352a:	4618      	mov	r0, r3
 800352c:	3724      	adds	r7, #36	; 0x24
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3b01      	subs	r3, #1
 8003540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003544:	d301      	bcc.n	800354a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003546:	2301      	movs	r3, #1
 8003548:	e00f      	b.n	800356a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800354a:	4a0a      	ldr	r2, [pc, #40]	; (8003574 <SysTick_Config+0x40>)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3b01      	subs	r3, #1
 8003550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003552:	210f      	movs	r1, #15
 8003554:	f04f 30ff 	mov.w	r0, #4294967295
 8003558:	f7ff ff90 	bl	800347c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <SysTick_Config+0x40>)
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003562:	4b04      	ldr	r3, [pc, #16]	; (8003574 <SysTick_Config+0x40>)
 8003564:	2207      	movs	r2, #7
 8003566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	e000e010 	.word	0xe000e010

08003578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff ff2d 	bl	80033e0 <__NVIC_SetPriorityGrouping>
}
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800358e:	b580      	push	{r7, lr}
 8003590:	b086      	sub	sp, #24
 8003592:	af00      	add	r7, sp, #0
 8003594:	4603      	mov	r3, r0
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	607a      	str	r2, [r7, #4]
 800359a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035a0:	f7ff ff42 	bl	8003428 <__NVIC_GetPriorityGrouping>
 80035a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	6978      	ldr	r0, [r7, #20]
 80035ac:	f7ff ff90 	bl	80034d0 <NVIC_EncodePriority>
 80035b0:	4602      	mov	r2, r0
 80035b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035b6:	4611      	mov	r1, r2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff ff5f 	bl	800347c <__NVIC_SetPriority>
}
 80035be:	bf00      	nop
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	4603      	mov	r3, r0
 80035ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff ff35 	bl	8003444 <__NVIC_EnableIRQ>
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff ffa2 	bl	8003534 <SysTick_Config>
 80035f0:	4603      	mov	r3, r0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b08b      	sub	sp, #44	; 0x2c
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003606:	2300      	movs	r3, #0
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800360a:	2300      	movs	r3, #0
 800360c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800360e:	e169      	b.n	80038e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003610:	2201      	movs	r2, #1
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69fa      	ldr	r2, [r7, #28]
 8003620:	4013      	ands	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	429a      	cmp	r2, r3
 800362a:	f040 8158 	bne.w	80038de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4a9a      	ldr	r2, [pc, #616]	; (800389c <HAL_GPIO_Init+0x2a0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d05e      	beq.n	80036f6 <HAL_GPIO_Init+0xfa>
 8003638:	4a98      	ldr	r2, [pc, #608]	; (800389c <HAL_GPIO_Init+0x2a0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d875      	bhi.n	800372a <HAL_GPIO_Init+0x12e>
 800363e:	4a98      	ldr	r2, [pc, #608]	; (80038a0 <HAL_GPIO_Init+0x2a4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d058      	beq.n	80036f6 <HAL_GPIO_Init+0xfa>
 8003644:	4a96      	ldr	r2, [pc, #600]	; (80038a0 <HAL_GPIO_Init+0x2a4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d86f      	bhi.n	800372a <HAL_GPIO_Init+0x12e>
 800364a:	4a96      	ldr	r2, [pc, #600]	; (80038a4 <HAL_GPIO_Init+0x2a8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d052      	beq.n	80036f6 <HAL_GPIO_Init+0xfa>
 8003650:	4a94      	ldr	r2, [pc, #592]	; (80038a4 <HAL_GPIO_Init+0x2a8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d869      	bhi.n	800372a <HAL_GPIO_Init+0x12e>
 8003656:	4a94      	ldr	r2, [pc, #592]	; (80038a8 <HAL_GPIO_Init+0x2ac>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d04c      	beq.n	80036f6 <HAL_GPIO_Init+0xfa>
 800365c:	4a92      	ldr	r2, [pc, #584]	; (80038a8 <HAL_GPIO_Init+0x2ac>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d863      	bhi.n	800372a <HAL_GPIO_Init+0x12e>
 8003662:	4a92      	ldr	r2, [pc, #584]	; (80038ac <HAL_GPIO_Init+0x2b0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d046      	beq.n	80036f6 <HAL_GPIO_Init+0xfa>
 8003668:	4a90      	ldr	r2, [pc, #576]	; (80038ac <HAL_GPIO_Init+0x2b0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d85d      	bhi.n	800372a <HAL_GPIO_Init+0x12e>
 800366e:	2b12      	cmp	r3, #18
 8003670:	d82a      	bhi.n	80036c8 <HAL_GPIO_Init+0xcc>
 8003672:	2b12      	cmp	r3, #18
 8003674:	d859      	bhi.n	800372a <HAL_GPIO_Init+0x12e>
 8003676:	a201      	add	r2, pc, #4	; (adr r2, 800367c <HAL_GPIO_Init+0x80>)
 8003678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367c:	080036f7 	.word	0x080036f7
 8003680:	080036d1 	.word	0x080036d1
 8003684:	080036e3 	.word	0x080036e3
 8003688:	08003725 	.word	0x08003725
 800368c:	0800372b 	.word	0x0800372b
 8003690:	0800372b 	.word	0x0800372b
 8003694:	0800372b 	.word	0x0800372b
 8003698:	0800372b 	.word	0x0800372b
 800369c:	0800372b 	.word	0x0800372b
 80036a0:	0800372b 	.word	0x0800372b
 80036a4:	0800372b 	.word	0x0800372b
 80036a8:	0800372b 	.word	0x0800372b
 80036ac:	0800372b 	.word	0x0800372b
 80036b0:	0800372b 	.word	0x0800372b
 80036b4:	0800372b 	.word	0x0800372b
 80036b8:	0800372b 	.word	0x0800372b
 80036bc:	0800372b 	.word	0x0800372b
 80036c0:	080036d9 	.word	0x080036d9
 80036c4:	080036ed 	.word	0x080036ed
 80036c8:	4a79      	ldr	r2, [pc, #484]	; (80038b0 <HAL_GPIO_Init+0x2b4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036ce:	e02c      	b.n	800372a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	623b      	str	r3, [r7, #32]
          break;
 80036d6:	e029      	b.n	800372c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	3304      	adds	r3, #4
 80036de:	623b      	str	r3, [r7, #32]
          break;
 80036e0:	e024      	b.n	800372c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	3308      	adds	r3, #8
 80036e8:	623b      	str	r3, [r7, #32]
          break;
 80036ea:	e01f      	b.n	800372c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	330c      	adds	r3, #12
 80036f2:	623b      	str	r3, [r7, #32]
          break;
 80036f4:	e01a      	b.n	800372c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d102      	bne.n	8003704 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036fe:	2304      	movs	r3, #4
 8003700:	623b      	str	r3, [r7, #32]
          break;
 8003702:	e013      	b.n	800372c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d105      	bne.n	8003718 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800370c:	2308      	movs	r3, #8
 800370e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	611a      	str	r2, [r3, #16]
          break;
 8003716:	e009      	b.n	800372c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003718:	2308      	movs	r3, #8
 800371a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	615a      	str	r2, [r3, #20]
          break;
 8003722:	e003      	b.n	800372c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003724:	2300      	movs	r3, #0
 8003726:	623b      	str	r3, [r7, #32]
          break;
 8003728:	e000      	b.n	800372c <HAL_GPIO_Init+0x130>
          break;
 800372a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2bff      	cmp	r3, #255	; 0xff
 8003730:	d801      	bhi.n	8003736 <HAL_GPIO_Init+0x13a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	e001      	b.n	800373a <HAL_GPIO_Init+0x13e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3304      	adds	r3, #4
 800373a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2bff      	cmp	r3, #255	; 0xff
 8003740:	d802      	bhi.n	8003748 <HAL_GPIO_Init+0x14c>
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	e002      	b.n	800374e <HAL_GPIO_Init+0x152>
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	3b08      	subs	r3, #8
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	210f      	movs	r1, #15
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	fa01 f303 	lsl.w	r3, r1, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	401a      	ands	r2, r3
 8003760:	6a39      	ldr	r1, [r7, #32]
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	fa01 f303 	lsl.w	r3, r1, r3
 8003768:	431a      	orrs	r2, r3
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 80b1 	beq.w	80038de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800377c:	4b4d      	ldr	r3, [pc, #308]	; (80038b4 <HAL_GPIO_Init+0x2b8>)
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	4a4c      	ldr	r2, [pc, #304]	; (80038b4 <HAL_GPIO_Init+0x2b8>)
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	6193      	str	r3, [r2, #24]
 8003788:	4b4a      	ldr	r3, [pc, #296]	; (80038b4 <HAL_GPIO_Init+0x2b8>)
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003794:	4a48      	ldr	r2, [pc, #288]	; (80038b8 <HAL_GPIO_Init+0x2bc>)
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	089b      	lsrs	r3, r3, #2
 800379a:	3302      	adds	r3, #2
 800379c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	220f      	movs	r2, #15
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43db      	mvns	r3, r3
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4013      	ands	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a40      	ldr	r2, [pc, #256]	; (80038bc <HAL_GPIO_Init+0x2c0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d013      	beq.n	80037e8 <HAL_GPIO_Init+0x1ec>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a3f      	ldr	r2, [pc, #252]	; (80038c0 <HAL_GPIO_Init+0x2c4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00d      	beq.n	80037e4 <HAL_GPIO_Init+0x1e8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a3e      	ldr	r2, [pc, #248]	; (80038c4 <HAL_GPIO_Init+0x2c8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d007      	beq.n	80037e0 <HAL_GPIO_Init+0x1e4>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a3d      	ldr	r2, [pc, #244]	; (80038c8 <HAL_GPIO_Init+0x2cc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d101      	bne.n	80037dc <HAL_GPIO_Init+0x1e0>
 80037d8:	2303      	movs	r3, #3
 80037da:	e006      	b.n	80037ea <HAL_GPIO_Init+0x1ee>
 80037dc:	2304      	movs	r3, #4
 80037de:	e004      	b.n	80037ea <HAL_GPIO_Init+0x1ee>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e002      	b.n	80037ea <HAL_GPIO_Init+0x1ee>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <HAL_GPIO_Init+0x1ee>
 80037e8:	2300      	movs	r3, #0
 80037ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ec:	f002 0203 	and.w	r2, r2, #3
 80037f0:	0092      	lsls	r2, r2, #2
 80037f2:	4093      	lsls	r3, r2
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037fa:	492f      	ldr	r1, [pc, #188]	; (80038b8 <HAL_GPIO_Init+0x2bc>)
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	089b      	lsrs	r3, r3, #2
 8003800:	3302      	adds	r3, #2
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d006      	beq.n	8003822 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003814:	4b2d      	ldr	r3, [pc, #180]	; (80038cc <HAL_GPIO_Init+0x2d0>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	492c      	ldr	r1, [pc, #176]	; (80038cc <HAL_GPIO_Init+0x2d0>)
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	4313      	orrs	r3, r2
 800381e:	600b      	str	r3, [r1, #0]
 8003820:	e006      	b.n	8003830 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003822:	4b2a      	ldr	r3, [pc, #168]	; (80038cc <HAL_GPIO_Init+0x2d0>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	43db      	mvns	r3, r3
 800382a:	4928      	ldr	r1, [pc, #160]	; (80038cc <HAL_GPIO_Init+0x2d0>)
 800382c:	4013      	ands	r3, r2
 800382e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d006      	beq.n	800384a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800383c:	4b23      	ldr	r3, [pc, #140]	; (80038cc <HAL_GPIO_Init+0x2d0>)
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	4922      	ldr	r1, [pc, #136]	; (80038cc <HAL_GPIO_Init+0x2d0>)
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	4313      	orrs	r3, r2
 8003846:	604b      	str	r3, [r1, #4]
 8003848:	e006      	b.n	8003858 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800384a:	4b20      	ldr	r3, [pc, #128]	; (80038cc <HAL_GPIO_Init+0x2d0>)
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	43db      	mvns	r3, r3
 8003852:	491e      	ldr	r1, [pc, #120]	; (80038cc <HAL_GPIO_Init+0x2d0>)
 8003854:	4013      	ands	r3, r2
 8003856:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d006      	beq.n	8003872 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003864:	4b19      	ldr	r3, [pc, #100]	; (80038cc <HAL_GPIO_Init+0x2d0>)
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	4918      	ldr	r1, [pc, #96]	; (80038cc <HAL_GPIO_Init+0x2d0>)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	4313      	orrs	r3, r2
 800386e:	608b      	str	r3, [r1, #8]
 8003870:	e006      	b.n	8003880 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003872:	4b16      	ldr	r3, [pc, #88]	; (80038cc <HAL_GPIO_Init+0x2d0>)
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	43db      	mvns	r3, r3
 800387a:	4914      	ldr	r1, [pc, #80]	; (80038cc <HAL_GPIO_Init+0x2d0>)
 800387c:	4013      	ands	r3, r2
 800387e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d021      	beq.n	80038d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <HAL_GPIO_Init+0x2d0>)
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	490e      	ldr	r1, [pc, #56]	; (80038cc <HAL_GPIO_Init+0x2d0>)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	4313      	orrs	r3, r2
 8003896:	60cb      	str	r3, [r1, #12]
 8003898:	e021      	b.n	80038de <HAL_GPIO_Init+0x2e2>
 800389a:	bf00      	nop
 800389c:	10320000 	.word	0x10320000
 80038a0:	10310000 	.word	0x10310000
 80038a4:	10220000 	.word	0x10220000
 80038a8:	10210000 	.word	0x10210000
 80038ac:	10120000 	.word	0x10120000
 80038b0:	10110000 	.word	0x10110000
 80038b4:	40021000 	.word	0x40021000
 80038b8:	40010000 	.word	0x40010000
 80038bc:	40010800 	.word	0x40010800
 80038c0:	40010c00 	.word	0x40010c00
 80038c4:	40011000 	.word	0x40011000
 80038c8:	40011400 	.word	0x40011400
 80038cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <HAL_GPIO_Init+0x304>)
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	43db      	mvns	r3, r3
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <HAL_GPIO_Init+0x304>)
 80038da:	4013      	ands	r3, r2
 80038dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	3301      	adds	r3, #1
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	fa22 f303 	lsr.w	r3, r2, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f47f ae8e 	bne.w	8003610 <HAL_GPIO_Init+0x14>
  }
}
 80038f4:	bf00      	nop
 80038f6:	bf00      	nop
 80038f8:	372c      	adds	r7, #44	; 0x2c
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr
 8003900:	40010400 	.word	0x40010400

08003904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	807b      	strh	r3, [r7, #2]
 8003910:	4613      	mov	r3, r2
 8003912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003914:	787b      	ldrb	r3, [r7, #1]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800391a:	887a      	ldrh	r2, [r7, #2]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003920:	e003      	b.n	800392a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003922:	887b      	ldrh	r3, [r7, #2]
 8003924:	041a      	lsls	r2, r3, #16
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	611a      	str	r2, [r3, #16]
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr

08003934 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003946:	887a      	ldrh	r2, [r7, #2]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4013      	ands	r3, r2
 800394c:	041a      	lsls	r2, r3, #16
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	43d9      	mvns	r1, r3
 8003952:	887b      	ldrh	r3, [r7, #2]
 8003954:	400b      	ands	r3, r1
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	611a      	str	r2, [r3, #16]
}
 800395c:	bf00      	nop
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr
	...

08003968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e12b      	b.n	8003bd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff fa92 	bl	8002eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2224      	movs	r2, #36	; 0x24
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039cc:	f002 f84e 	bl	8005a6c <HAL_RCC_GetPCLK1Freq>
 80039d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4a81      	ldr	r2, [pc, #516]	; (8003bdc <HAL_I2C_Init+0x274>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d807      	bhi.n	80039ec <HAL_I2C_Init+0x84>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4a80      	ldr	r2, [pc, #512]	; (8003be0 <HAL_I2C_Init+0x278>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	bf94      	ite	ls
 80039e4:	2301      	movls	r3, #1
 80039e6:	2300      	movhi	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	e006      	b.n	80039fa <HAL_I2C_Init+0x92>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4a7d      	ldr	r2, [pc, #500]	; (8003be4 <HAL_I2C_Init+0x27c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	bf94      	ite	ls
 80039f4:	2301      	movls	r3, #1
 80039f6:	2300      	movhi	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e0e7      	b.n	8003bd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4a78      	ldr	r2, [pc, #480]	; (8003be8 <HAL_I2C_Init+0x280>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	0c9b      	lsrs	r3, r3, #18
 8003a0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4a6a      	ldr	r2, [pc, #424]	; (8003bdc <HAL_I2C_Init+0x274>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d802      	bhi.n	8003a3c <HAL_I2C_Init+0xd4>
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	e009      	b.n	8003a50 <HAL_I2C_Init+0xe8>
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	4a69      	ldr	r2, [pc, #420]	; (8003bec <HAL_I2C_Init+0x284>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	099b      	lsrs	r3, r3, #6
 8003a4e:	3301      	adds	r3, #1
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	430b      	orrs	r3, r1
 8003a56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	495c      	ldr	r1, [pc, #368]	; (8003bdc <HAL_I2C_Init+0x274>)
 8003a6c:	428b      	cmp	r3, r1
 8003a6e:	d819      	bhi.n	8003aa4 <HAL_I2C_Init+0x13c>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	1e59      	subs	r1, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a7e:	1c59      	adds	r1, r3, #1
 8003a80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a84:	400b      	ands	r3, r1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <HAL_I2C_Init+0x138>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1e59      	subs	r1, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9e:	e051      	b.n	8003b44 <HAL_I2C_Init+0x1dc>
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	e04f      	b.n	8003b44 <HAL_I2C_Init+0x1dc>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d111      	bne.n	8003ad0 <HAL_I2C_Init+0x168>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	1e58      	subs	r0, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6859      	ldr	r1, [r3, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	440b      	add	r3, r1
 8003aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003abe:	3301      	adds	r3, #1
 8003ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	e012      	b.n	8003af6 <HAL_I2C_Init+0x18e>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1e58      	subs	r0, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6859      	ldr	r1, [r3, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	0099      	lsls	r1, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf0c      	ite	eq
 8003af0:	2301      	moveq	r3, #1
 8003af2:	2300      	movne	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_I2C_Init+0x196>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e022      	b.n	8003b44 <HAL_I2C_Init+0x1dc>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10e      	bne.n	8003b24 <HAL_I2C_Init+0x1bc>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1e58      	subs	r0, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6859      	ldr	r1, [r3, #4]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	440b      	add	r3, r1
 8003b14:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b18:	3301      	adds	r3, #1
 8003b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b22:	e00f      	b.n	8003b44 <HAL_I2C_Init+0x1dc>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1e58      	subs	r0, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6859      	ldr	r1, [r3, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	0099      	lsls	r1, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	6809      	ldr	r1, [r1, #0]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69da      	ldr	r2, [r3, #28]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6911      	ldr	r1, [r2, #16]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	68d2      	ldr	r2, [r2, #12]
 8003b7e:	4311      	orrs	r1, r2
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	430b      	orrs	r3, r1
 8003b86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695a      	ldr	r2, [r3, #20]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	000186a0 	.word	0x000186a0
 8003be0:	001e847f 	.word	0x001e847f
 8003be4:	003d08ff 	.word	0x003d08ff
 8003be8:	431bde83 	.word	0x431bde83
 8003bec:	10624dd3 	.word	0x10624dd3

08003bf0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	817b      	strh	r3, [r7, #10]
 8003c00:	4613      	mov	r3, r2
 8003c02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c04:	f7ff fbbe 	bl	8003384 <HAL_GetTick>
 8003c08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	f040 80e0 	bne.w	8003dd8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2319      	movs	r3, #25
 8003c1e:	2201      	movs	r2, #1
 8003c20:	4970      	ldr	r1, [pc, #448]	; (8003de4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f001 f972 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e0d3      	b.n	8003dda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_I2C_Master_Transmit+0x50>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e0cc      	b.n	8003dda <HAL_I2C_Master_Transmit+0x1ea>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d007      	beq.n	8003c66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0201 	orr.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2221      	movs	r2, #33	; 0x21
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2210      	movs	r2, #16
 8003c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	893a      	ldrh	r2, [r7, #8]
 8003c96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4a50      	ldr	r2, [pc, #320]	; (8003de8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ca6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ca8:	8979      	ldrh	r1, [r7, #10]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	6a3a      	ldr	r2, [r7, #32]
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 fe5e 	bl	8004970 <I2C_MasterRequestWrite>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e08d      	b.n	8003dda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003cd4:	e066      	b.n	8003da4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	6a39      	ldr	r1, [r7, #32]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f001 f9ec 	bl	80050b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00d      	beq.n	8003d02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d107      	bne.n	8003cfe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e06b      	b.n	8003dda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	781a      	ldrb	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d11b      	bne.n	8003d78 <HAL_I2C_Master_Transmit+0x188>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d017      	beq.n	8003d78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	781a      	ldrb	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	6a39      	ldr	r1, [r7, #32]
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f001 f9dc 	bl	800513a <I2C_WaitOnBTFFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00d      	beq.n	8003da4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d107      	bne.n	8003da0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e01a      	b.n	8003dda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d194      	bne.n	8003cd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	e000      	b.n	8003dda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003dd8:	2302      	movs	r3, #2
  }
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	00100002 	.word	0x00100002
 8003de8:	ffff0000 	.word	0xffff0000

08003dec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08c      	sub	sp, #48	; 0x30
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	461a      	mov	r2, r3
 8003df8:	460b      	mov	r3, r1
 8003dfa:	817b      	strh	r3, [r7, #10]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e04:	f7ff fabe 	bl	8003384 <HAL_GetTick>
 8003e08:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b20      	cmp	r3, #32
 8003e14:	f040 823f 	bne.w	8004296 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	2319      	movs	r3, #25
 8003e1e:	2201      	movs	r2, #1
 8003e20:	497f      	ldr	r1, [pc, #508]	; (8004020 <HAL_I2C_Master_Receive+0x234>)
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f001 f872 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	e232      	b.n	8004298 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_I2C_Master_Receive+0x54>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e22b      	b.n	8004298 <HAL_I2C_Master_Receive+0x4ac>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d007      	beq.n	8003e66 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0201 	orr.w	r2, r2, #1
 8003e64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2222      	movs	r2, #34	; 0x22
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2210      	movs	r2, #16
 8003e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	893a      	ldrh	r2, [r7, #8]
 8003e96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4a5f      	ldr	r2, [pc, #380]	; (8004024 <HAL_I2C_Master_Receive+0x238>)
 8003ea6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ea8:	8979      	ldrh	r1, [r7, #10]
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 fde0 	bl	8004a74 <I2C_MasterRequestRead>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e1ec      	b.n	8004298 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d113      	bne.n	8003eee <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	61fb      	str	r3, [r7, #28]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	e1c0      	b.n	8004270 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d11e      	bne.n	8003f34 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f06:	b672      	cpsid	i
}
 8003f08:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f30:	b662      	cpsie	i
}
 8003f32:	e035      	b.n	8003fa0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d11e      	bne.n	8003f7a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f4c:	b672      	cpsid	i
}
 8003f4e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f76:	b662      	cpsie	i
}
 8003f78:	e012      	b.n	8003fa0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003fa0:	e166      	b.n	8004270 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	f200 811f 	bhi.w	80041ea <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d123      	bne.n	8003ffc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f001 f8ff 	bl	80051bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e167      	b.n	8004298 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ffa:	e139      	b.n	8004270 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	2b02      	cmp	r3, #2
 8004002:	d152      	bne.n	80040aa <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	2200      	movs	r2, #0
 800400c:	4906      	ldr	r1, [pc, #24]	; (8004028 <HAL_I2C_Master_Receive+0x23c>)
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 ff7c 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d008      	beq.n	800402c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e13c      	b.n	8004298 <HAL_I2C_Master_Receive+0x4ac>
 800401e:	bf00      	nop
 8004020:	00100002 	.word	0x00100002
 8004024:	ffff0000 	.word	0xffff0000
 8004028:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800402c:	b672      	cpsid	i
}
 800402e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004072:	b662      	cpsie	i
}
 8004074:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040a8:	e0e2      	b.n	8004270 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b0:	2200      	movs	r2, #0
 80040b2:	497b      	ldr	r1, [pc, #492]	; (80042a0 <HAL_I2C_Master_Receive+0x4b4>)
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 ff29 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0e9      	b.n	8004298 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040d4:	b672      	cpsid	i
}
 80040d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800410a:	4b66      	ldr	r3, [pc, #408]	; (80042a4 <HAL_I2C_Master_Receive+0x4b8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	08db      	lsrs	r3, r3, #3
 8004110:	4a65      	ldr	r2, [pc, #404]	; (80042a8 <HAL_I2C_Master_Receive+0x4bc>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	0a1a      	lsrs	r2, r3, #8
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	00da      	lsls	r2, r3, #3
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	3b01      	subs	r3, #1
 8004128:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d118      	bne.n	8004162 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f043 0220 	orr.w	r2, r3, #32
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004152:	b662      	cpsie	i
}
 8004154:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e09a      	b.n	8004298 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b04      	cmp	r3, #4
 800416e:	d1d9      	bne.n	8004124 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80041b2:	b662      	cpsie	i
}
 80041b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041de:	b29b      	uxth	r3, r3
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041e8:	e042      	b.n	8004270 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 ffe4 	bl	80051bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e04c      	b.n	8004298 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f003 0304 	and.w	r3, r3, #4
 800423a:	2b04      	cmp	r3, #4
 800423c:	d118      	bne.n	8004270 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425a:	3b01      	subs	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004274:	2b00      	cmp	r3, #0
 8004276:	f47f ae94 	bne.w	8003fa2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	e000      	b.n	8004298 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8004296:	2302      	movs	r3, #2
  }
}
 8004298:	4618      	mov	r0, r3
 800429a:	3728      	adds	r7, #40	; 0x28
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	00010004 	.word	0x00010004
 80042a4:	20000000 	.word	0x20000000
 80042a8:	14f8b589 	.word	0x14f8b589

080042ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	4608      	mov	r0, r1
 80042b6:	4611      	mov	r1, r2
 80042b8:	461a      	mov	r2, r3
 80042ba:	4603      	mov	r3, r0
 80042bc:	817b      	strh	r3, [r7, #10]
 80042be:	460b      	mov	r3, r1
 80042c0:	813b      	strh	r3, [r7, #8]
 80042c2:	4613      	mov	r3, r2
 80042c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042c6:	f7ff f85d 	bl	8003384 <HAL_GetTick>
 80042ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b20      	cmp	r3, #32
 80042d6:	f040 80d9 	bne.w	800448c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	2319      	movs	r3, #25
 80042e0:	2201      	movs	r2, #1
 80042e2:	496d      	ldr	r1, [pc, #436]	; (8004498 <HAL_I2C_Mem_Write+0x1ec>)
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 fe11 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80042f0:	2302      	movs	r3, #2
 80042f2:	e0cc      	b.n	800448e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_I2C_Mem_Write+0x56>
 80042fe:	2302      	movs	r3, #2
 8004300:	e0c5      	b.n	800448e <HAL_I2C_Mem_Write+0x1e2>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b01      	cmp	r3, #1
 8004316:	d007      	beq.n	8004328 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004336:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2221      	movs	r2, #33	; 0x21
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2240      	movs	r2, #64	; 0x40
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a3a      	ldr	r2, [r7, #32]
 8004352:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004358:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4a4d      	ldr	r2, [pc, #308]	; (800449c <HAL_I2C_Mem_Write+0x1f0>)
 8004368:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800436a:	88f8      	ldrh	r0, [r7, #6]
 800436c:	893a      	ldrh	r2, [r7, #8]
 800436e:	8979      	ldrh	r1, [r7, #10]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	9301      	str	r3, [sp, #4]
 8004374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	4603      	mov	r3, r0
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 fc48 	bl	8004c10 <I2C_RequestMemoryWrite>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d052      	beq.n	800442c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e081      	b.n	800448e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 fe92 	bl	80050b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00d      	beq.n	80043b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d107      	bne.n	80043b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e06b      	b.n	800448e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	781a      	ldrb	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b04      	cmp	r3, #4
 80043f2:	d11b      	bne.n	800442c <HAL_I2C_Mem_Write+0x180>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d017      	beq.n	800442c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	781a      	ldrb	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1aa      	bne.n	800438a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 fe7e 	bl	800513a <I2C_WaitOnBTFFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00d      	beq.n	8004460 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	2b04      	cmp	r3, #4
 800444a:	d107      	bne.n	800445c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800445a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e016      	b.n	800448e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800446e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	e000      	b.n	800448e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800448c:	2302      	movs	r3, #2
  }
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	00100002 	.word	0x00100002
 800449c:	ffff0000 	.word	0xffff0000

080044a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08c      	sub	sp, #48	; 0x30
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	4608      	mov	r0, r1
 80044aa:	4611      	mov	r1, r2
 80044ac:	461a      	mov	r2, r3
 80044ae:	4603      	mov	r3, r0
 80044b0:	817b      	strh	r3, [r7, #10]
 80044b2:	460b      	mov	r3, r1
 80044b4:	813b      	strh	r3, [r7, #8]
 80044b6:	4613      	mov	r3, r2
 80044b8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044be:	f7fe ff61 	bl	8003384 <HAL_GetTick>
 80044c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	f040 8244 	bne.w	800495a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	2319      	movs	r3, #25
 80044d8:	2201      	movs	r2, #1
 80044da:	4982      	ldr	r1, [pc, #520]	; (80046e4 <HAL_I2C_Mem_Read+0x244>)
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 fd15 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80044e8:	2302      	movs	r3, #2
 80044ea:	e237      	b.n	800495c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d101      	bne.n	80044fa <HAL_I2C_Mem_Read+0x5a>
 80044f6:	2302      	movs	r3, #2
 80044f8:	e230      	b.n	800495c <HAL_I2C_Mem_Read+0x4bc>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b01      	cmp	r3, #1
 800450e:	d007      	beq.n	8004520 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800452e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2222      	movs	r2, #34	; 0x22
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2240      	movs	r2, #64	; 0x40
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800454a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004550:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a62      	ldr	r2, [pc, #392]	; (80046e8 <HAL_I2C_Mem_Read+0x248>)
 8004560:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004562:	88f8      	ldrh	r0, [r7, #6]
 8004564:	893a      	ldrh	r2, [r7, #8]
 8004566:	8979      	ldrh	r1, [r7, #10]
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	9301      	str	r3, [sp, #4]
 800456c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	4603      	mov	r3, r0
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 fbe2 	bl	8004d3c <I2C_RequestMemoryRead>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e1ec      	b.n	800495c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004586:	2b00      	cmp	r3, #0
 8004588:	d113      	bne.n	80045b2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	e1c0      	b.n	8004934 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d11e      	bne.n	80045f8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045ca:	b672      	cpsid	i
}
 80045cc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ce:	2300      	movs	r3, #0
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80045f4:	b662      	cpsie	i
}
 80045f6:	e035      	b.n	8004664 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d11e      	bne.n	800463e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800460e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004610:	b672      	cpsid	i
}
 8004612:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004638:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800463a:	b662      	cpsie	i
}
 800463c:	e012      	b.n	8004664 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800464c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800464e:	2300      	movs	r3, #0
 8004650:	613b      	str	r3, [r7, #16]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004664:	e166      	b.n	8004934 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466a:	2b03      	cmp	r3, #3
 800466c:	f200 811f 	bhi.w	80048ae <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004674:	2b01      	cmp	r3, #1
 8004676:	d123      	bne.n	80046c0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 fd9d 	bl	80051bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e167      	b.n	800495c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046be:	e139      	b.n	8004934 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d152      	bne.n	800476e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ce:	2200      	movs	r2, #0
 80046d0:	4906      	ldr	r1, [pc, #24]	; (80046ec <HAL_I2C_Mem_Read+0x24c>)
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 fc1a 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e13c      	b.n	800495c <HAL_I2C_Mem_Read+0x4bc>
 80046e2:	bf00      	nop
 80046e4:	00100002 	.word	0x00100002
 80046e8:	ffff0000 	.word	0xffff0000
 80046ec:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80046f0:	b672      	cpsid	i
}
 80046f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004702:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004736:	b662      	cpsie	i
}
 8004738:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800476c:	e0e2      	b.n	8004934 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004774:	2200      	movs	r2, #0
 8004776:	497b      	ldr	r1, [pc, #492]	; (8004964 <HAL_I2C_Mem_Read+0x4c4>)
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 fbc7 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0e9      	b.n	800495c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004796:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004798:	b672      	cpsid	i
}
 800479a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80047ce:	4b66      	ldr	r3, [pc, #408]	; (8004968 <HAL_I2C_Mem_Read+0x4c8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	08db      	lsrs	r3, r3, #3
 80047d4:	4a65      	ldr	r2, [pc, #404]	; (800496c <HAL_I2C_Mem_Read+0x4cc>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	0a1a      	lsrs	r2, r3, #8
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	00da      	lsls	r2, r3, #3
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d118      	bne.n	8004826 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	f043 0220 	orr.w	r2, r3, #32
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004816:	b662      	cpsie	i
}
 8004818:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e09a      	b.n	800495c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b04      	cmp	r3, #4
 8004832:	d1d9      	bne.n	80047e8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004842:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486c:	b29b      	uxth	r3, r3
 800486e:	3b01      	subs	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004876:	b662      	cpsie	i
}
 8004878:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048ac:	e042      	b.n	8004934 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 fc82 	bl	80051bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e04c      	b.n	800495c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	691a      	ldr	r2, [r3, #16]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048de:	3b01      	subs	r3, #1
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d118      	bne.n	8004934 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	691a      	ldr	r2, [r3, #16]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491e:	3b01      	subs	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492a:	b29b      	uxth	r3, r3
 800492c:	3b01      	subs	r3, #1
 800492e:	b29a      	uxth	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004938:	2b00      	cmp	r3, #0
 800493a:	f47f ae94 	bne.w	8004666 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	e000      	b.n	800495c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800495a:	2302      	movs	r3, #2
  }
}
 800495c:	4618      	mov	r0, r3
 800495e:	3728      	adds	r7, #40	; 0x28
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	00010004 	.word	0x00010004
 8004968:	20000000 	.word	0x20000000
 800496c:	14f8b589 	.word	0x14f8b589

08004970 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af02      	add	r7, sp, #8
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	607a      	str	r2, [r7, #4]
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	460b      	mov	r3, r1
 800497e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b08      	cmp	r3, #8
 800498a:	d006      	beq.n	800499a <I2C_MasterRequestWrite+0x2a>
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d003      	beq.n	800499a <I2C_MasterRequestWrite+0x2a>
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004998:	d108      	bne.n	80049ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e00b      	b.n	80049c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b0:	2b12      	cmp	r3, #18
 80049b2:	d107      	bne.n	80049c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 fa9b 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00d      	beq.n	80049f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ea:	d103      	bne.n	80049f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e035      	b.n	8004a64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a00:	d108      	bne.n	8004a14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a02:	897b      	ldrh	r3, [r7, #10]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	461a      	mov	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a10:	611a      	str	r2, [r3, #16]
 8004a12:	e01b      	b.n	8004a4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a14:	897b      	ldrh	r3, [r7, #10]
 8004a16:	11db      	asrs	r3, r3, #7
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	f003 0306 	and.w	r3, r3, #6
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	f063 030f 	orn	r3, r3, #15
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	490e      	ldr	r1, [pc, #56]	; (8004a6c <I2C_MasterRequestWrite+0xfc>)
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 fac1 	bl	8004fba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e010      	b.n	8004a64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a42:	897b      	ldrh	r3, [r7, #10]
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	4907      	ldr	r1, [pc, #28]	; (8004a70 <I2C_MasterRequestWrite+0x100>)
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 fab1 	bl	8004fba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e000      	b.n	8004a64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	00010008 	.word	0x00010008
 8004a70:	00010002 	.word	0x00010002

08004a74 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af02      	add	r7, sp, #8
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	607a      	str	r2, [r7, #4]
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	460b      	mov	r3, r1
 8004a82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a98:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d006      	beq.n	8004aae <I2C_MasterRequestRead+0x3a>
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d003      	beq.n	8004aae <I2C_MasterRequestRead+0x3a>
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004aac:	d108      	bne.n	8004ac0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	e00b      	b.n	8004ad8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	2b11      	cmp	r3, #17
 8004ac6:	d107      	bne.n	8004ad8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ad6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 fa11 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00d      	beq.n	8004b0c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004afe:	d103      	bne.n	8004b08 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e079      	b.n	8004c00 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b14:	d108      	bne.n	8004b28 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b16:	897b      	ldrh	r3, [r7, #10]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	611a      	str	r2, [r3, #16]
 8004b26:	e05f      	b.n	8004be8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b28:	897b      	ldrh	r3, [r7, #10]
 8004b2a:	11db      	asrs	r3, r3, #7
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	f003 0306 	and.w	r3, r3, #6
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	f063 030f 	orn	r3, r3, #15
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	4930      	ldr	r1, [pc, #192]	; (8004c08 <I2C_MasterRequestRead+0x194>)
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 fa37 	bl	8004fba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e054      	b.n	8004c00 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b56:	897b      	ldrh	r3, [r7, #10]
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	4929      	ldr	r1, [pc, #164]	; (8004c0c <I2C_MasterRequestRead+0x198>)
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 fa27 	bl	8004fba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e044      	b.n	8004c00 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b76:	2300      	movs	r3, #0
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	613b      	str	r3, [r7, #16]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b9a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f9af 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00d      	beq.n	8004bd0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc2:	d103      	bne.n	8004bcc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e017      	b.n	8004c00 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004bd0:	897b      	ldrh	r3, [r7, #10]
 8004bd2:	11db      	asrs	r3, r3, #7
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	f003 0306 	and.w	r3, r3, #6
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	f063 030e 	orn	r3, r3, #14
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	4907      	ldr	r1, [pc, #28]	; (8004c0c <I2C_MasterRequestRead+0x198>)
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 f9e3 	bl	8004fba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	00010008 	.word	0x00010008
 8004c0c:	00010002 	.word	0x00010002

08004c10 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	4608      	mov	r0, r1
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4603      	mov	r3, r0
 8004c20:	817b      	strh	r3, [r7, #10]
 8004c22:	460b      	mov	r3, r1
 8004c24:	813b      	strh	r3, [r7, #8]
 8004c26:	4613      	mov	r3, r2
 8004c28:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 f960 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00d      	beq.n	8004c6e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c60:	d103      	bne.n	8004c6a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e05f      	b.n	8004d2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c6e:	897b      	ldrh	r3, [r7, #10]
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	6a3a      	ldr	r2, [r7, #32]
 8004c82:	492d      	ldr	r1, [pc, #180]	; (8004d38 <I2C_RequestMemoryWrite+0x128>)
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 f998 	bl	8004fba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e04c      	b.n	8004d2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cac:	6a39      	ldr	r1, [r7, #32]
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 fa02 	bl	80050b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00d      	beq.n	8004cd6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d107      	bne.n	8004cd2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e02b      	b.n	8004d2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cd6:	88fb      	ldrh	r3, [r7, #6]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d105      	bne.n	8004ce8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cdc:	893b      	ldrh	r3, [r7, #8]
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	611a      	str	r2, [r3, #16]
 8004ce6:	e021      	b.n	8004d2c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ce8:	893b      	ldrh	r3, [r7, #8]
 8004cea:	0a1b      	lsrs	r3, r3, #8
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf8:	6a39      	ldr	r1, [r7, #32]
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 f9dc 	bl	80050b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00d      	beq.n	8004d22 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d107      	bne.n	8004d1e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e005      	b.n	8004d2e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d22:	893b      	ldrh	r3, [r7, #8]
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	00010002 	.word	0x00010002

08004d3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	4608      	mov	r0, r1
 8004d46:	4611      	mov	r1, r2
 8004d48:	461a      	mov	r2, r3
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	817b      	strh	r3, [r7, #10]
 8004d4e:	460b      	mov	r3, r1
 8004d50:	813b      	strh	r3, [r7, #8]
 8004d52:	4613      	mov	r3, r2
 8004d54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 f8c2 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00d      	beq.n	8004daa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d9c:	d103      	bne.n	8004da6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004da4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e0aa      	b.n	8004f00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004daa:	897b      	ldrh	r3, [r7, #10]
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	461a      	mov	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004db8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	6a3a      	ldr	r2, [r7, #32]
 8004dbe:	4952      	ldr	r1, [pc, #328]	; (8004f08 <I2C_RequestMemoryRead+0x1cc>)
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f8fa 	bl	8004fba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e097      	b.n	8004f00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de8:	6a39      	ldr	r1, [r7, #32]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 f964 	bl	80050b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00d      	beq.n	8004e12 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d107      	bne.n	8004e0e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e076      	b.n	8004f00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e12:	88fb      	ldrh	r3, [r7, #6]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d105      	bne.n	8004e24 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e18:	893b      	ldrh	r3, [r7, #8]
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	611a      	str	r2, [r3, #16]
 8004e22:	e021      	b.n	8004e68 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e24:	893b      	ldrh	r3, [r7, #8]
 8004e26:	0a1b      	lsrs	r3, r3, #8
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e34:	6a39      	ldr	r1, [r7, #32]
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 f93e 	bl	80050b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00d      	beq.n	8004e5e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d107      	bne.n	8004e5a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e050      	b.n	8004f00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e5e:	893b      	ldrh	r3, [r7, #8]
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6a:	6a39      	ldr	r1, [r7, #32]
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 f923 	bl	80050b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00d      	beq.n	8004e94 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7c:	2b04      	cmp	r3, #4
 8004e7e:	d107      	bne.n	8004e90 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e035      	b.n	8004f00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ea2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 f82b 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00d      	beq.n	8004ed8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eca:	d103      	bne.n	8004ed4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ed2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e013      	b.n	8004f00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ed8:	897b      	ldrh	r3, [r7, #10]
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	f043 0301 	orr.w	r3, r3, #1
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	6a3a      	ldr	r2, [r7, #32]
 8004eec:	4906      	ldr	r1, [pc, #24]	; (8004f08 <I2C_RequestMemoryRead+0x1cc>)
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 f863 	bl	8004fba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	00010002 	.word	0x00010002

08004f0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f1c:	e025      	b.n	8004f6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f24:	d021      	beq.n	8004f6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f26:	f7fe fa2d 	bl	8003384 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d302      	bcc.n	8004f3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d116      	bne.n	8004f6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	f043 0220 	orr.w	r2, r3, #32
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e023      	b.n	8004fb2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	0c1b      	lsrs	r3, r3, #16
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d10d      	bne.n	8004f90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	43da      	mvns	r2, r3
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	bf0c      	ite	eq
 8004f86:	2301      	moveq	r3, #1
 8004f88:	2300      	movne	r3, #0
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	e00c      	b.n	8004faa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	43da      	mvns	r2, r3
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	bf0c      	ite	eq
 8004fa2:	2301      	moveq	r3, #1
 8004fa4:	2300      	movne	r3, #0
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	461a      	mov	r2, r3
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d0b6      	beq.n	8004f1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	607a      	str	r2, [r7, #4]
 8004fc6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fc8:	e051      	b.n	800506e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd8:	d123      	bne.n	8005022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ff2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	f043 0204 	orr.w	r2, r3, #4
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e046      	b.n	80050b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005028:	d021      	beq.n	800506e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800502a:	f7fe f9ab 	bl	8003384 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	429a      	cmp	r2, r3
 8005038:	d302      	bcc.n	8005040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d116      	bne.n	800506e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2220      	movs	r2, #32
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	f043 0220 	orr.w	r2, r3, #32
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e020      	b.n	80050b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	0c1b      	lsrs	r3, r3, #16
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b01      	cmp	r3, #1
 8005076:	d10c      	bne.n	8005092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	43da      	mvns	r2, r3
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4013      	ands	r3, r2
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	bf14      	ite	ne
 800508a:	2301      	movne	r3, #1
 800508c:	2300      	moveq	r3, #0
 800508e:	b2db      	uxtb	r3, r3
 8005090:	e00b      	b.n	80050aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	43da      	mvns	r2, r3
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	4013      	ands	r3, r2
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	bf14      	ite	ne
 80050a4:	2301      	movne	r3, #1
 80050a6:	2300      	moveq	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d18d      	bne.n	8004fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050c4:	e02d      	b.n	8005122 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 f8ce 	bl	8005268 <I2C_IsAcknowledgeFailed>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e02d      	b.n	8005132 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d021      	beq.n	8005122 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050de:	f7fe f951 	bl	8003384 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d302      	bcc.n	80050f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d116      	bne.n	8005122 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	f043 0220 	orr.w	r2, r3, #32
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e007      	b.n	8005132 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512c:	2b80      	cmp	r3, #128	; 0x80
 800512e:	d1ca      	bne.n	80050c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b084      	sub	sp, #16
 800513e:	af00      	add	r7, sp, #0
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005146:	e02d      	b.n	80051a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f88d 	bl	8005268 <I2C_IsAcknowledgeFailed>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e02d      	b.n	80051b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515e:	d021      	beq.n	80051a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005160:	f7fe f910 	bl	8003384 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	429a      	cmp	r2, r3
 800516e:	d302      	bcc.n	8005176 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d116      	bne.n	80051a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005190:	f043 0220 	orr.w	r2, r3, #32
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e007      	b.n	80051b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d1ca      	bne.n	8005148 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051c8:	e042      	b.n	8005250 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	2b10      	cmp	r3, #16
 80051d6:	d119      	bne.n	800520c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0210 	mvn.w	r2, #16
 80051e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e029      	b.n	8005260 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520c:	f7fe f8ba 	bl	8003384 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	429a      	cmp	r2, r3
 800521a:	d302      	bcc.n	8005222 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d116      	bne.n	8005250 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2220      	movs	r2, #32
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	f043 0220 	orr.w	r2, r3, #32
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e007      	b.n	8005260 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525a:	2b40      	cmp	r3, #64	; 0x40
 800525c:	d1b5      	bne.n	80051ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800527a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800527e:	d11b      	bne.n	80052b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005288:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2220      	movs	r2, #32
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a4:	f043 0204 	orr.w	r2, r3, #4
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr

080052c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e26c      	b.n	80057b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 8087 	beq.w	80053f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052e4:	4b92      	ldr	r3, [pc, #584]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f003 030c 	and.w	r3, r3, #12
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	d00c      	beq.n	800530a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80052f0:	4b8f      	ldr	r3, [pc, #572]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 030c 	and.w	r3, r3, #12
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d112      	bne.n	8005322 <HAL_RCC_OscConfig+0x5e>
 80052fc:	4b8c      	ldr	r3, [pc, #560]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005308:	d10b      	bne.n	8005322 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800530a:	4b89      	ldr	r3, [pc, #548]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d06c      	beq.n	80053f0 <HAL_RCC_OscConfig+0x12c>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d168      	bne.n	80053f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e246      	b.n	80057b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800532a:	d106      	bne.n	800533a <HAL_RCC_OscConfig+0x76>
 800532c:	4b80      	ldr	r3, [pc, #512]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a7f      	ldr	r2, [pc, #508]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	e02e      	b.n	8005398 <HAL_RCC_OscConfig+0xd4>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10c      	bne.n	800535c <HAL_RCC_OscConfig+0x98>
 8005342:	4b7b      	ldr	r3, [pc, #492]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a7a      	ldr	r2, [pc, #488]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	4b78      	ldr	r3, [pc, #480]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a77      	ldr	r2, [pc, #476]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005354:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	e01d      	b.n	8005398 <HAL_RCC_OscConfig+0xd4>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005364:	d10c      	bne.n	8005380 <HAL_RCC_OscConfig+0xbc>
 8005366:	4b72      	ldr	r3, [pc, #456]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a71      	ldr	r2, [pc, #452]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 800536c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	4b6f      	ldr	r3, [pc, #444]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a6e      	ldr	r2, [pc, #440]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	e00b      	b.n	8005398 <HAL_RCC_OscConfig+0xd4>
 8005380:	4b6b      	ldr	r3, [pc, #428]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a6a      	ldr	r2, [pc, #424]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	4b68      	ldr	r3, [pc, #416]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a67      	ldr	r2, [pc, #412]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005396:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d013      	beq.n	80053c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a0:	f7fd fff0 	bl	8003384 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053a8:	f7fd ffec 	bl	8003384 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b64      	cmp	r3, #100	; 0x64
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e1fa      	b.n	80057b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ba:	4b5d      	ldr	r3, [pc, #372]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0f0      	beq.n	80053a8 <HAL_RCC_OscConfig+0xe4>
 80053c6:	e014      	b.n	80053f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c8:	f7fd ffdc 	bl	8003384 <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053d0:	f7fd ffd8 	bl	8003384 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b64      	cmp	r3, #100	; 0x64
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e1e6      	b.n	80057b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053e2:	4b53      	ldr	r3, [pc, #332]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f0      	bne.n	80053d0 <HAL_RCC_OscConfig+0x10c>
 80053ee:	e000      	b.n	80053f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d063      	beq.n	80054c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053fe:	4b4c      	ldr	r3, [pc, #304]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 030c 	and.w	r3, r3, #12
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00b      	beq.n	8005422 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800540a:	4b49      	ldr	r3, [pc, #292]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f003 030c 	and.w	r3, r3, #12
 8005412:	2b08      	cmp	r3, #8
 8005414:	d11c      	bne.n	8005450 <HAL_RCC_OscConfig+0x18c>
 8005416:	4b46      	ldr	r3, [pc, #280]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d116      	bne.n	8005450 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005422:	4b43      	ldr	r3, [pc, #268]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d005      	beq.n	800543a <HAL_RCC_OscConfig+0x176>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d001      	beq.n	800543a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e1ba      	b.n	80057b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800543a:	4b3d      	ldr	r3, [pc, #244]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	4939      	ldr	r1, [pc, #228]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 800544a:	4313      	orrs	r3, r2
 800544c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800544e:	e03a      	b.n	80054c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d020      	beq.n	800549a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005458:	4b36      	ldr	r3, [pc, #216]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 800545a:	2201      	movs	r2, #1
 800545c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800545e:	f7fd ff91 	bl	8003384 <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005464:	e008      	b.n	8005478 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005466:	f7fd ff8d 	bl	8003384 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e19b      	b.n	80057b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005478:	4b2d      	ldr	r3, [pc, #180]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0f0      	beq.n	8005466 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005484:	4b2a      	ldr	r3, [pc, #168]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	4927      	ldr	r1, [pc, #156]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005494:	4313      	orrs	r3, r2
 8005496:	600b      	str	r3, [r1, #0]
 8005498:	e015      	b.n	80054c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800549a:	4b26      	ldr	r3, [pc, #152]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a0:	f7fd ff70 	bl	8003384 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054a8:	f7fd ff6c 	bl	8003384 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e17a      	b.n	80057b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ba:	4b1d      	ldr	r3, [pc, #116]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f0      	bne.n	80054a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0308 	and.w	r3, r3, #8
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d03a      	beq.n	8005548 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d019      	beq.n	800550e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054da:	4b17      	ldr	r3, [pc, #92]	; (8005538 <HAL_RCC_OscConfig+0x274>)
 80054dc:	2201      	movs	r2, #1
 80054de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054e0:	f7fd ff50 	bl	8003384 <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054e8:	f7fd ff4c 	bl	8003384 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e15a      	b.n	80057b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054fa:	4b0d      	ldr	r3, [pc, #52]	; (8005530 <HAL_RCC_OscConfig+0x26c>)
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0f0      	beq.n	80054e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005506:	2001      	movs	r0, #1
 8005508:	f000 fad8 	bl	8005abc <RCC_Delay>
 800550c:	e01c      	b.n	8005548 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800550e:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <HAL_RCC_OscConfig+0x274>)
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005514:	f7fd ff36 	bl	8003384 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800551a:	e00f      	b.n	800553c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800551c:	f7fd ff32 	bl	8003384 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d908      	bls.n	800553c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e140      	b.n	80057b0 <HAL_RCC_OscConfig+0x4ec>
 800552e:	bf00      	nop
 8005530:	40021000 	.word	0x40021000
 8005534:	42420000 	.word	0x42420000
 8005538:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800553c:	4b9e      	ldr	r3, [pc, #632]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e9      	bne.n	800551c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 80a6 	beq.w	80056a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005556:	2300      	movs	r3, #0
 8005558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800555a:	4b97      	ldr	r3, [pc, #604]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10d      	bne.n	8005582 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005566:	4b94      	ldr	r3, [pc, #592]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	4a93      	ldr	r2, [pc, #588]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 800556c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005570:	61d3      	str	r3, [r2, #28]
 8005572:	4b91      	ldr	r3, [pc, #580]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800557a:	60bb      	str	r3, [r7, #8]
 800557c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800557e:	2301      	movs	r3, #1
 8005580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005582:	4b8e      	ldr	r3, [pc, #568]	; (80057bc <HAL_RCC_OscConfig+0x4f8>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558a:	2b00      	cmp	r3, #0
 800558c:	d118      	bne.n	80055c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800558e:	4b8b      	ldr	r3, [pc, #556]	; (80057bc <HAL_RCC_OscConfig+0x4f8>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a8a      	ldr	r2, [pc, #552]	; (80057bc <HAL_RCC_OscConfig+0x4f8>)
 8005594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800559a:	f7fd fef3 	bl	8003384 <HAL_GetTick>
 800559e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a0:	e008      	b.n	80055b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a2:	f7fd feef 	bl	8003384 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b64      	cmp	r3, #100	; 0x64
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e0fd      	b.n	80057b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b4:	4b81      	ldr	r3, [pc, #516]	; (80057bc <HAL_RCC_OscConfig+0x4f8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0f0      	beq.n	80055a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d106      	bne.n	80055d6 <HAL_RCC_OscConfig+0x312>
 80055c8:	4b7b      	ldr	r3, [pc, #492]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	4a7a      	ldr	r2, [pc, #488]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 80055ce:	f043 0301 	orr.w	r3, r3, #1
 80055d2:	6213      	str	r3, [r2, #32]
 80055d4:	e02d      	b.n	8005632 <HAL_RCC_OscConfig+0x36e>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10c      	bne.n	80055f8 <HAL_RCC_OscConfig+0x334>
 80055de:	4b76      	ldr	r3, [pc, #472]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	4a75      	ldr	r2, [pc, #468]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 80055e4:	f023 0301 	bic.w	r3, r3, #1
 80055e8:	6213      	str	r3, [r2, #32]
 80055ea:	4b73      	ldr	r3, [pc, #460]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	4a72      	ldr	r2, [pc, #456]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 80055f0:	f023 0304 	bic.w	r3, r3, #4
 80055f4:	6213      	str	r3, [r2, #32]
 80055f6:	e01c      	b.n	8005632 <HAL_RCC_OscConfig+0x36e>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	2b05      	cmp	r3, #5
 80055fe:	d10c      	bne.n	800561a <HAL_RCC_OscConfig+0x356>
 8005600:	4b6d      	ldr	r3, [pc, #436]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	4a6c      	ldr	r2, [pc, #432]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 8005606:	f043 0304 	orr.w	r3, r3, #4
 800560a:	6213      	str	r3, [r2, #32]
 800560c:	4b6a      	ldr	r3, [pc, #424]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	4a69      	ldr	r2, [pc, #420]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 8005612:	f043 0301 	orr.w	r3, r3, #1
 8005616:	6213      	str	r3, [r2, #32]
 8005618:	e00b      	b.n	8005632 <HAL_RCC_OscConfig+0x36e>
 800561a:	4b67      	ldr	r3, [pc, #412]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	4a66      	ldr	r2, [pc, #408]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 8005620:	f023 0301 	bic.w	r3, r3, #1
 8005624:	6213      	str	r3, [r2, #32]
 8005626:	4b64      	ldr	r3, [pc, #400]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	4a63      	ldr	r2, [pc, #396]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 800562c:	f023 0304 	bic.w	r3, r3, #4
 8005630:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d015      	beq.n	8005666 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800563a:	f7fd fea3 	bl	8003384 <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005640:	e00a      	b.n	8005658 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005642:	f7fd fe9f 	bl	8003384 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005650:	4293      	cmp	r3, r2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e0ab      	b.n	80057b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005658:	4b57      	ldr	r3, [pc, #348]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0ee      	beq.n	8005642 <HAL_RCC_OscConfig+0x37e>
 8005664:	e014      	b.n	8005690 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005666:	f7fd fe8d 	bl	8003384 <HAL_GetTick>
 800566a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800566c:	e00a      	b.n	8005684 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800566e:	f7fd fe89 	bl	8003384 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	f241 3288 	movw	r2, #5000	; 0x1388
 800567c:	4293      	cmp	r3, r2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e095      	b.n	80057b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005684:	4b4c      	ldr	r3, [pc, #304]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1ee      	bne.n	800566e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005690:	7dfb      	ldrb	r3, [r7, #23]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d105      	bne.n	80056a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005696:	4b48      	ldr	r3, [pc, #288]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	4a47      	ldr	r2, [pc, #284]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 800569c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 8081 	beq.w	80057ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056ac:	4b42      	ldr	r3, [pc, #264]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f003 030c 	and.w	r3, r3, #12
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d061      	beq.n	800577c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d146      	bne.n	800574e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c0:	4b3f      	ldr	r3, [pc, #252]	; (80057c0 <HAL_RCC_OscConfig+0x4fc>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c6:	f7fd fe5d 	bl	8003384 <HAL_GetTick>
 80056ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056cc:	e008      	b.n	80056e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ce:	f7fd fe59 	bl	8003384 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d901      	bls.n	80056e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e067      	b.n	80057b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056e0:	4b35      	ldr	r3, [pc, #212]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1f0      	bne.n	80056ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f4:	d108      	bne.n	8005708 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80056f6:	4b30      	ldr	r3, [pc, #192]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	492d      	ldr	r1, [pc, #180]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 8005704:	4313      	orrs	r3, r2
 8005706:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005708:	4b2b      	ldr	r3, [pc, #172]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a19      	ldr	r1, [r3, #32]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	430b      	orrs	r3, r1
 800571a:	4927      	ldr	r1, [pc, #156]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 800571c:	4313      	orrs	r3, r2
 800571e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005720:	4b27      	ldr	r3, [pc, #156]	; (80057c0 <HAL_RCC_OscConfig+0x4fc>)
 8005722:	2201      	movs	r2, #1
 8005724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005726:	f7fd fe2d 	bl	8003384 <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800572e:	f7fd fe29 	bl	8003384 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e037      	b.n	80057b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005740:	4b1d      	ldr	r3, [pc, #116]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0f0      	beq.n	800572e <HAL_RCC_OscConfig+0x46a>
 800574c:	e02f      	b.n	80057ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800574e:	4b1c      	ldr	r3, [pc, #112]	; (80057c0 <HAL_RCC_OscConfig+0x4fc>)
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005754:	f7fd fe16 	bl	8003384 <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800575c:	f7fd fe12 	bl	8003384 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e020      	b.n	80057b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800576e:	4b12      	ldr	r3, [pc, #72]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f0      	bne.n	800575c <HAL_RCC_OscConfig+0x498>
 800577a:	e018      	b.n	80057ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	69db      	ldr	r3, [r3, #28]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d101      	bne.n	8005788 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e013      	b.n	80057b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005788:	4b0b      	ldr	r3, [pc, #44]	; (80057b8 <HAL_RCC_OscConfig+0x4f4>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	429a      	cmp	r2, r3
 800579a:	d106      	bne.n	80057aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d001      	beq.n	80057ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40021000 	.word	0x40021000
 80057bc:	40007000 	.word	0x40007000
 80057c0:	42420060 	.word	0x42420060

080057c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e0d0      	b.n	800597a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057d8:	4b6a      	ldr	r3, [pc, #424]	; (8005984 <HAL_RCC_ClockConfig+0x1c0>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d910      	bls.n	8005808 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057e6:	4b67      	ldr	r3, [pc, #412]	; (8005984 <HAL_RCC_ClockConfig+0x1c0>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f023 0207 	bic.w	r2, r3, #7
 80057ee:	4965      	ldr	r1, [pc, #404]	; (8005984 <HAL_RCC_ClockConfig+0x1c0>)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057f6:	4b63      	ldr	r3, [pc, #396]	; (8005984 <HAL_RCC_ClockConfig+0x1c0>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0307 	and.w	r3, r3, #7
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d001      	beq.n	8005808 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e0b8      	b.n	800597a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d020      	beq.n	8005856 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b00      	cmp	r3, #0
 800581e:	d005      	beq.n	800582c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005820:	4b59      	ldr	r3, [pc, #356]	; (8005988 <HAL_RCC_ClockConfig+0x1c4>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	4a58      	ldr	r2, [pc, #352]	; (8005988 <HAL_RCC_ClockConfig+0x1c4>)
 8005826:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800582a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0308 	and.w	r3, r3, #8
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005838:	4b53      	ldr	r3, [pc, #332]	; (8005988 <HAL_RCC_ClockConfig+0x1c4>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	4a52      	ldr	r2, [pc, #328]	; (8005988 <HAL_RCC_ClockConfig+0x1c4>)
 800583e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005842:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005844:	4b50      	ldr	r3, [pc, #320]	; (8005988 <HAL_RCC_ClockConfig+0x1c4>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	494d      	ldr	r1, [pc, #308]	; (8005988 <HAL_RCC_ClockConfig+0x1c4>)
 8005852:	4313      	orrs	r3, r2
 8005854:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d040      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d107      	bne.n	800587a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800586a:	4b47      	ldr	r3, [pc, #284]	; (8005988 <HAL_RCC_ClockConfig+0x1c4>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d115      	bne.n	80058a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e07f      	b.n	800597a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d107      	bne.n	8005892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005882:	4b41      	ldr	r3, [pc, #260]	; (8005988 <HAL_RCC_ClockConfig+0x1c4>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d109      	bne.n	80058a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e073      	b.n	800597a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005892:	4b3d      	ldr	r3, [pc, #244]	; (8005988 <HAL_RCC_ClockConfig+0x1c4>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e06b      	b.n	800597a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058a2:	4b39      	ldr	r3, [pc, #228]	; (8005988 <HAL_RCC_ClockConfig+0x1c4>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f023 0203 	bic.w	r2, r3, #3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	4936      	ldr	r1, [pc, #216]	; (8005988 <HAL_RCC_ClockConfig+0x1c4>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058b4:	f7fd fd66 	bl	8003384 <HAL_GetTick>
 80058b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ba:	e00a      	b.n	80058d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058bc:	f7fd fd62 	bl	8003384 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e053      	b.n	800597a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d2:	4b2d      	ldr	r3, [pc, #180]	; (8005988 <HAL_RCC_ClockConfig+0x1c4>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f003 020c 	and.w	r2, r3, #12
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d1eb      	bne.n	80058bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058e4:	4b27      	ldr	r3, [pc, #156]	; (8005984 <HAL_RCC_ClockConfig+0x1c0>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d210      	bcs.n	8005914 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f2:	4b24      	ldr	r3, [pc, #144]	; (8005984 <HAL_RCC_ClockConfig+0x1c0>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f023 0207 	bic.w	r2, r3, #7
 80058fa:	4922      	ldr	r1, [pc, #136]	; (8005984 <HAL_RCC_ClockConfig+0x1c0>)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	4313      	orrs	r3, r2
 8005900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005902:	4b20      	ldr	r3, [pc, #128]	; (8005984 <HAL_RCC_ClockConfig+0x1c0>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0307 	and.w	r3, r3, #7
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d001      	beq.n	8005914 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e032      	b.n	800597a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b00      	cmp	r3, #0
 800591e:	d008      	beq.n	8005932 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005920:	4b19      	ldr	r3, [pc, #100]	; (8005988 <HAL_RCC_ClockConfig+0x1c4>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	4916      	ldr	r1, [pc, #88]	; (8005988 <HAL_RCC_ClockConfig+0x1c4>)
 800592e:	4313      	orrs	r3, r2
 8005930:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b00      	cmp	r3, #0
 800593c:	d009      	beq.n	8005952 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800593e:	4b12      	ldr	r3, [pc, #72]	; (8005988 <HAL_RCC_ClockConfig+0x1c4>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	490e      	ldr	r1, [pc, #56]	; (8005988 <HAL_RCC_ClockConfig+0x1c4>)
 800594e:	4313      	orrs	r3, r2
 8005950:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005952:	f000 f821 	bl	8005998 <HAL_RCC_GetSysClockFreq>
 8005956:	4602      	mov	r2, r0
 8005958:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <HAL_RCC_ClockConfig+0x1c4>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	091b      	lsrs	r3, r3, #4
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	490a      	ldr	r1, [pc, #40]	; (800598c <HAL_RCC_ClockConfig+0x1c8>)
 8005964:	5ccb      	ldrb	r3, [r1, r3]
 8005966:	fa22 f303 	lsr.w	r3, r2, r3
 800596a:	4a09      	ldr	r2, [pc, #36]	; (8005990 <HAL_RCC_ClockConfig+0x1cc>)
 800596c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800596e:	4b09      	ldr	r3, [pc, #36]	; (8005994 <HAL_RCC_ClockConfig+0x1d0>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4618      	mov	r0, r3
 8005974:	f7fd fcc4 	bl	8003300 <HAL_InitTick>

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	40022000 	.word	0x40022000
 8005988:	40021000 	.word	0x40021000
 800598c:	0800afa0 	.word	0x0800afa0
 8005990:	20000000 	.word	0x20000000
 8005994:	20000004 	.word	0x20000004

08005998 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005998:	b490      	push	{r4, r7}
 800599a:	b08a      	sub	sp, #40	; 0x28
 800599c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800599e:	4b2a      	ldr	r3, [pc, #168]	; (8005a48 <HAL_RCC_GetSysClockFreq+0xb0>)
 80059a0:	1d3c      	adds	r4, r7, #4
 80059a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80059a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80059a8:	f240 2301 	movw	r3, #513	; 0x201
 80059ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	61fb      	str	r3, [r7, #28]
 80059b2:	2300      	movs	r3, #0
 80059b4:	61bb      	str	r3, [r7, #24]
 80059b6:	2300      	movs	r3, #0
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
 80059ba:	2300      	movs	r3, #0
 80059bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80059c2:	4b22      	ldr	r3, [pc, #136]	; (8005a4c <HAL_RCC_GetSysClockFreq+0xb4>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	f003 030c 	and.w	r3, r3, #12
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d002      	beq.n	80059d8 <HAL_RCC_GetSysClockFreq+0x40>
 80059d2:	2b08      	cmp	r3, #8
 80059d4:	d003      	beq.n	80059de <HAL_RCC_GetSysClockFreq+0x46>
 80059d6:	e02d      	b.n	8005a34 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80059d8:	4b1d      	ldr	r3, [pc, #116]	; (8005a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059da:	623b      	str	r3, [r7, #32]
      break;
 80059dc:	e02d      	b.n	8005a3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	0c9b      	lsrs	r3, r3, #18
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80059ea:	4413      	add	r3, r2
 80059ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80059f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d013      	beq.n	8005a24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80059fc:	4b13      	ldr	r3, [pc, #76]	; (8005a4c <HAL_RCC_GetSysClockFreq+0xb4>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	0c5b      	lsrs	r3, r3, #17
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005a10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	4a0e      	ldr	r2, [pc, #56]	; (8005a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a16:	fb02 f203 	mul.w	r2, r2, r3
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
 8005a22:	e004      	b.n	8005a2e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	4a0b      	ldr	r2, [pc, #44]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a28:	fb02 f303 	mul.w	r3, r2, r3
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	623b      	str	r3, [r7, #32]
      break;
 8005a32:	e002      	b.n	8005a3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a34:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a36:	623b      	str	r3, [r7, #32]
      break;
 8005a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3728      	adds	r7, #40	; 0x28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bc90      	pop	{r4, r7}
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	0800af5c 	.word	0x0800af5c
 8005a4c:	40021000 	.word	0x40021000
 8005a50:	007a1200 	.word	0x007a1200
 8005a54:	003d0900 	.word	0x003d0900

08005a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a5c:	4b02      	ldr	r3, [pc, #8]	; (8005a68 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bc80      	pop	{r7}
 8005a66:	4770      	bx	lr
 8005a68:	20000000 	.word	0x20000000

08005a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a70:	f7ff fff2 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8005a74:	4602      	mov	r2, r0
 8005a76:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	0a1b      	lsrs	r3, r3, #8
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	4903      	ldr	r1, [pc, #12]	; (8005a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a82:	5ccb      	ldrb	r3, [r1, r3]
 8005a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	40021000 	.word	0x40021000
 8005a90:	0800afb0 	.word	0x0800afb0

08005a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a98:	f7ff ffde 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	4b05      	ldr	r3, [pc, #20]	; (8005ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	0adb      	lsrs	r3, r3, #11
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	4903      	ldr	r1, [pc, #12]	; (8005ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aaa:	5ccb      	ldrb	r3, [r1, r3]
 8005aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	40021000 	.word	0x40021000
 8005ab8:	0800afb0 	.word	0x0800afb0

08005abc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <RCC_Delay+0x34>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a0a      	ldr	r2, [pc, #40]	; (8005af4 <RCC_Delay+0x38>)
 8005aca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ace:	0a5b      	lsrs	r3, r3, #9
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	fb02 f303 	mul.w	r3, r2, r3
 8005ad6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ad8:	bf00      	nop
  }
  while (Delay --);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	1e5a      	subs	r2, r3, #1
 8005ade:	60fa      	str	r2, [r7, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1f9      	bne.n	8005ad8 <RCC_Delay+0x1c>
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bc80      	pop	{r7}
 8005aee:	4770      	bx	lr
 8005af0:	20000000 	.word	0x20000000
 8005af4:	10624dd3 	.word	0x10624dd3

08005af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e041      	b.n	8005b8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d106      	bne.n	8005b24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7fd fa26 	bl	8002f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3304      	adds	r3, #4
 8005b34:	4619      	mov	r1, r3
 8005b36:	4610      	mov	r0, r2
 8005b38:	f000 fe98 	bl	800686c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d001      	beq.n	8005bb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e032      	b.n	8005c16 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a18      	ldr	r2, [pc, #96]	; (8005c20 <HAL_TIM_Base_Start+0x88>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00e      	beq.n	8005be0 <HAL_TIM_Base_Start+0x48>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bca:	d009      	beq.n	8005be0 <HAL_TIM_Base_Start+0x48>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a14      	ldr	r2, [pc, #80]	; (8005c24 <HAL_TIM_Base_Start+0x8c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d004      	beq.n	8005be0 <HAL_TIM_Base_Start+0x48>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a13      	ldr	r2, [pc, #76]	; (8005c28 <HAL_TIM_Base_Start+0x90>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d111      	bne.n	8005c04 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 0307 	and.w	r3, r3, #7
 8005bea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2b06      	cmp	r3, #6
 8005bf0:	d010      	beq.n	8005c14 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 0201 	orr.w	r2, r2, #1
 8005c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c02:	e007      	b.n	8005c14 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bc80      	pop	{r7}
 8005c1e:	4770      	bx	lr
 8005c20:	40012c00 	.word	0x40012c00
 8005c24:	40000400 	.word	0x40000400
 8005c28:	40000800 	.word	0x40000800

08005c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d001      	beq.n	8005c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e03a      	b.n	8005cba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0201 	orr.w	r2, r2, #1
 8005c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a18      	ldr	r2, [pc, #96]	; (8005cc4 <HAL_TIM_Base_Start_IT+0x98>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00e      	beq.n	8005c84 <HAL_TIM_Base_Start_IT+0x58>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6e:	d009      	beq.n	8005c84 <HAL_TIM_Base_Start_IT+0x58>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a14      	ldr	r2, [pc, #80]	; (8005cc8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d004      	beq.n	8005c84 <HAL_TIM_Base_Start_IT+0x58>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a13      	ldr	r2, [pc, #76]	; (8005ccc <HAL_TIM_Base_Start_IT+0xa0>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d111      	bne.n	8005ca8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b06      	cmp	r3, #6
 8005c94:	d010      	beq.n	8005cb8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f042 0201 	orr.w	r2, r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca6:	e007      	b.n	8005cb8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 0201 	orr.w	r2, r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bc80      	pop	{r7}
 8005cc2:	4770      	bx	lr
 8005cc4:	40012c00 	.word	0x40012c00
 8005cc8:	40000400 	.word	0x40000400
 8005ccc:	40000800 	.word	0x40000800

08005cd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e041      	b.n	8005d66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d106      	bne.n	8005cfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fd f91c 	bl	8002f34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	f000 fdac 	bl	800686c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d109      	bne.n	8005d94 <HAL_TIM_PWM_Start+0x24>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	bf14      	ite	ne
 8005d8c:	2301      	movne	r3, #1
 8005d8e:	2300      	moveq	r3, #0
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	e022      	b.n	8005dda <HAL_TIM_PWM_Start+0x6a>
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d109      	bne.n	8005dae <HAL_TIM_PWM_Start+0x3e>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	bf14      	ite	ne
 8005da6:	2301      	movne	r3, #1
 8005da8:	2300      	moveq	r3, #0
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	e015      	b.n	8005dda <HAL_TIM_PWM_Start+0x6a>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d109      	bne.n	8005dc8 <HAL_TIM_PWM_Start+0x58>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	bf14      	ite	ne
 8005dc0:	2301      	movne	r3, #1
 8005dc2:	2300      	moveq	r3, #0
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	e008      	b.n	8005dda <HAL_TIM_PWM_Start+0x6a>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	bf14      	ite	ne
 8005dd4:	2301      	movne	r3, #1
 8005dd6:	2300      	moveq	r3, #0
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e05e      	b.n	8005ea0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d104      	bne.n	8005df2 <HAL_TIM_PWM_Start+0x82>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005df0:	e013      	b.n	8005e1a <HAL_TIM_PWM_Start+0xaa>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d104      	bne.n	8005e02 <HAL_TIM_PWM_Start+0x92>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e00:	e00b      	b.n	8005e1a <HAL_TIM_PWM_Start+0xaa>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d104      	bne.n	8005e12 <HAL_TIM_PWM_Start+0xa2>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e10:	e003      	b.n	8005e1a <HAL_TIM_PWM_Start+0xaa>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2202      	movs	r2, #2
 8005e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	6839      	ldr	r1, [r7, #0]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f001 f8af 	bl	8006f86 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a1e      	ldr	r2, [pc, #120]	; (8005ea8 <HAL_TIM_PWM_Start+0x138>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d107      	bne.n	8005e42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a18      	ldr	r2, [pc, #96]	; (8005ea8 <HAL_TIM_PWM_Start+0x138>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d00e      	beq.n	8005e6a <HAL_TIM_PWM_Start+0xfa>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e54:	d009      	beq.n	8005e6a <HAL_TIM_PWM_Start+0xfa>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a14      	ldr	r2, [pc, #80]	; (8005eac <HAL_TIM_PWM_Start+0x13c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d004      	beq.n	8005e6a <HAL_TIM_PWM_Start+0xfa>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a12      	ldr	r2, [pc, #72]	; (8005eb0 <HAL_TIM_PWM_Start+0x140>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d111      	bne.n	8005e8e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b06      	cmp	r3, #6
 8005e7a:	d010      	beq.n	8005e9e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e8c:	e007      	b.n	8005e9e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f042 0201 	orr.w	r2, r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	40012c00 	.word	0x40012c00
 8005eac:	40000400 	.word	0x40000400
 8005eb0:	40000800 	.word	0x40000800

08005eb4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e041      	b.n	8005f4a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d106      	bne.n	8005ee0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f839 	bl	8005f52 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	f000 fcba 	bl	800686c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bc80      	pop	{r7}
 8005f62:	4770      	bx	lr

08005f64 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d104      	bne.n	8005f7e <HAL_TIM_IC_Start_IT+0x1a>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	e013      	b.n	8005fa6 <HAL_TIM_IC_Start_IT+0x42>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d104      	bne.n	8005f8e <HAL_TIM_IC_Start_IT+0x2a>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	e00b      	b.n	8005fa6 <HAL_TIM_IC_Start_IT+0x42>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d104      	bne.n	8005f9e <HAL_TIM_IC_Start_IT+0x3a>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	e003      	b.n	8005fa6 <HAL_TIM_IC_Start_IT+0x42>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d104      	bne.n	8005fb8 <HAL_TIM_IC_Start_IT+0x54>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	e013      	b.n	8005fe0 <HAL_TIM_IC_Start_IT+0x7c>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d104      	bne.n	8005fc8 <HAL_TIM_IC_Start_IT+0x64>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	e00b      	b.n	8005fe0 <HAL_TIM_IC_Start_IT+0x7c>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2b08      	cmp	r3, #8
 8005fcc:	d104      	bne.n	8005fd8 <HAL_TIM_IC_Start_IT+0x74>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	e003      	b.n	8005fe0 <HAL_TIM_IC_Start_IT+0x7c>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d102      	bne.n	8005fee <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fe8:	7bbb      	ldrb	r3, [r7, #14]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d001      	beq.n	8005ff2 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e0b3      	b.n	800615a <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d104      	bne.n	8006002 <HAL_TIM_IC_Start_IT+0x9e>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006000:	e013      	b.n	800602a <HAL_TIM_IC_Start_IT+0xc6>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b04      	cmp	r3, #4
 8006006:	d104      	bne.n	8006012 <HAL_TIM_IC_Start_IT+0xae>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006010:	e00b      	b.n	800602a <HAL_TIM_IC_Start_IT+0xc6>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b08      	cmp	r3, #8
 8006016:	d104      	bne.n	8006022 <HAL_TIM_IC_Start_IT+0xbe>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006020:	e003      	b.n	800602a <HAL_TIM_IC_Start_IT+0xc6>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2202      	movs	r2, #2
 8006026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d104      	bne.n	800603a <HAL_TIM_IC_Start_IT+0xd6>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006038:	e013      	b.n	8006062 <HAL_TIM_IC_Start_IT+0xfe>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b04      	cmp	r3, #4
 800603e:	d104      	bne.n	800604a <HAL_TIM_IC_Start_IT+0xe6>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2202      	movs	r2, #2
 8006044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006048:	e00b      	b.n	8006062 <HAL_TIM_IC_Start_IT+0xfe>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b08      	cmp	r3, #8
 800604e:	d104      	bne.n	800605a <HAL_TIM_IC_Start_IT+0xf6>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006058:	e003      	b.n	8006062 <HAL_TIM_IC_Start_IT+0xfe>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2202      	movs	r2, #2
 800605e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b0c      	cmp	r3, #12
 8006066:	d841      	bhi.n	80060ec <HAL_TIM_IC_Start_IT+0x188>
 8006068:	a201      	add	r2, pc, #4	; (adr r2, 8006070 <HAL_TIM_IC_Start_IT+0x10c>)
 800606a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606e:	bf00      	nop
 8006070:	080060a5 	.word	0x080060a5
 8006074:	080060ed 	.word	0x080060ed
 8006078:	080060ed 	.word	0x080060ed
 800607c:	080060ed 	.word	0x080060ed
 8006080:	080060b7 	.word	0x080060b7
 8006084:	080060ed 	.word	0x080060ed
 8006088:	080060ed 	.word	0x080060ed
 800608c:	080060ed 	.word	0x080060ed
 8006090:	080060c9 	.word	0x080060c9
 8006094:	080060ed 	.word	0x080060ed
 8006098:	080060ed 	.word	0x080060ed
 800609c:	080060ed 	.word	0x080060ed
 80060a0:	080060db 	.word	0x080060db
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0202 	orr.w	r2, r2, #2
 80060b2:	60da      	str	r2, [r3, #12]
      break;
 80060b4:	e01b      	b.n	80060ee <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68da      	ldr	r2, [r3, #12]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f042 0204 	orr.w	r2, r2, #4
 80060c4:	60da      	str	r2, [r3, #12]
      break;
 80060c6:	e012      	b.n	80060ee <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68da      	ldr	r2, [r3, #12]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0208 	orr.w	r2, r2, #8
 80060d6:	60da      	str	r2, [r3, #12]
      break;
 80060d8:	e009      	b.n	80060ee <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f042 0210 	orr.w	r2, r2, #16
 80060e8:	60da      	str	r2, [r3, #12]
      break;
 80060ea:	e000      	b.n	80060ee <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80060ec:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2201      	movs	r2, #1
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 ff45 	bl	8006f86 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a18      	ldr	r2, [pc, #96]	; (8006164 <HAL_TIM_IC_Start_IT+0x200>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d00e      	beq.n	8006124 <HAL_TIM_IC_Start_IT+0x1c0>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610e:	d009      	beq.n	8006124 <HAL_TIM_IC_Start_IT+0x1c0>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a14      	ldr	r2, [pc, #80]	; (8006168 <HAL_TIM_IC_Start_IT+0x204>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d004      	beq.n	8006124 <HAL_TIM_IC_Start_IT+0x1c0>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a13      	ldr	r2, [pc, #76]	; (800616c <HAL_TIM_IC_Start_IT+0x208>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d111      	bne.n	8006148 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f003 0307 	and.w	r3, r3, #7
 800612e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b06      	cmp	r3, #6
 8006134:	d010      	beq.n	8006158 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f042 0201 	orr.w	r2, r2, #1
 8006144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006146:	e007      	b.n	8006158 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0201 	orr.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	40012c00 	.word	0x40012c00
 8006168:	40000400 	.word	0x40000400
 800616c:	40000800 	.word	0x40000800

08006170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b02      	cmp	r3, #2
 8006184:	d122      	bne.n	80061cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b02      	cmp	r3, #2
 8006192:	d11b      	bne.n	80061cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f06f 0202 	mvn.w	r2, #2
 800619c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7fc fb64 	bl	8002880 <HAL_TIM_IC_CaptureCallback>
 80061b8:	e005      	b.n	80061c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fb3a 	bl	8006834 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fb40 	bl	8006846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	f003 0304 	and.w	r3, r3, #4
 80061d6:	2b04      	cmp	r3, #4
 80061d8:	d122      	bne.n	8006220 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b04      	cmp	r3, #4
 80061e6:	d11b      	bne.n	8006220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f06f 0204 	mvn.w	r2, #4
 80061f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2202      	movs	r2, #2
 80061f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7fc fb3a 	bl	8002880 <HAL_TIM_IC_CaptureCallback>
 800620c:	e005      	b.n	800621a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fb10 	bl	8006834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fb16 	bl	8006846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f003 0308 	and.w	r3, r3, #8
 800622a:	2b08      	cmp	r3, #8
 800622c:	d122      	bne.n	8006274 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f003 0308 	and.w	r3, r3, #8
 8006238:	2b08      	cmp	r3, #8
 800623a:	d11b      	bne.n	8006274 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f06f 0208 	mvn.w	r2, #8
 8006244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2204      	movs	r2, #4
 800624a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fc fb10 	bl	8002880 <HAL_TIM_IC_CaptureCallback>
 8006260:	e005      	b.n	800626e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fae6 	bl	8006834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 faec 	bl	8006846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f003 0310 	and.w	r3, r3, #16
 800627e:	2b10      	cmp	r3, #16
 8006280:	d122      	bne.n	80062c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f003 0310 	and.w	r3, r3, #16
 800628c:	2b10      	cmp	r3, #16
 800628e:	d11b      	bne.n	80062c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f06f 0210 	mvn.w	r2, #16
 8006298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2208      	movs	r2, #8
 800629e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7fc fae6 	bl	8002880 <HAL_TIM_IC_CaptureCallback>
 80062b4:	e005      	b.n	80062c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fabc 	bl	8006834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fac2 	bl	8006846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d10e      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d107      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f06f 0201 	mvn.w	r2, #1
 80062ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fc f8a6 	bl	8002440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062fe:	2b80      	cmp	r3, #128	; 0x80
 8006300:	d10e      	bne.n	8006320 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630c:	2b80      	cmp	r3, #128	; 0x80
 800630e:	d107      	bne.n	8006320 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 ff10 	bl	8007140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632a:	2b40      	cmp	r3, #64	; 0x40
 800632c:	d10e      	bne.n	800634c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006338:	2b40      	cmp	r3, #64	; 0x40
 800633a:	d107      	bne.n	800634c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fa86 	bl	8006858 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f003 0320 	and.w	r3, r3, #32
 8006356:	2b20      	cmp	r3, #32
 8006358:	d10e      	bne.n	8006378 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b20      	cmp	r3, #32
 8006366:	d107      	bne.n	8006378 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f06f 0220 	mvn.w	r2, #32
 8006370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fedb 	bl	800712e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006378:	bf00      	nop
 800637a:	3708      	adds	r7, #8
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006392:	2b01      	cmp	r3, #1
 8006394:	d101      	bne.n	800639a <HAL_TIM_IC_ConfigChannel+0x1a>
 8006396:	2302      	movs	r3, #2
 8006398:	e082      	b.n	80064a0 <HAL_TIM_IC_ConfigChannel+0x120>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d11b      	bne.n	80063e0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6818      	ldr	r0, [r3, #0]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	6819      	ldr	r1, [r3, #0]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f000 fc42 	bl	8006c40 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699a      	ldr	r2, [r3, #24]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 020c 	bic.w	r2, r2, #12
 80063ca:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6999      	ldr	r1, [r3, #24]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	689a      	ldr	r2, [r3, #8]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	619a      	str	r2, [r3, #24]
 80063de:	e05a      	b.n	8006496 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d11c      	bne.n	8006420 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6818      	ldr	r0, [r3, #0]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	6819      	ldr	r1, [r3, #0]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f000 fcab 	bl	8006d50 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	699a      	ldr	r2, [r3, #24]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006408:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6999      	ldr	r1, [r3, #24]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	021a      	lsls	r2, r3, #8
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	619a      	str	r2, [r3, #24]
 800641e:	e03a      	b.n	8006496 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b08      	cmp	r3, #8
 8006424:	d11b      	bne.n	800645e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6818      	ldr	r0, [r3, #0]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	6819      	ldr	r1, [r3, #0]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f000 fcf6 	bl	8006e26 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69da      	ldr	r2, [r3, #28]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 020c 	bic.w	r2, r2, #12
 8006448:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69d9      	ldr	r1, [r3, #28]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	61da      	str	r2, [r3, #28]
 800645c:	e01b      	b.n	8006496 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	6819      	ldr	r1, [r3, #0]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f000 fd15 	bl	8006e9c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69da      	ldr	r2, [r3, #28]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006480:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69d9      	ldr	r1, [r3, #28]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	021a      	lsls	r2, r3, #8
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	430a      	orrs	r2, r1
 8006494:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d101      	bne.n	80064c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80064be:	2302      	movs	r3, #2
 80064c0:	e0ac      	b.n	800661c <HAL_TIM_PWM_ConfigChannel+0x174>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b0c      	cmp	r3, #12
 80064ce:	f200 809f 	bhi.w	8006610 <HAL_TIM_PWM_ConfigChannel+0x168>
 80064d2:	a201      	add	r2, pc, #4	; (adr r2, 80064d8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80064d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d8:	0800650d 	.word	0x0800650d
 80064dc:	08006611 	.word	0x08006611
 80064e0:	08006611 	.word	0x08006611
 80064e4:	08006611 	.word	0x08006611
 80064e8:	0800654d 	.word	0x0800654d
 80064ec:	08006611 	.word	0x08006611
 80064f0:	08006611 	.word	0x08006611
 80064f4:	08006611 	.word	0x08006611
 80064f8:	0800658f 	.word	0x0800658f
 80064fc:	08006611 	.word	0x08006611
 8006500:	08006611 	.word	0x08006611
 8006504:	08006611 	.word	0x08006611
 8006508:	080065cf 	.word	0x080065cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68b9      	ldr	r1, [r7, #8]
 8006512:	4618      	mov	r0, r3
 8006514:	f000 fa0c 	bl	8006930 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699a      	ldr	r2, [r3, #24]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f042 0208 	orr.w	r2, r2, #8
 8006526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699a      	ldr	r2, [r3, #24]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 0204 	bic.w	r2, r2, #4
 8006536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6999      	ldr	r1, [r3, #24]
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	691a      	ldr	r2, [r3, #16]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	619a      	str	r2, [r3, #24]
      break;
 800654a:	e062      	b.n	8006612 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68b9      	ldr	r1, [r7, #8]
 8006552:	4618      	mov	r0, r3
 8006554:	f000 fa52 	bl	80069fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699a      	ldr	r2, [r3, #24]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	699a      	ldr	r2, [r3, #24]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6999      	ldr	r1, [r3, #24]
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	021a      	lsls	r2, r3, #8
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	619a      	str	r2, [r3, #24]
      break;
 800658c:	e041      	b.n	8006612 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68b9      	ldr	r1, [r7, #8]
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fa9b 	bl	8006ad0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69da      	ldr	r2, [r3, #28]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f042 0208 	orr.w	r2, r2, #8
 80065a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69da      	ldr	r2, [r3, #28]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 0204 	bic.w	r2, r2, #4
 80065b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69d9      	ldr	r1, [r3, #28]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	61da      	str	r2, [r3, #28]
      break;
 80065cc:	e021      	b.n	8006612 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68b9      	ldr	r1, [r7, #8]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 fae5 	bl	8006ba4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69da      	ldr	r2, [r3, #28]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	69da      	ldr	r2, [r3, #28]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	69d9      	ldr	r1, [r3, #28]
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	021a      	lsls	r2, r3, #8
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	61da      	str	r2, [r3, #28]
      break;
 800660e:	e000      	b.n	8006612 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006610:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006634:	2b01      	cmp	r3, #1
 8006636:	d101      	bne.n	800663c <HAL_TIM_ConfigClockSource+0x18>
 8006638:	2302      	movs	r3, #2
 800663a:	e0b3      	b.n	80067a4 <HAL_TIM_ConfigClockSource+0x180>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800665a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006662:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006674:	d03e      	beq.n	80066f4 <HAL_TIM_ConfigClockSource+0xd0>
 8006676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800667a:	f200 8087 	bhi.w	800678c <HAL_TIM_ConfigClockSource+0x168>
 800667e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006682:	f000 8085 	beq.w	8006790 <HAL_TIM_ConfigClockSource+0x16c>
 8006686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800668a:	d87f      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x168>
 800668c:	2b70      	cmp	r3, #112	; 0x70
 800668e:	d01a      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0xa2>
 8006690:	2b70      	cmp	r3, #112	; 0x70
 8006692:	d87b      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x168>
 8006694:	2b60      	cmp	r3, #96	; 0x60
 8006696:	d050      	beq.n	800673a <HAL_TIM_ConfigClockSource+0x116>
 8006698:	2b60      	cmp	r3, #96	; 0x60
 800669a:	d877      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x168>
 800669c:	2b50      	cmp	r3, #80	; 0x50
 800669e:	d03c      	beq.n	800671a <HAL_TIM_ConfigClockSource+0xf6>
 80066a0:	2b50      	cmp	r3, #80	; 0x50
 80066a2:	d873      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x168>
 80066a4:	2b40      	cmp	r3, #64	; 0x40
 80066a6:	d058      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x136>
 80066a8:	2b40      	cmp	r3, #64	; 0x40
 80066aa:	d86f      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x168>
 80066ac:	2b30      	cmp	r3, #48	; 0x30
 80066ae:	d064      	beq.n	800677a <HAL_TIM_ConfigClockSource+0x156>
 80066b0:	2b30      	cmp	r3, #48	; 0x30
 80066b2:	d86b      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x168>
 80066b4:	2b20      	cmp	r3, #32
 80066b6:	d060      	beq.n	800677a <HAL_TIM_ConfigClockSource+0x156>
 80066b8:	2b20      	cmp	r3, #32
 80066ba:	d867      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x168>
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d05c      	beq.n	800677a <HAL_TIM_ConfigClockSource+0x156>
 80066c0:	2b10      	cmp	r3, #16
 80066c2:	d05a      	beq.n	800677a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80066c4:	e062      	b.n	800678c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6818      	ldr	r0, [r3, #0]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	6899      	ldr	r1, [r3, #8]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f000 fc37 	bl	8006f48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	609a      	str	r2, [r3, #8]
      break;
 80066f2:	e04e      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6818      	ldr	r0, [r3, #0]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	6899      	ldr	r1, [r3, #8]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f000 fc20 	bl	8006f48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006716:	609a      	str	r2, [r3, #8]
      break;
 8006718:	e03b      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6818      	ldr	r0, [r3, #0]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	6859      	ldr	r1, [r3, #4]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	461a      	mov	r2, r3
 8006728:	f000 fae4 	bl	8006cf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2150      	movs	r1, #80	; 0x50
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fbee 	bl	8006f14 <TIM_ITRx_SetConfig>
      break;
 8006738:	e02b      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	6859      	ldr	r1, [r3, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	461a      	mov	r2, r3
 8006748:	f000 fb3e 	bl	8006dc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2160      	movs	r1, #96	; 0x60
 8006752:	4618      	mov	r0, r3
 8006754:	f000 fbde 	bl	8006f14 <TIM_ITRx_SetConfig>
      break;
 8006758:	e01b      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6818      	ldr	r0, [r3, #0]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	6859      	ldr	r1, [r3, #4]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	461a      	mov	r2, r3
 8006768:	f000 fac4 	bl	8006cf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2140      	movs	r1, #64	; 0x40
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fbce 	bl	8006f14 <TIM_ITRx_SetConfig>
      break;
 8006778:	e00b      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4619      	mov	r1, r3
 8006784:	4610      	mov	r0, r2
 8006786:	f000 fbc5 	bl	8006f14 <TIM_ITRx_SetConfig>
        break;
 800678a:	e002      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800678c:	bf00      	nop
 800678e:	e000      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006790:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	60fb      	str	r3, [r7, #12]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b0c      	cmp	r3, #12
 80067be:	d831      	bhi.n	8006824 <HAL_TIM_ReadCapturedValue+0x78>
 80067c0:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80067c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c6:	bf00      	nop
 80067c8:	080067fd 	.word	0x080067fd
 80067cc:	08006825 	.word	0x08006825
 80067d0:	08006825 	.word	0x08006825
 80067d4:	08006825 	.word	0x08006825
 80067d8:	08006807 	.word	0x08006807
 80067dc:	08006825 	.word	0x08006825
 80067e0:	08006825 	.word	0x08006825
 80067e4:	08006825 	.word	0x08006825
 80067e8:	08006811 	.word	0x08006811
 80067ec:	08006825 	.word	0x08006825
 80067f0:	08006825 	.word	0x08006825
 80067f4:	08006825 	.word	0x08006825
 80067f8:	0800681b 	.word	0x0800681b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006802:	60fb      	str	r3, [r7, #12]

      break;
 8006804:	e00f      	b.n	8006826 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	60fb      	str	r3, [r7, #12]

      break;
 800680e:	e00a      	b.n	8006826 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006816:	60fb      	str	r3, [r7, #12]

      break;
 8006818:	e005      	b.n	8006826 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	60fb      	str	r3, [r7, #12]

      break;
 8006822:	e000      	b.n	8006826 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006824:	bf00      	nop
  }

  return tmpreg;
 8006826:	68fb      	ldr	r3, [r7, #12]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	bc80      	pop	{r7}
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop

08006834 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	bc80      	pop	{r7}
 8006844:	4770      	bx	lr

08006846 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800684e:	bf00      	nop
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	bc80      	pop	{r7}
 8006856:	4770      	bx	lr

08006858 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	bc80      	pop	{r7}
 8006868:	4770      	bx	lr
	...

0800686c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a29      	ldr	r2, [pc, #164]	; (8006924 <TIM_Base_SetConfig+0xb8>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d00b      	beq.n	800689c <TIM_Base_SetConfig+0x30>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800688a:	d007      	beq.n	800689c <TIM_Base_SetConfig+0x30>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a26      	ldr	r2, [pc, #152]	; (8006928 <TIM_Base_SetConfig+0xbc>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d003      	beq.n	800689c <TIM_Base_SetConfig+0x30>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a25      	ldr	r2, [pc, #148]	; (800692c <TIM_Base_SetConfig+0xc0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d108      	bne.n	80068ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a1c      	ldr	r2, [pc, #112]	; (8006924 <TIM_Base_SetConfig+0xb8>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d00b      	beq.n	80068ce <TIM_Base_SetConfig+0x62>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068bc:	d007      	beq.n	80068ce <TIM_Base_SetConfig+0x62>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a19      	ldr	r2, [pc, #100]	; (8006928 <TIM_Base_SetConfig+0xbc>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d003      	beq.n	80068ce <TIM_Base_SetConfig+0x62>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a18      	ldr	r2, [pc, #96]	; (800692c <TIM_Base_SetConfig+0xc0>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d108      	bne.n	80068e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	4313      	orrs	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a07      	ldr	r2, [pc, #28]	; (8006924 <TIM_Base_SetConfig+0xb8>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d103      	bne.n	8006914 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	691a      	ldr	r2, [r3, #16]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	615a      	str	r2, [r3, #20]
}
 800691a:	bf00      	nop
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	bc80      	pop	{r7}
 8006922:	4770      	bx	lr
 8006924:	40012c00 	.word	0x40012c00
 8006928:	40000400 	.word	0x40000400
 800692c:	40000800 	.word	0x40000800

08006930 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	f023 0201 	bic.w	r2, r3, #1
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800695e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0303 	bic.w	r3, r3, #3
 8006966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f023 0302 	bic.w	r3, r3, #2
 8006978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	4313      	orrs	r3, r2
 8006982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a1c      	ldr	r2, [pc, #112]	; (80069f8 <TIM_OC1_SetConfig+0xc8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d10c      	bne.n	80069a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f023 0308 	bic.w	r3, r3, #8
 8006992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f023 0304 	bic.w	r3, r3, #4
 80069a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a13      	ldr	r2, [pc, #76]	; (80069f8 <TIM_OC1_SetConfig+0xc8>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d111      	bne.n	80069d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	621a      	str	r2, [r3, #32]
}
 80069ec:	bf00      	nop
 80069ee:	371c      	adds	r7, #28
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bc80      	pop	{r7}
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	40012c00 	.word	0x40012c00

080069fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	f023 0210 	bic.w	r2, r3, #16
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	021b      	lsls	r3, r3, #8
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f023 0320 	bic.w	r3, r3, #32
 8006a46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	011b      	lsls	r3, r3, #4
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a1d      	ldr	r2, [pc, #116]	; (8006acc <TIM_OC2_SetConfig+0xd0>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d10d      	bne.n	8006a78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	011b      	lsls	r3, r3, #4
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a14      	ldr	r2, [pc, #80]	; (8006acc <TIM_OC2_SetConfig+0xd0>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d113      	bne.n	8006aa8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	621a      	str	r2, [r3, #32]
}
 8006ac2:	bf00      	nop
 8006ac4:	371c      	adds	r7, #28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bc80      	pop	{r7}
 8006aca:	4770      	bx	lr
 8006acc:	40012c00 	.word	0x40012c00

08006ad0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f023 0303 	bic.w	r3, r3, #3
 8006b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	021b      	lsls	r3, r3, #8
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a1d      	ldr	r2, [pc, #116]	; (8006ba0 <TIM_OC3_SetConfig+0xd0>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d10d      	bne.n	8006b4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	021b      	lsls	r3, r3, #8
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a14      	ldr	r2, [pc, #80]	; (8006ba0 <TIM_OC3_SetConfig+0xd0>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d113      	bne.n	8006b7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	011b      	lsls	r3, r3, #4
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	011b      	lsls	r3, r3, #4
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	621a      	str	r2, [r3, #32]
}
 8006b94:	bf00      	nop
 8006b96:	371c      	adds	r7, #28
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bc80      	pop	{r7}
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	40012c00 	.word	0x40012c00

08006ba4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	021b      	lsls	r3, r3, #8
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	031b      	lsls	r3, r3, #12
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a0f      	ldr	r2, [pc, #60]	; (8006c3c <TIM_OC4_SetConfig+0x98>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d109      	bne.n	8006c18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	019b      	lsls	r3, r3, #6
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	621a      	str	r2, [r3, #32]
}
 8006c32:	bf00      	nop
 8006c34:	371c      	adds	r7, #28
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bc80      	pop	{r7}
 8006c3a:	4770      	bx	lr
 8006c3c:	40012c00 	.word	0x40012c00

08006c40 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	f023 0201 	bic.w	r2, r3, #1
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	4a1f      	ldr	r2, [pc, #124]	; (8006ce8 <TIM_TI1_SetConfig+0xa8>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d00b      	beq.n	8006c86 <TIM_TI1_SetConfig+0x46>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c74:	d007      	beq.n	8006c86 <TIM_TI1_SetConfig+0x46>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4a1c      	ldr	r2, [pc, #112]	; (8006cec <TIM_TI1_SetConfig+0xac>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d003      	beq.n	8006c86 <TIM_TI1_SetConfig+0x46>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	4a1b      	ldr	r2, [pc, #108]	; (8006cf0 <TIM_TI1_SetConfig+0xb0>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d101      	bne.n	8006c8a <TIM_TI1_SetConfig+0x4a>
 8006c86:	2301      	movs	r3, #1
 8006c88:	e000      	b.n	8006c8c <TIM_TI1_SetConfig+0x4c>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d008      	beq.n	8006ca2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f023 0303 	bic.w	r3, r3, #3
 8006c96:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]
 8006ca0:	e003      	b.n	8006caa <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f043 0301 	orr.w	r3, r3, #1
 8006ca8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	f023 030a 	bic.w	r3, r3, #10
 8006cc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	f003 030a 	and.w	r3, r3, #10
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	621a      	str	r2, [r3, #32]
}
 8006cde:	bf00      	nop
 8006ce0:	371c      	adds	r7, #28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bc80      	pop	{r7}
 8006ce6:	4770      	bx	lr
 8006ce8:	40012c00 	.word	0x40012c00
 8006cec:	40000400 	.word	0x40000400
 8006cf0:	40000800 	.word	0x40000800

08006cf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	f023 0201 	bic.w	r2, r3, #1
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f023 030a 	bic.w	r3, r3, #10
 8006d30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	621a      	str	r2, [r3, #32]
}
 8006d46:	bf00      	nop
 8006d48:	371c      	adds	r7, #28
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bc80      	pop	{r7}
 8006d4e:	4770      	bx	lr

08006d50 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b087      	sub	sp, #28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
 8006d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	f023 0210 	bic.w	r2, r3, #16
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6a1b      	ldr	r3, [r3, #32]
 8006d74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	021b      	lsls	r3, r3, #8
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	031b      	lsls	r3, r3, #12
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006da2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	011b      	lsls	r3, r3, #4
 8006da8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	621a      	str	r2, [r3, #32]
}
 8006dbe:	bf00      	nop
 8006dc0:	371c      	adds	r7, #28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bc80      	pop	{r7}
 8006dc6:	4770      	bx	lr

08006dc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	f023 0210 	bic.w	r2, r3, #16
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006df2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	031b      	lsls	r3, r3, #12
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	011b      	lsls	r3, r3, #4
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	621a      	str	r2, [r3, #32]
}
 8006e1c:	bf00      	nop
 8006e1e:	371c      	adds	r7, #28
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bc80      	pop	{r7}
 8006e24:	4770      	bx	lr

08006e26 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b087      	sub	sp, #28
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	60f8      	str	r0, [r7, #12]
 8006e2e:	60b9      	str	r1, [r7, #8]
 8006e30:	607a      	str	r2, [r7, #4]
 8006e32:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f023 0303 	bic.w	r3, r3, #3
 8006e52:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e62:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	011b      	lsls	r3, r3, #4
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e76:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	021b      	lsls	r3, r3, #8
 8006e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	621a      	str	r2, [r3, #32]
}
 8006e92:	bf00      	nop
 8006e94:	371c      	adds	r7, #28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bc80      	pop	{r7}
 8006e9a:	4770      	bx	lr

08006e9c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
 8006ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ec8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	021b      	lsls	r3, r3, #8
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006eda:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	031b      	lsls	r3, r3, #12
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006eee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	031b      	lsls	r3, r3, #12
 8006ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	621a      	str	r2, [r3, #32]
}
 8006f0a:	bf00      	nop
 8006f0c:	371c      	adds	r7, #28
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bc80      	pop	{r7}
 8006f12:	4770      	bx	lr

08006f14 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	f043 0307 	orr.w	r3, r3, #7
 8006f36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	609a      	str	r2, [r3, #8]
}
 8006f3e:	bf00      	nop
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bc80      	pop	{r7}
 8006f46:	4770      	bx	lr

08006f48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b087      	sub	sp, #28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
 8006f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	021a      	lsls	r2, r3, #8
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	609a      	str	r2, [r3, #8]
}
 8006f7c:	bf00      	nop
 8006f7e:	371c      	adds	r7, #28
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bc80      	pop	{r7}
 8006f84:	4770      	bx	lr

08006f86 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b087      	sub	sp, #28
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	60f8      	str	r0, [r7, #12]
 8006f8e:	60b9      	str	r1, [r7, #8]
 8006f90:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	f003 031f 	and.w	r3, r3, #31
 8006f98:	2201      	movs	r2, #1
 8006f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a1a      	ldr	r2, [r3, #32]
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	43db      	mvns	r3, r3
 8006fa8:	401a      	ands	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6a1a      	ldr	r2, [r3, #32]
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	f003 031f 	and.w	r3, r3, #31
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	fa01 f303 	lsl.w	r3, r1, r3
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	621a      	str	r2, [r3, #32]
}
 8006fc4:	bf00      	nop
 8006fc6:	371c      	adds	r7, #28
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bc80      	pop	{r7}
 8006fcc:	4770      	bx	lr
	...

08006fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d101      	bne.n	8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e046      	b.n	8007076 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a16      	ldr	r2, [pc, #88]	; (8007080 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d00e      	beq.n	800704a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007034:	d009      	beq.n	800704a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a12      	ldr	r2, [pc, #72]	; (8007084 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d004      	beq.n	800704a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a10      	ldr	r2, [pc, #64]	; (8007088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d10c      	bne.n	8007064 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	4313      	orrs	r3, r2
 800705a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	bc80      	pop	{r7}
 800707e:	4770      	bx	lr
 8007080:	40012c00 	.word	0x40012c00
 8007084:	40000400 	.word	0x40000400
 8007088:	40000800 	.word	0x40000800

0800708c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d101      	bne.n	80070a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070a4:	2302      	movs	r3, #2
 80070a6:	e03d      	b.n	8007124 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	4313      	orrs	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	bc80      	pop	{r7}
 800712c:	4770      	bx	lr

0800712e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800712e:	b480      	push	{r7}
 8007130:	b083      	sub	sp, #12
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007136:	bf00      	nop
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	bc80      	pop	{r7}
 800713e:	4770      	bx	lr

08007140 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	bc80      	pop	{r7}
 8007150:	4770      	bx	lr

08007152 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b082      	sub	sp, #8
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e03f      	b.n	80071e4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d106      	bne.n	800717e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7fb ffa1 	bl	80030c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2224      	movs	r2, #36	; 0x24
 8007182:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007194:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f904 	bl	80073a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	691a      	ldr	r2, [r3, #16]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	695a      	ldr	r2, [r3, #20]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2220      	movs	r2, #32
 80071de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08a      	sub	sp, #40	; 0x28
 80071f0:	af02      	add	r7, sp, #8
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	603b      	str	r3, [r7, #0]
 80071f8:	4613      	mov	r3, r2
 80071fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b20      	cmp	r3, #32
 800720a:	d17c      	bne.n	8007306 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <HAL_UART_Transmit+0x2c>
 8007212:	88fb      	ldrh	r3, [r7, #6]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e075      	b.n	8007308 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007222:	2b01      	cmp	r3, #1
 8007224:	d101      	bne.n	800722a <HAL_UART_Transmit+0x3e>
 8007226:	2302      	movs	r3, #2
 8007228:	e06e      	b.n	8007308 <HAL_UART_Transmit+0x11c>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2221      	movs	r2, #33	; 0x21
 800723c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007240:	f7fc f8a0 	bl	8003384 <HAL_GetTick>
 8007244:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	88fa      	ldrh	r2, [r7, #6]
 800724a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	88fa      	ldrh	r2, [r7, #6]
 8007250:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800725a:	d108      	bne.n	800726e <HAL_UART_Transmit+0x82>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d104      	bne.n	800726e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007264:	2300      	movs	r3, #0
 8007266:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	61bb      	str	r3, [r7, #24]
 800726c:	e003      	b.n	8007276 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007272:	2300      	movs	r3, #0
 8007274:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800727e:	e02a      	b.n	80072d6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	2200      	movs	r2, #0
 8007288:	2180      	movs	r1, #128	; 0x80
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 f840 	bl	8007310 <UART_WaitOnFlagUntilTimeout>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e036      	b.n	8007308 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10b      	bne.n	80072b8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	461a      	mov	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072ae:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	3302      	adds	r3, #2
 80072b4:	61bb      	str	r3, [r7, #24]
 80072b6:	e007      	b.n	80072c8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	781a      	ldrb	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	3301      	adds	r3, #1
 80072c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072da:	b29b      	uxth	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1cf      	bne.n	8007280 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2200      	movs	r2, #0
 80072e8:	2140      	movs	r1, #64	; 0x40
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 f810 	bl	8007310 <UART_WaitOnFlagUntilTimeout>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e006      	b.n	8007308 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2220      	movs	r2, #32
 80072fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	e000      	b.n	8007308 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007306:	2302      	movs	r3, #2
  }
}
 8007308:	4618      	mov	r0, r3
 800730a:	3720      	adds	r7, #32
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	603b      	str	r3, [r7, #0]
 800731c:	4613      	mov	r3, r2
 800731e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007320:	e02c      	b.n	800737c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007328:	d028      	beq.n	800737c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d007      	beq.n	8007340 <UART_WaitOnFlagUntilTimeout+0x30>
 8007330:	f7fc f828 	bl	8003384 <HAL_GetTick>
 8007334:	4602      	mov	r2, r0
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	69ba      	ldr	r2, [r7, #24]
 800733c:	429a      	cmp	r2, r3
 800733e:	d21d      	bcs.n	800737c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68da      	ldr	r2, [r3, #12]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800734e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	695a      	ldr	r2, [r3, #20]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0201 	bic.w	r2, r2, #1
 800735e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2220      	movs	r2, #32
 8007364:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2220      	movs	r2, #32
 800736c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e00f      	b.n	800739c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	4013      	ands	r3, r2
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	429a      	cmp	r2, r3
 800738a:	bf0c      	ite	eq
 800738c:	2301      	moveq	r3, #1
 800738e:	2300      	movne	r3, #0
 8007390:	b2db      	uxtb	r3, r3
 8007392:	461a      	mov	r2, r3
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	429a      	cmp	r2, r3
 8007398:	d0c3      	beq.n	8007322 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68da      	ldr	r2, [r3, #12]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	689a      	ldr	r2, [r3, #8]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	431a      	orrs	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80073de:	f023 030c 	bic.w	r3, r3, #12
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	6812      	ldr	r2, [r2, #0]
 80073e6:	68b9      	ldr	r1, [r7, #8]
 80073e8:	430b      	orrs	r3, r1
 80073ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	699a      	ldr	r2, [r3, #24]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a2c      	ldr	r2, [pc, #176]	; (80074b8 <UART_SetConfig+0x114>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d103      	bne.n	8007414 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800740c:	f7fe fb42 	bl	8005a94 <HAL_RCC_GetPCLK2Freq>
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	e002      	b.n	800741a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007414:	f7fe fb2a 	bl	8005a6c <HAL_RCC_GetPCLK1Freq>
 8007418:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	4613      	mov	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	009a      	lsls	r2, r3, #2
 8007424:	441a      	add	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007430:	4a22      	ldr	r2, [pc, #136]	; (80074bc <UART_SetConfig+0x118>)
 8007432:	fba2 2303 	umull	r2, r3, r2, r3
 8007436:	095b      	lsrs	r3, r3, #5
 8007438:	0119      	lsls	r1, r3, #4
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	4613      	mov	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	009a      	lsls	r2, r3, #2
 8007444:	441a      	add	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007450:	4b1a      	ldr	r3, [pc, #104]	; (80074bc <UART_SetConfig+0x118>)
 8007452:	fba3 0302 	umull	r0, r3, r3, r2
 8007456:	095b      	lsrs	r3, r3, #5
 8007458:	2064      	movs	r0, #100	; 0x64
 800745a:	fb00 f303 	mul.w	r3, r0, r3
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	011b      	lsls	r3, r3, #4
 8007462:	3332      	adds	r3, #50	; 0x32
 8007464:	4a15      	ldr	r2, [pc, #84]	; (80074bc <UART_SetConfig+0x118>)
 8007466:	fba2 2303 	umull	r2, r3, r2, r3
 800746a:	095b      	lsrs	r3, r3, #5
 800746c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007470:	4419      	add	r1, r3
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	4613      	mov	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	009a      	lsls	r2, r3, #2
 800747c:	441a      	add	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	fbb2 f2f3 	udiv	r2, r2, r3
 8007488:	4b0c      	ldr	r3, [pc, #48]	; (80074bc <UART_SetConfig+0x118>)
 800748a:	fba3 0302 	umull	r0, r3, r3, r2
 800748e:	095b      	lsrs	r3, r3, #5
 8007490:	2064      	movs	r0, #100	; 0x64
 8007492:	fb00 f303 	mul.w	r3, r0, r3
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	3332      	adds	r3, #50	; 0x32
 800749c:	4a07      	ldr	r2, [pc, #28]	; (80074bc <UART_SetConfig+0x118>)
 800749e:	fba2 2303 	umull	r2, r3, r2, r3
 80074a2:	095b      	lsrs	r3, r3, #5
 80074a4:	f003 020f 	and.w	r2, r3, #15
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	440a      	add	r2, r1
 80074ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80074b0:	bf00      	nop
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	40013800 	.word	0x40013800
 80074bc:	51eb851f 	.word	0x51eb851f

080074c0 <_ZN10ControllerC1Ev>:
    float angles[3];
    float rates[3];
    float bias[3];
};

Controller::Controller() {}
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a3d      	ldr	r2, [pc, #244]	; (80075c0 <_ZN10ControllerC1Ev+0x100>)
 80074cc:	651a      	str	r2, [r3, #80]	; 0x50
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a3c      	ldr	r2, [pc, #240]	; (80075c4 <_ZN10ControllerC1Ev+0x104>)
 80074d2:	655a      	str	r2, [r3, #84]	; 0x54
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	22c8      	movs	r2, #200	; 0xc8
 80074d8:	659a      	str	r2, [r3, #88]	; 0x58
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074de:	4618      	mov	r0, r3
 80074e0:	f7f9 fbd4 	bl	8000c8c <__aeabi_i2f>
 80074e4:	4603      	mov	r3, r0
 80074e6:	4619      	mov	r1, r3
 80074e8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80074ec:	f7f9 fcd6 	bl	8000e9c <__aeabi_fdiv>
 80074f0:	4603      	mov	r3, r0
 80074f2:	461a      	mov	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80074f8:	6879      	ldr	r1, [r7, #4]
 80074fa:	a329      	add	r3, pc, #164	; (adr r3, 80075a0 <_ZN10ControllerC1Ev+0xe0>)
 80074fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007500:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8007504:	6879      	ldr	r1, [r7, #4]
 8007506:	a328      	add	r3, pc, #160	; (adr r3, 80075a8 <_ZN10ControllerC1Ev+0xe8>)
 8007508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8007510:	6879      	ldr	r1, [r7, #4]
 8007512:	a327      	add	r3, pc, #156	; (adr r3, 80075b0 <_ZN10ControllerC1Ev+0xf0>)
 8007514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007518:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800753a:	6879      	ldr	r1, [r7, #4]
 800753c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 8007540:	6879      	ldr	r1, [r7, #4]
 8007542:	f04f 0200 	mov.w	r2, #0
 8007546:	4b20      	ldr	r3, [pc, #128]	; (80075c8 <_ZN10ControllerC1Ev+0x108>)
 8007548:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007550:	4618      	mov	r0, r3
 8007552:	f7f8 ff4f 	bl	80003f4 <__aeabi_i2d>
 8007556:	a318      	add	r3, pc, #96	; (adr r3, 80075b8 <_ZN10ControllerC1Ev+0xf8>)
 8007558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755c:	f7f8 ffb4 	bl	80004c8 <__aeabi_dmul>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4610      	mov	r0, r2
 8007566:	4619      	mov	r1, r3
 8007568:	f7f9 fa86 	bl	8000a78 <__aeabi_d2f>
 800756c:	4602      	mov	r2, r0
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	33d0      	adds	r3, #208	; 0xd0
 8007578:	4618      	mov	r0, r3
 800757a:	f001 fd0b 	bl	8008f94 <_ZN3PIDC1Ev>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007584:	4618      	mov	r0, r3
 8007586:	f001 fd05 	bl	8008f94 <_ZN3PIDC1Ev>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8007590:	4618      	mov	r0, r3
 8007592:	f001 fcff 	bl	8008f94 <_ZN3PIDC1Ev>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4618      	mov	r0, r3
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	33333333 	.word	0x33333333
 80075a4:	3fd33333 	.word	0x3fd33333
 80075a8:	1eb851ec 	.word	0x1eb851ec
 80075ac:	3fb1eb85 	.word	0x3fb1eb85
 80075b0:	47ae147b 	.word	0x47ae147b
 80075b4:	3f847ae1 	.word	0x3f847ae1
 80075b8:	eb851eb8 	.word	0xeb851eb8
 80075bc:	3f9eb851 	.word	0x3f9eb851
 80075c0:	44c1c000 	.word	0x44c1c000
 80075c4:	42654ca3 	.word	0x42654ca3
 80075c8:	401c0000 	.word	0x401c0000

080075cc <_ZN10Controller3RunE5stateS0_i>:

std::vector<double> Controller::Run (struct state state, struct state state_des, int thr) {
 80075cc:	b082      	sub	sp, #8
 80075ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d2:	b09f      	sub	sp, #124	; 0x7c
 80075d4:	af08      	add	r7, sp, #32
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80075de:	e881 000c 	stmia.w	r1, {r2, r3}
        //printf("\ngyroX: %.2f",gyro[0]);
        //printf("\naccX: %.2f",acc[0]);
        
        roll  = state.angles[0];
 80075e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7f8 ff16 	bl	8000418 <__aeabi_f2d>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	68b9      	ldr	r1, [r7, #8]
 80075f2:	e9c1 2304 	strd	r2, r3, [r1, #16]
        pitch = state.angles[1];
 80075f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7f8 ff0c 	bl	8000418 <__aeabi_f2d>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	68b9      	ldr	r1, [r7, #8]
 8007606:	e9c1 2306 	strd	r2, r3, [r1, #24]
        yaw    = state.angles[2];
 800760a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800760e:	4618      	mov	r0, r3
 8007610:	f7f8 ff02 	bl	8000418 <__aeabi_f2d>
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	68b9      	ldr	r1, [r7, #8]
 800761a:	e9c1 2308 	strd	r2, r3, [r1, #32]
        //printf("\nroll: %.2f",roll);
        //printf("\npitch: %.2f",pitch);

        roll_rate  = state.rates[0];
 800761e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007622:	4618      	mov	r0, r3
 8007624:	f7f8 fef8 	bl	8000418 <__aeabi_f2d>
 8007628:	4602      	mov	r2, r0
 800762a:	460b      	mov	r3, r1
 800762c:	68b9      	ldr	r1, [r7, #8]
 800762e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        pitch_rate = state.rates[1];
 8007632:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007636:	4618      	mov	r0, r3
 8007638:	f7f8 feee 	bl	8000418 <__aeabi_f2d>
 800763c:	4602      	mov	r2, r0
 800763e:	460b      	mov	r3, r1
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        yaw_rate   = state.rates[2];
 8007646:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800764a:	4618      	mov	r0, r3
 800764c:	f7f8 fee4 	bl	8000418 <__aeabi_f2d>
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	68b9      	ldr	r1, [r7, #8]
 8007656:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

        roll_bias = state.bias[0];
 800765a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	605a      	str	r2, [r3, #4]
        pitch_bias = state.bias[1];
 8007662:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	601a      	str	r2, [r3, #0]
        yaw_bias = state.bias[2];
 800766a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	609a      	str	r2, [r3, #8]
        
        float roll_des     = state_des.angles[0];
 8007672:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007676:	657b      	str	r3, [r7, #84]	; 0x54
        float pitch_des 	 = state_des.angles[1];
 8007678:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800767c:	653b      	str	r3, [r7, #80]	; 0x50
        float yaw_rate_des = state_des.rates[2];
 800767e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007682:	64fb      	str	r3, [r7, #76]	; 0x4c

    roll_rate_des = pid_roll.P_Angle(roll_des,roll, Kp_angle);
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	f103 06d0 	add.w	r6, r3, #208	; 0xd0
 800768a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800768c:	f7f8 fec4 	bl	8000418 <__aeabi_f2d>
 8007690:	4680      	mov	r8, r0
 8007692:	4689      	mov	r9, r1
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7f8 feb9 	bl	8000418 <__aeabi_f2d>
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076ae:	e9cd 4500 	strd	r4, r5, [sp]
 80076b2:	4642      	mov	r2, r8
 80076b4:	464b      	mov	r3, r9
 80076b6:	4630      	mov	r0, r6
 80076b8:	f001 fc9c 	bl	8008ff4 <_ZN3PID7P_AngleEddd>
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	4610      	mov	r0, r2
 80076c2:	4619      	mov	r1, r3
 80076c4:	f7f9 f9d8 	bl	8000a78 <__aeabi_d2f>
 80076c8:	4602      	mov	r2, r0
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    pitch_rate_des = pid_pitch.P_Angle(pitch_des,pitch, Kp_angle);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f503 76a0 	add.w	r6, r3, #320	; 0x140
 80076d6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80076d8:	f7f8 fe9e 	bl	8000418 <__aeabi_f2d>
 80076dc:	4680      	mov	r8, r0
 80076de:	4689      	mov	r9, r1
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7f8 fe93 	bl	8000418 <__aeabi_f2d>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076fa:	e9cd 4500 	strd	r4, r5, [sp]
 80076fe:	4642      	mov	r2, r8
 8007700:	464b      	mov	r3, r9
 8007702:	4630      	mov	r0, r6
 8007704:	f001 fc76 	bl	8008ff4 <_ZN3PID7P_AngleEddd>
 8007708:	4602      	mov	r2, r0
 800770a:	460b      	mov	r3, r1
 800770c:	4610      	mov	r0, r2
 800770e:	4619      	mov	r1, r3
 8007710:	f7f9 f9b2 	bl	8000a78 <__aeabi_d2f>
 8007714:	4602      	mov	r2, r0
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
/*
    //printf("\nroll_rate_des: %.2f",roll_rate_des);
    //printf("\npitch_rate_des: %.2f",pitch_rate_des);
    //printf("\nyaw_rate_des: %.2f",yaw_rate_des);
*/  //printf("\nroll_rate_des: %.2f",roll_rate_des);
    pd_roll  = pid_roll.PD_Rate(roll_rate_des,roll_rate, Kp_roll, Ki_roll, Kd_roll);
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	33d0      	adds	r3, #208	; 0xd0
 8007720:	607b      	str	r3, [r7, #4]
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007728:	4618      	mov	r0, r3
 800772a:	f7f8 fe75 	bl	8000418 <__aeabi_f2d>
 800772e:	4682      	mov	sl, r0
 8007730:	468b      	mov	fp, r1
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007738:	68b9      	ldr	r1, [r7, #8]
 800773a:	e9d1 0118 	ldrd	r0, r1, [r1, #96]	; 0x60
 800773e:	68bc      	ldr	r4, [r7, #8]
 8007740:	f104 0568 	add.w	r5, r4, #104	; 0x68
 8007744:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007748:	68be      	ldr	r6, [r7, #8]
 800774a:	e9d6 891c 	ldrd	r8, r9, [r6, #112]	; 0x70
 800774e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007752:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007756:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800775a:	e9cd 2300 	strd	r2, r3, [sp]
 800775e:	4652      	mov	r2, sl
 8007760:	465b      	mov	r3, fp
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f001 fc68 	bl	8009038 <_ZN3PID7PD_RateEddddd>
 8007768:	4602      	mov	r2, r0
 800776a:	460b      	mov	r3, r1
 800776c:	68b9      	ldr	r1, [r7, #8]
 800776e:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    //printf("\npitch_rate_des: %.2f",pitch_rate_des);
    pd_pitch = pid_pitch.PD_Rate(pitch_rate_des,pitch_rate,Kp_pitch,Ki_pitch,Kd_pitch);
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007778:	607b      	str	r3, [r7, #4]
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8007780:	4618      	mov	r0, r3
 8007782:	f7f8 fe49 	bl	8000418 <__aeabi_f2d>
 8007786:	4682      	mov	sl, r0
 8007788:	468b      	mov	fp, r1
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007790:	68b9      	ldr	r1, [r7, #8]
 8007792:	e9d1 011e 	ldrd	r0, r1, [r1, #120]	; 0x78
 8007796:	68bc      	ldr	r4, [r7, #8]
 8007798:	f104 0580 	add.w	r5, r4, #128	; 0x80
 800779c:	e9d5 4500 	ldrd	r4, r5, [r5]
 80077a0:	68be      	ldr	r6, [r7, #8]
 80077a2:	e9d6 8922 	ldrd	r8, r9, [r6, #136]	; 0x88
 80077a6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80077aa:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80077ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077b2:	e9cd 2300 	strd	r2, r3, [sp]
 80077b6:	4652      	mov	r2, sl
 80077b8:	465b      	mov	r3, fp
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f001 fc3c 	bl	8009038 <_ZN3PID7PD_RateEddddd>
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	68b9      	ldr	r1, [r7, #8]
 80077c6:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
    p_yaw    = pid_yaw.P_Rate_Yaw(yaw_rate_des,yaw_rate,Kp_yaw);
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	f503 76d8 	add.w	r6, r3, #432	; 0x1b0
 80077d0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80077d2:	f7f8 fe21 	bl	8000418 <__aeabi_f2d>
 80077d6:	4604      	mov	r4, r0
 80077d8:	460d      	mov	r5, r1
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80077e0:	68b9      	ldr	r1, [r7, #8]
 80077e2:	e9d1 0124 	ldrd	r0, r1, [r1, #144]	; 0x90
 80077e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077ea:	e9cd 2300 	strd	r2, r3, [sp]
 80077ee:	4622      	mov	r2, r4
 80077f0:	462b      	mov	r3, r5
 80077f2:	4630      	mov	r0, r6
 80077f4:	f001 fd69 	bl	80092ca <_ZN3PID10P_Rate_YawEddd>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	68b9      	ldr	r1, [r7, #8]
 80077fe:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
    //printf("\npd_pitch: %.2f",pd_pitch);
    //printf("\np_yaw: %.2f",p_yaw);

    ////printf("\nst: %.3f",st);

    thr = pid_roll.Sat(thr, 1800, 1000);
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 8007808:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800780c:	f7f8 fdf2 	bl	80003f4 <__aeabi_i2d>
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007818:	9101      	str	r1, [sp, #4]
 800781a:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 800781e:	9100      	str	r1, [sp, #0]
 8007820:	4620      	mov	r0, r4
 8007822:	f001 fdf7 	bl	8009414 <_ZN3PID3SatEdii>
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	4610      	mov	r0, r2
 800782c:	4619      	mov	r1, r3
 800782e:	f7f9 f8fb 	bl	8000a28 <__aeabi_d2iz>
 8007832:	4603      	mov	r3, r0
 8007834:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    int pwm1 = thr + pd_pitch - pd_roll  - p_yaw;
 8007838:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800783c:	f7f8 fdda 	bl	80003f4 <__aeabi_i2d>
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8007846:	f7f8 fc89 	bl	800015c <__adddf3>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	4610      	mov	r0, r2
 8007850:	4619      	mov	r1, r3
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8007858:	f7f8 fc7e 	bl	8000158 <__aeabi_dsub>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	4610      	mov	r0, r2
 8007862:	4619      	mov	r1, r3
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 800786a:	f7f8 fc75 	bl	8000158 <__aeabi_dsub>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	4610      	mov	r0, r2
 8007874:	4619      	mov	r1, r3
 8007876:	f7f9 f8d7 	bl	8000a28 <__aeabi_d2iz>
 800787a:	4603      	mov	r3, r0
 800787c:	64bb      	str	r3, [r7, #72]	; 0x48
    int pwm2 = thr - pd_pitch + pd_roll  - p_yaw ;
 800787e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8007882:	f7f8 fdb7 	bl	80003f4 <__aeabi_i2d>
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800788c:	f7f8 fc64 	bl	8000158 <__aeabi_dsub>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	4610      	mov	r0, r2
 8007896:	4619      	mov	r1, r3
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 800789e:	f7f8 fc5d 	bl	800015c <__adddf3>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	4610      	mov	r0, r2
 80078a8:	4619      	mov	r1, r3
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 80078b0:	f7f8 fc52 	bl	8000158 <__aeabi_dsub>
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	4610      	mov	r0, r2
 80078ba:	4619      	mov	r1, r3
 80078bc:	f7f9 f8b4 	bl	8000a28 <__aeabi_d2iz>
 80078c0:	4603      	mov	r3, r0
 80078c2:	647b      	str	r3, [r7, #68]	; 0x44
    int pwm3 = thr + pd_pitch + pd_roll  + p_yaw ;
 80078c4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80078c8:	f7f8 fd94 	bl	80003f4 <__aeabi_i2d>
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 80078d2:	f7f8 fc43 	bl	800015c <__adddf3>
 80078d6:	4602      	mov	r2, r0
 80078d8:	460b      	mov	r3, r1
 80078da:	4610      	mov	r0, r2
 80078dc:	4619      	mov	r1, r3
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 80078e4:	f7f8 fc3a 	bl	800015c <__adddf3>
 80078e8:	4602      	mov	r2, r0
 80078ea:	460b      	mov	r3, r1
 80078ec:	4610      	mov	r0, r2
 80078ee:	4619      	mov	r1, r3
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 80078f6:	f7f8 fc31 	bl	800015c <__adddf3>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	4610      	mov	r0, r2
 8007900:	4619      	mov	r1, r3
 8007902:	f7f9 f891 	bl	8000a28 <__aeabi_d2iz>
 8007906:	4603      	mov	r3, r0
 8007908:	643b      	str	r3, [r7, #64]	; 0x40
    int pwm4 = thr - pd_pitch - pd_roll  + p_yaw ;
 800790a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800790e:	f7f8 fd71 	bl	80003f4 <__aeabi_i2d>
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8007918:	f7f8 fc1e 	bl	8000158 <__aeabi_dsub>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4610      	mov	r0, r2
 8007922:	4619      	mov	r1, r3
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 800792a:	f7f8 fc15 	bl	8000158 <__aeabi_dsub>
 800792e:	4602      	mov	r2, r0
 8007930:	460b      	mov	r3, r1
 8007932:	4610      	mov	r0, r2
 8007934:	4619      	mov	r1, r3
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 800793c:	f7f8 fc0e 	bl	800015c <__adddf3>
 8007940:	4602      	mov	r2, r0
 8007942:	460b      	mov	r3, r1
 8007944:	4610      	mov	r0, r2
 8007946:	4619      	mov	r1, r3
 8007948:	f7f9 f86e 	bl	8000a28 <__aeabi_d2iz>
 800794c:	4603      	mov	r3, r0
 800794e:	63fb      	str	r3, [r7, #60]	; 0x3c


    //Saturate pwm values
    pwm1 = (int)pid_roll.Sat(pwm1,PWM_UPPER,PWM_LOWER,thr);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 8007956:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007958:	f7f8 fd4c 	bl	80003f4 <__aeabi_i2d>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007964:	9102      	str	r1, [sp, #8]
 8007966:	f240 414c 	movw	r1, #1100	; 0x44c
 800796a:	9101      	str	r1, [sp, #4]
 800796c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007970:	9100      	str	r1, [sp, #0]
 8007972:	4620      	mov	r0, r4
 8007974:	f001 fd08 	bl	8009388 <_ZN3PID3SatEdiii>
 8007978:	4602      	mov	r2, r0
 800797a:	460b      	mov	r3, r1
 800797c:	4610      	mov	r0, r2
 800797e:	4619      	mov	r1, r3
 8007980:	f7f9 f852 	bl	8000a28 <__aeabi_d2iz>
 8007984:	4603      	mov	r3, r0
 8007986:	64bb      	str	r3, [r7, #72]	; 0x48
    pwm2 = (int)pid_roll.Sat(pwm2,PWM_UPPER,PWM_LOWER,thr);
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 800798e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007990:	f7f8 fd30 	bl	80003f4 <__aeabi_i2d>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800799c:	9102      	str	r1, [sp, #8]
 800799e:	f240 414c 	movw	r1, #1100	; 0x44c
 80079a2:	9101      	str	r1, [sp, #4]
 80079a4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80079a8:	9100      	str	r1, [sp, #0]
 80079aa:	4620      	mov	r0, r4
 80079ac:	f001 fcec 	bl	8009388 <_ZN3PID3SatEdiii>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	4610      	mov	r0, r2
 80079b6:	4619      	mov	r1, r3
 80079b8:	f7f9 f836 	bl	8000a28 <__aeabi_d2iz>
 80079bc:	4603      	mov	r3, r0
 80079be:	647b      	str	r3, [r7, #68]	; 0x44
    pwm3 = (int)pid_roll.Sat(pwm3,PWM_UPPER,PWM_LOWER,thr);
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 80079c6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80079c8:	f7f8 fd14 	bl	80003f4 <__aeabi_i2d>
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80079d4:	9102      	str	r1, [sp, #8]
 80079d6:	f240 414c 	movw	r1, #1100	; 0x44c
 80079da:	9101      	str	r1, [sp, #4]
 80079dc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80079e0:	9100      	str	r1, [sp, #0]
 80079e2:	4620      	mov	r0, r4
 80079e4:	f001 fcd0 	bl	8009388 <_ZN3PID3SatEdiii>
 80079e8:	4602      	mov	r2, r0
 80079ea:	460b      	mov	r3, r1
 80079ec:	4610      	mov	r0, r2
 80079ee:	4619      	mov	r1, r3
 80079f0:	f7f9 f81a 	bl	8000a28 <__aeabi_d2iz>
 80079f4:	4603      	mov	r3, r0
 80079f6:	643b      	str	r3, [r7, #64]	; 0x40
    pwm4 = (int)pid_roll.Sat(pwm4,PWM_UPPER,PWM_LOWER,thr);
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 80079fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007a00:	f7f8 fcf8 	bl	80003f4 <__aeabi_i2d>
 8007a04:	4602      	mov	r2, r0
 8007a06:	460b      	mov	r3, r1
 8007a08:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007a0c:	9102      	str	r1, [sp, #8]
 8007a0e:	f240 414c 	movw	r1, #1100	; 0x44c
 8007a12:	9101      	str	r1, [sp, #4]
 8007a14:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007a18:	9100      	str	r1, [sp, #0]
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f001 fcb4 	bl	8009388 <_ZN3PID3SatEdiii>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	4610      	mov	r0, r2
 8007a26:	4619      	mov	r1, r3
 8007a28:	f7f8 fffe 	bl	8000a28 <__aeabi_d2iz>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	63fb      	str	r3, [r7, #60]	; 0x3c

    //Convert pwm to motor speed 
    w1 = pid_roll.pwm2mot(pwm1, 1);
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	33d0      	adds	r3, #208	; 0xd0
 8007a34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a36:	b291      	uxth	r1, r2
 8007a38:	2201      	movs	r2, #1
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f001 fd74 	bl	8009528 <_ZN3PID7pwm2motEti>
 8007a40:	4602      	mov	r2, r0
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	641a      	str	r2, [r3, #64]	; 0x40
    w2 = pid_roll.pwm2mot(pwm2, 1);
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	33d0      	adds	r3, #208	; 0xd0
 8007a4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a4c:	b291      	uxth	r1, r2
 8007a4e:	2201      	movs	r2, #1
 8007a50:	4618      	mov	r0, r3
 8007a52:	f001 fd69 	bl	8009528 <_ZN3PID7pwm2motEti>
 8007a56:	4602      	mov	r2, r0
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	645a      	str	r2, [r3, #68]	; 0x44
    w3 = pid_roll.pwm2mot(pwm3,-1);
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	33d0      	adds	r3, #208	; 0xd0
 8007a60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a62:	b291      	uxth	r1, r2
 8007a64:	f04f 32ff 	mov.w	r2, #4294967295
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f001 fd5d 	bl	8009528 <_ZN3PID7pwm2motEti>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	649a      	str	r2, [r3, #72]	; 0x48
    w4 = pid_roll.pwm2mot(pwm4,-1);
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	33d0      	adds	r3, #208	; 0xd0
 8007a78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a7a:	b291      	uxth	r1, r2
 8007a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a80:	4618      	mov	r0, r3
 8007a82:	f001 fd51 	bl	8009528 <_ZN3PID7pwm2motEti>
 8007a86:	4602      	mov	r2, r0
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	64da      	str	r2, [r3, #76]	; 0x4c


    std::vector<double> controller_output = 	{w1,w2,w3,w4};
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7f8 fcc1 	bl	8000418 <__aeabi_f2d>
 8007a96:	4602      	mov	r2, r0
 8007a98:	460b      	mov	r3, r1
 8007a9a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7f8 fcb8 	bl	8000418 <__aeabi_f2d>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	460b      	mov	r3, r1
 8007aac:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7f8 fcaf 	bl	8000418 <__aeabi_f2d>
 8007aba:	4602      	mov	r2, r0
 8007abc:	460b      	mov	r3, r1
 8007abe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7f8 fca6 	bl	8000418 <__aeabi_f2d>
 8007acc:	4602      	mov	r2, r0
 8007ace:	460b      	mov	r3, r1
 8007ad0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007ad4:	f107 0318 	add.w	r3, r7, #24
 8007ad8:	613b      	str	r3, [r7, #16]
 8007ada:	2304      	movs	r3, #4
 8007adc:	617b      	str	r3, [r7, #20]
 8007ade:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fa ffd6 	bl	8002a94 <_ZNSaIdEC1Ev>
 8007ae8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007aec:	f107 0210 	add.w	r2, r7, #16
 8007af0:	ca06      	ldmia	r2, {r1, r2}
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 f837 	bl	8007b66 <_ZNSt6vectorIdSaIdEEC1ESt16initializer_listIdERKS0_>
 8007af8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7fa ff74 	bl	80029ea <_ZNSaIdED1Ev>
    controller_output_pwm[0] = pwm1;
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b06:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    controller_output_pwm[1] = pwm2;
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    controller_output_pwm[2] = pwm3;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b16:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller_output_pwm[3] = pwm4;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b1e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    return controller_output;
 8007b22:	bf00      	nop
}
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	375c      	adds	r7, #92	; 0x5c
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2e:	b002      	add	sp, #8
 8007b30:	4770      	bx	lr

08007b32 <_ZN10ControllerD1Ev>:

Controller::~Controller() {}
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b082      	sub	sp, #8
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8007b40:	4618      	mov	r0, r3
 8007b42:	f001 fd39 	bl	80095b8 <_ZN3PIDD1Ev>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f001 fd33 	bl	80095b8 <_ZN3PIDD1Ev>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	33d0      	adds	r3, #208	; 0xd0
 8007b56:	4618      	mov	r0, r3
 8007b58:	f001 fd2e 	bl	80095b8 <_ZN3PIDD1Ev>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <_ZNSt6vectorIdSaIdEEC1ESt16initializer_listIdERKS0_>:
      vector(initializer_list<value_type> __l,
 8007b66:	b5b0      	push	{r4, r5, r7, lr}
 8007b68:	b086      	sub	sp, #24
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	60f8      	str	r0, [r7, #12]
 8007b6e:	1d38      	adds	r0, r7, #4
 8007b70:	e880 0006 	stmia.w	r0, {r1, r2}
 8007b74:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7fb f8c7 	bl	8002d0e <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8007b80:	1d3b      	adds	r3, r7, #4
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 f810 	bl	8007ba8 <_ZNKSt16initializer_listIdE5beginEv>
 8007b88:	4604      	mov	r4, r0
 8007b8a:	1d3b      	adds	r3, r7, #4
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 f816 	bl	8007bbe <_ZNKSt16initializer_listIdE3endEv>
 8007b92:	4602      	mov	r2, r0
 8007b94:	462b      	mov	r3, r5
 8007b96:	4621      	mov	r1, r4
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 f822 	bl	8007be2 <_ZNSt6vectorIdSaIdEE19_M_range_initializeIPKdEEvT_S5_St20forward_iterator_tag>
      }
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3718      	adds	r7, #24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bdb0      	pop	{r4, r5, r7, pc}

08007ba8 <_ZNKSt16initializer_listIdE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bc80      	pop	{r7}
 8007bbc:	4770      	bx	lr

08007bbe <_ZNKSt16initializer_listIdE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8007bbe:	b590      	push	{r4, r7, lr}
 8007bc0:	b083      	sub	sp, #12
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7ff ffee 	bl	8007ba8 <_ZNKSt16initializer_listIdE5beginEv>
 8007bcc:	4604      	mov	r4, r0
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f840 	bl	8007c54 <_ZNKSt16initializer_listIdE4sizeEv>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	4423      	add	r3, r4
 8007bda:	4618      	mov	r0, r3
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd90      	pop	{r4, r7, pc}

08007be2 <_ZNSt6vectorIdSaIdEE19_M_range_initializeIPKdEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8007be2:	b590      	push	{r4, r7, lr}
 8007be4:	b087      	sub	sp, #28
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	60f8      	str	r0, [r7, #12]
 8007bea:	60b9      	str	r1, [r7, #8]
 8007bec:	607a      	str	r2, [r7, #4]
 8007bee:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8007bf0:	6879      	ldr	r1, [r7, #4]
 8007bf2:	68b8      	ldr	r0, [r7, #8]
 8007bf4:	f000 f839 	bl	8007c6a <_ZSt8distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8007bfc:	68fc      	ldr	r4, [r7, #12]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fa ff83 	bl	8002b0c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8007c06:	4603      	mov	r3, r0
 8007c08:	4619      	mov	r1, r3
 8007c0a:	6978      	ldr	r0, [r7, #20]
 8007c0c:	f000 f842 	bl	8007c94 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_>
 8007c10:	4603      	mov	r3, r0
 8007c12:	4619      	mov	r1, r3
 8007c14:	4620      	mov	r0, r4
 8007c16:	f000 f865 	bl	8007ce4 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 8007c1a:	4602      	mov	r2, r0
	  this->_M_impl._M_start
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	00db      	lsls	r3, r3, #3
 8007c28:	441a      	add	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7fa ff69 	bl	8002b0c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8007c3a:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8007c3c:	4622      	mov	r2, r4
 8007c3e:	6879      	ldr	r1, [r7, #4]
 8007c40:	68b8      	ldr	r0, [r7, #8]
 8007c42:	f000 f863 	bl	8007d0c <_ZSt22__uninitialized_copy_aIPKdPddET0_T_S4_S3_RSaIT1_E>
 8007c46:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	605a      	str	r2, [r3, #4]
	}
 8007c4c:	bf00      	nop
 8007c4e:	371c      	adds	r7, #28
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd90      	pop	{r4, r7, pc}

08007c54 <_ZNKSt16initializer_listIdE4sizeEv>:
      size() const noexcept { return _M_len; }
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	4618      	mov	r0, r3
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bc80      	pop	{r7}
 8007c68:	4770      	bx	lr

08007c6a <_ZSt8distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8007c6a:	b5b0      	push	{r4, r5, r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8007c74:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8007c76:	1d3b      	adds	r3, r7, #4
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f000 f858 	bl	8007d2e <_ZSt19__iterator_categoryIPKdENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8007c7e:	462a      	mov	r2, r5
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	4620      	mov	r0, r4
 8007c84:	f000 f85c 	bl	8007d40 <_ZSt10__distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8007c88:	4603      	mov	r3, r0
    }
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007c94 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8007c94:	b590      	push	{r4, r7, lr}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8007c9e:	f107 030c 	add.w	r3, r7, #12
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fb f824 	bl	8002cf2 <_ZNSaIdEC1ERKS_>
 8007caa:	f107 030c 	add.w	r3, r7, #12
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f000 f855 	bl	8007d5e <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	bf8c      	ite	hi
 8007cbc:	2301      	movhi	r3, #1
 8007cbe:	2300      	movls	r3, #0
 8007cc0:	b2dc      	uxtb	r4, r3
 8007cc2:	f107 030c 	add.w	r3, r7, #12
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fa fe8f 	bl	80029ea <_ZNSaIdED1Ev>
 8007ccc:	2c00      	cmp	r4, #0
 8007cce:	d002      	beq.n	8007cd6 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8007cd0:	4803      	ldr	r0, [pc, #12]	; (8007ce0 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_+0x4c>)
 8007cd2:	f001 fc91 	bl	80095f8 <_ZSt20__throw_length_errorPKc>
	return __n;
 8007cd6:	687b      	ldr	r3, [r7, #4]
      }
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd90      	pop	{r4, r7, pc}
 8007ce0:	0800af6c 	.word	0x0800af6c

08007ce4 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d006      	beq.n	8007d02 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x1e>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6839      	ldr	r1, [r7, #0]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 f84a 	bl	8007d92 <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	e000      	b.n	8007d04 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x20>
 8007d02:	2300      	movs	r3, #0
      }
 8007d04:	4618      	mov	r0, r3
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <_ZSt22__uninitialized_copy_aIPKdPddET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
 8007d18:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	68b9      	ldr	r1, [r7, #8]
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f000 f846 	bl	8007db0 <_ZSt18uninitialized_copyIPKdPdET0_T_S4_S3_>
 8007d24:	4603      	mov	r3, r0
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <_ZSt19__iterator_categoryIPKdENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8007d36:	4618      	mov	r0, r3
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bc80      	pop	{r7}
 8007d3e:	4770      	bx	lr

08007d40 <_ZSt10__distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	10db      	asrs	r3, r3, #3
    }
 8007d54:	4618      	mov	r0, r3
 8007d56:	3714      	adds	r7, #20
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bc80      	pop	{r7}
 8007d5c:	4770      	bx	lr

08007d5e <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b084      	sub	sp, #16
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8007d66:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8007d6a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f831 	bl	8007dd4 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>
 8007d72:	4603      	mov	r3, r0
 8007d74:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8007d76:	f107 0208 	add.w	r2, r7, #8
 8007d7a:	f107 030c 	add.w	r3, r7, #12
 8007d7e:	4611      	mov	r1, r2
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 f833 	bl	8007dec <_ZSt3minIjERKT_S2_S2_>
 8007d86:	4603      	mov	r3, r0
 8007d88:	681b      	ldr	r3, [r3, #0]
      }
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b082      	sub	sp, #8
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	6839      	ldr	r1, [r7, #0]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f836 	bl	8007e12 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>
 8007da6:	4603      	mov	r3, r0
 8007da8:	4618      	mov	r0, r3
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <_ZSt18uninitialized_copyIPKdPdET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	68b9      	ldr	r1, [r7, #8]
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 f842 	bl	8007e4e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKdPdEET0_T_S6_S5_>
 8007dca:	4603      	mov	r3, r0
    }
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3718      	adds	r7, #24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f846 	bl	8007e6e <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 8007de2:	4603      	mov	r3, r0
 8007de4:	4618      	mov	r0, r3
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d201      	bcs.n	8007e06 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	e000      	b.n	8007e08 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8007e06:	687b      	ldr	r3, [r7, #4]
    }
 8007e08:	4618      	mov	r0, r3
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bc80      	pop	{r7}
 8007e10:	4770      	bx	lr

08007e12 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	60f8      	str	r0, [r7, #12]
 8007e1a:	60b9      	str	r1, [r7, #8]
 8007e1c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f000 f825 	bl	8007e6e <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 8007e24:	4602      	mov	r2, r0
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	bf8c      	ite	hi
 8007e2c:	2301      	movhi	r3, #1
 8007e2e:	2300      	movls	r3, #0
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007e36:	f001 fbdc 	bl	80095f2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	00db      	lsls	r3, r3, #3
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f001 fbc6 	bl	80095d0 <_Znwj>
 8007e44:	4603      	mov	r3, r0
      }
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKdPdEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	60f8      	str	r0, [r7, #12]
 8007e56:	60b9      	str	r1, [r7, #8]
 8007e58:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	68b9      	ldr	r1, [r7, #8]
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f000 f810 	bl	8007e84 <_ZSt4copyIPKdPdET0_T_S4_S3_>
 8007e64:	4603      	mov	r3, r0
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007e76:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bc80      	pop	{r7}
 8007e82:	4770      	bx	lr

08007e84 <_ZSt4copyIPKdPdET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8007e84:	b590      	push	{r4, r7, lr}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f000 f80f 	bl	8007eb4 <_ZSt12__miter_baseIPKdET_S2_>
 8007e96:	4604      	mov	r4, r0
 8007e98:	68b8      	ldr	r0, [r7, #8]
 8007e9a:	f000 f80b 	bl	8007eb4 <_ZSt12__miter_baseIPKdET_S2_>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f000 f80f 	bl	8007ec8 <_ZSt14__copy_move_a2ILb0EPKdPdET1_T0_S4_S3_>
 8007eaa:	4603      	mov	r3, r0
    }
 8007eac:	4618      	mov	r0, r3
 8007eae:	3714      	adds	r7, #20
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd90      	pop	{r4, r7, pc}

08007eb4 <_ZSt12__miter_baseIPKdET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bc80      	pop	{r7}
 8007ec6:	4770      	bx	lr

08007ec8 <_ZSt14__copy_move_a2ILb0EPKdPdET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007ec8:	b5b0      	push	{r4, r5, r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f000 f81a 	bl	8007f0e <_ZSt12__niter_baseIPKdET_S2_>
 8007eda:	4604      	mov	r4, r0
 8007edc:	68b8      	ldr	r0, [r7, #8]
 8007ede:	f000 f816 	bl	8007f0e <_ZSt12__niter_baseIPKdET_S2_>
 8007ee2:	4605      	mov	r5, r0
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 f81b 	bl	8007f22 <_ZSt12__niter_baseIPdET_S1_>
 8007eec:	4603      	mov	r3, r0
 8007eee:	461a      	mov	r2, r3
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	f000 f81f 	bl	8007f36 <_ZSt13__copy_move_aILb0EPKdPdET1_T0_S4_S3_>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	1d3b      	adds	r3, r7, #4
 8007efc:	4611      	mov	r1, r2
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 f82b 	bl	8007f5a <_ZSt12__niter_wrapIPdET_RKS1_S1_>
 8007f04:	4603      	mov	r3, r0
    }
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bdb0      	pop	{r4, r5, r7, pc}

08007f0e <_ZSt12__niter_baseIPKdET_S2_>:
    __niter_base(_Iterator __it)
 8007f0e:	b480      	push	{r7}
 8007f10:	b083      	sub	sp, #12
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4618      	mov	r0, r3
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bc80      	pop	{r7}
 8007f20:	4770      	bx	lr

08007f22 <_ZSt12__niter_baseIPdET_S1_>:
    __niter_base(_Iterator __it)
 8007f22:	b480      	push	{r7}
 8007f24:	b083      	sub	sp, #12
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bc80      	pop	{r7}
 8007f34:	4770      	bx	lr

08007f36 <_ZSt13__copy_move_aILb0EPKdPdET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b086      	sub	sp, #24
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	60f8      	str	r0, [r7, #12]
 8007f3e:	60b9      	str	r1, [r7, #8]
 8007f40:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8007f42:	2301      	movs	r3, #1
 8007f44:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	68b9      	ldr	r1, [r7, #8]
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 f810 	bl	8007f70 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
 8007f50:	4603      	mov	r3, r0
    }
 8007f52:	4618      	mov	r0, r3
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <_ZSt12__niter_wrapIPdET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8007f5a:	b480      	push	{r7}
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	6039      	str	r1, [r7, #0]
    { return __res; }
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	4618      	mov	r0, r3
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bc80      	pop	{r7}
 8007f6e:	4770      	bx	lr

08007f70 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	10db      	asrs	r3, r3, #3
 8007f84:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d006      	beq.n	8007f9a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	00db      	lsls	r3, r3, #3
 8007f90:	461a      	mov	r2, r3
 8007f92:	68f9      	ldr	r1, [r7, #12]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f002 fea9 	bl	800acec <memmove>
	  return __result + _Num;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	00db      	lsls	r3, r3, #3
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	4413      	add	r3, r2
	}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	0000      	movs	r0, r0
 8007fac:	0000      	movs	r0, r0
	...

08007fb0 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi()  {
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a29      	ldr	r2, [pc, #164]	; (8008060 <_ZN15Kalman_FiltresiC1Ev+0xb0>)
 8007fbc:	64da      	str	r2, [r3, #76]	; 0x4c
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a27      	ldr	r2, [pc, #156]	; (8008060 <_ZN15Kalman_FiltresiC1Ev+0xb0>)
 8007fc2:	651a      	str	r2, [r3, #80]	; 0x50
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a26      	ldr	r2, [pc, #152]	; (8008060 <_ZN15Kalman_FiltresiC1Ev+0xb0>)
 8007fc8:	655a      	str	r2, [r3, #84]	; 0x54
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a24      	ldr	r2, [pc, #144]	; (8008060 <_ZN15Kalman_FiltresiC1Ev+0xb0>)
 8007fce:	659a      	str	r2, [r3, #88]	; 0x58
 8007fd0:	6879      	ldr	r1, [r7, #4]
 8007fd2:	a31f      	add	r3, pc, #124	; (adr r3, 8008050 <_ZN15Kalman_FiltresiC1Ev+0xa0>)
 8007fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8007fdc:	6879      	ldr	r1, [r7, #4]
 8007fde:	a31c      	add	r3, pc, #112	; (adr r3, 8008050 <_ZN15Kalman_FiltresiC1Ev+0xa0>)
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8007fe8:	6879      	ldr	r1, [r7, #4]
 8007fea:	a319      	add	r3, pc, #100	; (adr r3, 8008050 <_ZN15Kalman_FiltresiC1Ev+0xa0>)
 8007fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8007ff4:	6879      	ldr	r1, [r7, #4]
 8007ff6:	a318      	add	r3, pc, #96	; (adr r3, 8008058 <_ZN15Kalman_FiltresiC1Ev+0xa8>)
 8007ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffc:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8008000:	6879      	ldr	r1, [r7, #4]
 8008002:	f04f 0200 	mov.w	r2, #0
 8008006:	4b17      	ldr	r3, [pc, #92]	; (8008064 <_ZN15Kalman_FiltresiC1Ev+0xb4>)
 8008008:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a16      	ldr	r2, [pc, #88]	; (8008068 <_ZN15Kalman_FiltresiC1Ev+0xb8>)
 8008010:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	22c8      	movs	r2, #200	; 0xc8
 8008018:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008022:	4618      	mov	r0, r3
 8008024:	f7f8 fe32 	bl	8000c8c <__aeabi_i2f>
 8008028:	4603      	mov	r3, r0
 800802a:	4619      	mov	r1, r3
 800802c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008030:	f7f8 ff34 	bl	8000e9c <__aeabi_fdiv>
 8008034:	4603      	mov	r3, r0
 8008036:	4618      	mov	r0, r3
 8008038:	f7f8 f9ee 	bl	8000418 <__aeabi_f2d>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	6879      	ldr	r1, [r7, #4]
 8008042:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8

}
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4618      	mov	r0, r3
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	47ae147b 	.word	0x47ae147b
 8008054:	3f847ae1 	.word	0x3f847ae1
 8008058:	d2f1a9fc 	.word	0xd2f1a9fc
 800805c:	3f50624d 	.word	0x3f50624d
 8008060:	42c80000 	.word	0x42c80000
 8008064:	40340000 	.word	0x40340000
 8008068:	42654ca3 	.word	0x42654ca3
 800806c:	00000000 	.word	0x00000000

08008070 <_ZN15Kalman_Filtresi3RunEPfS0_>:
	y_prev = y;

	return y;
}

void Kalman_Filtresi::Run(float gyro[3], float acc[3]) {
 8008070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008074:	b094      	sub	sp, #80	; 0x50
 8008076:	af00      	add	r7, sp, #0
 8008078:	62f8      	str	r0, [r7, #44]	; 0x2c
 800807a:	62b9      	str	r1, [r7, #40]	; 0x28
 800807c:	627a      	str	r2, [r7, #36]	; 0x24

  float accX = acc[0]; 
 800807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	64fb      	str	r3, [r7, #76]	; 0x4c
  float accY = acc[1];
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	64bb      	str	r3, [r7, #72]	; 0x48
  float accZ = acc[2];
 800808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	647b      	str	r3, [r7, #68]	; 0x44

  float gyroX = gyro[0]; 
 8008090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	643b      	str	r3, [r7, #64]	; 0x40
  float gyroY = gyro[1];
 8008096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	63fb      	str	r3, [r7, #60]	; 0x3c
  float gyroZ = gyro[2];
 800809c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	63bb      	str	r3, [r7, #56]	; 0x38

    //---IMU KİSMİ----
    //=================================
  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);
 80080a2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80080a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80080a6:	f7f8 fe45 	bl	8000d34 <__aeabi_fmul>
 80080aa:	4603      	mov	r3, r0
 80080ac:	461c      	mov	r4, r3
 80080ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80080b0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80080b2:	f7f8 fe3f 	bl	8000d34 <__aeabi_fmul>
 80080b6:	4603      	mov	r3, r0
 80080b8:	4619      	mov	r1, r3
 80080ba:	4620      	mov	r0, r4
 80080bc:	f7f8 fd32 	bl	8000b24 <__addsf3>
 80080c0:	4603      	mov	r3, r0
 80080c2:	461c      	mov	r4, r3
 80080c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080c6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80080c8:	f7f8 fe34 	bl	8000d34 <__aeabi_fmul>
 80080cc:	4603      	mov	r3, r0
 80080ce:	4619      	mov	r1, r3
 80080d0:	4620      	mov	r0, r4
 80080d2:	f7f8 fd27 	bl	8000b24 <__addsf3>
 80080d6:	4603      	mov	r3, r0
 80080d8:	4618      	mov	r0, r3
 80080da:	f7f9 fb4d 	bl	8001778 <_ZSt4sqrtf>
 80080de:	6378      	str	r0, [r7, #52]	; 0x34

  pitch_acc =  asin(accX/acctop)*rad2deg + PITCH_OFFSET;
 80080e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80080e2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80080e4:	f7f8 feda 	bl	8000e9c <__aeabi_fdiv>
 80080e8:	4603      	mov	r3, r0
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7f9 fb38 	bl	8001760 <_ZSt4asinf>
 80080f0:	4602      	mov	r2, r0
 80080f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080f8:	4619      	mov	r1, r3
 80080fa:	4610      	mov	r0, r2
 80080fc:	f7f8 fe1a 	bl	8000d34 <__aeabi_fmul>
 8008100:	4603      	mov	r3, r0
 8008102:	49c1      	ldr	r1, [pc, #772]	; (8008408 <_ZN15Kalman_Filtresi3RunEPfS0_+0x398>)
 8008104:	4618      	mov	r0, r3
 8008106:	f7f8 fd0b 	bl	8000b20 <__aeabi_fsub>
 800810a:	4603      	mov	r3, r0
 800810c:	461a      	mov	r2, r3
 800810e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008110:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
  roll_acc  =  asin(accY/acctop)*rad2deg + ROLL_OFFSET;
 8008114:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008116:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008118:	f7f8 fec0 	bl	8000e9c <__aeabi_fdiv>
 800811c:	4603      	mov	r3, r0
 800811e:	4618      	mov	r0, r3
 8008120:	f7f9 fb1e 	bl	8001760 <_ZSt4asinf>
 8008124:	4602      	mov	r2, r0
 8008126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800812c:	4619      	mov	r1, r3
 800812e:	4610      	mov	r0, r2
 8008130:	f7f8 fe00 	bl	8000d34 <__aeabi_fmul>
 8008134:	4603      	mov	r3, r0
 8008136:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800813a:	4618      	mov	r0, r3
 800813c:	f7f8 fcf2 	bl	8000b24 <__addsf3>
 8008140:	4603      	mov	r3, r0
 8008142:	461a      	mov	r2, r3
 8008144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008146:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

  //pitch_acc = lpf(pitch_acc);
  //roll_acc = lpf(roll_acc);


  pitch_gyro = gyroY * st;
 800814a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800814c:	f7f8 f964 	bl	8000418 <__aeabi_f2d>
 8008150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008152:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8008156:	f7f8 f9b7 	bl	80004c8 <__aeabi_dmul>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	4610      	mov	r0, r2
 8008160:	4619      	mov	r1, r3
 8008162:	f7f8 fc89 	bl	8000a78 <__aeabi_d2f>
 8008166:	4602      	mov	r2, r0
 8008168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  roll_gyro =  gyroX * st;
 800816e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008170:	f7f8 f952 	bl	8000418 <__aeabi_f2d>
 8008174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008176:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800817a:	f7f8 f9a5 	bl	80004c8 <__aeabi_dmul>
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	4610      	mov	r0, r2
 8008184:	4619      	mov	r1, r3
 8008186:	f7f8 fc77 	bl	8000a78 <__aeabi_d2f>
 800818a:	4602      	mov	r2, r0
 800818c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    attitude.pitch_acc = pitch_acc;
    attitude.yaw_acc = yaw_acc;
    //printf("\npitc_acc: %.2f", pitch_acc);
  #endif
    
    if(gyro_ready) {
 8008192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008194:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 8627 	beq.w	8008dec <_ZN15Kalman_Filtresi3RunEPfS0_+0xd7c>

    pitch_comp=(pitch_gyro+pitch_eski)*0.998+pitch_acc*0.002;	//Tümleyen filtre
 800819e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 80081a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80081aa:	4619      	mov	r1, r3
 80081ac:	4610      	mov	r0, r2
 80081ae:	f7f8 fcb9 	bl	8000b24 <__addsf3>
 80081b2:	4603      	mov	r3, r0
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7f8 f92f 	bl	8000418 <__aeabi_f2d>
 80081ba:	a38f      	add	r3, pc, #572	; (adr r3, 80083f8 <_ZN15Kalman_Filtresi3RunEPfS0_+0x388>)
 80081bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c0:	f7f8 f982 	bl	80004c8 <__aeabi_dmul>
 80081c4:	4602      	mov	r2, r0
 80081c6:	460b      	mov	r3, r1
 80081c8:	4614      	mov	r4, r2
 80081ca:	461d      	mov	r5, r3
 80081cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ce:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7f8 f920 	bl	8000418 <__aeabi_f2d>
 80081d8:	a389      	add	r3, pc, #548	; (adr r3, 8008400 <_ZN15Kalman_Filtresi3RunEPfS0_+0x390>)
 80081da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081de:	f7f8 f973 	bl	80004c8 <__aeabi_dmul>
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	4620      	mov	r0, r4
 80081e8:	4629      	mov	r1, r5
 80081ea:	f7f7 ffb7 	bl	800015c <__adddf3>
 80081ee:	4602      	mov	r2, r0
 80081f0:	460b      	mov	r3, r1
 80081f2:	4610      	mov	r0, r2
 80081f4:	4619      	mov	r1, r3
 80081f6:	f7f8 fc3f 	bl	8000a78 <__aeabi_d2f>
 80081fa:	4602      	mov	r2, r0
 80081fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fe:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    roll_comp =(roll_gyro+roll_eski)*0.998+roll_acc*0.002;		//Tümleyen filtre
 8008202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008204:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8008208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800820e:	4619      	mov	r1, r3
 8008210:	4610      	mov	r0, r2
 8008212:	f7f8 fc87 	bl	8000b24 <__addsf3>
 8008216:	4603      	mov	r3, r0
 8008218:	4618      	mov	r0, r3
 800821a:	f7f8 f8fd 	bl	8000418 <__aeabi_f2d>
 800821e:	a376      	add	r3, pc, #472	; (adr r3, 80083f8 <_ZN15Kalman_Filtresi3RunEPfS0_+0x388>)
 8008220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008224:	f7f8 f950 	bl	80004c8 <__aeabi_dmul>
 8008228:	4602      	mov	r2, r0
 800822a:	460b      	mov	r3, r1
 800822c:	4614      	mov	r4, r2
 800822e:	461d      	mov	r5, r3
 8008230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008232:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8008236:	4618      	mov	r0, r3
 8008238:	f7f8 f8ee 	bl	8000418 <__aeabi_f2d>
 800823c:	a370      	add	r3, pc, #448	; (adr r3, 8008400 <_ZN15Kalman_Filtresi3RunEPfS0_+0x390>)
 800823e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008242:	f7f8 f941 	bl	80004c8 <__aeabi_dmul>
 8008246:	4602      	mov	r2, r0
 8008248:	460b      	mov	r3, r1
 800824a:	4620      	mov	r0, r4
 800824c:	4629      	mov	r1, r5
 800824e:	f7f7 ff85 	bl	800015c <__adddf3>
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	4610      	mov	r0, r2
 8008258:	4619      	mov	r1, r3
 800825a:	f7f8 fc0d 	bl	8000a78 <__aeabi_d2f>
 800825e:	4602      	mov	r2, r0
 8008260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008262:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

    pitch = pitch - st*pitch_bias + gyroY*(st) + ((pitch_acc - pitch + st*pitch_bias - gyroY*(st))*(S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st)))/(Q + S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st));
 8008266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008268:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800826c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826e:	e9d3 893a 	ldrd	r8, r9, [r3, #232]	; 0xe8
 8008272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008276:	4618      	mov	r0, r3
 8008278:	f7f8 f8ce 	bl	8000418 <__aeabi_f2d>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	4640      	mov	r0, r8
 8008282:	4649      	mov	r1, r9
 8008284:	f7f8 f920 	bl	80004c8 <__aeabi_dmul>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	4620      	mov	r0, r4
 800828e:	4629      	mov	r1, r5
 8008290:	f7f7 ff62 	bl	8000158 <__aeabi_dsub>
 8008294:	4602      	mov	r2, r0
 8008296:	460b      	mov	r3, r1
 8008298:	4614      	mov	r4, r2
 800829a:	461d      	mov	r5, r3
 800829c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800829e:	f7f8 f8bb 	bl	8000418 <__aeabi_f2d>
 80082a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a4:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80082a8:	f7f8 f90e 	bl	80004c8 <__aeabi_dmul>
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	4620      	mov	r0, r4
 80082b2:	4629      	mov	r1, r5
 80082b4:	f7f7 ff52 	bl	800015c <__adddf3>
 80082b8:	4602      	mov	r2, r0
 80082ba:	460b      	mov	r3, r1
 80082bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80082c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7f8 f8a6 	bl	8000418 <__aeabi_f2d>
 80082cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80082d2:	f7f7 ff41 	bl	8000158 <__aeabi_dsub>
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	4690      	mov	r8, r2
 80082dc:	4699      	mov	r9, r3
 80082de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e0:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 80082e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7f8 f895 	bl	8000418 <__aeabi_f2d>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	4620      	mov	r0, r4
 80082f4:	4629      	mov	r1, r5
 80082f6:	f7f8 f8e7 	bl	80004c8 <__aeabi_dmul>
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	4640      	mov	r0, r8
 8008300:	4649      	mov	r1, r9
 8008302:	f7f7 ff2b 	bl	800015c <__adddf3>
 8008306:	4602      	mov	r2, r0
 8008308:	460b      	mov	r3, r1
 800830a:	4614      	mov	r4, r2
 800830c:	461d      	mov	r5, r3
 800830e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008310:	f7f8 f882 	bl	8000418 <__aeabi_f2d>
 8008314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008316:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800831a:	f7f8 f8d5 	bl	80004c8 <__aeabi_dmul>
 800831e:	4602      	mov	r2, r0
 8008320:	460b      	mov	r3, r1
 8008322:	4620      	mov	r0, r4
 8008324:	4629      	mov	r1, r5
 8008326:	f7f7 ff17 	bl	8000158 <__aeabi_dsub>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	e9c7 2300 	strd	r2, r3, [r7]
 8008332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008336:	4618      	mov	r0, r3
 8008338:	f7f8 f86e 	bl	8000418 <__aeabi_f2d>
 800833c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008342:	f7f7 ff0b 	bl	800015c <__adddf3>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	4614      	mov	r4, r2
 800834c:	461d      	mov	r5, r3
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008352:	4618      	mov	r0, r3
 8008354:	f7f8 f860 	bl	8000418 <__aeabi_f2d>
 8008358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835a:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800835e:	f7f8 f8b3 	bl	80004c8 <__aeabi_dmul>
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4620      	mov	r0, r4
 8008368:	4629      	mov	r1, r5
 800836a:	f7f7 fef5 	bl	8000158 <__aeabi_dsub>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	4692      	mov	sl, r2
 8008374:	469b      	mov	fp, r3
 8008376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008378:	e9d3 893a 	ldrd	r8, r9, [r3, #232]	; 0xe8
 800837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008380:	4618      	mov	r0, r3
 8008382:	f7f8 f849 	bl	8000418 <__aeabi_f2d>
 8008386:	4604      	mov	r4, r0
 8008388:	460d      	mov	r5, r1
 800838a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800838e:	4618      	mov	r0, r3
 8008390:	f7f8 f842 	bl	8000418 <__aeabi_f2d>
 8008394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008396:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800839a:	f7f8 f895 	bl	80004c8 <__aeabi_dmul>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4620      	mov	r0, r4
 80083a4:	4629      	mov	r1, r5
 80083a6:	f7f7 fed7 	bl	8000158 <__aeabi_dsub>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	4640      	mov	r0, r8
 80083b0:	4649      	mov	r1, r9
 80083b2:	f7f8 f889 	bl	80004c8 <__aeabi_dmul>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4650      	mov	r0, sl
 80083bc:	4659      	mov	r1, fp
 80083be:	f7f7 fecb 	bl	8000158 <__aeabi_dsub>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083ca:	f7f8 f87d 	bl	80004c8 <__aeabi_dmul>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	e9c7 2300 	strd	r2, r3, [r7]
 80083d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d8:	e9d3 4536 	ldrd	r4, r5, [r3, #216]	; 0xd8
 80083dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7f8 f819 	bl	8000418 <__aeabi_f2d>
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	4620      	mov	r0, r4
 80083ec:	4629      	mov	r1, r5
 80083ee:	f7f7 feb5 	bl	800015c <__adddf3>
 80083f2:	4602      	mov	r2, r0
 80083f4:	e00a      	b.n	800840c <_ZN15Kalman_Filtresi3RunEPfS0_+0x39c>
 80083f6:	bf00      	nop
 80083f8:	b22d0e56 	.word	0xb22d0e56
 80083fc:	3fefef9d 	.word	0x3fefef9d
 8008400:	d2f1a9fc 	.word	0xd2f1a9fc
 8008404:	3f60624d 	.word	0x3f60624d
 8008408:	40500000 	.word	0x40500000
 800840c:	460b      	mov	r3, r1
 800840e:	4610      	mov	r0, r2
 8008410:	4619      	mov	r1, r3
 8008412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008414:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008418:	f7f7 fea0 	bl	800015c <__adddf3>
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	4614      	mov	r4, r2
 8008422:	461d      	mov	r5, r3
 8008424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008428:	4618      	mov	r0, r3
 800842a:	f7f7 fff5 	bl	8000418 <__aeabi_f2d>
 800842e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008430:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8008434:	f7f8 f848 	bl	80004c8 <__aeabi_dmul>
 8008438:	4602      	mov	r2, r0
 800843a:	460b      	mov	r3, r1
 800843c:	4620      	mov	r0, r4
 800843e:	4629      	mov	r1, r5
 8008440:	f7f7 fe8a 	bl	8000158 <__aeabi_dsub>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	4692      	mov	sl, r2
 800844a:	469b      	mov	fp, r3
 800844c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844e:	e9d3 893a 	ldrd	r8, r9, [r3, #232]	; 0xe8
 8008452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008456:	4618      	mov	r0, r3
 8008458:	f7f7 ffde 	bl	8000418 <__aeabi_f2d>
 800845c:	4604      	mov	r4, r0
 800845e:	460d      	mov	r5, r1
 8008460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008464:	4618      	mov	r0, r3
 8008466:	f7f7 ffd7 	bl	8000418 <__aeabi_f2d>
 800846a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846c:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8008470:	f7f8 f82a 	bl	80004c8 <__aeabi_dmul>
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	4620      	mov	r0, r4
 800847a:	4629      	mov	r1, r5
 800847c:	f7f7 fe6c 	bl	8000158 <__aeabi_dsub>
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	4640      	mov	r0, r8
 8008486:	4649      	mov	r1, r9
 8008488:	f7f8 f81e 	bl	80004c8 <__aeabi_dmul>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4650      	mov	r0, sl
 8008492:	4659      	mov	r1, fp
 8008494:	f7f7 fe60 	bl	8000158 <__aeabi_dsub>
 8008498:	4602      	mov	r2, r0
 800849a:	460b      	mov	r3, r1
 800849c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084a0:	f7f8 f93c 	bl	800071c <__aeabi_ddiv>
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084ac:	f7f7 fe56 	bl	800015c <__adddf3>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084b6:	e9c1 2302 	strd	r2, r3, [r1, #8]
  pitch_bias = pitch_bias + ((S21_pitch + (sb_p) - S22_pitch*(st))*(pitch_acc - pitch + st*pitch_bias - gyroY*(st)))/(Q + S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st));
 80084ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084be:	4618      	mov	r0, r3
 80084c0:	f7f7 ffaa 	bl	8000418 <__aeabi_f2d>
 80084c4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80084c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7f7 ffa3 	bl	8000418 <__aeabi_f2d>
 80084d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d4:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80084d8:	f7f7 fe40 	bl	800015c <__adddf3>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4614      	mov	r4, r2
 80084e2:	461d      	mov	r5, r3
 80084e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7f7 ff95 	bl	8000418 <__aeabi_f2d>
 80084ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f0:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80084f4:	f7f7 ffe8 	bl	80004c8 <__aeabi_dmul>
 80084f8:	4602      	mov	r2, r0
 80084fa:	460b      	mov	r3, r1
 80084fc:	4620      	mov	r0, r4
 80084fe:	4629      	mov	r1, r5
 8008500:	f7f7 fe2a 	bl	8000158 <__aeabi_dsub>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	4692      	mov	sl, r2
 800850a:	469b      	mov	fp, r3
 800850c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8008512:	4618      	mov	r0, r3
 8008514:	f7f7 ff80 	bl	8000418 <__aeabi_f2d>
 8008518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800851e:	f7f7 fe1b 	bl	8000158 <__aeabi_dsub>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	4690      	mov	r8, r2
 8008528:	4699      	mov	r9, r3
 800852a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852c:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 8008530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008534:	4618      	mov	r0, r3
 8008536:	f7f7 ff6f 	bl	8000418 <__aeabi_f2d>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4620      	mov	r0, r4
 8008540:	4629      	mov	r1, r5
 8008542:	f7f7 ffc1 	bl	80004c8 <__aeabi_dmul>
 8008546:	4602      	mov	r2, r0
 8008548:	460b      	mov	r3, r1
 800854a:	4640      	mov	r0, r8
 800854c:	4649      	mov	r1, r9
 800854e:	f7f7 fe05 	bl	800015c <__adddf3>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	4614      	mov	r4, r2
 8008558:	461d      	mov	r5, r3
 800855a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800855c:	f7f7 ff5c 	bl	8000418 <__aeabi_f2d>
 8008560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008562:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8008566:	f7f7 ffaf 	bl	80004c8 <__aeabi_dmul>
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	4620      	mov	r0, r4
 8008570:	4629      	mov	r1, r5
 8008572:	f7f7 fdf1 	bl	8000158 <__aeabi_dsub>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	4650      	mov	r0, sl
 800857c:	4659      	mov	r1, fp
 800857e:	f7f7 ffa3 	bl	80004c8 <__aeabi_dmul>
 8008582:	4602      	mov	r2, r0
 8008584:	460b      	mov	r3, r1
 8008586:	e9c7 2300 	strd	r2, r3, [r7]
 800858a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858c:	e9d3 4536 	ldrd	r4, r5, [r3, #216]	; 0xd8
 8008590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008594:	4618      	mov	r0, r3
 8008596:	f7f7 ff3f 	bl	8000418 <__aeabi_f2d>
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	4620      	mov	r0, r4
 80085a0:	4629      	mov	r1, r5
 80085a2:	f7f7 fddb 	bl	800015c <__adddf3>
 80085a6:	4602      	mov	r2, r0
 80085a8:	460b      	mov	r3, r1
 80085aa:	4610      	mov	r0, r2
 80085ac:	4619      	mov	r1, r3
 80085ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b0:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80085b4:	f7f7 fdd2 	bl	800015c <__adddf3>
 80085b8:	4602      	mov	r2, r0
 80085ba:	460b      	mov	r3, r1
 80085bc:	4614      	mov	r4, r2
 80085be:	461d      	mov	r5, r3
 80085c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7f7 ff27 	bl	8000418 <__aeabi_f2d>
 80085ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085cc:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80085d0:	f7f7 ff7a 	bl	80004c8 <__aeabi_dmul>
 80085d4:	4602      	mov	r2, r0
 80085d6:	460b      	mov	r3, r1
 80085d8:	4620      	mov	r0, r4
 80085da:	4629      	mov	r1, r5
 80085dc:	f7f7 fdbc 	bl	8000158 <__aeabi_dsub>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	4692      	mov	sl, r2
 80085e6:	469b      	mov	fp, r3
 80085e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ea:	e9d3 893a 	ldrd	r8, r9, [r3, #232]	; 0xe8
 80085ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7f7 ff10 	bl	8000418 <__aeabi_f2d>
 80085f8:	4604      	mov	r4, r0
 80085fa:	460d      	mov	r5, r1
 80085fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008600:	4618      	mov	r0, r3
 8008602:	f7f7 ff09 	bl	8000418 <__aeabi_f2d>
 8008606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008608:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800860c:	f7f7 ff5c 	bl	80004c8 <__aeabi_dmul>
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	4620      	mov	r0, r4
 8008616:	4629      	mov	r1, r5
 8008618:	f7f7 fd9e 	bl	8000158 <__aeabi_dsub>
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	4640      	mov	r0, r8
 8008622:	4649      	mov	r1, r9
 8008624:	f7f7 ff50 	bl	80004c8 <__aeabi_dmul>
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	4650      	mov	r0, sl
 800862e:	4659      	mov	r1, fp
 8008630:	f7f7 fd92 	bl	8000158 <__aeabi_dsub>
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	e9d7 0100 	ldrd	r0, r1, [r7]
 800863c:	f7f8 f86e 	bl	800071c <__aeabi_ddiv>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008648:	f7f7 fd88 	bl	800015c <__adddf3>
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	4610      	mov	r0, r2
 8008652:	4619      	mov	r1, r3
 8008654:	f7f8 fa10 	bl	8000a78 <__aeabi_d2f>
 8008658:	4602      	mov	r2, r0
 800865a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865c:	631a      	str	r2, [r3, #48]	; 0x30

  S11_pitch = -((S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st))/(Q + S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st)) - 1)*(S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st));
 800865e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008662:	4618      	mov	r0, r3
 8008664:	f7f7 fed8 	bl	8000418 <__aeabi_f2d>
 8008668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800866e:	f7f7 fd75 	bl	800015c <__adddf3>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	4614      	mov	r4, r2
 8008678:	461d      	mov	r5, r3
 800867a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800867e:	4618      	mov	r0, r3
 8008680:	f7f7 feca 	bl	8000418 <__aeabi_f2d>
 8008684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008686:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800868a:	f7f7 ff1d 	bl	80004c8 <__aeabi_dmul>
 800868e:	4602      	mov	r2, r0
 8008690:	460b      	mov	r3, r1
 8008692:	4620      	mov	r0, r4
 8008694:	4629      	mov	r1, r5
 8008696:	f7f7 fd5f 	bl	8000158 <__aeabi_dsub>
 800869a:	4602      	mov	r2, r0
 800869c:	460b      	mov	r3, r1
 800869e:	4692      	mov	sl, r2
 80086a0:	469b      	mov	fp, r3
 80086a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a4:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 80086a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7f7 feb3 	bl	8000418 <__aeabi_f2d>
 80086b2:	4680      	mov	r8, r0
 80086b4:	4689      	mov	r9, r1
 80086b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7f7 feac 	bl	8000418 <__aeabi_f2d>
 80086c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c2:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80086c6:	f7f7 feff 	bl	80004c8 <__aeabi_dmul>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	4640      	mov	r0, r8
 80086d0:	4649      	mov	r1, r9
 80086d2:	f7f7 fd41 	bl	8000158 <__aeabi_dsub>
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	4620      	mov	r0, r4
 80086dc:	4629      	mov	r1, r5
 80086de:	f7f7 fef3 	bl	80004c8 <__aeabi_dmul>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	4650      	mov	r0, sl
 80086e8:	4659      	mov	r1, fp
 80086ea:	f7f7 fd35 	bl	8000158 <__aeabi_dsub>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80086f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f8:	e9d3 4536 	ldrd	r4, r5, [r3, #216]	; 0xd8
 80086fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008700:	4618      	mov	r0, r3
 8008702:	f7f7 fe89 	bl	8000418 <__aeabi_f2d>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	4620      	mov	r0, r4
 800870c:	4629      	mov	r1, r5
 800870e:	f7f7 fd25 	bl	800015c <__adddf3>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4610      	mov	r0, r2
 8008718:	4619      	mov	r1, r3
 800871a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008720:	f7f7 fd1c 	bl	800015c <__adddf3>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4614      	mov	r4, r2
 800872a:	461d      	mov	r5, r3
 800872c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008730:	4618      	mov	r0, r3
 8008732:	f7f7 fe71 	bl	8000418 <__aeabi_f2d>
 8008736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008738:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 800873c:	f7f7 fec4 	bl	80004c8 <__aeabi_dmul>
 8008740:	4602      	mov	r2, r0
 8008742:	460b      	mov	r3, r1
 8008744:	4620      	mov	r0, r4
 8008746:	4629      	mov	r1, r5
 8008748:	f7f7 fd06 	bl	8000158 <__aeabi_dsub>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	4692      	mov	sl, r2
 8008752:	469b      	mov	fp, r3
 8008754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008756:	e9d3 893a 	ldrd	r8, r9, [r3, #232]	; 0xe8
 800875a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800875e:	4618      	mov	r0, r3
 8008760:	f7f7 fe5a 	bl	8000418 <__aeabi_f2d>
 8008764:	4604      	mov	r4, r0
 8008766:	460d      	mov	r5, r1
 8008768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800876c:	4618      	mov	r0, r3
 800876e:	f7f7 fe53 	bl	8000418 <__aeabi_f2d>
 8008772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008774:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8008778:	f7f7 fea6 	bl	80004c8 <__aeabi_dmul>
 800877c:	4602      	mov	r2, r0
 800877e:	460b      	mov	r3, r1
 8008780:	4620      	mov	r0, r4
 8008782:	4629      	mov	r1, r5
 8008784:	f7f7 fce8 	bl	8000158 <__aeabi_dsub>
 8008788:	4602      	mov	r2, r0
 800878a:	460b      	mov	r3, r1
 800878c:	4640      	mov	r0, r8
 800878e:	4649      	mov	r1, r9
 8008790:	f7f7 fe9a 	bl	80004c8 <__aeabi_dmul>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	4650      	mov	r0, sl
 800879a:	4659      	mov	r1, fp
 800879c:	f7f7 fcdc 	bl	8000158 <__aeabi_dsub>
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
 80087a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087a8:	f7f7 ffb8 	bl	800071c <__aeabi_ddiv>
 80087ac:	4602      	mov	r2, r0
 80087ae:	460b      	mov	r3, r1
 80087b0:	4610      	mov	r0, r2
 80087b2:	4619      	mov	r1, r3
 80087b4:	f04f 0200 	mov.w	r2, #0
 80087b8:	4bbc      	ldr	r3, [pc, #752]	; (8008aac <_ZN15Kalman_Filtresi3RunEPfS0_+0xa3c>)
 80087ba:	f7f7 fccd 	bl	8000158 <__aeabi_dsub>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	61ba      	str	r2, [r7, #24]
 80087c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80087c8:	61fb      	str	r3, [r7, #28]
 80087ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7f7 fe22 	bl	8000418 <__aeabi_f2d>
 80087d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80087da:	f7f7 fcbf 	bl	800015c <__adddf3>
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	4614      	mov	r4, r2
 80087e4:	461d      	mov	r5, r3
 80087e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7f7 fe14 	bl	8000418 <__aeabi_f2d>
 80087f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f2:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80087f6:	f7f7 fe67 	bl	80004c8 <__aeabi_dmul>
 80087fa:	4602      	mov	r2, r0
 80087fc:	460b      	mov	r3, r1
 80087fe:	4620      	mov	r0, r4
 8008800:	4629      	mov	r1, r5
 8008802:	f7f7 fca9 	bl	8000158 <__aeabi_dsub>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4692      	mov	sl, r2
 800880c:	469b      	mov	fp, r3
 800880e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008810:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 8008814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008818:	4618      	mov	r0, r3
 800881a:	f7f7 fdfd 	bl	8000418 <__aeabi_f2d>
 800881e:	4680      	mov	r8, r0
 8008820:	4689      	mov	r9, r1
 8008822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008826:	4618      	mov	r0, r3
 8008828:	f7f7 fdf6 	bl	8000418 <__aeabi_f2d>
 800882c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882e:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8008832:	f7f7 fe49 	bl	80004c8 <__aeabi_dmul>
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	4640      	mov	r0, r8
 800883c:	4649      	mov	r1, r9
 800883e:	f7f7 fc8b 	bl	8000158 <__aeabi_dsub>
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	4620      	mov	r0, r4
 8008848:	4629      	mov	r1, r5
 800884a:	f7f7 fe3d 	bl	80004c8 <__aeabi_dmul>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	4650      	mov	r0, sl
 8008854:	4659      	mov	r1, fp
 8008856:	f7f7 fc7f 	bl	8000158 <__aeabi_dsub>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008862:	f7f7 fe31 	bl	80004c8 <__aeabi_dmul>
 8008866:	4602      	mov	r2, r0
 8008868:	460b      	mov	r3, r1
 800886a:	4610      	mov	r0, r2
 800886c:	4619      	mov	r1, r3
 800886e:	f7f8 f903 	bl	8000a78 <__aeabi_d2f>
 8008872:	4602      	mov	r2, r0
 8008874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008876:	64da      	str	r2, [r3, #76]	; 0x4c
  S12_pitch = -((S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st))/(Q + S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st)) - 1)*(S12_pitch + (sa_p) - S22_pitch*st);
 8008878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800887c:	4618      	mov	r0, r3
 800887e:	f7f7 fdcb 	bl	8000418 <__aeabi_f2d>
 8008882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008884:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008888:	f7f7 fc68 	bl	800015c <__adddf3>
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	4614      	mov	r4, r2
 8008892:	461d      	mov	r5, r3
 8008894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008898:	4618      	mov	r0, r3
 800889a:	f7f7 fdbd 	bl	8000418 <__aeabi_f2d>
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80088a4:	f7f7 fe10 	bl	80004c8 <__aeabi_dmul>
 80088a8:	4602      	mov	r2, r0
 80088aa:	460b      	mov	r3, r1
 80088ac:	4620      	mov	r0, r4
 80088ae:	4629      	mov	r1, r5
 80088b0:	f7f7 fc52 	bl	8000158 <__aeabi_dsub>
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	4692      	mov	sl, r2
 80088ba:	469b      	mov	fp, r3
 80088bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088be:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 80088c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7f7 fda6 	bl	8000418 <__aeabi_f2d>
 80088cc:	4680      	mov	r8, r0
 80088ce:	4689      	mov	r9, r1
 80088d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7f7 fd9f 	bl	8000418 <__aeabi_f2d>
 80088da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088dc:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 80088e0:	f7f7 fdf2 	bl	80004c8 <__aeabi_dmul>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	4640      	mov	r0, r8
 80088ea:	4649      	mov	r1, r9
 80088ec:	f7f7 fc34 	bl	8000158 <__aeabi_dsub>
 80088f0:	4602      	mov	r2, r0
 80088f2:	460b      	mov	r3, r1
 80088f4:	4620      	mov	r0, r4
 80088f6:	4629      	mov	r1, r5
 80088f8:	f7f7 fde6 	bl	80004c8 <__aeabi_dmul>
 80088fc:	4602      	mov	r2, r0
 80088fe:	460b      	mov	r3, r1
 8008900:	4650      	mov	r0, sl
 8008902:	4659      	mov	r1, fp
 8008904:	f7f7 fc28 	bl	8000158 <__aeabi_dsub>
 8008908:	4602      	mov	r2, r0
 800890a:	460b      	mov	r3, r1
 800890c:	4692      	mov	sl, r2
 800890e:	469b      	mov	fp, r3
 8008910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008912:	e9d3 4536 	ldrd	r4, r5, [r3, #216]	; 0xd8
 8008916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800891a:	4618      	mov	r0, r3
 800891c:	f7f7 fd7c 	bl	8000418 <__aeabi_f2d>
 8008920:	4602      	mov	r2, r0
 8008922:	460b      	mov	r3, r1
 8008924:	4620      	mov	r0, r4
 8008926:	4629      	mov	r1, r5
 8008928:	f7f7 fc18 	bl	800015c <__adddf3>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4610      	mov	r0, r2
 8008932:	4619      	mov	r1, r3
 8008934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008936:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800893a:	f7f7 fc0f 	bl	800015c <__adddf3>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	4614      	mov	r4, r2
 8008944:	461d      	mov	r5, r3
 8008946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800894a:	4618      	mov	r0, r3
 800894c:	f7f7 fd64 	bl	8000418 <__aeabi_f2d>
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8008956:	f7f7 fdb7 	bl	80004c8 <__aeabi_dmul>
 800895a:	4602      	mov	r2, r0
 800895c:	460b      	mov	r3, r1
 800895e:	4620      	mov	r0, r4
 8008960:	4629      	mov	r1, r5
 8008962:	f7f7 fbf9 	bl	8000158 <__aeabi_dsub>
 8008966:	4602      	mov	r2, r0
 8008968:	460b      	mov	r3, r1
 800896a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800896e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008970:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 8008974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008978:	4618      	mov	r0, r3
 800897a:	f7f7 fd4d 	bl	8000418 <__aeabi_f2d>
 800897e:	4680      	mov	r8, r0
 8008980:	4689      	mov	r9, r1
 8008982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008986:	4618      	mov	r0, r3
 8008988:	f7f7 fd46 	bl	8000418 <__aeabi_f2d>
 800898c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898e:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8008992:	f7f7 fd99 	bl	80004c8 <__aeabi_dmul>
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	4640      	mov	r0, r8
 800899c:	4649      	mov	r1, r9
 800899e:	f7f7 fbdb 	bl	8000158 <__aeabi_dsub>
 80089a2:	4602      	mov	r2, r0
 80089a4:	460b      	mov	r3, r1
 80089a6:	4620      	mov	r0, r4
 80089a8:	4629      	mov	r1, r5
 80089aa:	f7f7 fd8d 	bl	80004c8 <__aeabi_dmul>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80089b6:	f7f7 fbcf 	bl	8000158 <__aeabi_dsub>
 80089ba:	4602      	mov	r2, r0
 80089bc:	460b      	mov	r3, r1
 80089be:	4650      	mov	r0, sl
 80089c0:	4659      	mov	r1, fp
 80089c2:	f7f7 feab 	bl	800071c <__aeabi_ddiv>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	4610      	mov	r0, r2
 80089cc:	4619      	mov	r1, r3
 80089ce:	f04f 0200 	mov.w	r2, #0
 80089d2:	4b36      	ldr	r3, [pc, #216]	; (8008aac <_ZN15Kalman_Filtresi3RunEPfS0_+0xa3c>)
 80089d4:	f7f7 fbc0 	bl	8000158 <__aeabi_dsub>
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	613a      	str	r2, [r7, #16]
 80089de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80089e2:	617b      	str	r3, [r7, #20]
 80089e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7f7 fd15 	bl	8000418 <__aeabi_f2d>
 80089ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f0:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80089f4:	f7f7 fbb2 	bl	800015c <__adddf3>
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	4614      	mov	r4, r2
 80089fe:	461d      	mov	r5, r3
 8008a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7f7 fd07 	bl	8000418 <__aeabi_f2d>
 8008a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0c:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8008a10:	f7f7 fd5a 	bl	80004c8 <__aeabi_dmul>
 8008a14:	4602      	mov	r2, r0
 8008a16:	460b      	mov	r3, r1
 8008a18:	4620      	mov	r0, r4
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	f7f7 fb9c 	bl	8000158 <__aeabi_dsub>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008a28:	f7f7 fd4e 	bl	80004c8 <__aeabi_dmul>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	4610      	mov	r0, r2
 8008a32:	4619      	mov	r1, r3
 8008a34:	f7f8 f820 	bl	8000a78 <__aeabi_d2f>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3c:	651a      	str	r2, [r3, #80]	; 0x50
  S21_pitch = S21_pitch + (sb_p) - S22_pitch*(st) - ((S21_pitch + (sb_p) - S22_pitch*(st))*(S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st)))/(Q + S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st));
 8008a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7f7 fce8 	bl	8000418 <__aeabi_f2d>
 8008a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8008a4e:	f7f7 fb85 	bl	800015c <__adddf3>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	4614      	mov	r4, r2
 8008a58:	461d      	mov	r5, r3
 8008a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7f7 fcda 	bl	8000418 <__aeabi_f2d>
 8008a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a66:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8008a6a:	f7f7 fd2d 	bl	80004c8 <__aeabi_dmul>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	460b      	mov	r3, r1
 8008a72:	4620      	mov	r0, r4
 8008a74:	4629      	mov	r1, r5
 8008a76:	f7f7 fb6f 	bl	8000158 <__aeabi_dsub>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8008a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7f7 fcc6 	bl	8000418 <__aeabi_f2d>
 8008a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8008a92:	f7f7 fb63 	bl	800015c <__adddf3>
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	4614      	mov	r4, r2
 8008a9c:	461d      	mov	r5, r3
 8008a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7f7 fcb8 	bl	8000418 <__aeabi_f2d>
 8008aa8:	e002      	b.n	8008ab0 <_ZN15Kalman_Filtresi3RunEPfS0_+0xa40>
 8008aaa:	bf00      	nop
 8008aac:	3ff00000 	.word	0x3ff00000
 8008ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab2:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8008ab6:	f7f7 fd07 	bl	80004c8 <__aeabi_dmul>
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	4620      	mov	r0, r4
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	f7f7 fb49 	bl	8000158 <__aeabi_dsub>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	4692      	mov	sl, r2
 8008acc:	469b      	mov	fp, r3
 8008ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7f7 fca0 	bl	8000418 <__aeabi_f2d>
 8008ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ada:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008ade:	f7f7 fb3d 	bl	800015c <__adddf3>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4614      	mov	r4, r2
 8008ae8:	461d      	mov	r5, r3
 8008aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7f7 fc92 	bl	8000418 <__aeabi_f2d>
 8008af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af6:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8008afa:	f7f7 fce5 	bl	80004c8 <__aeabi_dmul>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	4620      	mov	r0, r4
 8008b04:	4629      	mov	r1, r5
 8008b06:	f7f7 fb27 	bl	8000158 <__aeabi_dsub>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8008b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b14:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 8008b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7f7 fc7b 	bl	8000418 <__aeabi_f2d>
 8008b22:	4680      	mov	r8, r0
 8008b24:	4689      	mov	r9, r1
 8008b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7f7 fc74 	bl	8000418 <__aeabi_f2d>
 8008b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b32:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8008b36:	f7f7 fcc7 	bl	80004c8 <__aeabi_dmul>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4640      	mov	r0, r8
 8008b40:	4649      	mov	r1, r9
 8008b42:	f7f7 fb09 	bl	8000158 <__aeabi_dsub>
 8008b46:	4602      	mov	r2, r0
 8008b48:	460b      	mov	r3, r1
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	f7f7 fcbb 	bl	80004c8 <__aeabi_dmul>
 8008b52:	4602      	mov	r2, r0
 8008b54:	460b      	mov	r3, r1
 8008b56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008b5a:	f7f7 fafd 	bl	8000158 <__aeabi_dsub>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	460b      	mov	r3, r1
 8008b62:	4650      	mov	r0, sl
 8008b64:	4659      	mov	r1, fp
 8008b66:	f7f7 fcaf 	bl	80004c8 <__aeabi_dmul>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4692      	mov	sl, r2
 8008b70:	469b      	mov	fp, r3
 8008b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b74:	e9d3 4536 	ldrd	r4, r5, [r3, #216]	; 0xd8
 8008b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7f7 fc4b 	bl	8000418 <__aeabi_f2d>
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	4620      	mov	r0, r4
 8008b88:	4629      	mov	r1, r5
 8008b8a:	f7f7 fae7 	bl	800015c <__adddf3>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	460b      	mov	r3, r1
 8008b92:	4610      	mov	r0, r2
 8008b94:	4619      	mov	r1, r3
 8008b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b98:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008b9c:	f7f7 fade 	bl	800015c <__adddf3>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	4614      	mov	r4, r2
 8008ba6:	461d      	mov	r5, r3
 8008ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7f7 fc33 	bl	8000418 <__aeabi_f2d>
 8008bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb4:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8008bb8:	f7f7 fc86 	bl	80004c8 <__aeabi_dmul>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	4629      	mov	r1, r5
 8008bc4:	f7f7 fac8 	bl	8000158 <__aeabi_dsub>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8008bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd2:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 8008bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7f7 fc1c 	bl	8000418 <__aeabi_f2d>
 8008be0:	4680      	mov	r8, r0
 8008be2:	4689      	mov	r9, r1
 8008be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7f7 fc15 	bl	8000418 <__aeabi_f2d>
 8008bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf0:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8008bf4:	f7f7 fc68 	bl	80004c8 <__aeabi_dmul>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4640      	mov	r0, r8
 8008bfe:	4649      	mov	r1, r9
 8008c00:	f7f7 faaa 	bl	8000158 <__aeabi_dsub>
 8008c04:	4602      	mov	r2, r0
 8008c06:	460b      	mov	r3, r1
 8008c08:	4620      	mov	r0, r4
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	f7f7 fc5c 	bl	80004c8 <__aeabi_dmul>
 8008c10:	4602      	mov	r2, r0
 8008c12:	460b      	mov	r3, r1
 8008c14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008c18:	f7f7 fa9e 	bl	8000158 <__aeabi_dsub>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4650      	mov	r0, sl
 8008c22:	4659      	mov	r1, fp
 8008c24:	f7f7 fd7a 	bl	800071c <__aeabi_ddiv>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008c30:	f7f7 fa92 	bl	8000158 <__aeabi_dsub>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4610      	mov	r0, r2
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	f7f7 ff1c 	bl	8000a78 <__aeabi_d2f>
 8008c40:	4602      	mov	r2, r0
 8008c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c44:	655a      	str	r2, [r3, #84]	; 0x54
  S22_pitch = S22_pitch + (sb_p) - ((S21_pitch + (sb_p) - S22_pitch*(st))*(S12_pitch + (sa_p) - S22_pitch*st))/(Q + S11_pitch + (sa_p) - S21_pitch*st - (st)*(S12_pitch - S22_pitch*st));
 8008c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7f7 fbe4 	bl	8000418 <__aeabi_f2d>
 8008c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c52:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8008c56:	f7f7 fa81 	bl	800015c <__adddf3>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	4692      	mov	sl, r2
 8008c60:	469b      	mov	fp, r3
 8008c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7f7 fbd6 	bl	8000418 <__aeabi_f2d>
 8008c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8008c72:	f7f7 fa73 	bl	800015c <__adddf3>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	4614      	mov	r4, r2
 8008c7c:	461d      	mov	r5, r3
 8008c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7f7 fbc8 	bl	8000418 <__aeabi_f2d>
 8008c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8a:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8008c8e:	f7f7 fc1b 	bl	80004c8 <__aeabi_dmul>
 8008c92:	4602      	mov	r2, r0
 8008c94:	460b      	mov	r3, r1
 8008c96:	4620      	mov	r0, r4
 8008c98:	4629      	mov	r1, r5
 8008c9a:	f7f7 fa5d 	bl	8000158 <__aeabi_dsub>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	4614      	mov	r4, r2
 8008ca4:	461d      	mov	r5, r3
 8008ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7f7 fbb4 	bl	8000418 <__aeabi_f2d>
 8008cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008cb6:	f7f7 fa51 	bl	800015c <__adddf3>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	4690      	mov	r8, r2
 8008cc0:	4699      	mov	r9, r3
 8008cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7f7 fba6 	bl	8000418 <__aeabi_f2d>
 8008ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cce:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8008cd2:	f7f7 fbf9 	bl	80004c8 <__aeabi_dmul>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	460b      	mov	r3, r1
 8008cda:	4640      	mov	r0, r8
 8008cdc:	4649      	mov	r1, r9
 8008cde:	f7f7 fa3b 	bl	8000158 <__aeabi_dsub>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	4629      	mov	r1, r5
 8008cea:	f7f7 fbed 	bl	80004c8 <__aeabi_dmul>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8008cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf8:	e9d3 4536 	ldrd	r4, r5, [r3, #216]	; 0xd8
 8008cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7f7 fb89 	bl	8000418 <__aeabi_f2d>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	f7f7 fa25 	bl	800015c <__adddf3>
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	4610      	mov	r0, r2
 8008d18:	4619      	mov	r1, r3
 8008d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8008d20:	f7f7 fa1c 	bl	800015c <__adddf3>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	4614      	mov	r4, r2
 8008d2a:	461d      	mov	r5, r3
 8008d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7f7 fb71 	bl	8000418 <__aeabi_f2d>
 8008d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d38:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8008d3c:	f7f7 fbc4 	bl	80004c8 <__aeabi_dmul>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	4620      	mov	r0, r4
 8008d46:	4629      	mov	r1, r5
 8008d48:	f7f7 fa06 	bl	8000158 <__aeabi_dsub>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8008d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d56:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 8008d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7f7 fb5a 	bl	8000418 <__aeabi_f2d>
 8008d64:	4680      	mov	r8, r0
 8008d66:	4689      	mov	r9, r1
 8008d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7f7 fb53 	bl	8000418 <__aeabi_f2d>
 8008d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d74:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
 8008d78:	f7f7 fba6 	bl	80004c8 <__aeabi_dmul>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4640      	mov	r0, r8
 8008d82:	4649      	mov	r1, r9
 8008d84:	f7f7 f9e8 	bl	8000158 <__aeabi_dsub>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	4629      	mov	r1, r5
 8008d90:	f7f7 fb9a 	bl	80004c8 <__aeabi_dmul>
 8008d94:	4602      	mov	r2, r0
 8008d96:	460b      	mov	r3, r1
 8008d98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008d9c:	f7f7 f9dc 	bl	8000158 <__aeabi_dsub>
 8008da0:	4602      	mov	r2, r0
 8008da2:	460b      	mov	r3, r1
 8008da4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008da8:	f7f7 fcb8 	bl	800071c <__aeabi_ddiv>
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	4650      	mov	r0, sl
 8008db2:	4659      	mov	r1, fp
 8008db4:	f7f7 f9d0 	bl	8000158 <__aeabi_dsub>
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	f7f7 fe5a 	bl	8000a78 <__aeabi_d2f>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc8:	659a      	str	r2, [r3, #88]	; 0x58
    pitch_rate = gyroY;
 8008dca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008dcc:	f7f7 fb24 	bl	8000418 <__aeabi_f2d>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dd6:	e9c1 2308 	strd	r2, r3, [r1, #32]

	S11_p_yaw = -S11_m_yaw*(Kt11_yaw-1);  S12_p_yaw = -S12_m_yaw*(Kt11_yaw-1);
	S21_p_yaw = S21_m_yaw-S11_m_yaw*Kt21_yaw; S22_p_yaw = S22_m_yaw-S12_m_yaw*Kt21_yaw;

	S11_m_yaw = S11_p_yaw; S12_m_yaw = S12_p_yaw; S21_m_yaw = S21_p_yaw; S22_m_yaw = S22_p_yaw; */
  yaw_rate = gyroZ;
 8008dda:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ddc:	f7f7 fb1c 	bl	8000418 <__aeabi_f2d>
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008de6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8008dea:	e025      	b.n	8008e38 <_ZN15Kalman_Filtresi3RunEPfS0_+0xdc8>
    //=================================

    }

    else {
    	roll = roll_acc;
 8008dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dee:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7f7 fb10 	bl	8000418 <__aeabi_f2d>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dfe:	e9c1 2300 	strd	r2, r3, [r1]
    	pitch = pitch_acc;
 8008e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e04:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7f7 fb05 	bl	8000418 <__aeabi_f2d>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	460b      	mov	r3, r1
 8008e12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e14:	e9c1 2302 	strd	r2, r3, [r1, #8]

    	roll_comp  = roll_acc;
 8008e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1a:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8008e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e20:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    	pitch_comp = pitch_acc;
 8008e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e26:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8008e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

    	gyro_ready = true;
 8008e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    }

	pitch_eski=pitch_comp;
 8008e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8008e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e40:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	roll_eski=roll_comp;
 8008e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e46:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

    state.angles[0] = roll_comp;
 8008e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e52:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e58:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    state.angles[1] = pitch;
 8008e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008e62:	4610      	mov	r0, r2
 8008e64:	4619      	mov	r1, r3
 8008e66:	f7f7 fe07 	bl	8000a78 <__aeabi_d2f>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    state.angles[2] = 0;
 8008e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e74:	f04f 0200 	mov.w	r2, #0
 8008e78:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    state.rates[0] = roll_rate;
 8008e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008e82:	4610      	mov	r0, r2
 8008e84:	4619      	mov	r1, r3
 8008e86:	f7f7 fdf7 	bl	8000a78 <__aeabi_d2f>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    state.rates[1] = pitch_rate;
 8008e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e98:	4610      	mov	r0, r2
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	f7f7 fdec 	bl	8000a78 <__aeabi_d2f>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    state.rates[2] = yaw_rate;
 8008ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eaa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8008eae:	4610      	mov	r0, r2
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	f7f7 fde1 	bl	8000a78 <__aeabi_d2f>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

    state.bias[0] = roll_bias;
 8008ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    state.bias[1] = pitch_bias;
 8008ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ece:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    state.bias[2] = yaw_bias;
 8008ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

}
 8008edc:	bf00      	nop
 8008ede:	3750      	adds	r7, #80	; 0x50
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ee6:	bf00      	nop

08008ee8 <_ZN15Kalman_FiltresiD1Ev>:

Kalman_Filtresi::~Kalman_Filtresi() {}
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	370c      	adds	r7, #12
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bc80      	pop	{r7}
 8008efa:	4770      	bx	lr
 8008efc:	0000      	movs	r0, r0
	...

08008f00 <_ZN13LowPassFilterC1Eff>:

LowPassFilter::LowPassFilter():
	output(0),
	ePow(0){}

LowPassFilter::LowPassFilter(float iCutOffFrequency, float iDeltaTime):
 8008f00:	b5b0      	push	{r4, r5, r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
	output(0),
	ePow(1-exp(-iDeltaTime * 2 * M_PI * iCutOffFrequency))
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f04f 0200 	mov.w	r2, #0
 8008f12:	601a      	str	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7f7 fe01 	bl	8000b24 <__addsf3>
 8008f22:	4603      	mov	r3, r0
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7f7 fa77 	bl	8000418 <__aeabi_f2d>
 8008f2a:	a317      	add	r3, pc, #92	; (adr r3, 8008f88 <_ZN13LowPassFilterC1Eff+0x88>)
 8008f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f30:	f7f7 faca 	bl	80004c8 <__aeabi_dmul>
 8008f34:	4602      	mov	r2, r0
 8008f36:	460b      	mov	r3, r1
 8008f38:	4614      	mov	r4, r2
 8008f3a:	461d      	mov	r5, r3
 8008f3c:	68b8      	ldr	r0, [r7, #8]
 8008f3e:	f7f7 fa6b 	bl	8000418 <__aeabi_f2d>
 8008f42:	4602      	mov	r2, r0
 8008f44:	460b      	mov	r3, r1
 8008f46:	4620      	mov	r0, r4
 8008f48:	4629      	mov	r1, r5
 8008f4a:	f7f7 fabd 	bl	80004c8 <__aeabi_dmul>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	4610      	mov	r0, r2
 8008f54:	4619      	mov	r1, r3
 8008f56:	f000 fb5b 	bl	8009610 <exp>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	f04f 0000 	mov.w	r0, #0
 8008f62:	490b      	ldr	r1, [pc, #44]	; (8008f90 <_ZN13LowPassFilterC1Eff+0x90>)
 8008f64:	f7f7 f8f8 	bl	8000158 <__aeabi_dsub>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	4610      	mov	r0, r2
 8008f6e:	4619      	mov	r1, r3
 8008f70:	f7f7 fd82 	bl	8000a78 <__aeabi_d2f>
 8008f74:	4602      	mov	r2, r0
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	605a      	str	r2, [r3, #4]
	if(iCutOffFrequency <= 0){
		std::cout << "Warning: A LowPassFilter instance has been configured with 0 Hz as cut-off frequency.";
		ePow = 0;
	}
	#endif
}
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bdb0      	pop	{r4, r5, r7, pc}
 8008f84:	f3af 8000 	nop.w
 8008f88:	54442d18 	.word	0x54442d18
 8008f8c:	400921fb 	.word	0x400921fb
 8008f90:	3ff00000 	.word	0x3ff00000

08008f94 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID(): lpf(LP_FILTER_CUT_FREQ,st) {};
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a13      	ldr	r2, [pc, #76]	; (8008fec <_ZN3PIDC1Ev+0x58>)
 8008fa0:	601a      	str	r2, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a12      	ldr	r2, [pc, #72]	; (8008ff0 <_ZN3PIDC1Ev+0x5c>)
 8008fa6:	605a      	str	r2, [r3, #4]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	22c8      	movs	r2, #200	; 0xc8
 8008fac:	609a      	str	r2, [r3, #8]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7f7 fe6a 	bl	8000c8c <__aeabi_i2f>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	4619      	mov	r1, r3
 8008fbc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008fc0:	f7f7 ff6c 	bl	8000e9c <__aeabi_fdiv>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	60da      	str	r2, [r3, #12]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f103 0018 	add.w	r0, r3, #24
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008fdc:	f7ff ff90 	bl	8008f00 <_ZN13LowPassFilterC1Eff>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	42f00000 	.word	0x42f00000
 8008ff0:	c2f00000 	.word	0xc2f00000

08008ff4 <_ZN3PID7P_AngleEddd>:

double PID::P_Angle(double alpha_des, double alpha, double Kp_angle) {
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	e9c7 2300 	strd	r2, r3, [r7]
	double P;
	double e = alpha_des - alpha;
 8009000:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009004:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009008:	f7f7 f8a6 	bl	8000158 <__aeabi_dsub>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	e9c7 2306 	strd	r2, r3, [r7, #24]
	P = Kp_angle*e;
 8009014:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009018:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800901c:	f7f7 fa54 	bl	80004c8 <__aeabi_dmul>
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return P;
 8009028:	e9d7 2304 	ldrd	r2, r3, [r7, #16]

}
 800902c:	4610      	mov	r0, r2
 800902e:	4619      	mov	r1, r3
 8009030:	3720      	adds	r7, #32
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <_ZN3PID7PD_RateEddddd>:


double PID::PD_Rate(double alpha_dot_des, double alpha_dot, double Kp, double Ki, double Kd) {
 8009038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800903a:	b089      	sub	sp, #36	; 0x24
 800903c:	af02      	add	r7, sp, #8
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	e9c7 2300 	strd	r2, r3, [r7]

	e_roll = alpha_dot_des - alpha_dot;
 8009044:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009048:	e9d7 0100 	ldrd	r0, r1, [r7]
 800904c:	f7f7 f884 	bl	8000158 <__aeabi_dsub>
 8009050:	4602      	mov	r2, r0
 8009052:	460b      	mov	r3, r1
 8009054:	4610      	mov	r0, r2
 8009056:	4619      	mov	r1, r3
 8009058:	f7f7 fd0e 	bl	8000a78 <__aeabi_d2f>
 800905c:	4602      	mov	r2, r0
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	621a      	str	r2, [r3, #32]
  double e_roll_int = e_roll;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	4618      	mov	r0, r3
 8009068:	f7f7 f9d6 	bl	8000418 <__aeabi_f2d>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	e9c7 2304 	strd	r2, r3, [r7, #16]

  if((int)pd_roll_buf != (int)pd_roll_sat_buf) {
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	4618      	mov	r0, r3
 800907a:	f7f8 f837 	bl	80010ec <__aeabi_f2iz>
 800907e:	4604      	mov	r4, r0
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009084:	4618      	mov	r0, r3
 8009086:	f7f8 f831 	bl	80010ec <__aeabi_f2iz>
 800908a:	4603      	mov	r3, r0
 800908c:	429c      	cmp	r4, r3
 800908e:	d02b      	beq.n	80090e8 <_ZN3PID7PD_RateEddddd+0xb0>
    if(sgn(e_roll) == sgn(pd_roll_sat_buf)) {
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6a1b      	ldr	r3, [r3, #32]
 8009094:	4618      	mov	r0, r3
 8009096:	f7f7 f9bf 	bl	8000418 <__aeabi_f2d>
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f000 f940 	bl	8009324 <_ZN3PID3sgnEd>
 80090a4:	4604      	mov	r4, r0
 80090a6:	460d      	mov	r5, r1
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7f7 f9b3 	bl	8000418 <__aeabi_f2d>
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f000 f934 	bl	8009324 <_ZN3PID3sgnEd>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	2101      	movs	r1, #1
 80090c2:	460e      	mov	r6, r1
 80090c4:	4620      	mov	r0, r4
 80090c6:	4629      	mov	r1, r5
 80090c8:	f7f7 fc66 	bl	8000998 <__aeabi_dcmpeq>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d101      	bne.n	80090d6 <_ZN3PID7PD_RateEddddd+0x9e>
 80090d2:	2300      	movs	r3, #0
 80090d4:	461e      	mov	r6, r3
 80090d6:	b2f3      	uxtb	r3, r6
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d005      	beq.n	80090e8 <_ZN3PID7PD_RateEddddd+0xb0>
      e_roll_int = 0;
 80090dc:	f04f 0200 	mov.w	r2, #0
 80090e0:	f04f 0300 	mov.w	r3, #0
 80090e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    }
  }

  	de_filt = N * (Kd * e_roll - de_int);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6a1b      	ldr	r3, [r3, #32]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7f7 f993 	bl	8000418 <__aeabi_f2d>
 80090f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80090f6:	f7f7 f9e7 	bl	80004c8 <__aeabi_dmul>
 80090fa:	4602      	mov	r2, r0
 80090fc:	460b      	mov	r3, r1
 80090fe:	4614      	mov	r4, r2
 8009100:	461d      	mov	r5, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009106:	4618      	mov	r0, r3
 8009108:	f7f7 f986 	bl	8000418 <__aeabi_f2d>
 800910c:	4602      	mov	r2, r0
 800910e:	460b      	mov	r3, r1
 8009110:	4620      	mov	r0, r4
 8009112:	4629      	mov	r1, r5
 8009114:	f7f7 f820 	bl	8000158 <__aeabi_dsub>
 8009118:	4602      	mov	r2, r0
 800911a:	460b      	mov	r3, r1
 800911c:	4610      	mov	r0, r2
 800911e:	4619      	mov	r1, r3
 8009120:	f04f 0200 	mov.w	r2, #0
 8009124:	4b5c      	ldr	r3, [pc, #368]	; (8009298 <_ZN3PID7PD_RateEddddd+0x260>)
 8009126:	f7f7 f9cf 	bl	80004c8 <__aeabi_dmul>
 800912a:	4602      	mov	r2, r0
 800912c:	460b      	mov	r3, r1
 800912e:	4610      	mov	r0, r2
 8009130:	4619      	mov	r1, r3
 8009132:	f7f7 fca1 	bl	8000a78 <__aeabi_d2f>
 8009136:	4602      	mov	r2, r0
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	645a      	str	r2, [r3, #68]	; 0x44
  	de_int += de_filt*st;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	4619      	mov	r1, r3
 800914a:	4610      	mov	r0, r2
 800914c:	f7f7 fdf2 	bl	8000d34 <__aeabi_fmul>
 8009150:	4603      	mov	r3, r0
 8009152:	4619      	mov	r1, r3
 8009154:	4620      	mov	r0, r4
 8009156:	f7f7 fce5 	bl	8000b24 <__addsf3>
 800915a:	4603      	mov	r3, r0
 800915c:	461a      	mov	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	649a      	str	r2, [r3, #72]	; 0x48

	de = e_roll - e_eski_roll;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6a1a      	ldr	r2, [r3, #32]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800916a:	4619      	mov	r1, r3
 800916c:	4610      	mov	r0, r2
 800916e:	f7f7 fcd7 	bl	8000b20 <__aeabi_fsub>
 8009172:	4603      	mov	r3, r0
 8009174:	461a      	mov	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	641a      	str	r2, [r3, #64]	; 0x40
	e_eski_roll = e_roll;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6a1a      	ldr	r2, [r3, #32]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	629a      	str	r2, [r3, #40]	; 0x28

  ie_roll += e_roll_int*st;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009186:	4618      	mov	r0, r3
 8009188:	f7f7 f946 	bl	8000418 <__aeabi_f2d>
 800918c:	4604      	mov	r4, r0
 800918e:	460d      	mov	r5, r1
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	4618      	mov	r0, r3
 8009196:	f7f7 f93f 	bl	8000418 <__aeabi_f2d>
 800919a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800919e:	f7f7 f993 	bl	80004c8 <__aeabi_dmul>
 80091a2:	4602      	mov	r2, r0
 80091a4:	460b      	mov	r3, r1
 80091a6:	4620      	mov	r0, r4
 80091a8:	4629      	mov	r1, r5
 80091aa:	f7f6 ffd7 	bl	800015c <__adddf3>
 80091ae:	4602      	mov	r2, r0
 80091b0:	460b      	mov	r3, r1
 80091b2:	4610      	mov	r0, r2
 80091b4:	4619      	mov	r1, r3
 80091b6:	f7f7 fc5f 	bl	8000a78 <__aeabi_d2f>
 80091ba:	4602      	mov	r2, r0
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	631a      	str	r2, [r3, #48]	; 0x30

  ie_roll_sat = ie_roll;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	639a      	str	r2, [r3, #56]	; 0x38
	

	P = Kp*e_roll; D = de_filt; I = Ki * ie_roll_sat;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6a1b      	ldr	r3, [r3, #32]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7f7 f923 	bl	8000418 <__aeabi_f2d>
 80091d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80091d6:	f7f7 f977 	bl	80004c8 <__aeabi_dmul>
 80091da:	4602      	mov	r2, r0
 80091dc:	460b      	mov	r3, r1
 80091de:	68f9      	ldr	r1, [r7, #12]
 80091e0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7f7 f915 	bl	8000418 <__aeabi_f2d>
 80091ee:	4602      	mov	r2, r0
 80091f0:	460b      	mov	r3, r1
 80091f2:	68f9      	ldr	r1, [r7, #12]
 80091f4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7f7 f90b 	bl	8000418 <__aeabi_f2d>
 8009202:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009206:	f7f7 f95f 	bl	80004c8 <__aeabi_dmul>
 800920a:	4602      	mov	r2, r0
 800920c:	460b      	mov	r3, r1
 800920e:	68f9      	ldr	r1, [r7, #12]
 8009210:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	//D = lpf.update(D);
	pd = P + I + D;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8009220:	f7f6 ff9c 	bl	800015c <__adddf3>
 8009224:	4602      	mov	r2, r0
 8009226:	460b      	mov	r3, r1
 8009228:	4610      	mov	r0, r2
 800922a:	4619      	mov	r1, r3
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8009232:	f7f6 ff93 	bl	800015c <__adddf3>
 8009236:	4602      	mov	r2, r0
 8009238:	460b      	mov	r3, r1
 800923a:	68f9      	ldr	r1, [r7, #12]
 800923c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
  	pd_roll_buf = pd;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8009246:	4610      	mov	r0, r2
 8009248:	4619      	mov	r1, r3
 800924a:	f7f7 fc15 	bl	8000a78 <__aeabi_d2f>
 800924e:	4602      	mov	r2, r0
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	611a      	str	r2, [r3, #16]
	pd  = Sat(pd,  300, -300);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800925a:	4910      	ldr	r1, [pc, #64]	; (800929c <_ZN3PID7PD_RateEddddd+0x264>)
 800925c:	9101      	str	r1, [sp, #4]
 800925e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8009262:	9100      	str	r1, [sp, #0]
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f000 f8d5 	bl	8009414 <_ZN3PID3SatEdii>
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	68f9      	ldr	r1, [r7, #12]
 8009270:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	pd_roll_sat_buf = pd;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800927a:	4610      	mov	r0, r2
 800927c:	4619      	mov	r1, r3
 800927e:	f7f7 fbfb 	bl	8000a78 <__aeabi_d2f>
 8009282:	4602      	mov	r2, r0
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	63da      	str	r2, [r3, #60]	; 0x3c
    return pd;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68

}
 800928e:	4610      	mov	r0, r2
 8009290:	4619      	mov	r1, r3
 8009292:	371c      	adds	r7, #28
 8009294:	46bd      	mov	sp, r7
 8009296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009298:	40240000 	.word	0x40240000
 800929c:	fffffed4 	.word	0xfffffed4

080092a0 <_ZN3PID5resetEv>:

void PID::reset() {
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
	ie_roll_sat = 0;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f04f 0200 	mov.w	r2, #0
 80092ae:	639a      	str	r2, [r3, #56]	; 0x38
	de_filt = 0;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f04f 0200 	mov.w	r2, #0
 80092b6:	645a      	str	r2, [r3, #68]	; 0x44
	de_int = 0;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f04f 0200 	mov.w	r2, #0
 80092be:	649a      	str	r2, [r3, #72]	; 0x48
}
 80092c0:	bf00      	nop
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bc80      	pop	{r7}
 80092c8:	4770      	bx	lr

080092ca <_ZN3PID10P_Rate_YawEddd>:


double PID::P_Rate_Yaw(double alpha_dot_des, double alpha_dot, double Kp) {
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b08a      	sub	sp, #40	; 0x28
 80092ce:	af02      	add	r7, sp, #8
 80092d0:	60f8      	str	r0, [r7, #12]
 80092d2:	e9c7 2300 	strd	r2, r3, [r7]
	double P;
	double e_yaw = alpha_dot_des - alpha_dot;	
 80092d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092de:	f7f6 ff3b 	bl	8000158 <__aeabi_dsub>
 80092e2:	4602      	mov	r2, r0
 80092e4:	460b      	mov	r3, r1
 80092e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	P = Kp*e_yaw;
 80092ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092ee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80092f2:	f7f7 f8e9 	bl	80004c8 <__aeabi_dmul>
 80092f6:	4602      	mov	r2, r0
 80092f8:	460b      	mov	r3, r1
 80092fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	P    = Sat(P,    150, -150);
 80092fe:	f06f 0395 	mvn.w	r3, #149	; 0x95
 8009302:	9301      	str	r3, [sp, #4]
 8009304:	2396      	movs	r3, #150	; 0x96
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f000 f881 	bl	8009414 <_ZN3PID3SatEdii>
 8009312:	e9c7 0104 	strd	r0, r1, [r7, #16]

    return P;
 8009316:	e9d7 2304 	ldrd	r2, r3, [r7, #16]

}
 800931a:	4610      	mov	r0, r2
 800931c:	4619      	mov	r1, r3
 800931e:	3720      	adds	r7, #32
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <_ZN3PID3sgnEd>:

double PID::sgn(double v) {
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	e9c7 2300 	strd	r2, r3, [r7]
  if (v < 0) return -1;
 8009330:	f04f 0200 	mov.w	r2, #0
 8009334:	f04f 0300 	mov.w	r3, #0
 8009338:	e9d7 0100 	ldrd	r0, r1, [r7]
 800933c:	f7f7 fb36 	bl	80009ac <__aeabi_dcmplt>
 8009340:	4603      	mov	r3, r0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d003      	beq.n	800934e <_ZN3PID3sgnEd+0x2a>
 8009346:	f04f 0200 	mov.w	r2, #0
 800934a:	4b0d      	ldr	r3, [pc, #52]	; (8009380 <_ZN3PID3sgnEd+0x5c>)
 800934c:	e012      	b.n	8009374 <_ZN3PID3sgnEd+0x50>
  if (v > 0) return 1;
 800934e:	f04f 0200 	mov.w	r2, #0
 8009352:	f04f 0300 	mov.w	r3, #0
 8009356:	e9d7 0100 	ldrd	r0, r1, [r7]
 800935a:	f7f7 fb45 	bl	80009e8 <__aeabi_dcmpgt>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d003      	beq.n	800936c <_ZN3PID3sgnEd+0x48>
 8009364:	f04f 0200 	mov.w	r2, #0
 8009368:	4b06      	ldr	r3, [pc, #24]	; (8009384 <_ZN3PID3sgnEd+0x60>)
 800936a:	e003      	b.n	8009374 <_ZN3PID3sgnEd+0x50>
  return 0;
 800936c:	f04f 0200 	mov.w	r2, #0
 8009370:	f04f 0300 	mov.w	r3, #0
}
 8009374:	4610      	mov	r0, r2
 8009376:	4619      	mov	r1, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	bff00000 	.word	0xbff00000
 8009384:	3ff00000 	.word	0x3ff00000

08009388 <_ZN3PID3SatEdiii>:

 double PID::Sat(double pwm, int max, int min, int thr) {
 8009388:	b580      	push	{r7, lr}
 800938a:	b086      	sub	sp, #24
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	e9c7 2300 	strd	r2, r3, [r7]
	double pwm_out;

	if(thr > 1020) {
 8009394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009396:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800939a:	dd2c      	ble.n	80093f6 <_ZN3PID3SatEdiii+0x6e>
		if(pwm > max) {
 800939c:	6a38      	ldr	r0, [r7, #32]
 800939e:	f7f7 f829 	bl	80003f4 <__aeabi_i2d>
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093aa:	f7f7 fb1d 	bl	80009e8 <__aeabi_dcmpgt>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d007      	beq.n	80093c4 <_ZN3PID3SatEdiii+0x3c>
			pwm_out = max;
 80093b4:	6a38      	ldr	r0, [r7, #32]
 80093b6:	f7f7 f81d 	bl	80003f4 <__aeabi_i2d>
 80093ba:	4602      	mov	r2, r0
 80093bc:	460b      	mov	r3, r1
 80093be:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80093c2:	e01d      	b.n	8009400 <_ZN3PID3SatEdiii+0x78>
		}

		else if (pwm < min) {
 80093c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093c6:	f7f7 f815 	bl	80003f4 <__aeabi_i2d>
 80093ca:	4602      	mov	r2, r0
 80093cc:	460b      	mov	r3, r1
 80093ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093d2:	f7f7 faeb 	bl	80009ac <__aeabi_dcmplt>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d007      	beq.n	80093ec <_ZN3PID3SatEdiii+0x64>
			pwm_out = min;
 80093dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093de:	f7f7 f809 	bl	80003f4 <__aeabi_i2d>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80093ea:	e009      	b.n	8009400 <_ZN3PID3SatEdiii+0x78>
		}

		else {
			pwm_out = pwm;
 80093ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80093f4:	e004      	b.n	8009400 <_ZN3PID3SatEdiii+0x78>


	}

	else {
		pwm_out = 1000;
 80093f6:	f04f 0200 	mov.w	r2, #0
 80093fa:	4b05      	ldr	r3, [pc, #20]	; (8009410 <_ZN3PID3SatEdiii+0x88>)
 80093fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	return pwm_out;
 8009400:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8009404:	4610      	mov	r0, r2
 8009406:	4619      	mov	r1, r3
 8009408:	3718      	adds	r7, #24
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	408f4000 	.word	0x408f4000

08009414 <_ZN3PID3SatEdii>:

 double PID::Sat(double pwm, int max, int min) {
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	e9c7 2300 	strd	r2, r3, [r7]
	double pwm_out;

		if(pwm > max) {
 8009420:	6a38      	ldr	r0, [r7, #32]
 8009422:	f7f6 ffe7 	bl	80003f4 <__aeabi_i2d>
 8009426:	4602      	mov	r2, r0
 8009428:	460b      	mov	r3, r1
 800942a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800942e:	f7f7 fadb 	bl	80009e8 <__aeabi_dcmpgt>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d007      	beq.n	8009448 <_ZN3PID3SatEdii+0x34>
			pwm_out = max;
 8009438:	6a38      	ldr	r0, [r7, #32]
 800943a:	f7f6 ffdb 	bl	80003f4 <__aeabi_i2d>
 800943e:	4602      	mov	r2, r0
 8009440:	460b      	mov	r3, r1
 8009442:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8009446:	e017      	b.n	8009478 <_ZN3PID3SatEdii+0x64>
		}

		else if (pwm < min) {
 8009448:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800944a:	f7f6 ffd3 	bl	80003f4 <__aeabi_i2d>
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009456:	f7f7 faa9 	bl	80009ac <__aeabi_dcmplt>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d007      	beq.n	8009470 <_ZN3PID3SatEdii+0x5c>
			pwm_out = min;
 8009460:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009462:	f7f6 ffc7 	bl	80003f4 <__aeabi_i2d>
 8009466:	4602      	mov	r2, r0
 8009468:	460b      	mov	r3, r1
 800946a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800946e:	e003      	b.n	8009478 <_ZN3PID3SatEdii+0x64>
		}

		else {
			pwm_out = pwm;
 8009470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009474:	e9c7 2304 	strd	r2, r3, [r7, #16]
		}




	return pwm_out;
 8009478:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800947c:	4610      	mov	r0, r2
 800947e:	4619      	mov	r1, r3
 8009480:	3718      	adds	r7, #24
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <_ZN3PID7pwm2angEt>:

float PID::pwm2ang(unsigned short int pwm) {
 8009486:	b580      	push	{r7, lr}
 8009488:	b086      	sub	sp, #24
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
 800948e:	460b      	mov	r3, r1
 8009490:	807b      	strh	r3, [r7, #2]
	int in_min  = 1000;
 8009492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009496:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8009498:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800949c:	613b      	str	r3, [r7, #16]
	int out_min = -30;
 800949e:	f06f 031d 	mvn.w	r3, #29
 80094a2:	60fb      	str	r3, [r7, #12]
	int out_max  = 30;
 80094a4:	231e      	movs	r3, #30
 80094a6:	60bb      	str	r3, [r7, #8]

	return (pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80094a8:	887a      	ldrh	r2, [r7, #2]
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	68b9      	ldr	r1, [r7, #8]
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	1a8a      	subs	r2, r1, r2
 80094b4:	fb02 f203 	mul.w	r2, r2, r3
 80094b8:	6939      	ldr	r1, [r7, #16]
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	1acb      	subs	r3, r1, r3
 80094be:	fb92 f2f3 	sdiv	r2, r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	4413      	add	r3, r2
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7f7 fbe0 	bl	8000c8c <__aeabi_i2f>
 80094cc:	4603      	mov	r3, r0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <_ZN3PID8pwm2rateEt>:

float PID::pwm2rate(unsigned short int pwm) {
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b086      	sub	sp, #24
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	460b      	mov	r3, r1
 80094e0:	807b      	strh	r3, [r7, #2]
	int in_min  = 1000;
 80094e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80094e6:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 80094e8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80094ec:	613b      	str	r3, [r7, #16]
	int out_min = -100;
 80094ee:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80094f2:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 80094f4:	2364      	movs	r3, #100	; 0x64
 80094f6:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 80094f8:	887a      	ldrh	r2, [r7, #2]
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	1ad3      	subs	r3, r2, r3
 80094fe:	68b9      	ldr	r1, [r7, #8]
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	1a8a      	subs	r2, r1, r2
 8009504:	fb02 f203 	mul.w	r2, r2, r3
 8009508:	6939      	ldr	r1, [r7, #16]
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	1acb      	subs	r3, r1, r3
 800950e:	fb92 f2f3 	sdiv	r2, r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	4413      	add	r3, r2
 8009516:	425b      	negs	r3, r3
 8009518:	4618      	mov	r0, r3
 800951a:	f7f7 fbb7 	bl	8000c8c <__aeabi_i2f>
 800951e:	4603      	mov	r3, r0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3718      	adds	r7, #24
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <_ZN3PID7pwm2motEti>:

//Convert pwm to motor speed for simulation
float PID::pwm2mot(unsigned short int pwm, int dir) {
 8009528:	b590      	push	{r4, r7, lr}
 800952a:	b089      	sub	sp, #36	; 0x24
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	460b      	mov	r3, r1
 8009532:	607a      	str	r2, [r7, #4]
 8009534:	817b      	strh	r3, [r7, #10]
	float in_min  = 1000;
 8009536:	4b1d      	ldr	r3, [pc, #116]	; (80095ac <_ZN3PID7pwm2motEti+0x84>)
 8009538:	61fb      	str	r3, [r7, #28]
	float in_max  = 2000;
 800953a:	4b1d      	ldr	r3, [pc, #116]	; (80095b0 <_ZN3PID7pwm2motEti+0x88>)
 800953c:	61bb      	str	r3, [r7, #24]
	float out_min = 0;
 800953e:	f04f 0300 	mov.w	r3, #0
 8009542:	617b      	str	r3, [r7, #20]
	float out_max  = 1326;
 8009544:	4b1b      	ldr	r3, [pc, #108]	; (80095b4 <_ZN3PID7pwm2motEti+0x8c>)
 8009546:	613b      	str	r3, [r7, #16]

	return (float)(dir) * ((float)pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f7f7 fb9f 	bl	8000c8c <__aeabi_i2f>
 800954e:	4604      	mov	r4, r0
 8009550:	897b      	ldrh	r3, [r7, #10]
 8009552:	4618      	mov	r0, r3
 8009554:	f7f7 fb96 	bl	8000c84 <__aeabi_ui2f>
 8009558:	4603      	mov	r3, r0
 800955a:	69f9      	ldr	r1, [r7, #28]
 800955c:	4618      	mov	r0, r3
 800955e:	f7f7 fadf 	bl	8000b20 <__aeabi_fsub>
 8009562:	4603      	mov	r3, r0
 8009564:	4619      	mov	r1, r3
 8009566:	4620      	mov	r0, r4
 8009568:	f7f7 fbe4 	bl	8000d34 <__aeabi_fmul>
 800956c:	4603      	mov	r3, r0
 800956e:	461c      	mov	r4, r3
 8009570:	6979      	ldr	r1, [r7, #20]
 8009572:	6938      	ldr	r0, [r7, #16]
 8009574:	f7f7 fad4 	bl	8000b20 <__aeabi_fsub>
 8009578:	4603      	mov	r3, r0
 800957a:	4619      	mov	r1, r3
 800957c:	4620      	mov	r0, r4
 800957e:	f7f7 fbd9 	bl	8000d34 <__aeabi_fmul>
 8009582:	4603      	mov	r3, r0
 8009584:	461c      	mov	r4, r3
 8009586:	69f9      	ldr	r1, [r7, #28]
 8009588:	69b8      	ldr	r0, [r7, #24]
 800958a:	f7f7 fac9 	bl	8000b20 <__aeabi_fsub>
 800958e:	4603      	mov	r3, r0
 8009590:	4619      	mov	r1, r3
 8009592:	4620      	mov	r0, r4
 8009594:	f7f7 fc82 	bl	8000e9c <__aeabi_fdiv>
 8009598:	4603      	mov	r3, r0
 800959a:	6979      	ldr	r1, [r7, #20]
 800959c:	4618      	mov	r0, r3
 800959e:	f7f7 fac1 	bl	8000b24 <__addsf3>
 80095a2:	4603      	mov	r3, r0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3724      	adds	r7, #36	; 0x24
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd90      	pop	{r4, r7, pc}
 80095ac:	447a0000 	.word	0x447a0000
 80095b0:	44fa0000 	.word	0x44fa0000
 80095b4:	44a5c000 	.word	0x44a5c000

080095b8 <_ZN3PIDD1Ev>:

PID::~PID() {};
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4618      	mov	r0, r3
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bc80      	pop	{r7}
 80095ca:	4770      	bx	lr

080095cc <_ZdlPv>:
 80095cc:	f001 bb78 	b.w	800acc0 <free>

080095d0 <_Znwj>:
 80095d0:	2801      	cmp	r0, #1
 80095d2:	bf38      	it	cc
 80095d4:	2001      	movcc	r0, #1
 80095d6:	b510      	push	{r4, lr}
 80095d8:	4604      	mov	r4, r0
 80095da:	4620      	mov	r0, r4
 80095dc:	f001 fb68 	bl	800acb0 <malloc>
 80095e0:	b930      	cbnz	r0, 80095f0 <_Znwj+0x20>
 80095e2:	f000 f80d 	bl	8009600 <_ZSt15get_new_handlerv>
 80095e6:	b908      	cbnz	r0, 80095ec <_Znwj+0x1c>
 80095e8:	f001 fb30 	bl	800ac4c <abort>
 80095ec:	4780      	blx	r0
 80095ee:	e7f4      	b.n	80095da <_Znwj+0xa>
 80095f0:	bd10      	pop	{r4, pc}

080095f2 <_ZSt17__throw_bad_allocv>:
 80095f2:	b508      	push	{r3, lr}
 80095f4:	f001 fb2a 	bl	800ac4c <abort>

080095f8 <_ZSt20__throw_length_errorPKc>:
 80095f8:	b508      	push	{r3, lr}
 80095fa:	f001 fb27 	bl	800ac4c <abort>
	...

08009600 <_ZSt15get_new_handlerv>:
 8009600:	4b02      	ldr	r3, [pc, #8]	; (800960c <_ZSt15get_new_handlerv+0xc>)
 8009602:	6818      	ldr	r0, [r3, #0]
 8009604:	f3bf 8f5b 	dmb	ish
 8009608:	4770      	bx	lr
 800960a:	bf00      	nop
 800960c:	20000830 	.word	0x20000830

08009610 <exp>:
 8009610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009612:	4606      	mov	r6, r0
 8009614:	460f      	mov	r7, r1
 8009616:	f000 f92f 	bl	8009878 <__ieee754_exp>
 800961a:	4b1b      	ldr	r3, [pc, #108]	; (8009688 <exp+0x78>)
 800961c:	4604      	mov	r4, r0
 800961e:	f993 3000 	ldrsb.w	r3, [r3]
 8009622:	460d      	mov	r5, r1
 8009624:	3301      	adds	r3, #1
 8009626:	d012      	beq.n	800964e <exp+0x3e>
 8009628:	4630      	mov	r0, r6
 800962a:	4639      	mov	r1, r7
 800962c:	f001 f9ea 	bl	800aa04 <finite>
 8009630:	b168      	cbz	r0, 800964e <exp+0x3e>
 8009632:	a311      	add	r3, pc, #68	; (adr r3, 8009678 <exp+0x68>)
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	4630      	mov	r0, r6
 800963a:	4639      	mov	r1, r7
 800963c:	f7f7 f9d4 	bl	80009e8 <__aeabi_dcmpgt>
 8009640:	b140      	cbz	r0, 8009654 <exp+0x44>
 8009642:	f001 fb0b 	bl	800ac5c <__errno>
 8009646:	2322      	movs	r3, #34	; 0x22
 8009648:	2400      	movs	r4, #0
 800964a:	4d10      	ldr	r5, [pc, #64]	; (800968c <exp+0x7c>)
 800964c:	6003      	str	r3, [r0, #0]
 800964e:	4620      	mov	r0, r4
 8009650:	4629      	mov	r1, r5
 8009652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009654:	4630      	mov	r0, r6
 8009656:	a30a      	add	r3, pc, #40	; (adr r3, 8009680 <exp+0x70>)
 8009658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965c:	4639      	mov	r1, r7
 800965e:	f7f7 f9a5 	bl	80009ac <__aeabi_dcmplt>
 8009662:	2800      	cmp	r0, #0
 8009664:	d0f3      	beq.n	800964e <exp+0x3e>
 8009666:	f001 faf9 	bl	800ac5c <__errno>
 800966a:	2322      	movs	r3, #34	; 0x22
 800966c:	2400      	movs	r4, #0
 800966e:	2500      	movs	r5, #0
 8009670:	6003      	str	r3, [r0, #0]
 8009672:	e7ec      	b.n	800964e <exp+0x3e>
 8009674:	f3af 8000 	nop.w
 8009678:	fefa39ef 	.word	0xfefa39ef
 800967c:	40862e42 	.word	0x40862e42
 8009680:	d52d3051 	.word	0xd52d3051
 8009684:	c0874910 	.word	0xc0874910
 8009688:	20000009 	.word	0x20000009
 800968c:	7ff00000 	.word	0x7ff00000

08009690 <pow>:
 8009690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009694:	461f      	mov	r7, r3
 8009696:	4680      	mov	r8, r0
 8009698:	4689      	mov	r9, r1
 800969a:	4616      	mov	r6, r2
 800969c:	f000 fa58 	bl	8009b50 <__ieee754_pow>
 80096a0:	4b4d      	ldr	r3, [pc, #308]	; (80097d8 <pow+0x148>)
 80096a2:	4604      	mov	r4, r0
 80096a4:	f993 3000 	ldrsb.w	r3, [r3]
 80096a8:	460d      	mov	r5, r1
 80096aa:	3301      	adds	r3, #1
 80096ac:	d015      	beq.n	80096da <pow+0x4a>
 80096ae:	4632      	mov	r2, r6
 80096b0:	463b      	mov	r3, r7
 80096b2:	4630      	mov	r0, r6
 80096b4:	4639      	mov	r1, r7
 80096b6:	f7f7 f9a1 	bl	80009fc <__aeabi_dcmpun>
 80096ba:	b970      	cbnz	r0, 80096da <pow+0x4a>
 80096bc:	4642      	mov	r2, r8
 80096be:	464b      	mov	r3, r9
 80096c0:	4640      	mov	r0, r8
 80096c2:	4649      	mov	r1, r9
 80096c4:	f7f7 f99a 	bl	80009fc <__aeabi_dcmpun>
 80096c8:	2200      	movs	r2, #0
 80096ca:	2300      	movs	r3, #0
 80096cc:	b148      	cbz	r0, 80096e2 <pow+0x52>
 80096ce:	4630      	mov	r0, r6
 80096d0:	4639      	mov	r1, r7
 80096d2:	f7f7 f961 	bl	8000998 <__aeabi_dcmpeq>
 80096d6:	2800      	cmp	r0, #0
 80096d8:	d17b      	bne.n	80097d2 <pow+0x142>
 80096da:	4620      	mov	r0, r4
 80096dc:	4629      	mov	r1, r5
 80096de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096e2:	4640      	mov	r0, r8
 80096e4:	4649      	mov	r1, r9
 80096e6:	f7f7 f957 	bl	8000998 <__aeabi_dcmpeq>
 80096ea:	b1e0      	cbz	r0, 8009726 <pow+0x96>
 80096ec:	2200      	movs	r2, #0
 80096ee:	2300      	movs	r3, #0
 80096f0:	4630      	mov	r0, r6
 80096f2:	4639      	mov	r1, r7
 80096f4:	f7f7 f950 	bl	8000998 <__aeabi_dcmpeq>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d16a      	bne.n	80097d2 <pow+0x142>
 80096fc:	4630      	mov	r0, r6
 80096fe:	4639      	mov	r1, r7
 8009700:	f001 f980 	bl	800aa04 <finite>
 8009704:	2800      	cmp	r0, #0
 8009706:	d0e8      	beq.n	80096da <pow+0x4a>
 8009708:	2200      	movs	r2, #0
 800970a:	2300      	movs	r3, #0
 800970c:	4630      	mov	r0, r6
 800970e:	4639      	mov	r1, r7
 8009710:	f7f7 f94c 	bl	80009ac <__aeabi_dcmplt>
 8009714:	2800      	cmp	r0, #0
 8009716:	d0e0      	beq.n	80096da <pow+0x4a>
 8009718:	f001 faa0 	bl	800ac5c <__errno>
 800971c:	2321      	movs	r3, #33	; 0x21
 800971e:	2400      	movs	r4, #0
 8009720:	6003      	str	r3, [r0, #0]
 8009722:	4d2e      	ldr	r5, [pc, #184]	; (80097dc <pow+0x14c>)
 8009724:	e7d9      	b.n	80096da <pow+0x4a>
 8009726:	4620      	mov	r0, r4
 8009728:	4629      	mov	r1, r5
 800972a:	f001 f96b 	bl	800aa04 <finite>
 800972e:	bba8      	cbnz	r0, 800979c <pow+0x10c>
 8009730:	4640      	mov	r0, r8
 8009732:	4649      	mov	r1, r9
 8009734:	f001 f966 	bl	800aa04 <finite>
 8009738:	b380      	cbz	r0, 800979c <pow+0x10c>
 800973a:	4630      	mov	r0, r6
 800973c:	4639      	mov	r1, r7
 800973e:	f001 f961 	bl	800aa04 <finite>
 8009742:	b358      	cbz	r0, 800979c <pow+0x10c>
 8009744:	4622      	mov	r2, r4
 8009746:	462b      	mov	r3, r5
 8009748:	4620      	mov	r0, r4
 800974a:	4629      	mov	r1, r5
 800974c:	f7f7 f956 	bl	80009fc <__aeabi_dcmpun>
 8009750:	b160      	cbz	r0, 800976c <pow+0xdc>
 8009752:	f001 fa83 	bl	800ac5c <__errno>
 8009756:	2321      	movs	r3, #33	; 0x21
 8009758:	2200      	movs	r2, #0
 800975a:	6003      	str	r3, [r0, #0]
 800975c:	2300      	movs	r3, #0
 800975e:	4610      	mov	r0, r2
 8009760:	4619      	mov	r1, r3
 8009762:	f7f6 ffdb 	bl	800071c <__aeabi_ddiv>
 8009766:	4604      	mov	r4, r0
 8009768:	460d      	mov	r5, r1
 800976a:	e7b6      	b.n	80096da <pow+0x4a>
 800976c:	f001 fa76 	bl	800ac5c <__errno>
 8009770:	2322      	movs	r3, #34	; 0x22
 8009772:	2200      	movs	r2, #0
 8009774:	6003      	str	r3, [r0, #0]
 8009776:	4649      	mov	r1, r9
 8009778:	2300      	movs	r3, #0
 800977a:	4640      	mov	r0, r8
 800977c:	f7f7 f916 	bl	80009ac <__aeabi_dcmplt>
 8009780:	2400      	movs	r4, #0
 8009782:	b148      	cbz	r0, 8009798 <pow+0x108>
 8009784:	4630      	mov	r0, r6
 8009786:	4639      	mov	r1, r7
 8009788:	f001 f948 	bl	800aa1c <rint>
 800978c:	4632      	mov	r2, r6
 800978e:	463b      	mov	r3, r7
 8009790:	f7f7 f902 	bl	8000998 <__aeabi_dcmpeq>
 8009794:	2800      	cmp	r0, #0
 8009796:	d0c4      	beq.n	8009722 <pow+0x92>
 8009798:	4d11      	ldr	r5, [pc, #68]	; (80097e0 <pow+0x150>)
 800979a:	e79e      	b.n	80096da <pow+0x4a>
 800979c:	2200      	movs	r2, #0
 800979e:	2300      	movs	r3, #0
 80097a0:	4620      	mov	r0, r4
 80097a2:	4629      	mov	r1, r5
 80097a4:	f7f7 f8f8 	bl	8000998 <__aeabi_dcmpeq>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	d096      	beq.n	80096da <pow+0x4a>
 80097ac:	4640      	mov	r0, r8
 80097ae:	4649      	mov	r1, r9
 80097b0:	f001 f928 	bl	800aa04 <finite>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d090      	beq.n	80096da <pow+0x4a>
 80097b8:	4630      	mov	r0, r6
 80097ba:	4639      	mov	r1, r7
 80097bc:	f001 f922 	bl	800aa04 <finite>
 80097c0:	2800      	cmp	r0, #0
 80097c2:	d08a      	beq.n	80096da <pow+0x4a>
 80097c4:	f001 fa4a 	bl	800ac5c <__errno>
 80097c8:	2322      	movs	r3, #34	; 0x22
 80097ca:	2400      	movs	r4, #0
 80097cc:	2500      	movs	r5, #0
 80097ce:	6003      	str	r3, [r0, #0]
 80097d0:	e783      	b.n	80096da <pow+0x4a>
 80097d2:	2400      	movs	r4, #0
 80097d4:	4d03      	ldr	r5, [pc, #12]	; (80097e4 <pow+0x154>)
 80097d6:	e780      	b.n	80096da <pow+0x4a>
 80097d8:	20000009 	.word	0x20000009
 80097dc:	fff00000 	.word	0xfff00000
 80097e0:	7ff00000 	.word	0x7ff00000
 80097e4:	3ff00000 	.word	0x3ff00000

080097e8 <asinf>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	4604      	mov	r4, r0
 80097ec:	f000 ff72 	bl	800a6d4 <__ieee754_asinf>
 80097f0:	4b0e      	ldr	r3, [pc, #56]	; (800982c <asinf+0x44>)
 80097f2:	4605      	mov	r5, r0
 80097f4:	f993 3000 	ldrsb.w	r3, [r3]
 80097f8:	3301      	adds	r3, #1
 80097fa:	d015      	beq.n	8009828 <asinf+0x40>
 80097fc:	4621      	mov	r1, r4
 80097fe:	4620      	mov	r0, r4
 8009800:	f7f7 fc5e 	bl	80010c0 <__aeabi_fcmpun>
 8009804:	b980      	cbnz	r0, 8009828 <asinf+0x40>
 8009806:	4620      	mov	r0, r4
 8009808:	f001 fa18 	bl	800ac3c <fabsf>
 800980c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009810:	f7f7 fc4c 	bl	80010ac <__aeabi_fcmpgt>
 8009814:	b140      	cbz	r0, 8009828 <asinf+0x40>
 8009816:	f001 fa21 	bl	800ac5c <__errno>
 800981a:	2321      	movs	r3, #33	; 0x21
 800981c:	6003      	str	r3, [r0, #0]
 800981e:	4804      	ldr	r0, [pc, #16]	; (8009830 <asinf+0x48>)
 8009820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009824:	f001 ba0e 	b.w	800ac44 <nanf>
 8009828:	4628      	mov	r0, r5
 800982a:	bd38      	pop	{r3, r4, r5, pc}
 800982c:	20000009 	.word	0x20000009
 8009830:	0800afb8 	.word	0x0800afb8

08009834 <sqrtf>:
 8009834:	b538      	push	{r3, r4, r5, lr}
 8009836:	4605      	mov	r5, r0
 8009838:	f001 f890 	bl	800a95c <__ieee754_sqrtf>
 800983c:	4b0d      	ldr	r3, [pc, #52]	; (8009874 <sqrtf+0x40>)
 800983e:	4604      	mov	r4, r0
 8009840:	f993 3000 	ldrsb.w	r3, [r3]
 8009844:	3301      	adds	r3, #1
 8009846:	d012      	beq.n	800986e <sqrtf+0x3a>
 8009848:	4629      	mov	r1, r5
 800984a:	4628      	mov	r0, r5
 800984c:	f7f7 fc38 	bl	80010c0 <__aeabi_fcmpun>
 8009850:	b968      	cbnz	r0, 800986e <sqrtf+0x3a>
 8009852:	2100      	movs	r1, #0
 8009854:	4628      	mov	r0, r5
 8009856:	f7f7 fc0b 	bl	8001070 <__aeabi_fcmplt>
 800985a:	b140      	cbz	r0, 800986e <sqrtf+0x3a>
 800985c:	f001 f9fe 	bl	800ac5c <__errno>
 8009860:	2321      	movs	r3, #33	; 0x21
 8009862:	2100      	movs	r1, #0
 8009864:	6003      	str	r3, [r0, #0]
 8009866:	4608      	mov	r0, r1
 8009868:	f7f7 fb18 	bl	8000e9c <__aeabi_fdiv>
 800986c:	4604      	mov	r4, r0
 800986e:	4620      	mov	r0, r4
 8009870:	bd38      	pop	{r3, r4, r5, pc}
 8009872:	bf00      	nop
 8009874:	20000009 	.word	0x20000009

08009878 <__ieee754_exp>:
 8009878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800987c:	4faa      	ldr	r7, [pc, #680]	; (8009b28 <__ieee754_exp+0x2b0>)
 800987e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009882:	42bb      	cmp	r3, r7
 8009884:	4605      	mov	r5, r0
 8009886:	460c      	mov	r4, r1
 8009888:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800988c:	d92f      	bls.n	80098ee <__ieee754_exp+0x76>
 800988e:	4fa7      	ldr	r7, [pc, #668]	; (8009b2c <__ieee754_exp+0x2b4>)
 8009890:	42bb      	cmp	r3, r7
 8009892:	d911      	bls.n	80098b8 <__ieee754_exp+0x40>
 8009894:	4603      	mov	r3, r0
 8009896:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800989a:	4313      	orrs	r3, r2
 800989c:	d006      	beq.n	80098ac <__ieee754_exp+0x34>
 800989e:	4602      	mov	r2, r0
 80098a0:	460b      	mov	r3, r1
 80098a2:	f7f6 fc5b 	bl	800015c <__adddf3>
 80098a6:	4605      	mov	r5, r0
 80098a8:	460c      	mov	r4, r1
 80098aa:	e000      	b.n	80098ae <__ieee754_exp+0x36>
 80098ac:	b9e6      	cbnz	r6, 80098e8 <__ieee754_exp+0x70>
 80098ae:	4628      	mov	r0, r5
 80098b0:	4621      	mov	r1, r4
 80098b2:	b004      	add	sp, #16
 80098b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098b8:	a385      	add	r3, pc, #532	; (adr r3, 8009ad0 <__ieee754_exp+0x258>)
 80098ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098be:	f7f7 f893 	bl	80009e8 <__aeabi_dcmpgt>
 80098c2:	b138      	cbz	r0, 80098d4 <__ieee754_exp+0x5c>
 80098c4:	a384      	add	r3, pc, #528	; (adr r3, 8009ad8 <__ieee754_exp+0x260>)
 80098c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ca:	4610      	mov	r0, r2
 80098cc:	4619      	mov	r1, r3
 80098ce:	f7f6 fdfb 	bl	80004c8 <__aeabi_dmul>
 80098d2:	e7e8      	b.n	80098a6 <__ieee754_exp+0x2e>
 80098d4:	4628      	mov	r0, r5
 80098d6:	a382      	add	r3, pc, #520	; (adr r3, 8009ae0 <__ieee754_exp+0x268>)
 80098d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098dc:	4621      	mov	r1, r4
 80098de:	f7f7 f865 	bl	80009ac <__aeabi_dcmplt>
 80098e2:	2800      	cmp	r0, #0
 80098e4:	f000 8082 	beq.w	80099ec <__ieee754_exp+0x174>
 80098e8:	2500      	movs	r5, #0
 80098ea:	462c      	mov	r4, r5
 80098ec:	e7df      	b.n	80098ae <__ieee754_exp+0x36>
 80098ee:	4a90      	ldr	r2, [pc, #576]	; (8009b30 <__ieee754_exp+0x2b8>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	f240 80a7 	bls.w	8009a44 <__ieee754_exp+0x1cc>
 80098f6:	4a8f      	ldr	r2, [pc, #572]	; (8009b34 <__ieee754_exp+0x2bc>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d877      	bhi.n	80099ec <__ieee754_exp+0x174>
 80098fc:	4b8e      	ldr	r3, [pc, #568]	; (8009b38 <__ieee754_exp+0x2c0>)
 80098fe:	00f4      	lsls	r4, r6, #3
 8009900:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009908:	f7f6 fc26 	bl	8000158 <__aeabi_dsub>
 800990c:	4680      	mov	r8, r0
 800990e:	4689      	mov	r9, r1
 8009910:	4b8a      	ldr	r3, [pc, #552]	; (8009b3c <__ieee754_exp+0x2c4>)
 8009912:	f1c6 0a01 	rsb	sl, r6, #1
 8009916:	4423      	add	r3, r4
 8009918:	e9d3 3400 	ldrd	r3, r4, [r3]
 800991c:	e9cd 3400 	strd	r3, r4, [sp]
 8009920:	ebaa 0a06 	sub.w	sl, sl, r6
 8009924:	4640      	mov	r0, r8
 8009926:	e9dd 2300 	ldrd	r2, r3, [sp]
 800992a:	4649      	mov	r1, r9
 800992c:	f7f6 fc14 	bl	8000158 <__aeabi_dsub>
 8009930:	4605      	mov	r5, r0
 8009932:	460c      	mov	r4, r1
 8009934:	462a      	mov	r2, r5
 8009936:	4623      	mov	r3, r4
 8009938:	4628      	mov	r0, r5
 800993a:	4621      	mov	r1, r4
 800993c:	f7f6 fdc4 	bl	80004c8 <__aeabi_dmul>
 8009940:	a369      	add	r3, pc, #420	; (adr r3, 8009ae8 <__ieee754_exp+0x270>)
 8009942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009946:	4606      	mov	r6, r0
 8009948:	460f      	mov	r7, r1
 800994a:	f7f6 fdbd 	bl	80004c8 <__aeabi_dmul>
 800994e:	a368      	add	r3, pc, #416	; (adr r3, 8009af0 <__ieee754_exp+0x278>)
 8009950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009954:	f7f6 fc00 	bl	8000158 <__aeabi_dsub>
 8009958:	4632      	mov	r2, r6
 800995a:	463b      	mov	r3, r7
 800995c:	f7f6 fdb4 	bl	80004c8 <__aeabi_dmul>
 8009960:	a365      	add	r3, pc, #404	; (adr r3, 8009af8 <__ieee754_exp+0x280>)
 8009962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009966:	f7f6 fbf9 	bl	800015c <__adddf3>
 800996a:	4632      	mov	r2, r6
 800996c:	463b      	mov	r3, r7
 800996e:	f7f6 fdab 	bl	80004c8 <__aeabi_dmul>
 8009972:	a363      	add	r3, pc, #396	; (adr r3, 8009b00 <__ieee754_exp+0x288>)
 8009974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009978:	f7f6 fbee 	bl	8000158 <__aeabi_dsub>
 800997c:	4632      	mov	r2, r6
 800997e:	463b      	mov	r3, r7
 8009980:	f7f6 fda2 	bl	80004c8 <__aeabi_dmul>
 8009984:	a360      	add	r3, pc, #384	; (adr r3, 8009b08 <__ieee754_exp+0x290>)
 8009986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998a:	f7f6 fbe7 	bl	800015c <__adddf3>
 800998e:	4632      	mov	r2, r6
 8009990:	463b      	mov	r3, r7
 8009992:	f7f6 fd99 	bl	80004c8 <__aeabi_dmul>
 8009996:	4602      	mov	r2, r0
 8009998:	460b      	mov	r3, r1
 800999a:	4628      	mov	r0, r5
 800999c:	4621      	mov	r1, r4
 800999e:	f7f6 fbdb 	bl	8000158 <__aeabi_dsub>
 80099a2:	4602      	mov	r2, r0
 80099a4:	460b      	mov	r3, r1
 80099a6:	4606      	mov	r6, r0
 80099a8:	460f      	mov	r7, r1
 80099aa:	4628      	mov	r0, r5
 80099ac:	4621      	mov	r1, r4
 80099ae:	f7f6 fd8b 	bl	80004c8 <__aeabi_dmul>
 80099b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099b6:	f1ba 0f00 	cmp.w	sl, #0
 80099ba:	d15a      	bne.n	8009a72 <__ieee754_exp+0x1fa>
 80099bc:	2200      	movs	r2, #0
 80099be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80099c2:	4630      	mov	r0, r6
 80099c4:	4639      	mov	r1, r7
 80099c6:	f7f6 fbc7 	bl	8000158 <__aeabi_dsub>
 80099ca:	4602      	mov	r2, r0
 80099cc:	460b      	mov	r3, r1
 80099ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099d2:	f7f6 fea3 	bl	800071c <__aeabi_ddiv>
 80099d6:	462a      	mov	r2, r5
 80099d8:	4623      	mov	r3, r4
 80099da:	f7f6 fbbd 	bl	8000158 <__aeabi_dsub>
 80099de:	4602      	mov	r2, r0
 80099e0:	460b      	mov	r3, r1
 80099e2:	2000      	movs	r0, #0
 80099e4:	4956      	ldr	r1, [pc, #344]	; (8009b40 <__ieee754_exp+0x2c8>)
 80099e6:	f7f6 fbb7 	bl	8000158 <__aeabi_dsub>
 80099ea:	e75c      	b.n	80098a6 <__ieee754_exp+0x2e>
 80099ec:	4855      	ldr	r0, [pc, #340]	; (8009b44 <__ieee754_exp+0x2cc>)
 80099ee:	a348      	add	r3, pc, #288	; (adr r3, 8009b10 <__ieee754_exp+0x298>)
 80099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f4:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80099f8:	4621      	mov	r1, r4
 80099fa:	4628      	mov	r0, r5
 80099fc:	f7f6 fd64 	bl	80004c8 <__aeabi_dmul>
 8009a00:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a04:	f7f6 fbaa 	bl	800015c <__adddf3>
 8009a08:	f7f7 f80e 	bl	8000a28 <__aeabi_d2iz>
 8009a0c:	4682      	mov	sl, r0
 8009a0e:	f7f6 fcf1 	bl	80003f4 <__aeabi_i2d>
 8009a12:	a341      	add	r3, pc, #260	; (adr r3, 8009b18 <__ieee754_exp+0x2a0>)
 8009a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a18:	4606      	mov	r6, r0
 8009a1a:	460f      	mov	r7, r1
 8009a1c:	f7f6 fd54 	bl	80004c8 <__aeabi_dmul>
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	4628      	mov	r0, r5
 8009a26:	4621      	mov	r1, r4
 8009a28:	f7f6 fb96 	bl	8000158 <__aeabi_dsub>
 8009a2c:	a33c      	add	r3, pc, #240	; (adr r3, 8009b20 <__ieee754_exp+0x2a8>)
 8009a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a32:	4680      	mov	r8, r0
 8009a34:	4689      	mov	r9, r1
 8009a36:	4630      	mov	r0, r6
 8009a38:	4639      	mov	r1, r7
 8009a3a:	f7f6 fd45 	bl	80004c8 <__aeabi_dmul>
 8009a3e:	e9cd 0100 	strd	r0, r1, [sp]
 8009a42:	e76f      	b.n	8009924 <__ieee754_exp+0xac>
 8009a44:	4a40      	ldr	r2, [pc, #256]	; (8009b48 <__ieee754_exp+0x2d0>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d80e      	bhi.n	8009a68 <__ieee754_exp+0x1f0>
 8009a4a:	a323      	add	r3, pc, #140	; (adr r3, 8009ad8 <__ieee754_exp+0x260>)
 8009a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a50:	f7f6 fb84 	bl	800015c <__adddf3>
 8009a54:	2200      	movs	r2, #0
 8009a56:	4b3a      	ldr	r3, [pc, #232]	; (8009b40 <__ieee754_exp+0x2c8>)
 8009a58:	f7f6 ffc6 	bl	80009e8 <__aeabi_dcmpgt>
 8009a5c:	b138      	cbz	r0, 8009a6e <__ieee754_exp+0x1f6>
 8009a5e:	2200      	movs	r2, #0
 8009a60:	4628      	mov	r0, r5
 8009a62:	4621      	mov	r1, r4
 8009a64:	4b36      	ldr	r3, [pc, #216]	; (8009b40 <__ieee754_exp+0x2c8>)
 8009a66:	e71c      	b.n	80098a2 <__ieee754_exp+0x2a>
 8009a68:	f04f 0a00 	mov.w	sl, #0
 8009a6c:	e762      	b.n	8009934 <__ieee754_exp+0xbc>
 8009a6e:	4682      	mov	sl, r0
 8009a70:	e760      	b.n	8009934 <__ieee754_exp+0xbc>
 8009a72:	4632      	mov	r2, r6
 8009a74:	463b      	mov	r3, r7
 8009a76:	2000      	movs	r0, #0
 8009a78:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009a7c:	f7f6 fb6c 	bl	8000158 <__aeabi_dsub>
 8009a80:	4602      	mov	r2, r0
 8009a82:	460b      	mov	r3, r1
 8009a84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a88:	f7f6 fe48 	bl	800071c <__aeabi_ddiv>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a94:	f7f6 fb60 	bl	8000158 <__aeabi_dsub>
 8009a98:	4642      	mov	r2, r8
 8009a9a:	464b      	mov	r3, r9
 8009a9c:	f7f6 fb5c 	bl	8000158 <__aeabi_dsub>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	4926      	ldr	r1, [pc, #152]	; (8009b40 <__ieee754_exp+0x2c8>)
 8009aa8:	f7f6 fb56 	bl	8000158 <__aeabi_dsub>
 8009aac:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8009ab0:	4592      	cmp	sl, r2
 8009ab2:	db02      	blt.n	8009aba <__ieee754_exp+0x242>
 8009ab4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8009ab8:	e6f5      	b.n	80098a6 <__ieee754_exp+0x2e>
 8009aba:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8009ac4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8009ac8:	e701      	b.n	80098ce <__ieee754_exp+0x56>
 8009aca:	bf00      	nop
 8009acc:	f3af 8000 	nop.w
 8009ad0:	fefa39ef 	.word	0xfefa39ef
 8009ad4:	40862e42 	.word	0x40862e42
 8009ad8:	8800759c 	.word	0x8800759c
 8009adc:	7e37e43c 	.word	0x7e37e43c
 8009ae0:	d52d3051 	.word	0xd52d3051
 8009ae4:	c0874910 	.word	0xc0874910
 8009ae8:	72bea4d0 	.word	0x72bea4d0
 8009aec:	3e663769 	.word	0x3e663769
 8009af0:	c5d26bf1 	.word	0xc5d26bf1
 8009af4:	3ebbbd41 	.word	0x3ebbbd41
 8009af8:	af25de2c 	.word	0xaf25de2c
 8009afc:	3f11566a 	.word	0x3f11566a
 8009b00:	16bebd93 	.word	0x16bebd93
 8009b04:	3f66c16c 	.word	0x3f66c16c
 8009b08:	5555553e 	.word	0x5555553e
 8009b0c:	3fc55555 	.word	0x3fc55555
 8009b10:	652b82fe 	.word	0x652b82fe
 8009b14:	3ff71547 	.word	0x3ff71547
 8009b18:	fee00000 	.word	0xfee00000
 8009b1c:	3fe62e42 	.word	0x3fe62e42
 8009b20:	35793c76 	.word	0x35793c76
 8009b24:	3dea39ef 	.word	0x3dea39ef
 8009b28:	40862e41 	.word	0x40862e41
 8009b2c:	7fefffff 	.word	0x7fefffff
 8009b30:	3fd62e42 	.word	0x3fd62e42
 8009b34:	3ff0a2b1 	.word	0x3ff0a2b1
 8009b38:	0800afd0 	.word	0x0800afd0
 8009b3c:	0800afe0 	.word	0x0800afe0
 8009b40:	3ff00000 	.word	0x3ff00000
 8009b44:	0800afc0 	.word	0x0800afc0
 8009b48:	3e2fffff 	.word	0x3e2fffff
 8009b4c:	00000000 	.word	0x00000000

08009b50 <__ieee754_pow>:
 8009b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b54:	b093      	sub	sp, #76	; 0x4c
 8009b56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b5a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8009b5e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8009b62:	ea55 0302 	orrs.w	r3, r5, r2
 8009b66:	4607      	mov	r7, r0
 8009b68:	4688      	mov	r8, r1
 8009b6a:	f000 84bf 	beq.w	800a4ec <__ieee754_pow+0x99c>
 8009b6e:	4b7e      	ldr	r3, [pc, #504]	; (8009d68 <__ieee754_pow+0x218>)
 8009b70:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8009b74:	429c      	cmp	r4, r3
 8009b76:	4689      	mov	r9, r1
 8009b78:	4682      	mov	sl, r0
 8009b7a:	dc09      	bgt.n	8009b90 <__ieee754_pow+0x40>
 8009b7c:	d103      	bne.n	8009b86 <__ieee754_pow+0x36>
 8009b7e:	b978      	cbnz	r0, 8009ba0 <__ieee754_pow+0x50>
 8009b80:	42a5      	cmp	r5, r4
 8009b82:	dd02      	ble.n	8009b8a <__ieee754_pow+0x3a>
 8009b84:	e00c      	b.n	8009ba0 <__ieee754_pow+0x50>
 8009b86:	429d      	cmp	r5, r3
 8009b88:	dc02      	bgt.n	8009b90 <__ieee754_pow+0x40>
 8009b8a:	429d      	cmp	r5, r3
 8009b8c:	d10e      	bne.n	8009bac <__ieee754_pow+0x5c>
 8009b8e:	b16a      	cbz	r2, 8009bac <__ieee754_pow+0x5c>
 8009b90:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009b94:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009b98:	ea54 030a 	orrs.w	r3, r4, sl
 8009b9c:	f000 84a6 	beq.w	800a4ec <__ieee754_pow+0x99c>
 8009ba0:	4872      	ldr	r0, [pc, #456]	; (8009d6c <__ieee754_pow+0x21c>)
 8009ba2:	b013      	add	sp, #76	; 0x4c
 8009ba4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba8:	f000 bf32 	b.w	800aa10 <nan>
 8009bac:	f1b9 0f00 	cmp.w	r9, #0
 8009bb0:	da39      	bge.n	8009c26 <__ieee754_pow+0xd6>
 8009bb2:	4b6f      	ldr	r3, [pc, #444]	; (8009d70 <__ieee754_pow+0x220>)
 8009bb4:	429d      	cmp	r5, r3
 8009bb6:	dc54      	bgt.n	8009c62 <__ieee754_pow+0x112>
 8009bb8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009bbc:	429d      	cmp	r5, r3
 8009bbe:	f340 84a6 	ble.w	800a50e <__ieee754_pow+0x9be>
 8009bc2:	152b      	asrs	r3, r5, #20
 8009bc4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009bc8:	2b14      	cmp	r3, #20
 8009bca:	dd0f      	ble.n	8009bec <__ieee754_pow+0x9c>
 8009bcc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009bd0:	fa22 f103 	lsr.w	r1, r2, r3
 8009bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	f040 8498 	bne.w	800a50e <__ieee754_pow+0x9be>
 8009bde:	f001 0101 	and.w	r1, r1, #1
 8009be2:	f1c1 0302 	rsb	r3, r1, #2
 8009be6:	9300      	str	r3, [sp, #0]
 8009be8:	b182      	cbz	r2, 8009c0c <__ieee754_pow+0xbc>
 8009bea:	e05e      	b.n	8009caa <__ieee754_pow+0x15a>
 8009bec:	2a00      	cmp	r2, #0
 8009bee:	d15a      	bne.n	8009ca6 <__ieee754_pow+0x156>
 8009bf0:	f1c3 0314 	rsb	r3, r3, #20
 8009bf4:	fa45 f103 	asr.w	r1, r5, r3
 8009bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bfc:	42ab      	cmp	r3, r5
 8009bfe:	f040 8483 	bne.w	800a508 <__ieee754_pow+0x9b8>
 8009c02:	f001 0101 	and.w	r1, r1, #1
 8009c06:	f1c1 0302 	rsb	r3, r1, #2
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	4b59      	ldr	r3, [pc, #356]	; (8009d74 <__ieee754_pow+0x224>)
 8009c0e:	429d      	cmp	r5, r3
 8009c10:	d130      	bne.n	8009c74 <__ieee754_pow+0x124>
 8009c12:	2e00      	cmp	r6, #0
 8009c14:	f280 8474 	bge.w	800a500 <__ieee754_pow+0x9b0>
 8009c18:	463a      	mov	r2, r7
 8009c1a:	4643      	mov	r3, r8
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	4955      	ldr	r1, [pc, #340]	; (8009d74 <__ieee754_pow+0x224>)
 8009c20:	f7f6 fd7c 	bl	800071c <__aeabi_ddiv>
 8009c24:	e02f      	b.n	8009c86 <__ieee754_pow+0x136>
 8009c26:	2300      	movs	r3, #0
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	2a00      	cmp	r2, #0
 8009c2c:	d13d      	bne.n	8009caa <__ieee754_pow+0x15a>
 8009c2e:	4b4e      	ldr	r3, [pc, #312]	; (8009d68 <__ieee754_pow+0x218>)
 8009c30:	429d      	cmp	r5, r3
 8009c32:	d1eb      	bne.n	8009c0c <__ieee754_pow+0xbc>
 8009c34:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009c38:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009c3c:	ea53 030a 	orrs.w	r3, r3, sl
 8009c40:	f000 8454 	beq.w	800a4ec <__ieee754_pow+0x99c>
 8009c44:	4b4c      	ldr	r3, [pc, #304]	; (8009d78 <__ieee754_pow+0x228>)
 8009c46:	429c      	cmp	r4, r3
 8009c48:	dd0d      	ble.n	8009c66 <__ieee754_pow+0x116>
 8009c4a:	2e00      	cmp	r6, #0
 8009c4c:	f280 8454 	bge.w	800a4f8 <__ieee754_pow+0x9a8>
 8009c50:	f04f 0b00 	mov.w	fp, #0
 8009c54:	f04f 0c00 	mov.w	ip, #0
 8009c58:	4658      	mov	r0, fp
 8009c5a:	4661      	mov	r1, ip
 8009c5c:	b013      	add	sp, #76	; 0x4c
 8009c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c62:	2302      	movs	r3, #2
 8009c64:	e7e0      	b.n	8009c28 <__ieee754_pow+0xd8>
 8009c66:	2e00      	cmp	r6, #0
 8009c68:	daf2      	bge.n	8009c50 <__ieee754_pow+0x100>
 8009c6a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009c6e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009c72:	e7f1      	b.n	8009c58 <__ieee754_pow+0x108>
 8009c74:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8009c78:	d108      	bne.n	8009c8c <__ieee754_pow+0x13c>
 8009c7a:	463a      	mov	r2, r7
 8009c7c:	4643      	mov	r3, r8
 8009c7e:	4638      	mov	r0, r7
 8009c80:	4641      	mov	r1, r8
 8009c82:	f7f6 fc21 	bl	80004c8 <__aeabi_dmul>
 8009c86:	4683      	mov	fp, r0
 8009c88:	468c      	mov	ip, r1
 8009c8a:	e7e5      	b.n	8009c58 <__ieee754_pow+0x108>
 8009c8c:	4b3b      	ldr	r3, [pc, #236]	; (8009d7c <__ieee754_pow+0x22c>)
 8009c8e:	429e      	cmp	r6, r3
 8009c90:	d10b      	bne.n	8009caa <__ieee754_pow+0x15a>
 8009c92:	f1b9 0f00 	cmp.w	r9, #0
 8009c96:	db08      	blt.n	8009caa <__ieee754_pow+0x15a>
 8009c98:	4638      	mov	r0, r7
 8009c9a:	4641      	mov	r1, r8
 8009c9c:	b013      	add	sp, #76	; 0x4c
 8009c9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca2:	f000 bc6b 	b.w	800a57c <__ieee754_sqrt>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	4638      	mov	r0, r7
 8009cac:	4641      	mov	r1, r8
 8009cae:	f000 fea6 	bl	800a9fe <fabs>
 8009cb2:	4683      	mov	fp, r0
 8009cb4:	468c      	mov	ip, r1
 8009cb6:	f1ba 0f00 	cmp.w	sl, #0
 8009cba:	d129      	bne.n	8009d10 <__ieee754_pow+0x1c0>
 8009cbc:	b124      	cbz	r4, 8009cc8 <__ieee754_pow+0x178>
 8009cbe:	4b2d      	ldr	r3, [pc, #180]	; (8009d74 <__ieee754_pow+0x224>)
 8009cc0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d123      	bne.n	8009d10 <__ieee754_pow+0x1c0>
 8009cc8:	2e00      	cmp	r6, #0
 8009cca:	da07      	bge.n	8009cdc <__ieee754_pow+0x18c>
 8009ccc:	465a      	mov	r2, fp
 8009cce:	4663      	mov	r3, ip
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	4928      	ldr	r1, [pc, #160]	; (8009d74 <__ieee754_pow+0x224>)
 8009cd4:	f7f6 fd22 	bl	800071c <__aeabi_ddiv>
 8009cd8:	4683      	mov	fp, r0
 8009cda:	468c      	mov	ip, r1
 8009cdc:	f1b9 0f00 	cmp.w	r9, #0
 8009ce0:	daba      	bge.n	8009c58 <__ieee754_pow+0x108>
 8009ce2:	9b00      	ldr	r3, [sp, #0]
 8009ce4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009ce8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009cec:	4323      	orrs	r3, r4
 8009cee:	d108      	bne.n	8009d02 <__ieee754_pow+0x1b2>
 8009cf0:	465a      	mov	r2, fp
 8009cf2:	4663      	mov	r3, ip
 8009cf4:	4658      	mov	r0, fp
 8009cf6:	4661      	mov	r1, ip
 8009cf8:	f7f6 fa2e 	bl	8000158 <__aeabi_dsub>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	e78e      	b.n	8009c20 <__ieee754_pow+0xd0>
 8009d02:	9b00      	ldr	r3, [sp, #0]
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d1a7      	bne.n	8009c58 <__ieee754_pow+0x108>
 8009d08:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009d0c:	469c      	mov	ip, r3
 8009d0e:	e7a3      	b.n	8009c58 <__ieee754_pow+0x108>
 8009d10:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8009d14:	3b01      	subs	r3, #1
 8009d16:	930c      	str	r3, [sp, #48]	; 0x30
 8009d18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d1a:	9b00      	ldr	r3, [sp, #0]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	d104      	bne.n	8009d2a <__ieee754_pow+0x1da>
 8009d20:	463a      	mov	r2, r7
 8009d22:	4643      	mov	r3, r8
 8009d24:	4638      	mov	r0, r7
 8009d26:	4641      	mov	r1, r8
 8009d28:	e7e6      	b.n	8009cf8 <__ieee754_pow+0x1a8>
 8009d2a:	4b15      	ldr	r3, [pc, #84]	; (8009d80 <__ieee754_pow+0x230>)
 8009d2c:	429d      	cmp	r5, r3
 8009d2e:	f340 80f9 	ble.w	8009f24 <__ieee754_pow+0x3d4>
 8009d32:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009d36:	429d      	cmp	r5, r3
 8009d38:	4b0f      	ldr	r3, [pc, #60]	; (8009d78 <__ieee754_pow+0x228>)
 8009d3a:	dd09      	ble.n	8009d50 <__ieee754_pow+0x200>
 8009d3c:	429c      	cmp	r4, r3
 8009d3e:	dc0c      	bgt.n	8009d5a <__ieee754_pow+0x20a>
 8009d40:	2e00      	cmp	r6, #0
 8009d42:	da85      	bge.n	8009c50 <__ieee754_pow+0x100>
 8009d44:	a306      	add	r3, pc, #24	; (adr r3, 8009d60 <__ieee754_pow+0x210>)
 8009d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4a:	4610      	mov	r0, r2
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	e798      	b.n	8009c82 <__ieee754_pow+0x132>
 8009d50:	429c      	cmp	r4, r3
 8009d52:	dbf5      	blt.n	8009d40 <__ieee754_pow+0x1f0>
 8009d54:	4b07      	ldr	r3, [pc, #28]	; (8009d74 <__ieee754_pow+0x224>)
 8009d56:	429c      	cmp	r4, r3
 8009d58:	dd14      	ble.n	8009d84 <__ieee754_pow+0x234>
 8009d5a:	2e00      	cmp	r6, #0
 8009d5c:	dcf2      	bgt.n	8009d44 <__ieee754_pow+0x1f4>
 8009d5e:	e777      	b.n	8009c50 <__ieee754_pow+0x100>
 8009d60:	8800759c 	.word	0x8800759c
 8009d64:	7e37e43c 	.word	0x7e37e43c
 8009d68:	7ff00000 	.word	0x7ff00000
 8009d6c:	0800afb8 	.word	0x0800afb8
 8009d70:	433fffff 	.word	0x433fffff
 8009d74:	3ff00000 	.word	0x3ff00000
 8009d78:	3fefffff 	.word	0x3fefffff
 8009d7c:	3fe00000 	.word	0x3fe00000
 8009d80:	41e00000 	.word	0x41e00000
 8009d84:	4661      	mov	r1, ip
 8009d86:	2200      	movs	r2, #0
 8009d88:	4658      	mov	r0, fp
 8009d8a:	4b61      	ldr	r3, [pc, #388]	; (8009f10 <__ieee754_pow+0x3c0>)
 8009d8c:	f7f6 f9e4 	bl	8000158 <__aeabi_dsub>
 8009d90:	a355      	add	r3, pc, #340	; (adr r3, 8009ee8 <__ieee754_pow+0x398>)
 8009d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d96:	4604      	mov	r4, r0
 8009d98:	460d      	mov	r5, r1
 8009d9a:	f7f6 fb95 	bl	80004c8 <__aeabi_dmul>
 8009d9e:	a354      	add	r3, pc, #336	; (adr r3, 8009ef0 <__ieee754_pow+0x3a0>)
 8009da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da4:	4606      	mov	r6, r0
 8009da6:	460f      	mov	r7, r1
 8009da8:	4620      	mov	r0, r4
 8009daa:	4629      	mov	r1, r5
 8009dac:	f7f6 fb8c 	bl	80004c8 <__aeabi_dmul>
 8009db0:	2200      	movs	r2, #0
 8009db2:	4682      	mov	sl, r0
 8009db4:	468b      	mov	fp, r1
 8009db6:	4620      	mov	r0, r4
 8009db8:	4629      	mov	r1, r5
 8009dba:	4b56      	ldr	r3, [pc, #344]	; (8009f14 <__ieee754_pow+0x3c4>)
 8009dbc:	f7f6 fb84 	bl	80004c8 <__aeabi_dmul>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	a14c      	add	r1, pc, #304	; (adr r1, 8009ef8 <__ieee754_pow+0x3a8>)
 8009dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dca:	f7f6 f9c5 	bl	8000158 <__aeabi_dsub>
 8009dce:	4622      	mov	r2, r4
 8009dd0:	462b      	mov	r3, r5
 8009dd2:	f7f6 fb79 	bl	80004c8 <__aeabi_dmul>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	2000      	movs	r0, #0
 8009ddc:	494e      	ldr	r1, [pc, #312]	; (8009f18 <__ieee754_pow+0x3c8>)
 8009dde:	f7f6 f9bb 	bl	8000158 <__aeabi_dsub>
 8009de2:	4622      	mov	r2, r4
 8009de4:	462b      	mov	r3, r5
 8009de6:	4680      	mov	r8, r0
 8009de8:	4689      	mov	r9, r1
 8009dea:	4620      	mov	r0, r4
 8009dec:	4629      	mov	r1, r5
 8009dee:	f7f6 fb6b 	bl	80004c8 <__aeabi_dmul>
 8009df2:	4602      	mov	r2, r0
 8009df4:	460b      	mov	r3, r1
 8009df6:	4640      	mov	r0, r8
 8009df8:	4649      	mov	r1, r9
 8009dfa:	f7f6 fb65 	bl	80004c8 <__aeabi_dmul>
 8009dfe:	a340      	add	r3, pc, #256	; (adr r3, 8009f00 <__ieee754_pow+0x3b0>)
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	f7f6 fb60 	bl	80004c8 <__aeabi_dmul>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	4650      	mov	r0, sl
 8009e0e:	4659      	mov	r1, fp
 8009e10:	f7f6 f9a2 	bl	8000158 <__aeabi_dsub>
 8009e14:	f04f 0a00 	mov.w	sl, #0
 8009e18:	4602      	mov	r2, r0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	460d      	mov	r5, r1
 8009e20:	4630      	mov	r0, r6
 8009e22:	4639      	mov	r1, r7
 8009e24:	f7f6 f99a 	bl	800015c <__adddf3>
 8009e28:	4632      	mov	r2, r6
 8009e2a:	463b      	mov	r3, r7
 8009e2c:	4650      	mov	r0, sl
 8009e2e:	468b      	mov	fp, r1
 8009e30:	f7f6 f992 	bl	8000158 <__aeabi_dsub>
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	4620      	mov	r0, r4
 8009e3a:	4629      	mov	r1, r5
 8009e3c:	f7f6 f98c 	bl	8000158 <__aeabi_dsub>
 8009e40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e44:	9b00      	ldr	r3, [sp, #0]
 8009e46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	f04f 0600 	mov.w	r6, #0
 8009e50:	f04f 0200 	mov.w	r2, #0
 8009e54:	bf0c      	ite	eq
 8009e56:	4b31      	ldreq	r3, [pc, #196]	; (8009f1c <__ieee754_pow+0x3cc>)
 8009e58:	4b2d      	ldrne	r3, [pc, #180]	; (8009f10 <__ieee754_pow+0x3c0>)
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	460d      	mov	r5, r1
 8009e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e62:	e9cd 2300 	strd	r2, r3, [sp]
 8009e66:	4632      	mov	r2, r6
 8009e68:	463b      	mov	r3, r7
 8009e6a:	f7f6 f975 	bl	8000158 <__aeabi_dsub>
 8009e6e:	4652      	mov	r2, sl
 8009e70:	465b      	mov	r3, fp
 8009e72:	f7f6 fb29 	bl	80004c8 <__aeabi_dmul>
 8009e76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e7a:	4680      	mov	r8, r0
 8009e7c:	4689      	mov	r9, r1
 8009e7e:	4620      	mov	r0, r4
 8009e80:	4629      	mov	r1, r5
 8009e82:	f7f6 fb21 	bl	80004c8 <__aeabi_dmul>
 8009e86:	4602      	mov	r2, r0
 8009e88:	460b      	mov	r3, r1
 8009e8a:	4640      	mov	r0, r8
 8009e8c:	4649      	mov	r1, r9
 8009e8e:	f7f6 f965 	bl	800015c <__adddf3>
 8009e92:	4632      	mov	r2, r6
 8009e94:	463b      	mov	r3, r7
 8009e96:	4680      	mov	r8, r0
 8009e98:	4689      	mov	r9, r1
 8009e9a:	4650      	mov	r0, sl
 8009e9c:	4659      	mov	r1, fp
 8009e9e:	f7f6 fb13 	bl	80004c8 <__aeabi_dmul>
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	460d      	mov	r5, r1
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	4649      	mov	r1, r9
 8009eac:	4640      	mov	r0, r8
 8009eae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009eb2:	f7f6 f953 	bl	800015c <__adddf3>
 8009eb6:	4b1a      	ldr	r3, [pc, #104]	; (8009f20 <__ieee754_pow+0x3d0>)
 8009eb8:	4682      	mov	sl, r0
 8009eba:	4299      	cmp	r1, r3
 8009ebc:	460f      	mov	r7, r1
 8009ebe:	460e      	mov	r6, r1
 8009ec0:	f340 82ed 	ble.w	800a49e <__ieee754_pow+0x94e>
 8009ec4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009ec8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009ecc:	4303      	orrs	r3, r0
 8009ece:	f000 81e7 	beq.w	800a2a0 <__ieee754_pow+0x750>
 8009ed2:	a30d      	add	r3, pc, #52	; (adr r3, 8009f08 <__ieee754_pow+0x3b8>)
 8009ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009edc:	f7f6 faf4 	bl	80004c8 <__aeabi_dmul>
 8009ee0:	a309      	add	r3, pc, #36	; (adr r3, 8009f08 <__ieee754_pow+0x3b8>)
 8009ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee6:	e6cc      	b.n	8009c82 <__ieee754_pow+0x132>
 8009ee8:	60000000 	.word	0x60000000
 8009eec:	3ff71547 	.word	0x3ff71547
 8009ef0:	f85ddf44 	.word	0xf85ddf44
 8009ef4:	3e54ae0b 	.word	0x3e54ae0b
 8009ef8:	55555555 	.word	0x55555555
 8009efc:	3fd55555 	.word	0x3fd55555
 8009f00:	652b82fe 	.word	0x652b82fe
 8009f04:	3ff71547 	.word	0x3ff71547
 8009f08:	8800759c 	.word	0x8800759c
 8009f0c:	7e37e43c 	.word	0x7e37e43c
 8009f10:	3ff00000 	.word	0x3ff00000
 8009f14:	3fd00000 	.word	0x3fd00000
 8009f18:	3fe00000 	.word	0x3fe00000
 8009f1c:	bff00000 	.word	0xbff00000
 8009f20:	408fffff 	.word	0x408fffff
 8009f24:	4bd4      	ldr	r3, [pc, #848]	; (800a278 <__ieee754_pow+0x728>)
 8009f26:	2200      	movs	r2, #0
 8009f28:	ea09 0303 	and.w	r3, r9, r3
 8009f2c:	b943      	cbnz	r3, 8009f40 <__ieee754_pow+0x3f0>
 8009f2e:	4658      	mov	r0, fp
 8009f30:	4661      	mov	r1, ip
 8009f32:	4bd2      	ldr	r3, [pc, #840]	; (800a27c <__ieee754_pow+0x72c>)
 8009f34:	f7f6 fac8 	bl	80004c8 <__aeabi_dmul>
 8009f38:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009f3c:	4683      	mov	fp, r0
 8009f3e:	460c      	mov	r4, r1
 8009f40:	1523      	asrs	r3, r4, #20
 8009f42:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009f46:	4413      	add	r3, r2
 8009f48:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f4a:	4bcd      	ldr	r3, [pc, #820]	; (800a280 <__ieee754_pow+0x730>)
 8009f4c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009f50:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009f54:	429c      	cmp	r4, r3
 8009f56:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009f5a:	dd08      	ble.n	8009f6e <__ieee754_pow+0x41e>
 8009f5c:	4bc9      	ldr	r3, [pc, #804]	; (800a284 <__ieee754_pow+0x734>)
 8009f5e:	429c      	cmp	r4, r3
 8009f60:	f340 819c 	ble.w	800a29c <__ieee754_pow+0x74c>
 8009f64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f66:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f6e:	2600      	movs	r6, #0
 8009f70:	00f3      	lsls	r3, r6, #3
 8009f72:	930d      	str	r3, [sp, #52]	; 0x34
 8009f74:	4bc4      	ldr	r3, [pc, #784]	; (800a288 <__ieee754_pow+0x738>)
 8009f76:	4658      	mov	r0, fp
 8009f78:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f80:	4629      	mov	r1, r5
 8009f82:	461a      	mov	r2, r3
 8009f84:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009f88:	4623      	mov	r3, r4
 8009f8a:	f7f6 f8e5 	bl	8000158 <__aeabi_dsub>
 8009f8e:	46da      	mov	sl, fp
 8009f90:	462b      	mov	r3, r5
 8009f92:	4652      	mov	r2, sl
 8009f94:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009f98:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f9c:	f7f6 f8de 	bl	800015c <__adddf3>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	49b9      	ldr	r1, [pc, #740]	; (800a28c <__ieee754_pow+0x73c>)
 8009fa8:	f7f6 fbb8 	bl	800071c <__aeabi_ddiv>
 8009fac:	4602      	mov	r2, r0
 8009fae:	460b      	mov	r3, r1
 8009fb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009fb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009fb8:	f7f6 fa86 	bl	80004c8 <__aeabi_dmul>
 8009fbc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009fc0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009fc4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009fc8:	2300      	movs	r3, #0
 8009fca:	2200      	movs	r2, #0
 8009fcc:	46ab      	mov	fp, r5
 8009fce:	106d      	asrs	r5, r5, #1
 8009fd0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009fd4:	9304      	str	r3, [sp, #16]
 8009fd6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009fda:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009fde:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009fe2:	4640      	mov	r0, r8
 8009fe4:	4649      	mov	r1, r9
 8009fe6:	4614      	mov	r4, r2
 8009fe8:	461d      	mov	r5, r3
 8009fea:	f7f6 fa6d 	bl	80004c8 <__aeabi_dmul>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009ff6:	f7f6 f8af 	bl	8000158 <__aeabi_dsub>
 8009ffa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009ffe:	4606      	mov	r6, r0
 800a000:	460f      	mov	r7, r1
 800a002:	4620      	mov	r0, r4
 800a004:	4629      	mov	r1, r5
 800a006:	f7f6 f8a7 	bl	8000158 <__aeabi_dsub>
 800a00a:	4602      	mov	r2, r0
 800a00c:	460b      	mov	r3, r1
 800a00e:	4650      	mov	r0, sl
 800a010:	4659      	mov	r1, fp
 800a012:	f7f6 f8a1 	bl	8000158 <__aeabi_dsub>
 800a016:	4642      	mov	r2, r8
 800a018:	464b      	mov	r3, r9
 800a01a:	f7f6 fa55 	bl	80004c8 <__aeabi_dmul>
 800a01e:	4602      	mov	r2, r0
 800a020:	460b      	mov	r3, r1
 800a022:	4630      	mov	r0, r6
 800a024:	4639      	mov	r1, r7
 800a026:	f7f6 f897 	bl	8000158 <__aeabi_dsub>
 800a02a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a02e:	f7f6 fa4b 	bl	80004c8 <__aeabi_dmul>
 800a032:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a036:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a03a:	4610      	mov	r0, r2
 800a03c:	4619      	mov	r1, r3
 800a03e:	f7f6 fa43 	bl	80004c8 <__aeabi_dmul>
 800a042:	a37b      	add	r3, pc, #492	; (adr r3, 800a230 <__ieee754_pow+0x6e0>)
 800a044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a048:	4604      	mov	r4, r0
 800a04a:	460d      	mov	r5, r1
 800a04c:	f7f6 fa3c 	bl	80004c8 <__aeabi_dmul>
 800a050:	a379      	add	r3, pc, #484	; (adr r3, 800a238 <__ieee754_pow+0x6e8>)
 800a052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a056:	f7f6 f881 	bl	800015c <__adddf3>
 800a05a:	4622      	mov	r2, r4
 800a05c:	462b      	mov	r3, r5
 800a05e:	f7f6 fa33 	bl	80004c8 <__aeabi_dmul>
 800a062:	a377      	add	r3, pc, #476	; (adr r3, 800a240 <__ieee754_pow+0x6f0>)
 800a064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a068:	f7f6 f878 	bl	800015c <__adddf3>
 800a06c:	4622      	mov	r2, r4
 800a06e:	462b      	mov	r3, r5
 800a070:	f7f6 fa2a 	bl	80004c8 <__aeabi_dmul>
 800a074:	a374      	add	r3, pc, #464	; (adr r3, 800a248 <__ieee754_pow+0x6f8>)
 800a076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07a:	f7f6 f86f 	bl	800015c <__adddf3>
 800a07e:	4622      	mov	r2, r4
 800a080:	462b      	mov	r3, r5
 800a082:	f7f6 fa21 	bl	80004c8 <__aeabi_dmul>
 800a086:	a372      	add	r3, pc, #456	; (adr r3, 800a250 <__ieee754_pow+0x700>)
 800a088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08c:	f7f6 f866 	bl	800015c <__adddf3>
 800a090:	4622      	mov	r2, r4
 800a092:	462b      	mov	r3, r5
 800a094:	f7f6 fa18 	bl	80004c8 <__aeabi_dmul>
 800a098:	a36f      	add	r3, pc, #444	; (adr r3, 800a258 <__ieee754_pow+0x708>)
 800a09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09e:	f7f6 f85d 	bl	800015c <__adddf3>
 800a0a2:	4622      	mov	r2, r4
 800a0a4:	4606      	mov	r6, r0
 800a0a6:	460f      	mov	r7, r1
 800a0a8:	462b      	mov	r3, r5
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	4629      	mov	r1, r5
 800a0ae:	f7f6 fa0b 	bl	80004c8 <__aeabi_dmul>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	4639      	mov	r1, r7
 800a0ba:	f7f6 fa05 	bl	80004c8 <__aeabi_dmul>
 800a0be:	4604      	mov	r4, r0
 800a0c0:	460d      	mov	r5, r1
 800a0c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0c6:	4642      	mov	r2, r8
 800a0c8:	464b      	mov	r3, r9
 800a0ca:	f7f6 f847 	bl	800015c <__adddf3>
 800a0ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a0d2:	f7f6 f9f9 	bl	80004c8 <__aeabi_dmul>
 800a0d6:	4622      	mov	r2, r4
 800a0d8:	462b      	mov	r3, r5
 800a0da:	f7f6 f83f 	bl	800015c <__adddf3>
 800a0de:	4642      	mov	r2, r8
 800a0e0:	4606      	mov	r6, r0
 800a0e2:	460f      	mov	r7, r1
 800a0e4:	464b      	mov	r3, r9
 800a0e6:	4640      	mov	r0, r8
 800a0e8:	4649      	mov	r1, r9
 800a0ea:	f7f6 f9ed 	bl	80004c8 <__aeabi_dmul>
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	4b67      	ldr	r3, [pc, #412]	; (800a290 <__ieee754_pow+0x740>)
 800a0f2:	4682      	mov	sl, r0
 800a0f4:	468b      	mov	fp, r1
 800a0f6:	f7f6 f831 	bl	800015c <__adddf3>
 800a0fa:	4632      	mov	r2, r6
 800a0fc:	463b      	mov	r3, r7
 800a0fe:	f7f6 f82d 	bl	800015c <__adddf3>
 800a102:	9c04      	ldr	r4, [sp, #16]
 800a104:	460d      	mov	r5, r1
 800a106:	4622      	mov	r2, r4
 800a108:	460b      	mov	r3, r1
 800a10a:	4640      	mov	r0, r8
 800a10c:	4649      	mov	r1, r9
 800a10e:	f7f6 f9db 	bl	80004c8 <__aeabi_dmul>
 800a112:	2200      	movs	r2, #0
 800a114:	4680      	mov	r8, r0
 800a116:	4689      	mov	r9, r1
 800a118:	4620      	mov	r0, r4
 800a11a:	4629      	mov	r1, r5
 800a11c:	4b5c      	ldr	r3, [pc, #368]	; (800a290 <__ieee754_pow+0x740>)
 800a11e:	f7f6 f81b 	bl	8000158 <__aeabi_dsub>
 800a122:	4652      	mov	r2, sl
 800a124:	465b      	mov	r3, fp
 800a126:	f7f6 f817 	bl	8000158 <__aeabi_dsub>
 800a12a:	4602      	mov	r2, r0
 800a12c:	460b      	mov	r3, r1
 800a12e:	4630      	mov	r0, r6
 800a130:	4639      	mov	r1, r7
 800a132:	f7f6 f811 	bl	8000158 <__aeabi_dsub>
 800a136:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a13a:	f7f6 f9c5 	bl	80004c8 <__aeabi_dmul>
 800a13e:	4622      	mov	r2, r4
 800a140:	4606      	mov	r6, r0
 800a142:	460f      	mov	r7, r1
 800a144:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a148:	462b      	mov	r3, r5
 800a14a:	f7f6 f9bd 	bl	80004c8 <__aeabi_dmul>
 800a14e:	4602      	mov	r2, r0
 800a150:	460b      	mov	r3, r1
 800a152:	4630      	mov	r0, r6
 800a154:	4639      	mov	r1, r7
 800a156:	f7f6 f801 	bl	800015c <__adddf3>
 800a15a:	4606      	mov	r6, r0
 800a15c:	460f      	mov	r7, r1
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	4640      	mov	r0, r8
 800a164:	4649      	mov	r1, r9
 800a166:	f7f5 fff9 	bl	800015c <__adddf3>
 800a16a:	a33d      	add	r3, pc, #244	; (adr r3, 800a260 <__ieee754_pow+0x710>)
 800a16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a170:	9c04      	ldr	r4, [sp, #16]
 800a172:	460d      	mov	r5, r1
 800a174:	4620      	mov	r0, r4
 800a176:	f7f6 f9a7 	bl	80004c8 <__aeabi_dmul>
 800a17a:	4642      	mov	r2, r8
 800a17c:	464b      	mov	r3, r9
 800a17e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a182:	4620      	mov	r0, r4
 800a184:	4629      	mov	r1, r5
 800a186:	f7f5 ffe7 	bl	8000158 <__aeabi_dsub>
 800a18a:	4602      	mov	r2, r0
 800a18c:	460b      	mov	r3, r1
 800a18e:	4630      	mov	r0, r6
 800a190:	4639      	mov	r1, r7
 800a192:	f7f5 ffe1 	bl	8000158 <__aeabi_dsub>
 800a196:	a334      	add	r3, pc, #208	; (adr r3, 800a268 <__ieee754_pow+0x718>)
 800a198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19c:	f7f6 f994 	bl	80004c8 <__aeabi_dmul>
 800a1a0:	a333      	add	r3, pc, #204	; (adr r3, 800a270 <__ieee754_pow+0x720>)
 800a1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	460f      	mov	r7, r1
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	4629      	mov	r1, r5
 800a1ae:	f7f6 f98b 	bl	80004c8 <__aeabi_dmul>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	4639      	mov	r1, r7
 800a1ba:	f7f5 ffcf 	bl	800015c <__adddf3>
 800a1be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1c0:	4b34      	ldr	r3, [pc, #208]	; (800a294 <__ieee754_pow+0x744>)
 800a1c2:	4413      	add	r3, r2
 800a1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c8:	f7f5 ffc8 	bl	800015c <__adddf3>
 800a1cc:	4680      	mov	r8, r0
 800a1ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a1d0:	4689      	mov	r9, r1
 800a1d2:	f7f6 f90f 	bl	80003f4 <__aeabi_i2d>
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	460d      	mov	r5, r1
 800a1da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1dc:	4b2e      	ldr	r3, [pc, #184]	; (800a298 <__ieee754_pow+0x748>)
 800a1de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a1e8:	4642      	mov	r2, r8
 800a1ea:	464b      	mov	r3, r9
 800a1ec:	f7f5 ffb6 	bl	800015c <__adddf3>
 800a1f0:	4632      	mov	r2, r6
 800a1f2:	463b      	mov	r3, r7
 800a1f4:	f7f5 ffb2 	bl	800015c <__adddf3>
 800a1f8:	4622      	mov	r2, r4
 800a1fa:	462b      	mov	r3, r5
 800a1fc:	f7f5 ffae 	bl	800015c <__adddf3>
 800a200:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a204:	4622      	mov	r2, r4
 800a206:	462b      	mov	r3, r5
 800a208:	4650      	mov	r0, sl
 800a20a:	468b      	mov	fp, r1
 800a20c:	f7f5 ffa4 	bl	8000158 <__aeabi_dsub>
 800a210:	4632      	mov	r2, r6
 800a212:	463b      	mov	r3, r7
 800a214:	f7f5 ffa0 	bl	8000158 <__aeabi_dsub>
 800a218:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a21c:	f7f5 ff9c 	bl	8000158 <__aeabi_dsub>
 800a220:	4602      	mov	r2, r0
 800a222:	460b      	mov	r3, r1
 800a224:	4640      	mov	r0, r8
 800a226:	4649      	mov	r1, r9
 800a228:	e608      	b.n	8009e3c <__ieee754_pow+0x2ec>
 800a22a:	bf00      	nop
 800a22c:	f3af 8000 	nop.w
 800a230:	4a454eef 	.word	0x4a454eef
 800a234:	3fca7e28 	.word	0x3fca7e28
 800a238:	93c9db65 	.word	0x93c9db65
 800a23c:	3fcd864a 	.word	0x3fcd864a
 800a240:	a91d4101 	.word	0xa91d4101
 800a244:	3fd17460 	.word	0x3fd17460
 800a248:	518f264d 	.word	0x518f264d
 800a24c:	3fd55555 	.word	0x3fd55555
 800a250:	db6fabff 	.word	0xdb6fabff
 800a254:	3fdb6db6 	.word	0x3fdb6db6
 800a258:	33333303 	.word	0x33333303
 800a25c:	3fe33333 	.word	0x3fe33333
 800a260:	e0000000 	.word	0xe0000000
 800a264:	3feec709 	.word	0x3feec709
 800a268:	dc3a03fd 	.word	0xdc3a03fd
 800a26c:	3feec709 	.word	0x3feec709
 800a270:	145b01f5 	.word	0x145b01f5
 800a274:	be3e2fe0 	.word	0xbe3e2fe0
 800a278:	7ff00000 	.word	0x7ff00000
 800a27c:	43400000 	.word	0x43400000
 800a280:	0003988e 	.word	0x0003988e
 800a284:	000bb679 	.word	0x000bb679
 800a288:	0800aff0 	.word	0x0800aff0
 800a28c:	3ff00000 	.word	0x3ff00000
 800a290:	40080000 	.word	0x40080000
 800a294:	0800b010 	.word	0x0800b010
 800a298:	0800b000 	.word	0x0800b000
 800a29c:	2601      	movs	r6, #1
 800a29e:	e667      	b.n	8009f70 <__ieee754_pow+0x420>
 800a2a0:	a39d      	add	r3, pc, #628	; (adr r3, 800a518 <__ieee754_pow+0x9c8>)
 800a2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a6:	4640      	mov	r0, r8
 800a2a8:	4649      	mov	r1, r9
 800a2aa:	f7f5 ff57 	bl	800015c <__adddf3>
 800a2ae:	4622      	mov	r2, r4
 800a2b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2b4:	462b      	mov	r3, r5
 800a2b6:	4650      	mov	r0, sl
 800a2b8:	4639      	mov	r1, r7
 800a2ba:	f7f5 ff4d 	bl	8000158 <__aeabi_dsub>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2c6:	f7f6 fb8f 	bl	80009e8 <__aeabi_dcmpgt>
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	f47f ae01 	bne.w	8009ed2 <__ieee754_pow+0x382>
 800a2d0:	4aa5      	ldr	r2, [pc, #660]	; (800a568 <__ieee754_pow+0xa18>)
 800a2d2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	f340 8103 	ble.w	800a4e2 <__ieee754_pow+0x992>
 800a2dc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	151b      	asrs	r3, r3, #20
 800a2e4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a2e8:	fa4a f303 	asr.w	r3, sl, r3
 800a2ec:	4433      	add	r3, r6
 800a2ee:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a2f2:	4f9e      	ldr	r7, [pc, #632]	; (800a56c <__ieee754_pow+0xa1c>)
 800a2f4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a2f8:	4117      	asrs	r7, r2
 800a2fa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a2fe:	ea23 0107 	bic.w	r1, r3, r7
 800a302:	f1c2 0214 	rsb	r2, r2, #20
 800a306:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a30a:	460b      	mov	r3, r1
 800a30c:	fa4a fa02 	asr.w	sl, sl, r2
 800a310:	2e00      	cmp	r6, #0
 800a312:	4602      	mov	r2, r0
 800a314:	4629      	mov	r1, r5
 800a316:	4620      	mov	r0, r4
 800a318:	bfb8      	it	lt
 800a31a:	f1ca 0a00 	rsblt	sl, sl, #0
 800a31e:	f7f5 ff1b 	bl	8000158 <__aeabi_dsub>
 800a322:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a32a:	2400      	movs	r4, #0
 800a32c:	4642      	mov	r2, r8
 800a32e:	464b      	mov	r3, r9
 800a330:	f7f5 ff14 	bl	800015c <__adddf3>
 800a334:	a37a      	add	r3, pc, #488	; (adr r3, 800a520 <__ieee754_pow+0x9d0>)
 800a336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33a:	4620      	mov	r0, r4
 800a33c:	460d      	mov	r5, r1
 800a33e:	f7f6 f8c3 	bl	80004c8 <__aeabi_dmul>
 800a342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a346:	4606      	mov	r6, r0
 800a348:	460f      	mov	r7, r1
 800a34a:	4620      	mov	r0, r4
 800a34c:	4629      	mov	r1, r5
 800a34e:	f7f5 ff03 	bl	8000158 <__aeabi_dsub>
 800a352:	4602      	mov	r2, r0
 800a354:	460b      	mov	r3, r1
 800a356:	4640      	mov	r0, r8
 800a358:	4649      	mov	r1, r9
 800a35a:	f7f5 fefd 	bl	8000158 <__aeabi_dsub>
 800a35e:	a372      	add	r3, pc, #456	; (adr r3, 800a528 <__ieee754_pow+0x9d8>)
 800a360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a364:	f7f6 f8b0 	bl	80004c8 <__aeabi_dmul>
 800a368:	a371      	add	r3, pc, #452	; (adr r3, 800a530 <__ieee754_pow+0x9e0>)
 800a36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36e:	4680      	mov	r8, r0
 800a370:	4689      	mov	r9, r1
 800a372:	4620      	mov	r0, r4
 800a374:	4629      	mov	r1, r5
 800a376:	f7f6 f8a7 	bl	80004c8 <__aeabi_dmul>
 800a37a:	4602      	mov	r2, r0
 800a37c:	460b      	mov	r3, r1
 800a37e:	4640      	mov	r0, r8
 800a380:	4649      	mov	r1, r9
 800a382:	f7f5 feeb 	bl	800015c <__adddf3>
 800a386:	4604      	mov	r4, r0
 800a388:	460d      	mov	r5, r1
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	4630      	mov	r0, r6
 800a390:	4639      	mov	r1, r7
 800a392:	f7f5 fee3 	bl	800015c <__adddf3>
 800a396:	4632      	mov	r2, r6
 800a398:	463b      	mov	r3, r7
 800a39a:	4680      	mov	r8, r0
 800a39c:	4689      	mov	r9, r1
 800a39e:	f7f5 fedb 	bl	8000158 <__aeabi_dsub>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	f7f5 fed5 	bl	8000158 <__aeabi_dsub>
 800a3ae:	4642      	mov	r2, r8
 800a3b0:	4606      	mov	r6, r0
 800a3b2:	460f      	mov	r7, r1
 800a3b4:	464b      	mov	r3, r9
 800a3b6:	4640      	mov	r0, r8
 800a3b8:	4649      	mov	r1, r9
 800a3ba:	f7f6 f885 	bl	80004c8 <__aeabi_dmul>
 800a3be:	a35e      	add	r3, pc, #376	; (adr r3, 800a538 <__ieee754_pow+0x9e8>)
 800a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	460d      	mov	r5, r1
 800a3c8:	f7f6 f87e 	bl	80004c8 <__aeabi_dmul>
 800a3cc:	a35c      	add	r3, pc, #368	; (adr r3, 800a540 <__ieee754_pow+0x9f0>)
 800a3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d2:	f7f5 fec1 	bl	8000158 <__aeabi_dsub>
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	462b      	mov	r3, r5
 800a3da:	f7f6 f875 	bl	80004c8 <__aeabi_dmul>
 800a3de:	a35a      	add	r3, pc, #360	; (adr r3, 800a548 <__ieee754_pow+0x9f8>)
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	f7f5 feba 	bl	800015c <__adddf3>
 800a3e8:	4622      	mov	r2, r4
 800a3ea:	462b      	mov	r3, r5
 800a3ec:	f7f6 f86c 	bl	80004c8 <__aeabi_dmul>
 800a3f0:	a357      	add	r3, pc, #348	; (adr r3, 800a550 <__ieee754_pow+0xa00>)
 800a3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f6:	f7f5 feaf 	bl	8000158 <__aeabi_dsub>
 800a3fa:	4622      	mov	r2, r4
 800a3fc:	462b      	mov	r3, r5
 800a3fe:	f7f6 f863 	bl	80004c8 <__aeabi_dmul>
 800a402:	a355      	add	r3, pc, #340	; (adr r3, 800a558 <__ieee754_pow+0xa08>)
 800a404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a408:	f7f5 fea8 	bl	800015c <__adddf3>
 800a40c:	4622      	mov	r2, r4
 800a40e:	462b      	mov	r3, r5
 800a410:	f7f6 f85a 	bl	80004c8 <__aeabi_dmul>
 800a414:	4602      	mov	r2, r0
 800a416:	460b      	mov	r3, r1
 800a418:	4640      	mov	r0, r8
 800a41a:	4649      	mov	r1, r9
 800a41c:	f7f5 fe9c 	bl	8000158 <__aeabi_dsub>
 800a420:	4604      	mov	r4, r0
 800a422:	460d      	mov	r5, r1
 800a424:	4602      	mov	r2, r0
 800a426:	460b      	mov	r3, r1
 800a428:	4640      	mov	r0, r8
 800a42a:	4649      	mov	r1, r9
 800a42c:	f7f6 f84c 	bl	80004c8 <__aeabi_dmul>
 800a430:	2200      	movs	r2, #0
 800a432:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a436:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a43a:	4620      	mov	r0, r4
 800a43c:	4629      	mov	r1, r5
 800a43e:	f7f5 fe8b 	bl	8000158 <__aeabi_dsub>
 800a442:	4602      	mov	r2, r0
 800a444:	460b      	mov	r3, r1
 800a446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a44a:	f7f6 f967 	bl	800071c <__aeabi_ddiv>
 800a44e:	4632      	mov	r2, r6
 800a450:	4604      	mov	r4, r0
 800a452:	460d      	mov	r5, r1
 800a454:	463b      	mov	r3, r7
 800a456:	4640      	mov	r0, r8
 800a458:	4649      	mov	r1, r9
 800a45a:	f7f6 f835 	bl	80004c8 <__aeabi_dmul>
 800a45e:	4632      	mov	r2, r6
 800a460:	463b      	mov	r3, r7
 800a462:	f7f5 fe7b 	bl	800015c <__adddf3>
 800a466:	4602      	mov	r2, r0
 800a468:	460b      	mov	r3, r1
 800a46a:	4620      	mov	r0, r4
 800a46c:	4629      	mov	r1, r5
 800a46e:	f7f5 fe73 	bl	8000158 <__aeabi_dsub>
 800a472:	4642      	mov	r2, r8
 800a474:	464b      	mov	r3, r9
 800a476:	f7f5 fe6f 	bl	8000158 <__aeabi_dsub>
 800a47a:	4602      	mov	r2, r0
 800a47c:	460b      	mov	r3, r1
 800a47e:	2000      	movs	r0, #0
 800a480:	493b      	ldr	r1, [pc, #236]	; (800a570 <__ieee754_pow+0xa20>)
 800a482:	f7f5 fe69 	bl	8000158 <__aeabi_dsub>
 800a486:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a48a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a48e:	da2b      	bge.n	800a4e8 <__ieee754_pow+0x998>
 800a490:	4652      	mov	r2, sl
 800a492:	f000 fb4d 	bl	800ab30 <scalbn>
 800a496:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a49a:	f7ff bbf2 	b.w	8009c82 <__ieee754_pow+0x132>
 800a49e:	4b35      	ldr	r3, [pc, #212]	; (800a574 <__ieee754_pow+0xa24>)
 800a4a0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a4a4:	429f      	cmp	r7, r3
 800a4a6:	f77f af13 	ble.w	800a2d0 <__ieee754_pow+0x780>
 800a4aa:	4b33      	ldr	r3, [pc, #204]	; (800a578 <__ieee754_pow+0xa28>)
 800a4ac:	440b      	add	r3, r1
 800a4ae:	4303      	orrs	r3, r0
 800a4b0:	d00b      	beq.n	800a4ca <__ieee754_pow+0x97a>
 800a4b2:	a32b      	add	r3, pc, #172	; (adr r3, 800a560 <__ieee754_pow+0xa10>)
 800a4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4bc:	f7f6 f804 	bl	80004c8 <__aeabi_dmul>
 800a4c0:	a327      	add	r3, pc, #156	; (adr r3, 800a560 <__ieee754_pow+0xa10>)
 800a4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c6:	f7ff bbdc 	b.w	8009c82 <__ieee754_pow+0x132>
 800a4ca:	4622      	mov	r2, r4
 800a4cc:	462b      	mov	r3, r5
 800a4ce:	f7f5 fe43 	bl	8000158 <__aeabi_dsub>
 800a4d2:	4642      	mov	r2, r8
 800a4d4:	464b      	mov	r3, r9
 800a4d6:	f7f6 fa7d 	bl	80009d4 <__aeabi_dcmpge>
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	f43f aef8 	beq.w	800a2d0 <__ieee754_pow+0x780>
 800a4e0:	e7e7      	b.n	800a4b2 <__ieee754_pow+0x962>
 800a4e2:	f04f 0a00 	mov.w	sl, #0
 800a4e6:	e71e      	b.n	800a326 <__ieee754_pow+0x7d6>
 800a4e8:	4621      	mov	r1, r4
 800a4ea:	e7d4      	b.n	800a496 <__ieee754_pow+0x946>
 800a4ec:	f04f 0b00 	mov.w	fp, #0
 800a4f0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a570 <__ieee754_pow+0xa20>
 800a4f4:	f7ff bbb0 	b.w	8009c58 <__ieee754_pow+0x108>
 800a4f8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800a4fc:	f7ff bbac 	b.w	8009c58 <__ieee754_pow+0x108>
 800a500:	4638      	mov	r0, r7
 800a502:	4641      	mov	r1, r8
 800a504:	f7ff bbbf 	b.w	8009c86 <__ieee754_pow+0x136>
 800a508:	9200      	str	r2, [sp, #0]
 800a50a:	f7ff bb7f 	b.w	8009c0c <__ieee754_pow+0xbc>
 800a50e:	2300      	movs	r3, #0
 800a510:	f7ff bb69 	b.w	8009be6 <__ieee754_pow+0x96>
 800a514:	f3af 8000 	nop.w
 800a518:	652b82fe 	.word	0x652b82fe
 800a51c:	3c971547 	.word	0x3c971547
 800a520:	00000000 	.word	0x00000000
 800a524:	3fe62e43 	.word	0x3fe62e43
 800a528:	fefa39ef 	.word	0xfefa39ef
 800a52c:	3fe62e42 	.word	0x3fe62e42
 800a530:	0ca86c39 	.word	0x0ca86c39
 800a534:	be205c61 	.word	0xbe205c61
 800a538:	72bea4d0 	.word	0x72bea4d0
 800a53c:	3e663769 	.word	0x3e663769
 800a540:	c5d26bf1 	.word	0xc5d26bf1
 800a544:	3ebbbd41 	.word	0x3ebbbd41
 800a548:	af25de2c 	.word	0xaf25de2c
 800a54c:	3f11566a 	.word	0x3f11566a
 800a550:	16bebd93 	.word	0x16bebd93
 800a554:	3f66c16c 	.word	0x3f66c16c
 800a558:	5555553e 	.word	0x5555553e
 800a55c:	3fc55555 	.word	0x3fc55555
 800a560:	c2f8f359 	.word	0xc2f8f359
 800a564:	01a56e1f 	.word	0x01a56e1f
 800a568:	3fe00000 	.word	0x3fe00000
 800a56c:	000fffff 	.word	0x000fffff
 800a570:	3ff00000 	.word	0x3ff00000
 800a574:	4090cbff 	.word	0x4090cbff
 800a578:	3f6f3400 	.word	0x3f6f3400

0800a57c <__ieee754_sqrt>:
 800a57c:	f8df c150 	ldr.w	ip, [pc, #336]	; 800a6d0 <__ieee754_sqrt+0x154>
 800a580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a584:	ea3c 0c01 	bics.w	ip, ip, r1
 800a588:	460b      	mov	r3, r1
 800a58a:	4606      	mov	r6, r0
 800a58c:	460d      	mov	r5, r1
 800a58e:	460a      	mov	r2, r1
 800a590:	4607      	mov	r7, r0
 800a592:	4604      	mov	r4, r0
 800a594:	d10e      	bne.n	800a5b4 <__ieee754_sqrt+0x38>
 800a596:	4602      	mov	r2, r0
 800a598:	f7f5 ff96 	bl	80004c8 <__aeabi_dmul>
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	4629      	mov	r1, r5
 800a5a4:	f7f5 fdda 	bl	800015c <__adddf3>
 800a5a8:	4606      	mov	r6, r0
 800a5aa:	460d      	mov	r5, r1
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	4629      	mov	r1, r5
 800a5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5b4:	2900      	cmp	r1, #0
 800a5b6:	dc0d      	bgt.n	800a5d4 <__ieee754_sqrt+0x58>
 800a5b8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a5bc:	ea5c 0707 	orrs.w	r7, ip, r7
 800a5c0:	d0f4      	beq.n	800a5ac <__ieee754_sqrt+0x30>
 800a5c2:	b139      	cbz	r1, 800a5d4 <__ieee754_sqrt+0x58>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	f7f5 fdc7 	bl	8000158 <__aeabi_dsub>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	f7f6 f8a5 	bl	800071c <__aeabi_ddiv>
 800a5d2:	e7e9      	b.n	800a5a8 <__ieee754_sqrt+0x2c>
 800a5d4:	1512      	asrs	r2, r2, #20
 800a5d6:	d074      	beq.n	800a6c2 <__ieee754_sqrt+0x146>
 800a5d8:	2000      	movs	r0, #0
 800a5da:	07d5      	lsls	r5, r2, #31
 800a5dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5e0:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800a5e4:	bf5e      	ittt	pl
 800a5e6:	0fe3      	lsrpl	r3, r4, #31
 800a5e8:	0064      	lslpl	r4, r4, #1
 800a5ea:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800a5ee:	0fe3      	lsrs	r3, r4, #31
 800a5f0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a5f4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800a5f8:	2516      	movs	r5, #22
 800a5fa:	4601      	mov	r1, r0
 800a5fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a600:	1076      	asrs	r6, r6, #1
 800a602:	0064      	lsls	r4, r4, #1
 800a604:	188f      	adds	r7, r1, r2
 800a606:	429f      	cmp	r7, r3
 800a608:	bfde      	ittt	le
 800a60a:	1bdb      	suble	r3, r3, r7
 800a60c:	18b9      	addle	r1, r7, r2
 800a60e:	1880      	addle	r0, r0, r2
 800a610:	005b      	lsls	r3, r3, #1
 800a612:	3d01      	subs	r5, #1
 800a614:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a618:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a61c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a620:	d1f0      	bne.n	800a604 <__ieee754_sqrt+0x88>
 800a622:	462a      	mov	r2, r5
 800a624:	f04f 0e20 	mov.w	lr, #32
 800a628:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800a62c:	428b      	cmp	r3, r1
 800a62e:	eb07 0c05 	add.w	ip, r7, r5
 800a632:	dc02      	bgt.n	800a63a <__ieee754_sqrt+0xbe>
 800a634:	d113      	bne.n	800a65e <__ieee754_sqrt+0xe2>
 800a636:	45a4      	cmp	ip, r4
 800a638:	d811      	bhi.n	800a65e <__ieee754_sqrt+0xe2>
 800a63a:	f1bc 0f00 	cmp.w	ip, #0
 800a63e:	eb0c 0507 	add.w	r5, ip, r7
 800a642:	da43      	bge.n	800a6cc <__ieee754_sqrt+0x150>
 800a644:	2d00      	cmp	r5, #0
 800a646:	db41      	blt.n	800a6cc <__ieee754_sqrt+0x150>
 800a648:	f101 0801 	add.w	r8, r1, #1
 800a64c:	1a5b      	subs	r3, r3, r1
 800a64e:	4641      	mov	r1, r8
 800a650:	45a4      	cmp	ip, r4
 800a652:	bf88      	it	hi
 800a654:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a658:	eba4 040c 	sub.w	r4, r4, ip
 800a65c:	443a      	add	r2, r7
 800a65e:	005b      	lsls	r3, r3, #1
 800a660:	f1be 0e01 	subs.w	lr, lr, #1
 800a664:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a668:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800a66c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a670:	d1dc      	bne.n	800a62c <__ieee754_sqrt+0xb0>
 800a672:	4323      	orrs	r3, r4
 800a674:	d006      	beq.n	800a684 <__ieee754_sqrt+0x108>
 800a676:	1c54      	adds	r4, r2, #1
 800a678:	bf0b      	itete	eq
 800a67a:	4672      	moveq	r2, lr
 800a67c:	3201      	addne	r2, #1
 800a67e:	3001      	addeq	r0, #1
 800a680:	f022 0201 	bicne.w	r2, r2, #1
 800a684:	1043      	asrs	r3, r0, #1
 800a686:	07c1      	lsls	r1, r0, #31
 800a688:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a68c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a690:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a694:	bf48      	it	mi
 800a696:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a69a:	4610      	mov	r0, r2
 800a69c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800a6a0:	e782      	b.n	800a5a8 <__ieee754_sqrt+0x2c>
 800a6a2:	0ae3      	lsrs	r3, r4, #11
 800a6a4:	3915      	subs	r1, #21
 800a6a6:	0564      	lsls	r4, r4, #21
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d0fa      	beq.n	800a6a2 <__ieee754_sqrt+0x126>
 800a6ac:	02de      	lsls	r6, r3, #11
 800a6ae:	d50a      	bpl.n	800a6c6 <__ieee754_sqrt+0x14a>
 800a6b0:	f1c2 0020 	rsb	r0, r2, #32
 800a6b4:	fa24 f000 	lsr.w	r0, r4, r0
 800a6b8:	1e55      	subs	r5, r2, #1
 800a6ba:	4094      	lsls	r4, r2
 800a6bc:	4303      	orrs	r3, r0
 800a6be:	1b4a      	subs	r2, r1, r5
 800a6c0:	e78a      	b.n	800a5d8 <__ieee754_sqrt+0x5c>
 800a6c2:	4611      	mov	r1, r2
 800a6c4:	e7f0      	b.n	800a6a8 <__ieee754_sqrt+0x12c>
 800a6c6:	005b      	lsls	r3, r3, #1
 800a6c8:	3201      	adds	r2, #1
 800a6ca:	e7ef      	b.n	800a6ac <__ieee754_sqrt+0x130>
 800a6cc:	4688      	mov	r8, r1
 800a6ce:	e7bd      	b.n	800a64c <__ieee754_sqrt+0xd0>
 800a6d0:	7ff00000 	.word	0x7ff00000

0800a6d4 <__ieee754_asinf>:
 800a6d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d8:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800a6dc:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	4605      	mov	r5, r0
 800a6e4:	d10c      	bne.n	800a700 <__ieee754_asinf+0x2c>
 800a6e6:	498d      	ldr	r1, [pc, #564]	; (800a91c <__ieee754_asinf+0x248>)
 800a6e8:	f7f6 fb24 	bl	8000d34 <__aeabi_fmul>
 800a6ec:	498c      	ldr	r1, [pc, #560]	; (800a920 <__ieee754_asinf+0x24c>)
 800a6ee:	4605      	mov	r5, r0
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	f7f6 fb1f 	bl	8000d34 <__aeabi_fmul>
 800a6f6:	4601      	mov	r1, r0
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	f7f6 fa13 	bl	8000b24 <__addsf3>
 800a6fe:	e006      	b.n	800a70e <__ieee754_asinf+0x3a>
 800a700:	dd07      	ble.n	800a712 <__ieee754_asinf+0x3e>
 800a702:	4601      	mov	r1, r0
 800a704:	f7f6 fa0c 	bl	8000b20 <__aeabi_fsub>
 800a708:	4601      	mov	r1, r0
 800a70a:	f7f6 fbc7 	bl	8000e9c <__aeabi_fdiv>
 800a70e:	4604      	mov	r4, r0
 800a710:	e00e      	b.n	800a730 <__ieee754_asinf+0x5c>
 800a712:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800a716:	da58      	bge.n	800a7ca <__ieee754_asinf+0xf6>
 800a718:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800a71c:	da0b      	bge.n	800a736 <__ieee754_asinf+0x62>
 800a71e:	4981      	ldr	r1, [pc, #516]	; (800a924 <__ieee754_asinf+0x250>)
 800a720:	f7f6 fa00 	bl	8000b24 <__addsf3>
 800a724:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a728:	f7f6 fcc0 	bl	80010ac <__aeabi_fcmpgt>
 800a72c:	2800      	cmp	r0, #0
 800a72e:	d04c      	beq.n	800a7ca <__ieee754_asinf+0xf6>
 800a730:	4620      	mov	r0, r4
 800a732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a736:	4601      	mov	r1, r0
 800a738:	f7f6 fafc 	bl	8000d34 <__aeabi_fmul>
 800a73c:	4605      	mov	r5, r0
 800a73e:	497a      	ldr	r1, [pc, #488]	; (800a928 <__ieee754_asinf+0x254>)
 800a740:	f7f6 faf8 	bl	8000d34 <__aeabi_fmul>
 800a744:	4979      	ldr	r1, [pc, #484]	; (800a92c <__ieee754_asinf+0x258>)
 800a746:	f7f6 f9ed 	bl	8000b24 <__addsf3>
 800a74a:	4629      	mov	r1, r5
 800a74c:	f7f6 faf2 	bl	8000d34 <__aeabi_fmul>
 800a750:	4977      	ldr	r1, [pc, #476]	; (800a930 <__ieee754_asinf+0x25c>)
 800a752:	f7f6 f9e5 	bl	8000b20 <__aeabi_fsub>
 800a756:	4629      	mov	r1, r5
 800a758:	f7f6 faec 	bl	8000d34 <__aeabi_fmul>
 800a75c:	4975      	ldr	r1, [pc, #468]	; (800a934 <__ieee754_asinf+0x260>)
 800a75e:	f7f6 f9e1 	bl	8000b24 <__addsf3>
 800a762:	4629      	mov	r1, r5
 800a764:	f7f6 fae6 	bl	8000d34 <__aeabi_fmul>
 800a768:	4973      	ldr	r1, [pc, #460]	; (800a938 <__ieee754_asinf+0x264>)
 800a76a:	f7f6 f9d9 	bl	8000b20 <__aeabi_fsub>
 800a76e:	4629      	mov	r1, r5
 800a770:	f7f6 fae0 	bl	8000d34 <__aeabi_fmul>
 800a774:	4971      	ldr	r1, [pc, #452]	; (800a93c <__ieee754_asinf+0x268>)
 800a776:	f7f6 f9d5 	bl	8000b24 <__addsf3>
 800a77a:	4629      	mov	r1, r5
 800a77c:	f7f6 fada 	bl	8000d34 <__aeabi_fmul>
 800a780:	496f      	ldr	r1, [pc, #444]	; (800a940 <__ieee754_asinf+0x26c>)
 800a782:	4606      	mov	r6, r0
 800a784:	4628      	mov	r0, r5
 800a786:	f7f6 fad5 	bl	8000d34 <__aeabi_fmul>
 800a78a:	496e      	ldr	r1, [pc, #440]	; (800a944 <__ieee754_asinf+0x270>)
 800a78c:	f7f6 f9c8 	bl	8000b20 <__aeabi_fsub>
 800a790:	4629      	mov	r1, r5
 800a792:	f7f6 facf 	bl	8000d34 <__aeabi_fmul>
 800a796:	496c      	ldr	r1, [pc, #432]	; (800a948 <__ieee754_asinf+0x274>)
 800a798:	f7f6 f9c4 	bl	8000b24 <__addsf3>
 800a79c:	4629      	mov	r1, r5
 800a79e:	f7f6 fac9 	bl	8000d34 <__aeabi_fmul>
 800a7a2:	496a      	ldr	r1, [pc, #424]	; (800a94c <__ieee754_asinf+0x278>)
 800a7a4:	f7f6 f9bc 	bl	8000b20 <__aeabi_fsub>
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	f7f6 fac3 	bl	8000d34 <__aeabi_fmul>
 800a7ae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a7b2:	f7f6 f9b7 	bl	8000b24 <__addsf3>
 800a7b6:	4601      	mov	r1, r0
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	f7f6 fb6f 	bl	8000e9c <__aeabi_fdiv>
 800a7be:	4621      	mov	r1, r4
 800a7c0:	f7f6 fab8 	bl	8000d34 <__aeabi_fmul>
 800a7c4:	4601      	mov	r1, r0
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	e797      	b.n	800a6fa <__ieee754_asinf+0x26>
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f000 fa36 	bl	800ac3c <fabsf>
 800a7d0:	4601      	mov	r1, r0
 800a7d2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a7d6:	f7f6 f9a3 	bl	8000b20 <__aeabi_fsub>
 800a7da:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a7de:	f7f6 faa9 	bl	8000d34 <__aeabi_fmul>
 800a7e2:	4606      	mov	r6, r0
 800a7e4:	4950      	ldr	r1, [pc, #320]	; (800a928 <__ieee754_asinf+0x254>)
 800a7e6:	f7f6 faa5 	bl	8000d34 <__aeabi_fmul>
 800a7ea:	4950      	ldr	r1, [pc, #320]	; (800a92c <__ieee754_asinf+0x258>)
 800a7ec:	f7f6 f99a 	bl	8000b24 <__addsf3>
 800a7f0:	4631      	mov	r1, r6
 800a7f2:	f7f6 fa9f 	bl	8000d34 <__aeabi_fmul>
 800a7f6:	494e      	ldr	r1, [pc, #312]	; (800a930 <__ieee754_asinf+0x25c>)
 800a7f8:	f7f6 f992 	bl	8000b20 <__aeabi_fsub>
 800a7fc:	4631      	mov	r1, r6
 800a7fe:	f7f6 fa99 	bl	8000d34 <__aeabi_fmul>
 800a802:	494c      	ldr	r1, [pc, #304]	; (800a934 <__ieee754_asinf+0x260>)
 800a804:	f7f6 f98e 	bl	8000b24 <__addsf3>
 800a808:	4631      	mov	r1, r6
 800a80a:	f7f6 fa93 	bl	8000d34 <__aeabi_fmul>
 800a80e:	494a      	ldr	r1, [pc, #296]	; (800a938 <__ieee754_asinf+0x264>)
 800a810:	f7f6 f986 	bl	8000b20 <__aeabi_fsub>
 800a814:	4631      	mov	r1, r6
 800a816:	f7f6 fa8d 	bl	8000d34 <__aeabi_fmul>
 800a81a:	4948      	ldr	r1, [pc, #288]	; (800a93c <__ieee754_asinf+0x268>)
 800a81c:	f7f6 f982 	bl	8000b24 <__addsf3>
 800a820:	4631      	mov	r1, r6
 800a822:	f7f6 fa87 	bl	8000d34 <__aeabi_fmul>
 800a826:	4946      	ldr	r1, [pc, #280]	; (800a940 <__ieee754_asinf+0x26c>)
 800a828:	4681      	mov	r9, r0
 800a82a:	4630      	mov	r0, r6
 800a82c:	f7f6 fa82 	bl	8000d34 <__aeabi_fmul>
 800a830:	4944      	ldr	r1, [pc, #272]	; (800a944 <__ieee754_asinf+0x270>)
 800a832:	f7f6 f975 	bl	8000b20 <__aeabi_fsub>
 800a836:	4631      	mov	r1, r6
 800a838:	f7f6 fa7c 	bl	8000d34 <__aeabi_fmul>
 800a83c:	4942      	ldr	r1, [pc, #264]	; (800a948 <__ieee754_asinf+0x274>)
 800a83e:	f7f6 f971 	bl	8000b24 <__addsf3>
 800a842:	4631      	mov	r1, r6
 800a844:	f7f6 fa76 	bl	8000d34 <__aeabi_fmul>
 800a848:	4940      	ldr	r1, [pc, #256]	; (800a94c <__ieee754_asinf+0x278>)
 800a84a:	f7f6 f969 	bl	8000b20 <__aeabi_fsub>
 800a84e:	4631      	mov	r1, r6
 800a850:	f7f6 fa70 	bl	8000d34 <__aeabi_fmul>
 800a854:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a858:	f7f6 f964 	bl	8000b24 <__addsf3>
 800a85c:	4682      	mov	sl, r0
 800a85e:	4630      	mov	r0, r6
 800a860:	f000 f87c 	bl	800a95c <__ieee754_sqrtf>
 800a864:	4b3a      	ldr	r3, [pc, #232]	; (800a950 <__ieee754_asinf+0x27c>)
 800a866:	4607      	mov	r7, r0
 800a868:	4598      	cmp	r8, r3
 800a86a:	dd1a      	ble.n	800a8a2 <__ieee754_asinf+0x1ce>
 800a86c:	4651      	mov	r1, sl
 800a86e:	4648      	mov	r0, r9
 800a870:	f7f6 fb14 	bl	8000e9c <__aeabi_fdiv>
 800a874:	4639      	mov	r1, r7
 800a876:	f7f6 fa5d 	bl	8000d34 <__aeabi_fmul>
 800a87a:	4639      	mov	r1, r7
 800a87c:	f7f6 f952 	bl	8000b24 <__addsf3>
 800a880:	4601      	mov	r1, r0
 800a882:	f7f6 f94f 	bl	8000b24 <__addsf3>
 800a886:	4933      	ldr	r1, [pc, #204]	; (800a954 <__ieee754_asinf+0x280>)
 800a888:	f7f6 f94c 	bl	8000b24 <__addsf3>
 800a88c:	4601      	mov	r1, r0
 800a88e:	4823      	ldr	r0, [pc, #140]	; (800a91c <__ieee754_asinf+0x248>)
 800a890:	f7f6 f946 	bl	8000b20 <__aeabi_fsub>
 800a894:	2d00      	cmp	r5, #0
 800a896:	4604      	mov	r4, r0
 800a898:	f73f af4a 	bgt.w	800a730 <__ieee754_asinf+0x5c>
 800a89c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a8a0:	e735      	b.n	800a70e <__ieee754_asinf+0x3a>
 800a8a2:	4601      	mov	r1, r0
 800a8a4:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800a8a8:	f7f6 f93c 	bl	8000b24 <__addsf3>
 800a8ac:	4651      	mov	r1, sl
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	4648      	mov	r0, r9
 800a8b2:	f7f6 faf3 	bl	8000e9c <__aeabi_fdiv>
 800a8b6:	4601      	mov	r1, r0
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	f7f6 fa3b 	bl	8000d34 <__aeabi_fmul>
 800a8be:	f028 080f 	bic.w	r8, r8, #15
 800a8c2:	4681      	mov	r9, r0
 800a8c4:	4641      	mov	r1, r8
 800a8c6:	4640      	mov	r0, r8
 800a8c8:	f7f6 fa34 	bl	8000d34 <__aeabi_fmul>
 800a8cc:	4601      	mov	r1, r0
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	f7f6 f926 	bl	8000b20 <__aeabi_fsub>
 800a8d4:	4641      	mov	r1, r8
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	4638      	mov	r0, r7
 800a8da:	f7f6 f923 	bl	8000b24 <__addsf3>
 800a8de:	4601      	mov	r1, r0
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f7f6 fadb 	bl	8000e9c <__aeabi_fdiv>
 800a8e6:	4601      	mov	r1, r0
 800a8e8:	f7f6 f91c 	bl	8000b24 <__addsf3>
 800a8ec:	4601      	mov	r1, r0
 800a8ee:	480c      	ldr	r0, [pc, #48]	; (800a920 <__ieee754_asinf+0x24c>)
 800a8f0:	f7f6 f916 	bl	8000b20 <__aeabi_fsub>
 800a8f4:	4601      	mov	r1, r0
 800a8f6:	4648      	mov	r0, r9
 800a8f8:	f7f6 f912 	bl	8000b20 <__aeabi_fsub>
 800a8fc:	4641      	mov	r1, r8
 800a8fe:	4604      	mov	r4, r0
 800a900:	4640      	mov	r0, r8
 800a902:	f7f6 f90f 	bl	8000b24 <__addsf3>
 800a906:	4601      	mov	r1, r0
 800a908:	4813      	ldr	r0, [pc, #76]	; (800a958 <__ieee754_asinf+0x284>)
 800a90a:	f7f6 f909 	bl	8000b20 <__aeabi_fsub>
 800a90e:	4601      	mov	r1, r0
 800a910:	4620      	mov	r0, r4
 800a912:	f7f6 f905 	bl	8000b20 <__aeabi_fsub>
 800a916:	4601      	mov	r1, r0
 800a918:	480f      	ldr	r0, [pc, #60]	; (800a958 <__ieee754_asinf+0x284>)
 800a91a:	e7b9      	b.n	800a890 <__ieee754_asinf+0x1bc>
 800a91c:	3fc90fdb 	.word	0x3fc90fdb
 800a920:	b33bbd2e 	.word	0xb33bbd2e
 800a924:	7149f2ca 	.word	0x7149f2ca
 800a928:	3811ef08 	.word	0x3811ef08
 800a92c:	3a4f7f04 	.word	0x3a4f7f04
 800a930:	3d241146 	.word	0x3d241146
 800a934:	3e4e0aa8 	.word	0x3e4e0aa8
 800a938:	3ea6b090 	.word	0x3ea6b090
 800a93c:	3e2aaaab 	.word	0x3e2aaaab
 800a940:	3d9dc62e 	.word	0x3d9dc62e
 800a944:	3f303361 	.word	0x3f303361
 800a948:	4001572d 	.word	0x4001572d
 800a94c:	4019d139 	.word	0x4019d139
 800a950:	3f799999 	.word	0x3f799999
 800a954:	333bbd2e 	.word	0x333bbd2e
 800a958:	3f490fdb 	.word	0x3f490fdb

0800a95c <__ieee754_sqrtf>:
 800a95c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800a960:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a964:	b570      	push	{r4, r5, r6, lr}
 800a966:	4603      	mov	r3, r0
 800a968:	4604      	mov	r4, r0
 800a96a:	d309      	bcc.n	800a980 <__ieee754_sqrtf+0x24>
 800a96c:	4601      	mov	r1, r0
 800a96e:	f7f6 f9e1 	bl	8000d34 <__aeabi_fmul>
 800a972:	4601      	mov	r1, r0
 800a974:	4620      	mov	r0, r4
 800a976:	f7f6 f8d5 	bl	8000b24 <__addsf3>
 800a97a:	4604      	mov	r4, r0
 800a97c:	4620      	mov	r0, r4
 800a97e:	bd70      	pop	{r4, r5, r6, pc}
 800a980:	2a00      	cmp	r2, #0
 800a982:	d0fb      	beq.n	800a97c <__ieee754_sqrtf+0x20>
 800a984:	2800      	cmp	r0, #0
 800a986:	da06      	bge.n	800a996 <__ieee754_sqrtf+0x3a>
 800a988:	4601      	mov	r1, r0
 800a98a:	f7f6 f8c9 	bl	8000b20 <__aeabi_fsub>
 800a98e:	4601      	mov	r1, r0
 800a990:	f7f6 fa84 	bl	8000e9c <__aeabi_fdiv>
 800a994:	e7f1      	b.n	800a97a <__ieee754_sqrtf+0x1e>
 800a996:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800a99a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800a99e:	d029      	beq.n	800a9f4 <__ieee754_sqrtf+0x98>
 800a9a0:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800a9a4:	07cb      	lsls	r3, r1, #31
 800a9a6:	f04f 0300 	mov.w	r3, #0
 800a9aa:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800a9ae:	f04f 0419 	mov.w	r4, #25
 800a9b2:	461e      	mov	r6, r3
 800a9b4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800a9b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a9bc:	bf58      	it	pl
 800a9be:	0052      	lslpl	r2, r2, #1
 800a9c0:	1040      	asrs	r0, r0, #1
 800a9c2:	0052      	lsls	r2, r2, #1
 800a9c4:	1875      	adds	r5, r6, r1
 800a9c6:	4295      	cmp	r5, r2
 800a9c8:	bfde      	ittt	le
 800a9ca:	186e      	addle	r6, r5, r1
 800a9cc:	1b52      	suble	r2, r2, r5
 800a9ce:	185b      	addle	r3, r3, r1
 800a9d0:	3c01      	subs	r4, #1
 800a9d2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a9d6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a9da:	d1f3      	bne.n	800a9c4 <__ieee754_sqrtf+0x68>
 800a9dc:	b112      	cbz	r2, 800a9e4 <__ieee754_sqrtf+0x88>
 800a9de:	3301      	adds	r3, #1
 800a9e0:	f023 0301 	bic.w	r3, r3, #1
 800a9e4:	105c      	asrs	r4, r3, #1
 800a9e6:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800a9ea:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800a9ee:	e7c5      	b.n	800a97c <__ieee754_sqrtf+0x20>
 800a9f0:	005b      	lsls	r3, r3, #1
 800a9f2:	3201      	adds	r2, #1
 800a9f4:	0218      	lsls	r0, r3, #8
 800a9f6:	d5fb      	bpl.n	800a9f0 <__ieee754_sqrtf+0x94>
 800a9f8:	3a01      	subs	r2, #1
 800a9fa:	1a89      	subs	r1, r1, r2
 800a9fc:	e7d0      	b.n	800a9a0 <__ieee754_sqrtf+0x44>

0800a9fe <fabs>:
 800a9fe:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800aa02:	4770      	bx	lr

0800aa04 <finite>:
 800aa04:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800aa08:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800aa0c:	0fc0      	lsrs	r0, r0, #31
 800aa0e:	4770      	bx	lr

0800aa10 <nan>:
 800aa10:	2000      	movs	r0, #0
 800aa12:	4901      	ldr	r1, [pc, #4]	; (800aa18 <nan+0x8>)
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	7ff80000 	.word	0x7ff80000

0800aa1c <rint>:
 800aa1c:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800aa20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa22:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800aa26:	2f13      	cmp	r7, #19
 800aa28:	4602      	mov	r2, r0
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	4605      	mov	r5, r0
 800aa30:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800aa34:	dc59      	bgt.n	800aaea <rint+0xce>
 800aa36:	2f00      	cmp	r7, #0
 800aa38:	da2a      	bge.n	800aa90 <rint+0x74>
 800aa3a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800aa3e:	4301      	orrs	r1, r0
 800aa40:	d022      	beq.n	800aa88 <rint+0x6c>
 800aa42:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800aa46:	4301      	orrs	r1, r0
 800aa48:	424d      	negs	r5, r1
 800aa4a:	430d      	orrs	r5, r1
 800aa4c:	4936      	ldr	r1, [pc, #216]	; (800ab28 <rint+0x10c>)
 800aa4e:	0c5c      	lsrs	r4, r3, #17
 800aa50:	0b2d      	lsrs	r5, r5, #12
 800aa52:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800aa56:	0464      	lsls	r4, r4, #17
 800aa58:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800aa5c:	ea45 0304 	orr.w	r3, r5, r4
 800aa60:	e9d1 4500 	ldrd	r4, r5, [r1]
 800aa64:	4620      	mov	r0, r4
 800aa66:	4629      	mov	r1, r5
 800aa68:	f7f5 fb78 	bl	800015c <__adddf3>
 800aa6c:	e9cd 0100 	strd	r0, r1, [sp]
 800aa70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa74:	462b      	mov	r3, r5
 800aa76:	4622      	mov	r2, r4
 800aa78:	f7f5 fb6e 	bl	8000158 <__aeabi_dsub>
 800aa7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aa80:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	4610      	mov	r0, r2
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	b003      	add	sp, #12
 800aa8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa90:	4926      	ldr	r1, [pc, #152]	; (800ab2c <rint+0x110>)
 800aa92:	4139      	asrs	r1, r7
 800aa94:	ea03 0001 	and.w	r0, r3, r1
 800aa98:	4310      	orrs	r0, r2
 800aa9a:	d0f5      	beq.n	800aa88 <rint+0x6c>
 800aa9c:	084b      	lsrs	r3, r1, #1
 800aa9e:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800aaa2:	ea52 0501 	orrs.w	r5, r2, r1
 800aaa6:	d00c      	beq.n	800aac2 <rint+0xa6>
 800aaa8:	ea24 0303 	bic.w	r3, r4, r3
 800aaac:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800aab0:	2f13      	cmp	r7, #19
 800aab2:	bf0c      	ite	eq
 800aab4:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800aab8:	2500      	movne	r5, #0
 800aaba:	fa44 f707 	asr.w	r7, r4, r7
 800aabe:	ea43 0407 	orr.w	r4, r3, r7
 800aac2:	4919      	ldr	r1, [pc, #100]	; (800ab28 <rint+0x10c>)
 800aac4:	4623      	mov	r3, r4
 800aac6:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800aaca:	462a      	mov	r2, r5
 800aacc:	e9d6 4500 	ldrd	r4, r5, [r6]
 800aad0:	4620      	mov	r0, r4
 800aad2:	4629      	mov	r1, r5
 800aad4:	f7f5 fb42 	bl	800015c <__adddf3>
 800aad8:	e9cd 0100 	strd	r0, r1, [sp]
 800aadc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aae0:	4622      	mov	r2, r4
 800aae2:	462b      	mov	r3, r5
 800aae4:	f7f5 fb38 	bl	8000158 <__aeabi_dsub>
 800aae8:	e7cc      	b.n	800aa84 <rint+0x68>
 800aaea:	2f33      	cmp	r7, #51	; 0x33
 800aaec:	dd05      	ble.n	800aafa <rint+0xde>
 800aaee:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800aaf2:	d1c9      	bne.n	800aa88 <rint+0x6c>
 800aaf4:	f7f5 fb32 	bl	800015c <__adddf3>
 800aaf8:	e7c4      	b.n	800aa84 <rint+0x68>
 800aafa:	f04f 31ff 	mov.w	r1, #4294967295
 800aafe:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800ab02:	fa21 f10c 	lsr.w	r1, r1, ip
 800ab06:	4208      	tst	r0, r1
 800ab08:	d0be      	beq.n	800aa88 <rint+0x6c>
 800ab0a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800ab0e:	bf18      	it	ne
 800ab10:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800ab14:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800ab18:	bf1e      	ittt	ne
 800ab1a:	ea20 0303 	bicne.w	r3, r0, r3
 800ab1e:	fa45 fc0c 	asrne.w	ip, r5, ip
 800ab22:	ea43 050c 	orrne.w	r5, r3, ip
 800ab26:	e7cc      	b.n	800aac2 <rint+0xa6>
 800ab28:	0800b020 	.word	0x0800b020
 800ab2c:	000fffff 	.word	0x000fffff

0800ab30 <scalbn>:
 800ab30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab32:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800ab36:	4604      	mov	r4, r0
 800ab38:	460d      	mov	r5, r1
 800ab3a:	4617      	mov	r7, r2
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	b996      	cbnz	r6, 800ab66 <scalbn+0x36>
 800ab40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ab44:	4303      	orrs	r3, r0
 800ab46:	d039      	beq.n	800abbc <scalbn+0x8c>
 800ab48:	4b35      	ldr	r3, [pc, #212]	; (800ac20 <scalbn+0xf0>)
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f7f5 fcbc 	bl	80004c8 <__aeabi_dmul>
 800ab50:	4b34      	ldr	r3, [pc, #208]	; (800ac24 <scalbn+0xf4>)
 800ab52:	4604      	mov	r4, r0
 800ab54:	429f      	cmp	r7, r3
 800ab56:	460d      	mov	r5, r1
 800ab58:	da0f      	bge.n	800ab7a <scalbn+0x4a>
 800ab5a:	a32d      	add	r3, pc, #180	; (adr r3, 800ac10 <scalbn+0xe0>)
 800ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab60:	f7f5 fcb2 	bl	80004c8 <__aeabi_dmul>
 800ab64:	e006      	b.n	800ab74 <scalbn+0x44>
 800ab66:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ab6a:	4296      	cmp	r6, r2
 800ab6c:	d10a      	bne.n	800ab84 <scalbn+0x54>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	f7f5 faf4 	bl	800015c <__adddf3>
 800ab74:	4604      	mov	r4, r0
 800ab76:	460d      	mov	r5, r1
 800ab78:	e020      	b.n	800abbc <scalbn+0x8c>
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ab80:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800ab84:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800ab88:	19b9      	adds	r1, r7, r6
 800ab8a:	4291      	cmp	r1, r2
 800ab8c:	dd0e      	ble.n	800abac <scalbn+0x7c>
 800ab8e:	a322      	add	r3, pc, #136	; (adr r3, 800ac18 <scalbn+0xe8>)
 800ab90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab94:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ab98:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ab9c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800aba0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800aba4:	4820      	ldr	r0, [pc, #128]	; (800ac28 <scalbn+0xf8>)
 800aba6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800abaa:	e7d9      	b.n	800ab60 <scalbn+0x30>
 800abac:	2900      	cmp	r1, #0
 800abae:	dd08      	ble.n	800abc2 <scalbn+0x92>
 800abb0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800abb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800abb8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800abbc:	4620      	mov	r0, r4
 800abbe:	4629      	mov	r1, r5
 800abc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abc2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800abc6:	da16      	bge.n	800abf6 <scalbn+0xc6>
 800abc8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800abcc:	429f      	cmp	r7, r3
 800abce:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800abd2:	dd08      	ble.n	800abe6 <scalbn+0xb6>
 800abd4:	4c15      	ldr	r4, [pc, #84]	; (800ac2c <scalbn+0xfc>)
 800abd6:	4814      	ldr	r0, [pc, #80]	; (800ac28 <scalbn+0xf8>)
 800abd8:	f363 74df 	bfi	r4, r3, #31, #1
 800abdc:	a30e      	add	r3, pc, #56	; (adr r3, 800ac18 <scalbn+0xe8>)
 800abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe2:	4621      	mov	r1, r4
 800abe4:	e7bc      	b.n	800ab60 <scalbn+0x30>
 800abe6:	4c12      	ldr	r4, [pc, #72]	; (800ac30 <scalbn+0x100>)
 800abe8:	4812      	ldr	r0, [pc, #72]	; (800ac34 <scalbn+0x104>)
 800abea:	f363 74df 	bfi	r4, r3, #31, #1
 800abee:	a308      	add	r3, pc, #32	; (adr r3, 800ac10 <scalbn+0xe0>)
 800abf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf4:	e7f5      	b.n	800abe2 <scalbn+0xb2>
 800abf6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800abfa:	3136      	adds	r1, #54	; 0x36
 800abfc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac00:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ac04:	4620      	mov	r0, r4
 800ac06:	4629      	mov	r1, r5
 800ac08:	2200      	movs	r2, #0
 800ac0a:	4b0b      	ldr	r3, [pc, #44]	; (800ac38 <scalbn+0x108>)
 800ac0c:	e7a8      	b.n	800ab60 <scalbn+0x30>
 800ac0e:	bf00      	nop
 800ac10:	c2f8f359 	.word	0xc2f8f359
 800ac14:	01a56e1f 	.word	0x01a56e1f
 800ac18:	8800759c 	.word	0x8800759c
 800ac1c:	7e37e43c 	.word	0x7e37e43c
 800ac20:	43500000 	.word	0x43500000
 800ac24:	ffff3cb0 	.word	0xffff3cb0
 800ac28:	8800759c 	.word	0x8800759c
 800ac2c:	7e37e43c 	.word	0x7e37e43c
 800ac30:	01a56e1f 	.word	0x01a56e1f
 800ac34:	c2f8f359 	.word	0xc2f8f359
 800ac38:	3c900000 	.word	0x3c900000

0800ac3c <fabsf>:
 800ac3c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ac40:	4770      	bx	lr
	...

0800ac44 <nanf>:
 800ac44:	4800      	ldr	r0, [pc, #0]	; (800ac48 <nanf+0x4>)
 800ac46:	4770      	bx	lr
 800ac48:	7fc00000 	.word	0x7fc00000

0800ac4c <abort>:
 800ac4c:	2006      	movs	r0, #6
 800ac4e:	b508      	push	{r3, lr}
 800ac50:	f000 f94c 	bl	800aeec <raise>
 800ac54:	2001      	movs	r0, #1
 800ac56:	f7f8 fad0 	bl	80031fa <_exit>
	...

0800ac5c <__errno>:
 800ac5c:	4b01      	ldr	r3, [pc, #4]	; (800ac64 <__errno+0x8>)
 800ac5e:	6818      	ldr	r0, [r3, #0]
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	2000000c 	.word	0x2000000c

0800ac68 <__libc_init_array>:
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	2600      	movs	r6, #0
 800ac6c:	4d0c      	ldr	r5, [pc, #48]	; (800aca0 <__libc_init_array+0x38>)
 800ac6e:	4c0d      	ldr	r4, [pc, #52]	; (800aca4 <__libc_init_array+0x3c>)
 800ac70:	1b64      	subs	r4, r4, r5
 800ac72:	10a4      	asrs	r4, r4, #2
 800ac74:	42a6      	cmp	r6, r4
 800ac76:	d109      	bne.n	800ac8c <__libc_init_array+0x24>
 800ac78:	f000 f962 	bl	800af40 <_init>
 800ac7c:	2600      	movs	r6, #0
 800ac7e:	4d0a      	ldr	r5, [pc, #40]	; (800aca8 <__libc_init_array+0x40>)
 800ac80:	4c0a      	ldr	r4, [pc, #40]	; (800acac <__libc_init_array+0x44>)
 800ac82:	1b64      	subs	r4, r4, r5
 800ac84:	10a4      	asrs	r4, r4, #2
 800ac86:	42a6      	cmp	r6, r4
 800ac88:	d105      	bne.n	800ac96 <__libc_init_array+0x2e>
 800ac8a:	bd70      	pop	{r4, r5, r6, pc}
 800ac8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac90:	4798      	blx	r3
 800ac92:	3601      	adds	r6, #1
 800ac94:	e7ee      	b.n	800ac74 <__libc_init_array+0xc>
 800ac96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac9a:	4798      	blx	r3
 800ac9c:	3601      	adds	r6, #1
 800ac9e:	e7f2      	b.n	800ac86 <__libc_init_array+0x1e>
 800aca0:	0800b090 	.word	0x0800b090
 800aca4:	0800b090 	.word	0x0800b090
 800aca8:	0800b090 	.word	0x0800b090
 800acac:	0800b098 	.word	0x0800b098

0800acb0 <malloc>:
 800acb0:	4b02      	ldr	r3, [pc, #8]	; (800acbc <malloc+0xc>)
 800acb2:	4601      	mov	r1, r0
 800acb4:	6818      	ldr	r0, [r3, #0]
 800acb6:	f000 b887 	b.w	800adc8 <_malloc_r>
 800acba:	bf00      	nop
 800acbc:	2000000c 	.word	0x2000000c

0800acc0 <free>:
 800acc0:	4b02      	ldr	r3, [pc, #8]	; (800accc <free+0xc>)
 800acc2:	4601      	mov	r1, r0
 800acc4:	6818      	ldr	r0, [r3, #0]
 800acc6:	f000 b833 	b.w	800ad30 <_free_r>
 800acca:	bf00      	nop
 800accc:	2000000c 	.word	0x2000000c

0800acd0 <memcpy>:
 800acd0:	440a      	add	r2, r1
 800acd2:	4291      	cmp	r1, r2
 800acd4:	f100 33ff 	add.w	r3, r0, #4294967295
 800acd8:	d100      	bne.n	800acdc <memcpy+0xc>
 800acda:	4770      	bx	lr
 800acdc:	b510      	push	{r4, lr}
 800acde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ace2:	4291      	cmp	r1, r2
 800ace4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ace8:	d1f9      	bne.n	800acde <memcpy+0xe>
 800acea:	bd10      	pop	{r4, pc}

0800acec <memmove>:
 800acec:	4288      	cmp	r0, r1
 800acee:	b510      	push	{r4, lr}
 800acf0:	eb01 0402 	add.w	r4, r1, r2
 800acf4:	d902      	bls.n	800acfc <memmove+0x10>
 800acf6:	4284      	cmp	r4, r0
 800acf8:	4623      	mov	r3, r4
 800acfa:	d807      	bhi.n	800ad0c <memmove+0x20>
 800acfc:	1e43      	subs	r3, r0, #1
 800acfe:	42a1      	cmp	r1, r4
 800ad00:	d008      	beq.n	800ad14 <memmove+0x28>
 800ad02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad0a:	e7f8      	b.n	800acfe <memmove+0x12>
 800ad0c:	4601      	mov	r1, r0
 800ad0e:	4402      	add	r2, r0
 800ad10:	428a      	cmp	r2, r1
 800ad12:	d100      	bne.n	800ad16 <memmove+0x2a>
 800ad14:	bd10      	pop	{r4, pc}
 800ad16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad1e:	e7f7      	b.n	800ad10 <memmove+0x24>

0800ad20 <memset>:
 800ad20:	4603      	mov	r3, r0
 800ad22:	4402      	add	r2, r0
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d100      	bne.n	800ad2a <memset+0xa>
 800ad28:	4770      	bx	lr
 800ad2a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad2e:	e7f9      	b.n	800ad24 <memset+0x4>

0800ad30 <_free_r>:
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	4605      	mov	r5, r0
 800ad34:	2900      	cmp	r1, #0
 800ad36:	d043      	beq.n	800adc0 <_free_r+0x90>
 800ad38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad3c:	1f0c      	subs	r4, r1, #4
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	bfb8      	it	lt
 800ad42:	18e4      	addlt	r4, r4, r3
 800ad44:	f000 f8f0 	bl	800af28 <__malloc_lock>
 800ad48:	4a1e      	ldr	r2, [pc, #120]	; (800adc4 <_free_r+0x94>)
 800ad4a:	6813      	ldr	r3, [r2, #0]
 800ad4c:	4610      	mov	r0, r2
 800ad4e:	b933      	cbnz	r3, 800ad5e <_free_r+0x2e>
 800ad50:	6063      	str	r3, [r4, #4]
 800ad52:	6014      	str	r4, [r2, #0]
 800ad54:	4628      	mov	r0, r5
 800ad56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad5a:	f000 b8eb 	b.w	800af34 <__malloc_unlock>
 800ad5e:	42a3      	cmp	r3, r4
 800ad60:	d90a      	bls.n	800ad78 <_free_r+0x48>
 800ad62:	6821      	ldr	r1, [r4, #0]
 800ad64:	1862      	adds	r2, r4, r1
 800ad66:	4293      	cmp	r3, r2
 800ad68:	bf01      	itttt	eq
 800ad6a:	681a      	ldreq	r2, [r3, #0]
 800ad6c:	685b      	ldreq	r3, [r3, #4]
 800ad6e:	1852      	addeq	r2, r2, r1
 800ad70:	6022      	streq	r2, [r4, #0]
 800ad72:	6063      	str	r3, [r4, #4]
 800ad74:	6004      	str	r4, [r0, #0]
 800ad76:	e7ed      	b.n	800ad54 <_free_r+0x24>
 800ad78:	461a      	mov	r2, r3
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	b10b      	cbz	r3, 800ad82 <_free_r+0x52>
 800ad7e:	42a3      	cmp	r3, r4
 800ad80:	d9fa      	bls.n	800ad78 <_free_r+0x48>
 800ad82:	6811      	ldr	r1, [r2, #0]
 800ad84:	1850      	adds	r0, r2, r1
 800ad86:	42a0      	cmp	r0, r4
 800ad88:	d10b      	bne.n	800ada2 <_free_r+0x72>
 800ad8a:	6820      	ldr	r0, [r4, #0]
 800ad8c:	4401      	add	r1, r0
 800ad8e:	1850      	adds	r0, r2, r1
 800ad90:	4283      	cmp	r3, r0
 800ad92:	6011      	str	r1, [r2, #0]
 800ad94:	d1de      	bne.n	800ad54 <_free_r+0x24>
 800ad96:	6818      	ldr	r0, [r3, #0]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	4401      	add	r1, r0
 800ad9c:	6011      	str	r1, [r2, #0]
 800ad9e:	6053      	str	r3, [r2, #4]
 800ada0:	e7d8      	b.n	800ad54 <_free_r+0x24>
 800ada2:	d902      	bls.n	800adaa <_free_r+0x7a>
 800ada4:	230c      	movs	r3, #12
 800ada6:	602b      	str	r3, [r5, #0]
 800ada8:	e7d4      	b.n	800ad54 <_free_r+0x24>
 800adaa:	6820      	ldr	r0, [r4, #0]
 800adac:	1821      	adds	r1, r4, r0
 800adae:	428b      	cmp	r3, r1
 800adb0:	bf01      	itttt	eq
 800adb2:	6819      	ldreq	r1, [r3, #0]
 800adb4:	685b      	ldreq	r3, [r3, #4]
 800adb6:	1809      	addeq	r1, r1, r0
 800adb8:	6021      	streq	r1, [r4, #0]
 800adba:	6063      	str	r3, [r4, #4]
 800adbc:	6054      	str	r4, [r2, #4]
 800adbe:	e7c9      	b.n	800ad54 <_free_r+0x24>
 800adc0:	bd38      	pop	{r3, r4, r5, pc}
 800adc2:	bf00      	nop
 800adc4:	20000834 	.word	0x20000834

0800adc8 <_malloc_r>:
 800adc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adca:	1ccd      	adds	r5, r1, #3
 800adcc:	f025 0503 	bic.w	r5, r5, #3
 800add0:	3508      	adds	r5, #8
 800add2:	2d0c      	cmp	r5, #12
 800add4:	bf38      	it	cc
 800add6:	250c      	movcc	r5, #12
 800add8:	2d00      	cmp	r5, #0
 800adda:	4606      	mov	r6, r0
 800addc:	db01      	blt.n	800ade2 <_malloc_r+0x1a>
 800adde:	42a9      	cmp	r1, r5
 800ade0:	d903      	bls.n	800adea <_malloc_r+0x22>
 800ade2:	230c      	movs	r3, #12
 800ade4:	6033      	str	r3, [r6, #0]
 800ade6:	2000      	movs	r0, #0
 800ade8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adea:	f000 f89d 	bl	800af28 <__malloc_lock>
 800adee:	4921      	ldr	r1, [pc, #132]	; (800ae74 <_malloc_r+0xac>)
 800adf0:	680a      	ldr	r2, [r1, #0]
 800adf2:	4614      	mov	r4, r2
 800adf4:	b99c      	cbnz	r4, 800ae1e <_malloc_r+0x56>
 800adf6:	4f20      	ldr	r7, [pc, #128]	; (800ae78 <_malloc_r+0xb0>)
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	b923      	cbnz	r3, 800ae06 <_malloc_r+0x3e>
 800adfc:	4621      	mov	r1, r4
 800adfe:	4630      	mov	r0, r6
 800ae00:	f000 f83c 	bl	800ae7c <_sbrk_r>
 800ae04:	6038      	str	r0, [r7, #0]
 800ae06:	4629      	mov	r1, r5
 800ae08:	4630      	mov	r0, r6
 800ae0a:	f000 f837 	bl	800ae7c <_sbrk_r>
 800ae0e:	1c43      	adds	r3, r0, #1
 800ae10:	d123      	bne.n	800ae5a <_malloc_r+0x92>
 800ae12:	230c      	movs	r3, #12
 800ae14:	4630      	mov	r0, r6
 800ae16:	6033      	str	r3, [r6, #0]
 800ae18:	f000 f88c 	bl	800af34 <__malloc_unlock>
 800ae1c:	e7e3      	b.n	800ade6 <_malloc_r+0x1e>
 800ae1e:	6823      	ldr	r3, [r4, #0]
 800ae20:	1b5b      	subs	r3, r3, r5
 800ae22:	d417      	bmi.n	800ae54 <_malloc_r+0x8c>
 800ae24:	2b0b      	cmp	r3, #11
 800ae26:	d903      	bls.n	800ae30 <_malloc_r+0x68>
 800ae28:	6023      	str	r3, [r4, #0]
 800ae2a:	441c      	add	r4, r3
 800ae2c:	6025      	str	r5, [r4, #0]
 800ae2e:	e004      	b.n	800ae3a <_malloc_r+0x72>
 800ae30:	6863      	ldr	r3, [r4, #4]
 800ae32:	42a2      	cmp	r2, r4
 800ae34:	bf0c      	ite	eq
 800ae36:	600b      	streq	r3, [r1, #0]
 800ae38:	6053      	strne	r3, [r2, #4]
 800ae3a:	4630      	mov	r0, r6
 800ae3c:	f000 f87a 	bl	800af34 <__malloc_unlock>
 800ae40:	f104 000b 	add.w	r0, r4, #11
 800ae44:	1d23      	adds	r3, r4, #4
 800ae46:	f020 0007 	bic.w	r0, r0, #7
 800ae4a:	1ac2      	subs	r2, r0, r3
 800ae4c:	d0cc      	beq.n	800ade8 <_malloc_r+0x20>
 800ae4e:	1a1b      	subs	r3, r3, r0
 800ae50:	50a3      	str	r3, [r4, r2]
 800ae52:	e7c9      	b.n	800ade8 <_malloc_r+0x20>
 800ae54:	4622      	mov	r2, r4
 800ae56:	6864      	ldr	r4, [r4, #4]
 800ae58:	e7cc      	b.n	800adf4 <_malloc_r+0x2c>
 800ae5a:	1cc4      	adds	r4, r0, #3
 800ae5c:	f024 0403 	bic.w	r4, r4, #3
 800ae60:	42a0      	cmp	r0, r4
 800ae62:	d0e3      	beq.n	800ae2c <_malloc_r+0x64>
 800ae64:	1a21      	subs	r1, r4, r0
 800ae66:	4630      	mov	r0, r6
 800ae68:	f000 f808 	bl	800ae7c <_sbrk_r>
 800ae6c:	3001      	adds	r0, #1
 800ae6e:	d1dd      	bne.n	800ae2c <_malloc_r+0x64>
 800ae70:	e7cf      	b.n	800ae12 <_malloc_r+0x4a>
 800ae72:	bf00      	nop
 800ae74:	20000834 	.word	0x20000834
 800ae78:	20000838 	.word	0x20000838

0800ae7c <_sbrk_r>:
 800ae7c:	b538      	push	{r3, r4, r5, lr}
 800ae7e:	2300      	movs	r3, #0
 800ae80:	4d05      	ldr	r5, [pc, #20]	; (800ae98 <_sbrk_r+0x1c>)
 800ae82:	4604      	mov	r4, r0
 800ae84:	4608      	mov	r0, r1
 800ae86:	602b      	str	r3, [r5, #0]
 800ae88:	f7f8 f9c2 	bl	8003210 <_sbrk>
 800ae8c:	1c43      	adds	r3, r0, #1
 800ae8e:	d102      	bne.n	800ae96 <_sbrk_r+0x1a>
 800ae90:	682b      	ldr	r3, [r5, #0]
 800ae92:	b103      	cbz	r3, 800ae96 <_sbrk_r+0x1a>
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	bd38      	pop	{r3, r4, r5, pc}
 800ae98:	2000084c 	.word	0x2000084c

0800ae9c <_raise_r>:
 800ae9c:	291f      	cmp	r1, #31
 800ae9e:	b538      	push	{r3, r4, r5, lr}
 800aea0:	4604      	mov	r4, r0
 800aea2:	460d      	mov	r5, r1
 800aea4:	d904      	bls.n	800aeb0 <_raise_r+0x14>
 800aea6:	2316      	movs	r3, #22
 800aea8:	6003      	str	r3, [r0, #0]
 800aeaa:	f04f 30ff 	mov.w	r0, #4294967295
 800aeae:	bd38      	pop	{r3, r4, r5, pc}
 800aeb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aeb2:	b112      	cbz	r2, 800aeba <_raise_r+0x1e>
 800aeb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aeb8:	b94b      	cbnz	r3, 800aece <_raise_r+0x32>
 800aeba:	4620      	mov	r0, r4
 800aebc:	f000 f830 	bl	800af20 <_getpid_r>
 800aec0:	462a      	mov	r2, r5
 800aec2:	4601      	mov	r1, r0
 800aec4:	4620      	mov	r0, r4
 800aec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aeca:	f000 b817 	b.w	800aefc <_kill_r>
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d00a      	beq.n	800aee8 <_raise_r+0x4c>
 800aed2:	1c59      	adds	r1, r3, #1
 800aed4:	d103      	bne.n	800aede <_raise_r+0x42>
 800aed6:	2316      	movs	r3, #22
 800aed8:	6003      	str	r3, [r0, #0]
 800aeda:	2001      	movs	r0, #1
 800aedc:	e7e7      	b.n	800aeae <_raise_r+0x12>
 800aede:	2400      	movs	r4, #0
 800aee0:	4628      	mov	r0, r5
 800aee2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aee6:	4798      	blx	r3
 800aee8:	2000      	movs	r0, #0
 800aeea:	e7e0      	b.n	800aeae <_raise_r+0x12>

0800aeec <raise>:
 800aeec:	4b02      	ldr	r3, [pc, #8]	; (800aef8 <raise+0xc>)
 800aeee:	4601      	mov	r1, r0
 800aef0:	6818      	ldr	r0, [r3, #0]
 800aef2:	f7ff bfd3 	b.w	800ae9c <_raise_r>
 800aef6:	bf00      	nop
 800aef8:	2000000c 	.word	0x2000000c

0800aefc <_kill_r>:
 800aefc:	b538      	push	{r3, r4, r5, lr}
 800aefe:	2300      	movs	r3, #0
 800af00:	4d06      	ldr	r5, [pc, #24]	; (800af1c <_kill_r+0x20>)
 800af02:	4604      	mov	r4, r0
 800af04:	4608      	mov	r0, r1
 800af06:	4611      	mov	r1, r2
 800af08:	602b      	str	r3, [r5, #0]
 800af0a:	f7f8 f966 	bl	80031da <_kill>
 800af0e:	1c43      	adds	r3, r0, #1
 800af10:	d102      	bne.n	800af18 <_kill_r+0x1c>
 800af12:	682b      	ldr	r3, [r5, #0]
 800af14:	b103      	cbz	r3, 800af18 <_kill_r+0x1c>
 800af16:	6023      	str	r3, [r4, #0]
 800af18:	bd38      	pop	{r3, r4, r5, pc}
 800af1a:	bf00      	nop
 800af1c:	2000084c 	.word	0x2000084c

0800af20 <_getpid_r>:
 800af20:	f7f8 b954 	b.w	80031cc <_getpid>

0800af24 <__retarget_lock_acquire_recursive>:
 800af24:	4770      	bx	lr

0800af26 <__retarget_lock_release_recursive>:
 800af26:	4770      	bx	lr

0800af28 <__malloc_lock>:
 800af28:	4801      	ldr	r0, [pc, #4]	; (800af30 <__malloc_lock+0x8>)
 800af2a:	f7ff bffb 	b.w	800af24 <__retarget_lock_acquire_recursive>
 800af2e:	bf00      	nop
 800af30:	20000844 	.word	0x20000844

0800af34 <__malloc_unlock>:
 800af34:	4801      	ldr	r0, [pc, #4]	; (800af3c <__malloc_unlock+0x8>)
 800af36:	f7ff bff6 	b.w	800af26 <__retarget_lock_release_recursive>
 800af3a:	bf00      	nop
 800af3c:	20000844 	.word	0x20000844

0800af40 <_init>:
 800af40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af42:	bf00      	nop
 800af44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af46:	bc08      	pop	{r3}
 800af48:	469e      	mov	lr, r3
 800af4a:	4770      	bx	lr

0800af4c <_fini>:
 800af4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4e:	bf00      	nop
 800af50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af52:	bc08      	pop	{r3}
 800af54:	469e      	mov	lr, r3
 800af56:	4770      	bx	lr
