
Drone_Controller_3DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ac  0800a7f4  0800a7f4  0001a7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0a0  0800b0a0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800b0a0  0800b0a0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b0a0  0800b0a0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b0a0  0800b0a0  0001b0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800b0a8  0800b0a8  0001b0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b0b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a94  20000078  0800b128  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001b0c  0800b128  00021b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a9f7  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005420  00000000  00000000  0004aa98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001980  00000000  00000000  0004feb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e0  00000000  00000000  00051838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007026  00000000  00000000  00053018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ed82  00000000  00000000  0005a03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099303  00000000  00000000  00078dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001120c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007544  00000000  00000000  00112118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a7dc 	.word	0x0800a7dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800a7dc 	.word	0x0800a7dc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_d2f>:
 80004c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004d0:	bf24      	itt	cs
 80004d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004da:	d90d      	bls.n	80004f8 <__aeabi_d2f+0x30>
 80004dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80004ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004f0:	bf08      	it	eq
 80004f2:	f020 0001 	biceq.w	r0, r0, #1
 80004f6:	4770      	bx	lr
 80004f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80004fc:	d121      	bne.n	8000542 <__aeabi_d2f+0x7a>
 80004fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000502:	bfbc      	itt	lt
 8000504:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000508:	4770      	bxlt	lr
 800050a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000512:	f1c2 0218 	rsb	r2, r2, #24
 8000516:	f1c2 0c20 	rsb	ip, r2, #32
 800051a:	fa10 f30c 	lsls.w	r3, r0, ip
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	bf18      	it	ne
 8000524:	f040 0001 	orrne.w	r0, r0, #1
 8000528:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800052c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000530:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000534:	ea40 000c 	orr.w	r0, r0, ip
 8000538:	fa23 f302 	lsr.w	r3, r3, r2
 800053c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000540:	e7cc      	b.n	80004dc <__aeabi_d2f+0x14>
 8000542:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000546:	d107      	bne.n	8000558 <__aeabi_d2f+0x90>
 8000548:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800054c:	bf1e      	ittt	ne
 800054e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000552:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000556:	4770      	bxne	lr
 8000558:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800055c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000560:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <__aeabi_frsub>:
 8000568:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800056c:	e002      	b.n	8000574 <__addsf3>
 800056e:	bf00      	nop

08000570 <__aeabi_fsub>:
 8000570:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000574 <__addsf3>:
 8000574:	0042      	lsls	r2, r0, #1
 8000576:	bf1f      	itttt	ne
 8000578:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800057c:	ea92 0f03 	teqne	r2, r3
 8000580:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000584:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000588:	d06a      	beq.n	8000660 <__addsf3+0xec>
 800058a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800058e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000592:	bfc1      	itttt	gt
 8000594:	18d2      	addgt	r2, r2, r3
 8000596:	4041      	eorgt	r1, r0
 8000598:	4048      	eorgt	r0, r1
 800059a:	4041      	eorgt	r1, r0
 800059c:	bfb8      	it	lt
 800059e:	425b      	neglt	r3, r3
 80005a0:	2b19      	cmp	r3, #25
 80005a2:	bf88      	it	hi
 80005a4:	4770      	bxhi	lr
 80005a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80005b2:	bf18      	it	ne
 80005b4:	4240      	negne	r0, r0
 80005b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005c2:	bf18      	it	ne
 80005c4:	4249      	negne	r1, r1
 80005c6:	ea92 0f03 	teq	r2, r3
 80005ca:	d03f      	beq.n	800064c <__addsf3+0xd8>
 80005cc:	f1a2 0201 	sub.w	r2, r2, #1
 80005d0:	fa41 fc03 	asr.w	ip, r1, r3
 80005d4:	eb10 000c 	adds.w	r0, r0, ip
 80005d8:	f1c3 0320 	rsb	r3, r3, #32
 80005dc:	fa01 f103 	lsl.w	r1, r1, r3
 80005e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005e4:	d502      	bpl.n	80005ec <__addsf3+0x78>
 80005e6:	4249      	negs	r1, r1
 80005e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80005f0:	d313      	bcc.n	800061a <__addsf3+0xa6>
 80005f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005f6:	d306      	bcc.n	8000606 <__addsf3+0x92>
 80005f8:	0840      	lsrs	r0, r0, #1
 80005fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80005fe:	f102 0201 	add.w	r2, r2, #1
 8000602:	2afe      	cmp	r2, #254	; 0xfe
 8000604:	d251      	bcs.n	80006aa <__addsf3+0x136>
 8000606:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800060a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800060e:	bf08      	it	eq
 8000610:	f020 0001 	biceq.w	r0, r0, #1
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	4770      	bx	lr
 800061a:	0049      	lsls	r1, r1, #1
 800061c:	eb40 0000 	adc.w	r0, r0, r0
 8000620:	3a01      	subs	r2, #1
 8000622:	bf28      	it	cs
 8000624:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000628:	d2ed      	bcs.n	8000606 <__addsf3+0x92>
 800062a:	fab0 fc80 	clz	ip, r0
 800062e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000632:	ebb2 020c 	subs.w	r2, r2, ip
 8000636:	fa00 f00c 	lsl.w	r0, r0, ip
 800063a:	bfaa      	itet	ge
 800063c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000640:	4252      	neglt	r2, r2
 8000642:	4318      	orrge	r0, r3
 8000644:	bfbc      	itt	lt
 8000646:	40d0      	lsrlt	r0, r2
 8000648:	4318      	orrlt	r0, r3
 800064a:	4770      	bx	lr
 800064c:	f092 0f00 	teq	r2, #0
 8000650:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000654:	bf06      	itte	eq
 8000656:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800065a:	3201      	addeq	r2, #1
 800065c:	3b01      	subne	r3, #1
 800065e:	e7b5      	b.n	80005cc <__addsf3+0x58>
 8000660:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000664:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000668:	bf18      	it	ne
 800066a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800066e:	d021      	beq.n	80006b4 <__addsf3+0x140>
 8000670:	ea92 0f03 	teq	r2, r3
 8000674:	d004      	beq.n	8000680 <__addsf3+0x10c>
 8000676:	f092 0f00 	teq	r2, #0
 800067a:	bf08      	it	eq
 800067c:	4608      	moveq	r0, r1
 800067e:	4770      	bx	lr
 8000680:	ea90 0f01 	teq	r0, r1
 8000684:	bf1c      	itt	ne
 8000686:	2000      	movne	r0, #0
 8000688:	4770      	bxne	lr
 800068a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800068e:	d104      	bne.n	800069a <__addsf3+0x126>
 8000690:	0040      	lsls	r0, r0, #1
 8000692:	bf28      	it	cs
 8000694:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000698:	4770      	bx	lr
 800069a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800069e:	bf3c      	itt	cc
 80006a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80006a4:	4770      	bxcc	lr
 80006a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80006ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b2:	4770      	bx	lr
 80006b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006b8:	bf16      	itet	ne
 80006ba:	4608      	movne	r0, r1
 80006bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006c0:	4601      	movne	r1, r0
 80006c2:	0242      	lsls	r2, r0, #9
 80006c4:	bf06      	itte	eq
 80006c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006ca:	ea90 0f01 	teqeq	r0, r1
 80006ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006d2:	4770      	bx	lr

080006d4 <__aeabi_ui2f>:
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	e004      	b.n	80006e4 <__aeabi_i2f+0x8>
 80006da:	bf00      	nop

080006dc <__aeabi_i2f>:
 80006dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	ea5f 0c00 	movs.w	ip, r0
 80006e8:	bf08      	it	eq
 80006ea:	4770      	bxeq	lr
 80006ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80006f0:	4601      	mov	r1, r0
 80006f2:	f04f 0000 	mov.w	r0, #0
 80006f6:	e01c      	b.n	8000732 <__aeabi_l2f+0x2a>

080006f8 <__aeabi_ul2f>:
 80006f8:	ea50 0201 	orrs.w	r2, r0, r1
 80006fc:	bf08      	it	eq
 80006fe:	4770      	bxeq	lr
 8000700:	f04f 0300 	mov.w	r3, #0
 8000704:	e00a      	b.n	800071c <__aeabi_l2f+0x14>
 8000706:	bf00      	nop

08000708 <__aeabi_l2f>:
 8000708:	ea50 0201 	orrs.w	r2, r0, r1
 800070c:	bf08      	it	eq
 800070e:	4770      	bxeq	lr
 8000710:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000714:	d502      	bpl.n	800071c <__aeabi_l2f+0x14>
 8000716:	4240      	negs	r0, r0
 8000718:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800071c:	ea5f 0c01 	movs.w	ip, r1
 8000720:	bf02      	ittt	eq
 8000722:	4684      	moveq	ip, r0
 8000724:	4601      	moveq	r1, r0
 8000726:	2000      	moveq	r0, #0
 8000728:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800072c:	bf08      	it	eq
 800072e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000732:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000736:	fabc f28c 	clz	r2, ip
 800073a:	3a08      	subs	r2, #8
 800073c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000740:	db10      	blt.n	8000764 <__aeabi_l2f+0x5c>
 8000742:	fa01 fc02 	lsl.w	ip, r1, r2
 8000746:	4463      	add	r3, ip
 8000748:	fa00 fc02 	lsl.w	ip, r0, r2
 800074c:	f1c2 0220 	rsb	r2, r2, #32
 8000750:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000754:	fa20 f202 	lsr.w	r2, r0, r2
 8000758:	eb43 0002 	adc.w	r0, r3, r2
 800075c:	bf08      	it	eq
 800075e:	f020 0001 	biceq.w	r0, r0, #1
 8000762:	4770      	bx	lr
 8000764:	f102 0220 	add.w	r2, r2, #32
 8000768:	fa01 fc02 	lsl.w	ip, r1, r2
 800076c:	f1c2 0220 	rsb	r2, r2, #32
 8000770:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000774:	fa21 f202 	lsr.w	r2, r1, r2
 8000778:	eb43 0002 	adc.w	r0, r3, r2
 800077c:	bf08      	it	eq
 800077e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000782:	4770      	bx	lr

08000784 <__aeabi_fmul>:
 8000784:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000788:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800078c:	bf1e      	ittt	ne
 800078e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000792:	ea92 0f0c 	teqne	r2, ip
 8000796:	ea93 0f0c 	teqne	r3, ip
 800079a:	d06f      	beq.n	800087c <__aeabi_fmul+0xf8>
 800079c:	441a      	add	r2, r3
 800079e:	ea80 0c01 	eor.w	ip, r0, r1
 80007a2:	0240      	lsls	r0, r0, #9
 80007a4:	bf18      	it	ne
 80007a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007aa:	d01e      	beq.n	80007ea <__aeabi_fmul+0x66>
 80007ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007b8:	fba0 3101 	umull	r3, r1, r0, r1
 80007bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007c4:	bf3e      	ittt	cc
 80007c6:	0049      	lslcc	r1, r1, #1
 80007c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007cc:	005b      	lslcc	r3, r3, #1
 80007ce:	ea40 0001 	orr.w	r0, r0, r1
 80007d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007d6:	2afd      	cmp	r2, #253	; 0xfd
 80007d8:	d81d      	bhi.n	8000816 <__aeabi_fmul+0x92>
 80007da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007e2:	bf08      	it	eq
 80007e4:	f020 0001 	biceq.w	r0, r0, #1
 80007e8:	4770      	bx	lr
 80007ea:	f090 0f00 	teq	r0, #0
 80007ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007f2:	bf08      	it	eq
 80007f4:	0249      	lsleq	r1, r1, #9
 80007f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007fe:	3a7f      	subs	r2, #127	; 0x7f
 8000800:	bfc2      	ittt	gt
 8000802:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000806:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800080a:	4770      	bxgt	lr
 800080c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	3a01      	subs	r2, #1
 8000816:	dc5d      	bgt.n	80008d4 <__aeabi_fmul+0x150>
 8000818:	f112 0f19 	cmn.w	r2, #25
 800081c:	bfdc      	itt	le
 800081e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000822:	4770      	bxle	lr
 8000824:	f1c2 0200 	rsb	r2, r2, #0
 8000828:	0041      	lsls	r1, r0, #1
 800082a:	fa21 f102 	lsr.w	r1, r1, r2
 800082e:	f1c2 0220 	rsb	r2, r2, #32
 8000832:	fa00 fc02 	lsl.w	ip, r0, r2
 8000836:	ea5f 0031 	movs.w	r0, r1, rrx
 800083a:	f140 0000 	adc.w	r0, r0, #0
 800083e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000842:	bf08      	it	eq
 8000844:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000848:	4770      	bx	lr
 800084a:	f092 0f00 	teq	r2, #0
 800084e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000852:	bf02      	ittt	eq
 8000854:	0040      	lsleq	r0, r0, #1
 8000856:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800085a:	3a01      	subeq	r2, #1
 800085c:	d0f9      	beq.n	8000852 <__aeabi_fmul+0xce>
 800085e:	ea40 000c 	orr.w	r0, r0, ip
 8000862:	f093 0f00 	teq	r3, #0
 8000866:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800086a:	bf02      	ittt	eq
 800086c:	0049      	lsleq	r1, r1, #1
 800086e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000872:	3b01      	subeq	r3, #1
 8000874:	d0f9      	beq.n	800086a <__aeabi_fmul+0xe6>
 8000876:	ea41 010c 	orr.w	r1, r1, ip
 800087a:	e78f      	b.n	800079c <__aeabi_fmul+0x18>
 800087c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000880:	ea92 0f0c 	teq	r2, ip
 8000884:	bf18      	it	ne
 8000886:	ea93 0f0c 	teqne	r3, ip
 800088a:	d00a      	beq.n	80008a2 <__aeabi_fmul+0x11e>
 800088c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000890:	bf18      	it	ne
 8000892:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000896:	d1d8      	bne.n	800084a <__aeabi_fmul+0xc6>
 8000898:	ea80 0001 	eor.w	r0, r0, r1
 800089c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008a0:	4770      	bx	lr
 80008a2:	f090 0f00 	teq	r0, #0
 80008a6:	bf17      	itett	ne
 80008a8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80008ac:	4608      	moveq	r0, r1
 80008ae:	f091 0f00 	teqne	r1, #0
 80008b2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008b6:	d014      	beq.n	80008e2 <__aeabi_fmul+0x15e>
 80008b8:	ea92 0f0c 	teq	r2, ip
 80008bc:	d101      	bne.n	80008c2 <__aeabi_fmul+0x13e>
 80008be:	0242      	lsls	r2, r0, #9
 80008c0:	d10f      	bne.n	80008e2 <__aeabi_fmul+0x15e>
 80008c2:	ea93 0f0c 	teq	r3, ip
 80008c6:	d103      	bne.n	80008d0 <__aeabi_fmul+0x14c>
 80008c8:	024b      	lsls	r3, r1, #9
 80008ca:	bf18      	it	ne
 80008cc:	4608      	movne	r0, r1
 80008ce:	d108      	bne.n	80008e2 <__aeabi_fmul+0x15e>
 80008d0:	ea80 0001 	eor.w	r0, r0, r1
 80008d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e0:	4770      	bx	lr
 80008e2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008ea:	4770      	bx	lr

080008ec <__aeabi_fdiv>:
 80008ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008f4:	bf1e      	ittt	ne
 80008f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008fa:	ea92 0f0c 	teqne	r2, ip
 80008fe:	ea93 0f0c 	teqne	r3, ip
 8000902:	d069      	beq.n	80009d8 <__aeabi_fdiv+0xec>
 8000904:	eba2 0203 	sub.w	r2, r2, r3
 8000908:	ea80 0c01 	eor.w	ip, r0, r1
 800090c:	0249      	lsls	r1, r1, #9
 800090e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000912:	d037      	beq.n	8000984 <__aeabi_fdiv+0x98>
 8000914:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000918:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800091c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000920:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000924:	428b      	cmp	r3, r1
 8000926:	bf38      	it	cc
 8000928:	005b      	lslcc	r3, r3, #1
 800092a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800092e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000932:	428b      	cmp	r3, r1
 8000934:	bf24      	itt	cs
 8000936:	1a5b      	subcs	r3, r3, r1
 8000938:	ea40 000c 	orrcs.w	r0, r0, ip
 800093c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000940:	bf24      	itt	cs
 8000942:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000946:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800094a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800094e:	bf24      	itt	cs
 8000950:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800095c:	bf24      	itt	cs
 800095e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000962:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000966:	011b      	lsls	r3, r3, #4
 8000968:	bf18      	it	ne
 800096a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800096e:	d1e0      	bne.n	8000932 <__aeabi_fdiv+0x46>
 8000970:	2afd      	cmp	r2, #253	; 0xfd
 8000972:	f63f af50 	bhi.w	8000816 <__aeabi_fmul+0x92>
 8000976:	428b      	cmp	r3, r1
 8000978:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800097c:	bf08      	it	eq
 800097e:	f020 0001 	biceq.w	r0, r0, #1
 8000982:	4770      	bx	lr
 8000984:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000988:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800098c:	327f      	adds	r2, #127	; 0x7f
 800098e:	bfc2      	ittt	gt
 8000990:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000994:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000998:	4770      	bxgt	lr
 800099a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800099e:	f04f 0300 	mov.w	r3, #0
 80009a2:	3a01      	subs	r2, #1
 80009a4:	e737      	b.n	8000816 <__aeabi_fmul+0x92>
 80009a6:	f092 0f00 	teq	r2, #0
 80009aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009ae:	bf02      	ittt	eq
 80009b0:	0040      	lsleq	r0, r0, #1
 80009b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009b6:	3a01      	subeq	r2, #1
 80009b8:	d0f9      	beq.n	80009ae <__aeabi_fdiv+0xc2>
 80009ba:	ea40 000c 	orr.w	r0, r0, ip
 80009be:	f093 0f00 	teq	r3, #0
 80009c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c6:	bf02      	ittt	eq
 80009c8:	0049      	lsleq	r1, r1, #1
 80009ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009ce:	3b01      	subeq	r3, #1
 80009d0:	d0f9      	beq.n	80009c6 <__aeabi_fdiv+0xda>
 80009d2:	ea41 010c 	orr.w	r1, r1, ip
 80009d6:	e795      	b.n	8000904 <__aeabi_fdiv+0x18>
 80009d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009dc:	ea92 0f0c 	teq	r2, ip
 80009e0:	d108      	bne.n	80009f4 <__aeabi_fdiv+0x108>
 80009e2:	0242      	lsls	r2, r0, #9
 80009e4:	f47f af7d 	bne.w	80008e2 <__aeabi_fmul+0x15e>
 80009e8:	ea93 0f0c 	teq	r3, ip
 80009ec:	f47f af70 	bne.w	80008d0 <__aeabi_fmul+0x14c>
 80009f0:	4608      	mov	r0, r1
 80009f2:	e776      	b.n	80008e2 <__aeabi_fmul+0x15e>
 80009f4:	ea93 0f0c 	teq	r3, ip
 80009f8:	d104      	bne.n	8000a04 <__aeabi_fdiv+0x118>
 80009fa:	024b      	lsls	r3, r1, #9
 80009fc:	f43f af4c 	beq.w	8000898 <__aeabi_fmul+0x114>
 8000a00:	4608      	mov	r0, r1
 8000a02:	e76e      	b.n	80008e2 <__aeabi_fmul+0x15e>
 8000a04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a08:	bf18      	it	ne
 8000a0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a0e:	d1ca      	bne.n	80009a6 <__aeabi_fdiv+0xba>
 8000a10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a14:	f47f af5c 	bne.w	80008d0 <__aeabi_fmul+0x14c>
 8000a18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a1c:	f47f af3c 	bne.w	8000898 <__aeabi_fmul+0x114>
 8000a20:	e75f      	b.n	80008e2 <__aeabi_fmul+0x15e>
 8000a22:	bf00      	nop

08000a24 <__gesf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpsf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__lesf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpsf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpsf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a4e:	d011      	beq.n	8000a74 <__cmpsf2+0x40>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a56:	bf18      	it	ne
 8000a58:	ea90 0f01 	teqne	r0, r1
 8000a5c:	bf58      	it	pl
 8000a5e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a62:	bf88      	it	hi
 8000a64:	17c8      	asrhi	r0, r1, #31
 8000a66:	bf38      	it	cc
 8000a68:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a6c:	bf18      	it	ne
 8000a6e:	f040 0001 	orrne.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a78:	d102      	bne.n	8000a80 <__cmpsf2+0x4c>
 8000a7a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a7e:	d105      	bne.n	8000a8c <__cmpsf2+0x58>
 8000a80:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a84:	d1e4      	bne.n	8000a50 <__cmpsf2+0x1c>
 8000a86:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a8a:	d0e1      	beq.n	8000a50 <__cmpsf2+0x1c>
 8000a8c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_cfrcmple>:
 8000a94:	4684      	mov	ip, r0
 8000a96:	4608      	mov	r0, r1
 8000a98:	4661      	mov	r1, ip
 8000a9a:	e7ff      	b.n	8000a9c <__aeabi_cfcmpeq>

08000a9c <__aeabi_cfcmpeq>:
 8000a9c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a9e:	f7ff ffc9 	bl	8000a34 <__cmpsf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000aac <__aeabi_fcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cfcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cfcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_fcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cfcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_fcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffd2 	bl	8000a94 <__aeabi_cfrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_fcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc8 	bl	8000a94 <__aeabi_cfrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <Ringbuf_init+0x38>)
 8000b16:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <Ringbuf_init+0x3c>)
 8000b18:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <Ringbuf_init+0x40>)
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <Ringbuf_init+0x44>)
 8000b1e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <Ringbuf_init+0x48>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	695a      	ldr	r2, [r3, #20]
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <Ringbuf_init+0x48>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f042 0201 	orr.w	r2, r2, #1
 8000b2e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <Ringbuf_init+0x48>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	68da      	ldr	r2, [r3, #12]
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <Ringbuf_init+0x48>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f042 0220 	orr.w	r2, r2, #32
 8000b3e:	60da      	str	r2, [r3, #12]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	200017dc 	.word	0x200017dc
 8000b4c:	20000094 	.word	0x20000094
 8000b50:	200017d8 	.word	0x200017d8
 8000b54:	2000049c 	.word	0x2000049c
 8000b58:	200019b0 	.word	0x200019b0

08000b5c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000b6e:	3301      	adds	r3, #1
 8000b70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b74:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d009      	beq.n	8000b96 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	79f9      	ldrb	r1, [r7, #7]
 8000b8c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  }
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <Uart_isr>:

}


void Uart_isr (UART_HandleTypeDef *huart)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	f003 0320 	and.w	r3, r3, #32
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d013      	beq.n	8000bea <Uart_isr+0x4a>
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	f003 0320 	and.w	r3, r3, #32
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00e      	beq.n	8000bea <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8000bda:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <Uart_isr+0xb4>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ffba 	bl	8000b5c <store_char>
        return;
 8000be8:	e031      	b.n	8000c4e <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d02c      	beq.n	8000c4e <Uart_isr+0xae>
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d027      	beq.n	8000c4e <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <Uart_isr+0xb8>)
 8000c00:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <Uart_isr+0xb8>)
 8000c06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d108      	bne.n	8000c20 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	68da      	ldr	r2, [r3, #12]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c1c:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8000c1e:	e015      	b.n	8000c4c <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <Uart_isr+0xb8>)
 8000c22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000c26:	4a0c      	ldr	r2, [pc, #48]	; (8000c58 <Uart_isr+0xb8>)
 8000c28:	5cd3      	ldrb	r3, [r2, r3]
 8000c2a:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <Uart_isr+0xb8>)
 8000c2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000c32:	3301      	adds	r3, #1
 8000c34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c38:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <Uart_isr+0xb8>)
 8000c3a:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    	      huart->Instance->SR;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	7bba      	ldrb	r2, [r7, #14]
 8000c4a:	605a      	str	r2, [r3, #4]
    	return;
 8000c4c:	bf00      	nop
    }
}
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200017dc 	.word	0x200017dc
 8000c58:	2000049c 	.word	0x2000049c

08000c5c <set_b_counter>:

int get_b_counter(void) {
	return b_counter;
}

void set_b_counter(unsigned int CLOCK_RATE) {
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

	b_counter++;
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <set_b_counter+0x30>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <set_b_counter+0x30>)
 8000c6c:	6013      	str	r3, [r2, #0]
	if(b_counter > CLOCK_RATE) {
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <set_b_counter+0x30>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d202      	bcs.n	8000c80 <set_b_counter+0x24>
		b_counter = 0;
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <set_b_counter+0x30>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
	}
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	200008a4 	.word	0x200008a4

08000c90 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	2007      	movs	r0, #7
 8000ca0:	f000 f9e4 	bl	800106c <bno055_writeData>
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	203d      	movs	r0, #61	; 0x3d
 8000cbc:	f000 f9d6 	bl	800106c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d103      	bne.n	8000cce <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000cc6:	2013      	movs	r0, #19
 8000cc8:	f000 f9c4 	bl	8001054 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000ccc:	e002      	b.n	8000cd4 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000cce:	2007      	movs	r0, #7
 8000cd0:	f000 f9c0 	bl	8001054 <bno055_delay>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff ffe3 	bl	8000cac <bno055_setOperationMode>
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000cea:	b580      	push	{r7, lr}
 8000cec:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000cee:	200c      	movs	r0, #12
 8000cf0:	f7ff ffdc 	bl	8000cac <bno055_setOperationMode>
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000cfc:	2120      	movs	r1, #32
 8000cfe:	203f      	movs	r0, #63	; 0x3f
 8000d00:	f000 f9b4 	bl	800106c <bno055_writeData>
  bno055_delay(700);
 8000d04:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000d08:	f000 f9a4 	bl	8001054 <bno055_delay>
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
  bno055_reset();
 8000d16:	f7ff ffef 	bl	8000cf8 <bno055_reset>

  uint8_t id = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	2201      	movs	r2, #1
 8000d22:	4619      	mov	r1, r3
 8000d24:	2000      	movs	r0, #0
 8000d26:	f000 fa8d 	bl	8001244 <bno055_readData>
  if (id != BNO055_ID) {
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	2ba0      	cmp	r3, #160	; 0xa0
 8000d2e:	d004      	beq.n	8000d3a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	4619      	mov	r1, r3
 8000d34:	4809      	ldr	r0, [pc, #36]	; (8000d5c <bno055_setup+0x4c>)
 8000d36:	f008 fc5d 	bl	80095f4 <iprintf>
  }
  bno055_setPage(0);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff ffa8 	bl	8000c90 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000d40:	2100      	movs	r1, #0
 8000d42:	203f      	movs	r0, #63	; 0x3f
 8000d44:	f000 f992 	bl	800106c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000d48:	f7ff ffc8 	bl	8000cdc <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000d4c:	200a      	movs	r0, #10
 8000d4e:	f000 f981 	bl	8001054 <bno055_delay>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	0800a7f4 	.word	0x0800a7f4

08000d60 <bno055_setAxisMap>:
}
bno055_vector_t bno055_getVectorQuaternion() {
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
}

void bno055_setAxisMap(bno055_axis_map_t axis) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	463b      	mov	r3, r7
 8000d68:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t axisRemap = (axis.z << 4) | (axis.y << 2) | (axis.x);
 8000d6c:	793b      	ldrb	r3, [r7, #4]
 8000d6e:	011b      	lsls	r3, r3, #4
 8000d70:	b25a      	sxtb	r2, r3
 8000d72:	78bb      	ldrb	r3, [r7, #2]
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b25a      	sxtb	r2, r3
 8000d7c:	783b      	ldrb	r3, [r7, #0]
 8000d7e:	b25b      	sxtb	r3, r3
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b25b      	sxtb	r3, r3
 8000d84:	73fb      	strb	r3, [r7, #15]
  uint8_t axisMapSign = (axis.x_sign << 2) | (axis.y_sign << 1) | (axis.z_sign);
 8000d86:	787b      	ldrb	r3, [r7, #1]
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	b25a      	sxtb	r2, r3
 8000d8c:	78fb      	ldrb	r3, [r7, #3]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	4313      	orrs	r3, r2
 8000d94:	b25a      	sxtb	r2, r3
 8000d96:	797b      	ldrb	r3, [r7, #5]
 8000d98:	b25b      	sxtb	r3, r3
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	b25b      	sxtb	r3, r3
 8000d9e:	73bb      	strb	r3, [r7, #14]
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	4619      	mov	r1, r3
 8000da4:	2041      	movs	r0, #65	; 0x41
 8000da6:	f000 f961 	bl	800106c <bno055_writeData>
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
 8000daa:	7bbb      	ldrb	r3, [r7, #14]
 8000dac:	4619      	mov	r1, r3
 8000dae:	2042      	movs	r0, #66	; 0x42
 8000db0:	f000 f95c 	bl	800106c <bno055_writeData>
}
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <MX_DMA_Init+0x48>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <MX_DMA_Init+0x48>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6153      	str	r3, [r2, #20]
 8000dce:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <MX_DMA_Init+0x48>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	200f      	movs	r0, #15
 8000de0:	f003 f881 	bl	8003ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000de4:	200f      	movs	r0, #15
 8000de6:	f003 f89a 	bl	8003f1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2100      	movs	r1, #0
 8000dee:	2011      	movs	r0, #17
 8000df0:	f003 f879 	bl	8003ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000df4:	2011      	movs	r0, #17
 8000df6:	f003 f892 	bl	8003f1e <HAL_NVIC_EnableIRQ>

}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000

08000e08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	f107 0310 	add.w	r3, r7, #16
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1c:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <MX_GPIO_Init+0xfc>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a38      	ldr	r2, [pc, #224]	; (8000f04 <MX_GPIO_Init+0xfc>)
 8000e22:	f043 0310 	orr.w	r3, r3, #16
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <MX_GPIO_Init+0xfc>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0310 	and.w	r3, r3, #16
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e34:	4b33      	ldr	r3, [pc, #204]	; (8000f04 <MX_GPIO_Init+0xfc>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a32      	ldr	r2, [pc, #200]	; (8000f04 <MX_GPIO_Init+0xfc>)
 8000e3a:	f043 0320 	orr.w	r3, r3, #32
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b30      	ldr	r3, [pc, #192]	; (8000f04 <MX_GPIO_Init+0xfc>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0320 	and.w	r3, r3, #32
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <MX_GPIO_Init+0xfc>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a2c      	ldr	r2, [pc, #176]	; (8000f04 <MX_GPIO_Init+0xfc>)
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <MX_GPIO_Init+0xfc>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f003 0304 	and.w	r3, r3, #4
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_GPIO_Init+0xfc>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a26      	ldr	r2, [pc, #152]	; (8000f04 <MX_GPIO_Init+0xfc>)
 8000e6a:	f043 0308 	orr.w	r3, r3, #8
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_GPIO_Init+0xfc>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f003 0308 	and.w	r3, r3, #8
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e82:	4821      	ldr	r0, [pc, #132]	; (8000f08 <MX_GPIO_Init+0x100>)
 8000e84:	f003 fc4e 	bl	8004724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f243 0102 	movw	r1, #12290	; 0x3002
 8000e8e:	481f      	ldr	r0, [pc, #124]	; (8000f0c <MX_GPIO_Init+0x104>)
 8000e90:	f003 fc48 	bl	8004724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e9a:	481d      	ldr	r0, [pc, #116]	; (8000f10 <MX_GPIO_Init+0x108>)
 8000e9c:	f003 fc42 	bl	8004724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ea0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4813      	ldr	r0, [pc, #76]	; (8000f08 <MX_GPIO_Init+0x100>)
 8000eba:	f003 faaf 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|CSN_Pin|CE_Pin;
 8000ebe:	f243 0302 	movw	r3, #12290	; 0x3002
 8000ec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <MX_GPIO_Init+0x104>)
 8000ed8:	f003 faa0 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000edc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ee0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2302      	movs	r3, #2
 8000eec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 0310 	add.w	r3, r7, #16
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4806      	ldr	r0, [pc, #24]	; (8000f10 <MX_GPIO_Init+0x108>)
 8000ef6:	f003 fa91 	bl	800441c <HAL_GPIO_Init>

}
 8000efa:	bf00      	nop
 8000efc:	3720      	adds	r7, #32
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40011000 	.word	0x40011000
 8000f0c:	40010c00 	.word	0x40010c00
 8000f10:	40010800 	.word	0x40010800

08000f14 <set_ucounter>:

	//return -1;

}

void set_ucounter(unsigned int CLOCK_RATE) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

	u_counter++;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <set_ucounter+0x30>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3301      	adds	r3, #1
 8000f22:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <set_ucounter+0x30>)
 8000f24:	6013      	str	r3, [r2, #0]
	if(u_counter > CLOCK_RATE) {
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <set_ucounter+0x30>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d202      	bcs.n	8000f38 <set_ucounter+0x24>
		u_counter = 0;
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <set_ucounter+0x30>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
	}
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	200008a8 	.word	0x200008a8

08000f48 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_I2C1_Init+0x50>)
 8000f4e:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <MX_I2C1_Init+0x54>)
 8000f50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_I2C1_Init+0x50>)
 8000f54:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <MX_I2C1_Init+0x58>)
 8000f56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_I2C1_Init+0x50>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_I2C1_Init+0x50>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_I2C1_Init+0x50>)
 8000f66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <MX_I2C1_Init+0x50>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_I2C1_Init+0x50>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <MX_I2C1_Init+0x50>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_I2C1_Init+0x50>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <MX_I2C1_Init+0x50>)
 8000f86:	f003 fbff 	bl	8004788 <HAL_I2C_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f90:	f001 f880 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200017e4 	.word	0x200017e4
 8000f9c:	40005400 	.word	0x40005400
 8000fa0:	00061a80 	.word	0x00061a80

08000fa4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a15      	ldr	r2, [pc, #84]	; (8001014 <HAL_I2C_MspInit+0x70>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d123      	bne.n	800100c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <HAL_I2C_MspInit+0x74>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a13      	ldr	r2, [pc, #76]	; (8001018 <HAL_I2C_MspInit+0x74>)
 8000fca:	f043 0308 	orr.w	r3, r3, #8
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_I2C_MspInit+0x74>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0308 	and.w	r3, r3, #8
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fdc:	23c0      	movs	r3, #192	; 0xc0
 8000fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe0:	2312      	movs	r3, #18
 8000fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	4619      	mov	r1, r3
 8000fee:	480b      	ldr	r0, [pc, #44]	; (800101c <HAL_I2C_MspInit+0x78>)
 8000ff0:	f003 fa14 	bl	800441c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_I2C_MspInit+0x74>)
 8000ff6:	69db      	ldr	r3, [r3, #28]
 8000ff8:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_I2C_MspInit+0x74>)
 8000ffa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ffe:	61d3      	str	r3, [r2, #28]
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <HAL_I2C_MspInit+0x74>)
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800100c:	bf00      	nop
 800100e:	3720      	adds	r7, #32
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40005400 	.word	0x40005400
 8001018:	40021000 	.word	0x40021000
 800101c:	40010c00 	.word	0x40010c00

08001020 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001040:	4a03      	ldr	r2, [pc, #12]	; (8001050 <bno055_assignI2C+0x18>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	200008ac 	.word	0x200008ac

08001054 <bno055_delay>:

void bno055_delay(int time) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4618      	mov	r0, r3
 8001060:	f002 fe46 	bl	8003cf0 <HAL_Delay>
#endif
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af02      	add	r7, sp, #8
 8001072:	4603      	mov	r3, r0
 8001074:	460a      	mov	r2, r1
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	4613      	mov	r3, r2
 800107a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	733b      	strb	r3, [r7, #12]
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001084:	4b5a      	ldr	r3, [pc, #360]	; (80011f0 <bno055_writeData+0x184>)
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	f107 020c 	add.w	r2, r7, #12
 800108c:	230a      	movs	r3, #10
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2302      	movs	r3, #2
 8001092:	2150      	movs	r1, #80	; 0x50
 8001094:	f003 fcbc 	bl	8004a10 <HAL_I2C_Master_Transmit>
 8001098:	4603      	mov	r3, r0
 800109a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 800109c:	7dfb      	ldrb	r3, [r7, #23]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 80a0 	beq.w	80011e4 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d103      	bne.n	80010b2 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80010aa:	4852      	ldr	r0, [pc, #328]	; (80011f4 <bno055_writeData+0x188>)
 80010ac:	f008 fb28 	bl	8009700 <puts>
 80010b0:	e012      	b.n	80010d8 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80010b2:	7dfb      	ldrb	r3, [r7, #23]
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d103      	bne.n	80010c0 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80010b8:	484f      	ldr	r0, [pc, #316]	; (80011f8 <bno055_writeData+0x18c>)
 80010ba:	f008 fb21 	bl	8009700 <puts>
 80010be:	e00b      	b.n	80010d8 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d103      	bne.n	80010ce <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80010c6:	484d      	ldr	r0, [pc, #308]	; (80011fc <bno055_writeData+0x190>)
 80010c8:	f008 fb1a 	bl	8009700 <puts>
 80010cc:	e004      	b.n	80010d8 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 80010ce:	7dfb      	ldrb	r3, [r7, #23]
 80010d0:	4619      	mov	r1, r3
 80010d2:	484b      	ldr	r0, [pc, #300]	; (8001200 <bno055_writeData+0x194>)
 80010d4:	f008 fa8e 	bl	80095f4 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 80010d8:	4b45      	ldr	r3, [pc, #276]	; (80011f0 <bno055_writeData+0x184>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f004 f802 	bl	80050e6 <HAL_I2C_GetError>
 80010e2:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d07e      	beq.n	80011e8 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d103      	bne.n	80010f8 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80010f0:	4844      	ldr	r0, [pc, #272]	; (8001204 <bno055_writeData+0x198>)
 80010f2:	f008 fb05 	bl	8009700 <puts>
 80010f6:	e021      	b.n	800113c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d103      	bne.n	8001106 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80010fe:	4842      	ldr	r0, [pc, #264]	; (8001208 <bno055_writeData+0x19c>)
 8001100:	f008 fafe 	bl	8009700 <puts>
 8001104:	e01a      	b.n	800113c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	2b04      	cmp	r3, #4
 800110a:	d103      	bne.n	8001114 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 800110c:	483f      	ldr	r0, [pc, #252]	; (800120c <bno055_writeData+0x1a0>)
 800110e:	f008 faf7 	bl	8009700 <puts>
 8001112:	e013      	b.n	800113c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	2b08      	cmp	r3, #8
 8001118:	d103      	bne.n	8001122 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800111a:	483d      	ldr	r0, [pc, #244]	; (8001210 <bno055_writeData+0x1a4>)
 800111c:	f008 faf0 	bl	8009700 <puts>
 8001120:	e00c      	b.n	800113c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	2b10      	cmp	r3, #16
 8001126:	d103      	bne.n	8001130 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001128:	483a      	ldr	r0, [pc, #232]	; (8001214 <bno055_writeData+0x1a8>)
 800112a:	f008 fae9 	bl	8009700 <puts>
 800112e:	e005      	b.n	800113c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	2b20      	cmp	r3, #32
 8001134:	d102      	bne.n	800113c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001136:	4838      	ldr	r0, [pc, #224]	; (8001218 <bno055_writeData+0x1ac>)
 8001138:	f008 fae2 	bl	8009700 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 800113c:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <bno055_writeData+0x184>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f003 ffc3 	bl	80050cc <HAL_I2C_GetState>
 8001146:	4603      	mov	r3, r0
 8001148:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d103      	bne.n	8001158 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001150:	4832      	ldr	r0, [pc, #200]	; (800121c <bno055_writeData+0x1b0>)
 8001152:	f008 fad5 	bl	8009700 <puts>
 8001156:	e048      	b.n	80011ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	2b20      	cmp	r3, #32
 800115c:	d103      	bne.n	8001166 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 800115e:	482f      	ldr	r0, [pc, #188]	; (800121c <bno055_writeData+0x1b0>)
 8001160:	f008 face 	bl	8009700 <puts>
 8001164:	e041      	b.n	80011ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	2b24      	cmp	r3, #36	; 0x24
 800116a:	d103      	bne.n	8001174 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 800116c:	482c      	ldr	r0, [pc, #176]	; (8001220 <bno055_writeData+0x1b4>)
 800116e:	f008 fac7 	bl	8009700 <puts>
 8001172:	e03a      	b.n	80011ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	2b21      	cmp	r3, #33	; 0x21
 8001178:	d103      	bne.n	8001182 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800117a:	482a      	ldr	r0, [pc, #168]	; (8001224 <bno055_writeData+0x1b8>)
 800117c:	f008 fac0 	bl	8009700 <puts>
 8001180:	e033      	b.n	80011ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	2b22      	cmp	r3, #34	; 0x22
 8001186:	d103      	bne.n	8001190 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001188:	4827      	ldr	r0, [pc, #156]	; (8001228 <bno055_writeData+0x1bc>)
 800118a:	f008 fab9 	bl	8009700 <puts>
 800118e:	e02c      	b.n	80011ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	2b28      	cmp	r3, #40	; 0x28
 8001194:	d103      	bne.n	800119e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001196:	4825      	ldr	r0, [pc, #148]	; (800122c <bno055_writeData+0x1c0>)
 8001198:	f008 fab2 	bl	8009700 <puts>
 800119c:	e025      	b.n	80011ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	2b29      	cmp	r3, #41	; 0x29
 80011a2:	d103      	bne.n	80011ac <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80011a4:	4822      	ldr	r0, [pc, #136]	; (8001230 <bno055_writeData+0x1c4>)
 80011a6:	f008 faab 	bl	8009700 <puts>
 80011aa:	e01e      	b.n	80011ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	2b2a      	cmp	r3, #42	; 0x2a
 80011b0:	d103      	bne.n	80011ba <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80011b2:	4820      	ldr	r0, [pc, #128]	; (8001234 <bno055_writeData+0x1c8>)
 80011b4:	f008 faa4 	bl	8009700 <puts>
 80011b8:	e017      	b.n	80011ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	2b60      	cmp	r3, #96	; 0x60
 80011be:	d103      	bne.n	80011c8 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80011c0:	481d      	ldr	r0, [pc, #116]	; (8001238 <bno055_writeData+0x1cc>)
 80011c2:	f008 fa9d 	bl	8009700 <puts>
 80011c6:	e010      	b.n	80011ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	2ba0      	cmp	r3, #160	; 0xa0
 80011cc:	d103      	bne.n	80011d6 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 80011ce:	481b      	ldr	r0, [pc, #108]	; (800123c <bno055_writeData+0x1d0>)
 80011d0:	f008 fa96 	bl	8009700 <puts>
 80011d4:	e009      	b.n	80011ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	2be0      	cmp	r3, #224	; 0xe0
 80011da:	d106      	bne.n	80011ea <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 80011dc:	4818      	ldr	r0, [pc, #96]	; (8001240 <bno055_writeData+0x1d4>)
 80011de:	f008 fa8f 	bl	8009700 <puts>
 80011e2:	e002      	b.n	80011ea <bno055_writeData+0x17e>
    return;
 80011e4:	bf00      	nop
 80011e6:	e000      	b.n	80011ea <bno055_writeData+0x17e>
    return;
 80011e8:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200008ac 	.word	0x200008ac
 80011f4:	0800a830 	.word	0x0800a830
 80011f8:	0800a854 	.word	0x0800a854
 80011fc:	0800a87c 	.word	0x0800a87c
 8001200:	0800a8a0 	.word	0x0800a8a0
 8001204:	0800a8b8 	.word	0x0800a8b8
 8001208:	0800a8cc 	.word	0x0800a8cc
 800120c:	0800a8e0 	.word	0x0800a8e0
 8001210:	0800a8f4 	.word	0x0800a8f4
 8001214:	0800a908 	.word	0x0800a908
 8001218:	0800a91c 	.word	0x0800a91c
 800121c:	0800a934 	.word	0x0800a934
 8001220:	0800a94c 	.word	0x0800a94c
 8001224:	0800a960 	.word	0x0800a960
 8001228:	0800a978 	.word	0x0800a978
 800122c:	0800a990 	.word	0x0800a990
 8001230:	0800a9a8 	.word	0x0800a9a8
 8001234:	0800a9c8 	.word	0x0800a9c8
 8001238:	0800a9e8 	.word	0x0800a9e8
 800123c:	0800aa00 	.word	0x0800aa00
 8001240:	0800aa18 	.word	0x0800aa18

08001244 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af02      	add	r7, sp, #8
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	71fb      	strb	r3, [r7, #7]
 8001250:	4613      	mov	r3, r2
 8001252:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <bno055_readData+0x40>)
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	1dfa      	adds	r2, r7, #7
 800125a:	2364      	movs	r3, #100	; 0x64
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2301      	movs	r3, #1
 8001260:	2150      	movs	r1, #80	; 0x50
 8001262:	f003 fbd5 	bl	8004a10 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <bno055_readData+0x40>)
 8001268:	6818      	ldr	r0, [r3, #0]
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	b29b      	uxth	r3, r3
 800126e:	2264      	movs	r2, #100	; 0x64
 8001270:	9200      	str	r2, [sp, #0]
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	2150      	movs	r1, #80	; 0x50
 8001276:	f003 fcc9 	bl	8004c0c <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200008ac 	.word	0x200008ac

08001288 <HAL_UART_TxCpltCallback>:
	while(delay_timer < current_time + millis) {
		printf("Do nothing...");
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance) {
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <HAL_UART_TxCpltCallback+0xa0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	d140      	bne.n	800131e <HAL_UART_TxCpltCallback+0x96>
		char end_char;
		switch(tx_type) {
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <HAL_UART_TxCpltCallback+0xa4>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d013      	beq.n	80012cc <HAL_UART_TxCpltCallback+0x44>
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	dc3a      	bgt.n	800131e <HAL_UART_TxCpltCallback+0x96>
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <HAL_UART_TxCpltCallback+0x2a>
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d017      	beq.n	80012e0 <HAL_UART_TxCpltCallback+0x58>
		    period = sent_time - sent_time_;
		    break;
		}

	}
}
 80012b0:	e035      	b.n	800131e <HAL_UART_TxCpltCallback+0x96>
			end_char = 0x01;
 80012b2:	2301      	movs	r3, #1
 80012b4:	72fb      	strb	r3, [r7, #11]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 80012b6:	f107 030b 	add.w	r3, r7, #11
 80012ba:	2201      	movs	r2, #1
 80012bc:	4619      	mov	r1, r3
 80012be:	481a      	ldr	r0, [pc, #104]	; (8001328 <HAL_UART_TxCpltCallback+0xa0>)
 80012c0:	f007 f89c 	bl	80083fc <HAL_UART_Transmit_DMA>
			tx_type = package;
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_UART_TxCpltCallback+0xa4>)
 80012c6:	2202      	movs	r2, #2
 80012c8:	701a      	strb	r2, [r3, #0]
			break;
 80012ca:	e028      	b.n	800131e <HAL_UART_TxCpltCallback+0x96>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buf, sizeof(struct telem_pack));
 80012cc:	f240 12a1 	movw	r2, #417	; 0x1a1
 80012d0:	4917      	ldr	r1, [pc, #92]	; (8001330 <HAL_UART_TxCpltCallback+0xa8>)
 80012d2:	4815      	ldr	r0, [pc, #84]	; (8001328 <HAL_UART_TxCpltCallback+0xa0>)
 80012d4:	f007 f892 	bl	80083fc <HAL_UART_Transmit_DMA>
			tx_type = stop;
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_UART_TxCpltCallback+0xa4>)
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
			break;
 80012de:	e01e      	b.n	800131e <HAL_UART_TxCpltCallback+0x96>
			end_char = 0x04;
 80012e0:	2304      	movs	r3, #4
 80012e2:	72fb      	strb	r3, [r7, #11]
		    HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 80012e4:	f107 030b 	add.w	r3, r7, #11
 80012e8:	2201      	movs	r2, #1
 80012ea:	4619      	mov	r1, r3
 80012ec:	480e      	ldr	r0, [pc, #56]	; (8001328 <HAL_UART_TxCpltCallback+0xa0>)
 80012ee:	f007 f885 	bl	80083fc <HAL_UART_Transmit_DMA>
		    tx_type = start;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HAL_UART_TxCpltCallback+0xa4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
		    long int sent_time_ = sent_time;
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_UART_TxCpltCallback+0xac>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]
		    sent_time = HAL_GetTick();
 80012fe:	f002 fced 	bl	8003cdc <HAL_GetTick>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_UART_TxCpltCallback+0xac>)
 8001308:	601a      	str	r2, [r3, #0]
		    period = sent_time - sent_time_;
 800130a:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_UART_TxCpltCallback+0xac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	b2da      	uxtb	r2, r3
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <HAL_UART_TxCpltCallback+0xb0>)
 800131a:	701a      	strb	r2, [r3, #0]
		    break;
 800131c:	bf00      	nop
}
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20001ab8 	.word	0x20001ab8
 800132c:	20001708 	.word	0x20001708
 8001330:	20000aa8 	.word	0x20000aa8
 8001334:	2000167c 	.word	0x2000167c
 8001338:	200016c0 	.word	0x200016c0

0800133c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133e:	b0a3      	sub	sp, #140	; 0x8c
 8001340:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001342:	f002 fc73 	bl	8003c2c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(2000);
 8001346:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800134a:	f002 fcd1 	bl	8003cf0 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134e:	f000 f92f 	bl	80015b0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001352:	f7ff fd59 	bl	8000e08 <MX_GPIO_Init>
  MX_DMA_Init();
 8001356:	f7ff fd31 	bl	8000dbc <MX_DMA_Init>
  MX_I2C1_Init();
 800135a:	f7ff fdf5 	bl	8000f48 <MX_I2C1_Init>
  MX_TIM2_Init();
 800135e:	f002 f8b1 	bl	80034c4 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001362:	f002 f807 	bl	8003374 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001366:	f002 fac1 	bl	80038ec <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800136a:	f002 f8f7 	bl	800355c <MX_TIM3_Init>
  MX_TIM4_Init();
 800136e:	f002 f965 	bl	800363c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001372:	f002 fa91 	bl	8003898 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001376:	f002 fae3 	bl	8003940 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800137a:	f001 fe17 	bl	8002fac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, (uint8_t*)&cam_data, sizeof(cam_data));
 800137e:	2209      	movs	r2, #9
 8001380:	497a      	ldr	r1, [pc, #488]	; (800156c <main+0x230>)
 8001382:	487b      	ldr	r0, [pc, #492]	; (8001570 <main+0x234>)
 8001384:	f007 f8a6 	bl	80084d4 <HAL_UART_Receive_DMA>

  //HAL_UART_Receive_DMA(&huart2, (uint8_t*)ch_rcv_buf, 1);
  //HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(cam_data)-1);
#ifdef BMO_DEBUG
  bno055_assignI2C(&hi2c1);
 8001388:	487a      	ldr	r0, [pc, #488]	; (8001574 <main+0x238>)
 800138a:	f7ff fe55 	bl	8001038 <bno055_assignI2C>
  bno055_setup();
 800138e:	f7ff fcbf 	bl	8000d10 <bno055_setup>
  bno055_setOperationModeNDOF();
 8001392:	f7ff fcaa 	bl	8000cea <bno055_setOperationModeNDOF>
  //bno055_setAxisDefualt();
  bno055_axis_map_t axis = {
 8001396:	4a78      	ldr	r2, [pc, #480]	; (8001578 <main+0x23c>)
 8001398:	f107 0318 	add.w	r3, r7, #24
 800139c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013a0:	6018      	str	r0, [r3, #0]
 80013a2:	3304      	adds	r3, #4
 80013a4:	8019      	strh	r1, [r3, #0]
    .y = BNO055_AXIS_X,
    .y_sign = BNO055_AXIS_SIGN_POSITIVE,
    .z = BNO055_AXIS_Y,
    .z_sign = BNO055_AXIS_SIGN_POSITIVE
  };
  bno055_setAxisMap(axis);
 80013a6:	f107 0318 	add.w	r3, r7, #24
 80013aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013ae:	f7ff fcd7 	bl	8000d60 <bno055_setAxisMap>
#ifdef UAV1
  MPU6050_Baslat();
  bmp_init(&bmp);
  HMC5883L_initialize();
#endif
  MotorBaslat();
 80013b2:	f000 fd23 	bl	8001dfc <_Z11MotorBaslatv>
  //GPSInit();
  HAL_Delay(1000);
 80013b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ba:	f002 fc99 	bl	8003cf0 <HAL_Delay>

  Ringbuf_init();
 80013be:	f7ff fba7 	bl	8000b10 <Ringbuf_init>
	printRadioSettings();

#endif

#ifdef UAV2
	NRF24_begin(CE_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 80013c2:	4c6e      	ldr	r4, [pc, #440]	; (800157c <main+0x240>)
 80013c4:	4668      	mov	r0, sp
 80013c6:	1d23      	adds	r3, r4, #4
 80013c8:	2254      	movs	r2, #84	; 0x54
 80013ca:	4619      	mov	r1, r3
 80013cc:	f008 f856 	bl	800947c <memcpy>
 80013d0:	6823      	ldr	r3, [r4, #0]
 80013d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013da:	4869      	ldr	r0, [pc, #420]	; (8001580 <main+0x244>)
 80013dc:	f000 ffe2 	bl	80023a4 <NRF24_begin>
	nrf24_DebugUART_Init(huart3);
 80013e0:	4e68      	ldr	r6, [pc, #416]	; (8001584 <main+0x248>)
 80013e2:	466d      	mov	r5, sp
 80013e4:	f106 0410 	add.w	r4, r6, #16
 80013e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013f4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80013f8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80013fc:	f001 fdba 	bl	8002f74 <nrf24_DebugUART_Init>
	NRF24_setAutoAck(false);
 8001400:	2000      	movs	r0, #0
 8001402:	f001 f9bb 	bl	800277c <NRF24_setAutoAck>
	NRF24_setChannel(34);
 8001406:	2022      	movs	r0, #34	; 0x22
 8001408:	f001 f963 	bl	80026d2 <NRF24_setChannel>
	NRF24_setPayloadSize(sizeof(struct pwm));
 800140c:	2008      	movs	r0, #8
 800140e:	f001 f975 	bl	80026fc <NRF24_setPayloadSize>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 8001412:	4b5d      	ldr	r3, [pc, #372]	; (8001588 <main+0x24c>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	2001      	movs	r0, #1
 800141a:	f001 f8f1 	bl	8002600 <NRF24_openReadingPipe>
	NRF24_startListening();
 800141e:	f001 f8a1 	bl	8002564 <NRF24_startListening>
	char test_data[] = "Testing...";
 8001422:	4a5a      	ldr	r2, [pc, #360]	; (800158c <main+0x250>)
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	ca07      	ldmia	r2, {r0, r1, r2}
 800142a:	c303      	stmia	r3!, {r0, r1}
 800142c:	801a      	strh	r2, [r3, #0]
 800142e:	3302      	adds	r3, #2
 8001430:	0c12      	lsrs	r2, r2, #16
 8001432:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)&test_data, sizeof(test_data), 5);
 8001434:	f107 010c 	add.w	r1, r7, #12
 8001438:	2305      	movs	r3, #5
 800143a:	220b      	movs	r2, #11
 800143c:	4851      	ldr	r0, [pc, #324]	; (8001584 <main+0x248>)
 800143e:	f006 ff4b 	bl	80082d8 <HAL_UART_Transmit>
	printRadioSettings();
 8001442:	f001 fab9 	bl	80029b8 <printRadioSettings>
#endif

  //Gyro kalibrasyon hatalarını hesapla.
  HAL_Delay(5000);
 8001446:	f241 3088 	movw	r0, #5000	; 0x1388
 800144a:	f002 fc51 	bl	8003cf0 <HAL_Delay>
  accX = AccOku(ACC_X_ADDR);
  accY = AccOku(ACC_Y_ADDR);
  accZ = AccOku(ACC_Z_ADDR);
#endif
  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 800144e:	4850      	ldr	r0, [pc, #320]	; (8001590 <main+0x254>)
 8001450:	f005 fba0 	bl	8006b94 <HAL_TIM_Base_Start_IT>

  //Micros timer
  HAL_TIM_Base_Start(&htim3);
 8001454:	484f      	ldr	r0, [pc, #316]	; (8001594 <main+0x258>)
 8001456:	f005 fb53 	bl	8006b00 <HAL_TIM_Base_Start>


  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800145a:	2100      	movs	r1, #0
 800145c:	484e      	ldr	r0, [pc, #312]	; (8001598 <main+0x25c>)
 800145e:	f005 fc3b 	bl	8006cd8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001462:	2104      	movs	r1, #4
 8001464:	484c      	ldr	r0, [pc, #304]	; (8001598 <main+0x25c>)
 8001466:	f006 fd67 	bl	8007f38 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800146a:	2108      	movs	r1, #8
 800146c:	484a      	ldr	r0, [pc, #296]	; (8001598 <main+0x25c>)
 800146e:	f006 fd63 	bl	8007f38 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001472:	210c      	movs	r1, #12
 8001474:	4848      	ldr	r0, [pc, #288]	; (8001598 <main+0x25c>)
 8001476:	f005 fc2f 	bl	8006cd8 <HAL_TIM_PWM_Start>

  //PPM Input Capture Kanalları
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 800147a:	2108      	movs	r1, #8
 800147c:	4845      	ldr	r0, [pc, #276]	; (8001594 <main+0x258>)
 800147e:	f005 fd25 	bl	8006ecc <HAL_TIM_IC_Start_IT>

  //ESP DMA Başlat.
  char end_char = 0x01;
 8001482:	2301      	movs	r3, #1
 8001484:	72fb      	strb	r3, [r7, #11]
  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&end_char, sizeof(end_char));
 8001486:	f107 030b 	add.w	r3, r7, #11
 800148a:	2201      	movs	r2, #1
 800148c:	4619      	mov	r1, r3
 800148e:	4843      	ldr	r0, [pc, #268]	; (800159c <main+0x260>)
 8001490:	f006 ffb4 	bl	80083fc <HAL_UART_Transmit_DMA>
  tx_type = package;
 8001494:	4b42      	ldr	r3, [pc, #264]	; (80015a0 <main+0x264>)
 8001496:	2202      	movs	r2, #2
 8001498:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	#ifdef UAV2
	 		bool data_healthy;

			if(NRF24_available())
 800149a:	f001 f889 	bl	80025b0 <NRF24_available>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d033      	beq.n	800150c <main+0x1d0>
			{
				char nrf_buf[sizeof(struct pwm)];
				NRF24_read(nrf_buf, sizeof(struct pwm));
 80014a4:	463b      	mov	r3, r7
 80014a6:	2108      	movs	r1, #8
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 f889 	bl	80025c0 <NRF24_read>

				memcpy(&pwm_out, nrf_buf , sizeof(struct pwm));
 80014ae:	4b3d      	ldr	r3, [pc, #244]	; (80015a4 <main+0x268>)
 80014b0:	461a      	mov	r2, r3
 80014b2:	463b      	mov	r3, r7
 80014b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014b8:	e882 0003 	stmia.w	r2, {r0, r1}


				//Check if the incoming data is healthy or not.
				short unsigned int *p;
				p = &pwm_out.w1;
 80014bc:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <main+0x268>)
 80014be:	627b      	str	r3, [r7, #36]	; 0x24

				data_healthy = true;
 80014c0:	2301      	movs	r3, #1
 80014c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

				for(int i=0; i<4; i++) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80014ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	dc1d      	bgt.n	800150c <main+0x1d0>
					if(*(p+i) > 2000 || *(p+i) < 1000) {
 80014d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d6:	4413      	add	r3, r2
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80014de:	d807      	bhi.n	80014f0 <main+0x1b4>
 80014e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e6:	4413      	add	r3, r2
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014ee:	d209      	bcs.n	8001504 <main+0x1c8>
						unsigned int val = *(p+i);
 80014f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f6:	4413      	add	r3, r2
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	623b      	str	r3, [r7, #32]
						data_healthy = false;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						break;
 8001502:	e003      	b.n	800150c <main+0x1d0>
				for(int i=0; i<4; i++) {
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001506:	3301      	adds	r3, #1
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
 800150a:	e7de      	b.n	80014ca <main+0x18e>
				//Give healthy datas to outputs.

				//HAL_UART_Transmit(&huart3, (uint8_t *)RxData, 32, 10);
			}

			if(data_healthy) {
 800150c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001510:	2b00      	cmp	r3, #0
 8001512:	d019      	beq.n	8001548 <main+0x20c>
				controller_output_2[0] = pwm_out.w1;
 8001514:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <main+0x268>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <main+0x26c>)
 800151c:	601a      	str	r2, [r3, #0]
				controller_output_2[1] = pwm_out.w2;
 800151e:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <main+0x268>)
 8001520:	885b      	ldrh	r3, [r3, #2]
 8001522:	461a      	mov	r2, r3
 8001524:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <main+0x26c>)
 8001526:	605a      	str	r2, [r3, #4]
				controller_output_2[2] = pwm_out.w3;
 8001528:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <main+0x268>)
 800152a:	889b      	ldrh	r3, [r3, #4]
 800152c:	461a      	mov	r2, r3
 800152e:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <main+0x26c>)
 8001530:	609a      	str	r2, [r3, #8]
				controller_output_2[3] = pwm_out.w4;
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <main+0x268>)
 8001534:	88db      	ldrh	r3, [r3, #6]
 8001536:	461a      	mov	r2, r3
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <main+0x26c>)
 800153a:	60da      	str	r2, [r3, #12]
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800153c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001540:	481a      	ldr	r0, [pc, #104]	; (80015ac <main+0x270>)
 8001542:	f003 f907 	bl	8004754 <HAL_GPIO_TogglePin>
 8001546:	e7a8      	b.n	800149a <main+0x15e>

			}


			else {
				controller_output_2[0] = 1000;
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <main+0x26c>)
 800154a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800154e:	601a      	str	r2, [r3, #0]
				controller_output_2[1] = 1000;
 8001550:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <main+0x26c>)
 8001552:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001556:	605a      	str	r2, [r3, #4]
				controller_output_2[2] = 1000;
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <main+0x26c>)
 800155a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800155e:	609a      	str	r2, [r3, #8]
				controller_output_2[3] = 1000;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <main+0x26c>)
 8001562:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001566:	60da      	str	r2, [r3, #12]


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001568:	e797      	b.n	800149a <main+0x15e>
 800156a:	bf00      	nop
 800156c:	2000169c 	.word	0x2000169c
 8001570:	20001a78 	.word	0x20001a78
 8001574:	200017e4 	.word	0x200017e4
 8001578:	0800aa40 	.word	0x0800aa40
 800157c:	20001838 	.word	0x20001838
 8001580:	40010c00 	.word	0x40010c00
 8001584:	200019b0 	.word	0x200019b0
 8001588:	20000000 	.word	0x20000000
 800158c:	0800aa48 	.word	0x0800aa48
 8001590:	20001968 	.word	0x20001968
 8001594:	200018d8 	.word	0x200018d8
 8001598:	20001920 	.word	0x20001920
 800159c:	20001ab8 	.word	0x20001ab8
 80015a0:	20001708 	.word	0x20001708
 80015a4:	20001714 	.word	0x20001714
 80015a8:	200015f8 	.word	0x200015f8
 80015ac:	40011000 	.word	0x40011000

080015b0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b090      	sub	sp, #64	; 0x40
 80015b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b6:	f107 0318 	add.w	r3, r7, #24
 80015ba:	2228      	movs	r2, #40	; 0x28
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f007 ff6a 	bl	8009498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015d2:	2301      	movs	r3, #1
 80015d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015e0:	2301      	movs	r3, #1
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e4:	2302      	movs	r3, #2
 80015e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f4:	f107 0318 	add.w	r3, r7, #24
 80015f8:	4618      	mov	r0, r3
 80015fa:	f004 f8ab 	bl	8005754 <HAL_RCC_OscConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	bf14      	ite	ne
 8001604:	2301      	movne	r3, #1
 8001606:	2300      	moveq	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800160e:	f000 fd41 	bl	8002094 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001612:	230f      	movs	r3, #15
 8001614:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001616:	2302      	movs	r3, #2
 8001618:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800161e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	2102      	movs	r1, #2
 800162c:	4618      	mov	r0, r3
 800162e:	f004 fb11 	bl	8005c54 <HAL_RCC_ClockConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf14      	ite	ne
 8001638:	2301      	movne	r3, #1
 800163a:	2300      	moveq	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8001642:	f000 fd27 	bl	8002094 <Error_Handler>
  }
}
 8001646:	bf00      	nop
 8001648:	3740      	adds	r7, #64	; 0x40
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <_Z10CheckSwarmv>:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
		break;
	}
}

void CheckSwarm() {
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	if(ch[SWARM_CH-1] > 1500) {
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <_Z10CheckSwarmv+0x68>)
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800165c:	4293      	cmp	r3, r2
 800165e:	dd14      	ble.n	800168a <_Z10CheckSwarmv+0x3a>
		if(swarm_mode != SWARM) {
 8001660:	4b16      	ldr	r3, [pc, #88]	; (80016bc <_Z10CheckSwarmv+0x6c>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d024      	beq.n	80016b2 <_Z10CheckSwarmv+0x62>
			swarm_mode = SWARM;
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <_Z10CheckSwarmv+0x6c>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]

			controller.swarm = true;
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <_Z10CheckSwarmv+0x70>)
 8001670:	2201      	movs	r2, #1
 8001672:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5

			controller.pid_roll.reset();
 8001676:	4813      	ldr	r0, [pc, #76]	; (80016c4 <_Z10CheckSwarmv+0x74>)
 8001678:	f007 fe86 	bl	8009388 <_ZN3PID5resetEv>
			controller.pid_pitch.reset();
 800167c:	4812      	ldr	r0, [pc, #72]	; (80016c8 <_Z10CheckSwarmv+0x78>)
 800167e:	f007 fe83 	bl	8009388 <_ZN3PID5resetEv>
			controller.pid_yaw.reset();
 8001682:	4812      	ldr	r0, [pc, #72]	; (80016cc <_Z10CheckSwarmv+0x7c>)
 8001684:	f007 fe80 	bl	8009388 <_ZN3PID5resetEv>
			controller.pid_roll.reset();
			controller.pid_pitch.reset();
			controller.pid_yaw.reset();
		}
	}
}
 8001688:	e013      	b.n	80016b2 <_Z10CheckSwarmv+0x62>
		if(swarm_mode != NORMAL) {
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <_Z10CheckSwarmv+0x6c>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00f      	beq.n	80016b2 <_Z10CheckSwarmv+0x62>
			controller.swarm = false;
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <_Z10CheckSwarmv+0x70>)
 8001694:	2200      	movs	r2, #0
 8001696:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
			swarm_mode = NORMAL;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <_Z10CheckSwarmv+0x6c>)
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
			controller.pid_roll.reset();
 80016a0:	4808      	ldr	r0, [pc, #32]	; (80016c4 <_Z10CheckSwarmv+0x74>)
 80016a2:	f007 fe71 	bl	8009388 <_ZN3PID5resetEv>
			controller.pid_pitch.reset();
 80016a6:	4808      	ldr	r0, [pc, #32]	; (80016c8 <_Z10CheckSwarmv+0x78>)
 80016a8:	f007 fe6e 	bl	8009388 <_ZN3PID5resetEv>
			controller.pid_yaw.reset();
 80016ac:	4807      	ldr	r0, [pc, #28]	; (80016cc <_Z10CheckSwarmv+0x7c>)
 80016ae:	f007 fe6b 	bl	8009388 <_ZN3PID5resetEv>
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20001618 	.word	0x20001618
 80016bc:	20001709 	.word	0x20001709
 80016c0:	20000f98 	.word	0x20000f98
 80016c4:	20001190 	.word	0x20001190
 80016c8:	20001248 	.word	0x20001248
 80016cc:	20001300 	.word	0x20001300

080016d0 <_Z13CheckFailsafev>:

void CheckFailsafe() {
 80016d0:	b598      	push	{r3, r4, r7, lr}
 80016d2:	af00      	add	r7, sp, #0

	if(armed) {
 80016d4:	4b27      	ldr	r3, [pc, #156]	; (8001774 <_Z13CheckFailsafev+0xa4>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d048      	beq.n	800176e <_Z13CheckFailsafev+0x9e>
		if(ch[2] < 970 && !in_failsafe) {
 80016dc:	4b26      	ldr	r3, [pc, #152]	; (8001778 <_Z13CheckFailsafev+0xa8>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80016e4:	4293      	cmp	r3, r2
 80016e6:	dc0d      	bgt.n	8001704 <_Z13CheckFailsafev+0x34>
 80016e8:	4b24      	ldr	r3, [pc, #144]	; (800177c <_Z13CheckFailsafev+0xac>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	f083 0301 	eor.w	r3, r3, #1
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d006      	beq.n	8001704 <_Z13CheckFailsafev+0x34>
			in_failsafe = true;
 80016f6:	4b21      	ldr	r3, [pc, #132]	; (800177c <_Z13CheckFailsafev+0xac>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]
			Fail_Acc = accXc;
 80016fc:	4b20      	ldr	r3, [pc, #128]	; (8001780 <_Z13CheckFailsafev+0xb0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a20      	ldr	r2, [pc, #128]	; (8001784 <_Z13CheckFailsafev+0xb4>)
 8001702:	6013      	str	r3, [r2, #0]
		}

		if(failsafe_counter < 1000) {
 8001704:	4b20      	ldr	r3, [pc, #128]	; (8001788 <_Z13CheckFailsafev+0xb8>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800170c:	d226      	bcs.n	800175c <_Z13CheckFailsafev+0x8c>

			if(in_failsafe) { //5 seconds
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <_Z13CheckFailsafev+0xac>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d02b      	beq.n	800176e <_Z13CheckFailsafev+0x9e>
				if(abs(accXc - Fail_Acc) < ACC_FAIL_LIM) {
 8001716:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <_Z13CheckFailsafev+0xb0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a1a      	ldr	r2, [pc, #104]	; (8001784 <_Z13CheckFailsafev+0xb4>)
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ff25 	bl	8000570 <__aeabi_fsub>
 8001726:	4603      	mov	r3, r0
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fc79 	bl	8001020 <_ZSt3absf>
 800172e:	4603      	mov	r3, r0
 8001730:	2201      	movs	r2, #1
 8001732:	4614      	mov	r4, r2
 8001734:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff f9c1 	bl	8000ac0 <__aeabi_fcmplt>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <_Z13CheckFailsafev+0x78>
 8001744:	2300      	movs	r3, #0
 8001746:	461c      	mov	r4, r3
 8001748:	b2e3      	uxtb	r3, r4
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00f      	beq.n	800176e <_Z13CheckFailsafev+0x9e>
					failsafe_counter++;
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <_Z13CheckFailsafev+0xb8>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	3301      	adds	r3, #1
 8001754:	b29a      	uxth	r2, r3
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <_Z13CheckFailsafev+0xb8>)
 8001758:	801a      	strh	r2, [r3, #0]
			failsafe_counter = 0;
		}
	}


}
 800175a:	e008      	b.n	800176e <_Z13CheckFailsafev+0x9e>
			armed = false;
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <_Z13CheckFailsafev+0xa4>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
			in_failsafe = false;
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <_Z13CheckFailsafev+0xac>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
			failsafe_counter = 0;
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <_Z13CheckFailsafev+0xb8>)
 800176a:	2200      	movs	r2, #0
 800176c:	801a      	strh	r2, [r3, #0]
}
 800176e:	bf00      	nop
 8001770:	bd98      	pop	{r3, r4, r7, pc}
 8001772:	bf00      	nop
 8001774:	20001681 	.word	0x20001681
 8001778:	20001618 	.word	0x20001618
 800177c:	200016ba 	.word	0x200016ba
 8001780:	200008b0 	.word	0x200008b0
 8001784:	200016bc 	.word	0x200016bc
 8001788:	200016b8 	.word	0x200016b8

0800178c <_Z9Check_Armv>:


void Check_Arm() {
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	if(!armed) {
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <_Z9Check_Armv+0xa4>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	f083 0301 	eor.w	r3, r3, #1
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d045      	beq.n	800182a <_Z9Check_Armv+0x9e>
		if((ch[2] < CH3_MIN + 100) && (ch[3] > 1700)) {
 800179e:	4b25      	ldr	r3, [pc, #148]	; (8001834 <_Z9Check_Armv+0xa8>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f240 424b 	movw	r2, #1099	; 0x44b
 80017a6:	4293      	cmp	r3, r2
 80017a8:	dc3b      	bgt.n	8001822 <_Z9Check_Armv+0x96>
 80017aa:	4b22      	ldr	r3, [pc, #136]	; (8001834 <_Z9Check_Armv+0xa8>)
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80017b2:	4293      	cmp	r3, r2
 80017b4:	dd35      	ble.n	8001822 <_Z9Check_Armv+0x96>
				if(!arm_start){
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <_Z9Check_Armv+0xac>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	f083 0301 	eor.w	r3, r3, #1
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d008      	beq.n	80017d6 <_Z9Check_Armv+0x4a>
					arm_timer = HAL_GetTick();
 80017c4:	f002 fa8a 	bl	8003cdc <HAL_GetTick>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <_Z9Check_Armv+0xb0>)
 80017ce:	601a      	str	r2, [r3, #0]
					arm_start = true;
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <_Z9Check_Armv+0xac>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - arm_timer > 3000) {
 80017d6:	f002 fa81 	bl	8003cdc <HAL_GetTick>
 80017da:	4603      	mov	r3, r0
 80017dc:	4a17      	ldr	r2, [pc, #92]	; (800183c <_Z9Check_Armv+0xb0>)
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	1a9b      	subs	r3, r3, r2
 80017e2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80017e6:	4293      	cmp	r3, r2
 80017e8:	bf8c      	ite	hi
 80017ea:	2301      	movhi	r3, #1
 80017ec:	2300      	movls	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d01a      	beq.n	800182a <_Z9Check_Armv+0x9e>
					controller.pid_roll.reset();
 80017f4:	4812      	ldr	r0, [pc, #72]	; (8001840 <_Z9Check_Armv+0xb4>)
 80017f6:	f007 fdc7 	bl	8009388 <_ZN3PID5resetEv>
					controller.pid_pitch.reset();
 80017fa:	4812      	ldr	r0, [pc, #72]	; (8001844 <_Z9Check_Armv+0xb8>)
 80017fc:	f007 fdc4 	bl	8009388 <_ZN3PID5resetEv>
					controller.pid_yaw.reset();
 8001800:	4811      	ldr	r0, [pc, #68]	; (8001848 <_Z9Check_Armv+0xbc>)
 8001802:	f007 fdc1 	bl	8009388 <_ZN3PID5resetEv>
					armed = true;
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <_Z9Check_Armv+0xa4>)
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
					EKF.armed = true;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <_Z9Check_Armv+0xc0>)
 800180e:	2201      	movs	r2, #1
 8001810:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
					//SetHome2();
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001814:	2201      	movs	r2, #1
 8001816:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800181a:	480d      	ldr	r0, [pc, #52]	; (8001850 <_Z9Check_Armv+0xc4>)
 800181c:	f002 ff82 	bl	8004724 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - arm_timer > 3000) {
 8001820:	e003      	b.n	800182a <_Z9Check_Armv+0x9e>
				}

		}

		else {
			arm_start = false;
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <_Z9Check_Armv+0xac>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8001828:	e7ff      	b.n	800182a <_Z9Check_Armv+0x9e>
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20001681 	.word	0x20001681
 8001834:	20001618 	.word	0x20001618
 8001838:	20001680 	.word	0x20001680
 800183c:	20001674 	.word	0x20001674
 8001840:	20001190 	.word	0x20001190
 8001844:	20001248 	.word	0x20001248
 8001848:	20001300 	.word	0x20001300
 800184c:	20000c50 	.word	0x20000c50
 8001850:	40010800 	.word	0x40010800

08001854 <_Z12Check_Disarmv>:

void Check_Disarm() {
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	if(armed) {
 8001858:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <_Z12Check_Disarmv+0x8c>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d03c      	beq.n	80018da <_Z12Check_Disarmv+0x86>
		if((ch[2] < 1100) && (ch[3] < 1100)) {
 8001860:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <_Z12Check_Disarmv+0x90>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f240 424b 	movw	r2, #1099	; 0x44b
 8001868:	4293      	cmp	r3, r2
 800186a:	dc32      	bgt.n	80018d2 <_Z12Check_Disarmv+0x7e>
 800186c:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <_Z12Check_Disarmv+0x90>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	f240 424b 	movw	r2, #1099	; 0x44b
 8001874:	4293      	cmp	r3, r2
 8001876:	dc2c      	bgt.n	80018d2 <_Z12Check_Disarmv+0x7e>
				if(!disarm_start){
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <_Z12Check_Disarmv+0x94>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	f083 0301 	eor.w	r3, r3, #1
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d008      	beq.n	8001898 <_Z12Check_Disarmv+0x44>
					disarm_timer = HAL_GetTick();
 8001886:	f002 fa29 	bl	8003cdc <HAL_GetTick>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	4b17      	ldr	r3, [pc, #92]	; (80018ec <_Z12Check_Disarmv+0x98>)
 8001890:	601a      	str	r2, [r3, #0]
					disarm_start = true;
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <_Z12Check_Disarmv+0x94>)
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GetTick() - disarm_timer > 3000) {
 8001898:	f002 fa20 	bl	8003cdc <HAL_GetTick>
 800189c:	4603      	mov	r3, r0
 800189e:	4a13      	ldr	r2, [pc, #76]	; (80018ec <_Z12Check_Disarmv+0x98>)
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	1a9b      	subs	r3, r3, r2
 80018a4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80018a8:	4293      	cmp	r3, r2
 80018aa:	bf8c      	ite	hi
 80018ac:	2301      	movhi	r3, #1
 80018ae:	2300      	movls	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d011      	beq.n	80018da <_Z12Check_Disarmv+0x86>
					armed = false;
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <_Z12Check_Disarmv+0x8c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
					EKF.armed = false;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <_Z12Check_Disarmv+0x9c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ca:	480a      	ldr	r0, [pc, #40]	; (80018f4 <_Z12Check_Disarmv+0xa0>)
 80018cc:	f002 ff2a 	bl	8004724 <HAL_GPIO_WritePin>
				if(HAL_GetTick() - disarm_timer > 3000) {
 80018d0:	e003      	b.n	80018da <_Z12Check_Disarmv+0x86>
				}

		}

		else {
			disarm_start = false;
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <_Z12Check_Disarmv+0x94>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80018d8:	e7ff      	b.n	80018da <_Z12Check_Disarmv+0x86>
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20001681 	.word	0x20001681
 80018e4:	20001618 	.word	0x20001618
 80018e8:	20001682 	.word	0x20001682
 80018ec:	20001678 	.word	0x20001678
 80018f0:	20000c50 	.word	0x20000c50
 80018f4:	40010800 	.word	0x40010800

080018f8 <_Z9TelemPackv>:

void TelemPack() {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	  telem_pack.attitude.roll  = state.angles[0];
 80018fc:	4b9c      	ldr	r3, [pc, #624]	; (8001b70 <_Z9TelemPackv+0x278>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a9c      	ldr	r2, [pc, #624]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001902:	6013      	str	r3, [r2, #0]
	  telem_pack.attitude.pitch = state.angles[1];
 8001904:	4b9a      	ldr	r3, [pc, #616]	; (8001b70 <_Z9TelemPackv+0x278>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	4a9a      	ldr	r2, [pc, #616]	; (8001b74 <_Z9TelemPackv+0x27c>)
 800190a:	6053      	str	r3, [r2, #4]
	  telem_pack.attitude.yaw   = state.angles[2];
 800190c:	4b98      	ldr	r3, [pc, #608]	; (8001b70 <_Z9TelemPackv+0x278>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	4a98      	ldr	r2, [pc, #608]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001912:	6093      	str	r3, [r2, #8]

	  telem_pack.pwm.w1 = controller_output[0];
 8001914:	4b98      	ldr	r3, [pc, #608]	; (8001b78 <_Z9TelemPackv+0x280>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	b29a      	uxth	r2, r3
 800191a:	4b96      	ldr	r3, [pc, #600]	; (8001b74 <_Z9TelemPackv+0x27c>)
 800191c:	861a      	strh	r2, [r3, #48]	; 0x30
	  telem_pack.pwm.w2 = controller_output[1];
 800191e:	4b96      	ldr	r3, [pc, #600]	; (8001b78 <_Z9TelemPackv+0x280>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	b29a      	uxth	r2, r3
 8001924:	4b93      	ldr	r3, [pc, #588]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001926:	865a      	strh	r2, [r3, #50]	; 0x32
	  telem_pack.pwm.w3 = controller_output[2];
 8001928:	4b93      	ldr	r3, [pc, #588]	; (8001b78 <_Z9TelemPackv+0x280>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	b29a      	uxth	r2, r3
 800192e:	4b91      	ldr	r3, [pc, #580]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001930:	869a      	strh	r2, [r3, #52]	; 0x34
	  telem_pack.pwm.w4 = controller_output[3];
 8001932:	4b91      	ldr	r3, [pc, #580]	; (8001b78 <_Z9TelemPackv+0x280>)
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	b29a      	uxth	r2, r3
 8001938:	4b8e      	ldr	r3, [pc, #568]	; (8001b74 <_Z9TelemPackv+0x27c>)
 800193a:	86da      	strh	r2, [r3, #54]	; 0x36

	  telem_pack.attitude_des.roll  = controller.roll_des;
 800193c:	4b8f      	ldr	r3, [pc, #572]	; (8001b7c <_Z9TelemPackv+0x284>)
 800193e:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8001942:	4a8c      	ldr	r2, [pc, #560]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001944:	60d3      	str	r3, [r2, #12]
	  telem_pack.attitude_des.pitch = controller.pitch_des;
 8001946:	4b8d      	ldr	r3, [pc, #564]	; (8001b7c <_Z9TelemPackv+0x284>)
 8001948:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800194c:	4a89      	ldr	r2, [pc, #548]	; (8001b74 <_Z9TelemPackv+0x27c>)
 800194e:	6113      	str	r3, [r2, #16]
	  telem_pack.attitude_des.yaw   = controller.yaw_rate_des;
 8001950:	4b8a      	ldr	r3, [pc, #552]	; (8001b7c <_Z9TelemPackv+0x284>)
 8001952:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8001956:	4a87      	ldr	r2, [pc, #540]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001958:	6153      	str	r3, [r2, #20]

	  telem_pack.attitude_rate.roll  = state.rates[0];
 800195a:	4b85      	ldr	r3, [pc, #532]	; (8001b70 <_Z9TelemPackv+0x278>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	4a85      	ldr	r2, [pc, #532]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001960:	6193      	str	r3, [r2, #24]
	  telem_pack.attitude_rate.pitch = state.rates[1];
 8001962:	4b83      	ldr	r3, [pc, #524]	; (8001b70 <_Z9TelemPackv+0x278>)
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	4a83      	ldr	r2, [pc, #524]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001968:	61d3      	str	r3, [r2, #28]
	  telem_pack.attitude_rate.yaw 	 = state.rates[2];
 800196a:	4b81      	ldr	r3, [pc, #516]	; (8001b70 <_Z9TelemPackv+0x278>)
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	4a81      	ldr	r2, [pc, #516]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001970:	6213      	str	r3, [r2, #32]

	  telem_pack.attitude_rate_des.roll =  state_des.rates[0];
 8001972:	4b83      	ldr	r3, [pc, #524]	; (8001b80 <_Z9TelemPackv+0x288>)
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	4a7f      	ldr	r2, [pc, #508]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001978:	6253      	str	r3, [r2, #36]	; 0x24
	  telem_pack.attitude_rate_des.pitch = state_des.rates[1];
 800197a:	4b81      	ldr	r3, [pc, #516]	; (8001b80 <_Z9TelemPackv+0x288>)
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	4a7d      	ldr	r2, [pc, #500]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001980:	6293      	str	r3, [r2, #40]	; 0x28

	  telem_pack.ekf.roll_acc  = EKF.roll_acc;
 8001982:	4b80      	ldr	r3, [pc, #512]	; (8001b84 <_Z9TelemPackv+0x28c>)
 8001984:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8001988:	4a7a      	ldr	r2, [pc, #488]	; (8001b74 <_Z9TelemPackv+0x27c>)
 800198a:	6393      	str	r3, [r2, #56]	; 0x38
	  telem_pack.ekf.pitch_acc = EKF.pitch_acc;
 800198c:	4b7d      	ldr	r3, [pc, #500]	; (8001b84 <_Z9TelemPackv+0x28c>)
 800198e:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8001992:	4a78      	ldr	r2, [pc, #480]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001994:	63d3      	str	r3, [r2, #60]	; 0x3c
	  telem_pack.ekf.yaw_acc   = yaw_unwrapped;
 8001996:	4b7c      	ldr	r3, [pc, #496]	; (8001b88 <_Z9TelemPackv+0x290>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a76      	ldr	r2, [pc, #472]	; (8001b74 <_Z9TelemPackv+0x27c>)
 800199c:	6413      	str	r3, [r2, #64]	; 0x40

	  telem_pack.ekf.roll_gyro  = EKF.gyro[0];
 800199e:	4b79      	ldr	r3, [pc, #484]	; (8001b84 <_Z9TelemPackv+0x28c>)
 80019a0:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80019a4:	4a73      	ldr	r2, [pc, #460]	; (8001b74 <_Z9TelemPackv+0x27c>)
 80019a6:	6453      	str	r3, [r2, #68]	; 0x44
	  telem_pack.ekf.pitch_gyro = EKF.gyro[1];
 80019a8:	4b76      	ldr	r3, [pc, #472]	; (8001b84 <_Z9TelemPackv+0x28c>)
 80019aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019ae:	4a71      	ldr	r2, [pc, #452]	; (8001b74 <_Z9TelemPackv+0x27c>)
 80019b0:	6493      	str	r3, [r2, #72]	; 0x48
	  telem_pack.ekf.yaw_gyro   = EKF.gyro[2];
 80019b2:	4b74      	ldr	r3, [pc, #464]	; (8001b84 <_Z9TelemPackv+0x28c>)
 80019b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80019b8:	4a6e      	ldr	r2, [pc, #440]	; (8001b74 <_Z9TelemPackv+0x27c>)
 80019ba:	64d3      	str	r3, [r2, #76]	; 0x4c

	  telem_pack.ekf.roll_comp =  yaw_comp;
 80019bc:	4b73      	ldr	r3, [pc, #460]	; (8001b8c <_Z9TelemPackv+0x294>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a6c      	ldr	r2, [pc, #432]	; (8001b74 <_Z9TelemPackv+0x27c>)
 80019c2:	6513      	str	r3, [r2, #80]	; 0x50
	  telem_pack.ekf.pitch_comp = EKF.pitch_comp;
 80019c4:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <_Z9TelemPackv+0x28c>)
 80019c6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80019ca:	4a6a      	ldr	r2, [pc, #424]	; (8001b74 <_Z9TelemPackv+0x27c>)
 80019cc:	6553      	str	r3, [r2, #84]	; 0x54

	  telem_pack.ekf.roll_ekf =  EKF.roll_ekf;
 80019ce:	4b6d      	ldr	r3, [pc, #436]	; (8001b84 <_Z9TelemPackv+0x28c>)
 80019d0:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 80019d4:	4a67      	ldr	r2, [pc, #412]	; (8001b74 <_Z9TelemPackv+0x27c>)
 80019d6:	6593      	str	r3, [r2, #88]	; 0x58
	  telem_pack.ekf.pitch_ekf = EKF.pitch_ekf;
 80019d8:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <_Z9TelemPackv+0x28c>)
 80019da:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80019de:	4a65      	ldr	r2, [pc, #404]	; (8001b74 <_Z9TelemPackv+0x27c>)
 80019e0:	65d3      	str	r3, [r2, #92]	; 0x5c

	  telem_pack.pid_roll.P = controller.pid_roll.P;
 80019e2:	4b66      	ldr	r3, [pc, #408]	; (8001b7c <_Z9TelemPackv+0x284>)
 80019e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80019e8:	4a62      	ldr	r2, [pc, #392]	; (8001b74 <_Z9TelemPackv+0x27c>)
 80019ea:	6613      	str	r3, [r2, #96]	; 0x60
	  telem_pack.pid_roll.I = controller.pid_roll.I;
 80019ec:	4b63      	ldr	r3, [pc, #396]	; (8001b7c <_Z9TelemPackv+0x284>)
 80019ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80019f2:	4a60      	ldr	r2, [pc, #384]	; (8001b74 <_Z9TelemPackv+0x27c>)
 80019f4:	6653      	str	r3, [r2, #100]	; 0x64
	  telem_pack.pid_roll.D = controller.pid_roll.D;
 80019f6:	4b61      	ldr	r3, [pc, #388]	; (8001b7c <_Z9TelemPackv+0x284>)
 80019f8:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 80019fc:	4a5d      	ldr	r2, [pc, #372]	; (8001b74 <_Z9TelemPackv+0x27c>)
 80019fe:	6693      	str	r3, [r2, #104]	; 0x68
	  telem_pack.pid_roll.pd_roll_sat_buf = controller.pid_roll.pd_roll_sat_buf;
 8001a00:	4b5e      	ldr	r3, [pc, #376]	; (8001b7c <_Z9TelemPackv+0x284>)
 8001a02:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 8001a06:	4a5b      	ldr	r2, [pc, #364]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001a08:	66d3      	str	r3, [r2, #108]	; 0x6c

	  telem_pack.pid_pitch.P = controller.pid_pitch.P;
 8001a0a:	4b5c      	ldr	r3, [pc, #368]	; (8001b7c <_Z9TelemPackv+0x284>)
 8001a0c:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8001a10:	4a58      	ldr	r2, [pc, #352]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001a12:	6713      	str	r3, [r2, #112]	; 0x70
	  telem_pack.pid_pitch.I = controller.pid_pitch.I;
 8001a14:	4b59      	ldr	r3, [pc, #356]	; (8001b7c <_Z9TelemPackv+0x284>)
 8001a16:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8001a1a:	4a56      	ldr	r2, [pc, #344]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001a1c:	6753      	str	r3, [r2, #116]	; 0x74
	  telem_pack.pid_pitch.D = controller.pid_pitch.D;
 8001a1e:	4b57      	ldr	r3, [pc, #348]	; (8001b7c <_Z9TelemPackv+0x284>)
 8001a20:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8001a24:	4a53      	ldr	r2, [pc, #332]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001a26:	6793      	str	r3, [r2, #120]	; 0x78
	  telem_pack.pid_pitch.pd_roll_sat_buf = controller.pid_pitch.pd_roll_sat_buf;
 8001a28:	4b54      	ldr	r3, [pc, #336]	; (8001b7c <_Z9TelemPackv+0x284>)
 8001a2a:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 8001a2e:	4a51      	ldr	r2, [pc, #324]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001a30:	67d3      	str	r3, [r2, #124]	; 0x7c

	  telem_pack.p_yaw.P = controller.pid_yaw.P;
 8001a32:	4b52      	ldr	r3, [pc, #328]	; (8001b7c <_Z9TelemPackv+0x284>)
 8001a34:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001a38:	4b4e      	ldr	r3, [pc, #312]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001a3a:	f8c3 210d 	str.w	r2, [r3, #269]	; 0x10d
	  telem_pack.p_yaw.D = controller.pid_yaw.D;
 8001a3e:	4b4f      	ldr	r3, [pc, #316]	; (8001b7c <_Z9TelemPackv+0x284>)
 8001a40:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001a44:	4b4b      	ldr	r3, [pc, #300]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001a46:	f8c3 2115 	str.w	r2, [r3, #277]	; 0x115
	  telem_pack.p_yaw.I = controller.pid_yaw.I;
 8001a4a:	4b4c      	ldr	r3, [pc, #304]	; (8001b7c <_Z9TelemPackv+0x284>)
 8001a4c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001a50:	4b48      	ldr	r3, [pc, #288]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001a52:	f8c3 2111 	str.w	r2, [r3, #273]	; 0x111
	  telem_pack.p_yaw.pd_roll_sat_buf = controller.pid_yaw.pd_roll_sat_buf;
 8001a56:	4b49      	ldr	r3, [pc, #292]	; (8001b7c <_Z9TelemPackv+0x284>)
 8001a58:	f8d3 23f4 	ldr.w	r2, [r3, #1012]	; 0x3f4
 8001a5c:	4b45      	ldr	r3, [pc, #276]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001a5e:	f8c3 2119 	str.w	r2, [r3, #281]	; 0x119

	  telem_pack.sonar_alt = EKF.roll_bias;
 8001a62:	4b48      	ldr	r3, [pc, #288]	; (8001b84 <_Z9TelemPackv+0x28c>)
 8001a64:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001a68:	4a42      	ldr	r2, [pc, #264]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001a6a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	  telem_pack.velocity_body.z = controller.angle_ff_roll;
 8001a6e:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <_Z9TelemPackv+0x284>)
 8001a70:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8001a74:	4a3f      	ldr	r2, [pc, #252]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001a76:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	  telem_pack.position_body.z = controller.angle_ff_pitch;
 8001a7a:	4b40      	ldr	r3, [pc, #256]	; (8001b7c <_Z9TelemPackv+0x284>)
 8001a7c:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8001a80:	4a3c      	ldr	r2, [pc, #240]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	  telem_pack.cam_data.detected = cam_data_20.detected;
 8001a86:	4b42      	ldr	r3, [pc, #264]	; (8001b90 <_Z9TelemPackv+0x298>)
 8001a88:	781a      	ldrb	r2, [r3, #0]
 8001a8a:	4b3a      	ldr	r3, [pc, #232]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001a8c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	  telem_pack.cam_data.x = cam_data_20.x;
 8001a90:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <_Z9TelemPackv+0x298>)
 8001a92:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001a9a:	f8a3 20a5 	strh.w	r2, [r3, #165]	; 0xa5
	  telem_pack.cam_data.y = cam_data_20.y;
 8001a9e:	4b3c      	ldr	r3, [pc, #240]	; (8001b90 <_Z9TelemPackv+0x298>)
 8001aa0:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8001aa4:	b21a      	sxth	r2, r3
 8001aa6:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001aa8:	f8a3 20a7 	strh.w	r2, [r3, #167]	; 0xa7
	  telem_pack.cam_data.z_cam = cam_data_20.z_cam;
 8001aac:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <_Z9TelemPackv+0x298>)
 8001aae:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001ab6:	f8a3 20a9 	strh.w	r2, [r3, #169]	; 0xa9
//	  telem_pack.position_body.x = EKF.x;
//	  telem_pack.velocity_body.x = EKF.vx;
//	  telem_pack.position_body.y = EKF.y;
//	  telem_pack.velocity_body.y = EKF.vy;

	  telem_pack.alt_thr = controller.alt_thr;
 8001aba:	4b30      	ldr	r3, [pc, #192]	; (8001b7c <_Z9TelemPackv+0x284>)
 8001abc:	f8d3 3648 	ldr.w	r3, [r3, #1608]	; 0x648
 8001ac0:	4a2c      	ldr	r2, [pc, #176]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001ac2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	  telem_pack.time_millis = HAL_GetTick();
 8001ac6:	f002 f909 	bl	8003cdc <HAL_GetTick>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a29      	ldr	r2, [pc, #164]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001ace:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

	  telem_pack.acc.x = accXc;
 8001ad2:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <_Z9TelemPackv+0x29c>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001ad8:	f8c3 20ad 	str.w	r2, [r3, #173]	; 0xad
	  telem_pack.acc.y = accYc;
 8001adc:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <_Z9TelemPackv+0x2a0>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001ae2:	f8c3 20b1 	str.w	r2, [r3, #177]	; 0xb1
	  telem_pack.acc.z = accZm;
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <_Z9TelemPackv+0x2a4>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001aec:	f8c3 20b5 	str.w	r2, [r3, #181]	; 0xb5

	  telem_pack.mag.x = MAG_X_CALIB;
 8001af0:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <_Z9TelemPackv+0x2a8>)
 8001af2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001af6:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001af8:	f8a3 20b9 	strh.w	r2, [r3, #185]	; 0xb9
	  telem_pack.mag.y = MAG_Y_CALIB;
 8001afc:	4b29      	ldr	r3, [pc, #164]	; (8001ba4 <_Z9TelemPackv+0x2ac>)
 8001afe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b02:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001b04:	f8a3 20bb 	strh.w	r2, [r3, #187]	; 0xbb
	  telem_pack.mag.z = MAG_Z_CALIB;
 8001b08:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <_Z9TelemPackv+0x2b0>)
 8001b0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b0e:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001b10:	f8a3 20bd 	strh.w	r2, [r3, #189]	; 0xbd

	  telem_pack.gps.vel_body.x = EKF.vgpsx;
	  telem_pack.gps.vel_body.y = EKF.vgpsy;
	   */

	  telem_pack.ch.ch1 = (uint16_t)ch[0];
 8001b14:	4b25      	ldr	r3, [pc, #148]	; (8001bac <_Z9TelemPackv+0x2b4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001b1c:	f8a3 20ef 	strh.w	r2, [r3, #239]	; 0xef
	  telem_pack.ch.ch2 = (uint16_t)ch[1];
 8001b20:	4b22      	ldr	r3, [pc, #136]	; (8001bac <_Z9TelemPackv+0x2b4>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001b28:	f8a3 20f1 	strh.w	r2, [r3, #241]	; 0xf1
	  telem_pack.ch.ch3 = (uint16_t)ch[2];
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <_Z9TelemPackv+0x2b4>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001b34:	f8a3 20f3 	strh.w	r2, [r3, #243]	; 0xf3
	  telem_pack.ch.ch4 = (uint16_t)ch[3];
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <_Z9TelemPackv+0x2b4>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001b40:	f8a3 20f5 	strh.w	r2, [r3, #245]	; 0xf5
	  telem_pack.ch.ch5 = (uint16_t)ch[4];
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <_Z9TelemPackv+0x2b4>)
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001b4c:	f8a3 20f7 	strh.w	r2, [r3, #247]	; 0xf7
	  telem_pack.ch.ch6 = (uint16_t)ch[5];
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <_Z9TelemPackv+0x2b4>)
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001b58:	f8a3 20f9 	strh.w	r2, [r3, #249]	; 0xf9
	  telem_pack.ch.ch7 = (uint16_t)ch[6];
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <_Z9TelemPackv+0x2b4>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <_Z9TelemPackv+0x27c>)
 8001b64:	f8a3 20fb 	strh.w	r2, [r3, #251]	; 0xfb
	  telem_pack.ch.ch8 = (uint16_t)ch[7];
 8001b68:	4b10      	ldr	r3, [pc, #64]	; (8001bac <_Z9TelemPackv+0x2b4>)
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	e01f      	b.n	8001bb0 <_Z9TelemPackv+0x2b8>
 8001b70:	200008e0 	.word	0x200008e0
 8001b74:	20000904 	.word	0x20000904
 8001b78:	200015e8 	.word	0x200015e8
 8001b7c:	20000f98 	.word	0x20000f98
 8001b80:	200008bc 	.word	0x200008bc
 8001b84:	20000c50 	.word	0x20000c50
 8001b88:	20001710 	.word	0x20001710
 8001b8c:	2000170c 	.word	0x2000170c
 8001b90:	200016a8 	.word	0x200016a8
 8001b94:	200008b0 	.word	0x200008b0
 8001b98:	200008b4 	.word	0x200008b4
 8001b9c:	200008b8 	.word	0x200008b8
 8001ba0:	200016b2 	.word	0x200016b2
 8001ba4:	200016b4 	.word	0x200016b4
 8001ba8:	200016b6 	.word	0x200016b6
 8001bac:	20001618 	.word	0x20001618
 8001bb0:	4b3c      	ldr	r3, [pc, #240]	; (8001ca4 <_Z9TelemPackv+0x3ac>)
 8001bb2:	f8a3 20fd 	strh.w	r2, [r3, #253]	; 0xfd
	  telem_pack.ch.ch9 = (uint16_t)ch[8];
 8001bb6:	4b3c      	ldr	r3, [pc, #240]	; (8001ca8 <_Z9TelemPackv+0x3b0>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <_Z9TelemPackv+0x3ac>)
 8001bbe:	f8a3 20ff 	strh.w	r2, [r3, #255]	; 0xff
	  telem_pack.ch.ch10 = (uint16_t)ch[9];
 8001bc2:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <_Z9TelemPackv+0x3b0>)
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	4b36      	ldr	r3, [pc, #216]	; (8001ca4 <_Z9TelemPackv+0x3ac>)
 8001bca:	f8a3 2101 	strh.w	r2, [r3, #257]	; 0x101
	  telem_pack.ch.ch11 = (uint16_t)ch[10];
 8001bce:	4b36      	ldr	r3, [pc, #216]	; (8001ca8 <_Z9TelemPackv+0x3b0>)
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	4b33      	ldr	r3, [pc, #204]	; (8001ca4 <_Z9TelemPackv+0x3ac>)
 8001bd6:	f8a3 2103 	strh.w	r2, [r3, #259]	; 0x103

	  telem_pack.pwm2.w1 = controller_output_2[0];
 8001bda:	4b34      	ldr	r3, [pc, #208]	; (8001cac <_Z9TelemPackv+0x3b4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <_Z9TelemPackv+0x3ac>)
 8001be2:	f8a3 2105 	strh.w	r2, [r3, #261]	; 0x105
	  telem_pack.pwm2.w2 = controller_output_2[1];
 8001be6:	4b31      	ldr	r3, [pc, #196]	; (8001cac <_Z9TelemPackv+0x3b4>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <_Z9TelemPackv+0x3ac>)
 8001bee:	f8a3 2107 	strh.w	r2, [r3, #263]	; 0x107
	  telem_pack.pwm2.w3 = controller_output_2[2];
 8001bf2:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <_Z9TelemPackv+0x3b4>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <_Z9TelemPackv+0x3ac>)
 8001bfa:	f8a3 2109 	strh.w	r2, [r3, #265]	; 0x109
	  telem_pack.pwm2.w4 = controller_output_2[3];
 8001bfe:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <_Z9TelemPackv+0x3b4>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <_Z9TelemPackv+0x3ac>)
 8001c06:	f8a3 210b 	strh.w	r2, [r3, #267]	; 0x10b
//	  telem_pack.S_yaw.S23 = EKF.S23_yaw;
//	  telem_pack.S_yaw.S31 = EKF.S31_yaw;
//	  telem_pack.S_yaw.S32 = EKF.S32_yaw;
//	  telem_pack.S_yaw.S33 = EKF.S33_yaw;

	  telem_pack.bno_attitude.roll  = bno_dat.x;
 8001c0a:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <_Z9TelemPackv+0x3b8>)
 8001c0c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	f7fe fc58 	bl	80004c8 <__aeabi_d2f>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	4b22      	ldr	r3, [pc, #136]	; (8001ca4 <_Z9TelemPackv+0x3ac>)
 8001c1c:	f8c3 2189 	str.w	r2, [r3, #393]	; 0x189
	  telem_pack.bno_attitude.pitch = bno_dat.y;
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <_Z9TelemPackv+0x3b8>)
 8001c22:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f7fe fc4d 	bl	80004c8 <__aeabi_d2f>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <_Z9TelemPackv+0x3ac>)
 8001c32:	f8c3 218d 	str.w	r2, [r3, #397]	; 0x18d
	  telem_pack.bno_attitude.yaw   = bno_dat.z;
 8001c36:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <_Z9TelemPackv+0x3b8>)
 8001c38:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f7fe fc42 	bl	80004c8 <__aeabi_d2f>
 8001c44:	4602      	mov	r2, r0
 8001c46:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <_Z9TelemPackv+0x3ac>)
 8001c48:	f8c3 2191 	str.w	r2, [r3, #401]	; 0x191

	  telem_pack.bno_rates.roll  = bno_gyro.x;
 8001c4c:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <_Z9TelemPackv+0x3bc>)
 8001c4e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	f7fe fc37 	bl	80004c8 <__aeabi_d2f>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <_Z9TelemPackv+0x3ac>)
 8001c5e:	f8c3 2195 	str.w	r2, [r3, #405]	; 0x195
	  telem_pack.bno_rates.pitch = bno_gyro.y;
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <_Z9TelemPackv+0x3bc>)
 8001c64:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f7fe fc2c 	bl	80004c8 <__aeabi_d2f>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <_Z9TelemPackv+0x3ac>)
 8001c74:	f8c3 2199 	str.w	r2, [r3, #409]	; 0x199
	  telem_pack.bno_rates.yaw   = bno_gyro.z;
 8001c78:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <_Z9TelemPackv+0x3bc>)
 8001c7a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	f7fe fc21 	bl	80004c8 <__aeabi_d2f>
 8001c86:	4602      	mov	r2, r0
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <_Z9TelemPackv+0x3ac>)
 8001c8a:	f8c3 219d 	str.w	r2, [r3, #413]	; 0x19d

	  memcpy(buf,&telem_pack,sizeof(telem_pack));
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <_Z9TelemPackv+0x3c0>)
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <_Z9TelemPackv+0x3ac>)
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	f240 13a1 	movw	r3, #417	; 0x1a1
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	f007 fbee 	bl	800947c <memcpy>
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000904 	.word	0x20000904
 8001ca8:	20001618 	.word	0x20001618
 8001cac:	200015f8 	.word	0x200015f8
 8001cb0:	200016c8 	.word	0x200016c8
 8001cb4:	200016e8 	.word	0x200016e8
 8001cb8:	20000aa8 	.word	0x20000aa8

08001cbc <_Z7pwm2angt>:

      return yaw_warped;
}


float pwm2ang(unsigned short int pwm) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	80fb      	strh	r3, [r7, #6]
	int dead_zone = 5;
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	61bb      	str	r3, [r7, #24]

	int in_min  = 1000;
 8001cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cce:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8001cd0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001cd4:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	*/
	int out_min = -20;
 8001cd6:	f06f 0313 	mvn.w	r3, #19
 8001cda:	60fb      	str	r3, [r7, #12]
	int out_max  = 20;
 8001cdc:	2314      	movs	r3, #20
 8001cde:	60bb      	str	r3, [r7, #8]
	unsigned short int pwm_out;

	if(pwm > 1500 - dead_zone && pwm < 1500 + dead_zone) {
 8001ce0:	88fa      	ldrh	r2, [r7, #6]
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8001ce8:	3304      	adds	r3, #4
 8001cea:	429a      	cmp	r2, r3
 8001cec:	dd09      	ble.n	8001d02 <_Z7pwm2angt+0x46>
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	db03      	blt.n	8001d02 <_Z7pwm2angt+0x46>
		pwm_out = 1500;
 8001cfa:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001cfe:	83fb      	strh	r3, [r7, #30]
 8001d00:	e001      	b.n	8001d06 <_Z7pwm2angt+0x4a>
	}

	else {
		pwm_out = pwm;
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	83fb      	strh	r3, [r7, #30]
	}

	return (pwm_out - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001d06:	8bfa      	ldrh	r2, [r7, #30]
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	1a8a      	subs	r2, r1, r2
 8001d12:	fb02 f203 	mul.w	r2, r2, r3
 8001d16:	6939      	ldr	r1, [r7, #16]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	1acb      	subs	r3, r1, r3
 8001d1c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fcd9 	bl	80006dc <__aeabi_i2f>
 8001d2a:	4603      	mov	r3, r0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3720      	adds	r7, #32
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_Z8pwm2ratet>:

float pwm2rate(unsigned short int pwm) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	80fb      	strh	r3, [r7, #6]

	int in_min  = 1000;
 8001d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d42:	617b      	str	r3, [r7, #20]
	int in_max  = 2000;
 8001d44:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001d48:	613b      	str	r3, [r7, #16]

	/*
	int in_min  = 1160;
	int in_max  = 1850;
	 */
	int out_min = -100;
 8001d4a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001d4e:	60fb      	str	r3, [r7, #12]
	int out_max  = 100;
 8001d50:	2364      	movs	r3, #100	; 0x64
 8001d52:	60bb      	str	r3, [r7, #8]

	return -1 * ((pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	68b9      	ldr	r1, [r7, #8]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	1a8a      	subs	r2, r1, r2
 8001d60:	fb02 f203 	mul.w	r2, r2, r3
 8001d64:	6939      	ldr	r1, [r7, #16]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	1acb      	subs	r3, r1, r3
 8001d6a:	fb92 f2f3 	sdiv	r2, r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4413      	add	r3, r2
 8001d72:	425b      	negs	r3, r3
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fcb1 	bl	80006dc <__aeabi_i2f>
 8001d7a:	4603      	mov	r3, r0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <_Z6PWMYazv>:
float square(float x) {
	float y = x*x;
	return y;
}

void PWMYaz() {
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

#endif

#ifdef UAV2

	  if(ch[EMERGENCY_CH-1] < 1500) {
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <_Z6PWMYazv+0x6c>)
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	f240 52db 	movw	r2, #1499	; 0x5db
 8001d90:	4293      	cmp	r3, r2
 8001d92:	dc14      	bgt.n	8001dbe <_Z6PWMYazv+0x3a>

			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,controller_output_2[0]);
 8001d94:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <_Z6PWMYazv+0x70>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <_Z6PWMYazv+0x74>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,controller_output_2[1]);
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <_Z6PWMYazv+0x70>)
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <_Z6PWMYazv+0x74>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,controller_output_2[2]);
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <_Z6PWMYazv+0x70>)
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <_Z6PWMYazv+0x74>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,controller_output_2[3]);
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <_Z6PWMYazv+0x70>)
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <_Z6PWMYazv+0x74>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
	  }
#endif

}
 8001dbc:	e013      	b.n	8001de6 <_Z6PWMYazv+0x62>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <_Z6PWMYazv+0x74>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dc6:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <_Z6PWMYazv+0x74>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dd0:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <_Z6PWMYazv+0x74>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dda:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <_Z6PWMYazv+0x74>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001de4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20001618 	.word	0x20001618
 8001df4:	200015f8 	.word	0x200015f8
 8001df8:	20001920 	.word	0x20001920

08001dfc <_Z11MotorBaslatv>:
	} //Haberleşmeyi durdur.
	GyroXh=GyroXh/2000; //Son okunan değeri 2000'e böl.
	return GyroXh;
}

void MotorBaslat(void) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <_Z11MotorBaslatv+0x38>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e08:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <_Z11MotorBaslatv+0x38>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e12:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <_Z11MotorBaslatv+0x38>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e1c:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <_Z11MotorBaslatv+0x38>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40
	 // Delay(600);
	HAL_Delay(1000);
 8001e28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e2c:	f001 ff60 	bl	8003cf0 <HAL_Delay>
}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20001920 	.word	0x20001920

08001e38 <HAL_TIM_PeriodElapsedCallback>:
		home = true;
}
*/

//Ana Kontrolcü döngüsü
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

	if(htim == &htim2) {
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a26      	ldr	r2, [pc, #152]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d145      	bne.n	8001ed4 <HAL_TIM_PeriodElapsedCallback+0x9c>
		//1.25 ms || 800 Hz
		Check_Arm();
 8001e48:	f7ff fca0 	bl	800178c <_Z9Check_Armv>
		Check_Disarm();
 8001e4c:	f7ff fd02 	bl	8001854 <_Z12Check_Disarmv>

		set_ucounter(SONAR_CLOCK_RATE);
 8001e50:	2014      	movs	r0, #20
 8001e52:	f7ff f85f 	bl	8000f14 <set_ucounter>
		set_b_counter(12);
 8001e56:	200c      	movs	r0, #12
 8001e58:	f7fe ff00 	bl	8000c5c <set_b_counter>

		controller_counter++;
 8001e5c:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	3301      	adds	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001e66:	801a      	strh	r2, [r3, #0]
		camera_counter++;
 8001e68:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001e72:	801a      	strh	r2, [r3, #0]
		mag_counter++;
 8001e74:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001e7e:	801a      	strh	r2, [r3, #0]


		}
#endif

		if(controller_counter == CONTROLLER_RATE) { //5 ms || 200 Hz
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d125      	bne.n	8001ed4 <HAL_TIM_PeriodElapsedCallback+0x9c>
			_controller_timer = controller_timer;
 8001e88:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a18      	ldr	r2, [pc, #96]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001e8e:	6013      	str	r3, [r2, #0]
			controller_timer = HAL_GetTick();
 8001e90:	f001 ff24 	bl	8003cdc <HAL_GetTick>
 8001e94:	4603      	mov	r3, r0
 8001e96:	461a      	mov	r2, r3
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001e9a:	601a      	str	r2, [r3, #0]
			controller_timer_dif = controller_timer-_controller_timer;
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	4a13      	ldr	r2, [pc, #76]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001ea8:	6013      	str	r3, [r2, #0]
			controller_counter = 0;
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	801a      	strh	r2, [r3, #0]
			  controller_output_2[2] = 1000;
			  controller_output_2[3] = 1000;
		  }
		#endif

		  state_des.rates[0] = controller.roll_rate_des;
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001eb2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001eb6:	4a11      	ldr	r2, [pc, #68]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001eb8:	60d3      	str	r3, [r2, #12]
		  state_des.rates[1] = controller.pitch_rate_des;
 8001eba:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001ebc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001ec0:	4a0e      	ldr	r2, [pc, #56]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001ec2:	6113      	str	r3, [r2, #16]


		  TelemPack();
 8001ec4:	f7ff fd18 	bl	80018f8 <_Z9TelemPackv>
		  CheckFailsafe();
 8001ec8:	f7ff fc02 	bl	80016d0 <_Z13CheckFailsafev>
		  CheckSwarm();
 8001ecc:	f7ff fbc0 	bl	8001650 <_Z10CheckSwarmv>
		  PWMYaz();
 8001ed0:	f7ff ff58 	bl	8001d84 <_Z6PWMYazv>
		  //SwitchMag();

		  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
		}
		}
	}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20001968 	.word	0x20001968
 8001ee0:	20001684 	.word	0x20001684
 8001ee4:	20001686 	.word	0x20001686
 8001ee8:	20001688 	.word	0x20001688
 8001eec:	20001690 	.word	0x20001690
 8001ef0:	20001694 	.word	0x20001694
 8001ef4:	20001698 	.word	0x20001698
 8001ef8:	20000f98 	.word	0x20000f98
 8001efc:	200008bc 	.word	0x200008bc

08001f00 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)

{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

 if(htim == &htim3) {
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a57      	ldr	r2, [pc, #348]	; (8002068 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	f040 80a7 	bne.w	8002060 <HAL_TIM_IC_CaptureCallback+0x160>


	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	7f1b      	ldrb	r3, [r3, #28]
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	f040 80a2 	bne.w	8002060 <HAL_TIM_IC_CaptureCallback+0x160>
	{
				IC_Val1 = IC_Val2;
 8001f1c:	4b53      	ldr	r3, [pc, #332]	; (800206c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a53      	ldr	r2, [pc, #332]	; (8002070 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001f22:	6013      	str	r3, [r2, #0]
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8001f24:	2108      	movs	r1, #8
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f005 fbf4 	bl	8007714 <HAL_TIM_ReadCapturedValue>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4b4e      	ldr	r3, [pc, #312]	; (800206c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001f32:	601a      	str	r2, [r3, #0]
				Diff = IC_Val2-IC_Val1;
 8001f34:	4b4d      	ldr	r3, [pc, #308]	; (800206c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b4d      	ldr	r3, [pc, #308]	; (8002070 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	4a4d      	ldr	r2, [pc, #308]	; (8002074 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001f40:	6013      	str	r3, [r2, #0]
				if(Diff < 0) {
 8001f42:	4b4c      	ldr	r3, [pc, #304]	; (8002074 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	0fdb      	lsrs	r3, r3, #31
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d006      	beq.n	8001f5c <HAL_TIM_IC_CaptureCallback+0x5c>
					Diff+=65535;
 8001f4e:	4b49      	ldr	r3, [pc, #292]	; (8002074 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001f56:	33ff      	adds	r3, #255	; 0xff
 8001f58:	4a46      	ldr	r2, [pc, #280]	; (8002074 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001f5a:	6013      	str	r3, [r2, #0]

				}
				//printf("Diff: %d\n",Diff);
					if(Diff >= 800 && Diff <= 2000) {
 8001f5c:	4b45      	ldr	r3, [pc, #276]	; (8002074 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001f64:	db06      	blt.n	8001f74 <HAL_TIM_IC_CaptureCallback+0x74>
 8001f66:	4b43      	ldr	r3, [pc, #268]	; (8002074 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f6e:	dc01      	bgt.n	8001f74 <HAL_TIM_IC_CaptureCallback+0x74>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <HAL_TIM_IC_CaptureCallback+0x76>
 8001f74:	2300      	movs	r3, #0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d021      	beq.n	8001fbe <HAL_TIM_IC_CaptureCallback+0xbe>
						ch[i] = Diff;
						ch_count++;
					#endif

					#ifdef UAV2
						if(i == EMERGENCY_CH-1) {
 8001f7a:	4b3f      	ldr	r3, [pc, #252]	; (8002078 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d011      	beq.n	8001fb2 <HAL_TIM_IC_CaptureCallback+0xb2>
							ch_[i] = ch[i];
 8001f8e:	4b3a      	ldr	r3, [pc, #232]	; (8002078 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b38      	ldr	r3, [pc, #224]	; (8002078 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	b21b      	sxth	r3, r3
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4b37      	ldr	r3, [pc, #220]	; (800207c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa4:	4a36      	ldr	r2, [pc, #216]	; (8002080 <HAL_TIM_IC_CaptureCallback+0x180>)
 8001fa6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							ch[EMERGENCY_CH-1] = Diff;
 8001faa:	4b32      	ldr	r3, [pc, #200]	; (8002074 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a33      	ldr	r2, [pc, #204]	; (800207c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001fb0:	6113      	str	r3, [r2, #16]
						}

						ch_count++;
 8001fb2:	4b34      	ldr	r3, [pc, #208]	; (8002084 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	4a32      	ldr	r2, [pc, #200]	; (8002084 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	e015      	b.n	8001fea <HAL_TIM_IC_CaptureCallback+0xea>
					#endif

					}

					else if(Diff > CH0) {
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	bfcc      	ite	gt
 8001fca:	2301      	movgt	r3, #1
 8001fcc:	2300      	movle	r3, #0
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00a      	beq.n	8001fea <HAL_TIM_IC_CaptureCallback+0xea>
						//ch[CH_NUM] = ch[i];
						i = -1;
 8001fd4:	4b28      	ldr	r3, [pc, #160]	; (8002078 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001fd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fda:	801a      	strh	r2, [r3, #0]
						ch[CH_NUM] = Diff;
 8001fdc:	4b25      	ldr	r3, [pc, #148]	; (8002074 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a26      	ldr	r2, [pc, #152]	; (800207c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001fe2:	6293      	str	r3, [r2, #40]	; 0x28
						sync = 1;
 8001fe4:	4b28      	ldr	r3, [pc, #160]	; (8002088 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	801a      	strh	r2, [r3, #0]
					}




				state_des.angles[0] =  pwm2ang(ch[0]);
 8001fea:	4b24      	ldr	r3, [pc, #144]	; (800207c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fe63 	bl	8001cbc <_Z7pwm2angt>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4a24      	ldr	r2, [pc, #144]	; (800208c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001ffa:	6013      	str	r3, [r2, #0]
				state_des.angles[1] =  pwm2ang(ch[1]);
 8001ffc:	4b1f      	ldr	r3, [pc, #124]	; (800207c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	b29b      	uxth	r3, r3
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fe5a 	bl	8001cbc <_Z7pwm2angt>
 8002008:	4603      	mov	r3, r0
 800200a:	4a20      	ldr	r2, [pc, #128]	; (800208c <HAL_TIM_IC_CaptureCallback+0x18c>)
 800200c:	6053      	str	r3, [r2, #4]
				state_des.angles[2] =  0;
 800200e:	4b1f      	ldr	r3, [pc, #124]	; (800208c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
				state_des.rates[2] = pwm2rate(ch[3]);
 8002016:	4b19      	ldr	r3, [pc, #100]	; (800207c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	b29b      	uxth	r3, r3
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fe89 	bl	8001d34 <_Z8pwm2ratet>
 8002022:	4603      	mov	r3, r0
 8002024:	4a19      	ldr	r2, [pc, #100]	; (800208c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8002026:	6153      	str	r3, [r2, #20]

				i++;
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <HAL_TIM_IC_CaptureCallback+0x178>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	b21b      	sxth	r3, r3
 800202e:	b29b      	uxth	r3, r3
 8002030:	3301      	adds	r3, #1
 8002032:	b29b      	uxth	r3, r3
 8002034:	b21a      	sxth	r2, r3
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <HAL_TIM_IC_CaptureCallback+0x178>)
 8002038:	801a      	strh	r2, [r3, #0]
				i = i % (CH_NUM+1);
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_TIM_IC_CaptureCallback+0x178>)
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	b21b      	sxth	r3, r3
 8002040:	4619      	mov	r1, r3
 8002042:	4b13      	ldr	r3, [pc, #76]	; (8002090 <HAL_TIM_IC_CaptureCallback+0x190>)
 8002044:	fb83 2301 	smull	r2, r3, r3, r1
 8002048:	105a      	asrs	r2, r3, #1
 800204a:	17cb      	asrs	r3, r1, #31
 800204c:	1ad2      	subs	r2, r2, r3
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	1aca      	subs	r2, r1, r3
 800205a:	b212      	sxth	r2, r2
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_TIM_IC_CaptureCallback+0x178>)
 800205e:	801a      	strh	r2, [r3, #0]
			//	__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);


	 }
	}
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	200018d8 	.word	0x200018d8
 800206c:	20001608 	.word	0x20001608
 8002070:	2000160c 	.word	0x2000160c
 8002074:	20001610 	.word	0x20001610
 8002078:	20001614 	.word	0x20001614
 800207c:	20001618 	.word	0x20001618
 8002080:	20001644 	.word	0x20001644
 8002084:	2000168c 	.word	0x2000168c
 8002088:	20001670 	.word	0x20001670
 800208c:	200008bc 	.word	0x200008bc
 8002090:	2e8ba2e9 	.word	0x2e8ba2e9

08002094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002098:	b672      	cpsid	i
}
 800209a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800209c:	e7fe      	b.n	800209c <Error_Handler+0x8>
	...

080020a0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d10a      	bne.n	80020c6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d105      	bne.n	80020c6 <_Z41__static_initialization_and_destruction_0ii+0x26>
Kalman_Filtresi EKF;
 80020ba:	480c      	ldr	r0, [pc, #48]	; (80020ec <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80020bc:	f006 ffac 	bl	8009018 <_ZN15Kalman_FiltresiC1Ev>
Controller controller;
 80020c0:	480b      	ldr	r0, [pc, #44]	; (80020f0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80020c2:	f006 fe75 	bl	8008db0 <_ZN10ControllerC1Ev>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10a      	bne.n	80020e2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d105      	bne.n	80020e2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80020d6:	4806      	ldr	r0, [pc, #24]	; (80020f0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80020d8:	f006 ff62 	bl	8008fa0 <_ZN10ControllerD1Ev>
Kalman_Filtresi EKF;
 80020dc:	4803      	ldr	r0, [pc, #12]	; (80020ec <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80020de:	f007 f8db 	bl	8009298 <_ZN15Kalman_FiltresiD1Ev>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000c50 	.word	0x20000c50
 80020f0:	20000f98 	.word	0x20000f98

080020f4 <_GLOBAL__sub_I__bno055_i2c_port>:
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020fc:	2001      	movs	r0, #1
 80020fe:	f7ff ffcf 	bl	80020a0 <_Z41__static_initialization_and_destruction_0ii>
 8002102:	bd80      	pop	{r7, pc}

08002104 <_GLOBAL__sub_D__bno055_i2c_port>:
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
 8002108:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800210c:	2000      	movs	r0, #0
 800210e:	f7ff ffc7 	bl	80020a0 <_Z41__static_initialization_and_destruction_0ii>
 8002112:	bd80      	pop	{r7, pc}

08002114 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <NRF24_DelayMicroSeconds+0x38>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <NRF24_DelayMicroSeconds+0x3c>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	0c9a      	lsrs	r2, r3, #18
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	fb02 f303 	mul.w	r3, r2, r3
 8002132:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8002134:	bf00      	nop
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1e5a      	subs	r2, r3, #1
 800213a:	60fa      	str	r2, [r7, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1fa      	bne.n	8002136 <NRF24_DelayMicroSeconds+0x22>
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	20000008 	.word	0x20000008
 8002150:	165e9f81 	.word	0x165e9f81

08002154 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d008      	beq.n	8002174 <NRF24_csn+0x20>
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <NRF24_csn+0x38>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <NRF24_csn+0x3c>)
 8002168:	8811      	ldrh	r1, [r2, #0]
 800216a:	2201      	movs	r2, #1
 800216c:	4618      	mov	r0, r3
 800216e:	f002 fad9 	bl	8004724 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8002172:	e007      	b.n	8002184 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <NRF24_csn+0x38>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a05      	ldr	r2, [pc, #20]	; (8002190 <NRF24_csn+0x3c>)
 800217a:	8811      	ldrh	r1, [r2, #0]
 800217c:	2200      	movs	r2, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f002 fad0 	bl	8004724 <HAL_GPIO_WritePin>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	2000172c 	.word	0x2000172c
 8002190:	20001730 	.word	0x20001730

08002194 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d008      	beq.n	80021b4 <NRF24_ce+0x20>
 80021a2:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <NRF24_ce+0x38>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <NRF24_ce+0x3c>)
 80021a8:	8811      	ldrh	r1, [r2, #0]
 80021aa:	2201      	movs	r2, #1
 80021ac:	4618      	mov	r0, r3
 80021ae:	f002 fab9 	bl	8004724 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80021b2:	e007      	b.n	80021c4 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <NRF24_ce+0x38>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a05      	ldr	r2, [pc, #20]	; (80021d0 <NRF24_ce+0x3c>)
 80021ba:	8811      	ldrh	r1, [r2, #0]
 80021bc:	2200      	movs	r2, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f002 fab0 	bl	8004724 <HAL_GPIO_WritePin>
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	2000172c 	.word	0x2000172c
 80021d0:	20001732 	.word	0x20001732

080021d4 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80021de:	2000      	movs	r0, #0
 80021e0:	f7ff ffb8 	bl	8002154 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	f003 031f 	and.w	r3, r3, #31
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80021ee:	f107 010c 	add.w	r1, r7, #12
 80021f2:	2364      	movs	r3, #100	; 0x64
 80021f4:	2201      	movs	r2, #1
 80021f6:	480a      	ldr	r0, [pc, #40]	; (8002220 <NRF24_read_register+0x4c>)
 80021f8:	f003 ff4a 	bl	8006090 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	1c59      	adds	r1, r3, #1
 8002202:	2364      	movs	r3, #100	; 0x64
 8002204:	2201      	movs	r2, #1
 8002206:	4806      	ldr	r0, [pc, #24]	; (8002220 <NRF24_read_register+0x4c>)
 8002208:	f004 f87e 	bl	8006308 <HAL_SPI_Receive>
	retData = spiBuf[1];
 800220c:	7b7b      	ldrb	r3, [r7, #13]
 800220e:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8002210:	2001      	movs	r0, #1
 8002212:	f7ff ff9f 	bl	8002154 <NRF24_csn>
	return retData;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20001734 	.word	0x20001734

08002224 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	6039      	str	r1, [r7, #0]
 800222e:	71fb      	strb	r3, [r7, #7]
 8002230:	4613      	mov	r3, r2
 8002232:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8002234:	2000      	movs	r0, #0
 8002236:	f7ff ff8d 	bl	8002154 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	b2db      	uxtb	r3, r3
 8002242:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8002244:	f107 010c 	add.w	r1, r7, #12
 8002248:	2364      	movs	r3, #100	; 0x64
 800224a:	2201      	movs	r2, #1
 800224c:	4808      	ldr	r0, [pc, #32]	; (8002270 <NRF24_read_registerN+0x4c>)
 800224e:	f003 ff1f 	bl	8006090 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8002252:	79bb      	ldrb	r3, [r7, #6]
 8002254:	b29a      	uxth	r2, r3
 8002256:	2364      	movs	r3, #100	; 0x64
 8002258:	6839      	ldr	r1, [r7, #0]
 800225a:	4805      	ldr	r0, [pc, #20]	; (8002270 <NRF24_read_registerN+0x4c>)
 800225c:	f004 f854 	bl	8006308 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8002260:	2001      	movs	r0, #1
 8002262:	f7ff ff77 	bl	8002154 <NRF24_csn>
}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20001734 	.word	0x20001734

08002274 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	460a      	mov	r2, r1
 800227e:	71fb      	strb	r3, [r7, #7]
 8002280:	4613      	mov	r3, r2
 8002282:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8002284:	2000      	movs	r0, #0
 8002286:	f7ff ff65 	bl	8002154 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	f043 0320 	orr.w	r3, r3, #32
 8002290:	b2db      	uxtb	r3, r3
 8002292:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8002294:	79bb      	ldrb	r3, [r7, #6]
 8002296:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8002298:	f107 010c 	add.w	r1, r7, #12
 800229c:	2364      	movs	r3, #100	; 0x64
 800229e:	2202      	movs	r2, #2
 80022a0:	4804      	ldr	r0, [pc, #16]	; (80022b4 <NRF24_write_register+0x40>)
 80022a2:	f003 fef5 	bl	8006090 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80022a6:	2001      	movs	r0, #1
 80022a8:	f7ff ff54 	bl	8002154 <NRF24_csn>
}
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20001734 	.word	0x20001734

080022b8 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	6039      	str	r1, [r7, #0]
 80022c2:	71fb      	strb	r3, [r7, #7]
 80022c4:	4613      	mov	r3, r2
 80022c6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80022c8:	2000      	movs	r0, #0
 80022ca:	f7ff ff43 	bl	8002154 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	f043 0320 	orr.w	r3, r3, #32
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80022d8:	f107 010c 	add.w	r1, r7, #12
 80022dc:	2364      	movs	r3, #100	; 0x64
 80022de:	2201      	movs	r2, #1
 80022e0:	4808      	ldr	r0, [pc, #32]	; (8002304 <NRF24_write_registerN+0x4c>)
 80022e2:	f003 fed5 	bl	8006090 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80022e6:	79bb      	ldrb	r3, [r7, #6]
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	2364      	movs	r3, #100	; 0x64
 80022ec:	6839      	ldr	r1, [r7, #0]
 80022ee:	4805      	ldr	r0, [pc, #20]	; (8002304 <NRF24_write_registerN+0x4c>)
 80022f0:	f003 fece 	bl	8006090 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80022f4:	2001      	movs	r0, #1
 80022f6:	f7ff ff2d 	bl	8002154 <NRF24_csn>
}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20001734 	.word	0x20001734

08002308 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8002314:	f000 fa08 	bl	8002728 <NRF24_getPayloadSize>
 8002318:	4603      	mov	r3, r0
 800231a:	461a      	mov	r2, r3
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	4293      	cmp	r3, r2
 8002320:	d303      	bcc.n	800232a <NRF24_read_payload+0x22>
 8002322:	f000 fa01 	bl	8002728 <NRF24_getPayloadSize>
 8002326:	4603      	mov	r3, r0
 8002328:	e000      	b.n	800232c <NRF24_read_payload+0x24>
 800232a:	78fb      	ldrb	r3, [r7, #3]
 800232c:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800232e:	2000      	movs	r0, #0
 8002330:	f7ff ff10 	bl	8002154 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8002334:	2361      	movs	r3, #97	; 0x61
 8002336:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8002338:	f107 010e 	add.w	r1, r7, #14
 800233c:	2364      	movs	r3, #100	; 0x64
 800233e:	2201      	movs	r2, #1
 8002340:	4808      	ldr	r0, [pc, #32]	; (8002364 <NRF24_read_payload+0x5c>)
 8002342:	f003 fea5 	bl	8006090 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	b29a      	uxth	r2, r3
 800234a:	2364      	movs	r3, #100	; 0x64
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4805      	ldr	r0, [pc, #20]	; (8002364 <NRF24_read_payload+0x5c>)
 8002350:	f003 ffda 	bl	8006308 <HAL_SPI_Receive>
	NRF24_csn(1);
 8002354:	2001      	movs	r0, #1
 8002356:	f7ff fefd 	bl	8002154 <NRF24_csn>
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20001734 	.word	0x20001734

08002368 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 800236c:	21ff      	movs	r1, #255	; 0xff
 800236e:	20e1      	movs	r0, #225	; 0xe1
 8002370:	f7ff ff80 	bl	8002274 <NRF24_write_register>
}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}

08002378 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 800237c:	21ff      	movs	r1, #255	; 0xff
 800237e:	20e2      	movs	r0, #226	; 0xe2
 8002380:	f7ff ff78 	bl	8002274 <NRF24_write_register>
}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}

08002388 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800238e:	2007      	movs	r0, #7
 8002390:	f7ff ff20 	bl	80021d4 <NRF24_read_register>
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8002398:	79fb      	ldrb	r3, [r7, #7]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80023a4:	b082      	sub	sp, #8
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b084      	sub	sp, #16
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	61fb      	str	r3, [r7, #28]
 80023b0:	460b      	mov	r3, r1
 80023b2:	807b      	strh	r3, [r7, #2]
 80023b4:	4613      	mov	r3, r2
 80023b6:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80023b8:	4b66      	ldr	r3, [pc, #408]	; (8002554 <NRF24_begin+0x1b0>)
 80023ba:	4618      	mov	r0, r3
 80023bc:	f107 031c 	add.w	r3, r7, #28
 80023c0:	2258      	movs	r2, #88	; 0x58
 80023c2:	4619      	mov	r1, r3
 80023c4:	f007 f85a 	bl	800947c <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80023c8:	4a63      	ldr	r2, [pc, #396]	; (8002558 <NRF24_begin+0x1b4>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80023ce:	4a63      	ldr	r2, [pc, #396]	; (800255c <NRF24_begin+0x1b8>)
 80023d0:	887b      	ldrh	r3, [r7, #2]
 80023d2:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80023d4:	4a62      	ldr	r2, [pc, #392]	; (8002560 <NRF24_begin+0x1bc>)
 80023d6:	883b      	ldrh	r3, [r7, #0]
 80023d8:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 80023da:	2001      	movs	r0, #1
 80023dc:	f7ff feba 	bl	8002154 <NRF24_csn>
	NRF24_ce(0);
 80023e0:	2000      	movs	r0, #0
 80023e2:	f7ff fed7 	bl	8002194 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80023e6:	2005      	movs	r0, #5
 80023e8:	f001 fc82 	bl	8003cf0 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80023ec:	2108      	movs	r1, #8
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7ff ff40 	bl	8002274 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80023f4:	213f      	movs	r1, #63	; 0x3f
 80023f6:	2001      	movs	r0, #1
 80023f8:	f7ff ff3c 	bl	8002274 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80023fc:	2103      	movs	r1, #3
 80023fe:	2002      	movs	r0, #2
 8002400:	f7ff ff38 	bl	8002274 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8002404:	2103      	movs	r1, #3
 8002406:	2003      	movs	r0, #3
 8002408:	f7ff ff34 	bl	8002274 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 800240c:	2103      	movs	r1, #3
 800240e:	2004      	movs	r0, #4
 8002410:	f7ff ff30 	bl	8002274 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8002414:	2102      	movs	r1, #2
 8002416:	2005      	movs	r0, #5
 8002418:	f7ff ff2c 	bl	8002274 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 800241c:	210f      	movs	r1, #15
 800241e:	2006      	movs	r0, #6
 8002420:	f7ff ff28 	bl	8002274 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8002424:	210e      	movs	r1, #14
 8002426:	2007      	movs	r0, #7
 8002428:	f7ff ff24 	bl	8002274 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 800242c:	2100      	movs	r1, #0
 800242e:	2008      	movs	r0, #8
 8002430:	f7ff ff20 	bl	8002274 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8002434:	2100      	movs	r1, #0
 8002436:	2009      	movs	r0, #9
 8002438:	f7ff ff1c 	bl	8002274 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800243c:	23e7      	movs	r3, #231	; 0xe7
 800243e:	733b      	strb	r3, [r7, #12]
 8002440:	23e7      	movs	r3, #231	; 0xe7
 8002442:	72fb      	strb	r3, [r7, #11]
 8002444:	23e7      	movs	r3, #231	; 0xe7
 8002446:	72bb      	strb	r3, [r7, #10]
 8002448:	23e7      	movs	r3, #231	; 0xe7
 800244a:	727b      	strb	r3, [r7, #9]
 800244c:	23e7      	movs	r3, #231	; 0xe7
 800244e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8002450:	f107 0308 	add.w	r3, r7, #8
 8002454:	2205      	movs	r2, #5
 8002456:	4619      	mov	r1, r3
 8002458:	200a      	movs	r0, #10
 800245a:	f7ff ff2d 	bl	80022b8 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 800245e:	23c2      	movs	r3, #194	; 0xc2
 8002460:	733b      	strb	r3, [r7, #12]
 8002462:	23c2      	movs	r3, #194	; 0xc2
 8002464:	72fb      	strb	r3, [r7, #11]
 8002466:	23c2      	movs	r3, #194	; 0xc2
 8002468:	72bb      	strb	r3, [r7, #10]
 800246a:	23c2      	movs	r3, #194	; 0xc2
 800246c:	727b      	strb	r3, [r7, #9]
 800246e:	23c2      	movs	r3, #194	; 0xc2
 8002470:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8002472:	f107 0308 	add.w	r3, r7, #8
 8002476:	2205      	movs	r2, #5
 8002478:	4619      	mov	r1, r3
 800247a:	200b      	movs	r0, #11
 800247c:	f7ff ff1c 	bl	80022b8 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8002480:	21c3      	movs	r1, #195	; 0xc3
 8002482:	200c      	movs	r0, #12
 8002484:	f7ff fef6 	bl	8002274 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8002488:	21c4      	movs	r1, #196	; 0xc4
 800248a:	200d      	movs	r0, #13
 800248c:	f7ff fef2 	bl	8002274 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8002490:	21c5      	movs	r1, #197	; 0xc5
 8002492:	200e      	movs	r0, #14
 8002494:	f7ff feee 	bl	8002274 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8002498:	21c6      	movs	r1, #198	; 0xc6
 800249a:	200f      	movs	r0, #15
 800249c:	f7ff feea 	bl	8002274 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80024a0:	23e7      	movs	r3, #231	; 0xe7
 80024a2:	733b      	strb	r3, [r7, #12]
 80024a4:	23e7      	movs	r3, #231	; 0xe7
 80024a6:	72fb      	strb	r3, [r7, #11]
 80024a8:	23e7      	movs	r3, #231	; 0xe7
 80024aa:	72bb      	strb	r3, [r7, #10]
 80024ac:	23e7      	movs	r3, #231	; 0xe7
 80024ae:	727b      	strb	r3, [r7, #9]
 80024b0:	23e7      	movs	r3, #231	; 0xe7
 80024b2:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80024b4:	f107 0308 	add.w	r3, r7, #8
 80024b8:	2205      	movs	r2, #5
 80024ba:	4619      	mov	r1, r3
 80024bc:	2010      	movs	r0, #16
 80024be:	f7ff fefb 	bl	80022b8 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80024c2:	2100      	movs	r1, #0
 80024c4:	2011      	movs	r0, #17
 80024c6:	f7ff fed5 	bl	8002274 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80024ca:	2100      	movs	r1, #0
 80024cc:	2012      	movs	r0, #18
 80024ce:	f7ff fed1 	bl	8002274 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80024d2:	2100      	movs	r1, #0
 80024d4:	2013      	movs	r0, #19
 80024d6:	f7ff fecd 	bl	8002274 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80024da:	2100      	movs	r1, #0
 80024dc:	2014      	movs	r0, #20
 80024de:	f7ff fec9 	bl	8002274 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80024e2:	2100      	movs	r1, #0
 80024e4:	2015      	movs	r0, #21
 80024e6:	f7ff fec5 	bl	8002274 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80024ea:	2100      	movs	r1, #0
 80024ec:	2016      	movs	r0, #22
 80024ee:	f7ff fec1 	bl	8002274 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 80024f2:	f000 fa47 	bl	8002984 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80024f6:	2100      	movs	r1, #0
 80024f8:	201c      	movs	r0, #28
 80024fa:	f7ff febb 	bl	8002274 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80024fe:	2100      	movs	r1, #0
 8002500:	201d      	movs	r0, #29
 8002502:	f7ff feb7 	bl	8002274 <NRF24_write_register>
	printRadioSettings();
 8002506:	f000 fa57 	bl	80029b8 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800250a:	210f      	movs	r1, #15
 800250c:	200f      	movs	r0, #15
 800250e:	f000 f8c5 	bl	800269c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8002512:	2003      	movs	r0, #3
 8002514:	f000 f947 	bl	80027a6 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8002518:	2001      	movs	r0, #1
 800251a:	f000 f97d 	bl	8002818 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800251e:	2002      	movs	r0, #2
 8002520:	f000 f9c0 	bl	80028a4 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8002524:	f000 f912 	bl	800274c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8002528:	2020      	movs	r0, #32
 800252a:	f000 f8e7 	bl	80026fc <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 800252e:	f000 fa20 	bl	8002972 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8002532:	204c      	movs	r0, #76	; 0x4c
 8002534:	f000 f8cd 	bl	80026d2 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8002538:	f7ff ff16 	bl	8002368 <NRF24_flush_tx>
	NRF24_flush_rx();
 800253c:	f7ff ff1c 	bl	8002378 <NRF24_flush_rx>

	NRF24_powerDown();
 8002540:	f000 f9d8 	bl	80028f4 <NRF24_powerDown>

}
 8002544:	bf00      	nop
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800254e:	b002      	add	sp, #8
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20001734 	.word	0x20001734
 8002558:	2000172c 	.word	0x2000172c
 800255c:	20001730 	.word	0x20001730
 8002560:	20001732 	.word	0x20001732

08002564 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8002568:	2000      	movs	r0, #0
 800256a:	f7ff fe33 	bl	80021d4 <NRF24_read_register>
 800256e:	4603      	mov	r3, r0
 8002570:	f043 0303 	orr.w	r3, r3, #3
 8002574:	b2db      	uxtb	r3, r3
 8002576:	4619      	mov	r1, r3
 8002578:	2000      	movs	r0, #0
 800257a:	f7ff fe7b 	bl	8002274 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <NRF24_startListening+0x48>)
 8002580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002584:	4313      	orrs	r3, r2
 8002586:	d004      	beq.n	8002592 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8002588:	2205      	movs	r2, #5
 800258a:	4908      	ldr	r1, [pc, #32]	; (80025ac <NRF24_startListening+0x48>)
 800258c:	200a      	movs	r0, #10
 800258e:	f7ff fe93 	bl	80022b8 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8002592:	f7ff fee9 	bl	8002368 <NRF24_flush_tx>
	NRF24_flush_rx();
 8002596:	f7ff feef 	bl	8002378 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 800259a:	2001      	movs	r0, #1
 800259c:	f7ff fdfa 	bl	8002194 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 80025a0:	2096      	movs	r0, #150	; 0x96
 80025a2:	f7ff fdb7 	bl	8002114 <NRF24_DelayMicroSeconds>
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20001720 	.word	0x20001720

080025b0 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80025b4:	2000      	movs	r0, #0
 80025b6:	f000 f9ac 	bl	8002912 <NRF24_availablePipe>
 80025ba:	4603      	mov	r3, r0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	bd80      	pop	{r7, pc}

080025c0 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 80025cc:	78fb      	ldrb	r3, [r7, #3]
 80025ce:	4619      	mov	r1, r3
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff fe99 	bl	8002308 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80025d6:	2017      	movs	r0, #23
 80025d8:	f7ff fdfc 	bl	80021d4 <NRF24_read_register>
 80025dc:	4603      	mov	r3, r0
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 80025e4:	f7ff fec8 	bl	8002378 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 80025e8:	f000 f8a8 	bl	800273c <NRF24_getDynamicPayloadSize>
	return rxStatus;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	bf14      	ite	ne
 80025f2:	2301      	movne	r3, #1
 80025f4:	2300      	moveq	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	4601      	mov	r1, r0
 8002608:	e9c7 2300 	strd	r2, r3, [r7]
 800260c:	460b      	mov	r3, r1
 800260e:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d104      	bne.n	8002620 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8002616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800261a:	491c      	ldr	r1, [pc, #112]	; (800268c <NRF24_openReadingPipe+0x8c>)
 800261c:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	2b06      	cmp	r3, #6
 8002624:	d82d      	bhi.n	8002682 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d808      	bhi.n	800263e <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	4a18      	ldr	r2, [pc, #96]	; (8002690 <NRF24_openReadingPipe+0x90>)
 8002630:	5cd3      	ldrb	r3, [r2, r3]
 8002632:	4639      	mov	r1, r7
 8002634:	2205      	movs	r2, #5
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fe3e 	bl	80022b8 <NRF24_write_registerN>
 800263c:	e007      	b.n	800264e <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 800263e:	7bfb      	ldrb	r3, [r7, #15]
 8002640:	4a13      	ldr	r2, [pc, #76]	; (8002690 <NRF24_openReadingPipe+0x90>)
 8002642:	5cd3      	ldrb	r3, [r2, r3]
 8002644:	4639      	mov	r1, r7
 8002646:	2201      	movs	r2, #1
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fe35 	bl	80022b8 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	4a10      	ldr	r2, [pc, #64]	; (8002694 <NRF24_openReadingPipe+0x94>)
 8002652:	5cd3      	ldrb	r3, [r2, r3]
 8002654:	4a10      	ldr	r2, [pc, #64]	; (8002698 <NRF24_openReadingPipe+0x98>)
 8002656:	7812      	ldrb	r2, [r2, #0]
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fe0a 	bl	8002274 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8002660:	2002      	movs	r0, #2
 8002662:	f7ff fdb7 	bl	80021d4 <NRF24_read_register>
 8002666:	4603      	mov	r3, r0
 8002668:	b25a      	sxtb	r2, r3
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	2101      	movs	r1, #1
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	b25b      	sxtb	r3, r3
 8002674:	4313      	orrs	r3, r2
 8002676:	b25b      	sxtb	r3, r3
 8002678:	b2db      	uxtb	r3, r3
 800267a:	4619      	mov	r1, r3
 800267c:	2002      	movs	r0, #2
 800267e:	f7ff fdf9 	bl	8002274 <NRF24_write_register>
	}

}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20001720 	.word	0x20001720
 8002690:	0800afe0 	.word	0x0800afe0
 8002694:	0800afe8 	.word	0x0800afe8
 8002698:	20001728 	.word	0x20001728

0800269c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	460a      	mov	r2, r1
 80026a6:	71fb      	strb	r3, [r7, #7]
 80026a8:	4613      	mov	r3, r2
 80026aa:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	b25a      	sxtb	r2, r3
 80026b2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	b25b      	sxtb	r3, r3
 80026bc:	4313      	orrs	r3, r2
 80026be:	b25b      	sxtb	r3, r3
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	4619      	mov	r1, r3
 80026c4:	2004      	movs	r0, #4
 80026c6:	f7ff fdd5 	bl	8002274 <NRF24_write_register>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b084      	sub	sp, #16
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	4603      	mov	r3, r0
 80026da:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80026dc:	237f      	movs	r3, #127	; 0x7f
 80026de:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	4293      	cmp	r3, r2
 80026e6:	bf28      	it	cs
 80026e8:	4613      	movcs	r3, r2
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	4619      	mov	r1, r3
 80026ee:	2005      	movs	r0, #5
 80026f0:	f7ff fdc0 	bl	8002274 <NRF24_write_register>
}
 80026f4:	bf00      	nop
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8002706:	2320      	movs	r3, #32
 8002708:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	4293      	cmp	r3, r2
 8002710:	bf28      	it	cs
 8002712:	4613      	movcs	r3, r2
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4b03      	ldr	r3, [pc, #12]	; (8002724 <NRF24_setPayloadSize+0x28>)
 8002718:	701a      	strb	r2, [r3, #0]
}
 800271a:	bf00      	nop
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	20001728 	.word	0x20001728

08002728 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
	return payload_size;
 800272c:	4b02      	ldr	r3, [pc, #8]	; (8002738 <NRF24_getPayloadSize+0x10>)
 800272e:	781b      	ldrb	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	20001728 	.word	0x20001728

0800273c <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8002740:	2060      	movs	r0, #96	; 0x60
 8002742:	f7ff fd47 	bl	80021d4 <NRF24_read_register>
 8002746:	4603      	mov	r3, r0
}
 8002748:	4618      	mov	r0, r3
 800274a:	bd80      	pop	{r7, pc}

0800274c <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8002750:	201d      	movs	r0, #29
 8002752:	f7ff fd3f 	bl	80021d4 <NRF24_read_register>
 8002756:	4603      	mov	r3, r0
 8002758:	f023 0304 	bic.w	r3, r3, #4
 800275c:	b2db      	uxtb	r3, r3
 800275e:	4619      	mov	r1, r3
 8002760:	201d      	movs	r0, #29
 8002762:	f7ff fd87 	bl	8002274 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8002766:	2100      	movs	r1, #0
 8002768:	201c      	movs	r0, #28
 800276a:	f7ff fd83 	bl	8002274 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800276e:	4b02      	ldr	r3, [pc, #8]	; (8002778 <NRF24_disableDynamicPayloads+0x2c>)
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20001729 	.word	0x20001729

0800277c <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 800278c:	213f      	movs	r1, #63	; 0x3f
 800278e:	2001      	movs	r0, #1
 8002790:	f7ff fd70 	bl	8002274 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8002794:	e003      	b.n	800279e <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8002796:	2100      	movs	r1, #0
 8002798:	2001      	movs	r0, #1
 800279a:	f7ff fd6b 	bl	8002274 <NRF24_write_register>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	4603      	mov	r3, r0
 80027ae:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80027b0:	2006      	movs	r0, #6
 80027b2:	f7ff fd0f 	bl	80021d4 <NRF24_read_register>
 80027b6:	4603      	mov	r3, r0
 80027b8:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	f023 0306 	bic.w	r3, r3, #6
 80027c0:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d104      	bne.n	80027d2 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	f043 0306 	orr.w	r3, r3, #6
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	e019      	b.n	8002806 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d104      	bne.n	80027e2 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	f043 0304 	orr.w	r3, r3, #4
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	e011      	b.n	8002806 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d104      	bne.n	80027f2 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	f043 0302 	orr.w	r3, r3, #2
 80027ee:	73fb      	strb	r3, [r7, #15]
 80027f0:	e009      	b.n	8002806 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d006      	beq.n	8002806 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d103      	bne.n	8002806 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	f043 0306 	orr.w	r3, r3, #6
 8002804:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	4619      	mov	r1, r3
 800280a:	2006      	movs	r0, #6
 800280c:	f7ff fd32 	bl	8002274 <NRF24_write_register>
}
 8002810:	bf00      	nop
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8002822:	2300      	movs	r3, #0
 8002824:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8002826:	2006      	movs	r0, #6
 8002828:	f7ff fcd4 	bl	80021d4 <NRF24_read_register>
 800282c:	4603      	mov	r3, r0
 800282e:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8002830:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <NRF24_setDataRate+0x88>)
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8002836:	7bbb      	ldrb	r3, [r7, #14]
 8002838:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800283c:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d107      	bne.n	8002854 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8002844:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <NRF24_setDataRate+0x88>)
 8002846:	2200      	movs	r2, #0
 8002848:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800284a:	7bbb      	ldrb	r3, [r7, #14]
 800284c:	f043 0320 	orr.w	r3, r3, #32
 8002850:	73bb      	strb	r3, [r7, #14]
 8002852:	e00d      	b.n	8002870 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <NRF24_setDataRate+0x88>)
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8002860:	7bbb      	ldrb	r3, [r7, #14]
 8002862:	f043 0308 	orr.w	r3, r3, #8
 8002866:	73bb      	strb	r3, [r7, #14]
 8002868:	e002      	b.n	8002870 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 800286a:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <NRF24_setDataRate+0x88>)
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8002870:	7bbb      	ldrb	r3, [r7, #14]
 8002872:	4619      	mov	r1, r3
 8002874:	2006      	movs	r0, #6
 8002876:	f7ff fcfd 	bl	8002274 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800287a:	2006      	movs	r0, #6
 800287c:	f7ff fcaa 	bl	80021d4 <NRF24_read_register>
 8002880:	4603      	mov	r3, r0
 8002882:	461a      	mov	r2, r3
 8002884:	7bbb      	ldrb	r3, [r7, #14]
 8002886:	4293      	cmp	r3, r2
 8002888:	d102      	bne.n	8002890 <NRF24_setDataRate+0x78>
  {
    result = true;
 800288a:	2301      	movs	r3, #1
 800288c:	73fb      	strb	r3, [r7, #15]
 800288e:	e002      	b.n	8002896 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8002890:	4b03      	ldr	r3, [pc, #12]	; (80028a0 <NRF24_setDataRate+0x88>)
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8002896:	7bfb      	ldrb	r3, [r7, #15]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	2000172a 	.word	0x2000172a

080028a4 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80028ae:	2000      	movs	r0, #0
 80028b0:	f7ff fc90 	bl	80021d4 <NRF24_read_register>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f023 030c 	bic.w	r3, r3, #12
 80028ba:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00f      	beq.n	80028e2 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d104      	bne.n	80028d2 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	f043 0308 	orr.w	r3, r3, #8
 80028ce:	73fb      	strb	r3, [r7, #15]
 80028d0:	e007      	b.n	80028e2 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	f043 0308 	orr.w	r3, r3, #8
 80028d8:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	f043 0304 	orr.w	r3, r3, #4
 80028e0:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	4619      	mov	r1, r3
 80028e6:	2000      	movs	r0, #0
 80028e8:	f7ff fcc4 	bl	8002274 <NRF24_write_register>
}
 80028ec:	bf00      	nop
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80028f8:	2000      	movs	r0, #0
 80028fa:	f7ff fc6b 	bl	80021d4 <NRF24_read_register>
 80028fe:	4603      	mov	r3, r0
 8002900:	f023 0302 	bic.w	r3, r3, #2
 8002904:	b2db      	uxtb	r3, r3
 8002906:	4619      	mov	r1, r3
 8002908:	2000      	movs	r0, #0
 800290a:	f7ff fcb3 	bl	8002274 <NRF24_write_register>
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}

08002912 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800291a:	f7ff fd35 	bl	8002388 <NRF24_get_status>
 800291e:	4603      	mov	r3, r0
 8002920:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002928:	2b00      	cmp	r3, #0
 800292a:	bf14      	ite	ne
 800292c:	2301      	movne	r3, #1
 800292e:	2300      	moveq	r3, #0
 8002930:	73bb      	strb	r3, [r7, #14]

  if (result)
 8002932:	7bbb      	ldrb	r3, [r7, #14]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d017      	beq.n	8002968 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d007      	beq.n	800294e <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	085b      	lsrs	r3, r3, #1
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	b2da      	uxtb	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800294e:	2140      	movs	r1, #64	; 0x40
 8002950:	2007      	movs	r0, #7
 8002952:	f7ff fc8f 	bl	8002274 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8002960:	2120      	movs	r1, #32
 8002962:	2007      	movs	r0, #7
 8002964:	f7ff fc86 	bl	8002274 <NRF24_write_register>
    }
  }
  return result;
 8002968:	7bbb      	ldrb	r3, [r7, #14]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8002976:	2170      	movs	r1, #112	; 0x70
 8002978:	2007      	movs	r0, #7
 800297a:	f7ff fc7b 	bl	8002274 <NRF24_write_register>
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800298a:	2000      	movs	r0, #0
 800298c:	f7ff fbe2 	bl	8002154 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8002990:	2350      	movs	r3, #80	; 0x50
 8002992:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8002994:	2373      	movs	r3, #115	; 0x73
 8002996:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8002998:	1d39      	adds	r1, r7, #4
 800299a:	2364      	movs	r3, #100	; 0x64
 800299c:	2202      	movs	r2, #2
 800299e:	4805      	ldr	r0, [pc, #20]	; (80029b4 <NRF24_ACTIVATE_cmd+0x30>)
 80029a0:	f003 fb76 	bl	8006090 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80029a4:	2001      	movs	r0, #1
 80029a6:	f7ff fbd5 	bl	8002154 <NRF24_csn>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20001734 	.word	0x20001734

080029b8 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80029b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ba:	b0a1      	sub	sp, #132	; 0x84
 80029bc:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80029be:	f107 0308 	add.w	r3, r7, #8
 80029c2:	4996      	ldr	r1, [pc, #600]	; (8002c1c <printRadioSettings+0x264>)
 80029c4:	4618      	mov	r0, r3
 80029c6:	f006 feb3 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80029ca:	2000      	movs	r0, #0
 80029cc:	f7ff fc02 	bl	80021d4 <NRF24_read_register>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80029d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d013      	beq.n	8002a0a <printRadioSettings+0x52>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80029e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d006      	beq.n	80029fc <printRadioSettings+0x44>
 80029ee:	f107 0308 	add.w	r3, r7, #8
 80029f2:	498b      	ldr	r1, [pc, #556]	; (8002c20 <printRadioSettings+0x268>)
 80029f4:	4618      	mov	r0, r3
 80029f6:	f006 fe9b 	bl	8009730 <siprintf>
 80029fa:	e00c      	b.n	8002a16 <printRadioSettings+0x5e>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 80029fc:	f107 0308 	add.w	r3, r7, #8
 8002a00:	4988      	ldr	r1, [pc, #544]	; (8002c24 <printRadioSettings+0x26c>)
 8002a02:	4618      	mov	r0, r3
 8002a04:	f006 fe94 	bl	8009730 <siprintf>
 8002a08:	e005      	b.n	8002a16 <printRadioSettings+0x5e>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8002a0a:	f107 0308 	add.w	r3, r7, #8
 8002a0e:	4986      	ldr	r1, [pc, #536]	; (8002c28 <printRadioSettings+0x270>)
 8002a10:	4618      	mov	r0, r3
 8002a12:	f006 fe8d 	bl	8009730 <siprintf>
	}
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8002a16:	2001      	movs	r0, #1
 8002a18:	f7ff fbdc 	bl	80021d4 <NRF24_read_register>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002a22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002a26:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	bfcc      	ite	gt
 8002a2e:	2301      	movgt	r3, #1
 8002a30:	2300      	movle	r3, #0
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002a36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002a3a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	bfcc      	ite	gt
 8002a42:	2301      	movgt	r3, #1
 8002a44:	2300      	movle	r3, #0
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002a4a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002a4e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	bfcc      	ite	gt
 8002a56:	2301      	movgt	r3, #1
 8002a58:	2300      	movle	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002a5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002a62:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	bfcc      	ite	gt
 8002a6a:	2301      	movgt	r3, #1
 8002a6c:	2300      	movle	r3, #0
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002a72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002a76:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bfcc      	ite	gt
 8002a7e:	2301      	movgt	r3, #1
 8002a80:	2300      	movle	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002a86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002a8a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bfcc      	ite	gt
 8002a92:	2301      	movgt	r3, #1
 8002a94:	2300      	movle	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f107 0008 	add.w	r0, r7, #8
 8002a9c:	9303      	str	r3, [sp, #12]
 8002a9e:	9402      	str	r4, [sp, #8]
 8002aa0:	9101      	str	r1, [sp, #4]
 8002aa2:	9200      	str	r2, [sp, #0]
 8002aa4:	4633      	mov	r3, r6
 8002aa6:	462a      	mov	r2, r5
 8002aa8:	4960      	ldr	r1, [pc, #384]	; (8002c2c <printRadioSettings+0x274>)
 8002aaa:	f006 fe41 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8002aae:	2002      	movs	r0, #2
 8002ab0:	f7ff fb90 	bl	80021d4 <NRF24_read_register>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002aba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002abe:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	bfcc      	ite	gt
 8002ac6:	2301      	movgt	r3, #1
 8002ac8:	2300      	movle	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002ace:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002ad2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	bfcc      	ite	gt
 8002ada:	2301      	movgt	r3, #1
 8002adc:	2300      	movle	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002ae2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002ae6:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	bfcc      	ite	gt
 8002aee:	2301      	movgt	r3, #1
 8002af0:	2300      	movle	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002af6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002afa:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	bfcc      	ite	gt
 8002b02:	2301      	movgt	r3, #1
 8002b04:	2300      	movle	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002b0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002b0e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	bfcc      	ite	gt
 8002b16:	2301      	movgt	r3, #1
 8002b18:	2300      	movle	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002b1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002b22:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	bfcc      	ite	gt
 8002b2a:	2301      	movgt	r3, #1
 8002b2c:	2300      	movle	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	f107 0008 	add.w	r0, r7, #8
 8002b34:	9303      	str	r3, [sp, #12]
 8002b36:	9402      	str	r4, [sp, #8]
 8002b38:	9101      	str	r1, [sp, #4]
 8002b3a:	9200      	str	r2, [sp, #0]
 8002b3c:	4633      	mov	r3, r6
 8002b3e:	462a      	mov	r2, r5
 8002b40:	493b      	ldr	r1, [pc, #236]	; (8002c30 <printRadioSettings+0x278>)
 8002b42:	f006 fdf5 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8002b46:	2003      	movs	r0, #3
 8002b48:	f7ff fb44 	bl	80021d4 <NRF24_read_register>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8002b56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8002b60:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8002b64:	f107 0308 	add.w	r3, r7, #8
 8002b68:	4932      	ldr	r1, [pc, #200]	; (8002c34 <printRadioSettings+0x27c>)
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f006 fde0 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8002b70:	2005      	movs	r0, #5
 8002b72:	f7ff fb2f 	bl	80021d4 <NRF24_read_register>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8002b7c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002b80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b84:	f107 0308 	add.w	r3, r7, #8
 8002b88:	492b      	ldr	r1, [pc, #172]	; (8002c38 <printRadioSettings+0x280>)
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f006 fdd0 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8002b90:	2006      	movs	r0, #6
 8002b92:	f7ff fb1f 	bl	80021d4 <NRF24_read_register>
 8002b96:	4603      	mov	r3, r0
 8002b98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8002b9c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d006      	beq.n	8002bb6 <printRadioSettings+0x1fe>
 8002ba8:	f107 0308 	add.w	r3, r7, #8
 8002bac:	4923      	ldr	r1, [pc, #140]	; (8002c3c <printRadioSettings+0x284>)
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f006 fdbe 	bl	8009730 <siprintf>
 8002bb4:	e005      	b.n	8002bc2 <printRadioSettings+0x20a>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8002bb6:	f107 0308 	add.w	r3, r7, #8
 8002bba:	4921      	ldr	r1, [pc, #132]	; (8002c40 <printRadioSettings+0x288>)
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f006 fdb7 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	reg8Val &= (3 << 1);
 8002bc2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002bc6:	f003 0306 	and.w	r3, r3, #6
 8002bca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8002bce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002bd2:	085b      	lsrs	r3, r3, #1
 8002bd4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8002bd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d106      	bne.n	8002bee <printRadioSettings+0x236>
 8002be0:	f107 0308 	add.w	r3, r7, #8
 8002be4:	4917      	ldr	r1, [pc, #92]	; (8002c44 <printRadioSettings+0x28c>)
 8002be6:	4618      	mov	r0, r3
 8002be8:	f006 fda2 	bl	8009730 <siprintf>
 8002bec:	e03a      	b.n	8002c64 <printRadioSettings+0x2ac>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8002bee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d106      	bne.n	8002c04 <printRadioSettings+0x24c>
 8002bf6:	f107 0308 	add.w	r3, r7, #8
 8002bfa:	4913      	ldr	r1, [pc, #76]	; (8002c48 <printRadioSettings+0x290>)
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f006 fd97 	bl	8009730 <siprintf>
 8002c02:	e02f      	b.n	8002c64 <printRadioSettings+0x2ac>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8002c04:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d121      	bne.n	8002c50 <printRadioSettings+0x298>
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	490e      	ldr	r1, [pc, #56]	; (8002c4c <printRadioSettings+0x294>)
 8002c12:	4618      	mov	r0, r3
 8002c14:	f006 fd8c 	bl	8009730 <siprintf>
 8002c18:	e024      	b.n	8002c64 <printRadioSettings+0x2ac>
 8002c1a:	bf00      	nop
 8002c1c:	0800aa8c 	.word	0x0800aa8c
 8002c20:	0800aac0 	.word	0x0800aac0
 8002c24:	0800aadc 	.word	0x0800aadc
 8002c28:	0800aaf8 	.word	0x0800aaf8
 8002c2c:	0800ab0c 	.word	0x0800ab0c
 8002c30:	0800ab50 	.word	0x0800ab50
 8002c34:	0800ab9c 	.word	0x0800ab9c
 8002c38:	0800abb8 	.word	0x0800abb8
 8002c3c:	0800abcc 	.word	0x0800abcc
 8002c40:	0800abe4 	.word	0x0800abe4
 8002c44:	0800abfc 	.word	0x0800abfc
 8002c48:	0800ac10 	.word	0x0800ac10
 8002c4c:	0800ac24 	.word	0x0800ac24
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8002c50:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d105      	bne.n	8002c64 <printRadioSettings+0x2ac>
 8002c58:	f107 0308 	add.w	r3, r7, #8
 8002c5c:	49b1      	ldr	r1, [pc, #708]	; (8002f24 <printRadioSettings+0x56c>)
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f006 fd66 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8002c64:	463b      	mov	r3, r7
 8002c66:	2205      	movs	r2, #5
 8002c68:	4619      	mov	r1, r3
 8002c6a:	200a      	movs	r0, #10
 8002c6c:	f7ff fada 	bl	8002224 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002c70:	793b      	ldrb	r3, [r7, #4]
 8002c72:	461c      	mov	r4, r3
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	461d      	mov	r5, r3
 8002c78:	78bb      	ldrb	r3, [r7, #2]
 8002c7a:	787a      	ldrb	r2, [r7, #1]
 8002c7c:	7839      	ldrb	r1, [r7, #0]
 8002c7e:	f107 0008 	add.w	r0, r7, #8
 8002c82:	9102      	str	r1, [sp, #8]
 8002c84:	9201      	str	r2, [sp, #4]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	462b      	mov	r3, r5
 8002c8a:	4622      	mov	r2, r4
 8002c8c:	49a6      	ldr	r1, [pc, #664]	; (8002f28 <printRadioSettings+0x570>)
 8002c8e:	f006 fd4f 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8002c92:	463b      	mov	r3, r7
 8002c94:	2205      	movs	r2, #5
 8002c96:	4619      	mov	r1, r3
 8002c98:	200b      	movs	r0, #11
 8002c9a:	f7ff fac3 	bl	8002224 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002c9e:	793b      	ldrb	r3, [r7, #4]
 8002ca0:	461c      	mov	r4, r3
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	461d      	mov	r5, r3
 8002ca6:	78bb      	ldrb	r3, [r7, #2]
 8002ca8:	787a      	ldrb	r2, [r7, #1]
 8002caa:	7839      	ldrb	r1, [r7, #0]
 8002cac:	f107 0008 	add.w	r0, r7, #8
 8002cb0:	9102      	str	r1, [sp, #8]
 8002cb2:	9201      	str	r2, [sp, #4]
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	462b      	mov	r3, r5
 8002cb8:	4622      	mov	r2, r4
 8002cba:	499c      	ldr	r1, [pc, #624]	; (8002f2c <printRadioSettings+0x574>)
 8002cbc:	f006 fd38 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8002cc0:	463b      	mov	r3, r7
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	200c      	movs	r0, #12
 8002cc8:	f7ff faac 	bl	8002224 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002ccc:	783b      	ldrb	r3, [r7, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f107 0308 	add.w	r3, r7, #8
 8002cd4:	4996      	ldr	r1, [pc, #600]	; (8002f30 <printRadioSettings+0x578>)
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f006 fd2a 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8002cdc:	463b      	mov	r3, r7
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	200d      	movs	r0, #13
 8002ce4:	f7ff fa9e 	bl	8002224 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002ce8:	783b      	ldrb	r3, [r7, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	f107 0308 	add.w	r3, r7, #8
 8002cf0:	4990      	ldr	r1, [pc, #576]	; (8002f34 <printRadioSettings+0x57c>)
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f006 fd1c 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8002cf8:	463b      	mov	r3, r7
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	200e      	movs	r0, #14
 8002d00:	f7ff fa90 	bl	8002224 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002d04:	783b      	ldrb	r3, [r7, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	f107 0308 	add.w	r3, r7, #8
 8002d0c:	498a      	ldr	r1, [pc, #552]	; (8002f38 <printRadioSettings+0x580>)
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f006 fd0e 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8002d14:	463b      	mov	r3, r7
 8002d16:	2201      	movs	r2, #1
 8002d18:	4619      	mov	r1, r3
 8002d1a:	200f      	movs	r0, #15
 8002d1c:	f7ff fa82 	bl	8002224 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002d20:	783b      	ldrb	r3, [r7, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	f107 0308 	add.w	r3, r7, #8
 8002d28:	4984      	ldr	r1, [pc, #528]	; (8002f3c <printRadioSettings+0x584>)
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f006 fd00 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8002d30:	463b      	mov	r3, r7
 8002d32:	2205      	movs	r2, #5
 8002d34:	4619      	mov	r1, r3
 8002d36:	2010      	movs	r0, #16
 8002d38:	f7ff fa74 	bl	8002224 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002d3c:	793b      	ldrb	r3, [r7, #4]
 8002d3e:	461c      	mov	r4, r3
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	461d      	mov	r5, r3
 8002d44:	78bb      	ldrb	r3, [r7, #2]
 8002d46:	787a      	ldrb	r2, [r7, #1]
 8002d48:	7839      	ldrb	r1, [r7, #0]
 8002d4a:	f107 0008 	add.w	r0, r7, #8
 8002d4e:	9102      	str	r1, [sp, #8]
 8002d50:	9201      	str	r2, [sp, #4]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	462b      	mov	r3, r5
 8002d56:	4622      	mov	r2, r4
 8002d58:	4979      	ldr	r1, [pc, #484]	; (8002f40 <printRadioSettings+0x588>)
 8002d5a:	f006 fce9 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8002d5e:	2011      	movs	r0, #17
 8002d60:	f7ff fa38 	bl	80021d4 <NRF24_read_register>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002d6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002d6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d72:	f107 0308 	add.w	r3, r7, #8
 8002d76:	4973      	ldr	r1, [pc, #460]	; (8002f44 <printRadioSettings+0x58c>)
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f006 fcd9 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	reg8Val = NRF24_read_register(0x11+1);
 8002d7e:	2012      	movs	r0, #18
 8002d80:	f7ff fa28 	bl	80021d4 <NRF24_read_register>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002d8a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002d8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d92:	f107 0308 	add.w	r3, r7, #8
 8002d96:	496c      	ldr	r1, [pc, #432]	; (8002f48 <printRadioSettings+0x590>)
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f006 fcc9 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	reg8Val = NRF24_read_register(0x11+2);
 8002d9e:	2013      	movs	r0, #19
 8002da0:	f7ff fa18 	bl	80021d4 <NRF24_read_register>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002daa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002dae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002db2:	f107 0308 	add.w	r3, r7, #8
 8002db6:	4965      	ldr	r1, [pc, #404]	; (8002f4c <printRadioSettings+0x594>)
 8002db8:	4618      	mov	r0, r3
 8002dba:	f006 fcb9 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	reg8Val = NRF24_read_register(0x11+3);
 8002dbe:	2014      	movs	r0, #20
 8002dc0:	f7ff fa08 	bl	80021d4 <NRF24_read_register>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002dca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002dce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dd2:	f107 0308 	add.w	r3, r7, #8
 8002dd6:	495e      	ldr	r1, [pc, #376]	; (8002f50 <printRadioSettings+0x598>)
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f006 fca9 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	reg8Val = NRF24_read_register(0x11+4);
 8002dde:	2015      	movs	r0, #21
 8002de0:	f7ff f9f8 	bl	80021d4 <NRF24_read_register>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002dea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002dee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002df2:	f107 0308 	add.w	r3, r7, #8
 8002df6:	4957      	ldr	r1, [pc, #348]	; (8002f54 <printRadioSettings+0x59c>)
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f006 fc99 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	reg8Val = NRF24_read_register(0x11+5);
 8002dfe:	2016      	movs	r0, #22
 8002e00:	f7ff f9e8 	bl	80021d4 <NRF24_read_register>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002e0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002e0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e12:	f107 0308 	add.w	r3, r7, #8
 8002e16:	4950      	ldr	r1, [pc, #320]	; (8002f58 <printRadioSettings+0x5a0>)
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f006 fc89 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8002e1e:	201c      	movs	r0, #28
 8002e20:	f7ff f9d8 	bl	80021d4 <NRF24_read_register>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002e2a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002e2e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	bfcc      	ite	gt
 8002e36:	2301      	movgt	r3, #1
 8002e38:	2300      	movle	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002e3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002e42:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	bfcc      	ite	gt
 8002e4a:	2301      	movgt	r3, #1
 8002e4c:	2300      	movle	r3, #0
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002e52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002e56:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	bfcc      	ite	gt
 8002e5e:	2301      	movgt	r3, #1
 8002e60:	2300      	movle	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002e66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002e6a:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bfcc      	ite	gt
 8002e72:	2301      	movgt	r3, #1
 8002e74:	2300      	movle	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002e7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002e7e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	bfcc      	ite	gt
 8002e86:	2301      	movgt	r3, #1
 8002e88:	2300      	movle	r3, #0
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002e8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002e92:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bfcc      	ite	gt
 8002e9a:	2301      	movgt	r3, #1
 8002e9c:	2300      	movle	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	f107 0008 	add.w	r0, r7, #8
 8002ea4:	9303      	str	r3, [sp, #12]
 8002ea6:	9402      	str	r4, [sp, #8]
 8002ea8:	9101      	str	r1, [sp, #4]
 8002eaa:	9200      	str	r2, [sp, #0]
 8002eac:	4633      	mov	r3, r6
 8002eae:	462a      	mov	r2, r5
 8002eb0:	492a      	ldr	r1, [pc, #168]	; (8002f5c <printRadioSettings+0x5a4>)
 8002eb2:	f006 fc3d 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8002eb6:	201d      	movs	r0, #29
 8002eb8:	f7ff f98c 	bl	80021d4 <NRF24_read_register>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8002ec2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d006      	beq.n	8002edc <printRadioSettings+0x524>
 8002ece:	f107 0308 	add.w	r3, r7, #8
 8002ed2:	4923      	ldr	r1, [pc, #140]	; (8002f60 <printRadioSettings+0x5a8>)
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f006 fc2b 	bl	8009730 <siprintf>
 8002eda:	e005      	b.n	8002ee8 <printRadioSettings+0x530>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8002edc:	f107 0308 	add.w	r3, r7, #8
 8002ee0:	4920      	ldr	r1, [pc, #128]	; (8002f64 <printRadioSettings+0x5ac>)
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f006 fc24 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8002ee8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d006      	beq.n	8002f02 <printRadioSettings+0x54a>
 8002ef4:	f107 0308 	add.w	r3, r7, #8
 8002ef8:	491b      	ldr	r1, [pc, #108]	; (8002f68 <printRadioSettings+0x5b0>)
 8002efa:	4618      	mov	r0, r3
 8002efc:	f006 fc18 	bl	8009730 <siprintf>
 8002f00:	e005      	b.n	8002f0e <printRadioSettings+0x556>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8002f02:	f107 0308 	add.w	r3, r7, #8
 8002f06:	4919      	ldr	r1, [pc, #100]	; (8002f6c <printRadioSettings+0x5b4>)
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f006 fc11 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002f0e:	f107 0308 	add.w	r3, r7, #8
 8002f12:	4917      	ldr	r1, [pc, #92]	; (8002f70 <printRadioSettings+0x5b8>)
 8002f14:	4618      	mov	r0, r3
 8002f16:	f006 fc0b 	bl	8009730 <siprintf>
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}
 8002f1a:	bf00      	nop
 8002f1c:	3774      	adds	r7, #116	; 0x74
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f22:	bf00      	nop
 8002f24:	0800ac38 	.word	0x0800ac38
 8002f28:	0800ac4c 	.word	0x0800ac4c
 8002f2c:	0800ac7c 	.word	0x0800ac7c
 8002f30:	0800acac 	.word	0x0800acac
 8002f34:	0800acd4 	.word	0x0800acd4
 8002f38:	0800acfc 	.word	0x0800acfc
 8002f3c:	0800ad24 	.word	0x0800ad24
 8002f40:	0800ad4c 	.word	0x0800ad4c
 8002f44:	0800ad78 	.word	0x0800ad78
 8002f48:	0800ad94 	.word	0x0800ad94
 8002f4c:	0800adb0 	.word	0x0800adb0
 8002f50:	0800adcc 	.word	0x0800adcc
 8002f54:	0800ade8 	.word	0x0800ade8
 8002f58:	0800ae04 	.word	0x0800ae04
 8002f5c:	0800ae20 	.word	0x0800ae20
 8002f60:	0800ae6c 	.word	0x0800ae6c
 8002f64:	0800ae84 	.word	0x0800ae84
 8002f68:	0800ae9c 	.word	0x0800ae9c
 8002f6c:	0800aeb8 	.word	0x0800aeb8
 8002f70:	0800aa8c 	.word	0x0800aa8c

08002f74 <nrf24_DebugUART_Init>:
	//HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8002f74:	b084      	sub	sp, #16
 8002f76:	b4b0      	push	{r4, r5, r7}
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	f107 040c 	add.w	r4, r7, #12
 8002f7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <nrf24_DebugUART_Init+0x34>)
 8002f84:	461d      	mov	r5, r3
 8002f86:	f107 040c 	add.w	r4, r7, #12
 8002f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002f9a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8002f9e:	bf00      	nop
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bcb0      	pop	{r4, r5, r7}
 8002fa4:	b004      	add	sp, #16
 8002fa6:	4770      	bx	lr
 8002fa8:	2000178c 	.word	0x2000178c

08002fac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002fb0:	4b17      	ldr	r3, [pc, #92]	; (8003010 <MX_SPI1_Init+0x64>)
 8002fb2:	4a18      	ldr	r2, [pc, #96]	; (8003014 <MX_SPI1_Init+0x68>)
 8002fb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fb6:	4b16      	ldr	r3, [pc, #88]	; (8003010 <MX_SPI1_Init+0x64>)
 8002fb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002fbe:	4b14      	ldr	r3, [pc, #80]	; (8003010 <MX_SPI1_Init+0x64>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fc4:	4b12      	ldr	r3, [pc, #72]	; (8003010 <MX_SPI1_Init+0x64>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fca:	4b11      	ldr	r3, [pc, #68]	; (8003010 <MX_SPI1_Init+0x64>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <MX_SPI1_Init+0x64>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002fd6:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <MX_SPI1_Init+0x64>)
 8002fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002fde:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <MX_SPI1_Init+0x64>)
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <MX_SPI1_Init+0x64>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fea:	4b09      	ldr	r3, [pc, #36]	; (8003010 <MX_SPI1_Init+0x64>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ff0:	4b07      	ldr	r3, [pc, #28]	; (8003010 <MX_SPI1_Init+0x64>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <MX_SPI1_Init+0x64>)
 8002ff8:	220a      	movs	r2, #10
 8002ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ffc:	4804      	ldr	r0, [pc, #16]	; (8003010 <MX_SPI1_Init+0x64>)
 8002ffe:	f002 ffc3 	bl	8005f88 <HAL_SPI_Init>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003008:	f7ff f844 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800300c:	bf00      	nop
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20001838 	.word	0x20001838
 8003014:	40013000 	.word	0x40013000

08003018 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003020:	f107 0310 	add.w	r3, r7, #16
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a1b      	ldr	r2, [pc, #108]	; (80030a0 <HAL_SPI_MspInit+0x88>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d12f      	bne.n	8003098 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003038:	4b1a      	ldr	r3, [pc, #104]	; (80030a4 <HAL_SPI_MspInit+0x8c>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	4a19      	ldr	r2, [pc, #100]	; (80030a4 <HAL_SPI_MspInit+0x8c>)
 800303e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003042:	6193      	str	r3, [r2, #24]
 8003044:	4b17      	ldr	r3, [pc, #92]	; (80030a4 <HAL_SPI_MspInit+0x8c>)
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003050:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <HAL_SPI_MspInit+0x8c>)
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	4a13      	ldr	r2, [pc, #76]	; (80030a4 <HAL_SPI_MspInit+0x8c>)
 8003056:	f043 0304 	orr.w	r3, r3, #4
 800305a:	6193      	str	r3, [r2, #24]
 800305c:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <HAL_SPI_MspInit+0x8c>)
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003068:	23a0      	movs	r3, #160	; 0xa0
 800306a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306c:	2302      	movs	r3, #2
 800306e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003070:	2303      	movs	r3, #3
 8003072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003074:	f107 0310 	add.w	r3, r7, #16
 8003078:	4619      	mov	r1, r3
 800307a:	480b      	ldr	r0, [pc, #44]	; (80030a8 <HAL_SPI_MspInit+0x90>)
 800307c:	f001 f9ce 	bl	800441c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003080:	2340      	movs	r3, #64	; 0x40
 8003082:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308c:	f107 0310 	add.w	r3, r7, #16
 8003090:	4619      	mov	r1, r3
 8003092:	4805      	ldr	r0, [pc, #20]	; (80030a8 <HAL_SPI_MspInit+0x90>)
 8003094:	f001 f9c2 	bl	800441c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003098:	bf00      	nop
 800309a:	3720      	adds	r7, #32
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40013000 	.word	0x40013000
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40010800 	.word	0x40010800

080030ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <HAL_MspInit+0x5c>)
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	4a14      	ldr	r2, [pc, #80]	; (8003108 <HAL_MspInit+0x5c>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6193      	str	r3, [r2, #24]
 80030be:	4b12      	ldr	r3, [pc, #72]	; (8003108 <HAL_MspInit+0x5c>)
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ca:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <HAL_MspInit+0x5c>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	4a0e      	ldr	r2, [pc, #56]	; (8003108 <HAL_MspInit+0x5c>)
 80030d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d4:	61d3      	str	r3, [r2, #28]
 80030d6:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <HAL_MspInit+0x5c>)
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030de:	607b      	str	r3, [r7, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80030e2:	4b0a      	ldr	r3, [pc, #40]	; (800310c <HAL_MspInit+0x60>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	4a04      	ldr	r2, [pc, #16]	; (800310c <HAL_MspInit+0x60>)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030fe:	bf00      	nop
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr
 8003108:	40021000 	.word	0x40021000
 800310c:	40010000 	.word	0x40010000

08003110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003114:	e7fe      	b.n	8003114 <NMI_Handler+0x4>
	...

08003118 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 800311c:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <HardFault_Handler+0x30>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003124:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8003126:	4b08      	ldr	r3, [pc, #32]	; (8003148 <HardFault_Handler+0x30>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800312e:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,1000);
 8003130:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HardFault_Handler+0x30>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003138:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,1000);
 800313a:	4b03      	ldr	r3, [pc, #12]	; (8003148 <HardFault_Handler+0x30>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003142:	641a      	str	r2, [r3, #64]	; 0x40

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003144:	e7fe      	b.n	8003144 <HardFault_Handler+0x2c>
 8003146:	bf00      	nop
 8003148:	20001920 	.word	0x20001920

0800314c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003150:	e7fe      	b.n	8003150 <MemManage_Handler+0x4>

08003152 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003152:	b480      	push	{r7}
 8003154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003156:	e7fe      	b.n	8003156 <BusFault_Handler+0x4>

08003158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800315c:	e7fe      	b.n	800315c <UsageFault_Handler+0x4>

0800315e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr

0800316a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800316a:	b480      	push	{r7}
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003176:	b480      	push	{r7}
 8003178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr
	...

08003184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(timeout >0)  timeout--;
 8003188:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <SysTick_Handler+0x24>)
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d006      	beq.n	80031a0 <SysTick_Handler+0x1c>
 8003192:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <SysTick_Handler+0x24>)
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	4b02      	ldr	r3, [pc, #8]	; (80031a8 <SysTick_Handler+0x24>)
 800319e:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031a0:	f000 fd8a 	bl	8003cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031a4:	bf00      	nop
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	200017e0 	.word	0x200017e0

080031ac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80031b0:	4802      	ldr	r0, [pc, #8]	; (80031bc <DMA1_Channel5_IRQHandler+0x10>)
 80031b2:	f000 ffff 	bl	80041b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	200019f0 	.word	0x200019f0

080031c0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80031c4:	4802      	ldr	r0, [pc, #8]	; (80031d0 <DMA1_Channel7_IRQHandler+0x10>)
 80031c6:	f000 fff5 	bl	80041b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20001a34 	.word	0x20001a34

080031d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80031d8:	4802      	ldr	r0, [pc, #8]	; (80031e4 <TIM2_IRQHandler+0x10>)
 80031da:	f003 ff7d 	bl	80070d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20001968 	.word	0x20001968

080031e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031ec:	4802      	ldr	r0, [pc, #8]	; (80031f8 <TIM3_IRQHandler+0x10>)
 80031ee:	f003 ff73 	bl	80070d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200018d8 	.word	0x200018d8

080031fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003200:	4802      	ldr	r0, [pc, #8]	; (800320c <USART2_IRQHandler+0x10>)
 8003202:	f005 f9e7 	bl	80085d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20001ab8 	.word	0x20001ab8

08003210 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	  Uart_isr (&huart3);
 8003214:	4803      	ldr	r0, [pc, #12]	; (8003224 <USART3_IRQHandler+0x14>)
 8003216:	f7fd fcc3 	bl	8000ba0 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800321a:	4802      	ldr	r0, [pc, #8]	; (8003224 <USART3_IRQHandler+0x14>)
 800321c:	f005 f9da 	bl	80085d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003220:	bf00      	nop
 8003222:	bd80      	pop	{r7, pc}
 8003224:	200019b0 	.word	0x200019b0

08003228 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	e00a      	b.n	8003250 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800323a:	f3af 8000 	nop.w
 800323e:	4601      	mov	r1, r0
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	60ba      	str	r2, [r7, #8]
 8003246:	b2ca      	uxtb	r2, r1
 8003248:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	3301      	adds	r3, #1
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	429a      	cmp	r2, r3
 8003256:	dbf0      	blt.n	800323a <_read+0x12>
	}

return len;
 8003258:	687b      	ldr	r3, [r7, #4]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b086      	sub	sp, #24
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	e009      	b.n	8003288 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	60ba      	str	r2, [r7, #8]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	3301      	adds	r3, #1
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	429a      	cmp	r2, r3
 800328e:	dbf1      	blt.n	8003274 <_write+0x12>
	}
	return len;
 8003290:	687b      	ldr	r3, [r7, #4]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <_close>:

int _close(int file)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
	return -1;
 80032a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr

080032b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032c0:	605a      	str	r2, [r3, #4]
	return 0;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr

080032ce <_isatty>:

int _isatty(int file)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
	return 1;
 80032d6:	2301      	movs	r3, #1
}
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr

080032e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b085      	sub	sp, #20
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	607a      	str	r2, [r7, #4]
	return 0;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr
	...

080032fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003304:	4a14      	ldr	r2, [pc, #80]	; (8003358 <_sbrk+0x5c>)
 8003306:	4b15      	ldr	r3, [pc, #84]	; (800335c <_sbrk+0x60>)
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003310:	4b13      	ldr	r3, [pc, #76]	; (8003360 <_sbrk+0x64>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d102      	bne.n	800331e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003318:	4b11      	ldr	r3, [pc, #68]	; (8003360 <_sbrk+0x64>)
 800331a:	4a12      	ldr	r2, [pc, #72]	; (8003364 <_sbrk+0x68>)
 800331c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800331e:	4b10      	ldr	r3, [pc, #64]	; (8003360 <_sbrk+0x64>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4413      	add	r3, r2
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	429a      	cmp	r2, r3
 800332a:	d207      	bcs.n	800333c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800332c:	f006 f87c 	bl	8009428 <__errno>
 8003330:	4603      	mov	r3, r0
 8003332:	220c      	movs	r2, #12
 8003334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003336:	f04f 33ff 	mov.w	r3, #4294967295
 800333a:	e009      	b.n	8003350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800333c:	4b08      	ldr	r3, [pc, #32]	; (8003360 <_sbrk+0x64>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003342:	4b07      	ldr	r3, [pc, #28]	; (8003360 <_sbrk+0x64>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4413      	add	r3, r2
 800334a:	4a05      	ldr	r2, [pc, #20]	; (8003360 <_sbrk+0x64>)
 800334c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800334e:	68fb      	ldr	r3, [r7, #12]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20005000 	.word	0x20005000
 800335c:	00000400 	.word	0x00000400
 8003360:	200017cc 	.word	0x200017cc
 8003364:	20001b10 	.word	0x20001b10

08003368 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b092      	sub	sp, #72	; 0x48
 8003378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800337a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	60da      	str	r2, [r3, #12]
 8003392:	611a      	str	r2, [r3, #16]
 8003394:	615a      	str	r2, [r3, #20]
 8003396:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003398:	1d3b      	adds	r3, r7, #4
 800339a:	2220      	movs	r2, #32
 800339c:	2100      	movs	r1, #0
 800339e:	4618      	mov	r0, r3
 80033a0:	f006 f87a 	bl	8009498 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80033a4:	4b45      	ldr	r3, [pc, #276]	; (80034bc <MX_TIM1_Init+0x148>)
 80033a6:	4a46      	ldr	r2, [pc, #280]	; (80034c0 <MX_TIM1_Init+0x14c>)
 80033a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80033aa:	4b44      	ldr	r3, [pc, #272]	; (80034bc <MX_TIM1_Init+0x148>)
 80033ac:	2247      	movs	r2, #71	; 0x47
 80033ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033b0:	4b42      	ldr	r3, [pc, #264]	; (80034bc <MX_TIM1_Init+0x148>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80033b6:	4b41      	ldr	r3, [pc, #260]	; (80034bc <MX_TIM1_Init+0x148>)
 80033b8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80033bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033be:	4b3f      	ldr	r3, [pc, #252]	; (80034bc <MX_TIM1_Init+0x148>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80033c4:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <MX_TIM1_Init+0x148>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ca:	4b3c      	ldr	r3, [pc, #240]	; (80034bc <MX_TIM1_Init+0x148>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80033d0:	483a      	ldr	r0, [pc, #232]	; (80034bc <MX_TIM1_Init+0x148>)
 80033d2:	f003 fc31 	bl	8006c38 <HAL_TIM_PWM_Init>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80033dc:	f7fe fe5a 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033e0:	2300      	movs	r3, #0
 80033e2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033e4:	2300      	movs	r3, #0
 80033e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033ec:	4619      	mov	r1, r3
 80033ee:	4833      	ldr	r0, [pc, #204]	; (80034bc <MX_TIM1_Init+0x148>)
 80033f0:	f004 fe40 	bl	8008074 <HAL_TIMEx_MasterConfigSynchronization>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80033fa:	f7fe fe4b 	bl	8002094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033fe:	2360      	movs	r3, #96	; 0x60
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003402:	2300      	movs	r3, #0
 8003404:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003406:	2300      	movs	r3, #0
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800340a:	2300      	movs	r3, #0
 800340c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800340e:	2300      	movs	r3, #0
 8003410:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003412:	2300      	movs	r3, #0
 8003414:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003416:	2300      	movs	r3, #0
 8003418:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800341a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800341e:	2200      	movs	r2, #0
 8003420:	4619      	mov	r1, r3
 8003422:	4826      	ldr	r0, [pc, #152]	; (80034bc <MX_TIM1_Init+0x148>)
 8003424:	f003 fff4 	bl	8007410 <HAL_TIM_PWM_ConfigChannel>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800342e:	f7fe fe31 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003436:	2204      	movs	r2, #4
 8003438:	4619      	mov	r1, r3
 800343a:	4820      	ldr	r0, [pc, #128]	; (80034bc <MX_TIM1_Init+0x148>)
 800343c:	f003 ffe8 	bl	8007410 <HAL_TIM_PWM_ConfigChannel>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8003446:	f7fe fe25 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800344a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800344e:	2208      	movs	r2, #8
 8003450:	4619      	mov	r1, r3
 8003452:	481a      	ldr	r0, [pc, #104]	; (80034bc <MX_TIM1_Init+0x148>)
 8003454:	f003 ffdc 	bl	8007410 <HAL_TIM_PWM_ConfigChannel>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800345e:	f7fe fe19 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003466:	220c      	movs	r2, #12
 8003468:	4619      	mov	r1, r3
 800346a:	4814      	ldr	r0, [pc, #80]	; (80034bc <MX_TIM1_Init+0x148>)
 800346c:	f003 ffd0 	bl	8007410 <HAL_TIM_PWM_ConfigChannel>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8003476:	f7fe fe0d 	bl	8002094 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800347a:	2300      	movs	r3, #0
 800347c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800347e:	2300      	movs	r3, #0
 8003480:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800348e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003492:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003494:	2300      	movs	r3, #0
 8003496:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003498:	1d3b      	adds	r3, r7, #4
 800349a:	4619      	mov	r1, r3
 800349c:	4807      	ldr	r0, [pc, #28]	; (80034bc <MX_TIM1_Init+0x148>)
 800349e:	f004 fe47 	bl	8008130 <HAL_TIMEx_ConfigBreakDeadTime>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80034a8:	f7fe fdf4 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80034ac:	4803      	ldr	r0, [pc, #12]	; (80034bc <MX_TIM1_Init+0x148>)
 80034ae:	f000 f9a5 	bl	80037fc <HAL_TIM_MspPostInit>

}
 80034b2:	bf00      	nop
 80034b4:	3748      	adds	r7, #72	; 0x48
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20001920 	.word	0x20001920
 80034c0:	40012c00 	.word	0x40012c00

080034c4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034ca:	f107 0308 	add.w	r3, r7, #8
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	605a      	str	r2, [r3, #4]
 80034d4:	609a      	str	r2, [r3, #8]
 80034d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034d8:	463b      	mov	r3, r7
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034e0:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <MX_TIM2_Init+0x94>)
 80034e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80034e8:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <MX_TIM2_Init+0x94>)
 80034ea:	2247      	movs	r2, #71	; 0x47
 80034ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ee:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <MX_TIM2_Init+0x94>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 80034f4:	4b18      	ldr	r3, [pc, #96]	; (8003558 <MX_TIM2_Init+0x94>)
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034fc:	4b16      	ldr	r3, [pc, #88]	; (8003558 <MX_TIM2_Init+0x94>)
 80034fe:	2200      	movs	r2, #0
 8003500:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <MX_TIM2_Init+0x94>)
 8003504:	2200      	movs	r2, #0
 8003506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003508:	4813      	ldr	r0, [pc, #76]	; (8003558 <MX_TIM2_Init+0x94>)
 800350a:	f003 faa9 	bl	8006a60 <HAL_TIM_Base_Init>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003514:	f7fe fdbe 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800351c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800351e:	f107 0308 	add.w	r3, r7, #8
 8003522:	4619      	mov	r1, r3
 8003524:	480c      	ldr	r0, [pc, #48]	; (8003558 <MX_TIM2_Init+0x94>)
 8003526:	f004 f831 	bl	800758c <HAL_TIM_ConfigClockSource>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003530:	f7fe fdb0 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003534:	2300      	movs	r3, #0
 8003536:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003538:	2300      	movs	r3, #0
 800353a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800353c:	463b      	mov	r3, r7
 800353e:	4619      	mov	r1, r3
 8003540:	4805      	ldr	r0, [pc, #20]	; (8003558 <MX_TIM2_Init+0x94>)
 8003542:	f004 fd97 	bl	8008074 <HAL_TIMEx_MasterConfigSynchronization>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800354c:	f7fe fda2 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003550:	bf00      	nop
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20001968 	.word	0x20001968

0800355c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08a      	sub	sp, #40	; 0x28
 8003560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003562:	f107 0318 	add.w	r3, r7, #24
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	605a      	str	r2, [r3, #4]
 800356c:	609a      	str	r2, [r3, #8]
 800356e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003570:	f107 0310 	add.w	r3, r7, #16
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800357a:	463b      	mov	r3, r7
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003586:	4b2b      	ldr	r3, [pc, #172]	; (8003634 <MX_TIM3_Init+0xd8>)
 8003588:	4a2b      	ldr	r2, [pc, #172]	; (8003638 <MX_TIM3_Init+0xdc>)
 800358a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800358c:	4b29      	ldr	r3, [pc, #164]	; (8003634 <MX_TIM3_Init+0xd8>)
 800358e:	2247      	movs	r2, #71	; 0x47
 8003590:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003592:	4b28      	ldr	r3, [pc, #160]	; (8003634 <MX_TIM3_Init+0xd8>)
 8003594:	2200      	movs	r2, #0
 8003596:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003598:	4b26      	ldr	r3, [pc, #152]	; (8003634 <MX_TIM3_Init+0xd8>)
 800359a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800359e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035a0:	4b24      	ldr	r3, [pc, #144]	; (8003634 <MX_TIM3_Init+0xd8>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035a6:	4b23      	ldr	r3, [pc, #140]	; (8003634 <MX_TIM3_Init+0xd8>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035ac:	4821      	ldr	r0, [pc, #132]	; (8003634 <MX_TIM3_Init+0xd8>)
 80035ae:	f003 fa57 	bl	8006a60 <HAL_TIM_Base_Init>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80035b8:	f7fe fd6c 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035c0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035c2:	f107 0318 	add.w	r3, r7, #24
 80035c6:	4619      	mov	r1, r3
 80035c8:	481a      	ldr	r0, [pc, #104]	; (8003634 <MX_TIM3_Init+0xd8>)
 80035ca:	f003 ffdf 	bl	800758c <HAL_TIM_ConfigClockSource>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80035d4:	f7fe fd5e 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80035d8:	4816      	ldr	r0, [pc, #88]	; (8003634 <MX_TIM3_Init+0xd8>)
 80035da:	f003 fc1f 	bl	8006e1c <HAL_TIM_IC_Init>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80035e4:	f7fe fd56 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035e8:	2300      	movs	r3, #0
 80035ea:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035f0:	f107 0310 	add.w	r3, r7, #16
 80035f4:	4619      	mov	r1, r3
 80035f6:	480f      	ldr	r0, [pc, #60]	; (8003634 <MX_TIM3_Init+0xd8>)
 80035f8:	f004 fd3c 	bl	8008074 <HAL_TIMEx_MasterConfigSynchronization>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8003602:	f7fe fd47 	bl	8002094 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003606:	2300      	movs	r3, #0
 8003608:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800360a:	2301      	movs	r3, #1
 800360c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800360e:	2300      	movs	r3, #0
 8003610:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003616:	463b      	mov	r3, r7
 8003618:	2208      	movs	r2, #8
 800361a:	4619      	mov	r1, r3
 800361c:	4805      	ldr	r0, [pc, #20]	; (8003634 <MX_TIM3_Init+0xd8>)
 800361e:	f003 fe63 	bl	80072e8 <HAL_TIM_IC_ConfigChannel>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8003628:	f7fe fd34 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800362c:	bf00      	nop
 800362e:	3728      	adds	r7, #40	; 0x28
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	200018d8 	.word	0x200018d8
 8003638:	40000400 	.word	0x40000400

0800363c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003642:	f107 0308 	add.w	r3, r7, #8
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	605a      	str	r2, [r3, #4]
 800364c:	609a      	str	r2, [r3, #8]
 800364e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003650:	463b      	mov	r3, r7
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003658:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <MX_TIM4_Init+0x94>)
 800365a:	4a1e      	ldr	r2, [pc, #120]	; (80036d4 <MX_TIM4_Init+0x98>)
 800365c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 800365e:	4b1c      	ldr	r3, [pc, #112]	; (80036d0 <MX_TIM4_Init+0x94>)
 8003660:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8003664:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003666:	4b1a      	ldr	r3, [pc, #104]	; (80036d0 <MX_TIM4_Init+0x94>)
 8003668:	2200      	movs	r2, #0
 800366a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800366c:	4b18      	ldr	r3, [pc, #96]	; (80036d0 <MX_TIM4_Init+0x94>)
 800366e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003672:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003674:	4b16      	ldr	r3, [pc, #88]	; (80036d0 <MX_TIM4_Init+0x94>)
 8003676:	2200      	movs	r2, #0
 8003678:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800367a:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <MX_TIM4_Init+0x94>)
 800367c:	2200      	movs	r2, #0
 800367e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003680:	4813      	ldr	r0, [pc, #76]	; (80036d0 <MX_TIM4_Init+0x94>)
 8003682:	f003 f9ed 	bl	8006a60 <HAL_TIM_Base_Init>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800368c:	f7fe fd02 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003694:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003696:	f107 0308 	add.w	r3, r7, #8
 800369a:	4619      	mov	r1, r3
 800369c:	480c      	ldr	r0, [pc, #48]	; (80036d0 <MX_TIM4_Init+0x94>)
 800369e:	f003 ff75 	bl	800758c <HAL_TIM_ConfigClockSource>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80036a8:	f7fe fcf4 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036ac:	2300      	movs	r3, #0
 80036ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036b0:	2300      	movs	r3, #0
 80036b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80036b4:	463b      	mov	r3, r7
 80036b6:	4619      	mov	r1, r3
 80036b8:	4805      	ldr	r0, [pc, #20]	; (80036d0 <MX_TIM4_Init+0x94>)
 80036ba:	f004 fcdb 	bl	8008074 <HAL_TIMEx_MasterConfigSynchronization>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80036c4:	f7fe fce6 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80036c8:	bf00      	nop
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20001890 	.word	0x20001890
 80036d4:	40000800 	.word	0x40000800

080036d8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a09      	ldr	r2, [pc, #36]	; (800370c <HAL_TIM_PWM_MspInit+0x34>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d10b      	bne.n	8003702 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036ea:	4b09      	ldr	r3, [pc, #36]	; (8003710 <HAL_TIM_PWM_MspInit+0x38>)
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	4a08      	ldr	r2, [pc, #32]	; (8003710 <HAL_TIM_PWM_MspInit+0x38>)
 80036f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036f4:	6193      	str	r3, [r2, #24]
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_TIM_PWM_MspInit+0x38>)
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003702:	bf00      	nop
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	40012c00 	.word	0x40012c00
 8003710:	40021000 	.word	0x40021000

08003714 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08a      	sub	sp, #40	; 0x28
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800371c:	f107 0318 	add.w	r3, r7, #24
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003732:	d114      	bne.n	800375e <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003734:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <HAL_TIM_Base_MspInit+0xd8>)
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	4a2c      	ldr	r2, [pc, #176]	; (80037ec <HAL_TIM_Base_MspInit+0xd8>)
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	61d3      	str	r3, [r2, #28]
 8003740:	4b2a      	ldr	r3, [pc, #168]	; (80037ec <HAL_TIM_Base_MspInit+0xd8>)
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800374c:	2200      	movs	r2, #0
 800374e:	2101      	movs	r1, #1
 8003750:	201c      	movs	r0, #28
 8003752:	f000 fbc8 	bl	8003ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003756:	201c      	movs	r0, #28
 8003758:	f000 fbe1 	bl	8003f1e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800375c:	e042      	b.n	80037e4 <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM3)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a23      	ldr	r2, [pc, #140]	; (80037f0 <HAL_TIM_Base_MspInit+0xdc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d12c      	bne.n	80037c2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003768:	4b20      	ldr	r3, [pc, #128]	; (80037ec <HAL_TIM_Base_MspInit+0xd8>)
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	4a1f      	ldr	r2, [pc, #124]	; (80037ec <HAL_TIM_Base_MspInit+0xd8>)
 800376e:	f043 0302 	orr.w	r3, r3, #2
 8003772:	61d3      	str	r3, [r2, #28]
 8003774:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <HAL_TIM_Base_MspInit+0xd8>)
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003780:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <HAL_TIM_Base_MspInit+0xd8>)
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	4a19      	ldr	r2, [pc, #100]	; (80037ec <HAL_TIM_Base_MspInit+0xd8>)
 8003786:	f043 0308 	orr.w	r3, r3, #8
 800378a:	6193      	str	r3, [r2, #24]
 800378c:	4b17      	ldr	r3, [pc, #92]	; (80037ec <HAL_TIM_Base_MspInit+0xd8>)
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003798:	2301      	movs	r3, #1
 800379a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800379c:	2300      	movs	r3, #0
 800379e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a4:	f107 0318 	add.w	r3, r7, #24
 80037a8:	4619      	mov	r1, r3
 80037aa:	4812      	ldr	r0, [pc, #72]	; (80037f4 <HAL_TIM_Base_MspInit+0xe0>)
 80037ac:	f000 fe36 	bl	800441c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80037b0:	2200      	movs	r2, #0
 80037b2:	2100      	movs	r1, #0
 80037b4:	201d      	movs	r0, #29
 80037b6:	f000 fb96 	bl	8003ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80037ba:	201d      	movs	r0, #29
 80037bc:	f000 fbaf 	bl	8003f1e <HAL_NVIC_EnableIRQ>
}
 80037c0:	e010      	b.n	80037e4 <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM4)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a0c      	ldr	r2, [pc, #48]	; (80037f8 <HAL_TIM_Base_MspInit+0xe4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d10b      	bne.n	80037e4 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037cc:	4b07      	ldr	r3, [pc, #28]	; (80037ec <HAL_TIM_Base_MspInit+0xd8>)
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	4a06      	ldr	r2, [pc, #24]	; (80037ec <HAL_TIM_Base_MspInit+0xd8>)
 80037d2:	f043 0304 	orr.w	r3, r3, #4
 80037d6:	61d3      	str	r3, [r2, #28]
 80037d8:	4b04      	ldr	r3, [pc, #16]	; (80037ec <HAL_TIM_Base_MspInit+0xd8>)
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	68bb      	ldr	r3, [r7, #8]
}
 80037e4:	bf00      	nop
 80037e6:	3728      	adds	r7, #40	; 0x28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40000400 	.word	0x40000400
 80037f4:	40010c00 	.word	0x40010c00
 80037f8:	40000800 	.word	0x40000800

080037fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003804:	f107 0310 	add.w	r3, r7, #16
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a1c      	ldr	r2, [pc, #112]	; (8003888 <HAL_TIM_MspPostInit+0x8c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d131      	bne.n	8003880 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800381c:	4b1b      	ldr	r3, [pc, #108]	; (800388c <HAL_TIM_MspPostInit+0x90>)
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	4a1a      	ldr	r2, [pc, #104]	; (800388c <HAL_TIM_MspPostInit+0x90>)
 8003822:	f043 0308 	orr.w	r3, r3, #8
 8003826:	6193      	str	r3, [r2, #24]
 8003828:	4b18      	ldr	r3, [pc, #96]	; (800388c <HAL_TIM_MspPostInit+0x90>)
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003834:	4b15      	ldr	r3, [pc, #84]	; (800388c <HAL_TIM_MspPostInit+0x90>)
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	4a14      	ldr	r2, [pc, #80]	; (800388c <HAL_TIM_MspPostInit+0x90>)
 800383a:	f043 0304 	orr.w	r3, r3, #4
 800383e:	6193      	str	r3, [r2, #24]
 8003840:	4b12      	ldr	r3, [pc, #72]	; (800388c <HAL_TIM_MspPostInit+0x90>)
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	68bb      	ldr	r3, [r7, #8]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800384c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003850:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003852:	2302      	movs	r3, #2
 8003854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003856:	2302      	movs	r3, #2
 8003858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800385a:	f107 0310 	add.w	r3, r7, #16
 800385e:	4619      	mov	r1, r3
 8003860:	480b      	ldr	r0, [pc, #44]	; (8003890 <HAL_TIM_MspPostInit+0x94>)
 8003862:	f000 fddb 	bl	800441c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8003866:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800386a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386c:	2302      	movs	r3, #2
 800386e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003870:	2302      	movs	r3, #2
 8003872:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003874:	f107 0310 	add.w	r3, r7, #16
 8003878:	4619      	mov	r1, r3
 800387a:	4806      	ldr	r0, [pc, #24]	; (8003894 <HAL_TIM_MspPostInit+0x98>)
 800387c:	f000 fdce 	bl	800441c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003880:	bf00      	nop
 8003882:	3720      	adds	r7, #32
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40012c00 	.word	0x40012c00
 800388c:	40021000 	.word	0x40021000
 8003890:	40010c00 	.word	0x40010c00
 8003894:	40010800 	.word	0x40010800

08003898 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800389c:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <MX_USART1_UART_Init+0x4c>)
 800389e:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <MX_USART1_UART_Init+0x50>)
 80038a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80038a2:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <MX_USART1_UART_Init+0x4c>)
 80038a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80038a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <MX_USART1_UART_Init+0x4c>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80038b0:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <MX_USART1_UART_Init+0x4c>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80038b6:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <MX_USART1_UART_Init+0x4c>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80038bc:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <MX_USART1_UART_Init+0x4c>)
 80038be:	220c      	movs	r2, #12
 80038c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038c2:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <MX_USART1_UART_Init+0x4c>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <MX_USART1_UART_Init+0x4c>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80038ce:	4805      	ldr	r0, [pc, #20]	; (80038e4 <MX_USART1_UART_Init+0x4c>)
 80038d0:	f004 fcb5 	bl	800823e <HAL_UART_Init>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80038da:	f7fe fbdb 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20001a78 	.word	0x20001a78
 80038e8:	40013800 	.word	0x40013800

080038ec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <MX_USART2_UART_Init+0x4c>)
 80038f2:	4a12      	ldr	r2, [pc, #72]	; (800393c <MX_USART2_UART_Init+0x50>)
 80038f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <MX_USART2_UART_Init+0x4c>)
 80038f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80038fe:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <MX_USART2_UART_Init+0x4c>)
 8003900:	2200      	movs	r2, #0
 8003902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003904:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <MX_USART2_UART_Init+0x4c>)
 8003906:	2200      	movs	r2, #0
 8003908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800390a:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <MX_USART2_UART_Init+0x4c>)
 800390c:	2200      	movs	r2, #0
 800390e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003910:	4b09      	ldr	r3, [pc, #36]	; (8003938 <MX_USART2_UART_Init+0x4c>)
 8003912:	220c      	movs	r2, #12
 8003914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003916:	4b08      	ldr	r3, [pc, #32]	; (8003938 <MX_USART2_UART_Init+0x4c>)
 8003918:	2200      	movs	r2, #0
 800391a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <MX_USART2_UART_Init+0x4c>)
 800391e:	2200      	movs	r2, #0
 8003920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003922:	4805      	ldr	r0, [pc, #20]	; (8003938 <MX_USART2_UART_Init+0x4c>)
 8003924:	f004 fc8b 	bl	800823e <HAL_UART_Init>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800392e:	f7fe fbb1 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003932:	bf00      	nop
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20001ab8 	.word	0x20001ab8
 800393c:	40004400 	.word	0x40004400

08003940 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003944:	4b11      	ldr	r3, [pc, #68]	; (800398c <MX_USART3_UART_Init+0x4c>)
 8003946:	4a12      	ldr	r2, [pc, #72]	; (8003990 <MX_USART3_UART_Init+0x50>)
 8003948:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800394a:	4b10      	ldr	r3, [pc, #64]	; (800398c <MX_USART3_UART_Init+0x4c>)
 800394c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003950:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003952:	4b0e      	ldr	r3, [pc, #56]	; (800398c <MX_USART3_UART_Init+0x4c>)
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003958:	4b0c      	ldr	r3, [pc, #48]	; (800398c <MX_USART3_UART_Init+0x4c>)
 800395a:	2200      	movs	r2, #0
 800395c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800395e:	4b0b      	ldr	r3, [pc, #44]	; (800398c <MX_USART3_UART_Init+0x4c>)
 8003960:	2200      	movs	r2, #0
 8003962:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003964:	4b09      	ldr	r3, [pc, #36]	; (800398c <MX_USART3_UART_Init+0x4c>)
 8003966:	220c      	movs	r2, #12
 8003968:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800396a:	4b08      	ldr	r3, [pc, #32]	; (800398c <MX_USART3_UART_Init+0x4c>)
 800396c:	2200      	movs	r2, #0
 800396e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003970:	4b06      	ldr	r3, [pc, #24]	; (800398c <MX_USART3_UART_Init+0x4c>)
 8003972:	2200      	movs	r2, #0
 8003974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003976:	4805      	ldr	r0, [pc, #20]	; (800398c <MX_USART3_UART_Init+0x4c>)
 8003978:	f004 fc61 	bl	800823e <HAL_UART_Init>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003982:	f7fe fb87 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003986:	bf00      	nop
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	200019b0 	.word	0x200019b0
 8003990:	40004800 	.word	0x40004800

08003994 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08c      	sub	sp, #48	; 0x30
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800399c:	f107 0320 	add.w	r3, r7, #32
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a82      	ldr	r2, [pc, #520]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d159      	bne.n	8003a68 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039b4:	4b81      	ldr	r3, [pc, #516]	; (8003bbc <HAL_UART_MspInit+0x228>)
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	4a80      	ldr	r2, [pc, #512]	; (8003bbc <HAL_UART_MspInit+0x228>)
 80039ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039be:	6193      	str	r3, [r2, #24]
 80039c0:	4b7e      	ldr	r3, [pc, #504]	; (8003bbc <HAL_UART_MspInit+0x228>)
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039cc:	4b7b      	ldr	r3, [pc, #492]	; (8003bbc <HAL_UART_MspInit+0x228>)
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	4a7a      	ldr	r2, [pc, #488]	; (8003bbc <HAL_UART_MspInit+0x228>)
 80039d2:	f043 0304 	orr.w	r3, r3, #4
 80039d6:	6193      	str	r3, [r2, #24]
 80039d8:	4b78      	ldr	r3, [pc, #480]	; (8003bbc <HAL_UART_MspInit+0x228>)
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80039e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ea:	2302      	movs	r3, #2
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039ee:	2303      	movs	r3, #3
 80039f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f2:	f107 0320 	add.w	r3, r7, #32
 80039f6:	4619      	mov	r1, r3
 80039f8:	4871      	ldr	r0, [pc, #452]	; (8003bc0 <HAL_UART_MspInit+0x22c>)
 80039fa:	f000 fd0f 	bl	800441c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80039fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a04:	2300      	movs	r3, #0
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a0c:	f107 0320 	add.w	r3, r7, #32
 8003a10:	4619      	mov	r1, r3
 8003a12:	486b      	ldr	r0, [pc, #428]	; (8003bc0 <HAL_UART_MspInit+0x22c>)
 8003a14:	f000 fd02 	bl	800441c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003a18:	4b6a      	ldr	r3, [pc, #424]	; (8003bc4 <HAL_UART_MspInit+0x230>)
 8003a1a:	4a6b      	ldr	r2, [pc, #428]	; (8003bc8 <HAL_UART_MspInit+0x234>)
 8003a1c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a1e:	4b69      	ldr	r3, [pc, #420]	; (8003bc4 <HAL_UART_MspInit+0x230>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a24:	4b67      	ldr	r3, [pc, #412]	; (8003bc4 <HAL_UART_MspInit+0x230>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a2a:	4b66      	ldr	r3, [pc, #408]	; (8003bc4 <HAL_UART_MspInit+0x230>)
 8003a2c:	2280      	movs	r2, #128	; 0x80
 8003a2e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a30:	4b64      	ldr	r3, [pc, #400]	; (8003bc4 <HAL_UART_MspInit+0x230>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a36:	4b63      	ldr	r3, [pc, #396]	; (8003bc4 <HAL_UART_MspInit+0x230>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003a3c:	4b61      	ldr	r3, [pc, #388]	; (8003bc4 <HAL_UART_MspInit+0x230>)
 8003a3e:	2220      	movs	r2, #32
 8003a40:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003a42:	4b60      	ldr	r3, [pc, #384]	; (8003bc4 <HAL_UART_MspInit+0x230>)
 8003a44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a48:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003a4a:	485e      	ldr	r0, [pc, #376]	; (8003bc4 <HAL_UART_MspInit+0x230>)
 8003a4c:	f000 fa82 	bl	8003f54 <HAL_DMA_Init>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8003a56:	f7fe fb1d 	bl	8002094 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a59      	ldr	r2, [pc, #356]	; (8003bc4 <HAL_UART_MspInit+0x230>)
 8003a5e:	635a      	str	r2, [r3, #52]	; 0x34
 8003a60:	4a58      	ldr	r2, [pc, #352]	; (8003bc4 <HAL_UART_MspInit+0x230>)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003a66:	e0a3      	b.n	8003bb0 <HAL_UART_MspInit+0x21c>
  else if(uartHandle->Instance==USART2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a57      	ldr	r2, [pc, #348]	; (8003bcc <HAL_UART_MspInit+0x238>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d15f      	bne.n	8003b32 <HAL_UART_MspInit+0x19e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a72:	4b52      	ldr	r3, [pc, #328]	; (8003bbc <HAL_UART_MspInit+0x228>)
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	4a51      	ldr	r2, [pc, #324]	; (8003bbc <HAL_UART_MspInit+0x228>)
 8003a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a7c:	61d3      	str	r3, [r2, #28]
 8003a7e:	4b4f      	ldr	r3, [pc, #316]	; (8003bbc <HAL_UART_MspInit+0x228>)
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8a:	4b4c      	ldr	r3, [pc, #304]	; (8003bbc <HAL_UART_MspInit+0x228>)
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	4a4b      	ldr	r2, [pc, #300]	; (8003bbc <HAL_UART_MspInit+0x228>)
 8003a90:	f043 0304 	orr.w	r3, r3, #4
 8003a94:	6193      	str	r3, [r2, #24]
 8003a96:	4b49      	ldr	r3, [pc, #292]	; (8003bbc <HAL_UART_MspInit+0x228>)
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003aa2:	2304      	movs	r3, #4
 8003aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aae:	f107 0320 	add.w	r3, r7, #32
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4842      	ldr	r0, [pc, #264]	; (8003bc0 <HAL_UART_MspInit+0x22c>)
 8003ab6:	f000 fcb1 	bl	800441c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003aba:	2308      	movs	r3, #8
 8003abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac6:	f107 0320 	add.w	r3, r7, #32
 8003aca:	4619      	mov	r1, r3
 8003acc:	483c      	ldr	r0, [pc, #240]	; (8003bc0 <HAL_UART_MspInit+0x22c>)
 8003ace:	f000 fca5 	bl	800441c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003ad2:	4b3f      	ldr	r3, [pc, #252]	; (8003bd0 <HAL_UART_MspInit+0x23c>)
 8003ad4:	4a3f      	ldr	r2, [pc, #252]	; (8003bd4 <HAL_UART_MspInit+0x240>)
 8003ad6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ad8:	4b3d      	ldr	r3, [pc, #244]	; (8003bd0 <HAL_UART_MspInit+0x23c>)
 8003ada:	2210      	movs	r2, #16
 8003adc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ade:	4b3c      	ldr	r3, [pc, #240]	; (8003bd0 <HAL_UART_MspInit+0x23c>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ae4:	4b3a      	ldr	r3, [pc, #232]	; (8003bd0 <HAL_UART_MspInit+0x23c>)
 8003ae6:	2280      	movs	r2, #128	; 0x80
 8003ae8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003aea:	4b39      	ldr	r3, [pc, #228]	; (8003bd0 <HAL_UART_MspInit+0x23c>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003af0:	4b37      	ldr	r3, [pc, #220]	; (8003bd0 <HAL_UART_MspInit+0x23c>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003af6:	4b36      	ldr	r3, [pc, #216]	; (8003bd0 <HAL_UART_MspInit+0x23c>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003afc:	4b34      	ldr	r3, [pc, #208]	; (8003bd0 <HAL_UART_MspInit+0x23c>)
 8003afe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b02:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003b04:	4832      	ldr	r0, [pc, #200]	; (8003bd0 <HAL_UART_MspInit+0x23c>)
 8003b06:	f000 fa25 	bl	8003f54 <HAL_DMA_Init>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8003b10:	f7fe fac0 	bl	8002094 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a2e      	ldr	r2, [pc, #184]	; (8003bd0 <HAL_UART_MspInit+0x23c>)
 8003b18:	631a      	str	r2, [r3, #48]	; 0x30
 8003b1a:	4a2d      	ldr	r2, [pc, #180]	; (8003bd0 <HAL_UART_MspInit+0x23c>)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b20:	2200      	movs	r2, #0
 8003b22:	2100      	movs	r1, #0
 8003b24:	2026      	movs	r0, #38	; 0x26
 8003b26:	f000 f9de 	bl	8003ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b2a:	2026      	movs	r0, #38	; 0x26
 8003b2c:	f000 f9f7 	bl	8003f1e <HAL_NVIC_EnableIRQ>
}
 8003b30:	e03e      	b.n	8003bb0 <HAL_UART_MspInit+0x21c>
  else if(uartHandle->Instance==USART3)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a28      	ldr	r2, [pc, #160]	; (8003bd8 <HAL_UART_MspInit+0x244>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d139      	bne.n	8003bb0 <HAL_UART_MspInit+0x21c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b3c:	4b1f      	ldr	r3, [pc, #124]	; (8003bbc <HAL_UART_MspInit+0x228>)
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	4a1e      	ldr	r2, [pc, #120]	; (8003bbc <HAL_UART_MspInit+0x228>)
 8003b42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b46:	61d3      	str	r3, [r2, #28]
 8003b48:	4b1c      	ldr	r3, [pc, #112]	; (8003bbc <HAL_UART_MspInit+0x228>)
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b54:	4b19      	ldr	r3, [pc, #100]	; (8003bbc <HAL_UART_MspInit+0x228>)
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	4a18      	ldr	r2, [pc, #96]	; (8003bbc <HAL_UART_MspInit+0x228>)
 8003b5a:	f043 0308 	orr.w	r3, r3, #8
 8003b5e:	6193      	str	r3, [r2, #24]
 8003b60:	4b16      	ldr	r3, [pc, #88]	; (8003bbc <HAL_UART_MspInit+0x228>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b72:	2302      	movs	r3, #2
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b76:	2303      	movs	r3, #3
 8003b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b7a:	f107 0320 	add.w	r3, r7, #32
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4816      	ldr	r0, [pc, #88]	; (8003bdc <HAL_UART_MspInit+0x248>)
 8003b82:	f000 fc4b 	bl	800441c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003b86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b94:	f107 0320 	add.w	r3, r7, #32
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4810      	ldr	r0, [pc, #64]	; (8003bdc <HAL_UART_MspInit+0x248>)
 8003b9c:	f000 fc3e 	bl	800441c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	2027      	movs	r0, #39	; 0x27
 8003ba6:	f000 f99e 	bl	8003ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003baa:	2027      	movs	r0, #39	; 0x27
 8003bac:	f000 f9b7 	bl	8003f1e <HAL_NVIC_EnableIRQ>
}
 8003bb0:	bf00      	nop
 8003bb2:	3730      	adds	r7, #48	; 0x30
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40013800 	.word	0x40013800
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40010800 	.word	0x40010800
 8003bc4:	200019f0 	.word	0x200019f0
 8003bc8:	40020058 	.word	0x40020058
 8003bcc:	40004400 	.word	0x40004400
 8003bd0:	20001a34 	.word	0x20001a34
 8003bd4:	40020080 	.word	0x40020080
 8003bd8:	40004800 	.word	0x40004800
 8003bdc:	40010c00 	.word	0x40010c00

08003be0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003be0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003be2:	e003      	b.n	8003bec <LoopCopyDataInit>

08003be4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003be4:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003be6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003be8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003bea:	3104      	adds	r1, #4

08003bec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003bec:	480a      	ldr	r0, [pc, #40]	; (8003c18 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003bee:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003bf0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003bf2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003bf4:	d3f6      	bcc.n	8003be4 <CopyDataInit>
  ldr r2, =_sbss
 8003bf6:	4a0a      	ldr	r2, [pc, #40]	; (8003c20 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003bf8:	e002      	b.n	8003c00 <LoopFillZerobss>

08003bfa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003bfa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003bfc:	f842 3b04 	str.w	r3, [r2], #4

08003c00 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003c00:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003c02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003c04:	d3f9      	bcc.n	8003bfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c06:	f7ff fbaf 	bl	8003368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c0a:	f005 fc13 	bl	8009434 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c0e:	f7fd fb95 	bl	800133c <main>
  bx lr
 8003c12:	4770      	bx	lr
  ldr r3, =_sidata
 8003c14:	0800b0b0 	.word	0x0800b0b0
  ldr r0, =_sdata
 8003c18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003c1c:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8003c20:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8003c24:	20001b0c 	.word	0x20001b0c

08003c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c28:	e7fe      	b.n	8003c28 <ADC1_2_IRQHandler>
	...

08003c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c30:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <HAL_Init+0x28>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a07      	ldr	r2, [pc, #28]	; (8003c54 <HAL_Init+0x28>)
 8003c36:	f043 0310 	orr.w	r3, r3, #16
 8003c3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c3c:	2003      	movs	r0, #3
 8003c3e:	f000 f947 	bl	8003ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c42:	2000      	movs	r0, #0
 8003c44:	f000 f808 	bl	8003c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c48:	f7ff fa30 	bl	80030ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40022000 	.word	0x40022000

08003c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c60:	4b12      	ldr	r3, [pc, #72]	; (8003cac <HAL_InitTick+0x54>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <HAL_InitTick+0x58>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	4619      	mov	r1, r3
 8003c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 f95f 	bl	8003f3a <HAL_SYSTICK_Config>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e00e      	b.n	8003ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b0f      	cmp	r3, #15
 8003c8a:	d80a      	bhi.n	8003ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	f04f 30ff 	mov.w	r0, #4294967295
 8003c94:	f000 f927 	bl	8003ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c98:	4a06      	ldr	r2, [pc, #24]	; (8003cb4 <HAL_InitTick+0x5c>)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e000      	b.n	8003ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20000008 	.word	0x20000008
 8003cb0:	20000010 	.word	0x20000010
 8003cb4:	2000000c 	.word	0x2000000c

08003cb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <HAL_IncTick+0x1c>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <HAL_IncTick+0x20>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	4a03      	ldr	r2, [pc, #12]	; (8003cd8 <HAL_IncTick+0x20>)
 8003cca:	6013      	str	r3, [r2, #0]
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr
 8003cd4:	20000010 	.word	0x20000010
 8003cd8:	20001af8 	.word	0x20001af8

08003cdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return uwTick;
 8003ce0:	4b02      	ldr	r3, [pc, #8]	; (8003cec <HAL_GetTick+0x10>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr
 8003cec:	20001af8 	.word	0x20001af8

08003cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cf8:	f7ff fff0 	bl	8003cdc <HAL_GetTick>
 8003cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d08:	d005      	beq.n	8003d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <HAL_Delay+0x44>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4413      	add	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d16:	bf00      	nop
 8003d18:	f7ff ffe0 	bl	8003cdc <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d8f7      	bhi.n	8003d18 <HAL_Delay+0x28>
  {
  }
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000010 	.word	0x20000010

08003d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d48:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <__NVIC_SetPriorityGrouping+0x44>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d54:	4013      	ands	r3, r2
 8003d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d6a:	4a04      	ldr	r2, [pc, #16]	; (8003d7c <__NVIC_SetPriorityGrouping+0x44>)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	60d3      	str	r3, [r2, #12]
}
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	e000ed00 	.word	0xe000ed00

08003d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d84:	4b04      	ldr	r3, [pc, #16]	; (8003d98 <__NVIC_GetPriorityGrouping+0x18>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	0a1b      	lsrs	r3, r3, #8
 8003d8a:	f003 0307 	and.w	r3, r3, #7
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	e000ed00 	.word	0xe000ed00

08003d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	db0b      	blt.n	8003dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	f003 021f 	and.w	r2, r3, #31
 8003db4:	4906      	ldr	r1, [pc, #24]	; (8003dd0 <__NVIC_EnableIRQ+0x34>)
 8003db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr
 8003dd0:	e000e100 	.word	0xe000e100

08003dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	6039      	str	r1, [r7, #0]
 8003dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	db0a      	blt.n	8003dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	490c      	ldr	r1, [pc, #48]	; (8003e20 <__NVIC_SetPriority+0x4c>)
 8003dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df2:	0112      	lsls	r2, r2, #4
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	440b      	add	r3, r1
 8003df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dfc:	e00a      	b.n	8003e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	4908      	ldr	r1, [pc, #32]	; (8003e24 <__NVIC_SetPriority+0x50>)
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	3b04      	subs	r3, #4
 8003e0c:	0112      	lsls	r2, r2, #4
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	440b      	add	r3, r1
 8003e12:	761a      	strb	r2, [r3, #24]
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	e000e100 	.word	0xe000e100
 8003e24:	e000ed00 	.word	0xe000ed00

08003e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b089      	sub	sp, #36	; 0x24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f1c3 0307 	rsb	r3, r3, #7
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	bf28      	it	cs
 8003e46:	2304      	movcs	r3, #4
 8003e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	2b06      	cmp	r3, #6
 8003e50:	d902      	bls.n	8003e58 <NVIC_EncodePriority+0x30>
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	3b03      	subs	r3, #3
 8003e56:	e000      	b.n	8003e5a <NVIC_EncodePriority+0x32>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	43da      	mvns	r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	401a      	ands	r2, r3
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e70:	f04f 31ff 	mov.w	r1, #4294967295
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7a:	43d9      	mvns	r1, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e80:	4313      	orrs	r3, r2
         );
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3724      	adds	r7, #36	; 0x24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr

08003e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e9c:	d301      	bcc.n	8003ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e00f      	b.n	8003ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ea2:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <SysTick_Config+0x40>)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eaa:	210f      	movs	r1, #15
 8003eac:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb0:	f7ff ff90 	bl	8003dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003eb4:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <SysTick_Config+0x40>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eba:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <SysTick_Config+0x40>)
 8003ebc:	2207      	movs	r2, #7
 8003ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	e000e010 	.word	0xe000e010

08003ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7ff ff2d 	bl	8003d38 <__NVIC_SetPriorityGrouping>
}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b086      	sub	sp, #24
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	4603      	mov	r3, r0
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
 8003ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ef8:	f7ff ff42 	bl	8003d80 <__NVIC_GetPriorityGrouping>
 8003efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	6978      	ldr	r0, [r7, #20]
 8003f04:	f7ff ff90 	bl	8003e28 <NVIC_EncodePriority>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f0e:	4611      	mov	r1, r2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff ff5f 	bl	8003dd4 <__NVIC_SetPriority>
}
 8003f16:	bf00      	nop
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	4603      	mov	r3, r0
 8003f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff ff35 	bl	8003d9c <__NVIC_EnableIRQ>
}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b082      	sub	sp, #8
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff ffa2 	bl	8003e8c <SysTick_Config>
 8003f48:	4603      	mov	r3, r0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e043      	b.n	8003ff2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	4b22      	ldr	r3, [pc, #136]	; (8003ffc <HAL_DMA_Init+0xa8>)
 8003f72:	4413      	add	r3, r2
 8003f74:	4a22      	ldr	r2, [pc, #136]	; (8004000 <HAL_DMA_Init+0xac>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	091b      	lsrs	r3, r3, #4
 8003f7c:	009a      	lsls	r2, r3, #2
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a1f      	ldr	r2, [pc, #124]	; (8004004 <HAL_DMA_Init+0xb0>)
 8003f86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003fa2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr
 8003ffc:	bffdfff8 	.word	0xbffdfff8
 8004000:	cccccccd 	.word	0xcccccccd
 8004004:	40020000 	.word	0x40020000

08004008 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_DMA_Start_IT+0x20>
 8004024:	2302      	movs	r3, #2
 8004026:	e04a      	b.n	80040be <HAL_DMA_Start_IT+0xb6>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004036:	2b01      	cmp	r3, #1
 8004038:	d13a      	bne.n	80040b0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2202      	movs	r2, #2
 800403e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0201 	bic.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f9ae 	bl	80043c0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 020e 	orr.w	r2, r2, #14
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	e00f      	b.n	800409e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0204 	bic.w	r2, r2, #4
 800408c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 020a 	orr.w	r2, r2, #10
 800409c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	e005      	b.n	80040bc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80040b8:	2302      	movs	r3, #2
 80040ba:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d005      	beq.n	80040ea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2204      	movs	r2, #4
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
 80040e8:	e051      	b.n	800418e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 020e 	bic.w	r2, r2, #14
 80040f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0201 	bic.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a22      	ldr	r2, [pc, #136]	; (8004198 <HAL_DMA_Abort_IT+0xd0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d029      	beq.n	8004168 <HAL_DMA_Abort_IT+0xa0>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a20      	ldr	r2, [pc, #128]	; (800419c <HAL_DMA_Abort_IT+0xd4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d022      	beq.n	8004164 <HAL_DMA_Abort_IT+0x9c>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1f      	ldr	r2, [pc, #124]	; (80041a0 <HAL_DMA_Abort_IT+0xd8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d01a      	beq.n	800415e <HAL_DMA_Abort_IT+0x96>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1d      	ldr	r2, [pc, #116]	; (80041a4 <HAL_DMA_Abort_IT+0xdc>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d012      	beq.n	8004158 <HAL_DMA_Abort_IT+0x90>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a1c      	ldr	r2, [pc, #112]	; (80041a8 <HAL_DMA_Abort_IT+0xe0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00a      	beq.n	8004152 <HAL_DMA_Abort_IT+0x8a>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1a      	ldr	r2, [pc, #104]	; (80041ac <HAL_DMA_Abort_IT+0xe4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d102      	bne.n	800414c <HAL_DMA_Abort_IT+0x84>
 8004146:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800414a:	e00e      	b.n	800416a <HAL_DMA_Abort_IT+0xa2>
 800414c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004150:	e00b      	b.n	800416a <HAL_DMA_Abort_IT+0xa2>
 8004152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004156:	e008      	b.n	800416a <HAL_DMA_Abort_IT+0xa2>
 8004158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800415c:	e005      	b.n	800416a <HAL_DMA_Abort_IT+0xa2>
 800415e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004162:	e002      	b.n	800416a <HAL_DMA_Abort_IT+0xa2>
 8004164:	2310      	movs	r3, #16
 8004166:	e000      	b.n	800416a <HAL_DMA_Abort_IT+0xa2>
 8004168:	2301      	movs	r3, #1
 800416a:	4a11      	ldr	r2, [pc, #68]	; (80041b0 <HAL_DMA_Abort_IT+0xe8>)
 800416c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	4798      	blx	r3
    } 
  }
  return status;
 800418e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40020008 	.word	0x40020008
 800419c:	4002001c 	.word	0x4002001c
 80041a0:	40020030 	.word	0x40020030
 80041a4:	40020044 	.word	0x40020044
 80041a8:	40020058 	.word	0x40020058
 80041ac:	4002006c 	.word	0x4002006c
 80041b0:	40020000 	.word	0x40020000

080041b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	2204      	movs	r2, #4
 80041d2:	409a      	lsls	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4013      	ands	r3, r2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d04f      	beq.n	800427c <HAL_DMA_IRQHandler+0xc8>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d04a      	beq.n	800427c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d107      	bne.n	8004204 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0204 	bic.w	r2, r2, #4
 8004202:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a66      	ldr	r2, [pc, #408]	; (80043a4 <HAL_DMA_IRQHandler+0x1f0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d029      	beq.n	8004262 <HAL_DMA_IRQHandler+0xae>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a65      	ldr	r2, [pc, #404]	; (80043a8 <HAL_DMA_IRQHandler+0x1f4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d022      	beq.n	800425e <HAL_DMA_IRQHandler+0xaa>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a63      	ldr	r2, [pc, #396]	; (80043ac <HAL_DMA_IRQHandler+0x1f8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d01a      	beq.n	8004258 <HAL_DMA_IRQHandler+0xa4>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a62      	ldr	r2, [pc, #392]	; (80043b0 <HAL_DMA_IRQHandler+0x1fc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d012      	beq.n	8004252 <HAL_DMA_IRQHandler+0x9e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a60      	ldr	r2, [pc, #384]	; (80043b4 <HAL_DMA_IRQHandler+0x200>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00a      	beq.n	800424c <HAL_DMA_IRQHandler+0x98>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a5f      	ldr	r2, [pc, #380]	; (80043b8 <HAL_DMA_IRQHandler+0x204>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d102      	bne.n	8004246 <HAL_DMA_IRQHandler+0x92>
 8004240:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004244:	e00e      	b.n	8004264 <HAL_DMA_IRQHandler+0xb0>
 8004246:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800424a:	e00b      	b.n	8004264 <HAL_DMA_IRQHandler+0xb0>
 800424c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004250:	e008      	b.n	8004264 <HAL_DMA_IRQHandler+0xb0>
 8004252:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004256:	e005      	b.n	8004264 <HAL_DMA_IRQHandler+0xb0>
 8004258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800425c:	e002      	b.n	8004264 <HAL_DMA_IRQHandler+0xb0>
 800425e:	2340      	movs	r3, #64	; 0x40
 8004260:	e000      	b.n	8004264 <HAL_DMA_IRQHandler+0xb0>
 8004262:	2304      	movs	r3, #4
 8004264:	4a55      	ldr	r2, [pc, #340]	; (80043bc <HAL_DMA_IRQHandler+0x208>)
 8004266:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 8094 	beq.w	800439a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800427a:	e08e      	b.n	800439a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	2202      	movs	r2, #2
 8004282:	409a      	lsls	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4013      	ands	r3, r2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d056      	beq.n	800433a <HAL_DMA_IRQHandler+0x186>
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d051      	beq.n	800433a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0320 	and.w	r3, r3, #32
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10b      	bne.n	80042bc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 020a 	bic.w	r2, r2, #10
 80042b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a38      	ldr	r2, [pc, #224]	; (80043a4 <HAL_DMA_IRQHandler+0x1f0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d029      	beq.n	800431a <HAL_DMA_IRQHandler+0x166>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a37      	ldr	r2, [pc, #220]	; (80043a8 <HAL_DMA_IRQHandler+0x1f4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d022      	beq.n	8004316 <HAL_DMA_IRQHandler+0x162>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a35      	ldr	r2, [pc, #212]	; (80043ac <HAL_DMA_IRQHandler+0x1f8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d01a      	beq.n	8004310 <HAL_DMA_IRQHandler+0x15c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a34      	ldr	r2, [pc, #208]	; (80043b0 <HAL_DMA_IRQHandler+0x1fc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d012      	beq.n	800430a <HAL_DMA_IRQHandler+0x156>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a32      	ldr	r2, [pc, #200]	; (80043b4 <HAL_DMA_IRQHandler+0x200>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00a      	beq.n	8004304 <HAL_DMA_IRQHandler+0x150>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a31      	ldr	r2, [pc, #196]	; (80043b8 <HAL_DMA_IRQHandler+0x204>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d102      	bne.n	80042fe <HAL_DMA_IRQHandler+0x14a>
 80042f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80042fc:	e00e      	b.n	800431c <HAL_DMA_IRQHandler+0x168>
 80042fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004302:	e00b      	b.n	800431c <HAL_DMA_IRQHandler+0x168>
 8004304:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004308:	e008      	b.n	800431c <HAL_DMA_IRQHandler+0x168>
 800430a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800430e:	e005      	b.n	800431c <HAL_DMA_IRQHandler+0x168>
 8004310:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004314:	e002      	b.n	800431c <HAL_DMA_IRQHandler+0x168>
 8004316:	2320      	movs	r3, #32
 8004318:	e000      	b.n	800431c <HAL_DMA_IRQHandler+0x168>
 800431a:	2302      	movs	r3, #2
 800431c:	4a27      	ldr	r2, [pc, #156]	; (80043bc <HAL_DMA_IRQHandler+0x208>)
 800431e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	2b00      	cmp	r3, #0
 800432e:	d034      	beq.n	800439a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004338:	e02f      	b.n	800439a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	2208      	movs	r2, #8
 8004340:	409a      	lsls	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4013      	ands	r3, r2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d028      	beq.n	800439c <HAL_DMA_IRQHandler+0x1e8>
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d023      	beq.n	800439c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 020e 	bic.w	r2, r2, #14
 8004362:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436c:	2101      	movs	r1, #1
 800436e:	fa01 f202 	lsl.w	r2, r1, r2
 8004372:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	2b00      	cmp	r3, #0
 8004390:	d004      	beq.n	800439c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	4798      	blx	r3
    }
  }
  return;
 800439a:	bf00      	nop
 800439c:	bf00      	nop
}
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40020008 	.word	0x40020008
 80043a8:	4002001c 	.word	0x4002001c
 80043ac:	40020030 	.word	0x40020030
 80043b0:	40020044 	.word	0x40020044
 80043b4:	40020058 	.word	0x40020058
 80043b8:	4002006c 	.word	0x4002006c
 80043bc:	40020000 	.word	0x40020000

080043c0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d6:	2101      	movs	r1, #1
 80043d8:	fa01 f202 	lsl.w	r2, r1, r2
 80043dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b10      	cmp	r3, #16
 80043ec:	d108      	bne.n	8004400 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043fe:	e007      	b.n	8004410 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	60da      	str	r2, [r3, #12]
}
 8004410:	bf00      	nop
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr
	...

0800441c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800441c:	b480      	push	{r7}
 800441e:	b08b      	sub	sp, #44	; 0x2c
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004426:	2300      	movs	r3, #0
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800442a:	2300      	movs	r3, #0
 800442c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800442e:	e169      	b.n	8004704 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004430:	2201      	movs	r2, #1
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	4013      	ands	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	429a      	cmp	r2, r3
 800444a:	f040 8158 	bne.w	80046fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	4a9a      	ldr	r2, [pc, #616]	; (80046bc <HAL_GPIO_Init+0x2a0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d05e      	beq.n	8004516 <HAL_GPIO_Init+0xfa>
 8004458:	4a98      	ldr	r2, [pc, #608]	; (80046bc <HAL_GPIO_Init+0x2a0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d875      	bhi.n	800454a <HAL_GPIO_Init+0x12e>
 800445e:	4a98      	ldr	r2, [pc, #608]	; (80046c0 <HAL_GPIO_Init+0x2a4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d058      	beq.n	8004516 <HAL_GPIO_Init+0xfa>
 8004464:	4a96      	ldr	r2, [pc, #600]	; (80046c0 <HAL_GPIO_Init+0x2a4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d86f      	bhi.n	800454a <HAL_GPIO_Init+0x12e>
 800446a:	4a96      	ldr	r2, [pc, #600]	; (80046c4 <HAL_GPIO_Init+0x2a8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d052      	beq.n	8004516 <HAL_GPIO_Init+0xfa>
 8004470:	4a94      	ldr	r2, [pc, #592]	; (80046c4 <HAL_GPIO_Init+0x2a8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d869      	bhi.n	800454a <HAL_GPIO_Init+0x12e>
 8004476:	4a94      	ldr	r2, [pc, #592]	; (80046c8 <HAL_GPIO_Init+0x2ac>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d04c      	beq.n	8004516 <HAL_GPIO_Init+0xfa>
 800447c:	4a92      	ldr	r2, [pc, #584]	; (80046c8 <HAL_GPIO_Init+0x2ac>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d863      	bhi.n	800454a <HAL_GPIO_Init+0x12e>
 8004482:	4a92      	ldr	r2, [pc, #584]	; (80046cc <HAL_GPIO_Init+0x2b0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d046      	beq.n	8004516 <HAL_GPIO_Init+0xfa>
 8004488:	4a90      	ldr	r2, [pc, #576]	; (80046cc <HAL_GPIO_Init+0x2b0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d85d      	bhi.n	800454a <HAL_GPIO_Init+0x12e>
 800448e:	2b12      	cmp	r3, #18
 8004490:	d82a      	bhi.n	80044e8 <HAL_GPIO_Init+0xcc>
 8004492:	2b12      	cmp	r3, #18
 8004494:	d859      	bhi.n	800454a <HAL_GPIO_Init+0x12e>
 8004496:	a201      	add	r2, pc, #4	; (adr r2, 800449c <HAL_GPIO_Init+0x80>)
 8004498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449c:	08004517 	.word	0x08004517
 80044a0:	080044f1 	.word	0x080044f1
 80044a4:	08004503 	.word	0x08004503
 80044a8:	08004545 	.word	0x08004545
 80044ac:	0800454b 	.word	0x0800454b
 80044b0:	0800454b 	.word	0x0800454b
 80044b4:	0800454b 	.word	0x0800454b
 80044b8:	0800454b 	.word	0x0800454b
 80044bc:	0800454b 	.word	0x0800454b
 80044c0:	0800454b 	.word	0x0800454b
 80044c4:	0800454b 	.word	0x0800454b
 80044c8:	0800454b 	.word	0x0800454b
 80044cc:	0800454b 	.word	0x0800454b
 80044d0:	0800454b 	.word	0x0800454b
 80044d4:	0800454b 	.word	0x0800454b
 80044d8:	0800454b 	.word	0x0800454b
 80044dc:	0800454b 	.word	0x0800454b
 80044e0:	080044f9 	.word	0x080044f9
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	4a79      	ldr	r2, [pc, #484]	; (80046d0 <HAL_GPIO_Init+0x2b4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d013      	beq.n	8004516 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80044ee:	e02c      	b.n	800454a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	623b      	str	r3, [r7, #32]
          break;
 80044f6:	e029      	b.n	800454c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	3304      	adds	r3, #4
 80044fe:	623b      	str	r3, [r7, #32]
          break;
 8004500:	e024      	b.n	800454c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	3308      	adds	r3, #8
 8004508:	623b      	str	r3, [r7, #32]
          break;
 800450a:	e01f      	b.n	800454c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	330c      	adds	r3, #12
 8004512:	623b      	str	r3, [r7, #32]
          break;
 8004514:	e01a      	b.n	800454c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d102      	bne.n	8004524 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800451e:	2304      	movs	r3, #4
 8004520:	623b      	str	r3, [r7, #32]
          break;
 8004522:	e013      	b.n	800454c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d105      	bne.n	8004538 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800452c:	2308      	movs	r3, #8
 800452e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	611a      	str	r2, [r3, #16]
          break;
 8004536:	e009      	b.n	800454c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004538:	2308      	movs	r3, #8
 800453a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	615a      	str	r2, [r3, #20]
          break;
 8004542:	e003      	b.n	800454c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004544:	2300      	movs	r3, #0
 8004546:	623b      	str	r3, [r7, #32]
          break;
 8004548:	e000      	b.n	800454c <HAL_GPIO_Init+0x130>
          break;
 800454a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2bff      	cmp	r3, #255	; 0xff
 8004550:	d801      	bhi.n	8004556 <HAL_GPIO_Init+0x13a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	e001      	b.n	800455a <HAL_GPIO_Init+0x13e>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3304      	adds	r3, #4
 800455a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2bff      	cmp	r3, #255	; 0xff
 8004560:	d802      	bhi.n	8004568 <HAL_GPIO_Init+0x14c>
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	e002      	b.n	800456e <HAL_GPIO_Init+0x152>
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	3b08      	subs	r3, #8
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	210f      	movs	r1, #15
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	fa01 f303 	lsl.w	r3, r1, r3
 800457c:	43db      	mvns	r3, r3
 800457e:	401a      	ands	r2, r3
 8004580:	6a39      	ldr	r1, [r7, #32]
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	fa01 f303 	lsl.w	r3, r1, r3
 8004588:	431a      	orrs	r2, r3
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 80b1 	beq.w	80046fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800459c:	4b4d      	ldr	r3, [pc, #308]	; (80046d4 <HAL_GPIO_Init+0x2b8>)
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	4a4c      	ldr	r2, [pc, #304]	; (80046d4 <HAL_GPIO_Init+0x2b8>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6193      	str	r3, [r2, #24]
 80045a8:	4b4a      	ldr	r3, [pc, #296]	; (80046d4 <HAL_GPIO_Init+0x2b8>)
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80045b4:	4a48      	ldr	r2, [pc, #288]	; (80046d8 <HAL_GPIO_Init+0x2bc>)
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	089b      	lsrs	r3, r3, #2
 80045ba:	3302      	adds	r3, #2
 80045bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	220f      	movs	r2, #15
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	43db      	mvns	r3, r3
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4013      	ands	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a40      	ldr	r2, [pc, #256]	; (80046dc <HAL_GPIO_Init+0x2c0>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d013      	beq.n	8004608 <HAL_GPIO_Init+0x1ec>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a3f      	ldr	r2, [pc, #252]	; (80046e0 <HAL_GPIO_Init+0x2c4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00d      	beq.n	8004604 <HAL_GPIO_Init+0x1e8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a3e      	ldr	r2, [pc, #248]	; (80046e4 <HAL_GPIO_Init+0x2c8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d007      	beq.n	8004600 <HAL_GPIO_Init+0x1e4>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a3d      	ldr	r2, [pc, #244]	; (80046e8 <HAL_GPIO_Init+0x2cc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d101      	bne.n	80045fc <HAL_GPIO_Init+0x1e0>
 80045f8:	2303      	movs	r3, #3
 80045fa:	e006      	b.n	800460a <HAL_GPIO_Init+0x1ee>
 80045fc:	2304      	movs	r3, #4
 80045fe:	e004      	b.n	800460a <HAL_GPIO_Init+0x1ee>
 8004600:	2302      	movs	r3, #2
 8004602:	e002      	b.n	800460a <HAL_GPIO_Init+0x1ee>
 8004604:	2301      	movs	r3, #1
 8004606:	e000      	b.n	800460a <HAL_GPIO_Init+0x1ee>
 8004608:	2300      	movs	r3, #0
 800460a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460c:	f002 0203 	and.w	r2, r2, #3
 8004610:	0092      	lsls	r2, r2, #2
 8004612:	4093      	lsls	r3, r2
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800461a:	492f      	ldr	r1, [pc, #188]	; (80046d8 <HAL_GPIO_Init+0x2bc>)
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	089b      	lsrs	r3, r3, #2
 8004620:	3302      	adds	r3, #2
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d006      	beq.n	8004642 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004634:	4b2d      	ldr	r3, [pc, #180]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	492c      	ldr	r1, [pc, #176]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	4313      	orrs	r3, r2
 800463e:	600b      	str	r3, [r1, #0]
 8004640:	e006      	b.n	8004650 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004642:	4b2a      	ldr	r3, [pc, #168]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	43db      	mvns	r3, r3
 800464a:	4928      	ldr	r1, [pc, #160]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 800464c:	4013      	ands	r3, r2
 800464e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d006      	beq.n	800466a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800465c:	4b23      	ldr	r3, [pc, #140]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	4922      	ldr	r1, [pc, #136]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	4313      	orrs	r3, r2
 8004666:	604b      	str	r3, [r1, #4]
 8004668:	e006      	b.n	8004678 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800466a:	4b20      	ldr	r3, [pc, #128]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	43db      	mvns	r3, r3
 8004672:	491e      	ldr	r1, [pc, #120]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 8004674:	4013      	ands	r3, r2
 8004676:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d006      	beq.n	8004692 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004684:	4b19      	ldr	r3, [pc, #100]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	4918      	ldr	r1, [pc, #96]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	4313      	orrs	r3, r2
 800468e:	608b      	str	r3, [r1, #8]
 8004690:	e006      	b.n	80046a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004692:	4b16      	ldr	r3, [pc, #88]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	43db      	mvns	r3, r3
 800469a:	4914      	ldr	r1, [pc, #80]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 800469c:	4013      	ands	r3, r2
 800469e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d021      	beq.n	80046f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80046ac:	4b0f      	ldr	r3, [pc, #60]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	490e      	ldr	r1, [pc, #56]	; (80046ec <HAL_GPIO_Init+0x2d0>)
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60cb      	str	r3, [r1, #12]
 80046b8:	e021      	b.n	80046fe <HAL_GPIO_Init+0x2e2>
 80046ba:	bf00      	nop
 80046bc:	10320000 	.word	0x10320000
 80046c0:	10310000 	.word	0x10310000
 80046c4:	10220000 	.word	0x10220000
 80046c8:	10210000 	.word	0x10210000
 80046cc:	10120000 	.word	0x10120000
 80046d0:	10110000 	.word	0x10110000
 80046d4:	40021000 	.word	0x40021000
 80046d8:	40010000 	.word	0x40010000
 80046dc:	40010800 	.word	0x40010800
 80046e0:	40010c00 	.word	0x40010c00
 80046e4:	40011000 	.word	0x40011000
 80046e8:	40011400 	.word	0x40011400
 80046ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <HAL_GPIO_Init+0x304>)
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	43db      	mvns	r3, r3
 80046f8:	4909      	ldr	r1, [pc, #36]	; (8004720 <HAL_GPIO_Init+0x304>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	3301      	adds	r3, #1
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	fa22 f303 	lsr.w	r3, r2, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	f47f ae8e 	bne.w	8004430 <HAL_GPIO_Init+0x14>
  }
}
 8004714:	bf00      	nop
 8004716:	bf00      	nop
 8004718:	372c      	adds	r7, #44	; 0x2c
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr
 8004720:	40010400 	.word	0x40010400

08004724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	807b      	strh	r3, [r7, #2]
 8004730:	4613      	mov	r3, r2
 8004732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004734:	787b      	ldrb	r3, [r7, #1]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800473a:	887a      	ldrh	r2, [r7, #2]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004740:	e003      	b.n	800474a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004742:	887b      	ldrh	r3, [r7, #2]
 8004744:	041a      	lsls	r2, r3, #16
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	611a      	str	r2, [r3, #16]
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr

08004754 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004766:	887a      	ldrh	r2, [r7, #2]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4013      	ands	r3, r2
 800476c:	041a      	lsls	r2, r3, #16
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	43d9      	mvns	r1, r3
 8004772:	887b      	ldrh	r3, [r7, #2]
 8004774:	400b      	ands	r3, r1
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	611a      	str	r2, [r3, #16]
}
 800477c:	bf00      	nop
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr
	...

08004788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e12b      	b.n	80049f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fc fbf8 	bl	8000fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2224      	movs	r2, #36	; 0x24
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0201 	bic.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047ec:	f001 fb86 	bl	8005efc <HAL_RCC_GetPCLK1Freq>
 80047f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	4a81      	ldr	r2, [pc, #516]	; (80049fc <HAL_I2C_Init+0x274>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d807      	bhi.n	800480c <HAL_I2C_Init+0x84>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4a80      	ldr	r2, [pc, #512]	; (8004a00 <HAL_I2C_Init+0x278>)
 8004800:	4293      	cmp	r3, r2
 8004802:	bf94      	ite	ls
 8004804:	2301      	movls	r3, #1
 8004806:	2300      	movhi	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	e006      	b.n	800481a <HAL_I2C_Init+0x92>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4a7d      	ldr	r2, [pc, #500]	; (8004a04 <HAL_I2C_Init+0x27c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	bf94      	ite	ls
 8004814:	2301      	movls	r3, #1
 8004816:	2300      	movhi	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e0e7      	b.n	80049f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4a78      	ldr	r2, [pc, #480]	; (8004a08 <HAL_I2C_Init+0x280>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	0c9b      	lsrs	r3, r3, #18
 800482c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	430a      	orrs	r2, r1
 8004840:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	4a6a      	ldr	r2, [pc, #424]	; (80049fc <HAL_I2C_Init+0x274>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d802      	bhi.n	800485c <HAL_I2C_Init+0xd4>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	3301      	adds	r3, #1
 800485a:	e009      	b.n	8004870 <HAL_I2C_Init+0xe8>
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004862:	fb02 f303 	mul.w	r3, r2, r3
 8004866:	4a69      	ldr	r2, [pc, #420]	; (8004a0c <HAL_I2C_Init+0x284>)
 8004868:	fba2 2303 	umull	r2, r3, r2, r3
 800486c:	099b      	lsrs	r3, r3, #6
 800486e:	3301      	adds	r3, #1
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6812      	ldr	r2, [r2, #0]
 8004874:	430b      	orrs	r3, r1
 8004876:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004882:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	495c      	ldr	r1, [pc, #368]	; (80049fc <HAL_I2C_Init+0x274>)
 800488c:	428b      	cmp	r3, r1
 800488e:	d819      	bhi.n	80048c4 <HAL_I2C_Init+0x13c>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	1e59      	subs	r1, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	fbb1 f3f3 	udiv	r3, r1, r3
 800489e:	1c59      	adds	r1, r3, #1
 80048a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80048a4:	400b      	ands	r3, r1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <HAL_I2C_Init+0x138>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	1e59      	subs	r1, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80048b8:	3301      	adds	r3, #1
 80048ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048be:	e051      	b.n	8004964 <HAL_I2C_Init+0x1dc>
 80048c0:	2304      	movs	r3, #4
 80048c2:	e04f      	b.n	8004964 <HAL_I2C_Init+0x1dc>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d111      	bne.n	80048f0 <HAL_I2C_Init+0x168>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	1e58      	subs	r0, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6859      	ldr	r1, [r3, #4]
 80048d4:	460b      	mov	r3, r1
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	440b      	add	r3, r1
 80048da:	fbb0 f3f3 	udiv	r3, r0, r3
 80048de:	3301      	adds	r3, #1
 80048e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	bf0c      	ite	eq
 80048e8:	2301      	moveq	r3, #1
 80048ea:	2300      	movne	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	e012      	b.n	8004916 <HAL_I2C_Init+0x18e>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	1e58      	subs	r0, r3, #1
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6859      	ldr	r1, [r3, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	0099      	lsls	r1, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	fbb0 f3f3 	udiv	r3, r0, r3
 8004906:	3301      	adds	r3, #1
 8004908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800490c:	2b00      	cmp	r3, #0
 800490e:	bf0c      	ite	eq
 8004910:	2301      	moveq	r3, #1
 8004912:	2300      	movne	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_I2C_Init+0x196>
 800491a:	2301      	movs	r3, #1
 800491c:	e022      	b.n	8004964 <HAL_I2C_Init+0x1dc>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10e      	bne.n	8004944 <HAL_I2C_Init+0x1bc>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1e58      	subs	r0, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6859      	ldr	r1, [r3, #4]
 800492e:	460b      	mov	r3, r1
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	440b      	add	r3, r1
 8004934:	fbb0 f3f3 	udiv	r3, r0, r3
 8004938:	3301      	adds	r3, #1
 800493a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800493e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004942:	e00f      	b.n	8004964 <HAL_I2C_Init+0x1dc>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	1e58      	subs	r0, r3, #1
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6859      	ldr	r1, [r3, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	0099      	lsls	r1, r3, #2
 8004954:	440b      	add	r3, r1
 8004956:	fbb0 f3f3 	udiv	r3, r0, r3
 800495a:	3301      	adds	r3, #1
 800495c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004960:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	6809      	ldr	r1, [r1, #0]
 8004968:	4313      	orrs	r3, r2
 800496a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69da      	ldr	r2, [r3, #28]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004992:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6911      	ldr	r1, [r2, #16]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	68d2      	ldr	r2, [r2, #12]
 800499e:	4311      	orrs	r1, r2
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	430b      	orrs	r3, r1
 80049a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	695a      	ldr	r2, [r3, #20]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	000186a0 	.word	0x000186a0
 8004a00:	001e847f 	.word	0x001e847f
 8004a04:	003d08ff 	.word	0x003d08ff
 8004a08:	431bde83 	.word	0x431bde83
 8004a0c:	10624dd3 	.word	0x10624dd3

08004a10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	607a      	str	r2, [r7, #4]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	817b      	strh	r3, [r7, #10]
 8004a20:	4613      	mov	r3, r2
 8004a22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a24:	f7ff f95a 	bl	8003cdc <HAL_GetTick>
 8004a28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	f040 80e0 	bne.w	8004bf8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	2319      	movs	r3, #25
 8004a3e:	2201      	movs	r2, #1
 8004a40:	4970      	ldr	r1, [pc, #448]	; (8004c04 <HAL_I2C_Master_Transmit+0x1f4>)
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 fcaa 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e0d3      	b.n	8004bfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_I2C_Master_Transmit+0x50>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e0cc      	b.n	8004bfa <HAL_I2C_Master_Transmit+0x1ea>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d007      	beq.n	8004a86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0201 	orr.w	r2, r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2221      	movs	r2, #33	; 0x21
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2210      	movs	r2, #16
 8004aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	893a      	ldrh	r2, [r7, #8]
 8004ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4a50      	ldr	r2, [pc, #320]	; (8004c08 <HAL_I2C_Master_Transmit+0x1f8>)
 8004ac6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ac8:	8979      	ldrh	r1, [r7, #10]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	6a3a      	ldr	r2, [r7, #32]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 fb14 	bl	80050fc <I2C_MasterRequestWrite>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e08d      	b.n	8004bfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ade:	2300      	movs	r3, #0
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	613b      	str	r3, [r7, #16]
 8004af2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004af4:	e066      	b.n	8004bc4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	6a39      	ldr	r1, [r7, #32]
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 fd24 	bl	8005548 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00d      	beq.n	8004b22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d107      	bne.n	8004b1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e06b      	b.n	8004bfa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	781a      	ldrb	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d11b      	bne.n	8004b98 <HAL_I2C_Master_Transmit+0x188>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d017      	beq.n	8004b98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	781a      	ldrb	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	6a39      	ldr	r1, [r7, #32]
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 fd14 	bl	80055ca <I2C_WaitOnBTFFlagUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00d      	beq.n	8004bc4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d107      	bne.n	8004bc0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bbe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e01a      	b.n	8004bfa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d194      	bne.n	8004af6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	e000      	b.n	8004bfa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004bf8:	2302      	movs	r3, #2
  }
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	00100002 	.word	0x00100002
 8004c08:	ffff0000 	.word	0xffff0000

08004c0c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08c      	sub	sp, #48	; 0x30
 8004c10:	af02      	add	r7, sp, #8
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	607a      	str	r2, [r7, #4]
 8004c16:	461a      	mov	r2, r3
 8004c18:	460b      	mov	r3, r1
 8004c1a:	817b      	strh	r3, [r7, #10]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c24:	f7ff f85a 	bl	8003cdc <HAL_GetTick>
 8004c28:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	f040 823f 	bne.w	80050b6 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	2319      	movs	r3, #25
 8004c3e:	2201      	movs	r2, #1
 8004c40:	497f      	ldr	r1, [pc, #508]	; (8004e40 <HAL_I2C_Master_Receive+0x234>)
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 fbaa 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e232      	b.n	80050b8 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_I2C_Master_Receive+0x54>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e22b      	b.n	80050b8 <HAL_I2C_Master_Receive+0x4ac>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d007      	beq.n	8004c86 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0201 	orr.w	r2, r2, #1
 8004c84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2222      	movs	r2, #34	; 0x22
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2210      	movs	r2, #16
 8004ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	893a      	ldrh	r2, [r7, #8]
 8004cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4a5f      	ldr	r2, [pc, #380]	; (8004e44 <HAL_I2C_Master_Receive+0x238>)
 8004cc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004cc8:	8979      	ldrh	r1, [r7, #10]
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 fa96 	bl	8005200 <I2C_MasterRequestRead>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e1ec      	b.n	80050b8 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d113      	bne.n	8004d0e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61fb      	str	r3, [r7, #28]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	61fb      	str	r3, [r7, #28]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	e1c0      	b.n	8005090 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d11e      	bne.n	8004d54 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d26:	b672      	cpsid	i
}
 8004d28:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61bb      	str	r3, [r7, #24]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	61bb      	str	r3, [r7, #24]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d50:	b662      	cpsie	i
}
 8004d52:	e035      	b.n	8004dc0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d11e      	bne.n	8004d9a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d6c:	b672      	cpsid	i
}
 8004d6e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d96:	b662      	cpsie	i
}
 8004d98:	e012      	b.n	8004dc0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004da8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004daa:	2300      	movs	r3, #0
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	613b      	str	r3, [r7, #16]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	613b      	str	r3, [r7, #16]
 8004dbe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004dc0:	e166      	b.n	8005090 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc6:	2b03      	cmp	r3, #3
 8004dc8:	f200 811f 	bhi.w	800500a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d123      	bne.n	8004e1c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 fc37 	bl	800564c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e167      	b.n	80050b8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691a      	ldr	r2, [r3, #16]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e1a:	e139      	b.n	8005090 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d152      	bne.n	8004eca <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	4906      	ldr	r1, [pc, #24]	; (8004e48 <HAL_I2C_Master_Receive+0x23c>)
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 fab4 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d008      	beq.n	8004e4c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e13c      	b.n	80050b8 <HAL_I2C_Master_Receive+0x4ac>
 8004e3e:	bf00      	nop
 8004e40:	00100002 	.word	0x00100002
 8004e44:	ffff0000 	.word	0xffff0000
 8004e48:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004e4c:	b672      	cpsid	i
}
 8004e4e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691a      	ldr	r2, [r3, #16]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004e92:	b662      	cpsie	i
}
 8004e94:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ec8:	e0e2      	b.n	8005090 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	497b      	ldr	r1, [pc, #492]	; (80050c0 <HAL_I2C_Master_Receive+0x4b4>)
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 fa61 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e0e9      	b.n	80050b8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ef2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ef4:	b672      	cpsid	i
}
 8004ef6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f2a:	4b66      	ldr	r3, [pc, #408]	; (80050c4 <HAL_I2C_Master_Receive+0x4b8>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	08db      	lsrs	r3, r3, #3
 8004f30:	4a65      	ldr	r2, [pc, #404]	; (80050c8 <HAL_I2C_Master_Receive+0x4bc>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	0a1a      	lsrs	r2, r3, #8
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	00da      	lsls	r2, r3, #3
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d118      	bne.n	8004f82 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f043 0220 	orr.w	r2, r3, #32
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004f72:	b662      	cpsie	i
}
 8004f74:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e09a      	b.n	80050b8 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b04      	cmp	r3, #4
 8004f8e:	d1d9      	bne.n	8004f44 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691a      	ldr	r2, [r3, #16]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004fd2:	b662      	cpsie	i
}
 8004fd4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005008:	e042      	b.n	8005090 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800500a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 fb1c 	bl	800564c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e04c      	b.n	80050b8 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	2b04      	cmp	r3, #4
 800505c:	d118      	bne.n	8005090 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	b2d2      	uxtb	r2, r2
 800506a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507a:	3b01      	subs	r3, #1
 800507c:	b29a      	uxth	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005086:	b29b      	uxth	r3, r3
 8005088:	3b01      	subs	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005094:	2b00      	cmp	r3, #0
 8005096:	f47f ae94 	bne.w	8004dc2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	e000      	b.n	80050b8 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80050b6:	2302      	movs	r3, #2
  }
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3728      	adds	r7, #40	; 0x28
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	00010004 	.word	0x00010004
 80050c4:	20000008 	.word	0x20000008
 80050c8:	14f8b589 	.word	0x14f8b589

080050cc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050da:	b2db      	uxtb	r3, r3
}
 80050dc:	4618      	mov	r0, r3
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bc80      	pop	{r7}
 80050e4:	4770      	bx	lr

080050e6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr

080050fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af02      	add	r7, sp, #8
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	603b      	str	r3, [r7, #0]
 8005108:	460b      	mov	r3, r1
 800510a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b08      	cmp	r3, #8
 8005116:	d006      	beq.n	8005126 <I2C_MasterRequestWrite+0x2a>
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d003      	beq.n	8005126 <I2C_MasterRequestWrite+0x2a>
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005124:	d108      	bne.n	8005138 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	e00b      	b.n	8005150 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	2b12      	cmp	r3, #18
 800513e:	d107      	bne.n	8005150 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800514e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f91d 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00d      	beq.n	8005184 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005176:	d103      	bne.n	8005180 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800517e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e035      	b.n	80051f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800518c:	d108      	bne.n	80051a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800518e:	897b      	ldrh	r3, [r7, #10]
 8005190:	b2db      	uxtb	r3, r3
 8005192:	461a      	mov	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800519c:	611a      	str	r2, [r3, #16]
 800519e:	e01b      	b.n	80051d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051a0:	897b      	ldrh	r3, [r7, #10]
 80051a2:	11db      	asrs	r3, r3, #7
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	f003 0306 	and.w	r3, r3, #6
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	f063 030f 	orn	r3, r3, #15
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	490e      	ldr	r1, [pc, #56]	; (80051f8 <I2C_MasterRequestWrite+0xfc>)
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 f943 	bl	800544a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e010      	b.n	80051f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051ce:	897b      	ldrh	r3, [r7, #10]
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	4907      	ldr	r1, [pc, #28]	; (80051fc <I2C_MasterRequestWrite+0x100>)
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 f933 	bl	800544a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	00010008 	.word	0x00010008
 80051fc:	00010002 	.word	0x00010002

08005200 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b088      	sub	sp, #32
 8005204:	af02      	add	r7, sp, #8
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	607a      	str	r2, [r7, #4]
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	460b      	mov	r3, r1
 800520e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005224:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b08      	cmp	r3, #8
 800522a:	d006      	beq.n	800523a <I2C_MasterRequestRead+0x3a>
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d003      	beq.n	800523a <I2C_MasterRequestRead+0x3a>
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005238:	d108      	bne.n	800524c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	e00b      	b.n	8005264 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005250:	2b11      	cmp	r3, #17
 8005252:	d107      	bne.n	8005264 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005262:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f893 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00d      	beq.n	8005298 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800528a:	d103      	bne.n	8005294 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005292:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e079      	b.n	800538c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052a0:	d108      	bne.n	80052b4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052a2:	897b      	ldrh	r3, [r7, #10]
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	f043 0301 	orr.w	r3, r3, #1
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	611a      	str	r2, [r3, #16]
 80052b2:	e05f      	b.n	8005374 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052b4:	897b      	ldrh	r3, [r7, #10]
 80052b6:	11db      	asrs	r3, r3, #7
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	f003 0306 	and.w	r3, r3, #6
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	f063 030f 	orn	r3, r3, #15
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	4930      	ldr	r1, [pc, #192]	; (8005394 <I2C_MasterRequestRead+0x194>)
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 f8b9 	bl	800544a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e054      	b.n	800538c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052e2:	897b      	ldrh	r3, [r7, #10]
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	4929      	ldr	r1, [pc, #164]	; (8005398 <I2C_MasterRequestRead+0x198>)
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 f8a9 	bl	800544a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e044      	b.n	800538c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005302:	2300      	movs	r3, #0
 8005304:	613b      	str	r3, [r7, #16]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005326:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f831 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00d      	beq.n	800535c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800534e:	d103      	bne.n	8005358 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005356:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e017      	b.n	800538c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800535c:	897b      	ldrh	r3, [r7, #10]
 800535e:	11db      	asrs	r3, r3, #7
 8005360:	b2db      	uxtb	r3, r3
 8005362:	f003 0306 	and.w	r3, r3, #6
 8005366:	b2db      	uxtb	r3, r3
 8005368:	f063 030e 	orn	r3, r3, #14
 800536c:	b2da      	uxtb	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	4907      	ldr	r1, [pc, #28]	; (8005398 <I2C_MasterRequestRead+0x198>)
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 f865 	bl	800544a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e000      	b.n	800538c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	00010008 	.word	0x00010008
 8005398:	00010002 	.word	0x00010002

0800539c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	4613      	mov	r3, r2
 80053aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ac:	e025      	b.n	80053fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b4:	d021      	beq.n	80053fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b6:	f7fe fc91 	bl	8003cdc <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d302      	bcc.n	80053cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d116      	bne.n	80053fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	f043 0220 	orr.w	r2, r3, #32
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e023      	b.n	8005442 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	0c1b      	lsrs	r3, r3, #16
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b01      	cmp	r3, #1
 8005402:	d10d      	bne.n	8005420 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	43da      	mvns	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4013      	ands	r3, r2
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	bf0c      	ite	eq
 8005416:	2301      	moveq	r3, #1
 8005418:	2300      	movne	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	461a      	mov	r2, r3
 800541e:	e00c      	b.n	800543a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	43da      	mvns	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	4013      	ands	r3, r2
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	bf0c      	ite	eq
 8005432:	2301      	moveq	r3, #1
 8005434:	2300      	movne	r3, #0
 8005436:	b2db      	uxtb	r3, r3
 8005438:	461a      	mov	r2, r3
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	429a      	cmp	r2, r3
 800543e:	d0b6      	beq.n	80053ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	607a      	str	r2, [r7, #4]
 8005456:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005458:	e051      	b.n	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005468:	d123      	bne.n	80054b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005478:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005482:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2220      	movs	r2, #32
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	f043 0204 	orr.w	r2, r3, #4
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e046      	b.n	8005540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d021      	beq.n	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ba:	f7fe fc0f 	bl	8003cdc <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d302      	bcc.n	80054d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d116      	bne.n	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2220      	movs	r2, #32
 80054da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	f043 0220 	orr.w	r2, r3, #32
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e020      	b.n	8005540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	0c1b      	lsrs	r3, r3, #16
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b01      	cmp	r3, #1
 8005506:	d10c      	bne.n	8005522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	43da      	mvns	r2, r3
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	4013      	ands	r3, r2
 8005514:	b29b      	uxth	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	bf14      	ite	ne
 800551a:	2301      	movne	r3, #1
 800551c:	2300      	moveq	r3, #0
 800551e:	b2db      	uxtb	r3, r3
 8005520:	e00b      	b.n	800553a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	43da      	mvns	r2, r3
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4013      	ands	r3, r2
 800552e:	b29b      	uxth	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	bf14      	ite	ne
 8005534:	2301      	movne	r3, #1
 8005536:	2300      	moveq	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d18d      	bne.n	800545a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005554:	e02d      	b.n	80055b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f000 f8ce 	bl	80056f8 <I2C_IsAcknowledgeFailed>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e02d      	b.n	80055c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556c:	d021      	beq.n	80055b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556e:	f7fe fbb5 	bl	8003cdc <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	429a      	cmp	r2, r3
 800557c:	d302      	bcc.n	8005584 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d116      	bne.n	80055b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2220      	movs	r2, #32
 800558e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f043 0220 	orr.w	r2, r3, #32
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e007      	b.n	80055c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055bc:	2b80      	cmp	r3, #128	; 0x80
 80055be:	d1ca      	bne.n	8005556 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	60f8      	str	r0, [r7, #12]
 80055d2:	60b9      	str	r1, [r7, #8]
 80055d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055d6:	e02d      	b.n	8005634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f88d 	bl	80056f8 <I2C_IsAcknowledgeFailed>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e02d      	b.n	8005644 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ee:	d021      	beq.n	8005634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f0:	f7fe fb74 	bl	8003cdc <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d302      	bcc.n	8005606 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d116      	bne.n	8005634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	f043 0220 	orr.w	r2, r3, #32
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e007      	b.n	8005644 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	f003 0304 	and.w	r3, r3, #4
 800563e:	2b04      	cmp	r3, #4
 8005640:	d1ca      	bne.n	80055d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005658:	e042      	b.n	80056e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	f003 0310 	and.w	r3, r3, #16
 8005664:	2b10      	cmp	r3, #16
 8005666:	d119      	bne.n	800569c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0210 	mvn.w	r2, #16
 8005670:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e029      	b.n	80056f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800569c:	f7fe fb1e 	bl	8003cdc <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d302      	bcc.n	80056b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d116      	bne.n	80056e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056cc:	f043 0220 	orr.w	r2, r3, #32
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e007      	b.n	80056f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ea:	2b40      	cmp	r3, #64	; 0x40
 80056ec:	d1b5      	bne.n	800565a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800570a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570e:	d11b      	bne.n	8005748 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005718:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2220      	movs	r2, #32
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005734:	f043 0204 	orr.w	r2, r3, #4
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e000      	b.n	800574a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr

08005754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e26c      	b.n	8005c40 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 8087 	beq.w	8005882 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005774:	4b92      	ldr	r3, [pc, #584]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f003 030c 	and.w	r3, r3, #12
 800577c:	2b04      	cmp	r3, #4
 800577e:	d00c      	beq.n	800579a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005780:	4b8f      	ldr	r3, [pc, #572]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f003 030c 	and.w	r3, r3, #12
 8005788:	2b08      	cmp	r3, #8
 800578a:	d112      	bne.n	80057b2 <HAL_RCC_OscConfig+0x5e>
 800578c:	4b8c      	ldr	r3, [pc, #560]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005798:	d10b      	bne.n	80057b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800579a:	4b89      	ldr	r3, [pc, #548]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d06c      	beq.n	8005880 <HAL_RCC_OscConfig+0x12c>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d168      	bne.n	8005880 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e246      	b.n	8005c40 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ba:	d106      	bne.n	80057ca <HAL_RCC_OscConfig+0x76>
 80057bc:	4b80      	ldr	r3, [pc, #512]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a7f      	ldr	r2, [pc, #508]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80057c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	e02e      	b.n	8005828 <HAL_RCC_OscConfig+0xd4>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10c      	bne.n	80057ec <HAL_RCC_OscConfig+0x98>
 80057d2:	4b7b      	ldr	r3, [pc, #492]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a7a      	ldr	r2, [pc, #488]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80057d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	4b78      	ldr	r3, [pc, #480]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a77      	ldr	r2, [pc, #476]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80057e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	e01d      	b.n	8005828 <HAL_RCC_OscConfig+0xd4>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057f4:	d10c      	bne.n	8005810 <HAL_RCC_OscConfig+0xbc>
 80057f6:	4b72      	ldr	r3, [pc, #456]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a71      	ldr	r2, [pc, #452]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80057fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	4b6f      	ldr	r3, [pc, #444]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a6e      	ldr	r2, [pc, #440]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	e00b      	b.n	8005828 <HAL_RCC_OscConfig+0xd4>
 8005810:	4b6b      	ldr	r3, [pc, #428]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a6a      	ldr	r2, [pc, #424]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	4b68      	ldr	r3, [pc, #416]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a67      	ldr	r2, [pc, #412]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005826:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d013      	beq.n	8005858 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005830:	f7fe fa54 	bl	8003cdc <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005838:	f7fe fa50 	bl	8003cdc <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b64      	cmp	r3, #100	; 0x64
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e1fa      	b.n	8005c40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800584a:	4b5d      	ldr	r3, [pc, #372]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0f0      	beq.n	8005838 <HAL_RCC_OscConfig+0xe4>
 8005856:	e014      	b.n	8005882 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005858:	f7fe fa40 	bl	8003cdc <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005860:	f7fe fa3c 	bl	8003cdc <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b64      	cmp	r3, #100	; 0x64
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e1e6      	b.n	8005c40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005872:	4b53      	ldr	r3, [pc, #332]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1f0      	bne.n	8005860 <HAL_RCC_OscConfig+0x10c>
 800587e:	e000      	b.n	8005882 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d063      	beq.n	8005956 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800588e:	4b4c      	ldr	r3, [pc, #304]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f003 030c 	and.w	r3, r3, #12
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00b      	beq.n	80058b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800589a:	4b49      	ldr	r3, [pc, #292]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f003 030c 	and.w	r3, r3, #12
 80058a2:	2b08      	cmp	r3, #8
 80058a4:	d11c      	bne.n	80058e0 <HAL_RCC_OscConfig+0x18c>
 80058a6:	4b46      	ldr	r3, [pc, #280]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d116      	bne.n	80058e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058b2:	4b43      	ldr	r3, [pc, #268]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <HAL_RCC_OscConfig+0x176>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d001      	beq.n	80058ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e1ba      	b.n	8005c40 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ca:	4b3d      	ldr	r3, [pc, #244]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	4939      	ldr	r1, [pc, #228]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058de:	e03a      	b.n	8005956 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d020      	beq.n	800592a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058e8:	4b36      	ldr	r3, [pc, #216]	; (80059c4 <HAL_RCC_OscConfig+0x270>)
 80058ea:	2201      	movs	r2, #1
 80058ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ee:	f7fe f9f5 	bl	8003cdc <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058f6:	f7fe f9f1 	bl	8003cdc <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e19b      	b.n	8005c40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005908:	4b2d      	ldr	r3, [pc, #180]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0f0      	beq.n	80058f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005914:	4b2a      	ldr	r3, [pc, #168]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	4927      	ldr	r1, [pc, #156]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 8005924:	4313      	orrs	r3, r2
 8005926:	600b      	str	r3, [r1, #0]
 8005928:	e015      	b.n	8005956 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800592a:	4b26      	ldr	r3, [pc, #152]	; (80059c4 <HAL_RCC_OscConfig+0x270>)
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005930:	f7fe f9d4 	bl	8003cdc <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005938:	f7fe f9d0 	bl	8003cdc <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e17a      	b.n	8005c40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800594a:	4b1d      	ldr	r3, [pc, #116]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f0      	bne.n	8005938 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	2b00      	cmp	r3, #0
 8005960:	d03a      	beq.n	80059d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d019      	beq.n	800599e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800596a:	4b17      	ldr	r3, [pc, #92]	; (80059c8 <HAL_RCC_OscConfig+0x274>)
 800596c:	2201      	movs	r2, #1
 800596e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005970:	f7fe f9b4 	bl	8003cdc <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005976:	e008      	b.n	800598a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005978:	f7fe f9b0 	bl	8003cdc <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e15a      	b.n	8005c40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800598a:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <HAL_RCC_OscConfig+0x26c>)
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0f0      	beq.n	8005978 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005996:	2001      	movs	r0, #1
 8005998:	f000 fad8 	bl	8005f4c <RCC_Delay>
 800599c:	e01c      	b.n	80059d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800599e:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <HAL_RCC_OscConfig+0x274>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059a4:	f7fe f99a 	bl	8003cdc <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059aa:	e00f      	b.n	80059cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ac:	f7fe f996 	bl	8003cdc <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d908      	bls.n	80059cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e140      	b.n	8005c40 <HAL_RCC_OscConfig+0x4ec>
 80059be:	bf00      	nop
 80059c0:	40021000 	.word	0x40021000
 80059c4:	42420000 	.word	0x42420000
 80059c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059cc:	4b9e      	ldr	r3, [pc, #632]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e9      	bne.n	80059ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 80a6 	beq.w	8005b32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059e6:	2300      	movs	r3, #0
 80059e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ea:	4b97      	ldr	r3, [pc, #604]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10d      	bne.n	8005a12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059f6:	4b94      	ldr	r3, [pc, #592]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	4a93      	ldr	r2, [pc, #588]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 80059fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a00:	61d3      	str	r3, [r2, #28]
 8005a02:	4b91      	ldr	r3, [pc, #580]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a0a:	60bb      	str	r3, [r7, #8]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a12:	4b8e      	ldr	r3, [pc, #568]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d118      	bne.n	8005a50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a1e:	4b8b      	ldr	r3, [pc, #556]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a8a      	ldr	r2, [pc, #552]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a2a:	f7fe f957 	bl	8003cdc <HAL_GetTick>
 8005a2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a30:	e008      	b.n	8005a44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a32:	f7fe f953 	bl	8003cdc <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b64      	cmp	r3, #100	; 0x64
 8005a3e:	d901      	bls.n	8005a44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e0fd      	b.n	8005c40 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a44:	4b81      	ldr	r3, [pc, #516]	; (8005c4c <HAL_RCC_OscConfig+0x4f8>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0f0      	beq.n	8005a32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d106      	bne.n	8005a66 <HAL_RCC_OscConfig+0x312>
 8005a58:	4b7b      	ldr	r3, [pc, #492]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	4a7a      	ldr	r2, [pc, #488]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005a5e:	f043 0301 	orr.w	r3, r3, #1
 8005a62:	6213      	str	r3, [r2, #32]
 8005a64:	e02d      	b.n	8005ac2 <HAL_RCC_OscConfig+0x36e>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10c      	bne.n	8005a88 <HAL_RCC_OscConfig+0x334>
 8005a6e:	4b76      	ldr	r3, [pc, #472]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	4a75      	ldr	r2, [pc, #468]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005a74:	f023 0301 	bic.w	r3, r3, #1
 8005a78:	6213      	str	r3, [r2, #32]
 8005a7a:	4b73      	ldr	r3, [pc, #460]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	4a72      	ldr	r2, [pc, #456]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005a80:	f023 0304 	bic.w	r3, r3, #4
 8005a84:	6213      	str	r3, [r2, #32]
 8005a86:	e01c      	b.n	8005ac2 <HAL_RCC_OscConfig+0x36e>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	2b05      	cmp	r3, #5
 8005a8e:	d10c      	bne.n	8005aaa <HAL_RCC_OscConfig+0x356>
 8005a90:	4b6d      	ldr	r3, [pc, #436]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	4a6c      	ldr	r2, [pc, #432]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005a96:	f043 0304 	orr.w	r3, r3, #4
 8005a9a:	6213      	str	r3, [r2, #32]
 8005a9c:	4b6a      	ldr	r3, [pc, #424]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	4a69      	ldr	r2, [pc, #420]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005aa2:	f043 0301 	orr.w	r3, r3, #1
 8005aa6:	6213      	str	r3, [r2, #32]
 8005aa8:	e00b      	b.n	8005ac2 <HAL_RCC_OscConfig+0x36e>
 8005aaa:	4b67      	ldr	r3, [pc, #412]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	4a66      	ldr	r2, [pc, #408]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005ab0:	f023 0301 	bic.w	r3, r3, #1
 8005ab4:	6213      	str	r3, [r2, #32]
 8005ab6:	4b64      	ldr	r3, [pc, #400]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	4a63      	ldr	r2, [pc, #396]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005abc:	f023 0304 	bic.w	r3, r3, #4
 8005ac0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d015      	beq.n	8005af6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aca:	f7fe f907 	bl	8003cdc <HAL_GetTick>
 8005ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad0:	e00a      	b.n	8005ae8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ad2:	f7fe f903 	bl	8003cdc <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e0ab      	b.n	8005c40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae8:	4b57      	ldr	r3, [pc, #348]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0ee      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x37e>
 8005af4:	e014      	b.n	8005b20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005af6:	f7fe f8f1 	bl	8003cdc <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005afc:	e00a      	b.n	8005b14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005afe:	f7fe f8ed 	bl	8003cdc <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e095      	b.n	8005c40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b14:	4b4c      	ldr	r3, [pc, #304]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1ee      	bne.n	8005afe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b20:	7dfb      	ldrb	r3, [r7, #23]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d105      	bne.n	8005b32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b26:	4b48      	ldr	r3, [pc, #288]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	4a47      	ldr	r2, [pc, #284]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 8081 	beq.w	8005c3e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b3c:	4b42      	ldr	r3, [pc, #264]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f003 030c 	and.w	r3, r3, #12
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d061      	beq.n	8005c0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d146      	bne.n	8005bde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b50:	4b3f      	ldr	r3, [pc, #252]	; (8005c50 <HAL_RCC_OscConfig+0x4fc>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b56:	f7fe f8c1 	bl	8003cdc <HAL_GetTick>
 8005b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b5c:	e008      	b.n	8005b70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b5e:	f7fe f8bd 	bl	8003cdc <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e067      	b.n	8005c40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b70:	4b35      	ldr	r3, [pc, #212]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1f0      	bne.n	8005b5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b84:	d108      	bne.n	8005b98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b86:	4b30      	ldr	r3, [pc, #192]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	492d      	ldr	r1, [pc, #180]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b98:	4b2b      	ldr	r3, [pc, #172]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a19      	ldr	r1, [r3, #32]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	430b      	orrs	r3, r1
 8005baa:	4927      	ldr	r1, [pc, #156]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bb0:	4b27      	ldr	r3, [pc, #156]	; (8005c50 <HAL_RCC_OscConfig+0x4fc>)
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb6:	f7fe f891 	bl	8003cdc <HAL_GetTick>
 8005bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bbc:	e008      	b.n	8005bd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bbe:	f7fe f88d 	bl	8003cdc <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e037      	b.n	8005c40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bd0:	4b1d      	ldr	r3, [pc, #116]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0f0      	beq.n	8005bbe <HAL_RCC_OscConfig+0x46a>
 8005bdc:	e02f      	b.n	8005c3e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bde:	4b1c      	ldr	r3, [pc, #112]	; (8005c50 <HAL_RCC_OscConfig+0x4fc>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be4:	f7fe f87a 	bl	8003cdc <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bec:	f7fe f876 	bl	8003cdc <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e020      	b.n	8005c40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bfe:	4b12      	ldr	r3, [pc, #72]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1f0      	bne.n	8005bec <HAL_RCC_OscConfig+0x498>
 8005c0a:	e018      	b.n	8005c3e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e013      	b.n	8005c40 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c18:	4b0b      	ldr	r3, [pc, #44]	; (8005c48 <HAL_RCC_OscConfig+0x4f4>)
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d106      	bne.n	8005c3a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d001      	beq.n	8005c3e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e000      	b.n	8005c40 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	40007000 	.word	0x40007000
 8005c50:	42420060 	.word	0x42420060

08005c54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e0d0      	b.n	8005e0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c68:	4b6a      	ldr	r3, [pc, #424]	; (8005e14 <HAL_RCC_ClockConfig+0x1c0>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d910      	bls.n	8005c98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c76:	4b67      	ldr	r3, [pc, #412]	; (8005e14 <HAL_RCC_ClockConfig+0x1c0>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f023 0207 	bic.w	r2, r3, #7
 8005c7e:	4965      	ldr	r1, [pc, #404]	; (8005e14 <HAL_RCC_ClockConfig+0x1c0>)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c86:	4b63      	ldr	r3, [pc, #396]	; (8005e14 <HAL_RCC_ClockConfig+0x1c0>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d001      	beq.n	8005c98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e0b8      	b.n	8005e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d020      	beq.n	8005ce6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d005      	beq.n	8005cbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cb0:	4b59      	ldr	r3, [pc, #356]	; (8005e18 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	4a58      	ldr	r2, [pc, #352]	; (8005e18 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005cba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d005      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cc8:	4b53      	ldr	r3, [pc, #332]	; (8005e18 <HAL_RCC_ClockConfig+0x1c4>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	4a52      	ldr	r2, [pc, #328]	; (8005e18 <HAL_RCC_ClockConfig+0x1c4>)
 8005cce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005cd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cd4:	4b50      	ldr	r3, [pc, #320]	; (8005e18 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	494d      	ldr	r1, [pc, #308]	; (8005e18 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d040      	beq.n	8005d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d107      	bne.n	8005d0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cfa:	4b47      	ldr	r3, [pc, #284]	; (8005e18 <HAL_RCC_ClockConfig+0x1c4>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d115      	bne.n	8005d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e07f      	b.n	8005e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d107      	bne.n	8005d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d12:	4b41      	ldr	r3, [pc, #260]	; (8005e18 <HAL_RCC_ClockConfig+0x1c4>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d109      	bne.n	8005d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e073      	b.n	8005e0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d22:	4b3d      	ldr	r3, [pc, #244]	; (8005e18 <HAL_RCC_ClockConfig+0x1c4>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e06b      	b.n	8005e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d32:	4b39      	ldr	r3, [pc, #228]	; (8005e18 <HAL_RCC_ClockConfig+0x1c4>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f023 0203 	bic.w	r2, r3, #3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	4936      	ldr	r1, [pc, #216]	; (8005e18 <HAL_RCC_ClockConfig+0x1c4>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d44:	f7fd ffca 	bl	8003cdc <HAL_GetTick>
 8005d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d4a:	e00a      	b.n	8005d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d4c:	f7fd ffc6 	bl	8003cdc <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e053      	b.n	8005e0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d62:	4b2d      	ldr	r3, [pc, #180]	; (8005e18 <HAL_RCC_ClockConfig+0x1c4>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f003 020c 	and.w	r2, r3, #12
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d1eb      	bne.n	8005d4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d74:	4b27      	ldr	r3, [pc, #156]	; (8005e14 <HAL_RCC_ClockConfig+0x1c0>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0307 	and.w	r3, r3, #7
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d210      	bcs.n	8005da4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d82:	4b24      	ldr	r3, [pc, #144]	; (8005e14 <HAL_RCC_ClockConfig+0x1c0>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f023 0207 	bic.w	r2, r3, #7
 8005d8a:	4922      	ldr	r1, [pc, #136]	; (8005e14 <HAL_RCC_ClockConfig+0x1c0>)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d92:	4b20      	ldr	r3, [pc, #128]	; (8005e14 <HAL_RCC_ClockConfig+0x1c0>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d001      	beq.n	8005da4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e032      	b.n	8005e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d008      	beq.n	8005dc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005db0:	4b19      	ldr	r3, [pc, #100]	; (8005e18 <HAL_RCC_ClockConfig+0x1c4>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	4916      	ldr	r1, [pc, #88]	; (8005e18 <HAL_RCC_ClockConfig+0x1c4>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0308 	and.w	r3, r3, #8
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d009      	beq.n	8005de2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005dce:	4b12      	ldr	r3, [pc, #72]	; (8005e18 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	490e      	ldr	r1, [pc, #56]	; (8005e18 <HAL_RCC_ClockConfig+0x1c4>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005de2:	f000 f821 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8005de6:	4602      	mov	r2, r0
 8005de8:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <HAL_RCC_ClockConfig+0x1c4>)
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	091b      	lsrs	r3, r3, #4
 8005dee:	f003 030f 	and.w	r3, r3, #15
 8005df2:	490a      	ldr	r1, [pc, #40]	; (8005e1c <HAL_RCC_ClockConfig+0x1c8>)
 8005df4:	5ccb      	ldrb	r3, [r1, r3]
 8005df6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dfa:	4a09      	ldr	r2, [pc, #36]	; (8005e20 <HAL_RCC_ClockConfig+0x1cc>)
 8005dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005dfe:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <HAL_RCC_ClockConfig+0x1d0>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fd ff28 	bl	8003c58 <HAL_InitTick>

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	40022000 	.word	0x40022000
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	0800aff0 	.word	0x0800aff0
 8005e20:	20000008 	.word	0x20000008
 8005e24:	2000000c 	.word	0x2000000c

08005e28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e28:	b490      	push	{r4, r7}
 8005e2a:	b08a      	sub	sp, #40	; 0x28
 8005e2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005e2e:	4b2a      	ldr	r3, [pc, #168]	; (8005ed8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005e30:	1d3c      	adds	r4, r7, #4
 8005e32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005e38:	f240 2301 	movw	r3, #513	; 0x201
 8005e3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	61fb      	str	r3, [r7, #28]
 8005e42:	2300      	movs	r3, #0
 8005e44:	61bb      	str	r3, [r7, #24]
 8005e46:	2300      	movs	r3, #0
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005e52:	4b22      	ldr	r3, [pc, #136]	; (8005edc <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f003 030c 	and.w	r3, r3, #12
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d002      	beq.n	8005e68 <HAL_RCC_GetSysClockFreq+0x40>
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	d003      	beq.n	8005e6e <HAL_RCC_GetSysClockFreq+0x46>
 8005e66:	e02d      	b.n	8005ec4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e68:	4b1d      	ldr	r3, [pc, #116]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e6a:	623b      	str	r3, [r7, #32]
      break;
 8005e6c:	e02d      	b.n	8005eca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	0c9b      	lsrs	r3, r3, #18
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005e80:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d013      	beq.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e8c:	4b13      	ldr	r3, [pc, #76]	; (8005edc <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	0c5b      	lsrs	r3, r3, #17
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005ea0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	4a0e      	ldr	r2, [pc, #56]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ea6:	fb02 f203 	mul.w	r2, r2, r3
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb2:	e004      	b.n	8005ebe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	4a0b      	ldr	r2, [pc, #44]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005eb8:	fb02 f303 	mul.w	r3, r2, r3
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	623b      	str	r3, [r7, #32]
      break;
 8005ec2:	e002      	b.n	8005eca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ec4:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ec6:	623b      	str	r3, [r7, #32]
      break;
 8005ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eca:	6a3b      	ldr	r3, [r7, #32]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3728      	adds	r7, #40	; 0x28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bc90      	pop	{r4, r7}
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	0800afd0 	.word	0x0800afd0
 8005edc:	40021000 	.word	0x40021000
 8005ee0:	007a1200 	.word	0x007a1200
 8005ee4:	003d0900 	.word	0x003d0900

08005ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eec:	4b02      	ldr	r3, [pc, #8]	; (8005ef8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005eee:	681b      	ldr	r3, [r3, #0]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bc80      	pop	{r7}
 8005ef6:	4770      	bx	lr
 8005ef8:	20000008 	.word	0x20000008

08005efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f00:	f7ff fff2 	bl	8005ee8 <HAL_RCC_GetHCLKFreq>
 8005f04:	4602      	mov	r2, r0
 8005f06:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	0a1b      	lsrs	r3, r3, #8
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	4903      	ldr	r1, [pc, #12]	; (8005f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f12:	5ccb      	ldrb	r3, [r1, r3]
 8005f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	0800b000 	.word	0x0800b000

08005f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f28:	f7ff ffde 	bl	8005ee8 <HAL_RCC_GetHCLKFreq>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	4b05      	ldr	r3, [pc, #20]	; (8005f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	0adb      	lsrs	r3, r3, #11
 8005f34:	f003 0307 	and.w	r3, r3, #7
 8005f38:	4903      	ldr	r1, [pc, #12]	; (8005f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f3a:	5ccb      	ldrb	r3, [r1, r3]
 8005f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	40021000 	.word	0x40021000
 8005f48:	0800b000 	.word	0x0800b000

08005f4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f54:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <RCC_Delay+0x34>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a0a      	ldr	r2, [pc, #40]	; (8005f84 <RCC_Delay+0x38>)
 8005f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5e:	0a5b      	lsrs	r3, r3, #9
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	fb02 f303 	mul.w	r3, r2, r3
 8005f66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f68:	bf00      	nop
  }
  while (Delay --);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	1e5a      	subs	r2, r3, #1
 8005f6e:	60fa      	str	r2, [r7, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1f9      	bne.n	8005f68 <RCC_Delay+0x1c>
}
 8005f74:	bf00      	nop
 8005f76:	bf00      	nop
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bc80      	pop	{r7}
 8005f7e:	4770      	bx	lr
 8005f80:	20000008 	.word	0x20000008
 8005f84:	10624dd3 	.word	0x10624dd3

08005f88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e076      	b.n	8006088 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d108      	bne.n	8005fb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005faa:	d009      	beq.n	8005fc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	61da      	str	r2, [r3, #28]
 8005fb2:	e005      	b.n	8005fc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d106      	bne.n	8005fe0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fd f81c 	bl	8003018 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ff6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006012:	431a      	orrs	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	431a      	orrs	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006030:	431a      	orrs	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800603a:	431a      	orrs	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006044:	ea42 0103 	orr.w	r1, r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	0c1a      	lsrs	r2, r3, #16
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f002 0204 	and.w	r2, r2, #4
 8006066:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69da      	ldr	r2, [r3, #28]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006076:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b088      	sub	sp, #32
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	603b      	str	r3, [r7, #0]
 800609c:	4613      	mov	r3, r2
 800609e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060a0:	2300      	movs	r3, #0
 80060a2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d101      	bne.n	80060b2 <HAL_SPI_Transmit+0x22>
 80060ae:	2302      	movs	r3, #2
 80060b0:	e126      	b.n	8006300 <HAL_SPI_Transmit+0x270>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060ba:	f7fd fe0f 	bl	8003cdc <HAL_GetTick>
 80060be:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80060c0:	88fb      	ldrh	r3, [r7, #6]
 80060c2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d002      	beq.n	80060d6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80060d0:	2302      	movs	r3, #2
 80060d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060d4:	e10b      	b.n	80062ee <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <HAL_SPI_Transmit+0x52>
 80060dc:	88fb      	ldrh	r3, [r7, #6]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d102      	bne.n	80060e8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060e6:	e102      	b.n	80062ee <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2203      	movs	r2, #3
 80060ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	88fa      	ldrh	r2, [r7, #6]
 8006100:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	88fa      	ldrh	r2, [r7, #6]
 8006106:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800612e:	d10f      	bne.n	8006150 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800613e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800614e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615a:	2b40      	cmp	r3, #64	; 0x40
 800615c:	d007      	beq.n	800616e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800616c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006176:	d14b      	bne.n	8006210 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <HAL_SPI_Transmit+0xf6>
 8006180:	8afb      	ldrh	r3, [r7, #22]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d13e      	bne.n	8006204 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618a:	881a      	ldrh	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006196:	1c9a      	adds	r2, r3, #2
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80061aa:	e02b      	b.n	8006204 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d112      	bne.n	80061e0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061be:	881a      	ldrh	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ca:	1c9a      	adds	r2, r3, #2
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	3b01      	subs	r3, #1
 80061d8:	b29a      	uxth	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80061de:	e011      	b.n	8006204 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061e0:	f7fd fd7c 	bl	8003cdc <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d803      	bhi.n	80061f8 <HAL_SPI_Transmit+0x168>
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f6:	d102      	bne.n	80061fe <HAL_SPI_Transmit+0x16e>
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d102      	bne.n	8006204 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006202:	e074      	b.n	80062ee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006208:	b29b      	uxth	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1ce      	bne.n	80061ac <HAL_SPI_Transmit+0x11c>
 800620e:	e04c      	b.n	80062aa <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <HAL_SPI_Transmit+0x18e>
 8006218:	8afb      	ldrh	r3, [r7, #22]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d140      	bne.n	80062a0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	330c      	adds	r3, #12
 8006228:	7812      	ldrb	r2, [r2, #0]
 800622a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800623a:	b29b      	uxth	r3, r3
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006244:	e02c      	b.n	80062a0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f003 0302 	and.w	r3, r3, #2
 8006250:	2b02      	cmp	r3, #2
 8006252:	d113      	bne.n	800627c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	330c      	adds	r3, #12
 800625e:	7812      	ldrb	r2, [r2, #0]
 8006260:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006270:	b29b      	uxth	r3, r3
 8006272:	3b01      	subs	r3, #1
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	86da      	strh	r2, [r3, #54]	; 0x36
 800627a:	e011      	b.n	80062a0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800627c:	f7fd fd2e 	bl	8003cdc <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	429a      	cmp	r2, r3
 800628a:	d803      	bhi.n	8006294 <HAL_SPI_Transmit+0x204>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006292:	d102      	bne.n	800629a <HAL_SPI_Transmit+0x20a>
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d102      	bne.n	80062a0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800629e:	e026      	b.n	80062ee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1cd      	bne.n	8006246 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	6839      	ldr	r1, [r7, #0]
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 fbb8 	bl	8006a24 <SPI_EndRxTxTransaction>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2220      	movs	r2, #32
 80062be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10a      	bne.n	80062de <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062c8:	2300      	movs	r3, #0
 80062ca:	613b      	str	r3, [r7, #16]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	613b      	str	r3, [r7, #16]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	613b      	str	r3, [r7, #16]
 80062dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	77fb      	strb	r3, [r7, #31]
 80062ea:	e000      	b.n	80062ee <HAL_SPI_Transmit+0x25e>
  }

error:
 80062ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3720      	adds	r7, #32
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b088      	sub	sp, #32
 800630c:	af02      	add	r7, sp, #8
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	603b      	str	r3, [r7, #0]
 8006314:	4613      	mov	r3, r2
 8006316:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006324:	d112      	bne.n	800634c <HAL_SPI_Receive+0x44>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10e      	bne.n	800634c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2204      	movs	r2, #4
 8006332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006336:	88fa      	ldrh	r2, [r7, #6]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	4613      	mov	r3, r2
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f8f1 	bl	800652a <HAL_SPI_TransmitReceive>
 8006348:	4603      	mov	r3, r0
 800634a:	e0ea      	b.n	8006522 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006352:	2b01      	cmp	r3, #1
 8006354:	d101      	bne.n	800635a <HAL_SPI_Receive+0x52>
 8006356:	2302      	movs	r3, #2
 8006358:	e0e3      	b.n	8006522 <HAL_SPI_Receive+0x21a>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006362:	f7fd fcbb 	bl	8003cdc <HAL_GetTick>
 8006366:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b01      	cmp	r3, #1
 8006372:	d002      	beq.n	800637a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006374:	2302      	movs	r3, #2
 8006376:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006378:	e0ca      	b.n	8006510 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <HAL_SPI_Receive+0x7e>
 8006380:	88fb      	ldrh	r3, [r7, #6]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d102      	bne.n	800638c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	75fb      	strb	r3, [r7, #23]
    goto error;
 800638a:	e0c1      	b.n	8006510 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2204      	movs	r2, #4
 8006390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	88fa      	ldrh	r2, [r7, #6]
 80063a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	88fa      	ldrh	r2, [r7, #6]
 80063aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063d2:	d10f      	bne.n	80063f4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063f2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fe:	2b40      	cmp	r3, #64	; 0x40
 8006400:	d007      	beq.n	8006412 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006410:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d162      	bne.n	80064e0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800641a:	e02e      	b.n	800647a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b01      	cmp	r3, #1
 8006428:	d115      	bne.n	8006456 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f103 020c 	add.w	r2, r3, #12
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	7812      	ldrb	r2, [r2, #0]
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800644a:	b29b      	uxth	r3, r3
 800644c:	3b01      	subs	r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006454:	e011      	b.n	800647a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006456:	f7fd fc41 	bl	8003cdc <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	429a      	cmp	r2, r3
 8006464:	d803      	bhi.n	800646e <HAL_SPI_Receive+0x166>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646c:	d102      	bne.n	8006474 <HAL_SPI_Receive+0x16c>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d102      	bne.n	800647a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006478:	e04a      	b.n	8006510 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800647e:	b29b      	uxth	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1cb      	bne.n	800641c <HAL_SPI_Receive+0x114>
 8006484:	e031      	b.n	80064ea <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b01      	cmp	r3, #1
 8006492:	d113      	bne.n	80064bc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649e:	b292      	uxth	r2, r2
 80064a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a6:	1c9a      	adds	r2, r3, #2
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064ba:	e011      	b.n	80064e0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064bc:	f7fd fc0e 	bl	8003cdc <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d803      	bhi.n	80064d4 <HAL_SPI_Receive+0x1cc>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d2:	d102      	bne.n	80064da <HAL_SPI_Receive+0x1d2>
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d102      	bne.n	80064e0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80064de:	e017      	b.n	8006510 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1cd      	bne.n	8006486 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 fa46 	bl	8006980 <SPI_EndRxTransaction>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2220      	movs	r2, #32
 80064fe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	75fb      	strb	r3, [r7, #23]
 800650c:	e000      	b.n	8006510 <HAL_SPI_Receive+0x208>
  }

error :
 800650e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006520:	7dfb      	ldrb	r3, [r7, #23]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b08c      	sub	sp, #48	; 0x30
 800652e:	af00      	add	r7, sp, #0
 8006530:	60f8      	str	r0, [r7, #12]
 8006532:	60b9      	str	r1, [r7, #8]
 8006534:	607a      	str	r2, [r7, #4]
 8006536:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006538:	2301      	movs	r3, #1
 800653a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006548:	2b01      	cmp	r3, #1
 800654a:	d101      	bne.n	8006550 <HAL_SPI_TransmitReceive+0x26>
 800654c:	2302      	movs	r3, #2
 800654e:	e18a      	b.n	8006866 <HAL_SPI_TransmitReceive+0x33c>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006558:	f7fd fbc0 	bl	8003cdc <HAL_GetTick>
 800655c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800656e:	887b      	ldrh	r3, [r7, #2]
 8006570:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006572:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006576:	2b01      	cmp	r3, #1
 8006578:	d00f      	beq.n	800659a <HAL_SPI_TransmitReceive+0x70>
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006580:	d107      	bne.n	8006592 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d103      	bne.n	8006592 <HAL_SPI_TransmitReceive+0x68>
 800658a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800658e:	2b04      	cmp	r3, #4
 8006590:	d003      	beq.n	800659a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006592:	2302      	movs	r3, #2
 8006594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006598:	e15b      	b.n	8006852 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d005      	beq.n	80065ac <HAL_SPI_TransmitReceive+0x82>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <HAL_SPI_TransmitReceive+0x82>
 80065a6:	887b      	ldrh	r3, [r7, #2]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d103      	bne.n	80065b4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065b2:	e14e      	b.n	8006852 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d003      	beq.n	80065c8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2205      	movs	r2, #5
 80065c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	887a      	ldrh	r2, [r7, #2]
 80065d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	887a      	ldrh	r2, [r7, #2]
 80065de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	887a      	ldrh	r2, [r7, #2]
 80065ea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	887a      	ldrh	r2, [r7, #2]
 80065f0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006608:	2b40      	cmp	r3, #64	; 0x40
 800660a:	d007      	beq.n	800661c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800661a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006624:	d178      	bne.n	8006718 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <HAL_SPI_TransmitReceive+0x10a>
 800662e:	8b7b      	ldrh	r3, [r7, #26]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d166      	bne.n	8006702 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006638:	881a      	ldrh	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006644:	1c9a      	adds	r2, r3, #2
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800664e:	b29b      	uxth	r3, r3
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006658:	e053      	b.n	8006702 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f003 0302 	and.w	r3, r3, #2
 8006664:	2b02      	cmp	r3, #2
 8006666:	d11b      	bne.n	80066a0 <HAL_SPI_TransmitReceive+0x176>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d016      	beq.n	80066a0 <HAL_SPI_TransmitReceive+0x176>
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	2b01      	cmp	r3, #1
 8006676:	d113      	bne.n	80066a0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667c:	881a      	ldrh	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	1c9a      	adds	r2, r3, #2
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006692:	b29b      	uxth	r3, r3
 8006694:	3b01      	subs	r3, #1
 8006696:	b29a      	uxth	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d119      	bne.n	80066e2 <HAL_SPI_TransmitReceive+0x1b8>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d014      	beq.n	80066e2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c2:	b292      	uxth	r2, r2
 80066c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ca:	1c9a      	adds	r2, r3, #2
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b29a      	uxth	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066de:	2301      	movs	r3, #1
 80066e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066e2:	f7fd fafb 	bl	8003cdc <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d807      	bhi.n	8006702 <HAL_SPI_TransmitReceive+0x1d8>
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f8:	d003      	beq.n	8006702 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006700:	e0a7      	b.n	8006852 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006706:	b29b      	uxth	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1a6      	bne.n	800665a <HAL_SPI_TransmitReceive+0x130>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006710:	b29b      	uxth	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1a1      	bne.n	800665a <HAL_SPI_TransmitReceive+0x130>
 8006716:	e07c      	b.n	8006812 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <HAL_SPI_TransmitReceive+0x1fc>
 8006720:	8b7b      	ldrh	r3, [r7, #26]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d16b      	bne.n	80067fe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	330c      	adds	r3, #12
 8006730:	7812      	ldrb	r2, [r2, #0]
 8006732:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006742:	b29b      	uxth	r3, r3
 8006744:	3b01      	subs	r3, #1
 8006746:	b29a      	uxth	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800674c:	e057      	b.n	80067fe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b02      	cmp	r3, #2
 800675a:	d11c      	bne.n	8006796 <HAL_SPI_TransmitReceive+0x26c>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006760:	b29b      	uxth	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d017      	beq.n	8006796 <HAL_SPI_TransmitReceive+0x26c>
 8006766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006768:	2b01      	cmp	r3, #1
 800676a:	d114      	bne.n	8006796 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	330c      	adds	r3, #12
 8006776:	7812      	ldrb	r2, [r2, #0]
 8006778:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006788:	b29b      	uxth	r3, r3
 800678a:	3b01      	subs	r3, #1
 800678c:	b29a      	uxth	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006792:	2300      	movs	r3, #0
 8006794:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d119      	bne.n	80067d8 <HAL_SPI_TransmitReceive+0x2ae>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d014      	beq.n	80067d8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68da      	ldr	r2, [r3, #12]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	3b01      	subs	r3, #1
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067d4:	2301      	movs	r3, #1
 80067d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067d8:	f7fd fa80 	bl	8003cdc <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d803      	bhi.n	80067f0 <HAL_SPI_TransmitReceive+0x2c6>
 80067e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ee:	d102      	bne.n	80067f6 <HAL_SPI_TransmitReceive+0x2cc>
 80067f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d103      	bne.n	80067fe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80067fc:	e029      	b.n	8006852 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006802:	b29b      	uxth	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1a2      	bne.n	800674e <HAL_SPI_TransmitReceive+0x224>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800680c:	b29b      	uxth	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d19d      	bne.n	800674e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006814:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f000 f904 	bl	8006a24 <SPI_EndRxTxTransaction>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d006      	beq.n	8006830 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2220      	movs	r2, #32
 800682c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800682e:	e010      	b.n	8006852 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10b      	bne.n	8006850 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006838:	2300      	movs	r3, #0
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	617b      	str	r3, [r7, #20]
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	e000      	b.n	8006852 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006850:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006862:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006866:	4618      	mov	r0, r3
 8006868:	3730      	adds	r7, #48	; 0x30
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
	...

08006870 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	603b      	str	r3, [r7, #0]
 800687c:	4613      	mov	r3, r2
 800687e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006880:	f7fd fa2c 	bl	8003cdc <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006888:	1a9b      	subs	r3, r3, r2
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	4413      	add	r3, r2
 800688e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006890:	f7fd fa24 	bl	8003cdc <HAL_GetTick>
 8006894:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006896:	4b39      	ldr	r3, [pc, #228]	; (800697c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	015b      	lsls	r3, r3, #5
 800689c:	0d1b      	lsrs	r3, r3, #20
 800689e:	69fa      	ldr	r2, [r7, #28]
 80068a0:	fb02 f303 	mul.w	r3, r2, r3
 80068a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068a6:	e054      	b.n	8006952 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ae:	d050      	beq.n	8006952 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068b0:	f7fd fa14 	bl	8003cdc <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d902      	bls.n	80068c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d13d      	bne.n	8006942 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068de:	d111      	bne.n	8006904 <SPI_WaitFlagStateUntilTimeout+0x94>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068e8:	d004      	beq.n	80068f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068f2:	d107      	bne.n	8006904 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006902:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800690c:	d10f      	bne.n	800692e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800692c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e017      	b.n	8006972 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	3b01      	subs	r3, #1
 8006950:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	4013      	ands	r3, r2
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	429a      	cmp	r2, r3
 8006960:	bf0c      	ite	eq
 8006962:	2301      	moveq	r3, #1
 8006964:	2300      	movne	r3, #0
 8006966:	b2db      	uxtb	r3, r3
 8006968:	461a      	mov	r2, r3
 800696a:	79fb      	ldrb	r3, [r7, #7]
 800696c:	429a      	cmp	r2, r3
 800696e:	d19b      	bne.n	80068a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3720      	adds	r7, #32
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	20000008 	.word	0x20000008

08006980 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af02      	add	r7, sp, #8
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006994:	d111      	bne.n	80069ba <SPI_EndRxTransaction+0x3a>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800699e:	d004      	beq.n	80069aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069a8:	d107      	bne.n	80069ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069b8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069c2:	d117      	bne.n	80069f4 <SPI_EndRxTransaction+0x74>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069cc:	d112      	bne.n	80069f4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2200      	movs	r2, #0
 80069d6:	2101      	movs	r1, #1
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f7ff ff49 	bl	8006870 <SPI_WaitFlagStateUntilTimeout>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d01a      	beq.n	8006a1a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e8:	f043 0220 	orr.w	r2, r3, #32
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e013      	b.n	8006a1c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2200      	movs	r2, #0
 80069fc:	2180      	movs	r1, #128	; 0x80
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f7ff ff36 	bl	8006870 <SPI_WaitFlagStateUntilTimeout>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d007      	beq.n	8006a1a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0e:	f043 0220 	orr.w	r2, r3, #32
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e000      	b.n	8006a1c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2200      	movs	r2, #0
 8006a38:	2180      	movs	r1, #128	; 0x80
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f7ff ff18 	bl	8006870 <SPI_WaitFlagStateUntilTimeout>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d007      	beq.n	8006a56 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4a:	f043 0220 	orr.w	r2, r3, #32
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e000      	b.n	8006a58 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e041      	b.n	8006af6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d106      	bne.n	8006a8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7fc fe44 	bl	8003714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	4610      	mov	r0, r2
 8006aa0:	f000 fe98 	bl	80077d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d001      	beq.n	8006b18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e032      	b.n	8006b7e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a18      	ldr	r2, [pc, #96]	; (8006b88 <HAL_TIM_Base_Start+0x88>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00e      	beq.n	8006b48 <HAL_TIM_Base_Start+0x48>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b32:	d009      	beq.n	8006b48 <HAL_TIM_Base_Start+0x48>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a14      	ldr	r2, [pc, #80]	; (8006b8c <HAL_TIM_Base_Start+0x8c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d004      	beq.n	8006b48 <HAL_TIM_Base_Start+0x48>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a13      	ldr	r2, [pc, #76]	; (8006b90 <HAL_TIM_Base_Start+0x90>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d111      	bne.n	8006b6c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f003 0307 	and.w	r3, r3, #7
 8006b52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b06      	cmp	r3, #6
 8006b58:	d010      	beq.n	8006b7c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f042 0201 	orr.w	r2, r2, #1
 8006b68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b6a:	e007      	b.n	8006b7c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0201 	orr.w	r2, r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bc80      	pop	{r7}
 8006b86:	4770      	bx	lr
 8006b88:	40012c00 	.word	0x40012c00
 8006b8c:	40000400 	.word	0x40000400
 8006b90:	40000800 	.word	0x40000800

08006b94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d001      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e03a      	b.n	8006c22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68da      	ldr	r2, [r3, #12]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0201 	orr.w	r2, r2, #1
 8006bc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a18      	ldr	r2, [pc, #96]	; (8006c2c <HAL_TIM_Base_Start_IT+0x98>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d00e      	beq.n	8006bec <HAL_TIM_Base_Start_IT+0x58>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd6:	d009      	beq.n	8006bec <HAL_TIM_Base_Start_IT+0x58>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a14      	ldr	r2, [pc, #80]	; (8006c30 <HAL_TIM_Base_Start_IT+0x9c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d004      	beq.n	8006bec <HAL_TIM_Base_Start_IT+0x58>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a13      	ldr	r2, [pc, #76]	; (8006c34 <HAL_TIM_Base_Start_IT+0xa0>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d111      	bne.n	8006c10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f003 0307 	and.w	r3, r3, #7
 8006bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2b06      	cmp	r3, #6
 8006bfc:	d010      	beq.n	8006c20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f042 0201 	orr.w	r2, r2, #1
 8006c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c0e:	e007      	b.n	8006c20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0201 	orr.w	r2, r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bc80      	pop	{r7}
 8006c2a:	4770      	bx	lr
 8006c2c:	40012c00 	.word	0x40012c00
 8006c30:	40000400 	.word	0x40000400
 8006c34:	40000800 	.word	0x40000800

08006c38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e041      	b.n	8006cce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d106      	bne.n	8006c64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7fc fd3a 	bl	80036d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3304      	adds	r3, #4
 8006c74:	4619      	mov	r1, r3
 8006c76:	4610      	mov	r0, r2
 8006c78:	f000 fdac 	bl	80077d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d109      	bne.n	8006cfc <HAL_TIM_PWM_Start+0x24>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	bf14      	ite	ne
 8006cf4:	2301      	movne	r3, #1
 8006cf6:	2300      	moveq	r3, #0
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	e022      	b.n	8006d42 <HAL_TIM_PWM_Start+0x6a>
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2b04      	cmp	r3, #4
 8006d00:	d109      	bne.n	8006d16 <HAL_TIM_PWM_Start+0x3e>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	bf14      	ite	ne
 8006d0e:	2301      	movne	r3, #1
 8006d10:	2300      	moveq	r3, #0
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	e015      	b.n	8006d42 <HAL_TIM_PWM_Start+0x6a>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d109      	bne.n	8006d30 <HAL_TIM_PWM_Start+0x58>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	bf14      	ite	ne
 8006d28:	2301      	movne	r3, #1
 8006d2a:	2300      	moveq	r3, #0
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	e008      	b.n	8006d42 <HAL_TIM_PWM_Start+0x6a>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	bf14      	ite	ne
 8006d3c:	2301      	movne	r3, #1
 8006d3e:	2300      	moveq	r3, #0
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d001      	beq.n	8006d4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e05e      	b.n	8006e08 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d104      	bne.n	8006d5a <HAL_TIM_PWM_Start+0x82>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d58:	e013      	b.n	8006d82 <HAL_TIM_PWM_Start+0xaa>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2b04      	cmp	r3, #4
 8006d5e:	d104      	bne.n	8006d6a <HAL_TIM_PWM_Start+0x92>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2202      	movs	r2, #2
 8006d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d68:	e00b      	b.n	8006d82 <HAL_TIM_PWM_Start+0xaa>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d104      	bne.n	8006d7a <HAL_TIM_PWM_Start+0xa2>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d78:	e003      	b.n	8006d82 <HAL_TIM_PWM_Start+0xaa>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2201      	movs	r2, #1
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f001 f8af 	bl	8007eee <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a1e      	ldr	r2, [pc, #120]	; (8006e10 <HAL_TIM_PWM_Start+0x138>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d107      	bne.n	8006daa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006da8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a18      	ldr	r2, [pc, #96]	; (8006e10 <HAL_TIM_PWM_Start+0x138>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d00e      	beq.n	8006dd2 <HAL_TIM_PWM_Start+0xfa>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dbc:	d009      	beq.n	8006dd2 <HAL_TIM_PWM_Start+0xfa>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a14      	ldr	r2, [pc, #80]	; (8006e14 <HAL_TIM_PWM_Start+0x13c>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d004      	beq.n	8006dd2 <HAL_TIM_PWM_Start+0xfa>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a12      	ldr	r2, [pc, #72]	; (8006e18 <HAL_TIM_PWM_Start+0x140>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d111      	bne.n	8006df6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f003 0307 	and.w	r3, r3, #7
 8006ddc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2b06      	cmp	r3, #6
 8006de2:	d010      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f042 0201 	orr.w	r2, r2, #1
 8006df2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df4:	e007      	b.n	8006e06 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f042 0201 	orr.w	r2, r2, #1
 8006e04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	40012c00 	.word	0x40012c00
 8006e14:	40000400 	.word	0x40000400
 8006e18:	40000800 	.word	0x40000800

08006e1c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e041      	b.n	8006eb2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d106      	bne.n	8006e48 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f839 	bl	8006eba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3304      	adds	r3, #4
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4610      	mov	r0, r2
 8006e5c:	f000 fcba 	bl	80077d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006ec2:	bf00      	nop
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bc80      	pop	{r7}
 8006eca:	4770      	bx	lr

08006ecc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d104      	bne.n	8006ee6 <HAL_TIM_IC_Start_IT+0x1a>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	e013      	b.n	8006f0e <HAL_TIM_IC_Start_IT+0x42>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b04      	cmp	r3, #4
 8006eea:	d104      	bne.n	8006ef6 <HAL_TIM_IC_Start_IT+0x2a>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	e00b      	b.n	8006f0e <HAL_TIM_IC_Start_IT+0x42>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b08      	cmp	r3, #8
 8006efa:	d104      	bne.n	8006f06 <HAL_TIM_IC_Start_IT+0x3a>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	e003      	b.n	8006f0e <HAL_TIM_IC_Start_IT+0x42>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d104      	bne.n	8006f20 <HAL_TIM_IC_Start_IT+0x54>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	e013      	b.n	8006f48 <HAL_TIM_IC_Start_IT+0x7c>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	d104      	bne.n	8006f30 <HAL_TIM_IC_Start_IT+0x64>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	e00b      	b.n	8006f48 <HAL_TIM_IC_Start_IT+0x7c>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	2b08      	cmp	r3, #8
 8006f34:	d104      	bne.n	8006f40 <HAL_TIM_IC_Start_IT+0x74>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	e003      	b.n	8006f48 <HAL_TIM_IC_Start_IT+0x7c>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d102      	bne.n	8006f56 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d001      	beq.n	8006f5a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e0b3      	b.n	80070c2 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d104      	bne.n	8006f6a <HAL_TIM_IC_Start_IT+0x9e>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f68:	e013      	b.n	8006f92 <HAL_TIM_IC_Start_IT+0xc6>
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d104      	bne.n	8006f7a <HAL_TIM_IC_Start_IT+0xae>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f78:	e00b      	b.n	8006f92 <HAL_TIM_IC_Start_IT+0xc6>
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	d104      	bne.n	8006f8a <HAL_TIM_IC_Start_IT+0xbe>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2202      	movs	r2, #2
 8006f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f88:	e003      	b.n	8006f92 <HAL_TIM_IC_Start_IT+0xc6>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d104      	bne.n	8006fa2 <HAL_TIM_IC_Start_IT+0xd6>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fa0:	e013      	b.n	8006fca <HAL_TIM_IC_Start_IT+0xfe>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	d104      	bne.n	8006fb2 <HAL_TIM_IC_Start_IT+0xe6>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fb0:	e00b      	b.n	8006fca <HAL_TIM_IC_Start_IT+0xfe>
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b08      	cmp	r3, #8
 8006fb6:	d104      	bne.n	8006fc2 <HAL_TIM_IC_Start_IT+0xf6>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fc0:	e003      	b.n	8006fca <HAL_TIM_IC_Start_IT+0xfe>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b0c      	cmp	r3, #12
 8006fce:	d841      	bhi.n	8007054 <HAL_TIM_IC_Start_IT+0x188>
 8006fd0:	a201      	add	r2, pc, #4	; (adr r2, 8006fd8 <HAL_TIM_IC_Start_IT+0x10c>)
 8006fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd6:	bf00      	nop
 8006fd8:	0800700d 	.word	0x0800700d
 8006fdc:	08007055 	.word	0x08007055
 8006fe0:	08007055 	.word	0x08007055
 8006fe4:	08007055 	.word	0x08007055
 8006fe8:	0800701f 	.word	0x0800701f
 8006fec:	08007055 	.word	0x08007055
 8006ff0:	08007055 	.word	0x08007055
 8006ff4:	08007055 	.word	0x08007055
 8006ff8:	08007031 	.word	0x08007031
 8006ffc:	08007055 	.word	0x08007055
 8007000:	08007055 	.word	0x08007055
 8007004:	08007055 	.word	0x08007055
 8007008:	08007043 	.word	0x08007043
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68da      	ldr	r2, [r3, #12]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0202 	orr.w	r2, r2, #2
 800701a:	60da      	str	r2, [r3, #12]
      break;
 800701c:	e01b      	b.n	8007056 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68da      	ldr	r2, [r3, #12]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f042 0204 	orr.w	r2, r2, #4
 800702c:	60da      	str	r2, [r3, #12]
      break;
 800702e:	e012      	b.n	8007056 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 0208 	orr.w	r2, r2, #8
 800703e:	60da      	str	r2, [r3, #12]
      break;
 8007040:	e009      	b.n	8007056 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68da      	ldr	r2, [r3, #12]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f042 0210 	orr.w	r2, r2, #16
 8007050:	60da      	str	r2, [r3, #12]
      break;
 8007052:	e000      	b.n	8007056 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8007054:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2201      	movs	r2, #1
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	4618      	mov	r0, r3
 8007060:	f000 ff45 	bl	8007eee <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a18      	ldr	r2, [pc, #96]	; (80070cc <HAL_TIM_IC_Start_IT+0x200>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d00e      	beq.n	800708c <HAL_TIM_IC_Start_IT+0x1c0>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007076:	d009      	beq.n	800708c <HAL_TIM_IC_Start_IT+0x1c0>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a14      	ldr	r2, [pc, #80]	; (80070d0 <HAL_TIM_IC_Start_IT+0x204>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d004      	beq.n	800708c <HAL_TIM_IC_Start_IT+0x1c0>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a13      	ldr	r2, [pc, #76]	; (80070d4 <HAL_TIM_IC_Start_IT+0x208>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d111      	bne.n	80070b0 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2b06      	cmp	r3, #6
 800709c:	d010      	beq.n	80070c0 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f042 0201 	orr.w	r2, r2, #1
 80070ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ae:	e007      	b.n	80070c0 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f042 0201 	orr.w	r2, r2, #1
 80070be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	40012c00 	.word	0x40012c00
 80070d0:	40000400 	.word	0x40000400
 80070d4:	40000800 	.word	0x40000800

080070d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d122      	bne.n	8007134 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d11b      	bne.n	8007134 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f06f 0202 	mvn.w	r2, #2
 8007104:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	f003 0303 	and.w	r3, r3, #3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7fa fef0 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 8007120:	e005      	b.n	800712e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fb3a 	bl	800779c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fb40 	bl	80077ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	f003 0304 	and.w	r3, r3, #4
 800713e:	2b04      	cmp	r3, #4
 8007140:	d122      	bne.n	8007188 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b04      	cmp	r3, #4
 800714e:	d11b      	bne.n	8007188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f06f 0204 	mvn.w	r2, #4
 8007158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2202      	movs	r2, #2
 800715e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7fa fec6 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 8007174:	e005      	b.n	8007182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fb10 	bl	800779c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fb16 	bl	80077ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	f003 0308 	and.w	r3, r3, #8
 8007192:	2b08      	cmp	r3, #8
 8007194:	d122      	bne.n	80071dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f003 0308 	and.w	r3, r3, #8
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	d11b      	bne.n	80071dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f06f 0208 	mvn.w	r2, #8
 80071ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2204      	movs	r2, #4
 80071b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7fa fe9c 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 80071c8:	e005      	b.n	80071d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fae6 	bl	800779c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 faec 	bl	80077ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	f003 0310 	and.w	r3, r3, #16
 80071e6:	2b10      	cmp	r3, #16
 80071e8:	d122      	bne.n	8007230 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f003 0310 	and.w	r3, r3, #16
 80071f4:	2b10      	cmp	r3, #16
 80071f6:	d11b      	bne.n	8007230 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f06f 0210 	mvn.w	r2, #16
 8007200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2208      	movs	r2, #8
 8007206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	69db      	ldr	r3, [r3, #28]
 800720e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7fa fe72 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 800721c:	e005      	b.n	800722a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fabc 	bl	800779c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fac2 	bl	80077ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b01      	cmp	r3, #1
 800723c:	d10e      	bne.n	800725c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	2b01      	cmp	r3, #1
 800724a:	d107      	bne.n	800725c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f06f 0201 	mvn.w	r2, #1
 8007254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7fa fdee 	bl	8001e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007266:	2b80      	cmp	r3, #128	; 0x80
 8007268:	d10e      	bne.n	8007288 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007274:	2b80      	cmp	r3, #128	; 0x80
 8007276:	d107      	bne.n	8007288 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 ffae 	bl	80081e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007292:	2b40      	cmp	r3, #64	; 0x40
 8007294:	d10e      	bne.n	80072b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a0:	2b40      	cmp	r3, #64	; 0x40
 80072a2:	d107      	bne.n	80072b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fa86 	bl	80077c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	f003 0320 	and.w	r3, r3, #32
 80072be:	2b20      	cmp	r3, #32
 80072c0:	d10e      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f003 0320 	and.w	r3, r3, #32
 80072cc:	2b20      	cmp	r3, #32
 80072ce:	d107      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f06f 0220 	mvn.w	r2, #32
 80072d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 ff79 	bl	80081d2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072e0:	bf00      	nop
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d101      	bne.n	8007302 <HAL_TIM_IC_ConfigChannel+0x1a>
 80072fe:	2302      	movs	r3, #2
 8007300:	e082      	b.n	8007408 <HAL_TIM_IC_ConfigChannel+0x120>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d11b      	bne.n	8007348 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6818      	ldr	r0, [r3, #0]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	6819      	ldr	r1, [r3, #0]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f000 fc42 	bl	8007ba8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	699a      	ldr	r2, [r3, #24]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 020c 	bic.w	r2, r2, #12
 8007332:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6999      	ldr	r1, [r3, #24]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	689a      	ldr	r2, [r3, #8]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	430a      	orrs	r2, r1
 8007344:	619a      	str	r2, [r3, #24]
 8007346:	e05a      	b.n	80073fe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b04      	cmp	r3, #4
 800734c:	d11c      	bne.n	8007388 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6818      	ldr	r0, [r3, #0]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	6819      	ldr	r1, [r3, #0]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	f000 fcab 	bl	8007cb8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	699a      	ldr	r2, [r3, #24]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007370:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6999      	ldr	r1, [r3, #24]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	021a      	lsls	r2, r3, #8
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	619a      	str	r2, [r3, #24]
 8007386:	e03a      	b.n	80073fe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b08      	cmp	r3, #8
 800738c:	d11b      	bne.n	80073c6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6818      	ldr	r0, [r3, #0]
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	6819      	ldr	r1, [r3, #0]
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f000 fcf6 	bl	8007d8e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	69da      	ldr	r2, [r3, #28]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 020c 	bic.w	r2, r2, #12
 80073b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	69d9      	ldr	r1, [r3, #28]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	430a      	orrs	r2, r1
 80073c2:	61da      	str	r2, [r3, #28]
 80073c4:	e01b      	b.n	80073fe <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6818      	ldr	r0, [r3, #0]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	6819      	ldr	r1, [r3, #0]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	f000 fd15 	bl	8007e04 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	69da      	ldr	r2, [r3, #28]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80073e8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	69d9      	ldr	r1, [r3, #28]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	021a      	lsls	r2, r3, #8
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007422:	2b01      	cmp	r3, #1
 8007424:	d101      	bne.n	800742a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007426:	2302      	movs	r3, #2
 8007428:	e0ac      	b.n	8007584 <HAL_TIM_PWM_ConfigChannel+0x174>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b0c      	cmp	r3, #12
 8007436:	f200 809f 	bhi.w	8007578 <HAL_TIM_PWM_ConfigChannel+0x168>
 800743a:	a201      	add	r2, pc, #4	; (adr r2, 8007440 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800743c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007440:	08007475 	.word	0x08007475
 8007444:	08007579 	.word	0x08007579
 8007448:	08007579 	.word	0x08007579
 800744c:	08007579 	.word	0x08007579
 8007450:	080074b5 	.word	0x080074b5
 8007454:	08007579 	.word	0x08007579
 8007458:	08007579 	.word	0x08007579
 800745c:	08007579 	.word	0x08007579
 8007460:	080074f7 	.word	0x080074f7
 8007464:	08007579 	.word	0x08007579
 8007468:	08007579 	.word	0x08007579
 800746c:	08007579 	.word	0x08007579
 8007470:	08007537 	.word	0x08007537
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68b9      	ldr	r1, [r7, #8]
 800747a:	4618      	mov	r0, r3
 800747c:	f000 fa0c 	bl	8007898 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	699a      	ldr	r2, [r3, #24]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f042 0208 	orr.w	r2, r2, #8
 800748e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	699a      	ldr	r2, [r3, #24]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f022 0204 	bic.w	r2, r2, #4
 800749e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6999      	ldr	r1, [r3, #24]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	691a      	ldr	r2, [r3, #16]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	430a      	orrs	r2, r1
 80074b0:	619a      	str	r2, [r3, #24]
      break;
 80074b2:	e062      	b.n	800757a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68b9      	ldr	r1, [r7, #8]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 fa52 	bl	8007964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	699a      	ldr	r2, [r3, #24]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	699a      	ldr	r2, [r3, #24]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6999      	ldr	r1, [r3, #24]
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	021a      	lsls	r2, r3, #8
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	619a      	str	r2, [r3, #24]
      break;
 80074f4:	e041      	b.n	800757a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68b9      	ldr	r1, [r7, #8]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 fa9b 	bl	8007a38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	69da      	ldr	r2, [r3, #28]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f042 0208 	orr.w	r2, r2, #8
 8007510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	69da      	ldr	r2, [r3, #28]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 0204 	bic.w	r2, r2, #4
 8007520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	69d9      	ldr	r1, [r3, #28]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	691a      	ldr	r2, [r3, #16]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	430a      	orrs	r2, r1
 8007532:	61da      	str	r2, [r3, #28]
      break;
 8007534:	e021      	b.n	800757a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68b9      	ldr	r1, [r7, #8]
 800753c:	4618      	mov	r0, r3
 800753e:	f000 fae5 	bl	8007b0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	69da      	ldr	r2, [r3, #28]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69da      	ldr	r2, [r3, #28]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	69d9      	ldr	r1, [r3, #28]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	021a      	lsls	r2, r3, #8
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	61da      	str	r2, [r3, #28]
      break;
 8007576:	e000      	b.n	800757a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007578:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800759c:	2b01      	cmp	r3, #1
 800759e:	d101      	bne.n	80075a4 <HAL_TIM_ConfigClockSource+0x18>
 80075a0:	2302      	movs	r3, #2
 80075a2:	e0b3      	b.n	800770c <HAL_TIM_ConfigClockSource+0x180>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80075c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075dc:	d03e      	beq.n	800765c <HAL_TIM_ConfigClockSource+0xd0>
 80075de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075e2:	f200 8087 	bhi.w	80076f4 <HAL_TIM_ConfigClockSource+0x168>
 80075e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ea:	f000 8085 	beq.w	80076f8 <HAL_TIM_ConfigClockSource+0x16c>
 80075ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075f2:	d87f      	bhi.n	80076f4 <HAL_TIM_ConfigClockSource+0x168>
 80075f4:	2b70      	cmp	r3, #112	; 0x70
 80075f6:	d01a      	beq.n	800762e <HAL_TIM_ConfigClockSource+0xa2>
 80075f8:	2b70      	cmp	r3, #112	; 0x70
 80075fa:	d87b      	bhi.n	80076f4 <HAL_TIM_ConfigClockSource+0x168>
 80075fc:	2b60      	cmp	r3, #96	; 0x60
 80075fe:	d050      	beq.n	80076a2 <HAL_TIM_ConfigClockSource+0x116>
 8007600:	2b60      	cmp	r3, #96	; 0x60
 8007602:	d877      	bhi.n	80076f4 <HAL_TIM_ConfigClockSource+0x168>
 8007604:	2b50      	cmp	r3, #80	; 0x50
 8007606:	d03c      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0xf6>
 8007608:	2b50      	cmp	r3, #80	; 0x50
 800760a:	d873      	bhi.n	80076f4 <HAL_TIM_ConfigClockSource+0x168>
 800760c:	2b40      	cmp	r3, #64	; 0x40
 800760e:	d058      	beq.n	80076c2 <HAL_TIM_ConfigClockSource+0x136>
 8007610:	2b40      	cmp	r3, #64	; 0x40
 8007612:	d86f      	bhi.n	80076f4 <HAL_TIM_ConfigClockSource+0x168>
 8007614:	2b30      	cmp	r3, #48	; 0x30
 8007616:	d064      	beq.n	80076e2 <HAL_TIM_ConfigClockSource+0x156>
 8007618:	2b30      	cmp	r3, #48	; 0x30
 800761a:	d86b      	bhi.n	80076f4 <HAL_TIM_ConfigClockSource+0x168>
 800761c:	2b20      	cmp	r3, #32
 800761e:	d060      	beq.n	80076e2 <HAL_TIM_ConfigClockSource+0x156>
 8007620:	2b20      	cmp	r3, #32
 8007622:	d867      	bhi.n	80076f4 <HAL_TIM_ConfigClockSource+0x168>
 8007624:	2b00      	cmp	r3, #0
 8007626:	d05c      	beq.n	80076e2 <HAL_TIM_ConfigClockSource+0x156>
 8007628:	2b10      	cmp	r3, #16
 800762a:	d05a      	beq.n	80076e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800762c:	e062      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	6899      	ldr	r1, [r3, #8]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f000 fc37 	bl	8007eb0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007650:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	609a      	str	r2, [r3, #8]
      break;
 800765a:	e04e      	b.n	80076fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6818      	ldr	r0, [r3, #0]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	6899      	ldr	r1, [r3, #8]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	f000 fc20 	bl	8007eb0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689a      	ldr	r2, [r3, #8]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800767e:	609a      	str	r2, [r3, #8]
      break;
 8007680:	e03b      	b.n	80076fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6818      	ldr	r0, [r3, #0]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	6859      	ldr	r1, [r3, #4]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	461a      	mov	r2, r3
 8007690:	f000 fae4 	bl	8007c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2150      	movs	r1, #80	; 0x50
 800769a:	4618      	mov	r0, r3
 800769c:	f000 fbee 	bl	8007e7c <TIM_ITRx_SetConfig>
      break;
 80076a0:	e02b      	b.n	80076fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6818      	ldr	r0, [r3, #0]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	6859      	ldr	r1, [r3, #4]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	461a      	mov	r2, r3
 80076b0:	f000 fb3e 	bl	8007d30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2160      	movs	r1, #96	; 0x60
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 fbde 	bl	8007e7c <TIM_ITRx_SetConfig>
      break;
 80076c0:	e01b      	b.n	80076fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6818      	ldr	r0, [r3, #0]
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	6859      	ldr	r1, [r3, #4]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	461a      	mov	r2, r3
 80076d0:	f000 fac4 	bl	8007c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2140      	movs	r1, #64	; 0x40
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 fbce 	bl	8007e7c <TIM_ITRx_SetConfig>
      break;
 80076e0:	e00b      	b.n	80076fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4619      	mov	r1, r3
 80076ec:	4610      	mov	r0, r2
 80076ee:	f000 fbc5 	bl	8007e7c <TIM_ITRx_SetConfig>
        break;
 80076f2:	e002      	b.n	80076fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80076f4:	bf00      	nop
 80076f6:	e000      	b.n	80076fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80076f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	60fb      	str	r3, [r7, #12]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b0c      	cmp	r3, #12
 8007726:	d831      	bhi.n	800778c <HAL_TIM_ReadCapturedValue+0x78>
 8007728:	a201      	add	r2, pc, #4	; (adr r2, 8007730 <HAL_TIM_ReadCapturedValue+0x1c>)
 800772a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772e:	bf00      	nop
 8007730:	08007765 	.word	0x08007765
 8007734:	0800778d 	.word	0x0800778d
 8007738:	0800778d 	.word	0x0800778d
 800773c:	0800778d 	.word	0x0800778d
 8007740:	0800776f 	.word	0x0800776f
 8007744:	0800778d 	.word	0x0800778d
 8007748:	0800778d 	.word	0x0800778d
 800774c:	0800778d 	.word	0x0800778d
 8007750:	08007779 	.word	0x08007779
 8007754:	0800778d 	.word	0x0800778d
 8007758:	0800778d 	.word	0x0800778d
 800775c:	0800778d 	.word	0x0800778d
 8007760:	08007783 	.word	0x08007783
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800776a:	60fb      	str	r3, [r7, #12]

      break;
 800776c:	e00f      	b.n	800778e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007774:	60fb      	str	r3, [r7, #12]

      break;
 8007776:	e00a      	b.n	800778e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800777e:	60fb      	str	r3, [r7, #12]

      break;
 8007780:	e005      	b.n	800778e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007788:	60fb      	str	r3, [r7, #12]

      break;
 800778a:	e000      	b.n	800778e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800778c:	bf00      	nop
  }

  return tmpreg;
 800778e:	68fb      	ldr	r3, [r7, #12]
}
 8007790:	4618      	mov	r0, r3
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	bc80      	pop	{r7}
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop

0800779c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bc80      	pop	{r7}
 80077ac:	4770      	bx	lr

080077ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077ae:	b480      	push	{r7}
 80077b0:	b083      	sub	sp, #12
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077b6:	bf00      	nop
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bc80      	pop	{r7}
 80077be:	4770      	bx	lr

080077c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bc80      	pop	{r7}
 80077d0:	4770      	bx	lr
	...

080077d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a29      	ldr	r2, [pc, #164]	; (800788c <TIM_Base_SetConfig+0xb8>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d00b      	beq.n	8007804 <TIM_Base_SetConfig+0x30>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077f2:	d007      	beq.n	8007804 <TIM_Base_SetConfig+0x30>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a26      	ldr	r2, [pc, #152]	; (8007890 <TIM_Base_SetConfig+0xbc>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d003      	beq.n	8007804 <TIM_Base_SetConfig+0x30>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a25      	ldr	r2, [pc, #148]	; (8007894 <TIM_Base_SetConfig+0xc0>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d108      	bne.n	8007816 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	4313      	orrs	r3, r2
 8007814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a1c      	ldr	r2, [pc, #112]	; (800788c <TIM_Base_SetConfig+0xb8>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d00b      	beq.n	8007836 <TIM_Base_SetConfig+0x62>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007824:	d007      	beq.n	8007836 <TIM_Base_SetConfig+0x62>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a19      	ldr	r2, [pc, #100]	; (8007890 <TIM_Base_SetConfig+0xbc>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d003      	beq.n	8007836 <TIM_Base_SetConfig+0x62>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a18      	ldr	r2, [pc, #96]	; (8007894 <TIM_Base_SetConfig+0xc0>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d108      	bne.n	8007848 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800783c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	4313      	orrs	r3, r2
 8007846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	4313      	orrs	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	689a      	ldr	r2, [r3, #8]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a07      	ldr	r2, [pc, #28]	; (800788c <TIM_Base_SetConfig+0xb8>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d103      	bne.n	800787c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	691a      	ldr	r2, [r3, #16]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	615a      	str	r2, [r3, #20]
}
 8007882:	bf00      	nop
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	bc80      	pop	{r7}
 800788a:	4770      	bx	lr
 800788c:	40012c00 	.word	0x40012c00
 8007890:	40000400 	.word	0x40000400
 8007894:	40000800 	.word	0x40000800

08007898 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007898:	b480      	push	{r7}
 800789a:	b087      	sub	sp, #28
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	f023 0201 	bic.w	r2, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 0303 	bic.w	r3, r3, #3
 80078ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f023 0302 	bic.w	r3, r3, #2
 80078e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a1c      	ldr	r2, [pc, #112]	; (8007960 <TIM_OC1_SetConfig+0xc8>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d10c      	bne.n	800790e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	f023 0308 	bic.w	r3, r3, #8
 80078fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	4313      	orrs	r3, r2
 8007904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f023 0304 	bic.w	r3, r3, #4
 800790c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a13      	ldr	r2, [pc, #76]	; (8007960 <TIM_OC1_SetConfig+0xc8>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d111      	bne.n	800793a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800791c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	4313      	orrs	r3, r2
 800792e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	4313      	orrs	r3, r2
 8007938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	685a      	ldr	r2, [r3, #4]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	621a      	str	r2, [r3, #32]
}
 8007954:	bf00      	nop
 8007956:	371c      	adds	r7, #28
 8007958:	46bd      	mov	sp, r7
 800795a:	bc80      	pop	{r7}
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	40012c00 	.word	0x40012c00

08007964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	f023 0210 	bic.w	r2, r3, #16
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800799a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	021b      	lsls	r3, r3, #8
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	f023 0320 	bic.w	r3, r3, #32
 80079ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	011b      	lsls	r3, r3, #4
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a1d      	ldr	r2, [pc, #116]	; (8007a34 <TIM_OC2_SetConfig+0xd0>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d10d      	bne.n	80079e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	011b      	lsls	r3, r3, #4
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a14      	ldr	r2, [pc, #80]	; (8007a34 <TIM_OC2_SetConfig+0xd0>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d113      	bne.n	8007a10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	695b      	ldr	r3, [r3, #20]
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	621a      	str	r2, [r3, #32]
}
 8007a2a:	bf00      	nop
 8007a2c:	371c      	adds	r7, #28
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bc80      	pop	{r7}
 8007a32:	4770      	bx	lr
 8007a34:	40012c00 	.word	0x40012c00

08007a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b087      	sub	sp, #28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f023 0303 	bic.w	r3, r3, #3
 8007a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	021b      	lsls	r3, r3, #8
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a1d      	ldr	r2, [pc, #116]	; (8007b08 <TIM_OC3_SetConfig+0xd0>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d10d      	bne.n	8007ab2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	021b      	lsls	r3, r3, #8
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a14      	ldr	r2, [pc, #80]	; (8007b08 <TIM_OC3_SetConfig+0xd0>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d113      	bne.n	8007ae2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	011b      	lsls	r3, r3, #4
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	011b      	lsls	r3, r3, #4
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	685a      	ldr	r2, [r3, #4]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	621a      	str	r2, [r3, #32]
}
 8007afc:	bf00      	nop
 8007afe:	371c      	adds	r7, #28
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bc80      	pop	{r7}
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	40012c00 	.word	0x40012c00

08007b0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b087      	sub	sp, #28
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	021b      	lsls	r3, r3, #8
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	031b      	lsls	r3, r3, #12
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a0f      	ldr	r2, [pc, #60]	; (8007ba4 <TIM_OC4_SetConfig+0x98>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d109      	bne.n	8007b80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	019b      	lsls	r3, r3, #6
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	621a      	str	r2, [r3, #32]
}
 8007b9a:	bf00      	nop
 8007b9c:	371c      	adds	r7, #28
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bc80      	pop	{r7}
 8007ba2:	4770      	bx	lr
 8007ba4:	40012c00 	.word	0x40012c00

08007ba8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b087      	sub	sp, #28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
 8007bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	f023 0201 	bic.w	r2, r3, #1
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	4a1f      	ldr	r2, [pc, #124]	; (8007c50 <TIM_TI1_SetConfig+0xa8>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d00b      	beq.n	8007bee <TIM_TI1_SetConfig+0x46>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bdc:	d007      	beq.n	8007bee <TIM_TI1_SetConfig+0x46>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	4a1c      	ldr	r2, [pc, #112]	; (8007c54 <TIM_TI1_SetConfig+0xac>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d003      	beq.n	8007bee <TIM_TI1_SetConfig+0x46>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	4a1b      	ldr	r2, [pc, #108]	; (8007c58 <TIM_TI1_SetConfig+0xb0>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d101      	bne.n	8007bf2 <TIM_TI1_SetConfig+0x4a>
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e000      	b.n	8007bf4 <TIM_TI1_SetConfig+0x4c>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d008      	beq.n	8007c0a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f023 0303 	bic.w	r3, r3, #3
 8007bfe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	617b      	str	r3, [r7, #20]
 8007c08:	e003      	b.n	8007c12 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f043 0301 	orr.w	r3, r3, #1
 8007c10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	011b      	lsls	r3, r3, #4
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f023 030a 	bic.w	r3, r3, #10
 8007c2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	f003 030a 	and.w	r3, r3, #10
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	621a      	str	r2, [r3, #32]
}
 8007c46:	bf00      	nop
 8007c48:	371c      	adds	r7, #28
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bc80      	pop	{r7}
 8007c4e:	4770      	bx	lr
 8007c50:	40012c00 	.word	0x40012c00
 8007c54:	40000400 	.word	0x40000400
 8007c58:	40000800 	.word	0x40000800

08007c5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6a1b      	ldr	r3, [r3, #32]
 8007c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	f023 0201 	bic.w	r2, r3, #1
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	011b      	lsls	r3, r3, #4
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f023 030a 	bic.w	r3, r3, #10
 8007c98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	621a      	str	r2, [r3, #32]
}
 8007cae:	bf00      	nop
 8007cb0:	371c      	adds	r7, #28
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bc80      	pop	{r7}
 8007cb6:	4770      	bx	lr

08007cb8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
 8007cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	f023 0210 	bic.w	r2, r3, #16
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6a1b      	ldr	r3, [r3, #32]
 8007cdc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ce4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	021b      	lsls	r3, r3, #8
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cf6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	031b      	lsls	r3, r3, #12
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	011b      	lsls	r3, r3, #4
 8007d10:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	621a      	str	r2, [r3, #32]
}
 8007d26:	bf00      	nop
 8007d28:	371c      	adds	r7, #28
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bc80      	pop	{r7}
 8007d2e:	4770      	bx	lr

08007d30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6a1b      	ldr	r3, [r3, #32]
 8007d40:	f023 0210 	bic.w	r2, r3, #16
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	031b      	lsls	r3, r3, #12
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	011b      	lsls	r3, r3, #4
 8007d72:	693a      	ldr	r2, [r7, #16]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	621a      	str	r2, [r3, #32]
}
 8007d84:	bf00      	nop
 8007d86:	371c      	adds	r7, #28
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bc80      	pop	{r7}
 8007d8c:	4770      	bx	lr

08007d8e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b087      	sub	sp, #28
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	60f8      	str	r0, [r7, #12]
 8007d96:	60b9      	str	r1, [r7, #8]
 8007d98:	607a      	str	r2, [r7, #4]
 8007d9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6a1b      	ldr	r3, [r3, #32]
 8007da0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	69db      	ldr	r3, [r3, #28]
 8007dac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	f023 0303 	bic.w	r3, r3, #3
 8007dba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	011b      	lsls	r3, r3, #4
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dde:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	021b      	lsls	r3, r3, #8
 8007de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	621a      	str	r2, [r3, #32]
}
 8007dfa:	bf00      	nop
 8007dfc:	371c      	adds	r7, #28
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bc80      	pop	{r7}
 8007e02:	4770      	bx	lr

08007e04 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	69db      	ldr	r3, [r3, #28]
 8007e22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	021b      	lsls	r3, r3, #8
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e42:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	031b      	lsls	r3, r3, #12
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e56:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	031b      	lsls	r3, r3, #12
 8007e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	621a      	str	r2, [r3, #32]
}
 8007e72:	bf00      	nop
 8007e74:	371c      	adds	r7, #28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bc80      	pop	{r7}
 8007e7a:	4770      	bx	lr

08007e7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	f043 0307 	orr.w	r3, r3, #7
 8007e9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	609a      	str	r2, [r3, #8]
}
 8007ea6:	bf00      	nop
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bc80      	pop	{r7}
 8007eae:	4770      	bx	lr

08007eb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b087      	sub	sp, #28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
 8007ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007eca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	021a      	lsls	r2, r3, #8
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	697a      	ldr	r2, [r7, #20]
 8007ee2:	609a      	str	r2, [r3, #8]
}
 8007ee4:	bf00      	nop
 8007ee6:	371c      	adds	r7, #28
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bc80      	pop	{r7}
 8007eec:	4770      	bx	lr

08007eee <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b087      	sub	sp, #28
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	60f8      	str	r0, [r7, #12]
 8007ef6:	60b9      	str	r1, [r7, #8]
 8007ef8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f003 031f 	and.w	r3, r3, #31
 8007f00:	2201      	movs	r2, #1
 8007f02:	fa02 f303 	lsl.w	r3, r2, r3
 8007f06:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6a1a      	ldr	r2, [r3, #32]
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	43db      	mvns	r3, r3
 8007f10:	401a      	ands	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6a1a      	ldr	r2, [r3, #32]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	f003 031f 	and.w	r3, r3, #31
 8007f20:	6879      	ldr	r1, [r7, #4]
 8007f22:	fa01 f303 	lsl.w	r3, r1, r3
 8007f26:	431a      	orrs	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	621a      	str	r2, [r3, #32]
}
 8007f2c:	bf00      	nop
 8007f2e:	371c      	adds	r7, #28
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bc80      	pop	{r7}
 8007f34:	4770      	bx	lr
	...

08007f38 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d109      	bne.n	8007f5c <HAL_TIMEx_PWMN_Start+0x24>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	bf14      	ite	ne
 8007f54:	2301      	movne	r3, #1
 8007f56:	2300      	moveq	r3, #0
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	e022      	b.n	8007fa2 <HAL_TIMEx_PWMN_Start+0x6a>
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	2b04      	cmp	r3, #4
 8007f60:	d109      	bne.n	8007f76 <HAL_TIMEx_PWMN_Start+0x3e>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	bf14      	ite	ne
 8007f6e:	2301      	movne	r3, #1
 8007f70:	2300      	moveq	r3, #0
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	e015      	b.n	8007fa2 <HAL_TIMEx_PWMN_Start+0x6a>
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b08      	cmp	r3, #8
 8007f7a:	d109      	bne.n	8007f90 <HAL_TIMEx_PWMN_Start+0x58>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	bf14      	ite	ne
 8007f88:	2301      	movne	r3, #1
 8007f8a:	2300      	moveq	r3, #0
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	e008      	b.n	8007fa2 <HAL_TIMEx_PWMN_Start+0x6a>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	bf14      	ite	ne
 8007f9c:	2301      	movne	r3, #1
 8007f9e:	2300      	moveq	r3, #0
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e059      	b.n	800805e <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d104      	bne.n	8007fba <HAL_TIMEx_PWMN_Start+0x82>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fb8:	e013      	b.n	8007fe2 <HAL_TIMEx_PWMN_Start+0xaa>
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2b04      	cmp	r3, #4
 8007fbe:	d104      	bne.n	8007fca <HAL_TIMEx_PWMN_Start+0x92>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fc8:	e00b      	b.n	8007fe2 <HAL_TIMEx_PWMN_Start+0xaa>
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b08      	cmp	r3, #8
 8007fce:	d104      	bne.n	8007fda <HAL_TIMEx_PWMN_Start+0xa2>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fd8:	e003      	b.n	8007fe2 <HAL_TIMEx_PWMN_Start+0xaa>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2202      	movs	r2, #2
 8007fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2204      	movs	r2, #4
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f000 f903 	bl	80081f6 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ffe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a18      	ldr	r2, [pc, #96]	; (8008068 <HAL_TIMEx_PWMN_Start+0x130>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d00e      	beq.n	8008028 <HAL_TIMEx_PWMN_Start+0xf0>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008012:	d009      	beq.n	8008028 <HAL_TIMEx_PWMN_Start+0xf0>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a14      	ldr	r2, [pc, #80]	; (800806c <HAL_TIMEx_PWMN_Start+0x134>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d004      	beq.n	8008028 <HAL_TIMEx_PWMN_Start+0xf0>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a13      	ldr	r2, [pc, #76]	; (8008070 <HAL_TIMEx_PWMN_Start+0x138>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d111      	bne.n	800804c <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f003 0307 	and.w	r3, r3, #7
 8008032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2b06      	cmp	r3, #6
 8008038:	d010      	beq.n	800805c <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f042 0201 	orr.w	r2, r2, #1
 8008048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800804a:	e007      	b.n	800805c <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f042 0201 	orr.w	r2, r2, #1
 800805a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	40012c00 	.word	0x40012c00
 800806c:	40000400 	.word	0x40000400
 8008070:	40000800 	.word	0x40000800

08008074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008084:	2b01      	cmp	r3, #1
 8008086:	d101      	bne.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008088:	2302      	movs	r3, #2
 800808a:	e046      	b.n	800811a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2202      	movs	r2, #2
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a16      	ldr	r2, [pc, #88]	; (8008124 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d00e      	beq.n	80080ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080d8:	d009      	beq.n	80080ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a12      	ldr	r2, [pc, #72]	; (8008128 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d004      	beq.n	80080ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a10      	ldr	r2, [pc, #64]	; (800812c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d10c      	bne.n	8008108 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3714      	adds	r7, #20
 800811e:	46bd      	mov	sp, r7
 8008120:	bc80      	pop	{r7}
 8008122:	4770      	bx	lr
 8008124:	40012c00 	.word	0x40012c00
 8008128:	40000400 	.word	0x40000400
 800812c:	40000800 	.word	0x40000800

08008130 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800813a:	2300      	movs	r3, #0
 800813c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008144:	2b01      	cmp	r3, #1
 8008146:	d101      	bne.n	800814c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008148:	2302      	movs	r3, #2
 800814a:	e03d      	b.n	80081c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	4313      	orrs	r3, r2
 8008160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	4313      	orrs	r3, r2
 800816e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	4313      	orrs	r3, r2
 800817c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4313      	orrs	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	4313      	orrs	r3, r2
 8008198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	69db      	ldr	r3, [r3, #28]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bc80      	pop	{r7}
 80081d0:	4770      	bx	lr

080081d2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b083      	sub	sp, #12
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081da:	bf00      	nop
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	bc80      	pop	{r7}
 80081e2:	4770      	bx	lr

080081e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bc80      	pop	{r7}
 80081f4:	4770      	bx	lr

080081f6 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80081f6:	b480      	push	{r7}
 80081f8:	b087      	sub	sp, #28
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	60f8      	str	r0, [r7, #12]
 80081fe:	60b9      	str	r1, [r7, #8]
 8008200:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	f003 031f 	and.w	r3, r3, #31
 8008208:	2204      	movs	r2, #4
 800820a:	fa02 f303 	lsl.w	r3, r2, r3
 800820e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6a1a      	ldr	r2, [r3, #32]
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	43db      	mvns	r3, r3
 8008218:	401a      	ands	r2, r3
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6a1a      	ldr	r2, [r3, #32]
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	f003 031f 	and.w	r3, r3, #31
 8008228:	6879      	ldr	r1, [r7, #4]
 800822a:	fa01 f303 	lsl.w	r3, r1, r3
 800822e:	431a      	orrs	r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	621a      	str	r2, [r3, #32]
}
 8008234:	bf00      	nop
 8008236:	371c      	adds	r7, #28
 8008238:	46bd      	mov	sp, r7
 800823a:	bc80      	pop	{r7}
 800823c:	4770      	bx	lr

0800823e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b082      	sub	sp, #8
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d101      	bne.n	8008250 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e03f      	b.n	80082d0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b00      	cmp	r3, #0
 800825a:	d106      	bne.n	800826a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7fb fb95 	bl	8003994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2224      	movs	r2, #36	; 0x24
 800826e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68da      	ldr	r2, [r3, #12]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008280:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fd04 	bl	8008c90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	691a      	ldr	r2, [r3, #16]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008296:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	695a      	ldr	r2, [r3, #20]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082a6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68da      	ldr	r2, [r3, #12]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082b6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2220      	movs	r2, #32
 80082c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2220      	movs	r2, #32
 80082ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b08a      	sub	sp, #40	; 0x28
 80082dc:	af02      	add	r7, sp, #8
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	603b      	str	r3, [r7, #0]
 80082e4:	4613      	mov	r3, r2
 80082e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80082e8:	2300      	movs	r3, #0
 80082ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b20      	cmp	r3, #32
 80082f6:	d17c      	bne.n	80083f2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d002      	beq.n	8008304 <HAL_UART_Transmit+0x2c>
 80082fe:	88fb      	ldrh	r3, [r7, #6]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e075      	b.n	80083f4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800830e:	2b01      	cmp	r3, #1
 8008310:	d101      	bne.n	8008316 <HAL_UART_Transmit+0x3e>
 8008312:	2302      	movs	r3, #2
 8008314:	e06e      	b.n	80083f4 <HAL_UART_Transmit+0x11c>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2221      	movs	r2, #33	; 0x21
 8008328:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800832c:	f7fb fcd6 	bl	8003cdc <HAL_GetTick>
 8008330:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	88fa      	ldrh	r2, [r7, #6]
 8008336:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	88fa      	ldrh	r2, [r7, #6]
 800833c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008346:	d108      	bne.n	800835a <HAL_UART_Transmit+0x82>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d104      	bne.n	800835a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008350:	2300      	movs	r3, #0
 8008352:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	61bb      	str	r3, [r7, #24]
 8008358:	e003      	b.n	8008362 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800835e:	2300      	movs	r3, #0
 8008360:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800836a:	e02a      	b.n	80083c2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	2200      	movs	r2, #0
 8008374:	2180      	movs	r1, #128	; 0x80
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f000 fb13 	bl	80089a2 <UART_WaitOnFlagUntilTimeout>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e036      	b.n	80083f4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10b      	bne.n	80083a4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	881b      	ldrh	r3, [r3, #0]
 8008390:	461a      	mov	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800839a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	3302      	adds	r3, #2
 80083a0:	61bb      	str	r3, [r7, #24]
 80083a2:	e007      	b.n	80083b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	781a      	ldrb	r2, [r3, #0]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	3301      	adds	r3, #1
 80083b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	3b01      	subs	r3, #1
 80083bc:	b29a      	uxth	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1cf      	bne.n	800836c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	9300      	str	r3, [sp, #0]
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	2200      	movs	r2, #0
 80083d4:	2140      	movs	r1, #64	; 0x40
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f000 fae3 	bl	80089a2 <UART_WaitOnFlagUntilTimeout>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e006      	b.n	80083f4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2220      	movs	r2, #32
 80083ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80083ee:	2300      	movs	r3, #0
 80083f0:	e000      	b.n	80083f4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80083f2:	2302      	movs	r3, #2
  }
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3720      	adds	r7, #32
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	4613      	mov	r3, r2
 8008408:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b20      	cmp	r3, #32
 8008414:	d153      	bne.n	80084be <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <HAL_UART_Transmit_DMA+0x26>
 800841c:	88fb      	ldrh	r3, [r7, #6]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e04c      	b.n	80084c0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800842c:	2b01      	cmp	r3, #1
 800842e:	d101      	bne.n	8008434 <HAL_UART_Transmit_DMA+0x38>
 8008430:	2302      	movs	r3, #2
 8008432:	e045      	b.n	80084c0 <HAL_UART_Transmit_DMA+0xc4>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	88fa      	ldrh	r2, [r7, #6]
 8008446:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	88fa      	ldrh	r2, [r7, #6]
 800844c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2221      	movs	r2, #33	; 0x21
 8008458:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008460:	4a19      	ldr	r2, [pc, #100]	; (80084c8 <HAL_UART_Transmit_DMA+0xcc>)
 8008462:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008468:	4a18      	ldr	r2, [pc, #96]	; (80084cc <HAL_UART_Transmit_DMA+0xd0>)
 800846a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008470:	4a17      	ldr	r2, [pc, #92]	; (80084d0 <HAL_UART_Transmit_DMA+0xd4>)
 8008472:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008478:	2200      	movs	r2, #0
 800847a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 800847c:	f107 0308 	add.w	r3, r7, #8
 8008480:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	6819      	ldr	r1, [r3, #0]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3304      	adds	r3, #4
 8008490:	461a      	mov	r2, r3
 8008492:	88fb      	ldrh	r3, [r7, #6]
 8008494:	f7fb fdb8 	bl	8004008 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084a0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	695a      	ldr	r2, [r3, #20]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80084b8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	e000      	b.n	80084c0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80084be:	2302      	movs	r3, #2
  }
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3718      	adds	r7, #24
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	0800881d 	.word	0x0800881d
 80084cc:	0800886f 	.word	0x0800886f
 80084d0:	0800890f 	.word	0x0800890f

080084d4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	4613      	mov	r3, r2
 80084e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b20      	cmp	r3, #32
 80084ec:	d166      	bne.n	80085bc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d002      	beq.n	80084fa <HAL_UART_Receive_DMA+0x26>
 80084f4:	88fb      	ldrh	r3, [r7, #6]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e05f      	b.n	80085be <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008504:	2b01      	cmp	r3, #1
 8008506:	d101      	bne.n	800850c <HAL_UART_Receive_DMA+0x38>
 8008508:	2302      	movs	r3, #2
 800850a:	e058      	b.n	80085be <HAL_UART_Receive_DMA+0xea>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	88fa      	ldrh	r2, [r7, #6]
 800851e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2222      	movs	r2, #34	; 0x22
 800852a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008532:	4a25      	ldr	r2, [pc, #148]	; (80085c8 <HAL_UART_Receive_DMA+0xf4>)
 8008534:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800853a:	4a24      	ldr	r2, [pc, #144]	; (80085cc <HAL_UART_Receive_DMA+0xf8>)
 800853c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008542:	4a23      	ldr	r2, [pc, #140]	; (80085d0 <HAL_UART_Receive_DMA+0xfc>)
 8008544:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854a:	2200      	movs	r2, #0
 800854c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800854e:	f107 0308 	add.w	r3, r7, #8
 8008552:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3304      	adds	r3, #4
 800855e:	4619      	mov	r1, r3
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	88fb      	ldrh	r3, [r7, #6]
 8008566:	f7fb fd4f 	bl	8004008 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800856a:	2300      	movs	r3, #0
 800856c:	613b      	str	r3, [r7, #16]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	613b      	str	r3, [r7, #16]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	613b      	str	r3, [r7, #16]
 800857e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68da      	ldr	r2, [r3, #12]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008596:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	695a      	ldr	r2, [r3, #20]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f042 0201 	orr.w	r2, r2, #1
 80085a6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	695a      	ldr	r2, [r3, #20]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085b6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	e000      	b.n	80085be <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80085bc:	2302      	movs	r3, #2
  }
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3718      	adds	r7, #24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	0800888b 	.word	0x0800888b
 80085cc:	080088f3 	.word	0x080088f3
 80085d0:	0800890f 	.word	0x0800890f

080085d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b088      	sub	sp, #32
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	f003 030f 	and.w	r3, r3, #15
 8008602:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10d      	bne.n	8008626 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	f003 0320 	and.w	r3, r3, #32
 8008610:	2b00      	cmp	r3, #0
 8008612:	d008      	beq.n	8008626 <HAL_UART_IRQHandler+0x52>
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	f003 0320 	and.w	r3, r3, #32
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fab6 	bl	8008b90 <UART_Receive_IT>
      return;
 8008624:	e0d0      	b.n	80087c8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 80b0 	beq.w	800878e <HAL_UART_IRQHandler+0x1ba>
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f003 0301 	and.w	r3, r3, #1
 8008634:	2b00      	cmp	r3, #0
 8008636:	d105      	bne.n	8008644 <HAL_UART_IRQHandler+0x70>
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800863e:	2b00      	cmp	r3, #0
 8008640:	f000 80a5 	beq.w	800878e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	f003 0301 	and.w	r3, r3, #1
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00a      	beq.n	8008664 <HAL_UART_IRQHandler+0x90>
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008654:	2b00      	cmp	r3, #0
 8008656:	d005      	beq.n	8008664 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800865c:	f043 0201 	orr.w	r2, r3, #1
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	f003 0304 	and.w	r3, r3, #4
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00a      	beq.n	8008684 <HAL_UART_IRQHandler+0xb0>
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	f003 0301 	and.w	r3, r3, #1
 8008674:	2b00      	cmp	r3, #0
 8008676:	d005      	beq.n	8008684 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800867c:	f043 0202 	orr.w	r2, r3, #2
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	f003 0302 	and.w	r3, r3, #2
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00a      	beq.n	80086a4 <HAL_UART_IRQHandler+0xd0>
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f003 0301 	and.w	r3, r3, #1
 8008694:	2b00      	cmp	r3, #0
 8008696:	d005      	beq.n	80086a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869c:	f043 0204 	orr.w	r2, r3, #4
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	f003 0308 	and.w	r3, r3, #8
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00f      	beq.n	80086ce <HAL_UART_IRQHandler+0xfa>
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	f003 0320 	and.w	r3, r3, #32
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d104      	bne.n	80086c2 <HAL_UART_IRQHandler+0xee>
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d005      	beq.n	80086ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c6:	f043 0208 	orr.w	r2, r3, #8
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d077      	beq.n	80087c6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	f003 0320 	and.w	r3, r3, #32
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d007      	beq.n	80086f0 <HAL_UART_IRQHandler+0x11c>
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	f003 0320 	and.w	r3, r3, #32
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d002      	beq.n	80086f0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fa50 	bl	8008b90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	bf14      	ite	ne
 80086fe:	2301      	movne	r3, #1
 8008700:	2300      	moveq	r3, #0
 8008702:	b2db      	uxtb	r3, r3
 8008704:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800870a:	f003 0308 	and.w	r3, r3, #8
 800870e:	2b00      	cmp	r3, #0
 8008710:	d102      	bne.n	8008718 <HAL_UART_IRQHandler+0x144>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d031      	beq.n	800877c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 f9a1 	bl	8008a60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	695b      	ldr	r3, [r3, #20]
 8008724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008728:	2b00      	cmp	r3, #0
 800872a:	d023      	beq.n	8008774 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	695a      	ldr	r2, [r3, #20]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800873a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008740:	2b00      	cmp	r3, #0
 8008742:	d013      	beq.n	800876c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008748:	4a21      	ldr	r2, [pc, #132]	; (80087d0 <HAL_UART_IRQHandler+0x1fc>)
 800874a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008750:	4618      	mov	r0, r3
 8008752:	f7fb fcb9 	bl	80040c8 <HAL_DMA_Abort_IT>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d016      	beq.n	800878a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008766:	4610      	mov	r0, r2
 8008768:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800876a:	e00e      	b.n	800878a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f84c 	bl	800880a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008772:	e00a      	b.n	800878a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f848 	bl	800880a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800877a:	e006      	b.n	800878a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 f844 	bl	800880a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008788:	e01d      	b.n	80087c6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800878a:	bf00      	nop
    return;
 800878c:	e01b      	b.n	80087c6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008794:	2b00      	cmp	r3, #0
 8008796:	d008      	beq.n	80087aa <HAL_UART_IRQHandler+0x1d6>
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d003      	beq.n	80087aa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f98d 	bl	8008ac2 <UART_Transmit_IT>
    return;
 80087a8:	e00e      	b.n	80087c8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d009      	beq.n	80087c8 <HAL_UART_IRQHandler+0x1f4>
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d004      	beq.n	80087c8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f9ce 	bl	8008b60 <UART_EndTransmit_IT>
    return;
 80087c4:	e000      	b.n	80087c8 <HAL_UART_IRQHandler+0x1f4>
    return;
 80087c6:	bf00      	nop
  }
}
 80087c8:	3720      	adds	r7, #32
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	08008a9b 	.word	0x08008a9b

080087d4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80087dc:	bf00      	nop
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bc80      	pop	{r7}
 80087e4:	4770      	bx	lr

080087e6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b083      	sub	sp, #12
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80087ee:	bf00      	nop
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bc80      	pop	{r7}
 80087f6:	4770      	bx	lr

080087f8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	bc80      	pop	{r7}
 8008808:	4770      	bx	lr

0800880a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800880a:	b480      	push	{r7}
 800880c:	b083      	sub	sp, #12
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008812:	bf00      	nop
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	bc80      	pop	{r7}
 800881a:	4770      	bx	lr

0800881c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008828:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0320 	and.w	r3, r3, #32
 8008834:	2b00      	cmp	r3, #0
 8008836:	d113      	bne.n	8008860 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	695a      	ldr	r2, [r3, #20]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800884c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68da      	ldr	r2, [r3, #12]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800885c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800885e:	e002      	b.n	8008866 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f7f8 fd11 	bl	8001288 <HAL_UART_TxCpltCallback>
}
 8008866:	bf00      	nop
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b084      	sub	sp, #16
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f7ff ffa9 	bl	80087d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008882:	bf00      	nop
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b084      	sub	sp, #16
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008896:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0320 	and.w	r3, r3, #32
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d11e      	bne.n	80088e4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68da      	ldr	r2, [r3, #12]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088ba:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	695a      	ldr	r2, [r3, #20]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f022 0201 	bic.w	r2, r2, #1
 80088ca:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	695a      	ldr	r2, [r3, #20]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088da:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2220      	movs	r2, #32
 80088e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f7ff ff7e 	bl	80087e6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088ea:	bf00      	nop
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f7ff ff79 	bl	80087f8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008906:	bf00      	nop
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b084      	sub	sp, #16
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008916:	2300      	movs	r3, #0
 8008918:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800892a:	2b00      	cmp	r3, #0
 800892c:	bf14      	ite	ne
 800892e:	2301      	movne	r3, #1
 8008930:	2300      	moveq	r3, #0
 8008932:	b2db      	uxtb	r3, r3
 8008934:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800893c:	b2db      	uxtb	r3, r3
 800893e:	2b21      	cmp	r3, #33	; 0x21
 8008940:	d108      	bne.n	8008954 <UART_DMAError+0x46>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d005      	beq.n	8008954 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2200      	movs	r2, #0
 800894c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800894e:	68b8      	ldr	r0, [r7, #8]
 8008950:	f000 f871 	bl	8008a36 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800895e:	2b00      	cmp	r3, #0
 8008960:	bf14      	ite	ne
 8008962:	2301      	movne	r3, #1
 8008964:	2300      	moveq	r3, #0
 8008966:	b2db      	uxtb	r3, r3
 8008968:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b22      	cmp	r3, #34	; 0x22
 8008974:	d108      	bne.n	8008988 <UART_DMAError+0x7a>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d005      	beq.n	8008988 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2200      	movs	r2, #0
 8008980:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008982:	68b8      	ldr	r0, [r7, #8]
 8008984:	f000 f86c 	bl	8008a60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800898c:	f043 0210 	orr.w	r2, r3, #16
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008994:	68b8      	ldr	r0, [r7, #8]
 8008996:	f7ff ff38 	bl	800880a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800899a:	bf00      	nop
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b084      	sub	sp, #16
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	60f8      	str	r0, [r7, #12]
 80089aa:	60b9      	str	r1, [r7, #8]
 80089ac:	603b      	str	r3, [r7, #0]
 80089ae:	4613      	mov	r3, r2
 80089b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089b2:	e02c      	b.n	8008a0e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ba:	d028      	beq.n	8008a0e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d007      	beq.n	80089d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80089c2:	f7fb f98b 	bl	8003cdc <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	69ba      	ldr	r2, [r7, #24]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d21d      	bcs.n	8008a0e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68da      	ldr	r2, [r3, #12]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80089e0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	695a      	ldr	r2, [r3, #20]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f022 0201 	bic.w	r2, r2, #1
 80089f0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2220      	movs	r2, #32
 80089f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2220      	movs	r2, #32
 80089fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e00f      	b.n	8008a2e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	4013      	ands	r3, r2
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	bf0c      	ite	eq
 8008a1e:	2301      	moveq	r3, #1
 8008a20:	2300      	movne	r3, #0
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	461a      	mov	r2, r3
 8008a26:	79fb      	ldrb	r3, [r7, #7]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d0c3      	beq.n	80089b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b083      	sub	sp, #12
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68da      	ldr	r2, [r3, #12]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008a4c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2220      	movs	r2, #32
 8008a52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008a56:	bf00      	nop
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bc80      	pop	{r7}
 8008a5e:	4770      	bx	lr

08008a60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	68da      	ldr	r2, [r3, #12]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a76:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	695a      	ldr	r2, [r3, #20]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f022 0201 	bic.w	r2, r2, #1
 8008a86:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008a90:	bf00      	nop
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bc80      	pop	{r7}
 8008a98:	4770      	bx	lr

08008a9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b084      	sub	sp, #16
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f7ff fea8 	bl	800880a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008aba:	bf00      	nop
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b085      	sub	sp, #20
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	2b21      	cmp	r3, #33	; 0x21
 8008ad4:	d13e      	bne.n	8008b54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ade:	d114      	bne.n	8008b0a <UART_Transmit_IT+0x48>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d110      	bne.n	8008b0a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	461a      	mov	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008afc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	1c9a      	adds	r2, r3, #2
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	621a      	str	r2, [r3, #32]
 8008b08:	e008      	b.n	8008b1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	1c59      	adds	r1, r3, #1
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	6211      	str	r1, [r2, #32]
 8008b14:	781a      	ldrb	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	3b01      	subs	r3, #1
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d10f      	bne.n	8008b50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68da      	ldr	r2, [r3, #12]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68da      	ldr	r2, [r3, #12]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	e000      	b.n	8008b56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b54:	2302      	movs	r3, #2
  }
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bc80      	pop	{r7}
 8008b5e:	4770      	bx	lr

08008b60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68da      	ldr	r2, [r3, #12]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7f8 fb81 	bl	8001288 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3708      	adds	r7, #8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b22      	cmp	r3, #34	; 0x22
 8008ba2:	d170      	bne.n	8008c86 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bac:	d117      	bne.n	8008bde <UART_Receive_IT+0x4e>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d113      	bne.n	8008bde <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bbe:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd6:	1c9a      	adds	r2, r3, #2
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	629a      	str	r2, [r3, #40]	; 0x28
 8008bdc:	e026      	b.n	8008c2c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008be4:	2300      	movs	r3, #0
 8008be6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bf0:	d007      	beq.n	8008c02 <UART_Receive_IT+0x72>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10a      	bne.n	8008c10 <UART_Receive_IT+0x80>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d106      	bne.n	8008c10 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	b2da      	uxtb	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	701a      	strb	r2, [r3, #0]
 8008c0e:	e008      	b.n	8008c22 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	3b01      	subs	r3, #1
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	4619      	mov	r1, r3
 8008c3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d120      	bne.n	8008c82 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68da      	ldr	r2, [r3, #12]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f022 0220 	bic.w	r2, r2, #32
 8008c4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68da      	ldr	r2, [r3, #12]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	695a      	ldr	r2, [r3, #20]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f022 0201 	bic.w	r2, r2, #1
 8008c6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2220      	movs	r2, #32
 8008c74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff fdb4 	bl	80087e6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	e002      	b.n	8008c88 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	e000      	b.n	8008c88 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8008c86:	2302      	movs	r3, #2
  }
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	68da      	ldr	r2, [r3, #12]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	430a      	orrs	r2, r1
 8008cac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	689a      	ldr	r2, [r3, #8]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008cca:	f023 030c 	bic.w	r3, r3, #12
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	6812      	ldr	r2, [r2, #0]
 8008cd2:	68b9      	ldr	r1, [r7, #8]
 8008cd4:	430b      	orrs	r3, r1
 8008cd6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	695b      	ldr	r3, [r3, #20]
 8008cde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	699a      	ldr	r2, [r3, #24]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	430a      	orrs	r2, r1
 8008cec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a2c      	ldr	r2, [pc, #176]	; (8008da4 <UART_SetConfig+0x114>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d103      	bne.n	8008d00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008cf8:	f7fd f914 	bl	8005f24 <HAL_RCC_GetPCLK2Freq>
 8008cfc:	60f8      	str	r0, [r7, #12]
 8008cfe:	e002      	b.n	8008d06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008d00:	f7fd f8fc 	bl	8005efc <HAL_RCC_GetPCLK1Freq>
 8008d04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	009a      	lsls	r2, r3, #2
 8008d10:	441a      	add	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d1c:	4a22      	ldr	r2, [pc, #136]	; (8008da8 <UART_SetConfig+0x118>)
 8008d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d22:	095b      	lsrs	r3, r3, #5
 8008d24:	0119      	lsls	r1, r3, #4
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	4613      	mov	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	009a      	lsls	r2, r3, #2
 8008d30:	441a      	add	r2, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d3c:	4b1a      	ldr	r3, [pc, #104]	; (8008da8 <UART_SetConfig+0x118>)
 8008d3e:	fba3 0302 	umull	r0, r3, r3, r2
 8008d42:	095b      	lsrs	r3, r3, #5
 8008d44:	2064      	movs	r0, #100	; 0x64
 8008d46:	fb00 f303 	mul.w	r3, r0, r3
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	011b      	lsls	r3, r3, #4
 8008d4e:	3332      	adds	r3, #50	; 0x32
 8008d50:	4a15      	ldr	r2, [pc, #84]	; (8008da8 <UART_SetConfig+0x118>)
 8008d52:	fba2 2303 	umull	r2, r3, r2, r3
 8008d56:	095b      	lsrs	r3, r3, #5
 8008d58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d5c:	4419      	add	r1, r3
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	4613      	mov	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	009a      	lsls	r2, r3, #2
 8008d68:	441a      	add	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d74:	4b0c      	ldr	r3, [pc, #48]	; (8008da8 <UART_SetConfig+0x118>)
 8008d76:	fba3 0302 	umull	r0, r3, r3, r2
 8008d7a:	095b      	lsrs	r3, r3, #5
 8008d7c:	2064      	movs	r0, #100	; 0x64
 8008d7e:	fb00 f303 	mul.w	r3, r0, r3
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	011b      	lsls	r3, r3, #4
 8008d86:	3332      	adds	r3, #50	; 0x32
 8008d88:	4a07      	ldr	r2, [pc, #28]	; (8008da8 <UART_SetConfig+0x118>)
 8008d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d8e:	095b      	lsrs	r3, r3, #5
 8008d90:	f003 020f 	and.w	r2, r3, #15
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	440a      	add	r2, r1
 8008d9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008d9c:	bf00      	nop
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	40013800 	.word	0x40013800
 8008da8:	51eb851f 	.word	0x51eb851f
 8008dac:	00000000 	.word	0x00000000

08008db0 <_ZN10ControllerC1Ev>:
#include "Controller.hpp"



Controller::Controller() {}
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af04      	add	r7, sp, #16
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a6f      	ldr	r2, [pc, #444]	; (8008f78 <_ZN10ControllerC1Ev+0x1c8>)
 8008dbc:	639a      	str	r2, [r3, #56]	; 0x38
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a6e      	ldr	r2, [pc, #440]	; (8008f7c <_ZN10ControllerC1Ev+0x1cc>)
 8008dc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	22c8      	movs	r2, #200	; 0xc8
 8008dc8:	641a      	str	r2, [r3, #64]	; 0x40
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7f7 fc84 	bl	80006dc <__aeabi_i2f>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008ddc:	f7f7 fd86 	bl	80008ec <__aeabi_fdiv>
 8008de0:	4603      	mov	r3, r0
 8008de2:	461a      	mov	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	645a      	str	r2, [r3, #68]	; 0x44
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a65      	ldr	r2, [pc, #404]	; (8008f80 <_ZN10ControllerC1Ev+0x1d0>)
 8008dec:	649a      	str	r2, [r3, #72]	; 0x48
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a64      	ldr	r2, [pc, #400]	; (8008f84 <_ZN10ControllerC1Ev+0x1d4>)
 8008df2:	64da      	str	r2, [r3, #76]	; 0x4c
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a64      	ldr	r2, [pc, #400]	; (8008f88 <_ZN10ControllerC1Ev+0x1d8>)
 8008df8:	651a      	str	r2, [r3, #80]	; 0x50
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f04f 0200 	mov.w	r2, #0
 8008e00:	655a      	str	r2, [r3, #84]	; 0x54
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a61      	ldr	r2, [pc, #388]	; (8008f8c <_ZN10ControllerC1Ev+0x1dc>)
 8008e06:	659a      	str	r2, [r3, #88]	; 0x58
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f04f 0200 	mov.w	r2, #0
 8008e0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f04f 0200 	mov.w	r2, #0
 8008e16:	661a      	str	r2, [r3, #96]	; 0x60
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	665a      	str	r2, [r3, #100]	; 0x64
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	669a      	str	r2, [r3, #104]	; 0x68
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	66da      	str	r2, [r3, #108]	; 0x6c
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a57      	ldr	r2, [pc, #348]	; (8008f90 <_ZN10ControllerC1Ev+0x1e0>)
 8008e34:	671a      	str	r2, [r3, #112]	; 0x70
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f04f 0200 	mov.w	r2, #0
 8008e3c:	675a      	str	r2, [r3, #116]	; 0x74
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f04f 0200 	mov.w	r2, #0
 8008e44:	679a      	str	r2, [r3, #120]	; 0x78
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a52      	ldr	r2, [pc, #328]	; (8008f94 <_ZN10ControllerC1Ev+0x1e4>)
 8008e4a:	67da      	str	r2, [r3, #124]	; 0x7c
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f04f 0200 	mov.w	r2, #0
 8008e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a4e      	ldr	r2, [pc, #312]	; (8008f94 <_ZN10ControllerC1Ev+0x1e4>)
 8008e5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a4d      	ldr	r2, [pc, #308]	; (8008f98 <_ZN10ControllerC1Ev+0x1e8>)
 8008e62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a4c      	ldr	r2, [pc, #304]	; (8008f9c <_ZN10ControllerC1Ev+0x1ec>)
 8008e6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f04f 0200 	mov.w	r2, #0
 8008e74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f04f 0200 	mov.w	r2, #0
 8008e7e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8008e88:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f04f 0200 	mov.w	r2, #0
 8008e92:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f04f 0200 	mov.w	r2, #0
 8008e9c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 8008ea6:	a330      	add	r3, pc, #192	; (adr r3, 8008f68 <_ZN10ControllerC1Ev+0x1b8>)
 8008ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008eb0:	a32d      	add	r3, pc, #180	; (adr r3, 8008f68 <_ZN10ControllerC1Ev+0x1b8>)
 8008eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb6:	e9cd 2300 	strd	r2, r3, [sp]
 8008eba:	a32d      	add	r3, pc, #180	; (adr r3, 8008f70 <_ZN10ControllerC1Ev+0x1c0>)
 8008ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec0:	4608      	mov	r0, r1
 8008ec2:	f000 fa8b 	bl	80093dc <_ZN3lpfC1Eddd>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f103 01d0 	add.w	r1, r3, #208	; 0xd0
 8008ecc:	a326      	add	r3, pc, #152	; (adr r3, 8008f68 <_ZN10ControllerC1Ev+0x1b8>)
 8008ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ed6:	a324      	add	r3, pc, #144	; (adr r3, 8008f68 <_ZN10ControllerC1Ev+0x1b8>)
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	e9cd 2300 	strd	r2, r3, [sp]
 8008ee0:	a323      	add	r3, pc, #140	; (adr r3, 8008f70 <_ZN10ControllerC1Ev+0x1c0>)
 8008ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee6:	4608      	mov	r0, r1
 8008ee8:	f000 fa78 	bl	80093dc <_ZN3lpfC1Eddd>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f103 01f8 	add.w	r1, r3, #248	; 0xf8
 8008ef2:	a31d      	add	r3, pc, #116	; (adr r3, 8008f68 <_ZN10ControllerC1Ev+0x1b8>)
 8008ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008efc:	a31a      	add	r3, pc, #104	; (adr r3, 8008f68 <_ZN10ControllerC1Ev+0x1b8>)
 8008efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f02:	e9cd 2300 	strd	r2, r3, [sp]
 8008f06:	a31a      	add	r3, pc, #104	; (adr r3, 8008f70 <_ZN10ControllerC1Ev+0x1c0>)
 8008f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0c:	4608      	mov	r0, r1
 8008f0e:	f000 fa65 	bl	80093dc <_ZN3lpfC1Eddd>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f000 f9d9 	bl	80092d0 <_ZN3PIDC1Ev>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 f9d3 	bl	80092d0 <_ZN3PIDC1Ev>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 f9cd 	bl	80092d0 <_ZN3PIDC1Ev>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f000 f9c7 	bl	80092d0 <_ZN3PIDC1Ev>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 f9c1 	bl	80092d0 <_ZN3PIDC1Ev>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 f9bb 	bl	80092d0 <_ZN3PIDC1Ev>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	f3af 8000 	nop.w
 8008f68:	fc3b4f61 	.word	0xfc3b4f61
 8008f6c:	3fa35935 	.word	0x3fa35935
 8008f70:	4f0d844d 	.word	0x4f0d844d
 8008f74:	3fed94af 	.word	0x3fed94af
 8008f78:	44c1c000 	.word	0x44c1c000
 8008f7c:	42654ca3 	.word	0x42654ca3
 8008f80:	3fb33333 	.word	0x3fb33333
 8008f84:	411cf5c3 	.word	0x411cf5c3
 8008f88:	41f9d70a 	.word	0x41f9d70a
 8008f8c:	3e4ccccd 	.word	0x3e4ccccd
 8008f90:	41100000 	.word	0x41100000
 8008f94:	41200000 	.word	0x41200000
 8008f98:	41700000 	.word	0x41700000
 8008f9c:	c0800000 	.word	0xc0800000

08008fa0 <_ZN10ControllerD1Ev>:
    controller_output_pwm[3] = pwm4;

  //  return controller_output;
}

Controller::~Controller() {}
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 fa06 	bl	80093c0 <_ZN3PIDD1Ev>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f503 639b 	add.w	r3, r3, #1240	; 0x4d8
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 fa00 	bl	80093c0 <_ZN3PIDD1Ev>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 f9fa 	bl	80093c0 <_ZN3PIDD1Ev>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 f9f4 	bl	80093c0 <_ZN3PIDD1Ev>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 f9ee 	bl	80093c0 <_ZN3PIDD1Ev>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008fea:	4618      	mov	r0, r3
 8008fec:	f000 f9e8 	bl	80093c0 <_ZN3PIDD1Ev>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	33f8      	adds	r3, #248	; 0xf8
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f000 fa0c 	bl	8009412 <_ZN3lpfD1Ev>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	33d0      	adds	r3, #208	; 0xd0
 8008ffe:	4618      	mov	r0, r3
 8009000:	f000 fa07 	bl	8009412 <_ZN3lpfD1Ev>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	33a8      	adds	r3, #168	; 0xa8
 8009008:	4618      	mov	r0, r3
 800900a:	f000 fa02 	bl	8009412 <_ZN3lpfD1Ev>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4618      	mov	r0, r3
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <_ZN15Kalman_FiltresiC1Ev>:
#include "Kalman.hpp"
#include <math.h>


Kalman_Filtresi::Kalman_Filtresi()  {
 8009018:	b580      	push	{r7, lr}
 800901a:	b086      	sub	sp, #24
 800901c:	af04      	add	r7, sp, #16
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f04f 0200 	mov.w	r2, #0
 8009026:	60da      	str	r2, [r3, #12]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a87      	ldr	r2, [pc, #540]	; (8009248 <_ZN15Kalman_FiltresiC1Ev+0x230>)
 800902c:	611a      	str	r2, [r3, #16]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f04f 0200 	mov.w	r2, #0
 8009034:	62da      	str	r2, [r3, #44]	; 0x2c
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f04f 0200 	mov.w	r2, #0
 800903c:	631a      	str	r2, [r3, #48]	; 0x30
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f04f 0200 	mov.w	r2, #0
 8009044:	635a      	str	r2, [r3, #52]	; 0x34
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a80      	ldr	r2, [pc, #512]	; (800924c <_ZN15Kalman_FiltresiC1Ev+0x234>)
 800904a:	639a      	str	r2, [r3, #56]	; 0x38
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a80      	ldr	r2, [pc, #512]	; (8009250 <_ZN15Kalman_FiltresiC1Ev+0x238>)
 8009050:	651a      	str	r2, [r3, #80]	; 0x50
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a7f      	ldr	r2, [pc, #508]	; (8009254 <_ZN15Kalman_FiltresiC1Ev+0x23c>)
 8009056:	655a      	str	r2, [r3, #84]	; 0x54
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a7d      	ldr	r2, [pc, #500]	; (8009250 <_ZN15Kalman_FiltresiC1Ev+0x238>)
 800905c:	659a      	str	r2, [r3, #88]	; 0x58
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f04f 0200 	mov.w	r2, #0
 8009064:	65da      	str	r2, [r3, #92]	; 0x5c
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f04f 0200 	mov.w	r2, #0
 800906c:	661a      	str	r2, [r3, #96]	; 0x60
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f04f 0200 	mov.w	r2, #0
 8009074:	665a      	str	r2, [r3, #100]	; 0x64
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a74      	ldr	r2, [pc, #464]	; (800924c <_ZN15Kalman_FiltresiC1Ev+0x234>)
 800907a:	669a      	str	r2, [r3, #104]	; 0x68
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a76      	ldr	r2, [pc, #472]	; (8009258 <_ZN15Kalman_FiltresiC1Ev+0x240>)
 8009080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f04f 0200 	mov.w	r2, #0
 800908a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f04f 0200 	mov.w	r2, #0
 8009094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a70      	ldr	r2, [pc, #448]	; (800925c <_ZN15Kalman_FiltresiC1Ev+0x244>)
 800909c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a6a      	ldr	r2, [pc, #424]	; (800924c <_ZN15Kalman_FiltresiC1Ev+0x234>)
 80090a4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a68      	ldr	r2, [pc, #416]	; (800924c <_ZN15Kalman_FiltresiC1Ev+0x234>)
 80090ac:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a6b      	ldr	r2, [pc, #428]	; (8009260 <_ZN15Kalman_FiltresiC1Ev+0x248>)
 80090b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a6a      	ldr	r2, [pc, #424]	; (8009264 <_ZN15Kalman_FiltresiC1Ev+0x24c>)
 80090bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80090c6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a66      	ldr	r2, [pc, #408]	; (8009268 <_ZN15Kalman_FiltresiC1Ev+0x250>)
 80090ce:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a65      	ldr	r2, [pc, #404]	; (800926c <_ZN15Kalman_FiltresiC1Ev+0x254>)
 80090d6:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80090e0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a62      	ldr	r2, [pc, #392]	; (8009270 <_ZN15Kalman_FiltresiC1Ev+0x258>)
 80090e8:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	22c8      	movs	r2, #200	; 0xc8
 80090f0:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7f7 faee 	bl	80006dc <__aeabi_i2f>
 8009100:	4603      	mov	r3, r0
 8009102:	4619      	mov	r1, r3
 8009104:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009108:	f7f7 fbf0 	bl	80008ec <__aeabi_fdiv>
 800910c:	4603      	mov	r3, r0
 800910e:	4618      	mov	r0, r3
 8009110:	f7f7 f982 	bl	8000418 <__aeabi_f2d>
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	6879      	ldr	r1, [r7, #4]
 800911a:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a54      	ldr	r2, [pc, #336]	; (8009274 <_ZN15Kalman_FiltresiC1Ev+0x25c>)
 8009122:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a53      	ldr	r2, [pc, #332]	; (8009278 <_ZN15Kalman_FiltresiC1Ev+0x260>)
 800912a:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a51      	ldr	r2, [pc, #324]	; (8009278 <_ZN15Kalman_FiltresiC1Ev+0x260>)
 8009132:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a50      	ldr	r2, [pc, #320]	; (800927c <_ZN15Kalman_FiltresiC1Ev+0x264>)
 800913a:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8009144:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a4d      	ldr	r2, [pc, #308]	; (8009280 <_ZN15Kalman_FiltresiC1Ev+0x268>)
 800914c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009156:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a49      	ldr	r2, [pc, #292]	; (8009284 <_ZN15Kalman_FiltresiC1Ev+0x26c>)
 800915e:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a48      	ldr	r2, [pc, #288]	; (8009288 <_ZN15Kalman_FiltresiC1Ev+0x270>)
 8009166:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a47      	ldr	r2, [pc, #284]	; (800928c <_ZN15Kalman_FiltresiC1Ev+0x274>)
 800916e:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009178:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009182:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a41      	ldr	r2, [pc, #260]	; (8009290 <_ZN15Kalman_FiltresiC1Ev+0x278>)
 800918a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a40      	ldr	r2, [pc, #256]	; (8009294 <_ZN15Kalman_FiltresiC1Ev+0x27c>)
 8009192:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f503 7134 	add.w	r1, r3, #720	; 0x2d0
 800919c:	a31e      	add	r3, pc, #120	; (adr r3, 8009218 <_ZN15Kalman_FiltresiC1Ev+0x200>)
 800919e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091a6:	a31c      	add	r3, pc, #112	; (adr r3, 8009218 <_ZN15Kalman_FiltresiC1Ev+0x200>)
 80091a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ac:	e9cd 2300 	strd	r2, r3, [sp]
 80091b0:	a31b      	add	r3, pc, #108	; (adr r3, 8009220 <_ZN15Kalman_FiltresiC1Ev+0x208>)
 80091b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b6:	4608      	mov	r0, r1
 80091b8:	f000 f910 	bl	80093dc <_ZN3lpfC1Eddd>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f503 713e 	add.w	r1, r3, #760	; 0x2f8
 80091c2:	a319      	add	r3, pc, #100	; (adr r3, 8009228 <_ZN15Kalman_FiltresiC1Ev+0x210>)
 80091c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091cc:	a316      	add	r3, pc, #88	; (adr r3, 8009228 <_ZN15Kalman_FiltresiC1Ev+0x210>)
 80091ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d2:	e9cd 2300 	strd	r2, r3, [sp]
 80091d6:	a316      	add	r3, pc, #88	; (adr r3, 8009230 <_ZN15Kalman_FiltresiC1Ev+0x218>)
 80091d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091dc:	4608      	mov	r0, r1
 80091de:	f000 f8fd 	bl	80093dc <_ZN3lpfC1Eddd>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f503 7148 	add.w	r1, r3, #800	; 0x320
 80091e8:	a313      	add	r3, pc, #76	; (adr r3, 8009238 <_ZN15Kalman_FiltresiC1Ev+0x220>)
 80091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091f2:	a311      	add	r3, pc, #68	; (adr r3, 8009238 <_ZN15Kalman_FiltresiC1Ev+0x220>)
 80091f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f8:	e9cd 2300 	strd	r2, r3, [sp]
 80091fc:	a310      	add	r3, pc, #64	; (adr r3, 8009240 <_ZN15Kalman_FiltresiC1Ev+0x228>)
 80091fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009202:	4608      	mov	r0, r1
 8009204:	f000 f8ea 	bl	80093dc <_ZN3lpfC1Eddd>

}
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4618      	mov	r0, r3
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	f3af 8000 	nop.w
 8009218:	de7ea5f8 	.word	0xde7ea5f8
 800921c:	3fb2a454 	.word	0x3fb2a454
 8009220:	ab367a10 	.word	0xab367a10
 8009224:	3feb573e 	.word	0x3feb573e
 8009228:	fc3b4f61 	.word	0xfc3b4f61
 800922c:	3fa35935 	.word	0x3fa35935
 8009230:	4f0d844d 	.word	0x4f0d844d
 8009234:	3fed94af 	.word	0x3fed94af
 8009238:	e5c91d15 	.word	0xe5c91d15
 800923c:	3feda43f 	.word	0x3feda43f
 8009240:	cb923a2a 	.word	0xcb923a2a
 8009244:	bfeb487f 	.word	0xbfeb487f
 8009248:	3ca3d70a 	.word	0x3ca3d70a
 800924c:	4e6e6b28 	.word	0x4e6e6b28
 8009250:	3c23d70a 	.word	0x3c23d70a
 8009254:	3f333333 	.word	0x3f333333
 8009258:	47c35000 	.word	0x47c35000
 800925c:	461c4000 	.word	0x461c4000
 8009260:	41200000 	.word	0x41200000
 8009264:	4b189680 	.word	0x4b189680
 8009268:	40a00000 	.word	0x40a00000
 800926c:	42480000 	.word	0x42480000
 8009270:	42654ca3 	.word	0x42654ca3
 8009274:	3e99999a 	.word	0x3e99999a
 8009278:	40400000 	.word	0x40400000
 800927c:	41a00000 	.word	0x41a00000
 8009280:	3cdd2f1b 	.word	0x3cdd2f1b
 8009284:	48f42400 	.word	0x48f42400
 8009288:	3727c5ac 	.word	0x3727c5ac
 800928c:	322bcc77 	.word	0x322bcc77
 8009290:	402ccccd 	.word	0x402ccccd
 8009294:	c0c00000 	.word	0xc0c00000

08009298 <_ZN15Kalman_FiltresiD1Ev>:
    state.bias[1] = pitch_bias;
    state.bias[2] = yaw_bias;

}

Kalman_Filtresi::~Kalman_Filtresi() {}
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 f8b3 	bl	8009412 <_ZN3lpfD1Ev>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 f8ad 	bl	8009412 <_ZN3lpfD1Ev>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 f8a7 	bl	8009412 <_ZN3lpfD1Ev>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4618      	mov	r0, r3
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
	...

080092d0 <_ZN3PIDC1Ev>:
#include "PID.hpp"

PID::PID() {};
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af04      	add	r7, sp, #16
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a27      	ldr	r2, [pc, #156]	; (8009378 <_ZN3PIDC1Ev+0xa8>)
 80092dc:	609a      	str	r2, [r3, #8]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a26      	ldr	r2, [pc, #152]	; (800937c <_ZN3PIDC1Ev+0xac>)
 80092e2:	60da      	str	r2, [r3, #12]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a26      	ldr	r2, [pc, #152]	; (8009380 <_ZN3PIDC1Ev+0xb0>)
 80092e8:	611a      	str	r2, [r3, #16]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	22c8      	movs	r2, #200	; 0xc8
 80092ee:	615a      	str	r2, [r3, #20]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	695b      	ldr	r3, [r3, #20]
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7f7 f9f1 	bl	80006dc <__aeabi_i2f>
 80092fa:	4603      	mov	r3, r0
 80092fc:	4619      	mov	r1, r3
 80092fe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009302:	f7f7 faf3 	bl	80008ec <__aeabi_fdiv>
 8009306:	4603      	mov	r3, r0
 8009308:	461a      	mov	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	619a      	str	r2, [r3, #24]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a1c      	ldr	r2, [pc, #112]	; (8009384 <_ZN3PIDC1Ev+0xb4>)
 8009312:	61da      	str	r2, [r3, #28]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	69da      	ldr	r2, [r3, #28]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	4619      	mov	r1, r3
 800931e:	4610      	mov	r0, r2
 8009320:	f7f7 fa30 	bl	8000784 <__aeabi_fmul>
 8009324:	4603      	mov	r3, r0
 8009326:	461a      	mov	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	621a      	str	r2, [r3, #32]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009332:	a30d      	add	r3, pc, #52	; (adr r3, 8009368 <_ZN3PIDC1Ev+0x98>)
 8009334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009338:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800933c:	a30a      	add	r3, pc, #40	; (adr r3, 8009368 <_ZN3PIDC1Ev+0x98>)
 800933e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009342:	e9cd 2300 	strd	r2, r3, [sp]
 8009346:	a30a      	add	r3, pc, #40	; (adr r3, 8009370 <_ZN3PIDC1Ev+0xa0>)
 8009348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934c:	4608      	mov	r0, r1
 800934e:	f000 f845 	bl	80093dc <_ZN3lpfC1Eddd>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009358:	669a      	str	r2, [r3, #104]	; 0x68
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4618      	mov	r0, r3
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	f3af 8000 	nop.w
 8009368:	de7ea5f8 	.word	0xde7ea5f8
 800936c:	3fb2a454 	.word	0x3fb2a454
 8009370:	ab367a10 	.word	0xab367a10
 8009374:	3feb573e 	.word	0x3feb573e
 8009378:	3d4ccccd 	.word	0x3d4ccccd
 800937c:	42f00000 	.word	0x42f00000
 8009380:	c2f00000 	.word	0xc2f00000
 8009384:	3e99999a 	.word	0x3e99999a

08009388 <_ZN3PID5resetEv>:
	pd_roll_sat_buf = pd;
    return pd;

}

void PID::reset() {
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
	ie_roll = 0;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f04f 0200 	mov.w	r2, #0
 8009396:	67da      	str	r2, [r3, #124]	; 0x7c
	ie_roll_rate = 0;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f04f 0200 	mov.w	r2, #0
 800939e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	de_filt = 0;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f04f 0200 	mov.w	r2, #0
 80093a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	de_int = 0;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f04f 0200 	mov.w	r2, #0
 80093b2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 80093b6:	bf00      	nop
 80093b8:	370c      	adds	r7, #12
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bc80      	pop	{r7}
 80093be:	4770      	bx	lr

080093c0 <_ZN3PIDD1Ev>:

	unsigned int thr = (wh - 0) * (2000 - 1000) / (max_rpm - 0) + 1000;
	return thr;
}

PID::~PID() {};
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	3338      	adds	r3, #56	; 0x38
 80093cc:	4618      	mov	r0, r3
 80093ce:	f000 f820 	bl	8009412 <_ZN3lpfD1Ev>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4618      	mov	r0, r3
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <_ZN3lpfC1Eddd>:
#include "lpf.hpp"

lpf::lpf(double a, double b, double c)  {
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	e9c7 2300 	strd	r2, r3, [r7]
	a_f = a;
 80093e8:	68f9      	ldr	r1, [r7, #12]
 80093ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
	b_f = b;
 80093f2:	68f9      	ldr	r1, [r7, #12]
 80093f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093f8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	c_f = c;
 80093fc:	68f9      	ldr	r1, [r7, #12]
 80093fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009402:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	4618      	mov	r0, r3
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	bc80      	pop	{r7}
 8009410:	4770      	bx	lr

08009412 <_ZN3lpfD1Ev>:
	y_ = y;
	return y;

}

lpf::~lpf() {}
 8009412:	b480      	push	{r7}
 8009414:	b083      	sub	sp, #12
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4618      	mov	r0, r3
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	bc80      	pop	{r7}
 8009424:	4770      	bx	lr
	...

08009428 <__errno>:
 8009428:	4b01      	ldr	r3, [pc, #4]	; (8009430 <__errno+0x8>)
 800942a:	6818      	ldr	r0, [r3, #0]
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	20000014 	.word	0x20000014

08009434 <__libc_init_array>:
 8009434:	b570      	push	{r4, r5, r6, lr}
 8009436:	2600      	movs	r6, #0
 8009438:	4d0c      	ldr	r5, [pc, #48]	; (800946c <__libc_init_array+0x38>)
 800943a:	4c0d      	ldr	r4, [pc, #52]	; (8009470 <__libc_init_array+0x3c>)
 800943c:	1b64      	subs	r4, r4, r5
 800943e:	10a4      	asrs	r4, r4, #2
 8009440:	42a6      	cmp	r6, r4
 8009442:	d109      	bne.n	8009458 <__libc_init_array+0x24>
 8009444:	f001 f9ca 	bl	800a7dc <_init>
 8009448:	2600      	movs	r6, #0
 800944a:	4d0a      	ldr	r5, [pc, #40]	; (8009474 <__libc_init_array+0x40>)
 800944c:	4c0a      	ldr	r4, [pc, #40]	; (8009478 <__libc_init_array+0x44>)
 800944e:	1b64      	subs	r4, r4, r5
 8009450:	10a4      	asrs	r4, r4, #2
 8009452:	42a6      	cmp	r6, r4
 8009454:	d105      	bne.n	8009462 <__libc_init_array+0x2e>
 8009456:	bd70      	pop	{r4, r5, r6, pc}
 8009458:	f855 3b04 	ldr.w	r3, [r5], #4
 800945c:	4798      	blx	r3
 800945e:	3601      	adds	r6, #1
 8009460:	e7ee      	b.n	8009440 <__libc_init_array+0xc>
 8009462:	f855 3b04 	ldr.w	r3, [r5], #4
 8009466:	4798      	blx	r3
 8009468:	3601      	adds	r6, #1
 800946a:	e7f2      	b.n	8009452 <__libc_init_array+0x1e>
 800946c:	0800b0a0 	.word	0x0800b0a0
 8009470:	0800b0a0 	.word	0x0800b0a0
 8009474:	0800b0a0 	.word	0x0800b0a0
 8009478:	0800b0a8 	.word	0x0800b0a8

0800947c <memcpy>:
 800947c:	440a      	add	r2, r1
 800947e:	4291      	cmp	r1, r2
 8009480:	f100 33ff 	add.w	r3, r0, #4294967295
 8009484:	d100      	bne.n	8009488 <memcpy+0xc>
 8009486:	4770      	bx	lr
 8009488:	b510      	push	{r4, lr}
 800948a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800948e:	4291      	cmp	r1, r2
 8009490:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009494:	d1f9      	bne.n	800948a <memcpy+0xe>
 8009496:	bd10      	pop	{r4, pc}

08009498 <memset>:
 8009498:	4603      	mov	r3, r0
 800949a:	4402      	add	r2, r0
 800949c:	4293      	cmp	r3, r2
 800949e:	d100      	bne.n	80094a2 <memset+0xa>
 80094a0:	4770      	bx	lr
 80094a2:	f803 1b01 	strb.w	r1, [r3], #1
 80094a6:	e7f9      	b.n	800949c <memset+0x4>

080094a8 <_free_r>:
 80094a8:	b538      	push	{r3, r4, r5, lr}
 80094aa:	4605      	mov	r5, r0
 80094ac:	2900      	cmp	r1, #0
 80094ae:	d043      	beq.n	8009538 <_free_r+0x90>
 80094b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094b4:	1f0c      	subs	r4, r1, #4
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	bfb8      	it	lt
 80094ba:	18e4      	addlt	r4, r4, r3
 80094bc:	f000 fc36 	bl	8009d2c <__malloc_lock>
 80094c0:	4a1e      	ldr	r2, [pc, #120]	; (800953c <_free_r+0x94>)
 80094c2:	6813      	ldr	r3, [r2, #0]
 80094c4:	4610      	mov	r0, r2
 80094c6:	b933      	cbnz	r3, 80094d6 <_free_r+0x2e>
 80094c8:	6063      	str	r3, [r4, #4]
 80094ca:	6014      	str	r4, [r2, #0]
 80094cc:	4628      	mov	r0, r5
 80094ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094d2:	f000 bc31 	b.w	8009d38 <__malloc_unlock>
 80094d6:	42a3      	cmp	r3, r4
 80094d8:	d90a      	bls.n	80094f0 <_free_r+0x48>
 80094da:	6821      	ldr	r1, [r4, #0]
 80094dc:	1862      	adds	r2, r4, r1
 80094de:	4293      	cmp	r3, r2
 80094e0:	bf01      	itttt	eq
 80094e2:	681a      	ldreq	r2, [r3, #0]
 80094e4:	685b      	ldreq	r3, [r3, #4]
 80094e6:	1852      	addeq	r2, r2, r1
 80094e8:	6022      	streq	r2, [r4, #0]
 80094ea:	6063      	str	r3, [r4, #4]
 80094ec:	6004      	str	r4, [r0, #0]
 80094ee:	e7ed      	b.n	80094cc <_free_r+0x24>
 80094f0:	461a      	mov	r2, r3
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	b10b      	cbz	r3, 80094fa <_free_r+0x52>
 80094f6:	42a3      	cmp	r3, r4
 80094f8:	d9fa      	bls.n	80094f0 <_free_r+0x48>
 80094fa:	6811      	ldr	r1, [r2, #0]
 80094fc:	1850      	adds	r0, r2, r1
 80094fe:	42a0      	cmp	r0, r4
 8009500:	d10b      	bne.n	800951a <_free_r+0x72>
 8009502:	6820      	ldr	r0, [r4, #0]
 8009504:	4401      	add	r1, r0
 8009506:	1850      	adds	r0, r2, r1
 8009508:	4283      	cmp	r3, r0
 800950a:	6011      	str	r1, [r2, #0]
 800950c:	d1de      	bne.n	80094cc <_free_r+0x24>
 800950e:	6818      	ldr	r0, [r3, #0]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	4401      	add	r1, r0
 8009514:	6011      	str	r1, [r2, #0]
 8009516:	6053      	str	r3, [r2, #4]
 8009518:	e7d8      	b.n	80094cc <_free_r+0x24>
 800951a:	d902      	bls.n	8009522 <_free_r+0x7a>
 800951c:	230c      	movs	r3, #12
 800951e:	602b      	str	r3, [r5, #0]
 8009520:	e7d4      	b.n	80094cc <_free_r+0x24>
 8009522:	6820      	ldr	r0, [r4, #0]
 8009524:	1821      	adds	r1, r4, r0
 8009526:	428b      	cmp	r3, r1
 8009528:	bf01      	itttt	eq
 800952a:	6819      	ldreq	r1, [r3, #0]
 800952c:	685b      	ldreq	r3, [r3, #4]
 800952e:	1809      	addeq	r1, r1, r0
 8009530:	6021      	streq	r1, [r4, #0]
 8009532:	6063      	str	r3, [r4, #4]
 8009534:	6054      	str	r4, [r2, #4]
 8009536:	e7c9      	b.n	80094cc <_free_r+0x24>
 8009538:	bd38      	pop	{r3, r4, r5, pc}
 800953a:	bf00      	nop
 800953c:	200017d0 	.word	0x200017d0

08009540 <_malloc_r>:
 8009540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009542:	1ccd      	adds	r5, r1, #3
 8009544:	f025 0503 	bic.w	r5, r5, #3
 8009548:	3508      	adds	r5, #8
 800954a:	2d0c      	cmp	r5, #12
 800954c:	bf38      	it	cc
 800954e:	250c      	movcc	r5, #12
 8009550:	2d00      	cmp	r5, #0
 8009552:	4606      	mov	r6, r0
 8009554:	db01      	blt.n	800955a <_malloc_r+0x1a>
 8009556:	42a9      	cmp	r1, r5
 8009558:	d903      	bls.n	8009562 <_malloc_r+0x22>
 800955a:	230c      	movs	r3, #12
 800955c:	6033      	str	r3, [r6, #0]
 800955e:	2000      	movs	r0, #0
 8009560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009562:	f000 fbe3 	bl	8009d2c <__malloc_lock>
 8009566:	4921      	ldr	r1, [pc, #132]	; (80095ec <_malloc_r+0xac>)
 8009568:	680a      	ldr	r2, [r1, #0]
 800956a:	4614      	mov	r4, r2
 800956c:	b99c      	cbnz	r4, 8009596 <_malloc_r+0x56>
 800956e:	4f20      	ldr	r7, [pc, #128]	; (80095f0 <_malloc_r+0xb0>)
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	b923      	cbnz	r3, 800957e <_malloc_r+0x3e>
 8009574:	4621      	mov	r1, r4
 8009576:	4630      	mov	r0, r6
 8009578:	f000 f8ca 	bl	8009710 <_sbrk_r>
 800957c:	6038      	str	r0, [r7, #0]
 800957e:	4629      	mov	r1, r5
 8009580:	4630      	mov	r0, r6
 8009582:	f000 f8c5 	bl	8009710 <_sbrk_r>
 8009586:	1c43      	adds	r3, r0, #1
 8009588:	d123      	bne.n	80095d2 <_malloc_r+0x92>
 800958a:	230c      	movs	r3, #12
 800958c:	4630      	mov	r0, r6
 800958e:	6033      	str	r3, [r6, #0]
 8009590:	f000 fbd2 	bl	8009d38 <__malloc_unlock>
 8009594:	e7e3      	b.n	800955e <_malloc_r+0x1e>
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	1b5b      	subs	r3, r3, r5
 800959a:	d417      	bmi.n	80095cc <_malloc_r+0x8c>
 800959c:	2b0b      	cmp	r3, #11
 800959e:	d903      	bls.n	80095a8 <_malloc_r+0x68>
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	441c      	add	r4, r3
 80095a4:	6025      	str	r5, [r4, #0]
 80095a6:	e004      	b.n	80095b2 <_malloc_r+0x72>
 80095a8:	6863      	ldr	r3, [r4, #4]
 80095aa:	42a2      	cmp	r2, r4
 80095ac:	bf0c      	ite	eq
 80095ae:	600b      	streq	r3, [r1, #0]
 80095b0:	6053      	strne	r3, [r2, #4]
 80095b2:	4630      	mov	r0, r6
 80095b4:	f000 fbc0 	bl	8009d38 <__malloc_unlock>
 80095b8:	f104 000b 	add.w	r0, r4, #11
 80095bc:	1d23      	adds	r3, r4, #4
 80095be:	f020 0007 	bic.w	r0, r0, #7
 80095c2:	1ac2      	subs	r2, r0, r3
 80095c4:	d0cc      	beq.n	8009560 <_malloc_r+0x20>
 80095c6:	1a1b      	subs	r3, r3, r0
 80095c8:	50a3      	str	r3, [r4, r2]
 80095ca:	e7c9      	b.n	8009560 <_malloc_r+0x20>
 80095cc:	4622      	mov	r2, r4
 80095ce:	6864      	ldr	r4, [r4, #4]
 80095d0:	e7cc      	b.n	800956c <_malloc_r+0x2c>
 80095d2:	1cc4      	adds	r4, r0, #3
 80095d4:	f024 0403 	bic.w	r4, r4, #3
 80095d8:	42a0      	cmp	r0, r4
 80095da:	d0e3      	beq.n	80095a4 <_malloc_r+0x64>
 80095dc:	1a21      	subs	r1, r4, r0
 80095de:	4630      	mov	r0, r6
 80095e0:	f000 f896 	bl	8009710 <_sbrk_r>
 80095e4:	3001      	adds	r0, #1
 80095e6:	d1dd      	bne.n	80095a4 <_malloc_r+0x64>
 80095e8:	e7cf      	b.n	800958a <_malloc_r+0x4a>
 80095ea:	bf00      	nop
 80095ec:	200017d0 	.word	0x200017d0
 80095f0:	200017d4 	.word	0x200017d4

080095f4 <iprintf>:
 80095f4:	b40f      	push	{r0, r1, r2, r3}
 80095f6:	4b0a      	ldr	r3, [pc, #40]	; (8009620 <iprintf+0x2c>)
 80095f8:	b513      	push	{r0, r1, r4, lr}
 80095fa:	681c      	ldr	r4, [r3, #0]
 80095fc:	b124      	cbz	r4, 8009608 <iprintf+0x14>
 80095fe:	69a3      	ldr	r3, [r4, #24]
 8009600:	b913      	cbnz	r3, 8009608 <iprintf+0x14>
 8009602:	4620      	mov	r0, r4
 8009604:	f000 fa8e 	bl	8009b24 <__sinit>
 8009608:	ab05      	add	r3, sp, #20
 800960a:	4620      	mov	r0, r4
 800960c:	9a04      	ldr	r2, [sp, #16]
 800960e:	68a1      	ldr	r1, [r4, #8]
 8009610:	9301      	str	r3, [sp, #4]
 8009612:	f000 fd1b 	bl	800a04c <_vfiprintf_r>
 8009616:	b002      	add	sp, #8
 8009618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800961c:	b004      	add	sp, #16
 800961e:	4770      	bx	lr
 8009620:	20000014 	.word	0x20000014

08009624 <_puts_r>:
 8009624:	b570      	push	{r4, r5, r6, lr}
 8009626:	460e      	mov	r6, r1
 8009628:	4605      	mov	r5, r0
 800962a:	b118      	cbz	r0, 8009634 <_puts_r+0x10>
 800962c:	6983      	ldr	r3, [r0, #24]
 800962e:	b90b      	cbnz	r3, 8009634 <_puts_r+0x10>
 8009630:	f000 fa78 	bl	8009b24 <__sinit>
 8009634:	69ab      	ldr	r3, [r5, #24]
 8009636:	68ac      	ldr	r4, [r5, #8]
 8009638:	b913      	cbnz	r3, 8009640 <_puts_r+0x1c>
 800963a:	4628      	mov	r0, r5
 800963c:	f000 fa72 	bl	8009b24 <__sinit>
 8009640:	4b2c      	ldr	r3, [pc, #176]	; (80096f4 <_puts_r+0xd0>)
 8009642:	429c      	cmp	r4, r3
 8009644:	d120      	bne.n	8009688 <_puts_r+0x64>
 8009646:	686c      	ldr	r4, [r5, #4]
 8009648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800964a:	07db      	lsls	r3, r3, #31
 800964c:	d405      	bmi.n	800965a <_puts_r+0x36>
 800964e:	89a3      	ldrh	r3, [r4, #12]
 8009650:	0598      	lsls	r0, r3, #22
 8009652:	d402      	bmi.n	800965a <_puts_r+0x36>
 8009654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009656:	f000 fb03 	bl	8009c60 <__retarget_lock_acquire_recursive>
 800965a:	89a3      	ldrh	r3, [r4, #12]
 800965c:	0719      	lsls	r1, r3, #28
 800965e:	d51d      	bpl.n	800969c <_puts_r+0x78>
 8009660:	6923      	ldr	r3, [r4, #16]
 8009662:	b1db      	cbz	r3, 800969c <_puts_r+0x78>
 8009664:	3e01      	subs	r6, #1
 8009666:	68a3      	ldr	r3, [r4, #8]
 8009668:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800966c:	3b01      	subs	r3, #1
 800966e:	60a3      	str	r3, [r4, #8]
 8009670:	bb39      	cbnz	r1, 80096c2 <_puts_r+0x9e>
 8009672:	2b00      	cmp	r3, #0
 8009674:	da38      	bge.n	80096e8 <_puts_r+0xc4>
 8009676:	4622      	mov	r2, r4
 8009678:	210a      	movs	r1, #10
 800967a:	4628      	mov	r0, r5
 800967c:	f000 f878 	bl	8009770 <__swbuf_r>
 8009680:	3001      	adds	r0, #1
 8009682:	d011      	beq.n	80096a8 <_puts_r+0x84>
 8009684:	250a      	movs	r5, #10
 8009686:	e011      	b.n	80096ac <_puts_r+0x88>
 8009688:	4b1b      	ldr	r3, [pc, #108]	; (80096f8 <_puts_r+0xd4>)
 800968a:	429c      	cmp	r4, r3
 800968c:	d101      	bne.n	8009692 <_puts_r+0x6e>
 800968e:	68ac      	ldr	r4, [r5, #8]
 8009690:	e7da      	b.n	8009648 <_puts_r+0x24>
 8009692:	4b1a      	ldr	r3, [pc, #104]	; (80096fc <_puts_r+0xd8>)
 8009694:	429c      	cmp	r4, r3
 8009696:	bf08      	it	eq
 8009698:	68ec      	ldreq	r4, [r5, #12]
 800969a:	e7d5      	b.n	8009648 <_puts_r+0x24>
 800969c:	4621      	mov	r1, r4
 800969e:	4628      	mov	r0, r5
 80096a0:	f000 f8b8 	bl	8009814 <__swsetup_r>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	d0dd      	beq.n	8009664 <_puts_r+0x40>
 80096a8:	f04f 35ff 	mov.w	r5, #4294967295
 80096ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096ae:	07da      	lsls	r2, r3, #31
 80096b0:	d405      	bmi.n	80096be <_puts_r+0x9a>
 80096b2:	89a3      	ldrh	r3, [r4, #12]
 80096b4:	059b      	lsls	r3, r3, #22
 80096b6:	d402      	bmi.n	80096be <_puts_r+0x9a>
 80096b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096ba:	f000 fad2 	bl	8009c62 <__retarget_lock_release_recursive>
 80096be:	4628      	mov	r0, r5
 80096c0:	bd70      	pop	{r4, r5, r6, pc}
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	da04      	bge.n	80096d0 <_puts_r+0xac>
 80096c6:	69a2      	ldr	r2, [r4, #24]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	dc06      	bgt.n	80096da <_puts_r+0xb6>
 80096cc:	290a      	cmp	r1, #10
 80096ce:	d004      	beq.n	80096da <_puts_r+0xb6>
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	1c5a      	adds	r2, r3, #1
 80096d4:	6022      	str	r2, [r4, #0]
 80096d6:	7019      	strb	r1, [r3, #0]
 80096d8:	e7c5      	b.n	8009666 <_puts_r+0x42>
 80096da:	4622      	mov	r2, r4
 80096dc:	4628      	mov	r0, r5
 80096de:	f000 f847 	bl	8009770 <__swbuf_r>
 80096e2:	3001      	adds	r0, #1
 80096e4:	d1bf      	bne.n	8009666 <_puts_r+0x42>
 80096e6:	e7df      	b.n	80096a8 <_puts_r+0x84>
 80096e8:	250a      	movs	r5, #10
 80096ea:	6823      	ldr	r3, [r4, #0]
 80096ec:	1c5a      	adds	r2, r3, #1
 80096ee:	6022      	str	r2, [r4, #0]
 80096f0:	701d      	strb	r5, [r3, #0]
 80096f2:	e7db      	b.n	80096ac <_puts_r+0x88>
 80096f4:	0800b02c 	.word	0x0800b02c
 80096f8:	0800b04c 	.word	0x0800b04c
 80096fc:	0800b00c 	.word	0x0800b00c

08009700 <puts>:
 8009700:	4b02      	ldr	r3, [pc, #8]	; (800970c <puts+0xc>)
 8009702:	4601      	mov	r1, r0
 8009704:	6818      	ldr	r0, [r3, #0]
 8009706:	f7ff bf8d 	b.w	8009624 <_puts_r>
 800970a:	bf00      	nop
 800970c:	20000014 	.word	0x20000014

08009710 <_sbrk_r>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	2300      	movs	r3, #0
 8009714:	4d05      	ldr	r5, [pc, #20]	; (800972c <_sbrk_r+0x1c>)
 8009716:	4604      	mov	r4, r0
 8009718:	4608      	mov	r0, r1
 800971a:	602b      	str	r3, [r5, #0]
 800971c:	f7f9 fdee 	bl	80032fc <_sbrk>
 8009720:	1c43      	adds	r3, r0, #1
 8009722:	d102      	bne.n	800972a <_sbrk_r+0x1a>
 8009724:	682b      	ldr	r3, [r5, #0]
 8009726:	b103      	cbz	r3, 800972a <_sbrk_r+0x1a>
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	bd38      	pop	{r3, r4, r5, pc}
 800972c:	20001b08 	.word	0x20001b08

08009730 <siprintf>:
 8009730:	b40e      	push	{r1, r2, r3}
 8009732:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009736:	b500      	push	{lr}
 8009738:	b09c      	sub	sp, #112	; 0x70
 800973a:	ab1d      	add	r3, sp, #116	; 0x74
 800973c:	9002      	str	r0, [sp, #8]
 800973e:	9006      	str	r0, [sp, #24]
 8009740:	9107      	str	r1, [sp, #28]
 8009742:	9104      	str	r1, [sp, #16]
 8009744:	4808      	ldr	r0, [pc, #32]	; (8009768 <siprintf+0x38>)
 8009746:	4909      	ldr	r1, [pc, #36]	; (800976c <siprintf+0x3c>)
 8009748:	f853 2b04 	ldr.w	r2, [r3], #4
 800974c:	9105      	str	r1, [sp, #20]
 800974e:	6800      	ldr	r0, [r0, #0]
 8009750:	a902      	add	r1, sp, #8
 8009752:	9301      	str	r3, [sp, #4]
 8009754:	f000 fb52 	bl	8009dfc <_svfiprintf_r>
 8009758:	2200      	movs	r2, #0
 800975a:	9b02      	ldr	r3, [sp, #8]
 800975c:	701a      	strb	r2, [r3, #0]
 800975e:	b01c      	add	sp, #112	; 0x70
 8009760:	f85d eb04 	ldr.w	lr, [sp], #4
 8009764:	b003      	add	sp, #12
 8009766:	4770      	bx	lr
 8009768:	20000014 	.word	0x20000014
 800976c:	ffff0208 	.word	0xffff0208

08009770 <__swbuf_r>:
 8009770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009772:	460e      	mov	r6, r1
 8009774:	4614      	mov	r4, r2
 8009776:	4605      	mov	r5, r0
 8009778:	b118      	cbz	r0, 8009782 <__swbuf_r+0x12>
 800977a:	6983      	ldr	r3, [r0, #24]
 800977c:	b90b      	cbnz	r3, 8009782 <__swbuf_r+0x12>
 800977e:	f000 f9d1 	bl	8009b24 <__sinit>
 8009782:	4b21      	ldr	r3, [pc, #132]	; (8009808 <__swbuf_r+0x98>)
 8009784:	429c      	cmp	r4, r3
 8009786:	d12b      	bne.n	80097e0 <__swbuf_r+0x70>
 8009788:	686c      	ldr	r4, [r5, #4]
 800978a:	69a3      	ldr	r3, [r4, #24]
 800978c:	60a3      	str	r3, [r4, #8]
 800978e:	89a3      	ldrh	r3, [r4, #12]
 8009790:	071a      	lsls	r2, r3, #28
 8009792:	d52f      	bpl.n	80097f4 <__swbuf_r+0x84>
 8009794:	6923      	ldr	r3, [r4, #16]
 8009796:	b36b      	cbz	r3, 80097f4 <__swbuf_r+0x84>
 8009798:	6923      	ldr	r3, [r4, #16]
 800979a:	6820      	ldr	r0, [r4, #0]
 800979c:	b2f6      	uxtb	r6, r6
 800979e:	1ac0      	subs	r0, r0, r3
 80097a0:	6963      	ldr	r3, [r4, #20]
 80097a2:	4637      	mov	r7, r6
 80097a4:	4283      	cmp	r3, r0
 80097a6:	dc04      	bgt.n	80097b2 <__swbuf_r+0x42>
 80097a8:	4621      	mov	r1, r4
 80097aa:	4628      	mov	r0, r5
 80097ac:	f000 f926 	bl	80099fc <_fflush_r>
 80097b0:	bb30      	cbnz	r0, 8009800 <__swbuf_r+0x90>
 80097b2:	68a3      	ldr	r3, [r4, #8]
 80097b4:	3001      	adds	r0, #1
 80097b6:	3b01      	subs	r3, #1
 80097b8:	60a3      	str	r3, [r4, #8]
 80097ba:	6823      	ldr	r3, [r4, #0]
 80097bc:	1c5a      	adds	r2, r3, #1
 80097be:	6022      	str	r2, [r4, #0]
 80097c0:	701e      	strb	r6, [r3, #0]
 80097c2:	6963      	ldr	r3, [r4, #20]
 80097c4:	4283      	cmp	r3, r0
 80097c6:	d004      	beq.n	80097d2 <__swbuf_r+0x62>
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	07db      	lsls	r3, r3, #31
 80097cc:	d506      	bpl.n	80097dc <__swbuf_r+0x6c>
 80097ce:	2e0a      	cmp	r6, #10
 80097d0:	d104      	bne.n	80097dc <__swbuf_r+0x6c>
 80097d2:	4621      	mov	r1, r4
 80097d4:	4628      	mov	r0, r5
 80097d6:	f000 f911 	bl	80099fc <_fflush_r>
 80097da:	b988      	cbnz	r0, 8009800 <__swbuf_r+0x90>
 80097dc:	4638      	mov	r0, r7
 80097de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097e0:	4b0a      	ldr	r3, [pc, #40]	; (800980c <__swbuf_r+0x9c>)
 80097e2:	429c      	cmp	r4, r3
 80097e4:	d101      	bne.n	80097ea <__swbuf_r+0x7a>
 80097e6:	68ac      	ldr	r4, [r5, #8]
 80097e8:	e7cf      	b.n	800978a <__swbuf_r+0x1a>
 80097ea:	4b09      	ldr	r3, [pc, #36]	; (8009810 <__swbuf_r+0xa0>)
 80097ec:	429c      	cmp	r4, r3
 80097ee:	bf08      	it	eq
 80097f0:	68ec      	ldreq	r4, [r5, #12]
 80097f2:	e7ca      	b.n	800978a <__swbuf_r+0x1a>
 80097f4:	4621      	mov	r1, r4
 80097f6:	4628      	mov	r0, r5
 80097f8:	f000 f80c 	bl	8009814 <__swsetup_r>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d0cb      	beq.n	8009798 <__swbuf_r+0x28>
 8009800:	f04f 37ff 	mov.w	r7, #4294967295
 8009804:	e7ea      	b.n	80097dc <__swbuf_r+0x6c>
 8009806:	bf00      	nop
 8009808:	0800b02c 	.word	0x0800b02c
 800980c:	0800b04c 	.word	0x0800b04c
 8009810:	0800b00c 	.word	0x0800b00c

08009814 <__swsetup_r>:
 8009814:	4b32      	ldr	r3, [pc, #200]	; (80098e0 <__swsetup_r+0xcc>)
 8009816:	b570      	push	{r4, r5, r6, lr}
 8009818:	681d      	ldr	r5, [r3, #0]
 800981a:	4606      	mov	r6, r0
 800981c:	460c      	mov	r4, r1
 800981e:	b125      	cbz	r5, 800982a <__swsetup_r+0x16>
 8009820:	69ab      	ldr	r3, [r5, #24]
 8009822:	b913      	cbnz	r3, 800982a <__swsetup_r+0x16>
 8009824:	4628      	mov	r0, r5
 8009826:	f000 f97d 	bl	8009b24 <__sinit>
 800982a:	4b2e      	ldr	r3, [pc, #184]	; (80098e4 <__swsetup_r+0xd0>)
 800982c:	429c      	cmp	r4, r3
 800982e:	d10f      	bne.n	8009850 <__swsetup_r+0x3c>
 8009830:	686c      	ldr	r4, [r5, #4]
 8009832:	89a3      	ldrh	r3, [r4, #12]
 8009834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009838:	0719      	lsls	r1, r3, #28
 800983a:	d42c      	bmi.n	8009896 <__swsetup_r+0x82>
 800983c:	06dd      	lsls	r5, r3, #27
 800983e:	d411      	bmi.n	8009864 <__swsetup_r+0x50>
 8009840:	2309      	movs	r3, #9
 8009842:	6033      	str	r3, [r6, #0]
 8009844:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009848:	f04f 30ff 	mov.w	r0, #4294967295
 800984c:	81a3      	strh	r3, [r4, #12]
 800984e:	e03e      	b.n	80098ce <__swsetup_r+0xba>
 8009850:	4b25      	ldr	r3, [pc, #148]	; (80098e8 <__swsetup_r+0xd4>)
 8009852:	429c      	cmp	r4, r3
 8009854:	d101      	bne.n	800985a <__swsetup_r+0x46>
 8009856:	68ac      	ldr	r4, [r5, #8]
 8009858:	e7eb      	b.n	8009832 <__swsetup_r+0x1e>
 800985a:	4b24      	ldr	r3, [pc, #144]	; (80098ec <__swsetup_r+0xd8>)
 800985c:	429c      	cmp	r4, r3
 800985e:	bf08      	it	eq
 8009860:	68ec      	ldreq	r4, [r5, #12]
 8009862:	e7e6      	b.n	8009832 <__swsetup_r+0x1e>
 8009864:	0758      	lsls	r0, r3, #29
 8009866:	d512      	bpl.n	800988e <__swsetup_r+0x7a>
 8009868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800986a:	b141      	cbz	r1, 800987e <__swsetup_r+0x6a>
 800986c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009870:	4299      	cmp	r1, r3
 8009872:	d002      	beq.n	800987a <__swsetup_r+0x66>
 8009874:	4630      	mov	r0, r6
 8009876:	f7ff fe17 	bl	80094a8 <_free_r>
 800987a:	2300      	movs	r3, #0
 800987c:	6363      	str	r3, [r4, #52]	; 0x34
 800987e:	89a3      	ldrh	r3, [r4, #12]
 8009880:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009884:	81a3      	strh	r3, [r4, #12]
 8009886:	2300      	movs	r3, #0
 8009888:	6063      	str	r3, [r4, #4]
 800988a:	6923      	ldr	r3, [r4, #16]
 800988c:	6023      	str	r3, [r4, #0]
 800988e:	89a3      	ldrh	r3, [r4, #12]
 8009890:	f043 0308 	orr.w	r3, r3, #8
 8009894:	81a3      	strh	r3, [r4, #12]
 8009896:	6923      	ldr	r3, [r4, #16]
 8009898:	b94b      	cbnz	r3, 80098ae <__swsetup_r+0x9a>
 800989a:	89a3      	ldrh	r3, [r4, #12]
 800989c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098a4:	d003      	beq.n	80098ae <__swsetup_r+0x9a>
 80098a6:	4621      	mov	r1, r4
 80098a8:	4630      	mov	r0, r6
 80098aa:	f000 f9ff 	bl	8009cac <__smakebuf_r>
 80098ae:	89a0      	ldrh	r0, [r4, #12]
 80098b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098b4:	f010 0301 	ands.w	r3, r0, #1
 80098b8:	d00a      	beq.n	80098d0 <__swsetup_r+0xbc>
 80098ba:	2300      	movs	r3, #0
 80098bc:	60a3      	str	r3, [r4, #8]
 80098be:	6963      	ldr	r3, [r4, #20]
 80098c0:	425b      	negs	r3, r3
 80098c2:	61a3      	str	r3, [r4, #24]
 80098c4:	6923      	ldr	r3, [r4, #16]
 80098c6:	b943      	cbnz	r3, 80098da <__swsetup_r+0xc6>
 80098c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098cc:	d1ba      	bne.n	8009844 <__swsetup_r+0x30>
 80098ce:	bd70      	pop	{r4, r5, r6, pc}
 80098d0:	0781      	lsls	r1, r0, #30
 80098d2:	bf58      	it	pl
 80098d4:	6963      	ldrpl	r3, [r4, #20]
 80098d6:	60a3      	str	r3, [r4, #8]
 80098d8:	e7f4      	b.n	80098c4 <__swsetup_r+0xb0>
 80098da:	2000      	movs	r0, #0
 80098dc:	e7f7      	b.n	80098ce <__swsetup_r+0xba>
 80098de:	bf00      	nop
 80098e0:	20000014 	.word	0x20000014
 80098e4:	0800b02c 	.word	0x0800b02c
 80098e8:	0800b04c 	.word	0x0800b04c
 80098ec:	0800b00c 	.word	0x0800b00c

080098f0 <__sflush_r>:
 80098f0:	898a      	ldrh	r2, [r1, #12]
 80098f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f6:	4605      	mov	r5, r0
 80098f8:	0710      	lsls	r0, r2, #28
 80098fa:	460c      	mov	r4, r1
 80098fc:	d458      	bmi.n	80099b0 <__sflush_r+0xc0>
 80098fe:	684b      	ldr	r3, [r1, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	dc05      	bgt.n	8009910 <__sflush_r+0x20>
 8009904:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009906:	2b00      	cmp	r3, #0
 8009908:	dc02      	bgt.n	8009910 <__sflush_r+0x20>
 800990a:	2000      	movs	r0, #0
 800990c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009912:	2e00      	cmp	r6, #0
 8009914:	d0f9      	beq.n	800990a <__sflush_r+0x1a>
 8009916:	2300      	movs	r3, #0
 8009918:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800991c:	682f      	ldr	r7, [r5, #0]
 800991e:	602b      	str	r3, [r5, #0]
 8009920:	d032      	beq.n	8009988 <__sflush_r+0x98>
 8009922:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009924:	89a3      	ldrh	r3, [r4, #12]
 8009926:	075a      	lsls	r2, r3, #29
 8009928:	d505      	bpl.n	8009936 <__sflush_r+0x46>
 800992a:	6863      	ldr	r3, [r4, #4]
 800992c:	1ac0      	subs	r0, r0, r3
 800992e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009930:	b10b      	cbz	r3, 8009936 <__sflush_r+0x46>
 8009932:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009934:	1ac0      	subs	r0, r0, r3
 8009936:	2300      	movs	r3, #0
 8009938:	4602      	mov	r2, r0
 800993a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800993c:	4628      	mov	r0, r5
 800993e:	6a21      	ldr	r1, [r4, #32]
 8009940:	47b0      	blx	r6
 8009942:	1c43      	adds	r3, r0, #1
 8009944:	89a3      	ldrh	r3, [r4, #12]
 8009946:	d106      	bne.n	8009956 <__sflush_r+0x66>
 8009948:	6829      	ldr	r1, [r5, #0]
 800994a:	291d      	cmp	r1, #29
 800994c:	d82c      	bhi.n	80099a8 <__sflush_r+0xb8>
 800994e:	4a2a      	ldr	r2, [pc, #168]	; (80099f8 <__sflush_r+0x108>)
 8009950:	40ca      	lsrs	r2, r1
 8009952:	07d6      	lsls	r6, r2, #31
 8009954:	d528      	bpl.n	80099a8 <__sflush_r+0xb8>
 8009956:	2200      	movs	r2, #0
 8009958:	6062      	str	r2, [r4, #4]
 800995a:	6922      	ldr	r2, [r4, #16]
 800995c:	04d9      	lsls	r1, r3, #19
 800995e:	6022      	str	r2, [r4, #0]
 8009960:	d504      	bpl.n	800996c <__sflush_r+0x7c>
 8009962:	1c42      	adds	r2, r0, #1
 8009964:	d101      	bne.n	800996a <__sflush_r+0x7a>
 8009966:	682b      	ldr	r3, [r5, #0]
 8009968:	b903      	cbnz	r3, 800996c <__sflush_r+0x7c>
 800996a:	6560      	str	r0, [r4, #84]	; 0x54
 800996c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800996e:	602f      	str	r7, [r5, #0]
 8009970:	2900      	cmp	r1, #0
 8009972:	d0ca      	beq.n	800990a <__sflush_r+0x1a>
 8009974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009978:	4299      	cmp	r1, r3
 800997a:	d002      	beq.n	8009982 <__sflush_r+0x92>
 800997c:	4628      	mov	r0, r5
 800997e:	f7ff fd93 	bl	80094a8 <_free_r>
 8009982:	2000      	movs	r0, #0
 8009984:	6360      	str	r0, [r4, #52]	; 0x34
 8009986:	e7c1      	b.n	800990c <__sflush_r+0x1c>
 8009988:	6a21      	ldr	r1, [r4, #32]
 800998a:	2301      	movs	r3, #1
 800998c:	4628      	mov	r0, r5
 800998e:	47b0      	blx	r6
 8009990:	1c41      	adds	r1, r0, #1
 8009992:	d1c7      	bne.n	8009924 <__sflush_r+0x34>
 8009994:	682b      	ldr	r3, [r5, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d0c4      	beq.n	8009924 <__sflush_r+0x34>
 800999a:	2b1d      	cmp	r3, #29
 800999c:	d001      	beq.n	80099a2 <__sflush_r+0xb2>
 800999e:	2b16      	cmp	r3, #22
 80099a0:	d101      	bne.n	80099a6 <__sflush_r+0xb6>
 80099a2:	602f      	str	r7, [r5, #0]
 80099a4:	e7b1      	b.n	800990a <__sflush_r+0x1a>
 80099a6:	89a3      	ldrh	r3, [r4, #12]
 80099a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099ac:	81a3      	strh	r3, [r4, #12]
 80099ae:	e7ad      	b.n	800990c <__sflush_r+0x1c>
 80099b0:	690f      	ldr	r7, [r1, #16]
 80099b2:	2f00      	cmp	r7, #0
 80099b4:	d0a9      	beq.n	800990a <__sflush_r+0x1a>
 80099b6:	0793      	lsls	r3, r2, #30
 80099b8:	bf18      	it	ne
 80099ba:	2300      	movne	r3, #0
 80099bc:	680e      	ldr	r6, [r1, #0]
 80099be:	bf08      	it	eq
 80099c0:	694b      	ldreq	r3, [r1, #20]
 80099c2:	eba6 0807 	sub.w	r8, r6, r7
 80099c6:	600f      	str	r7, [r1, #0]
 80099c8:	608b      	str	r3, [r1, #8]
 80099ca:	f1b8 0f00 	cmp.w	r8, #0
 80099ce:	dd9c      	ble.n	800990a <__sflush_r+0x1a>
 80099d0:	4643      	mov	r3, r8
 80099d2:	463a      	mov	r2, r7
 80099d4:	4628      	mov	r0, r5
 80099d6:	6a21      	ldr	r1, [r4, #32]
 80099d8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099da:	47b0      	blx	r6
 80099dc:	2800      	cmp	r0, #0
 80099de:	dc06      	bgt.n	80099ee <__sflush_r+0xfe>
 80099e0:	89a3      	ldrh	r3, [r4, #12]
 80099e2:	f04f 30ff 	mov.w	r0, #4294967295
 80099e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099ea:	81a3      	strh	r3, [r4, #12]
 80099ec:	e78e      	b.n	800990c <__sflush_r+0x1c>
 80099ee:	4407      	add	r7, r0
 80099f0:	eba8 0800 	sub.w	r8, r8, r0
 80099f4:	e7e9      	b.n	80099ca <__sflush_r+0xda>
 80099f6:	bf00      	nop
 80099f8:	20400001 	.word	0x20400001

080099fc <_fflush_r>:
 80099fc:	b538      	push	{r3, r4, r5, lr}
 80099fe:	690b      	ldr	r3, [r1, #16]
 8009a00:	4605      	mov	r5, r0
 8009a02:	460c      	mov	r4, r1
 8009a04:	b913      	cbnz	r3, 8009a0c <_fflush_r+0x10>
 8009a06:	2500      	movs	r5, #0
 8009a08:	4628      	mov	r0, r5
 8009a0a:	bd38      	pop	{r3, r4, r5, pc}
 8009a0c:	b118      	cbz	r0, 8009a16 <_fflush_r+0x1a>
 8009a0e:	6983      	ldr	r3, [r0, #24]
 8009a10:	b90b      	cbnz	r3, 8009a16 <_fflush_r+0x1a>
 8009a12:	f000 f887 	bl	8009b24 <__sinit>
 8009a16:	4b14      	ldr	r3, [pc, #80]	; (8009a68 <_fflush_r+0x6c>)
 8009a18:	429c      	cmp	r4, r3
 8009a1a:	d11b      	bne.n	8009a54 <_fflush_r+0x58>
 8009a1c:	686c      	ldr	r4, [r5, #4]
 8009a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d0ef      	beq.n	8009a06 <_fflush_r+0xa>
 8009a26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a28:	07d0      	lsls	r0, r2, #31
 8009a2a:	d404      	bmi.n	8009a36 <_fflush_r+0x3a>
 8009a2c:	0599      	lsls	r1, r3, #22
 8009a2e:	d402      	bmi.n	8009a36 <_fflush_r+0x3a>
 8009a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a32:	f000 f915 	bl	8009c60 <__retarget_lock_acquire_recursive>
 8009a36:	4628      	mov	r0, r5
 8009a38:	4621      	mov	r1, r4
 8009a3a:	f7ff ff59 	bl	80098f0 <__sflush_r>
 8009a3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a40:	4605      	mov	r5, r0
 8009a42:	07da      	lsls	r2, r3, #31
 8009a44:	d4e0      	bmi.n	8009a08 <_fflush_r+0xc>
 8009a46:	89a3      	ldrh	r3, [r4, #12]
 8009a48:	059b      	lsls	r3, r3, #22
 8009a4a:	d4dd      	bmi.n	8009a08 <_fflush_r+0xc>
 8009a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a4e:	f000 f908 	bl	8009c62 <__retarget_lock_release_recursive>
 8009a52:	e7d9      	b.n	8009a08 <_fflush_r+0xc>
 8009a54:	4b05      	ldr	r3, [pc, #20]	; (8009a6c <_fflush_r+0x70>)
 8009a56:	429c      	cmp	r4, r3
 8009a58:	d101      	bne.n	8009a5e <_fflush_r+0x62>
 8009a5a:	68ac      	ldr	r4, [r5, #8]
 8009a5c:	e7df      	b.n	8009a1e <_fflush_r+0x22>
 8009a5e:	4b04      	ldr	r3, [pc, #16]	; (8009a70 <_fflush_r+0x74>)
 8009a60:	429c      	cmp	r4, r3
 8009a62:	bf08      	it	eq
 8009a64:	68ec      	ldreq	r4, [r5, #12]
 8009a66:	e7da      	b.n	8009a1e <_fflush_r+0x22>
 8009a68:	0800b02c 	.word	0x0800b02c
 8009a6c:	0800b04c 	.word	0x0800b04c
 8009a70:	0800b00c 	.word	0x0800b00c

08009a74 <std>:
 8009a74:	2300      	movs	r3, #0
 8009a76:	b510      	push	{r4, lr}
 8009a78:	4604      	mov	r4, r0
 8009a7a:	e9c0 3300 	strd	r3, r3, [r0]
 8009a7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a82:	6083      	str	r3, [r0, #8]
 8009a84:	8181      	strh	r1, [r0, #12]
 8009a86:	6643      	str	r3, [r0, #100]	; 0x64
 8009a88:	81c2      	strh	r2, [r0, #14]
 8009a8a:	6183      	str	r3, [r0, #24]
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	2208      	movs	r2, #8
 8009a90:	305c      	adds	r0, #92	; 0x5c
 8009a92:	f7ff fd01 	bl	8009498 <memset>
 8009a96:	4b05      	ldr	r3, [pc, #20]	; (8009aac <std+0x38>)
 8009a98:	6224      	str	r4, [r4, #32]
 8009a9a:	6263      	str	r3, [r4, #36]	; 0x24
 8009a9c:	4b04      	ldr	r3, [pc, #16]	; (8009ab0 <std+0x3c>)
 8009a9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009aa0:	4b04      	ldr	r3, [pc, #16]	; (8009ab4 <std+0x40>)
 8009aa2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009aa4:	4b04      	ldr	r3, [pc, #16]	; (8009ab8 <std+0x44>)
 8009aa6:	6323      	str	r3, [r4, #48]	; 0x30
 8009aa8:	bd10      	pop	{r4, pc}
 8009aaa:	bf00      	nop
 8009aac:	0800a5d9 	.word	0x0800a5d9
 8009ab0:	0800a5fb 	.word	0x0800a5fb
 8009ab4:	0800a633 	.word	0x0800a633
 8009ab8:	0800a657 	.word	0x0800a657

08009abc <_cleanup_r>:
 8009abc:	4901      	ldr	r1, [pc, #4]	; (8009ac4 <_cleanup_r+0x8>)
 8009abe:	f000 b8af 	b.w	8009c20 <_fwalk_reent>
 8009ac2:	bf00      	nop
 8009ac4:	080099fd 	.word	0x080099fd

08009ac8 <__sfmoreglue>:
 8009ac8:	b570      	push	{r4, r5, r6, lr}
 8009aca:	2568      	movs	r5, #104	; 0x68
 8009acc:	1e4a      	subs	r2, r1, #1
 8009ace:	4355      	muls	r5, r2
 8009ad0:	460e      	mov	r6, r1
 8009ad2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ad6:	f7ff fd33 	bl	8009540 <_malloc_r>
 8009ada:	4604      	mov	r4, r0
 8009adc:	b140      	cbz	r0, 8009af0 <__sfmoreglue+0x28>
 8009ade:	2100      	movs	r1, #0
 8009ae0:	e9c0 1600 	strd	r1, r6, [r0]
 8009ae4:	300c      	adds	r0, #12
 8009ae6:	60a0      	str	r0, [r4, #8]
 8009ae8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009aec:	f7ff fcd4 	bl	8009498 <memset>
 8009af0:	4620      	mov	r0, r4
 8009af2:	bd70      	pop	{r4, r5, r6, pc}

08009af4 <__sfp_lock_acquire>:
 8009af4:	4801      	ldr	r0, [pc, #4]	; (8009afc <__sfp_lock_acquire+0x8>)
 8009af6:	f000 b8b3 	b.w	8009c60 <__retarget_lock_acquire_recursive>
 8009afa:	bf00      	nop
 8009afc:	20001b04 	.word	0x20001b04

08009b00 <__sfp_lock_release>:
 8009b00:	4801      	ldr	r0, [pc, #4]	; (8009b08 <__sfp_lock_release+0x8>)
 8009b02:	f000 b8ae 	b.w	8009c62 <__retarget_lock_release_recursive>
 8009b06:	bf00      	nop
 8009b08:	20001b04 	.word	0x20001b04

08009b0c <__sinit_lock_acquire>:
 8009b0c:	4801      	ldr	r0, [pc, #4]	; (8009b14 <__sinit_lock_acquire+0x8>)
 8009b0e:	f000 b8a7 	b.w	8009c60 <__retarget_lock_acquire_recursive>
 8009b12:	bf00      	nop
 8009b14:	20001aff 	.word	0x20001aff

08009b18 <__sinit_lock_release>:
 8009b18:	4801      	ldr	r0, [pc, #4]	; (8009b20 <__sinit_lock_release+0x8>)
 8009b1a:	f000 b8a2 	b.w	8009c62 <__retarget_lock_release_recursive>
 8009b1e:	bf00      	nop
 8009b20:	20001aff 	.word	0x20001aff

08009b24 <__sinit>:
 8009b24:	b510      	push	{r4, lr}
 8009b26:	4604      	mov	r4, r0
 8009b28:	f7ff fff0 	bl	8009b0c <__sinit_lock_acquire>
 8009b2c:	69a3      	ldr	r3, [r4, #24]
 8009b2e:	b11b      	cbz	r3, 8009b38 <__sinit+0x14>
 8009b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b34:	f7ff bff0 	b.w	8009b18 <__sinit_lock_release>
 8009b38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b3c:	6523      	str	r3, [r4, #80]	; 0x50
 8009b3e:	4b13      	ldr	r3, [pc, #76]	; (8009b8c <__sinit+0x68>)
 8009b40:	4a13      	ldr	r2, [pc, #76]	; (8009b90 <__sinit+0x6c>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b46:	42a3      	cmp	r3, r4
 8009b48:	bf08      	it	eq
 8009b4a:	2301      	moveq	r3, #1
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	bf08      	it	eq
 8009b50:	61a3      	streq	r3, [r4, #24]
 8009b52:	f000 f81f 	bl	8009b94 <__sfp>
 8009b56:	6060      	str	r0, [r4, #4]
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f000 f81b 	bl	8009b94 <__sfp>
 8009b5e:	60a0      	str	r0, [r4, #8]
 8009b60:	4620      	mov	r0, r4
 8009b62:	f000 f817 	bl	8009b94 <__sfp>
 8009b66:	2200      	movs	r2, #0
 8009b68:	2104      	movs	r1, #4
 8009b6a:	60e0      	str	r0, [r4, #12]
 8009b6c:	6860      	ldr	r0, [r4, #4]
 8009b6e:	f7ff ff81 	bl	8009a74 <std>
 8009b72:	2201      	movs	r2, #1
 8009b74:	2109      	movs	r1, #9
 8009b76:	68a0      	ldr	r0, [r4, #8]
 8009b78:	f7ff ff7c 	bl	8009a74 <std>
 8009b7c:	2202      	movs	r2, #2
 8009b7e:	2112      	movs	r1, #18
 8009b80:	68e0      	ldr	r0, [r4, #12]
 8009b82:	f7ff ff77 	bl	8009a74 <std>
 8009b86:	2301      	movs	r3, #1
 8009b88:	61a3      	str	r3, [r4, #24]
 8009b8a:	e7d1      	b.n	8009b30 <__sinit+0xc>
 8009b8c:	0800b008 	.word	0x0800b008
 8009b90:	08009abd 	.word	0x08009abd

08009b94 <__sfp>:
 8009b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b96:	4607      	mov	r7, r0
 8009b98:	f7ff ffac 	bl	8009af4 <__sfp_lock_acquire>
 8009b9c:	4b1e      	ldr	r3, [pc, #120]	; (8009c18 <__sfp+0x84>)
 8009b9e:	681e      	ldr	r6, [r3, #0]
 8009ba0:	69b3      	ldr	r3, [r6, #24]
 8009ba2:	b913      	cbnz	r3, 8009baa <__sfp+0x16>
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	f7ff ffbd 	bl	8009b24 <__sinit>
 8009baa:	3648      	adds	r6, #72	; 0x48
 8009bac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	d503      	bpl.n	8009bbc <__sfp+0x28>
 8009bb4:	6833      	ldr	r3, [r6, #0]
 8009bb6:	b30b      	cbz	r3, 8009bfc <__sfp+0x68>
 8009bb8:	6836      	ldr	r6, [r6, #0]
 8009bba:	e7f7      	b.n	8009bac <__sfp+0x18>
 8009bbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009bc0:	b9d5      	cbnz	r5, 8009bf8 <__sfp+0x64>
 8009bc2:	4b16      	ldr	r3, [pc, #88]	; (8009c1c <__sfp+0x88>)
 8009bc4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009bc8:	60e3      	str	r3, [r4, #12]
 8009bca:	6665      	str	r5, [r4, #100]	; 0x64
 8009bcc:	f000 f847 	bl	8009c5e <__retarget_lock_init_recursive>
 8009bd0:	f7ff ff96 	bl	8009b00 <__sfp_lock_release>
 8009bd4:	2208      	movs	r2, #8
 8009bd6:	4629      	mov	r1, r5
 8009bd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009bdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009be0:	6025      	str	r5, [r4, #0]
 8009be2:	61a5      	str	r5, [r4, #24]
 8009be4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009be8:	f7ff fc56 	bl	8009498 <memset>
 8009bec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009bf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bf8:	3468      	adds	r4, #104	; 0x68
 8009bfa:	e7d9      	b.n	8009bb0 <__sfp+0x1c>
 8009bfc:	2104      	movs	r1, #4
 8009bfe:	4638      	mov	r0, r7
 8009c00:	f7ff ff62 	bl	8009ac8 <__sfmoreglue>
 8009c04:	4604      	mov	r4, r0
 8009c06:	6030      	str	r0, [r6, #0]
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d1d5      	bne.n	8009bb8 <__sfp+0x24>
 8009c0c:	f7ff ff78 	bl	8009b00 <__sfp_lock_release>
 8009c10:	230c      	movs	r3, #12
 8009c12:	603b      	str	r3, [r7, #0]
 8009c14:	e7ee      	b.n	8009bf4 <__sfp+0x60>
 8009c16:	bf00      	nop
 8009c18:	0800b008 	.word	0x0800b008
 8009c1c:	ffff0001 	.word	0xffff0001

08009c20 <_fwalk_reent>:
 8009c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c24:	4606      	mov	r6, r0
 8009c26:	4688      	mov	r8, r1
 8009c28:	2700      	movs	r7, #0
 8009c2a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c32:	f1b9 0901 	subs.w	r9, r9, #1
 8009c36:	d505      	bpl.n	8009c44 <_fwalk_reent+0x24>
 8009c38:	6824      	ldr	r4, [r4, #0]
 8009c3a:	2c00      	cmp	r4, #0
 8009c3c:	d1f7      	bne.n	8009c2e <_fwalk_reent+0xe>
 8009c3e:	4638      	mov	r0, r7
 8009c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c44:	89ab      	ldrh	r3, [r5, #12]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d907      	bls.n	8009c5a <_fwalk_reent+0x3a>
 8009c4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	d003      	beq.n	8009c5a <_fwalk_reent+0x3a>
 8009c52:	4629      	mov	r1, r5
 8009c54:	4630      	mov	r0, r6
 8009c56:	47c0      	blx	r8
 8009c58:	4307      	orrs	r7, r0
 8009c5a:	3568      	adds	r5, #104	; 0x68
 8009c5c:	e7e9      	b.n	8009c32 <_fwalk_reent+0x12>

08009c5e <__retarget_lock_init_recursive>:
 8009c5e:	4770      	bx	lr

08009c60 <__retarget_lock_acquire_recursive>:
 8009c60:	4770      	bx	lr

08009c62 <__retarget_lock_release_recursive>:
 8009c62:	4770      	bx	lr

08009c64 <__swhatbuf_r>:
 8009c64:	b570      	push	{r4, r5, r6, lr}
 8009c66:	460e      	mov	r6, r1
 8009c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c6c:	4614      	mov	r4, r2
 8009c6e:	2900      	cmp	r1, #0
 8009c70:	461d      	mov	r5, r3
 8009c72:	b096      	sub	sp, #88	; 0x58
 8009c74:	da07      	bge.n	8009c86 <__swhatbuf_r+0x22>
 8009c76:	2300      	movs	r3, #0
 8009c78:	602b      	str	r3, [r5, #0]
 8009c7a:	89b3      	ldrh	r3, [r6, #12]
 8009c7c:	061a      	lsls	r2, r3, #24
 8009c7e:	d410      	bmi.n	8009ca2 <__swhatbuf_r+0x3e>
 8009c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c84:	e00e      	b.n	8009ca4 <__swhatbuf_r+0x40>
 8009c86:	466a      	mov	r2, sp
 8009c88:	f000 fd0c 	bl	800a6a4 <_fstat_r>
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	dbf2      	blt.n	8009c76 <__swhatbuf_r+0x12>
 8009c90:	9a01      	ldr	r2, [sp, #4]
 8009c92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c9a:	425a      	negs	r2, r3
 8009c9c:	415a      	adcs	r2, r3
 8009c9e:	602a      	str	r2, [r5, #0]
 8009ca0:	e7ee      	b.n	8009c80 <__swhatbuf_r+0x1c>
 8009ca2:	2340      	movs	r3, #64	; 0x40
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	6023      	str	r3, [r4, #0]
 8009ca8:	b016      	add	sp, #88	; 0x58
 8009caa:	bd70      	pop	{r4, r5, r6, pc}

08009cac <__smakebuf_r>:
 8009cac:	898b      	ldrh	r3, [r1, #12]
 8009cae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cb0:	079d      	lsls	r5, r3, #30
 8009cb2:	4606      	mov	r6, r0
 8009cb4:	460c      	mov	r4, r1
 8009cb6:	d507      	bpl.n	8009cc8 <__smakebuf_r+0x1c>
 8009cb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cbc:	6023      	str	r3, [r4, #0]
 8009cbe:	6123      	str	r3, [r4, #16]
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	6163      	str	r3, [r4, #20]
 8009cc4:	b002      	add	sp, #8
 8009cc6:	bd70      	pop	{r4, r5, r6, pc}
 8009cc8:	466a      	mov	r2, sp
 8009cca:	ab01      	add	r3, sp, #4
 8009ccc:	f7ff ffca 	bl	8009c64 <__swhatbuf_r>
 8009cd0:	9900      	ldr	r1, [sp, #0]
 8009cd2:	4605      	mov	r5, r0
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	f7ff fc33 	bl	8009540 <_malloc_r>
 8009cda:	b948      	cbnz	r0, 8009cf0 <__smakebuf_r+0x44>
 8009cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ce0:	059a      	lsls	r2, r3, #22
 8009ce2:	d4ef      	bmi.n	8009cc4 <__smakebuf_r+0x18>
 8009ce4:	f023 0303 	bic.w	r3, r3, #3
 8009ce8:	f043 0302 	orr.w	r3, r3, #2
 8009cec:	81a3      	strh	r3, [r4, #12]
 8009cee:	e7e3      	b.n	8009cb8 <__smakebuf_r+0xc>
 8009cf0:	4b0d      	ldr	r3, [pc, #52]	; (8009d28 <__smakebuf_r+0x7c>)
 8009cf2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009cf4:	89a3      	ldrh	r3, [r4, #12]
 8009cf6:	6020      	str	r0, [r4, #0]
 8009cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cfc:	81a3      	strh	r3, [r4, #12]
 8009cfe:	9b00      	ldr	r3, [sp, #0]
 8009d00:	6120      	str	r0, [r4, #16]
 8009d02:	6163      	str	r3, [r4, #20]
 8009d04:	9b01      	ldr	r3, [sp, #4]
 8009d06:	b15b      	cbz	r3, 8009d20 <__smakebuf_r+0x74>
 8009d08:	4630      	mov	r0, r6
 8009d0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d0e:	f000 fcdb 	bl	800a6c8 <_isatty_r>
 8009d12:	b128      	cbz	r0, 8009d20 <__smakebuf_r+0x74>
 8009d14:	89a3      	ldrh	r3, [r4, #12]
 8009d16:	f023 0303 	bic.w	r3, r3, #3
 8009d1a:	f043 0301 	orr.w	r3, r3, #1
 8009d1e:	81a3      	strh	r3, [r4, #12]
 8009d20:	89a0      	ldrh	r0, [r4, #12]
 8009d22:	4305      	orrs	r5, r0
 8009d24:	81a5      	strh	r5, [r4, #12]
 8009d26:	e7cd      	b.n	8009cc4 <__smakebuf_r+0x18>
 8009d28:	08009abd 	.word	0x08009abd

08009d2c <__malloc_lock>:
 8009d2c:	4801      	ldr	r0, [pc, #4]	; (8009d34 <__malloc_lock+0x8>)
 8009d2e:	f7ff bf97 	b.w	8009c60 <__retarget_lock_acquire_recursive>
 8009d32:	bf00      	nop
 8009d34:	20001b00 	.word	0x20001b00

08009d38 <__malloc_unlock>:
 8009d38:	4801      	ldr	r0, [pc, #4]	; (8009d40 <__malloc_unlock+0x8>)
 8009d3a:	f7ff bf92 	b.w	8009c62 <__retarget_lock_release_recursive>
 8009d3e:	bf00      	nop
 8009d40:	20001b00 	.word	0x20001b00

08009d44 <__ssputs_r>:
 8009d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d48:	688e      	ldr	r6, [r1, #8]
 8009d4a:	4682      	mov	sl, r0
 8009d4c:	429e      	cmp	r6, r3
 8009d4e:	460c      	mov	r4, r1
 8009d50:	4690      	mov	r8, r2
 8009d52:	461f      	mov	r7, r3
 8009d54:	d838      	bhi.n	8009dc8 <__ssputs_r+0x84>
 8009d56:	898a      	ldrh	r2, [r1, #12]
 8009d58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d5c:	d032      	beq.n	8009dc4 <__ssputs_r+0x80>
 8009d5e:	6825      	ldr	r5, [r4, #0]
 8009d60:	6909      	ldr	r1, [r1, #16]
 8009d62:	3301      	adds	r3, #1
 8009d64:	eba5 0901 	sub.w	r9, r5, r1
 8009d68:	6965      	ldr	r5, [r4, #20]
 8009d6a:	444b      	add	r3, r9
 8009d6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d74:	106d      	asrs	r5, r5, #1
 8009d76:	429d      	cmp	r5, r3
 8009d78:	bf38      	it	cc
 8009d7a:	461d      	movcc	r5, r3
 8009d7c:	0553      	lsls	r3, r2, #21
 8009d7e:	d531      	bpl.n	8009de4 <__ssputs_r+0xa0>
 8009d80:	4629      	mov	r1, r5
 8009d82:	f7ff fbdd 	bl	8009540 <_malloc_r>
 8009d86:	4606      	mov	r6, r0
 8009d88:	b950      	cbnz	r0, 8009da0 <__ssputs_r+0x5c>
 8009d8a:	230c      	movs	r3, #12
 8009d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d90:	f8ca 3000 	str.w	r3, [sl]
 8009d94:	89a3      	ldrh	r3, [r4, #12]
 8009d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d9a:	81a3      	strh	r3, [r4, #12]
 8009d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da0:	464a      	mov	r2, r9
 8009da2:	6921      	ldr	r1, [r4, #16]
 8009da4:	f7ff fb6a 	bl	800947c <memcpy>
 8009da8:	89a3      	ldrh	r3, [r4, #12]
 8009daa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009db2:	81a3      	strh	r3, [r4, #12]
 8009db4:	6126      	str	r6, [r4, #16]
 8009db6:	444e      	add	r6, r9
 8009db8:	6026      	str	r6, [r4, #0]
 8009dba:	463e      	mov	r6, r7
 8009dbc:	6165      	str	r5, [r4, #20]
 8009dbe:	eba5 0509 	sub.w	r5, r5, r9
 8009dc2:	60a5      	str	r5, [r4, #8]
 8009dc4:	42be      	cmp	r6, r7
 8009dc6:	d900      	bls.n	8009dca <__ssputs_r+0x86>
 8009dc8:	463e      	mov	r6, r7
 8009dca:	4632      	mov	r2, r6
 8009dcc:	4641      	mov	r1, r8
 8009dce:	6820      	ldr	r0, [r4, #0]
 8009dd0:	f000 fcaa 	bl	800a728 <memmove>
 8009dd4:	68a3      	ldr	r3, [r4, #8]
 8009dd6:	6822      	ldr	r2, [r4, #0]
 8009dd8:	1b9b      	subs	r3, r3, r6
 8009dda:	4432      	add	r2, r6
 8009ddc:	2000      	movs	r0, #0
 8009dde:	60a3      	str	r3, [r4, #8]
 8009de0:	6022      	str	r2, [r4, #0]
 8009de2:	e7db      	b.n	8009d9c <__ssputs_r+0x58>
 8009de4:	462a      	mov	r2, r5
 8009de6:	f000 fcb9 	bl	800a75c <_realloc_r>
 8009dea:	4606      	mov	r6, r0
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d1e1      	bne.n	8009db4 <__ssputs_r+0x70>
 8009df0:	4650      	mov	r0, sl
 8009df2:	6921      	ldr	r1, [r4, #16]
 8009df4:	f7ff fb58 	bl	80094a8 <_free_r>
 8009df8:	e7c7      	b.n	8009d8a <__ssputs_r+0x46>
	...

08009dfc <_svfiprintf_r>:
 8009dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e00:	4698      	mov	r8, r3
 8009e02:	898b      	ldrh	r3, [r1, #12]
 8009e04:	4607      	mov	r7, r0
 8009e06:	061b      	lsls	r3, r3, #24
 8009e08:	460d      	mov	r5, r1
 8009e0a:	4614      	mov	r4, r2
 8009e0c:	b09d      	sub	sp, #116	; 0x74
 8009e0e:	d50e      	bpl.n	8009e2e <_svfiprintf_r+0x32>
 8009e10:	690b      	ldr	r3, [r1, #16]
 8009e12:	b963      	cbnz	r3, 8009e2e <_svfiprintf_r+0x32>
 8009e14:	2140      	movs	r1, #64	; 0x40
 8009e16:	f7ff fb93 	bl	8009540 <_malloc_r>
 8009e1a:	6028      	str	r0, [r5, #0]
 8009e1c:	6128      	str	r0, [r5, #16]
 8009e1e:	b920      	cbnz	r0, 8009e2a <_svfiprintf_r+0x2e>
 8009e20:	230c      	movs	r3, #12
 8009e22:	603b      	str	r3, [r7, #0]
 8009e24:	f04f 30ff 	mov.w	r0, #4294967295
 8009e28:	e0d1      	b.n	8009fce <_svfiprintf_r+0x1d2>
 8009e2a:	2340      	movs	r3, #64	; 0x40
 8009e2c:	616b      	str	r3, [r5, #20]
 8009e2e:	2300      	movs	r3, #0
 8009e30:	9309      	str	r3, [sp, #36]	; 0x24
 8009e32:	2320      	movs	r3, #32
 8009e34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e38:	2330      	movs	r3, #48	; 0x30
 8009e3a:	f04f 0901 	mov.w	r9, #1
 8009e3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009fe8 <_svfiprintf_r+0x1ec>
 8009e46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e4a:	4623      	mov	r3, r4
 8009e4c:	469a      	mov	sl, r3
 8009e4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e52:	b10a      	cbz	r2, 8009e58 <_svfiprintf_r+0x5c>
 8009e54:	2a25      	cmp	r2, #37	; 0x25
 8009e56:	d1f9      	bne.n	8009e4c <_svfiprintf_r+0x50>
 8009e58:	ebba 0b04 	subs.w	fp, sl, r4
 8009e5c:	d00b      	beq.n	8009e76 <_svfiprintf_r+0x7a>
 8009e5e:	465b      	mov	r3, fp
 8009e60:	4622      	mov	r2, r4
 8009e62:	4629      	mov	r1, r5
 8009e64:	4638      	mov	r0, r7
 8009e66:	f7ff ff6d 	bl	8009d44 <__ssputs_r>
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	f000 80aa 	beq.w	8009fc4 <_svfiprintf_r+0x1c8>
 8009e70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e72:	445a      	add	r2, fp
 8009e74:	9209      	str	r2, [sp, #36]	; 0x24
 8009e76:	f89a 3000 	ldrb.w	r3, [sl]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f000 80a2 	beq.w	8009fc4 <_svfiprintf_r+0x1c8>
 8009e80:	2300      	movs	r3, #0
 8009e82:	f04f 32ff 	mov.w	r2, #4294967295
 8009e86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e8a:	f10a 0a01 	add.w	sl, sl, #1
 8009e8e:	9304      	str	r3, [sp, #16]
 8009e90:	9307      	str	r3, [sp, #28]
 8009e92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e96:	931a      	str	r3, [sp, #104]	; 0x68
 8009e98:	4654      	mov	r4, sl
 8009e9a:	2205      	movs	r2, #5
 8009e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ea0:	4851      	ldr	r0, [pc, #324]	; (8009fe8 <_svfiprintf_r+0x1ec>)
 8009ea2:	f000 fc33 	bl	800a70c <memchr>
 8009ea6:	9a04      	ldr	r2, [sp, #16]
 8009ea8:	b9d8      	cbnz	r0, 8009ee2 <_svfiprintf_r+0xe6>
 8009eaa:	06d0      	lsls	r0, r2, #27
 8009eac:	bf44      	itt	mi
 8009eae:	2320      	movmi	r3, #32
 8009eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eb4:	0711      	lsls	r1, r2, #28
 8009eb6:	bf44      	itt	mi
 8009eb8:	232b      	movmi	r3, #43	; 0x2b
 8009eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8009ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ec4:	d015      	beq.n	8009ef2 <_svfiprintf_r+0xf6>
 8009ec6:	4654      	mov	r4, sl
 8009ec8:	2000      	movs	r0, #0
 8009eca:	f04f 0c0a 	mov.w	ip, #10
 8009ece:	9a07      	ldr	r2, [sp, #28]
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ed6:	3b30      	subs	r3, #48	; 0x30
 8009ed8:	2b09      	cmp	r3, #9
 8009eda:	d94e      	bls.n	8009f7a <_svfiprintf_r+0x17e>
 8009edc:	b1b0      	cbz	r0, 8009f0c <_svfiprintf_r+0x110>
 8009ede:	9207      	str	r2, [sp, #28]
 8009ee0:	e014      	b.n	8009f0c <_svfiprintf_r+0x110>
 8009ee2:	eba0 0308 	sub.w	r3, r0, r8
 8009ee6:	fa09 f303 	lsl.w	r3, r9, r3
 8009eea:	4313      	orrs	r3, r2
 8009eec:	46a2      	mov	sl, r4
 8009eee:	9304      	str	r3, [sp, #16]
 8009ef0:	e7d2      	b.n	8009e98 <_svfiprintf_r+0x9c>
 8009ef2:	9b03      	ldr	r3, [sp, #12]
 8009ef4:	1d19      	adds	r1, r3, #4
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	9103      	str	r1, [sp, #12]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	bfbb      	ittet	lt
 8009efe:	425b      	neglt	r3, r3
 8009f00:	f042 0202 	orrlt.w	r2, r2, #2
 8009f04:	9307      	strge	r3, [sp, #28]
 8009f06:	9307      	strlt	r3, [sp, #28]
 8009f08:	bfb8      	it	lt
 8009f0a:	9204      	strlt	r2, [sp, #16]
 8009f0c:	7823      	ldrb	r3, [r4, #0]
 8009f0e:	2b2e      	cmp	r3, #46	; 0x2e
 8009f10:	d10c      	bne.n	8009f2c <_svfiprintf_r+0x130>
 8009f12:	7863      	ldrb	r3, [r4, #1]
 8009f14:	2b2a      	cmp	r3, #42	; 0x2a
 8009f16:	d135      	bne.n	8009f84 <_svfiprintf_r+0x188>
 8009f18:	9b03      	ldr	r3, [sp, #12]
 8009f1a:	3402      	adds	r4, #2
 8009f1c:	1d1a      	adds	r2, r3, #4
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	9203      	str	r2, [sp, #12]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	bfb8      	it	lt
 8009f26:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f2a:	9305      	str	r3, [sp, #20]
 8009f2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ff8 <_svfiprintf_r+0x1fc>
 8009f30:	2203      	movs	r2, #3
 8009f32:	4650      	mov	r0, sl
 8009f34:	7821      	ldrb	r1, [r4, #0]
 8009f36:	f000 fbe9 	bl	800a70c <memchr>
 8009f3a:	b140      	cbz	r0, 8009f4e <_svfiprintf_r+0x152>
 8009f3c:	2340      	movs	r3, #64	; 0x40
 8009f3e:	eba0 000a 	sub.w	r0, r0, sl
 8009f42:	fa03 f000 	lsl.w	r0, r3, r0
 8009f46:	9b04      	ldr	r3, [sp, #16]
 8009f48:	3401      	adds	r4, #1
 8009f4a:	4303      	orrs	r3, r0
 8009f4c:	9304      	str	r3, [sp, #16]
 8009f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f52:	2206      	movs	r2, #6
 8009f54:	4825      	ldr	r0, [pc, #148]	; (8009fec <_svfiprintf_r+0x1f0>)
 8009f56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f5a:	f000 fbd7 	bl	800a70c <memchr>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d038      	beq.n	8009fd4 <_svfiprintf_r+0x1d8>
 8009f62:	4b23      	ldr	r3, [pc, #140]	; (8009ff0 <_svfiprintf_r+0x1f4>)
 8009f64:	bb1b      	cbnz	r3, 8009fae <_svfiprintf_r+0x1b2>
 8009f66:	9b03      	ldr	r3, [sp, #12]
 8009f68:	3307      	adds	r3, #7
 8009f6a:	f023 0307 	bic.w	r3, r3, #7
 8009f6e:	3308      	adds	r3, #8
 8009f70:	9303      	str	r3, [sp, #12]
 8009f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f74:	4433      	add	r3, r6
 8009f76:	9309      	str	r3, [sp, #36]	; 0x24
 8009f78:	e767      	b.n	8009e4a <_svfiprintf_r+0x4e>
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	2001      	movs	r0, #1
 8009f7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f82:	e7a5      	b.n	8009ed0 <_svfiprintf_r+0xd4>
 8009f84:	2300      	movs	r3, #0
 8009f86:	f04f 0c0a 	mov.w	ip, #10
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	3401      	adds	r4, #1
 8009f8e:	9305      	str	r3, [sp, #20]
 8009f90:	4620      	mov	r0, r4
 8009f92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f96:	3a30      	subs	r2, #48	; 0x30
 8009f98:	2a09      	cmp	r2, #9
 8009f9a:	d903      	bls.n	8009fa4 <_svfiprintf_r+0x1a8>
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d0c5      	beq.n	8009f2c <_svfiprintf_r+0x130>
 8009fa0:	9105      	str	r1, [sp, #20]
 8009fa2:	e7c3      	b.n	8009f2c <_svfiprintf_r+0x130>
 8009fa4:	4604      	mov	r4, r0
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fac:	e7f0      	b.n	8009f90 <_svfiprintf_r+0x194>
 8009fae:	ab03      	add	r3, sp, #12
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	462a      	mov	r2, r5
 8009fb4:	4638      	mov	r0, r7
 8009fb6:	4b0f      	ldr	r3, [pc, #60]	; (8009ff4 <_svfiprintf_r+0x1f8>)
 8009fb8:	a904      	add	r1, sp, #16
 8009fba:	f3af 8000 	nop.w
 8009fbe:	1c42      	adds	r2, r0, #1
 8009fc0:	4606      	mov	r6, r0
 8009fc2:	d1d6      	bne.n	8009f72 <_svfiprintf_r+0x176>
 8009fc4:	89ab      	ldrh	r3, [r5, #12]
 8009fc6:	065b      	lsls	r3, r3, #25
 8009fc8:	f53f af2c 	bmi.w	8009e24 <_svfiprintf_r+0x28>
 8009fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fce:	b01d      	add	sp, #116	; 0x74
 8009fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd4:	ab03      	add	r3, sp, #12
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	462a      	mov	r2, r5
 8009fda:	4638      	mov	r0, r7
 8009fdc:	4b05      	ldr	r3, [pc, #20]	; (8009ff4 <_svfiprintf_r+0x1f8>)
 8009fde:	a904      	add	r1, sp, #16
 8009fe0:	f000 f9d4 	bl	800a38c <_printf_i>
 8009fe4:	e7eb      	b.n	8009fbe <_svfiprintf_r+0x1c2>
 8009fe6:	bf00      	nop
 8009fe8:	0800b06c 	.word	0x0800b06c
 8009fec:	0800b076 	.word	0x0800b076
 8009ff0:	00000000 	.word	0x00000000
 8009ff4:	08009d45 	.word	0x08009d45
 8009ff8:	0800b072 	.word	0x0800b072

08009ffc <__sfputc_r>:
 8009ffc:	6893      	ldr	r3, [r2, #8]
 8009ffe:	b410      	push	{r4}
 800a000:	3b01      	subs	r3, #1
 800a002:	2b00      	cmp	r3, #0
 800a004:	6093      	str	r3, [r2, #8]
 800a006:	da07      	bge.n	800a018 <__sfputc_r+0x1c>
 800a008:	6994      	ldr	r4, [r2, #24]
 800a00a:	42a3      	cmp	r3, r4
 800a00c:	db01      	blt.n	800a012 <__sfputc_r+0x16>
 800a00e:	290a      	cmp	r1, #10
 800a010:	d102      	bne.n	800a018 <__sfputc_r+0x1c>
 800a012:	bc10      	pop	{r4}
 800a014:	f7ff bbac 	b.w	8009770 <__swbuf_r>
 800a018:	6813      	ldr	r3, [r2, #0]
 800a01a:	1c58      	adds	r0, r3, #1
 800a01c:	6010      	str	r0, [r2, #0]
 800a01e:	7019      	strb	r1, [r3, #0]
 800a020:	4608      	mov	r0, r1
 800a022:	bc10      	pop	{r4}
 800a024:	4770      	bx	lr

0800a026 <__sfputs_r>:
 800a026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a028:	4606      	mov	r6, r0
 800a02a:	460f      	mov	r7, r1
 800a02c:	4614      	mov	r4, r2
 800a02e:	18d5      	adds	r5, r2, r3
 800a030:	42ac      	cmp	r4, r5
 800a032:	d101      	bne.n	800a038 <__sfputs_r+0x12>
 800a034:	2000      	movs	r0, #0
 800a036:	e007      	b.n	800a048 <__sfputs_r+0x22>
 800a038:	463a      	mov	r2, r7
 800a03a:	4630      	mov	r0, r6
 800a03c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a040:	f7ff ffdc 	bl	8009ffc <__sfputc_r>
 800a044:	1c43      	adds	r3, r0, #1
 800a046:	d1f3      	bne.n	800a030 <__sfputs_r+0xa>
 800a048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a04c <_vfiprintf_r>:
 800a04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a050:	460d      	mov	r5, r1
 800a052:	4614      	mov	r4, r2
 800a054:	4698      	mov	r8, r3
 800a056:	4606      	mov	r6, r0
 800a058:	b09d      	sub	sp, #116	; 0x74
 800a05a:	b118      	cbz	r0, 800a064 <_vfiprintf_r+0x18>
 800a05c:	6983      	ldr	r3, [r0, #24]
 800a05e:	b90b      	cbnz	r3, 800a064 <_vfiprintf_r+0x18>
 800a060:	f7ff fd60 	bl	8009b24 <__sinit>
 800a064:	4b89      	ldr	r3, [pc, #548]	; (800a28c <_vfiprintf_r+0x240>)
 800a066:	429d      	cmp	r5, r3
 800a068:	d11b      	bne.n	800a0a2 <_vfiprintf_r+0x56>
 800a06a:	6875      	ldr	r5, [r6, #4]
 800a06c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a06e:	07d9      	lsls	r1, r3, #31
 800a070:	d405      	bmi.n	800a07e <_vfiprintf_r+0x32>
 800a072:	89ab      	ldrh	r3, [r5, #12]
 800a074:	059a      	lsls	r2, r3, #22
 800a076:	d402      	bmi.n	800a07e <_vfiprintf_r+0x32>
 800a078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a07a:	f7ff fdf1 	bl	8009c60 <__retarget_lock_acquire_recursive>
 800a07e:	89ab      	ldrh	r3, [r5, #12]
 800a080:	071b      	lsls	r3, r3, #28
 800a082:	d501      	bpl.n	800a088 <_vfiprintf_r+0x3c>
 800a084:	692b      	ldr	r3, [r5, #16]
 800a086:	b9eb      	cbnz	r3, 800a0c4 <_vfiprintf_r+0x78>
 800a088:	4629      	mov	r1, r5
 800a08a:	4630      	mov	r0, r6
 800a08c:	f7ff fbc2 	bl	8009814 <__swsetup_r>
 800a090:	b1c0      	cbz	r0, 800a0c4 <_vfiprintf_r+0x78>
 800a092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a094:	07dc      	lsls	r4, r3, #31
 800a096:	d50e      	bpl.n	800a0b6 <_vfiprintf_r+0x6a>
 800a098:	f04f 30ff 	mov.w	r0, #4294967295
 800a09c:	b01d      	add	sp, #116	; 0x74
 800a09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a2:	4b7b      	ldr	r3, [pc, #492]	; (800a290 <_vfiprintf_r+0x244>)
 800a0a4:	429d      	cmp	r5, r3
 800a0a6:	d101      	bne.n	800a0ac <_vfiprintf_r+0x60>
 800a0a8:	68b5      	ldr	r5, [r6, #8]
 800a0aa:	e7df      	b.n	800a06c <_vfiprintf_r+0x20>
 800a0ac:	4b79      	ldr	r3, [pc, #484]	; (800a294 <_vfiprintf_r+0x248>)
 800a0ae:	429d      	cmp	r5, r3
 800a0b0:	bf08      	it	eq
 800a0b2:	68f5      	ldreq	r5, [r6, #12]
 800a0b4:	e7da      	b.n	800a06c <_vfiprintf_r+0x20>
 800a0b6:	89ab      	ldrh	r3, [r5, #12]
 800a0b8:	0598      	lsls	r0, r3, #22
 800a0ba:	d4ed      	bmi.n	800a098 <_vfiprintf_r+0x4c>
 800a0bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0be:	f7ff fdd0 	bl	8009c62 <__retarget_lock_release_recursive>
 800a0c2:	e7e9      	b.n	800a098 <_vfiprintf_r+0x4c>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a0c8:	2320      	movs	r3, #32
 800a0ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0ce:	2330      	movs	r3, #48	; 0x30
 800a0d0:	f04f 0901 	mov.w	r9, #1
 800a0d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a298 <_vfiprintf_r+0x24c>
 800a0dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0e0:	4623      	mov	r3, r4
 800a0e2:	469a      	mov	sl, r3
 800a0e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0e8:	b10a      	cbz	r2, 800a0ee <_vfiprintf_r+0xa2>
 800a0ea:	2a25      	cmp	r2, #37	; 0x25
 800a0ec:	d1f9      	bne.n	800a0e2 <_vfiprintf_r+0x96>
 800a0ee:	ebba 0b04 	subs.w	fp, sl, r4
 800a0f2:	d00b      	beq.n	800a10c <_vfiprintf_r+0xc0>
 800a0f4:	465b      	mov	r3, fp
 800a0f6:	4622      	mov	r2, r4
 800a0f8:	4629      	mov	r1, r5
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	f7ff ff93 	bl	800a026 <__sfputs_r>
 800a100:	3001      	adds	r0, #1
 800a102:	f000 80aa 	beq.w	800a25a <_vfiprintf_r+0x20e>
 800a106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a108:	445a      	add	r2, fp
 800a10a:	9209      	str	r2, [sp, #36]	; 0x24
 800a10c:	f89a 3000 	ldrb.w	r3, [sl]
 800a110:	2b00      	cmp	r3, #0
 800a112:	f000 80a2 	beq.w	800a25a <_vfiprintf_r+0x20e>
 800a116:	2300      	movs	r3, #0
 800a118:	f04f 32ff 	mov.w	r2, #4294967295
 800a11c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a120:	f10a 0a01 	add.w	sl, sl, #1
 800a124:	9304      	str	r3, [sp, #16]
 800a126:	9307      	str	r3, [sp, #28]
 800a128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a12c:	931a      	str	r3, [sp, #104]	; 0x68
 800a12e:	4654      	mov	r4, sl
 800a130:	2205      	movs	r2, #5
 800a132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a136:	4858      	ldr	r0, [pc, #352]	; (800a298 <_vfiprintf_r+0x24c>)
 800a138:	f000 fae8 	bl	800a70c <memchr>
 800a13c:	9a04      	ldr	r2, [sp, #16]
 800a13e:	b9d8      	cbnz	r0, 800a178 <_vfiprintf_r+0x12c>
 800a140:	06d1      	lsls	r1, r2, #27
 800a142:	bf44      	itt	mi
 800a144:	2320      	movmi	r3, #32
 800a146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a14a:	0713      	lsls	r3, r2, #28
 800a14c:	bf44      	itt	mi
 800a14e:	232b      	movmi	r3, #43	; 0x2b
 800a150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a154:	f89a 3000 	ldrb.w	r3, [sl]
 800a158:	2b2a      	cmp	r3, #42	; 0x2a
 800a15a:	d015      	beq.n	800a188 <_vfiprintf_r+0x13c>
 800a15c:	4654      	mov	r4, sl
 800a15e:	2000      	movs	r0, #0
 800a160:	f04f 0c0a 	mov.w	ip, #10
 800a164:	9a07      	ldr	r2, [sp, #28]
 800a166:	4621      	mov	r1, r4
 800a168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a16c:	3b30      	subs	r3, #48	; 0x30
 800a16e:	2b09      	cmp	r3, #9
 800a170:	d94e      	bls.n	800a210 <_vfiprintf_r+0x1c4>
 800a172:	b1b0      	cbz	r0, 800a1a2 <_vfiprintf_r+0x156>
 800a174:	9207      	str	r2, [sp, #28]
 800a176:	e014      	b.n	800a1a2 <_vfiprintf_r+0x156>
 800a178:	eba0 0308 	sub.w	r3, r0, r8
 800a17c:	fa09 f303 	lsl.w	r3, r9, r3
 800a180:	4313      	orrs	r3, r2
 800a182:	46a2      	mov	sl, r4
 800a184:	9304      	str	r3, [sp, #16]
 800a186:	e7d2      	b.n	800a12e <_vfiprintf_r+0xe2>
 800a188:	9b03      	ldr	r3, [sp, #12]
 800a18a:	1d19      	adds	r1, r3, #4
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	9103      	str	r1, [sp, #12]
 800a190:	2b00      	cmp	r3, #0
 800a192:	bfbb      	ittet	lt
 800a194:	425b      	neglt	r3, r3
 800a196:	f042 0202 	orrlt.w	r2, r2, #2
 800a19a:	9307      	strge	r3, [sp, #28]
 800a19c:	9307      	strlt	r3, [sp, #28]
 800a19e:	bfb8      	it	lt
 800a1a0:	9204      	strlt	r2, [sp, #16]
 800a1a2:	7823      	ldrb	r3, [r4, #0]
 800a1a4:	2b2e      	cmp	r3, #46	; 0x2e
 800a1a6:	d10c      	bne.n	800a1c2 <_vfiprintf_r+0x176>
 800a1a8:	7863      	ldrb	r3, [r4, #1]
 800a1aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a1ac:	d135      	bne.n	800a21a <_vfiprintf_r+0x1ce>
 800a1ae:	9b03      	ldr	r3, [sp, #12]
 800a1b0:	3402      	adds	r4, #2
 800a1b2:	1d1a      	adds	r2, r3, #4
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	9203      	str	r2, [sp, #12]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	bfb8      	it	lt
 800a1bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1c0:	9305      	str	r3, [sp, #20]
 800a1c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a2a8 <_vfiprintf_r+0x25c>
 800a1c6:	2203      	movs	r2, #3
 800a1c8:	4650      	mov	r0, sl
 800a1ca:	7821      	ldrb	r1, [r4, #0]
 800a1cc:	f000 fa9e 	bl	800a70c <memchr>
 800a1d0:	b140      	cbz	r0, 800a1e4 <_vfiprintf_r+0x198>
 800a1d2:	2340      	movs	r3, #64	; 0x40
 800a1d4:	eba0 000a 	sub.w	r0, r0, sl
 800a1d8:	fa03 f000 	lsl.w	r0, r3, r0
 800a1dc:	9b04      	ldr	r3, [sp, #16]
 800a1de:	3401      	adds	r4, #1
 800a1e0:	4303      	orrs	r3, r0
 800a1e2:	9304      	str	r3, [sp, #16]
 800a1e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1e8:	2206      	movs	r2, #6
 800a1ea:	482c      	ldr	r0, [pc, #176]	; (800a29c <_vfiprintf_r+0x250>)
 800a1ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1f0:	f000 fa8c 	bl	800a70c <memchr>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	d03f      	beq.n	800a278 <_vfiprintf_r+0x22c>
 800a1f8:	4b29      	ldr	r3, [pc, #164]	; (800a2a0 <_vfiprintf_r+0x254>)
 800a1fa:	bb1b      	cbnz	r3, 800a244 <_vfiprintf_r+0x1f8>
 800a1fc:	9b03      	ldr	r3, [sp, #12]
 800a1fe:	3307      	adds	r3, #7
 800a200:	f023 0307 	bic.w	r3, r3, #7
 800a204:	3308      	adds	r3, #8
 800a206:	9303      	str	r3, [sp, #12]
 800a208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a20a:	443b      	add	r3, r7
 800a20c:	9309      	str	r3, [sp, #36]	; 0x24
 800a20e:	e767      	b.n	800a0e0 <_vfiprintf_r+0x94>
 800a210:	460c      	mov	r4, r1
 800a212:	2001      	movs	r0, #1
 800a214:	fb0c 3202 	mla	r2, ip, r2, r3
 800a218:	e7a5      	b.n	800a166 <_vfiprintf_r+0x11a>
 800a21a:	2300      	movs	r3, #0
 800a21c:	f04f 0c0a 	mov.w	ip, #10
 800a220:	4619      	mov	r1, r3
 800a222:	3401      	adds	r4, #1
 800a224:	9305      	str	r3, [sp, #20]
 800a226:	4620      	mov	r0, r4
 800a228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a22c:	3a30      	subs	r2, #48	; 0x30
 800a22e:	2a09      	cmp	r2, #9
 800a230:	d903      	bls.n	800a23a <_vfiprintf_r+0x1ee>
 800a232:	2b00      	cmp	r3, #0
 800a234:	d0c5      	beq.n	800a1c2 <_vfiprintf_r+0x176>
 800a236:	9105      	str	r1, [sp, #20]
 800a238:	e7c3      	b.n	800a1c2 <_vfiprintf_r+0x176>
 800a23a:	4604      	mov	r4, r0
 800a23c:	2301      	movs	r3, #1
 800a23e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a242:	e7f0      	b.n	800a226 <_vfiprintf_r+0x1da>
 800a244:	ab03      	add	r3, sp, #12
 800a246:	9300      	str	r3, [sp, #0]
 800a248:	462a      	mov	r2, r5
 800a24a:	4630      	mov	r0, r6
 800a24c:	4b15      	ldr	r3, [pc, #84]	; (800a2a4 <_vfiprintf_r+0x258>)
 800a24e:	a904      	add	r1, sp, #16
 800a250:	f3af 8000 	nop.w
 800a254:	4607      	mov	r7, r0
 800a256:	1c78      	adds	r0, r7, #1
 800a258:	d1d6      	bne.n	800a208 <_vfiprintf_r+0x1bc>
 800a25a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a25c:	07d9      	lsls	r1, r3, #31
 800a25e:	d405      	bmi.n	800a26c <_vfiprintf_r+0x220>
 800a260:	89ab      	ldrh	r3, [r5, #12]
 800a262:	059a      	lsls	r2, r3, #22
 800a264:	d402      	bmi.n	800a26c <_vfiprintf_r+0x220>
 800a266:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a268:	f7ff fcfb 	bl	8009c62 <__retarget_lock_release_recursive>
 800a26c:	89ab      	ldrh	r3, [r5, #12]
 800a26e:	065b      	lsls	r3, r3, #25
 800a270:	f53f af12 	bmi.w	800a098 <_vfiprintf_r+0x4c>
 800a274:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a276:	e711      	b.n	800a09c <_vfiprintf_r+0x50>
 800a278:	ab03      	add	r3, sp, #12
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	462a      	mov	r2, r5
 800a27e:	4630      	mov	r0, r6
 800a280:	4b08      	ldr	r3, [pc, #32]	; (800a2a4 <_vfiprintf_r+0x258>)
 800a282:	a904      	add	r1, sp, #16
 800a284:	f000 f882 	bl	800a38c <_printf_i>
 800a288:	e7e4      	b.n	800a254 <_vfiprintf_r+0x208>
 800a28a:	bf00      	nop
 800a28c:	0800b02c 	.word	0x0800b02c
 800a290:	0800b04c 	.word	0x0800b04c
 800a294:	0800b00c 	.word	0x0800b00c
 800a298:	0800b06c 	.word	0x0800b06c
 800a29c:	0800b076 	.word	0x0800b076
 800a2a0:	00000000 	.word	0x00000000
 800a2a4:	0800a027 	.word	0x0800a027
 800a2a8:	0800b072 	.word	0x0800b072

0800a2ac <_printf_common>:
 800a2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b0:	4616      	mov	r6, r2
 800a2b2:	4699      	mov	r9, r3
 800a2b4:	688a      	ldr	r2, [r1, #8]
 800a2b6:	690b      	ldr	r3, [r1, #16]
 800a2b8:	4607      	mov	r7, r0
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	bfb8      	it	lt
 800a2be:	4613      	movlt	r3, r2
 800a2c0:	6033      	str	r3, [r6, #0]
 800a2c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2cc:	b10a      	cbz	r2, 800a2d2 <_printf_common+0x26>
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	6033      	str	r3, [r6, #0]
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	0699      	lsls	r1, r3, #26
 800a2d6:	bf42      	ittt	mi
 800a2d8:	6833      	ldrmi	r3, [r6, #0]
 800a2da:	3302      	addmi	r3, #2
 800a2dc:	6033      	strmi	r3, [r6, #0]
 800a2de:	6825      	ldr	r5, [r4, #0]
 800a2e0:	f015 0506 	ands.w	r5, r5, #6
 800a2e4:	d106      	bne.n	800a2f4 <_printf_common+0x48>
 800a2e6:	f104 0a19 	add.w	sl, r4, #25
 800a2ea:	68e3      	ldr	r3, [r4, #12]
 800a2ec:	6832      	ldr	r2, [r6, #0]
 800a2ee:	1a9b      	subs	r3, r3, r2
 800a2f0:	42ab      	cmp	r3, r5
 800a2f2:	dc28      	bgt.n	800a346 <_printf_common+0x9a>
 800a2f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2f8:	1e13      	subs	r3, r2, #0
 800a2fa:	6822      	ldr	r2, [r4, #0]
 800a2fc:	bf18      	it	ne
 800a2fe:	2301      	movne	r3, #1
 800a300:	0692      	lsls	r2, r2, #26
 800a302:	d42d      	bmi.n	800a360 <_printf_common+0xb4>
 800a304:	4649      	mov	r1, r9
 800a306:	4638      	mov	r0, r7
 800a308:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a30c:	47c0      	blx	r8
 800a30e:	3001      	adds	r0, #1
 800a310:	d020      	beq.n	800a354 <_printf_common+0xa8>
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	68e5      	ldr	r5, [r4, #12]
 800a316:	f003 0306 	and.w	r3, r3, #6
 800a31a:	2b04      	cmp	r3, #4
 800a31c:	bf18      	it	ne
 800a31e:	2500      	movne	r5, #0
 800a320:	6832      	ldr	r2, [r6, #0]
 800a322:	f04f 0600 	mov.w	r6, #0
 800a326:	68a3      	ldr	r3, [r4, #8]
 800a328:	bf08      	it	eq
 800a32a:	1aad      	subeq	r5, r5, r2
 800a32c:	6922      	ldr	r2, [r4, #16]
 800a32e:	bf08      	it	eq
 800a330:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a334:	4293      	cmp	r3, r2
 800a336:	bfc4      	itt	gt
 800a338:	1a9b      	subgt	r3, r3, r2
 800a33a:	18ed      	addgt	r5, r5, r3
 800a33c:	341a      	adds	r4, #26
 800a33e:	42b5      	cmp	r5, r6
 800a340:	d11a      	bne.n	800a378 <_printf_common+0xcc>
 800a342:	2000      	movs	r0, #0
 800a344:	e008      	b.n	800a358 <_printf_common+0xac>
 800a346:	2301      	movs	r3, #1
 800a348:	4652      	mov	r2, sl
 800a34a:	4649      	mov	r1, r9
 800a34c:	4638      	mov	r0, r7
 800a34e:	47c0      	blx	r8
 800a350:	3001      	adds	r0, #1
 800a352:	d103      	bne.n	800a35c <_printf_common+0xb0>
 800a354:	f04f 30ff 	mov.w	r0, #4294967295
 800a358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a35c:	3501      	adds	r5, #1
 800a35e:	e7c4      	b.n	800a2ea <_printf_common+0x3e>
 800a360:	2030      	movs	r0, #48	; 0x30
 800a362:	18e1      	adds	r1, r4, r3
 800a364:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a368:	1c5a      	adds	r2, r3, #1
 800a36a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a36e:	4422      	add	r2, r4
 800a370:	3302      	adds	r3, #2
 800a372:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a376:	e7c5      	b.n	800a304 <_printf_common+0x58>
 800a378:	2301      	movs	r3, #1
 800a37a:	4622      	mov	r2, r4
 800a37c:	4649      	mov	r1, r9
 800a37e:	4638      	mov	r0, r7
 800a380:	47c0      	blx	r8
 800a382:	3001      	adds	r0, #1
 800a384:	d0e6      	beq.n	800a354 <_printf_common+0xa8>
 800a386:	3601      	adds	r6, #1
 800a388:	e7d9      	b.n	800a33e <_printf_common+0x92>
	...

0800a38c <_printf_i>:
 800a38c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a390:	460c      	mov	r4, r1
 800a392:	7e27      	ldrb	r7, [r4, #24]
 800a394:	4691      	mov	r9, r2
 800a396:	2f78      	cmp	r7, #120	; 0x78
 800a398:	4680      	mov	r8, r0
 800a39a:	469a      	mov	sl, r3
 800a39c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a39e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3a2:	d807      	bhi.n	800a3b4 <_printf_i+0x28>
 800a3a4:	2f62      	cmp	r7, #98	; 0x62
 800a3a6:	d80a      	bhi.n	800a3be <_printf_i+0x32>
 800a3a8:	2f00      	cmp	r7, #0
 800a3aa:	f000 80d9 	beq.w	800a560 <_printf_i+0x1d4>
 800a3ae:	2f58      	cmp	r7, #88	; 0x58
 800a3b0:	f000 80a4 	beq.w	800a4fc <_printf_i+0x170>
 800a3b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a3b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a3bc:	e03a      	b.n	800a434 <_printf_i+0xa8>
 800a3be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a3c2:	2b15      	cmp	r3, #21
 800a3c4:	d8f6      	bhi.n	800a3b4 <_printf_i+0x28>
 800a3c6:	a001      	add	r0, pc, #4	; (adr r0, 800a3cc <_printf_i+0x40>)
 800a3c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a3cc:	0800a425 	.word	0x0800a425
 800a3d0:	0800a439 	.word	0x0800a439
 800a3d4:	0800a3b5 	.word	0x0800a3b5
 800a3d8:	0800a3b5 	.word	0x0800a3b5
 800a3dc:	0800a3b5 	.word	0x0800a3b5
 800a3e0:	0800a3b5 	.word	0x0800a3b5
 800a3e4:	0800a439 	.word	0x0800a439
 800a3e8:	0800a3b5 	.word	0x0800a3b5
 800a3ec:	0800a3b5 	.word	0x0800a3b5
 800a3f0:	0800a3b5 	.word	0x0800a3b5
 800a3f4:	0800a3b5 	.word	0x0800a3b5
 800a3f8:	0800a547 	.word	0x0800a547
 800a3fc:	0800a469 	.word	0x0800a469
 800a400:	0800a529 	.word	0x0800a529
 800a404:	0800a3b5 	.word	0x0800a3b5
 800a408:	0800a3b5 	.word	0x0800a3b5
 800a40c:	0800a569 	.word	0x0800a569
 800a410:	0800a3b5 	.word	0x0800a3b5
 800a414:	0800a469 	.word	0x0800a469
 800a418:	0800a3b5 	.word	0x0800a3b5
 800a41c:	0800a3b5 	.word	0x0800a3b5
 800a420:	0800a531 	.word	0x0800a531
 800a424:	680b      	ldr	r3, [r1, #0]
 800a426:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a42a:	1d1a      	adds	r2, r3, #4
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	600a      	str	r2, [r1, #0]
 800a430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a434:	2301      	movs	r3, #1
 800a436:	e0a4      	b.n	800a582 <_printf_i+0x1f6>
 800a438:	6825      	ldr	r5, [r4, #0]
 800a43a:	6808      	ldr	r0, [r1, #0]
 800a43c:	062e      	lsls	r6, r5, #24
 800a43e:	f100 0304 	add.w	r3, r0, #4
 800a442:	d50a      	bpl.n	800a45a <_printf_i+0xce>
 800a444:	6805      	ldr	r5, [r0, #0]
 800a446:	600b      	str	r3, [r1, #0]
 800a448:	2d00      	cmp	r5, #0
 800a44a:	da03      	bge.n	800a454 <_printf_i+0xc8>
 800a44c:	232d      	movs	r3, #45	; 0x2d
 800a44e:	426d      	negs	r5, r5
 800a450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a454:	230a      	movs	r3, #10
 800a456:	485e      	ldr	r0, [pc, #376]	; (800a5d0 <_printf_i+0x244>)
 800a458:	e019      	b.n	800a48e <_printf_i+0x102>
 800a45a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a45e:	6805      	ldr	r5, [r0, #0]
 800a460:	600b      	str	r3, [r1, #0]
 800a462:	bf18      	it	ne
 800a464:	b22d      	sxthne	r5, r5
 800a466:	e7ef      	b.n	800a448 <_printf_i+0xbc>
 800a468:	680b      	ldr	r3, [r1, #0]
 800a46a:	6825      	ldr	r5, [r4, #0]
 800a46c:	1d18      	adds	r0, r3, #4
 800a46e:	6008      	str	r0, [r1, #0]
 800a470:	0628      	lsls	r0, r5, #24
 800a472:	d501      	bpl.n	800a478 <_printf_i+0xec>
 800a474:	681d      	ldr	r5, [r3, #0]
 800a476:	e002      	b.n	800a47e <_printf_i+0xf2>
 800a478:	0669      	lsls	r1, r5, #25
 800a47a:	d5fb      	bpl.n	800a474 <_printf_i+0xe8>
 800a47c:	881d      	ldrh	r5, [r3, #0]
 800a47e:	2f6f      	cmp	r7, #111	; 0x6f
 800a480:	bf0c      	ite	eq
 800a482:	2308      	moveq	r3, #8
 800a484:	230a      	movne	r3, #10
 800a486:	4852      	ldr	r0, [pc, #328]	; (800a5d0 <_printf_i+0x244>)
 800a488:	2100      	movs	r1, #0
 800a48a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a48e:	6866      	ldr	r6, [r4, #4]
 800a490:	2e00      	cmp	r6, #0
 800a492:	bfa8      	it	ge
 800a494:	6821      	ldrge	r1, [r4, #0]
 800a496:	60a6      	str	r6, [r4, #8]
 800a498:	bfa4      	itt	ge
 800a49a:	f021 0104 	bicge.w	r1, r1, #4
 800a49e:	6021      	strge	r1, [r4, #0]
 800a4a0:	b90d      	cbnz	r5, 800a4a6 <_printf_i+0x11a>
 800a4a2:	2e00      	cmp	r6, #0
 800a4a4:	d04d      	beq.n	800a542 <_printf_i+0x1b6>
 800a4a6:	4616      	mov	r6, r2
 800a4a8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a4ac:	fb03 5711 	mls	r7, r3, r1, r5
 800a4b0:	5dc7      	ldrb	r7, [r0, r7]
 800a4b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a4b6:	462f      	mov	r7, r5
 800a4b8:	42bb      	cmp	r3, r7
 800a4ba:	460d      	mov	r5, r1
 800a4bc:	d9f4      	bls.n	800a4a8 <_printf_i+0x11c>
 800a4be:	2b08      	cmp	r3, #8
 800a4c0:	d10b      	bne.n	800a4da <_printf_i+0x14e>
 800a4c2:	6823      	ldr	r3, [r4, #0]
 800a4c4:	07df      	lsls	r7, r3, #31
 800a4c6:	d508      	bpl.n	800a4da <_printf_i+0x14e>
 800a4c8:	6923      	ldr	r3, [r4, #16]
 800a4ca:	6861      	ldr	r1, [r4, #4]
 800a4cc:	4299      	cmp	r1, r3
 800a4ce:	bfde      	ittt	le
 800a4d0:	2330      	movle	r3, #48	; 0x30
 800a4d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a4d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a4da:	1b92      	subs	r2, r2, r6
 800a4dc:	6122      	str	r2, [r4, #16]
 800a4de:	464b      	mov	r3, r9
 800a4e0:	4621      	mov	r1, r4
 800a4e2:	4640      	mov	r0, r8
 800a4e4:	f8cd a000 	str.w	sl, [sp]
 800a4e8:	aa03      	add	r2, sp, #12
 800a4ea:	f7ff fedf 	bl	800a2ac <_printf_common>
 800a4ee:	3001      	adds	r0, #1
 800a4f0:	d14c      	bne.n	800a58c <_printf_i+0x200>
 800a4f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f6:	b004      	add	sp, #16
 800a4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4fc:	4834      	ldr	r0, [pc, #208]	; (800a5d0 <_printf_i+0x244>)
 800a4fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a502:	680e      	ldr	r6, [r1, #0]
 800a504:	6823      	ldr	r3, [r4, #0]
 800a506:	f856 5b04 	ldr.w	r5, [r6], #4
 800a50a:	061f      	lsls	r7, r3, #24
 800a50c:	600e      	str	r6, [r1, #0]
 800a50e:	d514      	bpl.n	800a53a <_printf_i+0x1ae>
 800a510:	07d9      	lsls	r1, r3, #31
 800a512:	bf44      	itt	mi
 800a514:	f043 0320 	orrmi.w	r3, r3, #32
 800a518:	6023      	strmi	r3, [r4, #0]
 800a51a:	b91d      	cbnz	r5, 800a524 <_printf_i+0x198>
 800a51c:	6823      	ldr	r3, [r4, #0]
 800a51e:	f023 0320 	bic.w	r3, r3, #32
 800a522:	6023      	str	r3, [r4, #0]
 800a524:	2310      	movs	r3, #16
 800a526:	e7af      	b.n	800a488 <_printf_i+0xfc>
 800a528:	6823      	ldr	r3, [r4, #0]
 800a52a:	f043 0320 	orr.w	r3, r3, #32
 800a52e:	6023      	str	r3, [r4, #0]
 800a530:	2378      	movs	r3, #120	; 0x78
 800a532:	4828      	ldr	r0, [pc, #160]	; (800a5d4 <_printf_i+0x248>)
 800a534:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a538:	e7e3      	b.n	800a502 <_printf_i+0x176>
 800a53a:	065e      	lsls	r6, r3, #25
 800a53c:	bf48      	it	mi
 800a53e:	b2ad      	uxthmi	r5, r5
 800a540:	e7e6      	b.n	800a510 <_printf_i+0x184>
 800a542:	4616      	mov	r6, r2
 800a544:	e7bb      	b.n	800a4be <_printf_i+0x132>
 800a546:	680b      	ldr	r3, [r1, #0]
 800a548:	6826      	ldr	r6, [r4, #0]
 800a54a:	1d1d      	adds	r5, r3, #4
 800a54c:	6960      	ldr	r0, [r4, #20]
 800a54e:	600d      	str	r5, [r1, #0]
 800a550:	0635      	lsls	r5, r6, #24
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	d501      	bpl.n	800a55a <_printf_i+0x1ce>
 800a556:	6018      	str	r0, [r3, #0]
 800a558:	e002      	b.n	800a560 <_printf_i+0x1d4>
 800a55a:	0671      	lsls	r1, r6, #25
 800a55c:	d5fb      	bpl.n	800a556 <_printf_i+0x1ca>
 800a55e:	8018      	strh	r0, [r3, #0]
 800a560:	2300      	movs	r3, #0
 800a562:	4616      	mov	r6, r2
 800a564:	6123      	str	r3, [r4, #16]
 800a566:	e7ba      	b.n	800a4de <_printf_i+0x152>
 800a568:	680b      	ldr	r3, [r1, #0]
 800a56a:	1d1a      	adds	r2, r3, #4
 800a56c:	600a      	str	r2, [r1, #0]
 800a56e:	681e      	ldr	r6, [r3, #0]
 800a570:	2100      	movs	r1, #0
 800a572:	4630      	mov	r0, r6
 800a574:	6862      	ldr	r2, [r4, #4]
 800a576:	f000 f8c9 	bl	800a70c <memchr>
 800a57a:	b108      	cbz	r0, 800a580 <_printf_i+0x1f4>
 800a57c:	1b80      	subs	r0, r0, r6
 800a57e:	6060      	str	r0, [r4, #4]
 800a580:	6863      	ldr	r3, [r4, #4]
 800a582:	6123      	str	r3, [r4, #16]
 800a584:	2300      	movs	r3, #0
 800a586:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a58a:	e7a8      	b.n	800a4de <_printf_i+0x152>
 800a58c:	4632      	mov	r2, r6
 800a58e:	4649      	mov	r1, r9
 800a590:	4640      	mov	r0, r8
 800a592:	6923      	ldr	r3, [r4, #16]
 800a594:	47d0      	blx	sl
 800a596:	3001      	adds	r0, #1
 800a598:	d0ab      	beq.n	800a4f2 <_printf_i+0x166>
 800a59a:	6823      	ldr	r3, [r4, #0]
 800a59c:	079b      	lsls	r3, r3, #30
 800a59e:	d413      	bmi.n	800a5c8 <_printf_i+0x23c>
 800a5a0:	68e0      	ldr	r0, [r4, #12]
 800a5a2:	9b03      	ldr	r3, [sp, #12]
 800a5a4:	4298      	cmp	r0, r3
 800a5a6:	bfb8      	it	lt
 800a5a8:	4618      	movlt	r0, r3
 800a5aa:	e7a4      	b.n	800a4f6 <_printf_i+0x16a>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	4632      	mov	r2, r6
 800a5b0:	4649      	mov	r1, r9
 800a5b2:	4640      	mov	r0, r8
 800a5b4:	47d0      	blx	sl
 800a5b6:	3001      	adds	r0, #1
 800a5b8:	d09b      	beq.n	800a4f2 <_printf_i+0x166>
 800a5ba:	3501      	adds	r5, #1
 800a5bc:	68e3      	ldr	r3, [r4, #12]
 800a5be:	9903      	ldr	r1, [sp, #12]
 800a5c0:	1a5b      	subs	r3, r3, r1
 800a5c2:	42ab      	cmp	r3, r5
 800a5c4:	dcf2      	bgt.n	800a5ac <_printf_i+0x220>
 800a5c6:	e7eb      	b.n	800a5a0 <_printf_i+0x214>
 800a5c8:	2500      	movs	r5, #0
 800a5ca:	f104 0619 	add.w	r6, r4, #25
 800a5ce:	e7f5      	b.n	800a5bc <_printf_i+0x230>
 800a5d0:	0800b07d 	.word	0x0800b07d
 800a5d4:	0800b08e 	.word	0x0800b08e

0800a5d8 <__sread>:
 800a5d8:	b510      	push	{r4, lr}
 800a5da:	460c      	mov	r4, r1
 800a5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5e0:	f000 f8e2 	bl	800a7a8 <_read_r>
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	bfab      	itete	ge
 800a5e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5ea:	89a3      	ldrhlt	r3, [r4, #12]
 800a5ec:	181b      	addge	r3, r3, r0
 800a5ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5f2:	bfac      	ite	ge
 800a5f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5f6:	81a3      	strhlt	r3, [r4, #12]
 800a5f8:	bd10      	pop	{r4, pc}

0800a5fa <__swrite>:
 800a5fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5fe:	461f      	mov	r7, r3
 800a600:	898b      	ldrh	r3, [r1, #12]
 800a602:	4605      	mov	r5, r0
 800a604:	05db      	lsls	r3, r3, #23
 800a606:	460c      	mov	r4, r1
 800a608:	4616      	mov	r6, r2
 800a60a:	d505      	bpl.n	800a618 <__swrite+0x1e>
 800a60c:	2302      	movs	r3, #2
 800a60e:	2200      	movs	r2, #0
 800a610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a614:	f000 f868 	bl	800a6e8 <_lseek_r>
 800a618:	89a3      	ldrh	r3, [r4, #12]
 800a61a:	4632      	mov	r2, r6
 800a61c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a620:	81a3      	strh	r3, [r4, #12]
 800a622:	4628      	mov	r0, r5
 800a624:	463b      	mov	r3, r7
 800a626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a62a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a62e:	f000 b817 	b.w	800a660 <_write_r>

0800a632 <__sseek>:
 800a632:	b510      	push	{r4, lr}
 800a634:	460c      	mov	r4, r1
 800a636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a63a:	f000 f855 	bl	800a6e8 <_lseek_r>
 800a63e:	1c43      	adds	r3, r0, #1
 800a640:	89a3      	ldrh	r3, [r4, #12]
 800a642:	bf15      	itete	ne
 800a644:	6560      	strne	r0, [r4, #84]	; 0x54
 800a646:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a64a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a64e:	81a3      	strheq	r3, [r4, #12]
 800a650:	bf18      	it	ne
 800a652:	81a3      	strhne	r3, [r4, #12]
 800a654:	bd10      	pop	{r4, pc}

0800a656 <__sclose>:
 800a656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a65a:	f000 b813 	b.w	800a684 <_close_r>
	...

0800a660 <_write_r>:
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	4604      	mov	r4, r0
 800a664:	4608      	mov	r0, r1
 800a666:	4611      	mov	r1, r2
 800a668:	2200      	movs	r2, #0
 800a66a:	4d05      	ldr	r5, [pc, #20]	; (800a680 <_write_r+0x20>)
 800a66c:	602a      	str	r2, [r5, #0]
 800a66e:	461a      	mov	r2, r3
 800a670:	f7f8 fdf7 	bl	8003262 <_write>
 800a674:	1c43      	adds	r3, r0, #1
 800a676:	d102      	bne.n	800a67e <_write_r+0x1e>
 800a678:	682b      	ldr	r3, [r5, #0]
 800a67a:	b103      	cbz	r3, 800a67e <_write_r+0x1e>
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	bd38      	pop	{r3, r4, r5, pc}
 800a680:	20001b08 	.word	0x20001b08

0800a684 <_close_r>:
 800a684:	b538      	push	{r3, r4, r5, lr}
 800a686:	2300      	movs	r3, #0
 800a688:	4d05      	ldr	r5, [pc, #20]	; (800a6a0 <_close_r+0x1c>)
 800a68a:	4604      	mov	r4, r0
 800a68c:	4608      	mov	r0, r1
 800a68e:	602b      	str	r3, [r5, #0]
 800a690:	f7f8 fe03 	bl	800329a <_close>
 800a694:	1c43      	adds	r3, r0, #1
 800a696:	d102      	bne.n	800a69e <_close_r+0x1a>
 800a698:	682b      	ldr	r3, [r5, #0]
 800a69a:	b103      	cbz	r3, 800a69e <_close_r+0x1a>
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	bd38      	pop	{r3, r4, r5, pc}
 800a6a0:	20001b08 	.word	0x20001b08

0800a6a4 <_fstat_r>:
 800a6a4:	b538      	push	{r3, r4, r5, lr}
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	4d06      	ldr	r5, [pc, #24]	; (800a6c4 <_fstat_r+0x20>)
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	4608      	mov	r0, r1
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	602b      	str	r3, [r5, #0]
 800a6b2:	f7f8 fdfd 	bl	80032b0 <_fstat>
 800a6b6:	1c43      	adds	r3, r0, #1
 800a6b8:	d102      	bne.n	800a6c0 <_fstat_r+0x1c>
 800a6ba:	682b      	ldr	r3, [r5, #0]
 800a6bc:	b103      	cbz	r3, 800a6c0 <_fstat_r+0x1c>
 800a6be:	6023      	str	r3, [r4, #0]
 800a6c0:	bd38      	pop	{r3, r4, r5, pc}
 800a6c2:	bf00      	nop
 800a6c4:	20001b08 	.word	0x20001b08

0800a6c8 <_isatty_r>:
 800a6c8:	b538      	push	{r3, r4, r5, lr}
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	4d05      	ldr	r5, [pc, #20]	; (800a6e4 <_isatty_r+0x1c>)
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	4608      	mov	r0, r1
 800a6d2:	602b      	str	r3, [r5, #0]
 800a6d4:	f7f8 fdfb 	bl	80032ce <_isatty>
 800a6d8:	1c43      	adds	r3, r0, #1
 800a6da:	d102      	bne.n	800a6e2 <_isatty_r+0x1a>
 800a6dc:	682b      	ldr	r3, [r5, #0]
 800a6de:	b103      	cbz	r3, 800a6e2 <_isatty_r+0x1a>
 800a6e0:	6023      	str	r3, [r4, #0]
 800a6e2:	bd38      	pop	{r3, r4, r5, pc}
 800a6e4:	20001b08 	.word	0x20001b08

0800a6e8 <_lseek_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	4608      	mov	r0, r1
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	4d05      	ldr	r5, [pc, #20]	; (800a708 <_lseek_r+0x20>)
 800a6f4:	602a      	str	r2, [r5, #0]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	f7f8 fdf3 	bl	80032e2 <_lseek>
 800a6fc:	1c43      	adds	r3, r0, #1
 800a6fe:	d102      	bne.n	800a706 <_lseek_r+0x1e>
 800a700:	682b      	ldr	r3, [r5, #0]
 800a702:	b103      	cbz	r3, 800a706 <_lseek_r+0x1e>
 800a704:	6023      	str	r3, [r4, #0]
 800a706:	bd38      	pop	{r3, r4, r5, pc}
 800a708:	20001b08 	.word	0x20001b08

0800a70c <memchr>:
 800a70c:	4603      	mov	r3, r0
 800a70e:	b510      	push	{r4, lr}
 800a710:	b2c9      	uxtb	r1, r1
 800a712:	4402      	add	r2, r0
 800a714:	4293      	cmp	r3, r2
 800a716:	4618      	mov	r0, r3
 800a718:	d101      	bne.n	800a71e <memchr+0x12>
 800a71a:	2000      	movs	r0, #0
 800a71c:	e003      	b.n	800a726 <memchr+0x1a>
 800a71e:	7804      	ldrb	r4, [r0, #0]
 800a720:	3301      	adds	r3, #1
 800a722:	428c      	cmp	r4, r1
 800a724:	d1f6      	bne.n	800a714 <memchr+0x8>
 800a726:	bd10      	pop	{r4, pc}

0800a728 <memmove>:
 800a728:	4288      	cmp	r0, r1
 800a72a:	b510      	push	{r4, lr}
 800a72c:	eb01 0402 	add.w	r4, r1, r2
 800a730:	d902      	bls.n	800a738 <memmove+0x10>
 800a732:	4284      	cmp	r4, r0
 800a734:	4623      	mov	r3, r4
 800a736:	d807      	bhi.n	800a748 <memmove+0x20>
 800a738:	1e43      	subs	r3, r0, #1
 800a73a:	42a1      	cmp	r1, r4
 800a73c:	d008      	beq.n	800a750 <memmove+0x28>
 800a73e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a742:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a746:	e7f8      	b.n	800a73a <memmove+0x12>
 800a748:	4601      	mov	r1, r0
 800a74a:	4402      	add	r2, r0
 800a74c:	428a      	cmp	r2, r1
 800a74e:	d100      	bne.n	800a752 <memmove+0x2a>
 800a750:	bd10      	pop	{r4, pc}
 800a752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a75a:	e7f7      	b.n	800a74c <memmove+0x24>

0800a75c <_realloc_r>:
 800a75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75e:	4607      	mov	r7, r0
 800a760:	4614      	mov	r4, r2
 800a762:	460e      	mov	r6, r1
 800a764:	b921      	cbnz	r1, 800a770 <_realloc_r+0x14>
 800a766:	4611      	mov	r1, r2
 800a768:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a76c:	f7fe bee8 	b.w	8009540 <_malloc_r>
 800a770:	b922      	cbnz	r2, 800a77c <_realloc_r+0x20>
 800a772:	f7fe fe99 	bl	80094a8 <_free_r>
 800a776:	4625      	mov	r5, r4
 800a778:	4628      	mov	r0, r5
 800a77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a77c:	f000 f826 	bl	800a7cc <_malloc_usable_size_r>
 800a780:	42a0      	cmp	r0, r4
 800a782:	d20f      	bcs.n	800a7a4 <_realloc_r+0x48>
 800a784:	4621      	mov	r1, r4
 800a786:	4638      	mov	r0, r7
 800a788:	f7fe feda 	bl	8009540 <_malloc_r>
 800a78c:	4605      	mov	r5, r0
 800a78e:	2800      	cmp	r0, #0
 800a790:	d0f2      	beq.n	800a778 <_realloc_r+0x1c>
 800a792:	4631      	mov	r1, r6
 800a794:	4622      	mov	r2, r4
 800a796:	f7fe fe71 	bl	800947c <memcpy>
 800a79a:	4631      	mov	r1, r6
 800a79c:	4638      	mov	r0, r7
 800a79e:	f7fe fe83 	bl	80094a8 <_free_r>
 800a7a2:	e7e9      	b.n	800a778 <_realloc_r+0x1c>
 800a7a4:	4635      	mov	r5, r6
 800a7a6:	e7e7      	b.n	800a778 <_realloc_r+0x1c>

0800a7a8 <_read_r>:
 800a7a8:	b538      	push	{r3, r4, r5, lr}
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	4608      	mov	r0, r1
 800a7ae:	4611      	mov	r1, r2
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	4d05      	ldr	r5, [pc, #20]	; (800a7c8 <_read_r+0x20>)
 800a7b4:	602a      	str	r2, [r5, #0]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	f7f8 fd36 	bl	8003228 <_read>
 800a7bc:	1c43      	adds	r3, r0, #1
 800a7be:	d102      	bne.n	800a7c6 <_read_r+0x1e>
 800a7c0:	682b      	ldr	r3, [r5, #0]
 800a7c2:	b103      	cbz	r3, 800a7c6 <_read_r+0x1e>
 800a7c4:	6023      	str	r3, [r4, #0]
 800a7c6:	bd38      	pop	{r3, r4, r5, pc}
 800a7c8:	20001b08 	.word	0x20001b08

0800a7cc <_malloc_usable_size_r>:
 800a7cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7d0:	1f18      	subs	r0, r3, #4
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	bfbc      	itt	lt
 800a7d6:	580b      	ldrlt	r3, [r1, r0]
 800a7d8:	18c0      	addlt	r0, r0, r3
 800a7da:	4770      	bx	lr

0800a7dc <_init>:
 800a7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7de:	bf00      	nop
 800a7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7e2:	bc08      	pop	{r3}
 800a7e4:	469e      	mov	lr, r3
 800a7e6:	4770      	bx	lr

0800a7e8 <_fini>:
 800a7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ea:	bf00      	nop
 800a7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ee:	bc08      	pop	{r3}
 800a7f0:	469e      	mov	lr, r3
 800a7f2:	4770      	bx	lr
